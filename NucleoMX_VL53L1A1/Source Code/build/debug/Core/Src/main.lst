ARM GAS  C:\Temp\cc6JC66E.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_DMA_Init,"ax",%progbits
  21              		.align	1
  22              		.global	MX_DMA_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MX_DMA_Init:
  28              	.LFB140:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "app_tof.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "VL53L1A1_Simulink.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 2


  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_left;
  48:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_centre;
  49:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_right;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  52:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_TIM2_Init(void);
  58:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  63:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  64:Core/Src/main.c **** uint8_t clearToSend = 0;
  65:Core/Src/main.c **** uint8_t calibrated = 0;
  66:Core/Src/main.c **** /* USER CODE END 0 */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /**
  69:Core/Src/main.c ****   * @brief  The application entry point.
  70:Core/Src/main.c ****   * @retval int
  71:Core/Src/main.c ****   */
  72:Core/Src/main.c **** int main(void)
  73:Core/Src/main.c **** {
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE END 1 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  82:Core/Src/main.c ****   HAL_Init();
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END Init */
  87:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 3


  88:Core/Src/main.c ****   /* Configure the system clock */
  89:Core/Src/main.c ****   SystemClock_Config();
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Initialize all configured peripherals */
  96:Core/Src/main.c ****   MX_GPIO_Init();
  97:Core/Src/main.c ****   MX_DMA_Init();
  98:Core/Src/main.c ****   MX_TIM2_Init();
  99:Core/Src/main.c ****   MX_TOF_Init();
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 101:Core/Src/main.c ****   initVL53L1A1();
 102:Core/Src/main.c ****   /* USER CODE END 2 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Infinite loop */
 105:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 106:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 107:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 108:Core/Src/main.c ****   while (1)
 109:Core/Src/main.c ****   {
 110:Core/Src/main.c ****     getVL53L1A1();
 111:Core/Src/main.c ****     if (clearToSend == 1){
 112:Core/Src/main.c ****       sendToSimulink();
 113:Core/Src/main.c ****       clearToSend = 0;
 114:Core/Src/main.c ****     }
 115:Core/Src/main.c ****     
 116:Core/Src/main.c ****     
 117:Core/Src/main.c ****     /* USER CODE END WHILE */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   // MX_TOF_Process();
 120:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 121:Core/Src/main.c ****   }
 122:Core/Src/main.c ****   /* USER CODE END 3 */
 123:Core/Src/main.c **** }
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** /**
 126:Core/Src/main.c ****   * @brief System Clock Configuration
 127:Core/Src/main.c ****   * @retval None
 128:Core/Src/main.c ****   */
 129:Core/Src/main.c **** void SystemClock_Config(void)
 130:Core/Src/main.c **** {
 131:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 132:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 135:Core/Src/main.c ****   */
 136:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 140:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 143:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 144:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  C:\Temp\cc6JC66E.s 			page 4


 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 151:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 152:Core/Src/main.c ****   {
 153:Core/Src/main.c ****     Error_Handler();
 154:Core/Src/main.c ****   }
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 159:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 160:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 161:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 162:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 163:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 166:Core/Src/main.c ****   {
 167:Core/Src/main.c ****     Error_Handler();
 168:Core/Src/main.c ****   }
 169:Core/Src/main.c **** }
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** /**
 172:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 173:Core/Src/main.c ****   * @param None
 174:Core/Src/main.c ****   * @retval None
 175:Core/Src/main.c ****   */
 176:Core/Src/main.c **** static void MX_TIM2_Init(void)
 177:Core/Src/main.c **** {
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 184:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 189:Core/Src/main.c ****   htim2.Instance = TIM2;
 190:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 191:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 192:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 193:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 194:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 195:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 196:Core/Src/main.c ****   {
 197:Core/Src/main.c ****     Error_Handler();
 198:Core/Src/main.c ****   }
 199:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 200:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 201:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc6JC66E.s 			page 5


 202:Core/Src/main.c ****     Error_Handler();
 203:Core/Src/main.c ****   }
 204:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 205:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 206:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 207:Core/Src/main.c ****   {
 208:Core/Src/main.c ****     Error_Handler();
 209:Core/Src/main.c ****   }
 210:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** }
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** /**
 217:Core/Src/main.c ****   * Enable DMA controller clock
 218:Core/Src/main.c ****   */
 219:Core/Src/main.c **** void MX_DMA_Init(void)
 220:Core/Src/main.c **** {
  29              		.loc 1 220 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 00B5     		push	{lr}
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              		.cfi_def_cfa_offset 16
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* DMA controller clock enable */
 223:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
  38              		.loc 1 223 3 view .LVU1
  39              	.LBB4:
  40              		.loc 1 223 3 view .LVU2
  41 0004 0021     		movs	r1, #0
  42 0006 0191     		str	r1, [sp, #4]
  43              		.loc 1 223 3 view .LVU3
  44 0008 094B     		ldr	r3, .L3
  45 000a 1A6B     		ldr	r2, [r3, #48]
  46 000c 42F40012 		orr	r2, r2, #2097152
  47 0010 1A63     		str	r2, [r3, #48]
  48              		.loc 1 223 3 view .LVU4
  49 0012 1B6B     		ldr	r3, [r3, #48]
  50 0014 03F40013 		and	r3, r3, #2097152
  51 0018 0193     		str	r3, [sp, #4]
  52              		.loc 1 223 3 view .LVU5
  53 001a 019B     		ldr	r3, [sp, #4]
  54              	.LBE4:
  55              		.loc 1 223 3 view .LVU6
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* DMA interrupt init */
 226:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 227:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  56              		.loc 1 227 3 view .LVU7
  57 001c 0A46     		mov	r2, r1
  58 001e 1020     		movs	r0, #16
  59 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  C:\Temp\cc6JC66E.s 			page 6


  60              	.LVL0:
 228:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  61              		.loc 1 228 3 view .LVU8
  62 0024 1020     		movs	r0, #16
  63 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  64              	.LVL1:
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** }
  65              		.loc 1 230 1 is_stmt 0 view .LVU9
  66 002a 03B0     		add	sp, sp, #12
  67              		.cfi_def_cfa_offset 4
  68              		@ sp needed
  69 002c 5DF804FB 		ldr	pc, [sp], #4
  70              	.L4:
  71              		.align	2
  72              	.L3:
  73 0030 00380240 		.word	1073887232
  74              		.cfi_endproc
  75              	.LFE140:
  77              		.section	.text.MX_GPIO_Init,"ax",%progbits
  78              		.align	1
  79              		.global	MX_GPIO_Init
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	MX_GPIO_Init:
  85              	.LFB141:
 231:Core/Src/main.c **** 
 232:Core/Src/main.c **** /**
 233:Core/Src/main.c ****   * @brief GPIO Initialization Function
 234:Core/Src/main.c ****   * @param None
 235:Core/Src/main.c ****   * @retval None
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c **** void MX_GPIO_Init(void)
 238:Core/Src/main.c **** {
  86              		.loc 1 238 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 40
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  91              		.cfi_def_cfa_offset 20
  92              		.cfi_offset 4, -20
  93              		.cfi_offset 5, -16
  94              		.cfi_offset 6, -12
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 8BB0     		sub	sp, sp, #44
  98              		.cfi_def_cfa_offset 64
 239:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  99              		.loc 1 239 3 view .LVU11
 100              		.loc 1 239 20 is_stmt 0 view .LVU12
 101 0004 0024     		movs	r4, #0
 102 0006 0594     		str	r4, [sp, #20]
 103 0008 0694     		str	r4, [sp, #24]
 104 000a 0794     		str	r4, [sp, #28]
 105 000c 0894     		str	r4, [sp, #32]
 106 000e 0994     		str	r4, [sp, #36]
ARM GAS  C:\Temp\cc6JC66E.s 			page 7


 240:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 241:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 244:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 107              		.loc 1 244 3 is_stmt 1 view .LVU13
 108              	.LBB5:
 109              		.loc 1 244 3 view .LVU14
 110 0010 0094     		str	r4, [sp]
 111              		.loc 1 244 3 view .LVU15
 112 0012 474B     		ldr	r3, .L7
 113 0014 1A6B     		ldr	r2, [r3, #48]
 114 0016 42F00402 		orr	r2, r2, #4
 115 001a 1A63     		str	r2, [r3, #48]
 116              		.loc 1 244 3 view .LVU16
 117 001c 1A6B     		ldr	r2, [r3, #48]
 118 001e 02F00402 		and	r2, r2, #4
 119 0022 0092     		str	r2, [sp]
 120              		.loc 1 244 3 view .LVU17
 121 0024 009A     		ldr	r2, [sp]
 122              	.LBE5:
 123              		.loc 1 244 3 view .LVU18
 245:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 124              		.loc 1 245 3 view .LVU19
 125              	.LBB6:
 126              		.loc 1 245 3 view .LVU20
 127 0026 0194     		str	r4, [sp, #4]
 128              		.loc 1 245 3 view .LVU21
 129 0028 1A6B     		ldr	r2, [r3, #48]
 130 002a 42F08002 		orr	r2, r2, #128
 131 002e 1A63     		str	r2, [r3, #48]
 132              		.loc 1 245 3 view .LVU22
 133 0030 1A6B     		ldr	r2, [r3, #48]
 134 0032 02F08002 		and	r2, r2, #128
 135 0036 0192     		str	r2, [sp, #4]
 136              		.loc 1 245 3 view .LVU23
 137 0038 019A     		ldr	r2, [sp, #4]
 138              	.LBE6:
 139              		.loc 1 245 3 view .LVU24
 246:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 140              		.loc 1 246 3 view .LVU25
 141              	.LBB7:
 142              		.loc 1 246 3 view .LVU26
 143 003a 0294     		str	r4, [sp, #8]
 144              		.loc 1 246 3 view .LVU27
 145 003c 1A6B     		ldr	r2, [r3, #48]
 146 003e 42F00102 		orr	r2, r2, #1
 147 0042 1A63     		str	r2, [r3, #48]
 148              		.loc 1 246 3 view .LVU28
 149 0044 1A6B     		ldr	r2, [r3, #48]
 150 0046 02F00102 		and	r2, r2, #1
 151 004a 0292     		str	r2, [sp, #8]
 152              		.loc 1 246 3 view .LVU29
 153 004c 029A     		ldr	r2, [sp, #8]
 154              	.LBE7:
 155              		.loc 1 246 3 view .LVU30
 247:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  C:\Temp\cc6JC66E.s 			page 8


 156              		.loc 1 247 3 view .LVU31
 157              	.LBB8:
 158              		.loc 1 247 3 view .LVU32
 159 004e 0394     		str	r4, [sp, #12]
 160              		.loc 1 247 3 view .LVU33
 161 0050 1A6B     		ldr	r2, [r3, #48]
 162 0052 42F00202 		orr	r2, r2, #2
 163 0056 1A63     		str	r2, [r3, #48]
 164              		.loc 1 247 3 view .LVU34
 165 0058 1A6B     		ldr	r2, [r3, #48]
 166 005a 02F00202 		and	r2, r2, #2
 167 005e 0392     		str	r2, [sp, #12]
 168              		.loc 1 247 3 view .LVU35
 169 0060 039A     		ldr	r2, [sp, #12]
 170              	.LBE8:
 171              		.loc 1 247 3 view .LVU36
 248:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 172              		.loc 1 248 3 view .LVU37
 173              	.LBB9:
 174              		.loc 1 248 3 view .LVU38
 175 0062 0494     		str	r4, [sp, #16]
 176              		.loc 1 248 3 view .LVU39
 177 0064 1A6B     		ldr	r2, [r3, #48]
 178 0066 42F00802 		orr	r2, r2, #8
 179 006a 1A63     		str	r2, [r3, #48]
 180              		.loc 1 248 3 view .LVU40
 181 006c 1B6B     		ldr	r3, [r3, #48]
 182 006e 03F00803 		and	r3, r3, #8
 183 0072 0493     		str	r3, [sp, #16]
 184              		.loc 1 248 3 view .LVU41
 185 0074 049B     		ldr	r3, [sp, #16]
 186              	.LBE9:
 187              		.loc 1 248 3 view .LVU42
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 251:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 188              		.loc 1 251 3 view .LVU43
 189 0076 2F4E     		ldr	r6, .L7+4
 190 0078 2246     		mov	r2, r4
 191 007a 2021     		movs	r1, #32
 192 007c 3046     		mov	r0, r6
 193 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 194              	.LVL2:
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 254:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 195              		.loc 1 254 3 view .LVU44
 196              		.loc 1 254 23 is_stmt 0 view .LVU45
 197 0082 4FF40053 		mov	r3, #8192
 198 0086 0593     		str	r3, [sp, #20]
 255:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 199              		.loc 1 255 3 is_stmt 1 view .LVU46
 200              		.loc 1 255 24 is_stmt 0 view .LVU47
 201 0088 4FF48813 		mov	r3, #1114112
 202 008c 0693     		str	r3, [sp, #24]
 256:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 203              		.loc 1 256 3 is_stmt 1 view .LVU48
ARM GAS  C:\Temp\cc6JC66E.s 			page 9


 204              		.loc 1 256 24 is_stmt 0 view .LVU49
 205 008e 0794     		str	r4, [sp, #28]
 257:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 206              		.loc 1 257 3 is_stmt 1 view .LVU50
 207 0090 294F     		ldr	r7, .L7+8
 208 0092 05A9     		add	r1, sp, #20
 209 0094 3846     		mov	r0, r7
 210 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 211              	.LVL3:
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 260:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 261:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 262:Core/Src/main.c ****                            PC12 */
 263:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 212              		.loc 1 263 3 view .LVU51
 213              		.loc 1 263 23 is_stmt 0 view .LVU52
 214 009a 41F6FF73 		movw	r3, #8191
 215 009e 0593     		str	r3, [sp, #20]
 264:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 265:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 266:Core/Src/main.c ****                           |GPIO_PIN_12;
 267:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 216              		.loc 1 267 3 is_stmt 1 view .LVU53
 217              		.loc 1 267 24 is_stmt 0 view .LVU54
 218 00a0 0325     		movs	r5, #3
 219 00a2 0695     		str	r5, [sp, #24]
 268:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 220              		.loc 1 268 3 is_stmt 1 view .LVU55
 221              		.loc 1 268 24 is_stmt 0 view .LVU56
 222 00a4 0794     		str	r4, [sp, #28]
 269:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 223              		.loc 1 269 3 is_stmt 1 view .LVU57
 224 00a6 05A9     		add	r1, sp, #20
 225 00a8 3846     		mov	r0, r7
 226 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 227              	.LVL4:
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA6 PA7
 272:Core/Src/main.c ****                            PA8 PA9 PA10 PA11
 273:Core/Src/main.c ****                            PA12 PA15 */
 274:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 228              		.loc 1 274 3 view .LVU58
 229              		.loc 1 274 23 is_stmt 0 view .LVU59
 230 00ae 49F6C373 		movw	r3, #40899
 231 00b2 0593     		str	r3, [sp, #20]
 275:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 276:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_15;
 277:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 232              		.loc 1 277 3 is_stmt 1 view .LVU60
 233              		.loc 1 277 24 is_stmt 0 view .LVU61
 234 00b4 0695     		str	r5, [sp, #24]
 278:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 235              		.loc 1 278 3 is_stmt 1 view .LVU62
 236              		.loc 1 278 24 is_stmt 0 view .LVU63
 237 00b6 0794     		str	r4, [sp, #28]
 279:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
ARM GAS  C:\Temp\cc6JC66E.s 			page 10


 238              		.loc 1 279 3 is_stmt 1 view .LVU64
 239 00b8 05A9     		add	r1, sp, #20
 240 00ba 3046     		mov	r0, r6
 241 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 242              	.LVL5:
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /*Configure GPIO pin : VL53L1X_INT_Pin */
 282:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 243              		.loc 1 282 3 view .LVU65
 244              		.loc 1 282 23 is_stmt 0 view .LVU66
 245 00c0 1023     		movs	r3, #16
 246 00c2 0593     		str	r3, [sp, #20]
 283:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 247              		.loc 1 283 3 is_stmt 1 view .LVU67
 248              		.loc 1 283 24 is_stmt 0 view .LVU68
 249 00c4 4FF40413 		mov	r3, #2162688
 250 00c8 0693     		str	r3, [sp, #24]
 284:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 251              		.loc 1 284 3 is_stmt 1 view .LVU69
 252              		.loc 1 284 24 is_stmt 0 view .LVU70
 253 00ca 0127     		movs	r7, #1
 254 00cc 0797     		str	r7, [sp, #28]
 285:Core/Src/main.c ****   HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 255              		.loc 1 285 3 is_stmt 1 view .LVU71
 256 00ce 05A9     		add	r1, sp, #20
 257 00d0 3046     		mov	r0, r6
 258 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 259              	.LVL6:
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 288:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 260              		.loc 1 288 3 view .LVU72
 261              		.loc 1 288 23 is_stmt 0 view .LVU73
 262 00d6 2023     		movs	r3, #32
 263 00d8 0593     		str	r3, [sp, #20]
 289:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 264              		.loc 1 289 3 is_stmt 1 view .LVU74
 265              		.loc 1 289 24 is_stmt 0 view .LVU75
 266 00da 0697     		str	r7, [sp, #24]
 290:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 267              		.loc 1 290 3 is_stmt 1 view .LVU76
 268              		.loc 1 290 24 is_stmt 0 view .LVU77
 269 00dc 0794     		str	r4, [sp, #28]
 291:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 270              		.loc 1 291 3 is_stmt 1 view .LVU78
 271              		.loc 1 291 25 is_stmt 0 view .LVU79
 272 00de 0894     		str	r4, [sp, #32]
 292:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 273              		.loc 1 292 3 is_stmt 1 view .LVU80
 274 00e0 05A9     		add	r1, sp, #20
 275 00e2 3046     		mov	r0, r6
 276 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 277              	.LVL7:
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 295:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 296:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
ARM GAS  C:\Temp\cc6JC66E.s 			page 11


 297:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 278              		.loc 1 297 3 view .LVU81
 279              		.loc 1 297 23 is_stmt 0 view .LVU82
 280 00e8 4FF2F743 		movw	r3, #62711
 281 00ec 0593     		str	r3, [sp, #20]
 298:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 299:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 300:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 282              		.loc 1 300 3 is_stmt 1 view .LVU83
 283              		.loc 1 300 24 is_stmt 0 view .LVU84
 284 00ee 0695     		str	r5, [sp, #24]
 301:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 285              		.loc 1 301 3 is_stmt 1 view .LVU85
 286              		.loc 1 301 24 is_stmt 0 view .LVU86
 287 00f0 0794     		str	r4, [sp, #28]
 302:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 288              		.loc 1 302 3 is_stmt 1 view .LVU87
 289 00f2 05A9     		add	r1, sp, #20
 290 00f4 1148     		ldr	r0, .L7+12
 291 00f6 FFF7FEFF 		bl	HAL_GPIO_Init
 292              	.LVL8:
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 305:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 293              		.loc 1 305 3 view .LVU88
 294              		.loc 1 305 23 is_stmt 0 view .LVU89
 295 00fa 0423     		movs	r3, #4
 296 00fc 0593     		str	r3, [sp, #20]
 306:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 297              		.loc 1 306 3 is_stmt 1 view .LVU90
 298              		.loc 1 306 24 is_stmt 0 view .LVU91
 299 00fe 0695     		str	r5, [sp, #24]
 307:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 300              		.loc 1 307 3 is_stmt 1 view .LVU92
 301              		.loc 1 307 24 is_stmt 0 view .LVU93
 302 0100 0794     		str	r4, [sp, #28]
 308:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 303              		.loc 1 308 3 is_stmt 1 view .LVU94
 304 0102 05A9     		add	r1, sp, #20
 305 0104 0E48     		ldr	r0, .L7+16
 306 0106 FFF7FEFF 		bl	HAL_GPIO_Init
 307              	.LVL9:
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* EXTI interrupt init*/
 311:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 308              		.loc 1 311 3 view .LVU95
 309 010a 2246     		mov	r2, r4
 310 010c 2146     		mov	r1, r4
 311 010e 0A20     		movs	r0, #10
 312 0110 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 313              	.LVL10:
 312:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 314              		.loc 1 312 3 view .LVU96
 315 0114 0A20     		movs	r0, #10
 316 0116 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 317              	.LVL11:
 313:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 12


 314:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 318              		.loc 1 314 3 view .LVU97
 319 011a 2246     		mov	r2, r4
 320 011c 2146     		mov	r1, r4
 321 011e 2820     		movs	r0, #40
 322 0120 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 323              	.LVL12:
 315:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 324              		.loc 1 315 3 view .LVU98
 325 0124 2820     		movs	r0, #40
 326 0126 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 327              	.LVL13:
 316:Core/Src/main.c **** 
 317:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 318:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 319:Core/Src/main.c **** }
 328              		.loc 1 319 1 is_stmt 0 view .LVU99
 329 012a 0BB0     		add	sp, sp, #44
 330              		.cfi_def_cfa_offset 20
 331              		@ sp needed
 332 012c F0BD     		pop	{r4, r5, r6, r7, pc}
 333              	.L8:
 334 012e 00BF     		.align	2
 335              	.L7:
 336 0130 00380240 		.word	1073887232
 337 0134 00000240 		.word	1073872896
 338 0138 00080240 		.word	1073874944
 339 013c 00040240 		.word	1073873920
 340 0140 000C0240 		.word	1073875968
 341              		.cfi_endproc
 342              	.LFE141:
 344              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 345              		.align	1
 346              		.global	HAL_TIM_PeriodElapsedCallback
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	HAL_TIM_PeriodElapsedCallback:
 352              	.LVL14:
 353              	.LFB142:
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** /* USER CODE END 4 */
 324:Core/Src/main.c **** 
 325:Core/Src/main.c **** /**
 326:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 327:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 328:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 329:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 330:Core/Src/main.c ****   * @param  htim : TIM handle
 331:Core/Src/main.c ****   * @retval None
 332:Core/Src/main.c ****   */
 333:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 334:Core/Src/main.c **** {
 354              		.loc 1 334 1 is_stmt 1 view -0
 355              		.cfi_startproc
ARM GAS  C:\Temp\cc6JC66E.s 			page 13


 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		.loc 1 334 1 is_stmt 0 view .LVU101
 359 0000 08B5     		push	{r3, lr}
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 3, -8
 362              		.cfi_offset 14, -4
 335:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 338:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 363              		.loc 1 338 3 is_stmt 1 view .LVU102
 364              		.loc 1 338 11 is_stmt 0 view .LVU103
 365 0002 0268     		ldr	r2, [r0]
 366              		.loc 1 338 6 view .LVU104
 367 0004 034B     		ldr	r3, .L13
 368 0006 9A42     		cmp	r2, r3
 369 0008 00D0     		beq	.L12
 370              	.LVL15:
 371              	.L9:
 339:Core/Src/main.c ****     HAL_IncTick();
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 344:Core/Src/main.c **** }
 372              		.loc 1 344 1 view .LVU105
 373 000a 08BD     		pop	{r3, pc}
 374              	.LVL16:
 375              	.L12:
 339:Core/Src/main.c ****     HAL_IncTick();
 376              		.loc 1 339 5 is_stmt 1 view .LVU106
 377 000c FFF7FEFF 		bl	HAL_IncTick
 378              	.LVL17:
 379              		.loc 1 344 1 is_stmt 0 view .LVU107
 380 0010 FBE7     		b	.L9
 381              	.L14:
 382 0012 00BF     		.align	2
 383              	.L13:
 384 0014 00000140 		.word	1073807360
 385              		.cfi_endproc
 386              	.LFE142:
 388              		.section	.text.Error_Handler,"ax",%progbits
 389              		.align	1
 390              		.global	Error_Handler
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	Error_Handler:
 396              	.LFB143:
 345:Core/Src/main.c **** 
 346:Core/Src/main.c **** /**
 347:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 348:Core/Src/main.c ****   * @retval None
 349:Core/Src/main.c ****   */
 350:Core/Src/main.c **** void Error_Handler(void)
 351:Core/Src/main.c **** {
ARM GAS  C:\Temp\cc6JC66E.s 			page 14


 397              		.loc 1 351 1 is_stmt 1 view -0
 398              		.cfi_startproc
 399              		@ Volatile: function does not return.
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 352:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 353:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 354:Core/Src/main.c ****   __disable_irq();
 403              		.loc 1 354 3 view .LVU109
 404              	.LBB10:
 405              	.LBI10:
 406              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
ARM GAS  C:\Temp\cc6JC66E.s 			page 15


  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\cc6JC66E.s 			page 16


 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
ARM GAS  C:\Temp\cc6JC66E.s 			page 17


 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
ARM GAS  C:\Temp\cc6JC66E.s 			page 18


 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\cc6JC66E.s 			page 19


 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
ARM GAS  C:\Temp\cc6JC66E.s 			page 20


 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  C:\Temp\cc6JC66E.s 			page 21


 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\cc6JC66E.s 			page 22


 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 23


 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
ARM GAS  C:\Temp\cc6JC66E.s 			page 24


 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Temp\cc6JC66E.s 			page 25


 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 26


 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  C:\Temp\cc6JC66E.s 			page 27


 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 28


 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\cc6JC66E.s 			page 29


 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\cc6JC66E.s 			page 30


 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  C:\Temp\cc6JC66E.s 			page 31


 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 407              		.loc 2 960 27 view .LVU110
 408              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 409              		.loc 2 962 3 view .LVU111
 410              		.syntax unified
 411              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 412 0000 72B6     		cpsid i
 413              	@ 0 "" 2
 414              		.thumb
 415              		.syntax unified
 416              	.L16:
 417              	.LBE11:
 418              	.LBE10:
 355:Core/Src/main.c ****   while (1)
 419              		.loc 1 355 3 discriminator 1 view .LVU112
 356:Core/Src/main.c ****   {
 357:Core/Src/main.c ****   }
 420              		.loc 1 357 3 discriminator 1 view .LVU113
 355:Core/Src/main.c ****   while (1)
 421              		.loc 1 355 9 discriminator 1 view .LVU114
 422 0002 FEE7     		b	.L16
 423              		.cfi_endproc
 424              	.LFE143:
 426              		.section	.text.MX_TIM2_Init,"ax",%progbits
 427              		.align	1
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 432              	MX_TIM2_Init:
 433              	.LFB139:
 177:Core/Src/main.c **** 
 434              		.loc 1 177 1 view -0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 24
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438 0000 00B5     		push	{lr}
 439              		.cfi_def_cfa_offset 4
 440              		.cfi_offset 14, -4
 441 0002 87B0     		sub	sp, sp, #28
 442              		.cfi_def_cfa_offset 32
 183:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 443              		.loc 1 183 3 view .LVU116
 183:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 444              		.loc 1 183 26 is_stmt 0 view .LVU117
 445 0004 0023     		movs	r3, #0
 446 0006 0293     		str	r3, [sp, #8]
 447 0008 0393     		str	r3, [sp, #12]
 448 000a 0493     		str	r3, [sp, #16]
 449 000c 0593     		str	r3, [sp, #20]
 184:Core/Src/main.c **** 
 450              		.loc 1 184 3 is_stmt 1 view .LVU118
 184:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 32


 451              		.loc 1 184 27 is_stmt 0 view .LVU119
 452 000e 0093     		str	r3, [sp]
 453 0010 0193     		str	r3, [sp, #4]
 189:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 454              		.loc 1 189 3 is_stmt 1 view .LVU120
 189:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 455              		.loc 1 189 18 is_stmt 0 view .LVU121
 456 0012 1448     		ldr	r0, .L25
 457 0014 4FF08042 		mov	r2, #1073741824
 458 0018 0260     		str	r2, [r0]
 190:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 459              		.loc 1 190 3 is_stmt 1 view .LVU122
 190:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 460              		.loc 1 190 24 is_stmt 0 view .LVU123
 461 001a 40F2E732 		movw	r2, #999
 462 001e 4260     		str	r2, [r0, #4]
 191:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 463              		.loc 1 191 3 is_stmt 1 view .LVU124
 191:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 464              		.loc 1 191 26 is_stmt 0 view .LVU125
 465 0020 8360     		str	r3, [r0, #8]
 192:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 466              		.loc 1 192 3 is_stmt 1 view .LVU126
 192:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 467              		.loc 1 192 21 is_stmt 0 view .LVU127
 468 0022 C260     		str	r2, [r0, #12]
 193:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 469              		.loc 1 193 3 is_stmt 1 view .LVU128
 193:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 470              		.loc 1 193 28 is_stmt 0 view .LVU129
 471 0024 0361     		str	r3, [r0, #16]
 194:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 472              		.loc 1 194 3 is_stmt 1 view .LVU130
 194:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 473              		.loc 1 194 32 is_stmt 0 view .LVU131
 474 0026 8023     		movs	r3, #128
 475 0028 8361     		str	r3, [r0, #24]
 195:Core/Src/main.c ****   {
 476              		.loc 1 195 3 is_stmt 1 view .LVU132
 195:Core/Src/main.c ****   {
 477              		.loc 1 195 7 is_stmt 0 view .LVU133
 478 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 479              	.LVL18:
 195:Core/Src/main.c ****   {
 480              		.loc 1 195 6 view .LVU134
 481 002e 90B9     		cbnz	r0, .L22
 199:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 482              		.loc 1 199 3 is_stmt 1 view .LVU135
 199:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 483              		.loc 1 199 34 is_stmt 0 view .LVU136
 484 0030 4FF48053 		mov	r3, #4096
 485 0034 0293     		str	r3, [sp, #8]
 200:Core/Src/main.c ****   {
 486              		.loc 1 200 3 is_stmt 1 view .LVU137
 200:Core/Src/main.c ****   {
 487              		.loc 1 200 7 is_stmt 0 view .LVU138
 488 0036 02A9     		add	r1, sp, #8
ARM GAS  C:\Temp\cc6JC66E.s 			page 33


 489 0038 0A48     		ldr	r0, .L25
 490 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 491              	.LVL19:
 200:Core/Src/main.c ****   {
 492              		.loc 1 200 6 view .LVU139
 493 003e 60B9     		cbnz	r0, .L23
 204:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 494              		.loc 1 204 3 is_stmt 1 view .LVU140
 204:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 495              		.loc 1 204 37 is_stmt 0 view .LVU141
 496 0040 0023     		movs	r3, #0
 497 0042 0093     		str	r3, [sp]
 205:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 498              		.loc 1 205 3 is_stmt 1 view .LVU142
 205:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 499              		.loc 1 205 33 is_stmt 0 view .LVU143
 500 0044 0193     		str	r3, [sp, #4]
 206:Core/Src/main.c ****   {
 501              		.loc 1 206 3 is_stmt 1 view .LVU144
 206:Core/Src/main.c ****   {
 502              		.loc 1 206 7 is_stmt 0 view .LVU145
 503 0046 6946     		mov	r1, sp
 504 0048 0648     		ldr	r0, .L25
 505 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 506              	.LVL20:
 206:Core/Src/main.c ****   {
 507              		.loc 1 206 6 view .LVU146
 508 004e 30B9     		cbnz	r0, .L24
 214:Core/Src/main.c **** 
 509              		.loc 1 214 1 view .LVU147
 510 0050 07B0     		add	sp, sp, #28
 511              		.cfi_remember_state
 512              		.cfi_def_cfa_offset 4
 513              		@ sp needed
 514 0052 5DF804FB 		ldr	pc, [sp], #4
 515              	.L22:
 516              		.cfi_restore_state
 197:Core/Src/main.c ****   }
 517              		.loc 1 197 5 is_stmt 1 view .LVU148
 518 0056 FFF7FEFF 		bl	Error_Handler
 519              	.LVL21:
 520              	.L23:
 202:Core/Src/main.c ****   }
 521              		.loc 1 202 5 view .LVU149
 522 005a FFF7FEFF 		bl	Error_Handler
 523              	.LVL22:
 524              	.L24:
 208:Core/Src/main.c ****   }
 525              		.loc 1 208 5 view .LVU150
 526 005e FFF7FEFF 		bl	Error_Handler
 527              	.LVL23:
 528              	.L26:
 529 0062 00BF     		.align	2
 530              	.L25:
 531 0064 00000000 		.word	htim2
 532              		.cfi_endproc
 533              	.LFE139:
ARM GAS  C:\Temp\cc6JC66E.s 			page 34


 535              		.section	.text.SystemClock_Config,"ax",%progbits
 536              		.align	1
 537              		.global	SystemClock_Config
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	SystemClock_Config:
 543              	.LFB138:
 130:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 544              		.loc 1 130 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 80
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 00B5     		push	{lr}
 549              		.cfi_def_cfa_offset 4
 550              		.cfi_offset 14, -4
 551 0002 95B0     		sub	sp, sp, #84
 552              		.cfi_def_cfa_offset 88
 131:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 553              		.loc 1 131 3 view .LVU152
 131:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 554              		.loc 1 131 22 is_stmt 0 view .LVU153
 555 0004 3022     		movs	r2, #48
 556 0006 0021     		movs	r1, #0
 557 0008 08A8     		add	r0, sp, #32
 558 000a FFF7FEFF 		bl	memset
 559              	.LVL24:
 132:Core/Src/main.c **** 
 560              		.loc 1 132 3 is_stmt 1 view .LVU154
 132:Core/Src/main.c **** 
 561              		.loc 1 132 22 is_stmt 0 view .LVU155
 562 000e 0023     		movs	r3, #0
 563 0010 0393     		str	r3, [sp, #12]
 564 0012 0493     		str	r3, [sp, #16]
 565 0014 0593     		str	r3, [sp, #20]
 566 0016 0693     		str	r3, [sp, #24]
 567 0018 0793     		str	r3, [sp, #28]
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 568              		.loc 1 136 3 is_stmt 1 view .LVU156
 569              	.LBB12:
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 570              		.loc 1 136 3 view .LVU157
 571 001a 0193     		str	r3, [sp, #4]
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 572              		.loc 1 136 3 view .LVU158
 573 001c 1E4A     		ldr	r2, .L33
 574 001e 116C     		ldr	r1, [r2, #64]
 575 0020 41F08051 		orr	r1, r1, #268435456
 576 0024 1164     		str	r1, [r2, #64]
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 577              		.loc 1 136 3 view .LVU159
 578 0026 126C     		ldr	r2, [r2, #64]
 579 0028 02F08052 		and	r2, r2, #268435456
 580 002c 0192     		str	r2, [sp, #4]
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 581              		.loc 1 136 3 view .LVU160
 582 002e 019A     		ldr	r2, [sp, #4]
ARM GAS  C:\Temp\cc6JC66E.s 			page 35


 583              	.LBE12:
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 584              		.loc 1 136 3 view .LVU161
 137:Core/Src/main.c **** 
 585              		.loc 1 137 3 view .LVU162
 586              	.LBB13:
 137:Core/Src/main.c **** 
 587              		.loc 1 137 3 view .LVU163
 588 0030 0293     		str	r3, [sp, #8]
 137:Core/Src/main.c **** 
 589              		.loc 1 137 3 view .LVU164
 590 0032 1A4A     		ldr	r2, .L33+4
 591 0034 1168     		ldr	r1, [r2]
 592 0036 41F44041 		orr	r1, r1, #49152
 593 003a 1160     		str	r1, [r2]
 137:Core/Src/main.c **** 
 594              		.loc 1 137 3 view .LVU165
 595 003c 1268     		ldr	r2, [r2]
 596 003e 02F44042 		and	r2, r2, #49152
 597 0042 0292     		str	r2, [sp, #8]
 137:Core/Src/main.c **** 
 598              		.loc 1 137 3 view .LVU166
 599 0044 029A     		ldr	r2, [sp, #8]
 600              	.LBE13:
 137:Core/Src/main.c **** 
 601              		.loc 1 137 3 view .LVU167
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 602              		.loc 1 142 3 view .LVU168
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 603              		.loc 1 142 36 is_stmt 0 view .LVU169
 604 0046 0222     		movs	r2, #2
 605 0048 0892     		str	r2, [sp, #32]
 143:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 606              		.loc 1 143 3 is_stmt 1 view .LVU170
 143:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 607              		.loc 1 143 30 is_stmt 0 view .LVU171
 608 004a 0121     		movs	r1, #1
 609 004c 0B91     		str	r1, [sp, #44]
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 610              		.loc 1 144 3 is_stmt 1 view .LVU172
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 611              		.loc 1 144 41 is_stmt 0 view .LVU173
 612 004e 1021     		movs	r1, #16
 613 0050 0C91     		str	r1, [sp, #48]
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 614              		.loc 1 145 3 is_stmt 1 view .LVU174
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 615              		.loc 1 145 34 is_stmt 0 view .LVU175
 616 0052 0E92     		str	r2, [sp, #56]
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 617              		.loc 1 146 3 is_stmt 1 view .LVU176
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 618              		.loc 1 146 35 is_stmt 0 view .LVU177
 619 0054 0F93     		str	r3, [sp, #60]
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 620              		.loc 1 147 3 is_stmt 1 view .LVU178
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
ARM GAS  C:\Temp\cc6JC66E.s 			page 36


 621              		.loc 1 147 30 is_stmt 0 view .LVU179
 622 0056 0823     		movs	r3, #8
 623 0058 1093     		str	r3, [sp, #64]
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 624              		.loc 1 148 3 is_stmt 1 view .LVU180
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 625              		.loc 1 148 30 is_stmt 0 view .LVU181
 626 005a 6423     		movs	r3, #100
 627 005c 1193     		str	r3, [sp, #68]
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 628              		.loc 1 149 3 is_stmt 1 view .LVU182
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 629              		.loc 1 149 30 is_stmt 0 view .LVU183
 630 005e 1292     		str	r2, [sp, #72]
 150:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 631              		.loc 1 150 3 is_stmt 1 view .LVU184
 150:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 632              		.loc 1 150 30 is_stmt 0 view .LVU185
 633 0060 0423     		movs	r3, #4
 634 0062 1393     		str	r3, [sp, #76]
 151:Core/Src/main.c ****   {
 635              		.loc 1 151 3 is_stmt 1 view .LVU186
 151:Core/Src/main.c ****   {
 636              		.loc 1 151 7 is_stmt 0 view .LVU187
 637 0064 08A8     		add	r0, sp, #32
 638 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 639              	.LVL25:
 151:Core/Src/main.c ****   {
 640              		.loc 1 151 6 view .LVU188
 641 006a 88B9     		cbnz	r0, .L31
 158:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 642              		.loc 1 158 3 is_stmt 1 view .LVU189
 158:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 643              		.loc 1 158 31 is_stmt 0 view .LVU190
 644 006c 0F23     		movs	r3, #15
 645 006e 0393     		str	r3, [sp, #12]
 160:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 646              		.loc 1 160 3 is_stmt 1 view .LVU191
 160:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 647              		.loc 1 160 34 is_stmt 0 view .LVU192
 648 0070 0223     		movs	r3, #2
 649 0072 0493     		str	r3, [sp, #16]
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 650              		.loc 1 161 3 is_stmt 1 view .LVU193
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 651              		.loc 1 161 35 is_stmt 0 view .LVU194
 652 0074 0023     		movs	r3, #0
 653 0076 0593     		str	r3, [sp, #20]
 162:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 654              		.loc 1 162 3 is_stmt 1 view .LVU195
 162:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 655              		.loc 1 162 36 is_stmt 0 view .LVU196
 656 0078 4FF48052 		mov	r2, #4096
 657 007c 0692     		str	r2, [sp, #24]
 163:Core/Src/main.c **** 
 658              		.loc 1 163 3 is_stmt 1 view .LVU197
 163:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 37


 659              		.loc 1 163 36 is_stmt 0 view .LVU198
 660 007e 0793     		str	r3, [sp, #28]
 165:Core/Src/main.c ****   {
 661              		.loc 1 165 3 is_stmt 1 view .LVU199
 165:Core/Src/main.c ****   {
 662              		.loc 1 165 7 is_stmt 0 view .LVU200
 663 0080 0321     		movs	r1, #3
 664 0082 03A8     		add	r0, sp, #12
 665 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 666              	.LVL26:
 165:Core/Src/main.c ****   {
 667              		.loc 1 165 6 view .LVU201
 668 0088 20B9     		cbnz	r0, .L32
 169:Core/Src/main.c **** 
 669              		.loc 1 169 1 view .LVU202
 670 008a 15B0     		add	sp, sp, #84
 671              		.cfi_remember_state
 672              		.cfi_def_cfa_offset 4
 673              		@ sp needed
 674 008c 5DF804FB 		ldr	pc, [sp], #4
 675              	.L31:
 676              		.cfi_restore_state
 153:Core/Src/main.c ****   }
 677              		.loc 1 153 5 is_stmt 1 view .LVU203
 678 0090 FFF7FEFF 		bl	Error_Handler
 679              	.LVL27:
 680              	.L32:
 167:Core/Src/main.c ****   }
 681              		.loc 1 167 5 view .LVU204
 682 0094 FFF7FEFF 		bl	Error_Handler
 683              	.LVL28:
 684              	.L34:
 685              		.align	2
 686              	.L33:
 687 0098 00380240 		.word	1073887232
 688 009c 00700040 		.word	1073770496
 689              		.cfi_endproc
 690              	.LFE138:
 692              		.section	.text.main,"ax",%progbits
 693              		.align	1
 694              		.global	main
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 699              	main:
 700              	.LFB137:
  73:Core/Src/main.c **** 
 701              		.loc 1 73 1 view -0
 702              		.cfi_startproc
 703              		@ Volatile: function does not return.
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706 0000 08B5     		push	{r3, lr}
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 3, -8
 709              		.cfi_offset 14, -4
  82:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc6JC66E.s 			page 38


 710              		.loc 1 82 3 view .LVU206
 711 0002 FFF7FEFF 		bl	HAL_Init
 712              	.LVL29:
  89:Core/Src/main.c **** 
 713              		.loc 1 89 3 view .LVU207
 714 0006 FFF7FEFF 		bl	SystemClock_Config
 715              	.LVL30:
  96:Core/Src/main.c ****   MX_DMA_Init();
 716              		.loc 1 96 3 view .LVU208
 717 000a FFF7FEFF 		bl	MX_GPIO_Init
 718              	.LVL31:
  97:Core/Src/main.c ****   MX_TIM2_Init();
 719              		.loc 1 97 3 view .LVU209
 720 000e FFF7FEFF 		bl	MX_DMA_Init
 721              	.LVL32:
  98:Core/Src/main.c ****   MX_TOF_Init();
 722              		.loc 1 98 3 view .LVU210
 723 0012 FFF7FEFF 		bl	MX_TIM2_Init
 724              	.LVL33:
  99:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 725              		.loc 1 99 3 view .LVU211
 726 0016 FFF7FEFF 		bl	MX_TOF_Init
 727              	.LVL34:
 101:Core/Src/main.c ****   /* USER CODE END 2 */
 728              		.loc 1 101 3 view .LVU212
 729 001a FFF7FEFF 		bl	initVL53L1A1
 730              	.LVL35:
 106:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 731              		.loc 1 106 3 view .LVU213
 732 001e 0A48     		ldr	r0, .L39
 733 0020 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 734              	.LVL36:
 107:Core/Src/main.c ****   while (1)
 735              		.loc 1 107 3 view .LVU214
 736 0024 0122     		movs	r2, #1
 737 0026 2021     		movs	r1, #32
 738 0028 0848     		ldr	r0, .L39+4
 739 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 740              	.LVL37:
 741              	.L36:
 108:Core/Src/main.c ****   {
 742              		.loc 1 108 3 view .LVU215
 110:Core/Src/main.c ****     if (clearToSend == 1){
 743              		.loc 1 110 5 view .LVU216
 744 002e FFF7FEFF 		bl	getVL53L1A1
 745              	.LVL38:
 111:Core/Src/main.c ****       sendToSimulink();
 746              		.loc 1 111 5 view .LVU217
 111:Core/Src/main.c ****       sendToSimulink();
 747              		.loc 1 111 21 is_stmt 0 view .LVU218
 748 0032 074B     		ldr	r3, .L39+8
 749 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 111:Core/Src/main.c ****       sendToSimulink();
 750              		.loc 1 111 8 view .LVU219
 751 0036 012B     		cmp	r3, #1
 752 0038 F9D1     		bne	.L36
 112:Core/Src/main.c ****       clearToSend = 0;
ARM GAS  C:\Temp\cc6JC66E.s 			page 39


 753              		.loc 1 112 7 is_stmt 1 view .LVU220
 754 003a FFF7FEFF 		bl	sendToSimulink
 755              	.LVL39:
 113:Core/Src/main.c ****     }
 756              		.loc 1 113 7 view .LVU221
 113:Core/Src/main.c ****     }
 757              		.loc 1 113 19 is_stmt 0 view .LVU222
 758 003e 044B     		ldr	r3, .L39+8
 759 0040 0022     		movs	r2, #0
 760 0042 1A70     		strb	r2, [r3]
 761 0044 F3E7     		b	.L36
 762              	.L40:
 763 0046 00BF     		.align	2
 764              	.L39:
 765 0048 00000000 		.word	htim2
 766 004c 00000240 		.word	1073872896
 767 0050 00000000 		.word	clearToSend
 768              		.cfi_endproc
 769              	.LFE137:
 771              		.global	calibrated
 772              		.section	.bss.calibrated,"aw",%nobits
 775              	calibrated:
 776 0000 00       		.space	1
 777              		.global	clearToSend
 778              		.section	.bss.clearToSend,"aw",%nobits
 781              	clearToSend:
 782 0000 00       		.space	1
 783              		.global	expectedTerminator
 784              		.section	.rodata.expectedTerminator,"a"
 785              		.align	2
 788              	expectedTerminator:
 789 0000 415F4A   		.ascii	"A_J"
 790              		.global	expectedHeader
 791              		.section	.rodata.expectedHeader,"a"
 792              		.align	2
 795              	expectedHeader:
 796 0000 4A5F41   		.ascii	"J_A"
 797              		.global	TOF_right
 798              		.section	.bss.TOF_right,"aw",%nobits
 799              		.align	2
 802              	TOF_right:
 803 0000 00000000 		.space	72
 803      00000000 
 803      00000000 
 803      00000000 
 803      00000000 
 804              		.global	TOF_centre
 805              		.section	.bss.TOF_centre,"aw",%nobits
 806              		.align	2
 809              	TOF_centre:
 810 0000 00000000 		.space	72
 810      00000000 
 810      00000000 
 810      00000000 
 810      00000000 
 811              		.global	TOF_left
 812              		.section	.bss.TOF_left,"aw",%nobits
ARM GAS  C:\Temp\cc6JC66E.s 			page 40


 813              		.align	2
 816              	TOF_left:
 817 0000 00000000 		.space	72
 817      00000000 
 817      00000000 
 817      00000000 
 817      00000000 
 818              		.global	htim2
 819              		.section	.bss.htim2,"aw",%nobits
 820              		.align	2
 823              	htim2:
 824 0000 00000000 		.space	72
 824      00000000 
 824      00000000 
 824      00000000 
 824      00000000 
 825              		.text
 826              	.Letext0:
 827              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 828              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 829              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 830              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 831              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 832              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 833              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 834              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 835              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 836              		.file 12 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 837              		.file 13 "Drivers/BSP/53L1A2/53l1a2_ranging_sensor.h"
 838              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 839              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 840              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 841              		.file 17 "Core/Inc/VL53L1A1_Simulink.h"
 842              		.file 18 "TOF/App/app_tof.h"
 843              		.file 19 "<built-in>"
ARM GAS  C:\Temp\cc6JC66E.s 			page 41


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\cc6JC66E.s:21     .text.MX_DMA_Init:00000000 $t
  C:\Temp\cc6JC66E.s:27     .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\cc6JC66E.s:73     .text.MX_DMA_Init:00000030 $d
  C:\Temp\cc6JC66E.s:78     .text.MX_GPIO_Init:00000000 $t
  C:\Temp\cc6JC66E.s:84     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\cc6JC66E.s:336    .text.MX_GPIO_Init:00000130 $d
  C:\Temp\cc6JC66E.s:345    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\cc6JC66E.s:351    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\cc6JC66E.s:384    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\cc6JC66E.s:389    .text.Error_Handler:00000000 $t
  C:\Temp\cc6JC66E.s:395    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\cc6JC66E.s:427    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\cc6JC66E.s:432    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\cc6JC66E.s:531    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\cc6JC66E.s:823    .bss.htim2:00000000 htim2
  C:\Temp\cc6JC66E.s:536    .text.SystemClock_Config:00000000 $t
  C:\Temp\cc6JC66E.s:542    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\cc6JC66E.s:687    .text.SystemClock_Config:00000098 $d
  C:\Temp\cc6JC66E.s:693    .text.main:00000000 $t
  C:\Temp\cc6JC66E.s:699    .text.main:00000000 main
  C:\Temp\cc6JC66E.s:765    .text.main:00000048 $d
  C:\Temp\cc6JC66E.s:781    .bss.clearToSend:00000000 clearToSend
  C:\Temp\cc6JC66E.s:775    .bss.calibrated:00000000 calibrated
  C:\Temp\cc6JC66E.s:776    .bss.calibrated:00000000 $d
  C:\Temp\cc6JC66E.s:782    .bss.clearToSend:00000000 $d
  C:\Temp\cc6JC66E.s:788    .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\cc6JC66E.s:785    .rodata.expectedTerminator:00000000 $d
  C:\Temp\cc6JC66E.s:795    .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\cc6JC66E.s:792    .rodata.expectedHeader:00000000 $d
  C:\Temp\cc6JC66E.s:802    .bss.TOF_right:00000000 TOF_right
  C:\Temp\cc6JC66E.s:799    .bss.TOF_right:00000000 $d
  C:\Temp\cc6JC66E.s:809    .bss.TOF_centre:00000000 TOF_centre
  C:\Temp\cc6JC66E.s:806    .bss.TOF_centre:00000000 $d
  C:\Temp\cc6JC66E.s:816    .bss.TOF_left:00000000 TOF_left
  C:\Temp\cc6JC66E.s:813    .bss.TOF_left:00000000 $d
  C:\Temp\cc6JC66E.s:820    .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_TOF_Init
initVL53L1A1
HAL_TIM_Base_Start_IT
getVL53L1A1
sendToSimulink
ARM GAS  C:\Temp\cc6JC66E.s 			page 42


