ARM GAS  C:\Temp\cckm1ONa.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_DMA_Init,"ax",%progbits
  21              		.align	1
  22              		.global	MX_DMA_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MX_DMA_Init:
  28              	.LFB138:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "app_mems.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "iks02a1_motion_sensors.h"
  26:Core/Src/main.c **** #include "IKS02A1_Simulink.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  C:\Temp\cckm1ONa.s 			page 2


  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** UART_HandleTypeDef huart2;
  48:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel1_axis;
  52:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t gyro_axis;
  53:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel2_axis;
  54:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t mag_axis;
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** static void MX_TIM2_Init(void);
  60:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  61:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  62:Core/Src/main.c **** // #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  63:Core/Src/main.c **** /* USER CODE END PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  66:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  67:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  68:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  69:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2+2+2+1);
  70:Core/Src/main.c **** uint8_t bigBuffer[28+3+3] = {0};
  71:Core/Src/main.c **** uint8_t clearToSend = 0;
  72:Core/Src/main.c **** uint8_t calibrated = 0;
  73:Core/Src/main.c **** int32_t counter = 0;
  74:Core/Src/main.c **** /* USER CODE END 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /**
  77:Core/Src/main.c ****   * @brief  The application entry point.
  78:Core/Src/main.c ****   * @retval int
  79:Core/Src/main.c ****   */
  80:Core/Src/main.c **** int main(void)
  81:Core/Src/main.c **** {
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE END 1 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  C:\Temp\cckm1ONa.s 			page 3


  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  90:Core/Src/main.c ****   HAL_Init();
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END Init */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Configure the system clock */
  97:Core/Src/main.c ****   SystemClock_Config();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 100:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,0);
 101:Core/Src/main.c ****   /* USER CODE END SysInit */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Initialize all configured peripherals */
 104:Core/Src/main.c ****   MX_GPIO_Init();
 105:Core/Src/main.c ****   MX_DMA_Init();
 106:Core/Src/main.c ****   MX_TIM2_Init();
 107:Core/Src/main.c ****   MX_USART2_UART_Init();
 108:Core/Src/main.c ****   MX_MEMS_Init();
 109:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 110:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 111:Core/Src/main.c ****   /* USER CODE END 2 */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Infinite loop */
 114:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   while (1)
 117:Core/Src/main.c ****   {
 118:Core/Src/main.c ****     // HAL_UART_Receive_DMA(&hcom_uart,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3)
 119:Core/Src/main.c ****     // if (bigBuffer[0] == expectedHeader[0] &&
 120:Core/Src/main.c ****     //     bigBuffer[1] == expectedHeader[1] &&
 121:Core/Src/main.c ****     //     bigBuffer[2] == expectedHeader[2] &&
 122:Core/Src/main.c ****     //     bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 123:Core/Src/main.c ****     //     bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 124:Core/Src/main.c ****     //     bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 125:Core/Src/main.c ****     //       if (calibrated == 0){
 126:Core/Src/main.c ****     //         receivedFromSimulink(&bigBuffer);
 127:Core/Src/main.c ****     //         HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 128:Core/Src/main.c ****     //         calibrated = 1;
 129:Core/Src/main.c ****     //       }
 130:Core/Src/main.c ****     // }
 131:Core/Src/main.c ****     if (clearToSend == 1){
 132:Core/Src/main.c ****       counter++;
 133:Core/Src/main.c ****       getIKS02A1();
 134:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 135:Core/Src/main.c ****       sendToSimulink();
 136:Core/Src/main.c ****       clearToSend = 0;
 137:Core/Src/main.c ****     }
 138:Core/Src/main.c ****     
 139:Core/Src/main.c ****     
 140:Core/Src/main.c ****     /* USER CODE END WHILE */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   // MX_MEMS_Process();
 143:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 144:Core/Src/main.c ****   }
ARM GAS  C:\Temp\cckm1ONa.s 			page 4


 145:Core/Src/main.c ****   /* USER CODE END 3 */
 146:Core/Src/main.c **** }
 147:Core/Src/main.c **** 
 148:Core/Src/main.c **** /**
 149:Core/Src/main.c ****   * @brief System Clock Configuration
 150:Core/Src/main.c ****   * @retval None
 151:Core/Src/main.c ****   */
 152:Core/Src/main.c **** void SystemClock_Config(void)
 153:Core/Src/main.c **** {
 154:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 155:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 158:Core/Src/main.c ****   */
 159:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 160:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 163:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 166:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 174:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 175:Core/Src/main.c ****   {
 176:Core/Src/main.c ****     Error_Handler();
 177:Core/Src/main.c ****   }
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 182:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 183:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 184:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 185:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 186:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 189:Core/Src/main.c ****   {
 190:Core/Src/main.c ****     Error_Handler();
 191:Core/Src/main.c ****   }
 192:Core/Src/main.c **** }
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** /**
 195:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 196:Core/Src/main.c ****   * @param None
 197:Core/Src/main.c ****   * @retval None
 198:Core/Src/main.c ****   */
 199:Core/Src/main.c **** static void MX_TIM2_Init(void)
 200:Core/Src/main.c **** {
 201:Core/Src/main.c **** 
ARM GAS  C:\Temp\cckm1ONa.s 			page 5


 202:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 207:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 212:Core/Src/main.c ****   htim2.Instance = TIM2;
 213:Core/Src/main.c ****   htim2.Init.Prescaler = 200-1;
 214:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 215:Core/Src/main.c ****   htim2.Init.Period = 5000-1;
 216:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 217:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 218:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     Error_Handler();
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 223:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     Error_Handler();
 226:Core/Src/main.c ****   }
 227:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 228:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 229:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     Error_Handler();
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c **** }
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** /**
 240:Core/Src/main.c ****   * @brief USART2 Initialization Function
 241:Core/Src/main.c ****   * @param None
 242:Core/Src/main.c ****   * @retval None
 243:Core/Src/main.c ****   */
 244:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 245:Core/Src/main.c **** {
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 254:Core/Src/main.c ****   huart2.Instance = USART2;
 255:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 256:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 257:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 258:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
ARM GAS  C:\Temp\cckm1ONa.s 			page 6


 259:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 260:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 261:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 262:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 263:Core/Src/main.c ****   {
 264:Core/Src/main.c ****     Error_Handler();
 265:Core/Src/main.c ****   }
 266:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** }
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** /**
 273:Core/Src/main.c ****   * Enable DMA controller clock
 274:Core/Src/main.c ****   */
 275:Core/Src/main.c **** void MX_DMA_Init(void)
 276:Core/Src/main.c **** {
  29              		.loc 1 276 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 00B5     		push	{lr}
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              		.cfi_def_cfa_offset 16
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* DMA controller clock enable */
 279:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
  38              		.loc 1 279 3 view .LVU1
  39              	.LBB4:
  40              		.loc 1 279 3 view .LVU2
  41 0004 0021     		movs	r1, #0
  42 0006 0191     		str	r1, [sp, #4]
  43              		.loc 1 279 3 view .LVU3
  44 0008 094B     		ldr	r3, .L3
  45 000a 1A6B     		ldr	r2, [r3, #48]
  46 000c 42F40012 		orr	r2, r2, #2097152
  47 0010 1A63     		str	r2, [r3, #48]
  48              		.loc 1 279 3 view .LVU4
  49 0012 1B6B     		ldr	r3, [r3, #48]
  50 0014 03F40013 		and	r3, r3, #2097152
  51 0018 0193     		str	r3, [sp, #4]
  52              		.loc 1 279 3 view .LVU5
  53 001a 019B     		ldr	r3, [sp, #4]
  54              	.LBE4:
  55              		.loc 1 279 3 view .LVU6
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* DMA interrupt init */
 282:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 283:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  56              		.loc 1 283 3 view .LVU7
  57 001c 0A46     		mov	r2, r1
  58 001e 1020     		movs	r0, #16
  59 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  60              	.LVL0:
ARM GAS  C:\Temp\cckm1ONa.s 			page 7


 284:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  61              		.loc 1 284 3 view .LVU8
  62 0024 1020     		movs	r0, #16
  63 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  64              	.LVL1:
 285:Core/Src/main.c **** 
 286:Core/Src/main.c **** }
  65              		.loc 1 286 1 is_stmt 0 view .LVU9
  66 002a 03B0     		add	sp, sp, #12
  67              		.cfi_def_cfa_offset 4
  68              		@ sp needed
  69 002c 5DF804FB 		ldr	pc, [sp], #4
  70              	.L4:
  71              		.align	2
  72              	.L3:
  73 0030 00380240 		.word	1073887232
  74              		.cfi_endproc
  75              	.LFE138:
  77              		.section	.text.MX_GPIO_Init,"ax",%progbits
  78              		.align	1
  79              		.global	MX_GPIO_Init
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	MX_GPIO_Init:
  85              	.LFB139:
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** /**
 289:Core/Src/main.c ****   * @brief GPIO Initialization Function
 290:Core/Src/main.c ****   * @param None
 291:Core/Src/main.c ****   * @retval None
 292:Core/Src/main.c ****   */
 293:Core/Src/main.c **** void MX_GPIO_Init(void)
 294:Core/Src/main.c **** {
  86              		.loc 1 294 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 40
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 70B5     		push	{r4, r5, r6, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
  96 0002 8AB0     		sub	sp, sp, #40
  97              		.cfi_def_cfa_offset 56
 295:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  98              		.loc 1 295 3 view .LVU11
  99              		.loc 1 295 20 is_stmt 0 view .LVU12
 100 0004 0024     		movs	r4, #0
 101 0006 0594     		str	r4, [sp, #20]
 102 0008 0694     		str	r4, [sp, #24]
 103 000a 0794     		str	r4, [sp, #28]
 104 000c 0894     		str	r4, [sp, #32]
 105 000e 0994     		str	r4, [sp, #36]
 296:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 297:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
ARM GAS  C:\Temp\cckm1ONa.s 			page 8


 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 300:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 106              		.loc 1 300 3 is_stmt 1 view .LVU13
 107              	.LBB5:
 108              		.loc 1 300 3 view .LVU14
 109 0010 0094     		str	r4, [sp]
 110              		.loc 1 300 3 view .LVU15
 111 0012 384B     		ldr	r3, .L7
 112 0014 1A6B     		ldr	r2, [r3, #48]
 113 0016 42F00402 		orr	r2, r2, #4
 114 001a 1A63     		str	r2, [r3, #48]
 115              		.loc 1 300 3 view .LVU16
 116 001c 1A6B     		ldr	r2, [r3, #48]
 117 001e 02F00402 		and	r2, r2, #4
 118 0022 0092     		str	r2, [sp]
 119              		.loc 1 300 3 view .LVU17
 120 0024 009A     		ldr	r2, [sp]
 121              	.LBE5:
 122              		.loc 1 300 3 view .LVU18
 301:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 123              		.loc 1 301 3 view .LVU19
 124              	.LBB6:
 125              		.loc 1 301 3 view .LVU20
 126 0026 0194     		str	r4, [sp, #4]
 127              		.loc 1 301 3 view .LVU21
 128 0028 1A6B     		ldr	r2, [r3, #48]
 129 002a 42F08002 		orr	r2, r2, #128
 130 002e 1A63     		str	r2, [r3, #48]
 131              		.loc 1 301 3 view .LVU22
 132 0030 1A6B     		ldr	r2, [r3, #48]
 133 0032 02F08002 		and	r2, r2, #128
 134 0036 0192     		str	r2, [sp, #4]
 135              		.loc 1 301 3 view .LVU23
 136 0038 019A     		ldr	r2, [sp, #4]
 137              	.LBE6:
 138              		.loc 1 301 3 view .LVU24
 302:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 139              		.loc 1 302 3 view .LVU25
 140              	.LBB7:
 141              		.loc 1 302 3 view .LVU26
 142 003a 0294     		str	r4, [sp, #8]
 143              		.loc 1 302 3 view .LVU27
 144 003c 1A6B     		ldr	r2, [r3, #48]
 145 003e 42F00102 		orr	r2, r2, #1
 146 0042 1A63     		str	r2, [r3, #48]
 147              		.loc 1 302 3 view .LVU28
 148 0044 1A6B     		ldr	r2, [r3, #48]
 149 0046 02F00102 		and	r2, r2, #1
 150 004a 0292     		str	r2, [sp, #8]
 151              		.loc 1 302 3 view .LVU29
 152 004c 029A     		ldr	r2, [sp, #8]
 153              	.LBE7:
 154              		.loc 1 302 3 view .LVU30
 303:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 155              		.loc 1 303 3 view .LVU31
 156              	.LBB8:
ARM GAS  C:\Temp\cckm1ONa.s 			page 9


 157              		.loc 1 303 3 view .LVU32
 158 004e 0394     		str	r4, [sp, #12]
 159              		.loc 1 303 3 view .LVU33
 160 0050 1A6B     		ldr	r2, [r3, #48]
 161 0052 42F00202 		orr	r2, r2, #2
 162 0056 1A63     		str	r2, [r3, #48]
 163              		.loc 1 303 3 view .LVU34
 164 0058 1A6B     		ldr	r2, [r3, #48]
 165 005a 02F00202 		and	r2, r2, #2
 166 005e 0392     		str	r2, [sp, #12]
 167              		.loc 1 303 3 view .LVU35
 168 0060 039A     		ldr	r2, [sp, #12]
 169              	.LBE8:
 170              		.loc 1 303 3 view .LVU36
 304:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 171              		.loc 1 304 3 view .LVU37
 172              	.LBB9:
 173              		.loc 1 304 3 view .LVU38
 174 0062 0494     		str	r4, [sp, #16]
 175              		.loc 1 304 3 view .LVU39
 176 0064 1A6B     		ldr	r2, [r3, #48]
 177 0066 42F00802 		orr	r2, r2, #8
 178 006a 1A63     		str	r2, [r3, #48]
 179              		.loc 1 304 3 view .LVU40
 180 006c 1B6B     		ldr	r3, [r3, #48]
 181 006e 03F00803 		and	r3, r3, #8
 182 0072 0493     		str	r3, [sp, #16]
 183              		.loc 1 304 3 view .LVU41
 184 0074 049B     		ldr	r3, [sp, #16]
 185              	.LBE9:
 186              		.loc 1 304 3 view .LVU42
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 307:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 187              		.loc 1 307 3 view .LVU43
 188 0076 204E     		ldr	r6, .L7+4
 189 0078 2246     		mov	r2, r4
 190 007a 2021     		movs	r1, #32
 191 007c 3046     		mov	r0, r6
 192 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 193              	.LVL2:
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 310:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 311:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 312:Core/Src/main.c ****                            PC12 */
 313:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 194              		.loc 1 313 3 view .LVU44
 195              		.loc 1 313 23 is_stmt 0 view .LVU45
 196 0082 41F6FF73 		movw	r3, #8191
 197 0086 0593     		str	r3, [sp, #20]
 314:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 315:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 316:Core/Src/main.c ****                           |GPIO_PIN_12;
 317:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 198              		.loc 1 317 3 is_stmt 1 view .LVU46
 199              		.loc 1 317 24 is_stmt 0 view .LVU47
ARM GAS  C:\Temp\cckm1ONa.s 			page 10


 200 0088 0325     		movs	r5, #3
 201 008a 0695     		str	r5, [sp, #24]
 318:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 202              		.loc 1 318 3 is_stmt 1 view .LVU48
 203              		.loc 1 318 24 is_stmt 0 view .LVU49
 204 008c 0794     		str	r4, [sp, #28]
 319:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 205              		.loc 1 319 3 is_stmt 1 view .LVU50
 206 008e 05A9     		add	r1, sp, #20
 207 0090 1A48     		ldr	r0, .L7+8
 208 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 209              	.LVL3:
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA4 PA6
 322:Core/Src/main.c ****                            PA7 PA8 PA9 PA10
 323:Core/Src/main.c ****                            PA11 PA12 PA15 */
 324:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 210              		.loc 1 324 3 view .LVU51
 211              		.loc 1 324 23 is_stmt 0 view .LVU52
 212 0096 49F6D373 		movw	r3, #40915
 213 009a 0593     		str	r3, [sp, #20]
 325:Core/Src/main.c ****                           |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 326:Core/Src/main.c ****                           |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 327:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 214              		.loc 1 327 3 is_stmt 1 view .LVU53
 215              		.loc 1 327 24 is_stmt 0 view .LVU54
 216 009c 0695     		str	r5, [sp, #24]
 328:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 217              		.loc 1 328 3 is_stmt 1 view .LVU55
 218              		.loc 1 328 24 is_stmt 0 view .LVU56
 219 009e 0794     		str	r4, [sp, #28]
 329:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 220              		.loc 1 329 3 is_stmt 1 view .LVU57
 221 00a0 05A9     		add	r1, sp, #20
 222 00a2 3046     		mov	r0, r6
 223 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 224              	.LVL4:
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 332:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 225              		.loc 1 332 3 view .LVU58
 226              		.loc 1 332 23 is_stmt 0 view .LVU59
 227 00a8 2023     		movs	r3, #32
 228 00aa 0593     		str	r3, [sp, #20]
 333:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 229              		.loc 1 333 3 is_stmt 1 view .LVU60
 230              		.loc 1 333 24 is_stmt 0 view .LVU61
 231 00ac 0123     		movs	r3, #1
 232 00ae 0693     		str	r3, [sp, #24]
 334:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 233              		.loc 1 334 3 is_stmt 1 view .LVU62
 234              		.loc 1 334 24 is_stmt 0 view .LVU63
 235 00b0 0794     		str	r4, [sp, #28]
 335:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 236              		.loc 1 335 3 is_stmt 1 view .LVU64
 237              		.loc 1 335 25 is_stmt 0 view .LVU65
 238 00b2 0894     		str	r4, [sp, #32]
ARM GAS  C:\Temp\cckm1ONa.s 			page 11


 336:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 239              		.loc 1 336 3 is_stmt 1 view .LVU66
 240 00b4 05A9     		add	r1, sp, #20
 241 00b6 3046     		mov	r0, r6
 242 00b8 FFF7FEFF 		bl	HAL_GPIO_Init
 243              	.LVL5:
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 339:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 340:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 341:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 244              		.loc 1 341 3 view .LVU67
 245              		.loc 1 341 23 is_stmt 0 view .LVU68
 246 00bc 4FF2F743 		movw	r3, #62711
 247 00c0 0593     		str	r3, [sp, #20]
 342:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 343:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 344:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 248              		.loc 1 344 3 is_stmt 1 view .LVU69
 249              		.loc 1 344 24 is_stmt 0 view .LVU70
 250 00c2 0695     		str	r5, [sp, #24]
 345:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 251              		.loc 1 345 3 is_stmt 1 view .LVU71
 252              		.loc 1 345 24 is_stmt 0 view .LVU72
 253 00c4 0794     		str	r4, [sp, #28]
 346:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 254              		.loc 1 346 3 is_stmt 1 view .LVU73
 255 00c6 05A9     		add	r1, sp, #20
 256 00c8 0D48     		ldr	r0, .L7+12
 257 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 258              	.LVL6:
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 349:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 259              		.loc 1 349 3 view .LVU74
 260              		.loc 1 349 23 is_stmt 0 view .LVU75
 261 00ce 0423     		movs	r3, #4
 262 00d0 0593     		str	r3, [sp, #20]
 350:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 263              		.loc 1 350 3 is_stmt 1 view .LVU76
 264              		.loc 1 350 24 is_stmt 0 view .LVU77
 265 00d2 0695     		str	r5, [sp, #24]
 351:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 266              		.loc 1 351 3 is_stmt 1 view .LVU78
 267              		.loc 1 351 24 is_stmt 0 view .LVU79
 268 00d4 0794     		str	r4, [sp, #28]
 352:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 269              		.loc 1 352 3 is_stmt 1 view .LVU80
 270 00d6 05A9     		add	r1, sp, #20
 271 00d8 0A48     		ldr	r0, .L7+16
 272 00da FFF7FEFF 		bl	HAL_GPIO_Init
 273              	.LVL7:
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* EXTI interrupt init*/
 355:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 274              		.loc 1 355 3 view .LVU81
 275 00de 2246     		mov	r2, r4
ARM GAS  C:\Temp\cckm1ONa.s 			page 12


 276 00e0 2146     		mov	r1, r4
 277 00e2 2820     		movs	r0, #40
 278 00e4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 279              	.LVL8:
 356:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 280              		.loc 1 356 3 view .LVU82
 281 00e8 2820     		movs	r0, #40
 282 00ea FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 283              	.LVL9:
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 359:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 360:Core/Src/main.c **** }
 284              		.loc 1 360 1 is_stmt 0 view .LVU83
 285 00ee 0AB0     		add	sp, sp, #40
 286              		.cfi_def_cfa_offset 16
 287              		@ sp needed
 288 00f0 70BD     		pop	{r4, r5, r6, pc}
 289              	.L8:
 290 00f2 00BF     		.align	2
 291              	.L7:
 292 00f4 00380240 		.word	1073887232
 293 00f8 00000240 		.word	1073872896
 294 00fc 00080240 		.word	1073874944
 295 0100 00040240 		.word	1073873920
 296 0104 000C0240 		.word	1073875968
 297              		.cfi_endproc
 298              	.LFE139:
 300              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 301              		.align	1
 302              		.global	HAL_TIM_PeriodElapsedCallback
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 307              	HAL_TIM_PeriodElapsedCallback:
 308              	.LVL10:
 309              	.LFB140:
 361:Core/Src/main.c **** 
 362:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** /* USER CODE END 4 */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c **** /**
 367:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 368:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 369:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 370:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 371:Core/Src/main.c ****   * @param  htim : TIM handle
 372:Core/Src/main.c ****   * @retval None
 373:Core/Src/main.c ****   */
 374:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 375:Core/Src/main.c **** {
 310              		.loc 1 375 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		.loc 1 375 1 is_stmt 0 view .LVU85
ARM GAS  C:\Temp\cckm1ONa.s 			page 13


 315 0000 08B5     		push	{r3, lr}
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 3, -8
 318              		.cfi_offset 14, -4
 376:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 379:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 319              		.loc 1 379 3 is_stmt 1 view .LVU86
 320              		.loc 1 379 11 is_stmt 0 view .LVU87
 321 0002 0268     		ldr	r2, [r0]
 322              		.loc 1 379 6 view .LVU88
 323 0004 034B     		ldr	r3, .L13
 324 0006 9A42     		cmp	r2, r3
 325 0008 00D0     		beq	.L12
 326              	.LVL11:
 327              	.L9:
 380:Core/Src/main.c ****     HAL_IncTick();
 381:Core/Src/main.c ****   }
 382:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 385:Core/Src/main.c **** }
 328              		.loc 1 385 1 view .LVU89
 329 000a 08BD     		pop	{r3, pc}
 330              	.LVL12:
 331              	.L12:
 380:Core/Src/main.c ****     HAL_IncTick();
 332              		.loc 1 380 5 is_stmt 1 view .LVU90
 333 000c FFF7FEFF 		bl	HAL_IncTick
 334              	.LVL13:
 335              		.loc 1 385 1 is_stmt 0 view .LVU91
 336 0010 FBE7     		b	.L9
 337              	.L14:
 338 0012 00BF     		.align	2
 339              	.L13:
 340 0014 00000140 		.word	1073807360
 341              		.cfi_endproc
 342              	.LFE140:
 344              		.section	.text.Error_Handler,"ax",%progbits
 345              		.align	1
 346              		.global	Error_Handler
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	Error_Handler:
 352              	.LFB141:
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** /**
 388:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 389:Core/Src/main.c ****   * @retval None
 390:Core/Src/main.c ****   */
 391:Core/Src/main.c **** void Error_Handler(void)
 392:Core/Src/main.c **** {
 353              		.loc 1 392 1 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ Volatile: function does not return.
ARM GAS  C:\Temp\cckm1ONa.s 			page 14


 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 393:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 394:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 395:Core/Src/main.c ****   __disable_irq();
 359              		.loc 1 395 3 view .LVU93
 360              	.LBB10:
 361              	.LBI10:
 362              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  C:\Temp\cckm1ONa.s 			page 15


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  C:\Temp\cckm1ONa.s 			page 16


 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  C:\Temp\cckm1ONa.s 			page 17


 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Temp\cckm1ONa.s 			page 18


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\cckm1ONa.s 			page 19


 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cckm1ONa.s 			page 20


 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
ARM GAS  C:\Temp\cckm1ONa.s 			page 21


 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cckm1ONa.s 			page 22


 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
ARM GAS  C:\Temp\cckm1ONa.s 			page 23


 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\cckm1ONa.s 			page 24


 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
ARM GAS  C:\Temp\cckm1ONa.s 			page 25


 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
ARM GAS  C:\Temp\cckm1ONa.s 			page 26


 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\cckm1ONa.s 			page 27


 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
ARM GAS  C:\Temp\cckm1ONa.s 			page 28


 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Temp\cckm1ONa.s 			page 29


 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Temp\cckm1ONa.s 			page 30


 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\cckm1ONa.s 			page 31


 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 363              		.loc 2 960 27 view .LVU94
 364              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 365              		.loc 2 962 3 view .LVU95
 366              		.syntax unified
 367              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 368 0000 72B6     		cpsid i
 369              	@ 0 "" 2
 370              		.thumb
 371              		.syntax unified
 372              	.L16:
 373              	.LBE11:
 374              	.LBE10:
 396:Core/Src/main.c ****   while (1)
 375              		.loc 1 396 3 discriminator 1 view .LVU96
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****   }
 376              		.loc 1 398 3 discriminator 1 view .LVU97
 396:Core/Src/main.c ****   while (1)
 377              		.loc 1 396 9 discriminator 1 view .LVU98
 378 0002 FEE7     		b	.L16
 379              		.cfi_endproc
 380              	.LFE141:
 382              		.section	.text.MX_TIM2_Init,"ax",%progbits
 383              		.align	1
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 388              	MX_TIM2_Init:
 389              	.LFB136:
 200:Core/Src/main.c **** 
 390              		.loc 1 200 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 24
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394 0000 00B5     		push	{lr}
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 14, -4
 397 0002 87B0     		sub	sp, sp, #28
 398              		.cfi_def_cfa_offset 32
 206:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 399              		.loc 1 206 3 view .LVU100
 206:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 400              		.loc 1 206 26 is_stmt 0 view .LVU101
 401 0004 0023     		movs	r3, #0
 402 0006 0293     		str	r3, [sp, #8]
 403 0008 0393     		str	r3, [sp, #12]
 404 000a 0493     		str	r3, [sp, #16]
 405 000c 0593     		str	r3, [sp, #20]
 207:Core/Src/main.c **** 
 406              		.loc 1 207 3 is_stmt 1 view .LVU102
 207:Core/Src/main.c **** 
 407              		.loc 1 207 27 is_stmt 0 view .LVU103
 408 000e 0093     		str	r3, [sp]
 409 0010 0193     		str	r3, [sp, #4]
ARM GAS  C:\Temp\cckm1ONa.s 			page 32


 212:Core/Src/main.c ****   htim2.Init.Prescaler = 200-1;
 410              		.loc 1 212 3 is_stmt 1 view .LVU104
 212:Core/Src/main.c ****   htim2.Init.Prescaler = 200-1;
 411              		.loc 1 212 18 is_stmt 0 view .LVU105
 412 0012 1448     		ldr	r0, .L25
 413 0014 4FF08042 		mov	r2, #1073741824
 414 0018 0260     		str	r2, [r0]
 213:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 415              		.loc 1 213 3 is_stmt 1 view .LVU106
 213:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 416              		.loc 1 213 24 is_stmt 0 view .LVU107
 417 001a C722     		movs	r2, #199
 418 001c 4260     		str	r2, [r0, #4]
 214:Core/Src/main.c ****   htim2.Init.Period = 5000-1;
 419              		.loc 1 214 3 is_stmt 1 view .LVU108
 214:Core/Src/main.c ****   htim2.Init.Period = 5000-1;
 420              		.loc 1 214 26 is_stmt 0 view .LVU109
 421 001e 8360     		str	r3, [r0, #8]
 215:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 422              		.loc 1 215 3 is_stmt 1 view .LVU110
 215:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 423              		.loc 1 215 21 is_stmt 0 view .LVU111
 424 0020 41F28732 		movw	r2, #4999
 425 0024 C260     		str	r2, [r0, #12]
 216:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 426              		.loc 1 216 3 is_stmt 1 view .LVU112
 216:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 427              		.loc 1 216 28 is_stmt 0 view .LVU113
 428 0026 0361     		str	r3, [r0, #16]
 217:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 429              		.loc 1 217 3 is_stmt 1 view .LVU114
 217:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 430              		.loc 1 217 32 is_stmt 0 view .LVU115
 431 0028 8023     		movs	r3, #128
 432 002a 8361     		str	r3, [r0, #24]
 218:Core/Src/main.c ****   {
 433              		.loc 1 218 3 is_stmt 1 view .LVU116
 218:Core/Src/main.c ****   {
 434              		.loc 1 218 7 is_stmt 0 view .LVU117
 435 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 436              	.LVL14:
 218:Core/Src/main.c ****   {
 437              		.loc 1 218 6 view .LVU118
 438 0030 90B9     		cbnz	r0, .L22
 222:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 439              		.loc 1 222 3 is_stmt 1 view .LVU119
 222:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 440              		.loc 1 222 34 is_stmt 0 view .LVU120
 441 0032 4FF48053 		mov	r3, #4096
 442 0036 0293     		str	r3, [sp, #8]
 223:Core/Src/main.c ****   {
 443              		.loc 1 223 3 is_stmt 1 view .LVU121
 223:Core/Src/main.c ****   {
 444              		.loc 1 223 7 is_stmt 0 view .LVU122
 445 0038 02A9     		add	r1, sp, #8
 446 003a 0A48     		ldr	r0, .L25
 447 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
ARM GAS  C:\Temp\cckm1ONa.s 			page 33


 448              	.LVL15:
 223:Core/Src/main.c ****   {
 449              		.loc 1 223 6 view .LVU123
 450 0040 60B9     		cbnz	r0, .L23
 227:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 451              		.loc 1 227 3 is_stmt 1 view .LVU124
 227:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 452              		.loc 1 227 37 is_stmt 0 view .LVU125
 453 0042 0023     		movs	r3, #0
 454 0044 0093     		str	r3, [sp]
 228:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 455              		.loc 1 228 3 is_stmt 1 view .LVU126
 228:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 456              		.loc 1 228 33 is_stmt 0 view .LVU127
 457 0046 0193     		str	r3, [sp, #4]
 229:Core/Src/main.c ****   {
 458              		.loc 1 229 3 is_stmt 1 view .LVU128
 229:Core/Src/main.c ****   {
 459              		.loc 1 229 7 is_stmt 0 view .LVU129
 460 0048 6946     		mov	r1, sp
 461 004a 0648     		ldr	r0, .L25
 462 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 463              	.LVL16:
 229:Core/Src/main.c ****   {
 464              		.loc 1 229 6 view .LVU130
 465 0050 30B9     		cbnz	r0, .L24
 237:Core/Src/main.c **** 
 466              		.loc 1 237 1 view .LVU131
 467 0052 07B0     		add	sp, sp, #28
 468              		.cfi_remember_state
 469              		.cfi_def_cfa_offset 4
 470              		@ sp needed
 471 0054 5DF804FB 		ldr	pc, [sp], #4
 472              	.L22:
 473              		.cfi_restore_state
 220:Core/Src/main.c ****   }
 474              		.loc 1 220 5 is_stmt 1 view .LVU132
 475 0058 FFF7FEFF 		bl	Error_Handler
 476              	.LVL17:
 477              	.L23:
 225:Core/Src/main.c ****   }
 478              		.loc 1 225 5 view .LVU133
 479 005c FFF7FEFF 		bl	Error_Handler
 480              	.LVL18:
 481              	.L24:
 231:Core/Src/main.c ****   }
 482              		.loc 1 231 5 view .LVU134
 483 0060 FFF7FEFF 		bl	Error_Handler
 484              	.LVL19:
 485              	.L26:
 486              		.align	2
 487              	.L25:
 488 0064 00000000 		.word	htim2
 489              		.cfi_endproc
 490              	.LFE136:
 492              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 493              		.align	1
ARM GAS  C:\Temp\cckm1ONa.s 			page 34


 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 498              	MX_USART2_UART_Init:
 499              	.LFB137:
 245:Core/Src/main.c **** 
 500              		.loc 1 245 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504 0000 08B5     		push	{r3, lr}
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 3, -8
 507              		.cfi_offset 14, -4
 254:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 508              		.loc 1 254 3 view .LVU136
 254:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 509              		.loc 1 254 19 is_stmt 0 view .LVU137
 510 0002 0A48     		ldr	r0, .L31
 511 0004 0A4B     		ldr	r3, .L31+4
 512 0006 0360     		str	r3, [r0]
 255:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 513              		.loc 1 255 3 is_stmt 1 view .LVU138
 255:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 514              		.loc 1 255 24 is_stmt 0 view .LVU139
 515 0008 4FF4E133 		mov	r3, #115200
 516 000c 4360     		str	r3, [r0, #4]
 256:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 517              		.loc 1 256 3 is_stmt 1 view .LVU140
 256:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 518              		.loc 1 256 26 is_stmt 0 view .LVU141
 519 000e 0023     		movs	r3, #0
 520 0010 8360     		str	r3, [r0, #8]
 257:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 521              		.loc 1 257 3 is_stmt 1 view .LVU142
 257:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 522              		.loc 1 257 24 is_stmt 0 view .LVU143
 523 0012 C360     		str	r3, [r0, #12]
 258:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 524              		.loc 1 258 3 is_stmt 1 view .LVU144
 258:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 525              		.loc 1 258 22 is_stmt 0 view .LVU145
 526 0014 0361     		str	r3, [r0, #16]
 259:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 527              		.loc 1 259 3 is_stmt 1 view .LVU146
 259:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 528              		.loc 1 259 20 is_stmt 0 view .LVU147
 529 0016 0C22     		movs	r2, #12
 530 0018 4261     		str	r2, [r0, #20]
 260:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 531              		.loc 1 260 3 is_stmt 1 view .LVU148
 260:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 532              		.loc 1 260 25 is_stmt 0 view .LVU149
 533 001a 8361     		str	r3, [r0, #24]
 261:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 534              		.loc 1 261 3 is_stmt 1 view .LVU150
 261:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
ARM GAS  C:\Temp\cckm1ONa.s 			page 35


 535              		.loc 1 261 28 is_stmt 0 view .LVU151
 536 001c C361     		str	r3, [r0, #28]
 262:Core/Src/main.c ****   {
 537              		.loc 1 262 3 is_stmt 1 view .LVU152
 262:Core/Src/main.c ****   {
 538              		.loc 1 262 7 is_stmt 0 view .LVU153
 539 001e FFF7FEFF 		bl	HAL_UART_Init
 540              	.LVL20:
 262:Core/Src/main.c ****   {
 541              		.loc 1 262 6 view .LVU154
 542 0022 00B9     		cbnz	r0, .L30
 270:Core/Src/main.c **** 
 543              		.loc 1 270 1 view .LVU155
 544 0024 08BD     		pop	{r3, pc}
 545              	.L30:
 264:Core/Src/main.c ****   }
 546              		.loc 1 264 5 is_stmt 1 view .LVU156
 547 0026 FFF7FEFF 		bl	Error_Handler
 548              	.LVL21:
 549              	.L32:
 550 002a 00BF     		.align	2
 551              	.L31:
 552 002c 00000000 		.word	huart2
 553 0030 00440040 		.word	1073759232
 554              		.cfi_endproc
 555              	.LFE137:
 557              		.section	.text.SystemClock_Config,"ax",%progbits
 558              		.align	1
 559              		.global	SystemClock_Config
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 564              	SystemClock_Config:
 565              	.LFB135:
 153:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 566              		.loc 1 153 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 80
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570 0000 00B5     		push	{lr}
 571              		.cfi_def_cfa_offset 4
 572              		.cfi_offset 14, -4
 573 0002 95B0     		sub	sp, sp, #84
 574              		.cfi_def_cfa_offset 88
 154:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 575              		.loc 1 154 3 view .LVU158
 154:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 576              		.loc 1 154 22 is_stmt 0 view .LVU159
 577 0004 3022     		movs	r2, #48
 578 0006 0021     		movs	r1, #0
 579 0008 08A8     		add	r0, sp, #32
 580 000a FFF7FEFF 		bl	memset
 581              	.LVL22:
 155:Core/Src/main.c **** 
 582              		.loc 1 155 3 is_stmt 1 view .LVU160
 155:Core/Src/main.c **** 
 583              		.loc 1 155 22 is_stmt 0 view .LVU161
ARM GAS  C:\Temp\cckm1ONa.s 			page 36


 584 000e 0023     		movs	r3, #0
 585 0010 0393     		str	r3, [sp, #12]
 586 0012 0493     		str	r3, [sp, #16]
 587 0014 0593     		str	r3, [sp, #20]
 588 0016 0693     		str	r3, [sp, #24]
 589 0018 0793     		str	r3, [sp, #28]
 159:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 590              		.loc 1 159 3 is_stmt 1 view .LVU162
 591              	.LBB12:
 159:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 592              		.loc 1 159 3 view .LVU163
 593 001a 0193     		str	r3, [sp, #4]
 159:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 594              		.loc 1 159 3 view .LVU164
 595 001c 1E4A     		ldr	r2, .L39
 596 001e 116C     		ldr	r1, [r2, #64]
 597 0020 41F08051 		orr	r1, r1, #268435456
 598 0024 1164     		str	r1, [r2, #64]
 159:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 599              		.loc 1 159 3 view .LVU165
 600 0026 126C     		ldr	r2, [r2, #64]
 601 0028 02F08052 		and	r2, r2, #268435456
 602 002c 0192     		str	r2, [sp, #4]
 159:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 603              		.loc 1 159 3 view .LVU166
 604 002e 019A     		ldr	r2, [sp, #4]
 605              	.LBE12:
 159:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 606              		.loc 1 159 3 view .LVU167
 160:Core/Src/main.c **** 
 607              		.loc 1 160 3 view .LVU168
 608              	.LBB13:
 160:Core/Src/main.c **** 
 609              		.loc 1 160 3 view .LVU169
 610 0030 0293     		str	r3, [sp, #8]
 160:Core/Src/main.c **** 
 611              		.loc 1 160 3 view .LVU170
 612 0032 1A4A     		ldr	r2, .L39+4
 613 0034 1168     		ldr	r1, [r2]
 614 0036 41F44041 		orr	r1, r1, #49152
 615 003a 1160     		str	r1, [r2]
 160:Core/Src/main.c **** 
 616              		.loc 1 160 3 view .LVU171
 617 003c 1268     		ldr	r2, [r2]
 618 003e 02F44042 		and	r2, r2, #49152
 619 0042 0292     		str	r2, [sp, #8]
 160:Core/Src/main.c **** 
 620              		.loc 1 160 3 view .LVU172
 621 0044 029A     		ldr	r2, [sp, #8]
 622              	.LBE13:
 160:Core/Src/main.c **** 
 623              		.loc 1 160 3 view .LVU173
 165:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 624              		.loc 1 165 3 view .LVU174
 165:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 625              		.loc 1 165 36 is_stmt 0 view .LVU175
 626 0046 0222     		movs	r2, #2
ARM GAS  C:\Temp\cckm1ONa.s 			page 37


 627 0048 0892     		str	r2, [sp, #32]
 166:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 628              		.loc 1 166 3 is_stmt 1 view .LVU176
 166:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 629              		.loc 1 166 30 is_stmt 0 view .LVU177
 630 004a 0121     		movs	r1, #1
 631 004c 0B91     		str	r1, [sp, #44]
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 632              		.loc 1 167 3 is_stmt 1 view .LVU178
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 633              		.loc 1 167 41 is_stmt 0 view .LVU179
 634 004e 1021     		movs	r1, #16
 635 0050 0C91     		str	r1, [sp, #48]
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 636              		.loc 1 168 3 is_stmt 1 view .LVU180
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 637              		.loc 1 168 34 is_stmt 0 view .LVU181
 638 0052 0E92     		str	r2, [sp, #56]
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 639              		.loc 1 169 3 is_stmt 1 view .LVU182
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 640              		.loc 1 169 35 is_stmt 0 view .LVU183
 641 0054 0F93     		str	r3, [sp, #60]
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 642              		.loc 1 170 3 is_stmt 1 view .LVU184
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 643              		.loc 1 170 30 is_stmt 0 view .LVU185
 644 0056 0823     		movs	r3, #8
 645 0058 1093     		str	r3, [sp, #64]
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 646              		.loc 1 171 3 is_stmt 1 view .LVU186
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 647              		.loc 1 171 30 is_stmt 0 view .LVU187
 648 005a 6423     		movs	r3, #100
 649 005c 1193     		str	r3, [sp, #68]
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 650              		.loc 1 172 3 is_stmt 1 view .LVU188
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 651              		.loc 1 172 30 is_stmt 0 view .LVU189
 652 005e 1292     		str	r2, [sp, #72]
 173:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 653              		.loc 1 173 3 is_stmt 1 view .LVU190
 173:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 654              		.loc 1 173 30 is_stmt 0 view .LVU191
 655 0060 0423     		movs	r3, #4
 656 0062 1393     		str	r3, [sp, #76]
 174:Core/Src/main.c ****   {
 657              		.loc 1 174 3 is_stmt 1 view .LVU192
 174:Core/Src/main.c ****   {
 658              		.loc 1 174 7 is_stmt 0 view .LVU193
 659 0064 08A8     		add	r0, sp, #32
 660 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 661              	.LVL23:
 174:Core/Src/main.c ****   {
 662              		.loc 1 174 6 view .LVU194
 663 006a 88B9     		cbnz	r0, .L37
 181:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  C:\Temp\cckm1ONa.s 			page 38


 664              		.loc 1 181 3 is_stmt 1 view .LVU195
 181:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 665              		.loc 1 181 31 is_stmt 0 view .LVU196
 666 006c 0F23     		movs	r3, #15
 667 006e 0393     		str	r3, [sp, #12]
 183:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 668              		.loc 1 183 3 is_stmt 1 view .LVU197
 183:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 669              		.loc 1 183 34 is_stmt 0 view .LVU198
 670 0070 0223     		movs	r3, #2
 671 0072 0493     		str	r3, [sp, #16]
 184:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 672              		.loc 1 184 3 is_stmt 1 view .LVU199
 184:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 673              		.loc 1 184 35 is_stmt 0 view .LVU200
 674 0074 0023     		movs	r3, #0
 675 0076 0593     		str	r3, [sp, #20]
 185:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 676              		.loc 1 185 3 is_stmt 1 view .LVU201
 185:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 677              		.loc 1 185 36 is_stmt 0 view .LVU202
 678 0078 4FF48052 		mov	r2, #4096
 679 007c 0692     		str	r2, [sp, #24]
 186:Core/Src/main.c **** 
 680              		.loc 1 186 3 is_stmt 1 view .LVU203
 186:Core/Src/main.c **** 
 681              		.loc 1 186 36 is_stmt 0 view .LVU204
 682 007e 0793     		str	r3, [sp, #28]
 188:Core/Src/main.c ****   {
 683              		.loc 1 188 3 is_stmt 1 view .LVU205
 188:Core/Src/main.c ****   {
 684              		.loc 1 188 7 is_stmt 0 view .LVU206
 685 0080 0321     		movs	r1, #3
 686 0082 03A8     		add	r0, sp, #12
 687 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 688              	.LVL24:
 188:Core/Src/main.c ****   {
 689              		.loc 1 188 6 view .LVU207
 690 0088 20B9     		cbnz	r0, .L38
 192:Core/Src/main.c **** 
 691              		.loc 1 192 1 view .LVU208
 692 008a 15B0     		add	sp, sp, #84
 693              		.cfi_remember_state
 694              		.cfi_def_cfa_offset 4
 695              		@ sp needed
 696 008c 5DF804FB 		ldr	pc, [sp], #4
 697              	.L37:
 698              		.cfi_restore_state
 176:Core/Src/main.c ****   }
 699              		.loc 1 176 5 is_stmt 1 view .LVU209
 700 0090 FFF7FEFF 		bl	Error_Handler
 701              	.LVL25:
 702              	.L38:
 190:Core/Src/main.c ****   }
 703              		.loc 1 190 5 view .LVU210
 704 0094 FFF7FEFF 		bl	Error_Handler
 705              	.LVL26:
ARM GAS  C:\Temp\cckm1ONa.s 			page 39


 706              	.L40:
 707              		.align	2
 708              	.L39:
 709 0098 00380240 		.word	1073887232
 710 009c 00700040 		.word	1073770496
 711              		.cfi_endproc
 712              	.LFE135:
 714              		.section	.text.main,"ax",%progbits
 715              		.align	1
 716              		.global	main
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 721              	main:
 722              	.LFB134:
  81:Core/Src/main.c **** 
 723              		.loc 1 81 1 view -0
 724              		.cfi_startproc
 725              		@ Volatile: function does not return.
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728 0000 08B5     		push	{r3, lr}
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 3, -8
 731              		.cfi_offset 14, -4
  90:Core/Src/main.c **** 
 732              		.loc 1 90 3 view .LVU212
 733 0002 FFF7FEFF 		bl	HAL_Init
 734              	.LVL27:
  97:Core/Src/main.c **** 
 735              		.loc 1 97 3 view .LVU213
 736 0006 FFF7FEFF 		bl	SystemClock_Config
 737              	.LVL28:
 100:Core/Src/main.c ****   /* USER CODE END SysInit */
 738              		.loc 1 100 3 view .LVU214
 739 000a 0022     		movs	r2, #0
 740 000c 2021     		movs	r1, #32
 741 000e 1248     		ldr	r0, .L45
 742 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 743              	.LVL29:
 104:Core/Src/main.c ****   MX_DMA_Init();
 744              		.loc 1 104 3 view .LVU215
 745 0014 FFF7FEFF 		bl	MX_GPIO_Init
 746              	.LVL30:
 105:Core/Src/main.c ****   MX_TIM2_Init();
 747              		.loc 1 105 3 view .LVU216
 748 0018 FFF7FEFF 		bl	MX_DMA_Init
 749              	.LVL31:
 106:Core/Src/main.c ****   MX_USART2_UART_Init();
 750              		.loc 1 106 3 view .LVU217
 751 001c FFF7FEFF 		bl	MX_TIM2_Init
 752              	.LVL32:
 107:Core/Src/main.c ****   MX_MEMS_Init();
 753              		.loc 1 107 3 view .LVU218
 754 0020 FFF7FEFF 		bl	MX_USART2_UART_Init
 755              	.LVL33:
 108:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  C:\Temp\cckm1ONa.s 			page 40


 756              		.loc 1 108 3 view .LVU219
 757 0024 FFF7FEFF 		bl	MX_MEMS_Init
 758              	.LVL34:
 110:Core/Src/main.c ****   /* USER CODE END 2 */
 759              		.loc 1 110 3 view .LVU220
 760 0028 0C48     		ldr	r0, .L45+4
 761 002a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 762              	.LVL35:
 763              	.L42:
 116:Core/Src/main.c ****   {
 764              		.loc 1 116 3 view .LVU221
 131:Core/Src/main.c ****       counter++;
 765              		.loc 1 131 5 view .LVU222
 131:Core/Src/main.c ****       counter++;
 766              		.loc 1 131 21 is_stmt 0 view .LVU223
 767 002e 0C4B     		ldr	r3, .L45+8
 768 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 131:Core/Src/main.c ****       counter++;
 769              		.loc 1 131 8 view .LVU224
 770 0032 012B     		cmp	r3, #1
 771 0034 FBD1     		bne	.L42
 132:Core/Src/main.c ****       getIKS02A1();
 772              		.loc 1 132 7 is_stmt 1 view .LVU225
 132:Core/Src/main.c ****       getIKS02A1();
 773              		.loc 1 132 14 is_stmt 0 view .LVU226
 774 0036 0B4A     		ldr	r2, .L45+12
 775 0038 1368     		ldr	r3, [r2]
 776 003a 0133     		adds	r3, r3, #1
 777 003c 1360     		str	r3, [r2]
 133:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 778              		.loc 1 133 7 is_stmt 1 view .LVU227
 779 003e FFF7FEFF 		bl	getIKS02A1
 780              	.LVL36:
 134:Core/Src/main.c ****       sendToSimulink();
 781              		.loc 1 134 7 view .LVU228
 782 0042 2021     		movs	r1, #32
 783 0044 0448     		ldr	r0, .L45
 784 0046 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 785              	.LVL37:
 135:Core/Src/main.c ****       clearToSend = 0;
 786              		.loc 1 135 7 view .LVU229
 787 004a FFF7FEFF 		bl	sendToSimulink
 788              	.LVL38:
 136:Core/Src/main.c ****     }
 789              		.loc 1 136 7 view .LVU230
 136:Core/Src/main.c ****     }
 790              		.loc 1 136 19 is_stmt 0 view .LVU231
 791 004e 044B     		ldr	r3, .L45+8
 792 0050 0022     		movs	r2, #0
 793 0052 1A70     		strb	r2, [r3]
 794 0054 EBE7     		b	.L42
 795              	.L46:
 796 0056 00BF     		.align	2
 797              	.L45:
 798 0058 00000240 		.word	1073872896
 799 005c 00000000 		.word	htim2
 800 0060 00000000 		.word	clearToSend
ARM GAS  C:\Temp\cckm1ONa.s 			page 41


 801 0064 00000000 		.word	counter
 802              		.cfi_endproc
 803              	.LFE134:
 805              		.global	counter
 806              		.section	.bss.counter,"aw",%nobits
 807              		.align	2
 810              	counter:
 811 0000 00000000 		.space	4
 812              		.global	calibrated
 813              		.section	.bss.calibrated,"aw",%nobits
 816              	calibrated:
 817 0000 00       		.space	1
 818              		.global	clearToSend
 819              		.section	.bss.clearToSend,"aw",%nobits
 822              	clearToSend:
 823 0000 00       		.space	1
 824              		.global	bigBuffer
 825              		.section	.bss.bigBuffer,"aw",%nobits
 826              		.align	2
 829              	bigBuffer:
 830 0000 00000000 		.space	34
 830      00000000 
 830      00000000 
 830      00000000 
 830      00000000 
 831              		.global	numberOfSimulinkBytes
 832              		.section	.rodata.numberOfSimulinkBytes,"a"
 833              		.align	2
 836              	numberOfSimulinkBytes:
 837 0000 1C000000 		.word	28
 838              		.global	expectedTerminator
 839              		.section	.rodata.expectedTerminator,"a"
 840              		.align	2
 843              	expectedTerminator:
 844 0000 415F4A   		.ascii	"A_J"
 845              		.global	expectedHeader
 846              		.section	.rodata.expectedHeader,"a"
 847              		.align	2
 850              	expectedHeader:
 851 0000 4A5F41   		.ascii	"J_A"
 852              		.global	mag_axis
 853              		.section	.bss.mag_axis,"aw",%nobits
 854              		.align	2
 857              	mag_axis:
 858 0000 00000000 		.space	12
 858      00000000 
 858      00000000 
 859              		.global	accel2_axis
 860              		.section	.bss.accel2_axis,"aw",%nobits
 861              		.align	2
 864              	accel2_axis:
 865 0000 00000000 		.space	12
 865      00000000 
 865      00000000 
 866              		.global	gyro_axis
 867              		.section	.bss.gyro_axis,"aw",%nobits
 868              		.align	2
ARM GAS  C:\Temp\cckm1ONa.s 			page 42


 871              	gyro_axis:
 872 0000 00000000 		.space	12
 872      00000000 
 872      00000000 
 873              		.global	accel1_axis
 874              		.section	.bss.accel1_axis,"aw",%nobits
 875              		.align	2
 878              	accel1_axis:
 879 0000 00000000 		.space	12
 879      00000000 
 879      00000000 
 880              		.global	hdma_usart2_rx
 881              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 882              		.align	2
 885              	hdma_usart2_rx:
 886 0000 00000000 		.space	96
 886      00000000 
 886      00000000 
 886      00000000 
 886      00000000 
 887              		.global	huart2
 888              		.section	.bss.huart2,"aw",%nobits
 889              		.align	2
 892              	huart2:
 893 0000 00000000 		.space	72
 893      00000000 
 893      00000000 
 893      00000000 
 893      00000000 
 894              		.global	htim2
 895              		.section	.bss.htim2,"aw",%nobits
 896              		.align	2
 899              	htim2:
 900 0000 00000000 		.space	72
 900      00000000 
 900      00000000 
 900      00000000 
 900      00000000 
 901              		.text
 902              	.Letext0:
 903              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 904              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 905              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 906              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 907              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 908              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 909              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 910              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 911              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 912              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 913              		.file 13 "Drivers/BSP/IKS02A1/iks02a1_motion_sensors.h"
 914              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 915              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 916              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 917              		.file 17 "Core/Inc/IKS02A1_Simulink.h"
 918              		.file 18 "MEMS/App/app_mems.h"
 919              		.file 19 "<built-in>"
ARM GAS  C:\Temp\cckm1ONa.s 			page 43


ARM GAS  C:\Temp\cckm1ONa.s 			page 44


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\cckm1ONa.s:21     .text.MX_DMA_Init:00000000 $t
  C:\Temp\cckm1ONa.s:27     .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\cckm1ONa.s:73     .text.MX_DMA_Init:00000030 $d
  C:\Temp\cckm1ONa.s:78     .text.MX_GPIO_Init:00000000 $t
  C:\Temp\cckm1ONa.s:84     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\cckm1ONa.s:292    .text.MX_GPIO_Init:000000f4 $d
  C:\Temp\cckm1ONa.s:301    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\cckm1ONa.s:307    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\cckm1ONa.s:340    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\cckm1ONa.s:345    .text.Error_Handler:00000000 $t
  C:\Temp\cckm1ONa.s:351    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\cckm1ONa.s:383    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\cckm1ONa.s:388    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\cckm1ONa.s:488    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\cckm1ONa.s:899    .bss.htim2:00000000 htim2
  C:\Temp\cckm1ONa.s:493    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\cckm1ONa.s:498    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\cckm1ONa.s:552    .text.MX_USART2_UART_Init:0000002c $d
  C:\Temp\cckm1ONa.s:892    .bss.huart2:00000000 huart2
  C:\Temp\cckm1ONa.s:558    .text.SystemClock_Config:00000000 $t
  C:\Temp\cckm1ONa.s:564    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\cckm1ONa.s:709    .text.SystemClock_Config:00000098 $d
  C:\Temp\cckm1ONa.s:715    .text.main:00000000 $t
  C:\Temp\cckm1ONa.s:721    .text.main:00000000 main
  C:\Temp\cckm1ONa.s:798    .text.main:00000058 $d
  C:\Temp\cckm1ONa.s:822    .bss.clearToSend:00000000 clearToSend
  C:\Temp\cckm1ONa.s:810    .bss.counter:00000000 counter
  C:\Temp\cckm1ONa.s:807    .bss.counter:00000000 $d
  C:\Temp\cckm1ONa.s:816    .bss.calibrated:00000000 calibrated
  C:\Temp\cckm1ONa.s:817    .bss.calibrated:00000000 $d
  C:\Temp\cckm1ONa.s:823    .bss.clearToSend:00000000 $d
  C:\Temp\cckm1ONa.s:829    .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\cckm1ONa.s:826    .bss.bigBuffer:00000000 $d
  C:\Temp\cckm1ONa.s:836    .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\cckm1ONa.s:833    .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\cckm1ONa.s:843    .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\cckm1ONa.s:840    .rodata.expectedTerminator:00000000 $d
  C:\Temp\cckm1ONa.s:850    .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\cckm1ONa.s:847    .rodata.expectedHeader:00000000 $d
  C:\Temp\cckm1ONa.s:857    .bss.mag_axis:00000000 mag_axis
  C:\Temp\cckm1ONa.s:854    .bss.mag_axis:00000000 $d
  C:\Temp\cckm1ONa.s:864    .bss.accel2_axis:00000000 accel2_axis
  C:\Temp\cckm1ONa.s:861    .bss.accel2_axis:00000000 $d
  C:\Temp\cckm1ONa.s:871    .bss.gyro_axis:00000000 gyro_axis
  C:\Temp\cckm1ONa.s:868    .bss.gyro_axis:00000000 $d
  C:\Temp\cckm1ONa.s:878    .bss.accel1_axis:00000000 accel1_axis
  C:\Temp\cckm1ONa.s:875    .bss.accel1_axis:00000000 $d
  C:\Temp\cckm1ONa.s:885    .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
  C:\Temp\cckm1ONa.s:882    .bss.hdma_usart2_rx:00000000 $d
  C:\Temp\cckm1ONa.s:889    .bss.huart2:00000000 $d
  C:\Temp\cckm1ONa.s:896    .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ARM GAS  C:\Temp\cckm1ONa.s 			page 45


HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_MEMS_Init
HAL_TIM_Base_Start_IT
getIKS02A1
HAL_GPIO_TogglePin
sendToSimulink
