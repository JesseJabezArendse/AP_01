ARM GAS  C:\Temp\cc3UDUYh.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.bytesToFloat_main,"ax",%progbits
  21              		.align	1
  22              		.global	bytesToFloat_main
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	bytesToFloat_main:
  28              	.LVL0:
  29              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "iks02a1_motion_sensors.h"
  25:Core/Src/main.c **** #include "IKS02A1_Simulink.h"
  26:Core/Src/main.c **** #include "VL53L8A1_Simulink.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  C:\Temp\cc3UDUYh.s 			page 2


  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  46:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** UART_HandleTypeDef huart2;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel1_axis;
  53:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t gyro_axis;
  54:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel2_axis;
  55:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t mag_axis;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_centre;
  58:Core/Src/main.c **** extern RANGING_SENSOR_ProfileConfig_t Profile;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** const uint8_t* header = 'A_J';
  61:Core/Src/main.c **** const uint8_t* terminator = 'J_A';
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  64:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  65:Core/Src/main.c **** /* USER CODE END PV */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  68:Core/Src/main.c **** void SystemClock_Config(void);
  69:Core/Src/main.c **** static void MX_TIM2_Init(void);
  70:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  71:Core/Src/main.c **** static void MX_TIM3_Init(void);
  72:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END PFP */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  77:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  78:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*8;
  79:Core/Src/main.c **** uint8_t bigBuffer[4*8 +3+3] = {0};
  80:Core/Src/main.c **** uint8_t clearToSend = 0;
  81:Core/Src/main.c **** uint8_t clearToGetL8 = 0;
  82:Core/Src/main.c **** uint8_t calibrated = 0;
  83:Core/Src/main.c **** int32_t counter = 0;
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** extern int32_t accel1_fsr;
  86:Core/Src/main.c **** extern float accel1_odr;
ARM GAS  C:\Temp\cc3UDUYh.s 			page 3


  87:Core/Src/main.c **** extern int32_t gyro_fsr;
  88:Core/Src/main.c **** extern float gyro_odr;
  89:Core/Src/main.c **** extern int32_t accel2_fsr;
  90:Core/Src/main.c **** extern float accel2_odr;
  91:Core/Src/main.c **** extern float mag_odr;
  92:Core/Src/main.c **** extern float_t temperature;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** extern float tof_odr;
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** extern float fastestODR;
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** float   bytesToFloat_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4) {
  30              		.loc 1 98 90 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 98 90 is_stmt 0 view .LVU1
  36 0000 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 8
  99:Core/Src/main.c ****     float result;
  38              		.loc 1 99 5 is_stmt 1 view .LVU2
 100:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
  39              		.loc 1 100 5 view .LVU3
  40              		.loc 1 100 13 is_stmt 0 view .LVU4
  41 0002 8DF80400 		strb	r0, [sp, #4]
  42 0006 8DF80510 		strb	r1, [sp, #5]
  43 000a 8DF80620 		strb	r2, [sp, #6]
  44 000e 8DF80730 		strb	r3, [sp, #7]
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****     // Use memcpy to copy the 4 bytes into a float (this preserves the binary representation)
 103:Core/Src/main.c ****     memcpy(&result, bytes, sizeof(float));
  45              		.loc 1 103 5 is_stmt 1 view .LVU5
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****     return result;
  46              		.loc 1 105 5 view .LVU6
 106:Core/Src/main.c **** }
  47              		.loc 1 106 1 is_stmt 0 view .LVU7
  48 0012 9DED010A 		vldr.32	s0, [sp, #4]
  49 0016 02B0     		add	sp, sp, #8
  50              		.cfi_def_cfa_offset 0
  51              		@ sp needed
  52 0018 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE137:
  56              		.section	.text.bytesToInt32_main,"ax",%progbits
  57              		.align	1
  58              		.global	bytesToInt32_main
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	bytesToInt32_main:
  64              	.LVL1:
  65              	.LFB138:
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** int32_t bytesToInt32_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4)  {
  66              		.loc 1 108 91 is_stmt 1 view -0
ARM GAS  C:\Temp\cc3UDUYh.s 			page 4


  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71              		.loc 1 108 91 is_stmt 0 view .LVU9
  72 0000 82B0     		sub	sp, sp, #8
  73              		.cfi_def_cfa_offset 8
 109:Core/Src/main.c ****     int32_t result;
  74              		.loc 1 109 5 is_stmt 1 view .LVU10
 110:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
  75              		.loc 1 110 5 view .LVU11
  76              		.loc 1 110 13 is_stmt 0 view .LVU12
  77 0002 8DF80400 		strb	r0, [sp, #4]
  78 0006 8DF80510 		strb	r1, [sp, #5]
  79 000a 8DF80620 		strb	r2, [sp, #6]
  80 000e 8DF80730 		strb	r3, [sp, #7]
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****     // Use memcpy to copy the 4 bytes into a int32_t (this preserves the binary representation)
 113:Core/Src/main.c ****     memcpy(&result, bytes, sizeof(int32_t));
  81              		.loc 1 113 5 is_stmt 1 view .LVU13
  82              	.LVL2:
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****     return result;
  83              		.loc 1 115 5 view .LVU14
 116:Core/Src/main.c **** }
  84              		.loc 1 116 1 is_stmt 0 view .LVU15
  85 0012 0198     		ldr	r0, [sp, #4]
  86              	.LVL3:
  87              		.loc 1 116 1 view .LVU16
  88 0014 02B0     		add	sp, sp, #8
  89              		.cfi_def_cfa_offset 0
  90              	.LVL4:
  91              		.loc 1 116 1 view .LVU17
  92              		@ sp needed
  93 0016 7047     		bx	lr
  94              		.cfi_endproc
  95              	.LFE138:
  97              		.section	.text.receivedFromSimulink,"ax",%progbits
  98              		.align	1
  99              		.global	receivedFromSimulink
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 104              	receivedFromSimulink:
 105              	.LVL5:
 106              	.LFB139:
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** void receivedFromSimulink(uint8_t* bigBuffer){
 107              		.loc 1 118 46 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		.loc 1 118 46 is_stmt 0 view .LVU19
 112 0000 10B5     		push	{r4, lr}
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 4, -8
 115              		.cfi_offset 14, -4
ARM GAS  C:\Temp\cc3UDUYh.s 			page 5


 116 0002 0446     		mov	r4, r0
 119:Core/Src/main.c ****     accel1_fsr = bytesToInt32_main(bigBuffer[3 + 0] ,  bigBuffer[3 + 1] ,  bigBuffer[3 + 2] ,   big
 117              		.loc 1 119 5 is_stmt 1 view .LVU20
 118              		.loc 1 119 18 is_stmt 0 view .LVU21
 119 0004 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 120 0006 4279     		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 121 0008 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 122 000a C078     		ldrb	r0, [r0, #3]	@ zero_extendqisi2
 123              	.LVL6:
 124              		.loc 1 119 18 view .LVU22
 125 000c FFF7FEFF 		bl	bytesToInt32_main
 126              	.LVL7:
 127              		.loc 1 119 16 view .LVU23
 128 0010 214B     		ldr	r3, .L7
 129 0012 1860     		str	r0, [r3]
 120:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[7 + 0] ,  bigBuffer[7 + 1] ,  bigBuffer[7 + 2]  ,  big
 130              		.loc 1 120 5 is_stmt 1 view .LVU24
 131              		.loc 1 120 18 is_stmt 0 view .LVU25
 132 0014 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 133 0016 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 134 0018 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 135 001a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 136 001c FFF7FEFF 		bl	bytesToFloat_main
 137              	.LVL8:
 138              		.loc 1 120 16 view .LVU26
 139 0020 1E4B     		ldr	r3, .L7+4
 140 0022 83ED000A 		vstr.32	s0, [r3]
 121:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[11 + 0] , bigBuffer[11 + 1] , bigBuffer[11 + 2] ,  big
 141              		.loc 1 121 5 is_stmt 1 view .LVU27
 142              		.loc 1 121 18 is_stmt 0 view .LVU28
 143 0026 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 144 0028 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 145 002a 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
 146 002c E07A     		ldrb	r0, [r4, #11]	@ zero_extendqisi2
 147 002e FFF7FEFF 		bl	bytesToInt32_main
 148              	.LVL9:
 149              		.loc 1 121 14 view .LVU29
 150 0032 1B4B     		ldr	r3, .L7+8
 151 0034 1860     		str	r0, [r3]
 122:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 152              		.loc 1 122 5 is_stmt 1 view .LVU30
 153              		.loc 1 122 18 is_stmt 0 view .LVU31
 154 0036 A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 155 0038 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 156 003a 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 157 003c E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2
 158 003e FFF7FEFF 		bl	bytesToFloat_main
 159              	.LVL10:
 160              		.loc 1 122 14 view .LVU32
 161 0042 184B     		ldr	r3, .L7+12
 162 0044 83ED000A 		vstr.32	s0, [r3]
 123:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 163              		.loc 1 123 5 is_stmt 1 view .LVU33
 164              		.loc 1 123 18 is_stmt 0 view .LVU34
 165 0048 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 166 004a 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 167 004c 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
ARM GAS  C:\Temp\cc3UDUYh.s 			page 6


 168 004e E07C     		ldrb	r0, [r4, #19]	@ zero_extendqisi2
 169 0050 FFF7FEFF 		bl	bytesToInt32_main
 170              	.LVL11:
 171              		.loc 1 123 16 view .LVU35
 172 0054 144B     		ldr	r3, .L7+16
 173 0056 1860     		str	r0, [r3]
 124:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 174              		.loc 1 124 5 is_stmt 1 view .LVU36
 175              		.loc 1 124 18 is_stmt 0 view .LVU37
 176 0058 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 177 005a 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2
 178 005c 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 179 005e E07D     		ldrb	r0, [r4, #23]	@ zero_extendqisi2
 180 0060 FFF7FEFF 		bl	bytesToFloat_main
 181              	.LVL12:
 182              		.loc 1 124 16 view .LVU38
 183 0064 114B     		ldr	r3, .L7+20
 184 0066 83ED000A 		vstr.32	s0, [r3]
 125:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 185              		.loc 1 125 5 is_stmt 1 view .LVU39
 186              		.loc 1 125 18 is_stmt 0 view .LVU40
 187 006a A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 188 006c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 189 006e 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 190 0070 E07E     		ldrb	r0, [r4, #27]	@ zero_extendqisi2
 191 0072 FFF7FEFF 		bl	bytesToFloat_main
 192              	.LVL13:
 193              		.loc 1 125 13 view .LVU41
 194 0076 0E4B     		ldr	r3, .L7+24
 195 0078 83ED000A 		vstr.32	s0, [r3]
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     tof_odr =    bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 196              		.loc 1 127 5 is_stmt 1 view .LVU42
 197              		.loc 1 127 18 is_stmt 0 view .LVU43
 198 007c 94F82230 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 199 0080 94F82120 		ldrb	r2, [r4, #33]	@ zero_extendqisi2
 200 0084 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 201 0088 E07F     		ldrb	r0, [r4, #31]	@ zero_extendqisi2
 202 008a FFF7FEFF 		bl	bytesToFloat_main
 203              	.LVL14:
 204              		.loc 1 127 13 view .LVU44
 205 008e 094B     		ldr	r3, .L7+28
 206 0090 83ED000A 		vstr.32	s0, [r3]
 128:Core/Src/main.c **** }
 207              		.loc 1 128 1 view .LVU45
 208 0094 10BD     		pop	{r4, pc}
 209              	.LVL15:
 210              	.L8:
 211              		.loc 1 128 1 view .LVU46
 212 0096 00BF     		.align	2
 213              	.L7:
 214 0098 00000000 		.word	accel1_fsr
 215 009c 00000000 		.word	accel1_odr
 216 00a0 00000000 		.word	gyro_fsr
 217 00a4 00000000 		.word	gyro_odr
 218 00a8 00000000 		.word	accel2_fsr
 219 00ac 00000000 		.word	accel2_odr
ARM GAS  C:\Temp\cc3UDUYh.s 			page 7


 220 00b0 00000000 		.word	mag_odr
 221 00b4 00000000 		.word	tof_odr
 222              		.cfi_endproc
 223              	.LFE139:
 225              		.global	__aeabi_f2ulz
 226              		.section	.text.configureTimer,"ax",%progbits
 227              		.align	1
 228              		.global	configureTimer
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 233              	configureTimer:
 234              	.LVL16:
 235              	.LFB140:
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** void configureTimer(float desired_frequency, TIM_TypeDef* tim) {
 236              		.loc 1 130 64 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		.loc 1 130 64 is_stmt 0 view .LVU48
 241 0000 38B5     		push	{r3, r4, r5, lr}
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 3, -16
 244              		.cfi_offset 4, -12
 245              		.cfi_offset 5, -8
 246              		.cfi_offset 14, -4
 247 0002 0546     		mov	r5, r0
 131:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 132:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
 248              		.loc 1 132 5 is_stmt 1 view .LVU49
 249              		.loc 1 132 11 is_stmt 0 view .LVU50
 250 0004 114B     		ldr	r3, .L13
 251 0006 D3ED007A 		vldr.32	s15, [r3]	@ int
 252 000a F8EE677A 		vcvt.f32.u32	s15, s15
 253              	.LVL17:
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
 135:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
 254              		.loc 1 135 5 is_stmt 1 view .LVU51
 255              		.loc 1 135 11 is_stmt 0 view .LVU52
 256 000e 87EE807A 		vdiv.f32	s14, s15, s0
 257              	.LVL18:
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
 138:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 258              		.loc 1 138 5 is_stmt 1 view .LVU53
 259              		.loc 1 138 50 is_stmt 0 view .LVU54
 260 0012 DFED0F7A 		vldr.32	s15, .L13+4
 261              	.LVL19:
 262              		.loc 1 138 50 view .LVU55
 263 0016 67EE277A 		vmul.f32	s15, s14, s15
 264              		.loc 1 138 14 view .LVU56
 265 001a FCEEE77A 		vcvt.u32.f32	s15, s15
 266 001e 17EE904A 		vmov	r4, s15	@ int
 267              	.LVL20:
 139:Core/Src/main.c ****     if (prescaler > 65535) {
ARM GAS  C:\Temp\cc3UDUYh.s 			page 8


 268              		.loc 1 139 5 is_stmt 1 view .LVU57
 269              		.loc 1 139 8 is_stmt 0 view .LVU58
 270 0022 B4F5803F 		cmp	r4, #65536
 271 0026 01D3     		bcc	.L10
 140:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 272              		.loc 1 140 19 view .LVU59
 273 0028 4FF6FF74 		movw	r4, #65535
 274              	.LVL21:
 275              	.L10:
 141:Core/Src/main.c ****     }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
 144:Core/Src/main.c ****     uint64_t arr = (uint64_t)(timer_period / (prescaler + 1));
 276              		.loc 1 144 5 is_stmt 1 view .LVU60
 277              		.loc 1 144 57 is_stmt 0 view .LVU61
 278 002c 631C     		adds	r3, r4, #1
 279              	.LVL22:
 280              		.loc 1 144 57 view .LVU62
 281 002e 07EE903A 		vmov	s15, r3	@ int
 282              		.loc 1 144 44 view .LVU63
 283 0032 F8EE677A 		vcvt.f32.u32	s15, s15
 284              		.loc 1 144 14 view .LVU64
 285 0036 C7EE277A 		vdiv.f32	s15, s14, s15
 286 003a 17EE900A 		vmov	r0, s15
 287              	.LVL23:
 288              		.loc 1 144 14 view .LVU65
 289 003e FFF7FEFF 		bl	__aeabi_f2ulz
 290              	.LVL24:
 145:Core/Src/main.c **** 
 146:Core/Src/main.c **** 
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****     // Update the timer registers
 149:Core/Src/main.c ****     tim->PSC = prescaler;   // Set the prescaler
 291              		.loc 1 149 5 is_stmt 1 view .LVU66
 292              		.loc 1 149 14 is_stmt 0 view .LVU67
 293 0042 AC62     		str	r4, [r5, #40]
 150:Core/Src/main.c ****     tim->ARR = arr;         // Set the auto-reload register
 294              		.loc 1 150 5 is_stmt 1 view .LVU68
 295              		.loc 1 150 14 is_stmt 0 view .LVU69
 296 0044 E862     		str	r0, [r5, #44]
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 153:Core/Src/main.c ****     tim->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 297              		.loc 1 153 5 is_stmt 1 view .LVU70
 298              		.loc 1 153 14 is_stmt 0 view .LVU71
 299 0046 0123     		movs	r3, #1
 300 0048 6B61     		str	r3, [r5, #20]
 154:Core/Src/main.c **** }
 301              		.loc 1 154 1 view .LVU72
 302 004a 38BD     		pop	{r3, r4, r5, pc}
 303              	.LVL25:
 304              	.L14:
 305              		.loc 1 154 1 view .LVU73
 306              		.align	2
 307              	.L13:
 308 004c 00000000 		.word	SystemCoreClock
 309 0050 00008037 		.word	931135488
ARM GAS  C:\Temp\cc3UDUYh.s 			page 9


 310              		.cfi_endproc
 311              	.LFE140:
 313              		.section	.text.get_fastest_odr,"ax",%progbits
 314              		.align	1
 315              		.global	get_fastest_odr
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 320              	get_fastest_odr:
 321              	.LVL26:
 322              	.LFB141:
 155:Core/Src/main.c **** // Function to return the fastest (highest) ODR
 156:Core/Src/main.c **** float get_fastest_odr(float odr1, float odr2, float odr3, float odr4, float odr5) {
 323              		.loc 1 156 83 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              		.loc 1 156 83 is_stmt 0 view .LVU75
 329 0000 F0EE407A 		vmov.f32	s15, s0
 330 0004 B0EE420A 		vmov.f32	s0, s4
 331              	.LVL27:
 157:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 332              		.loc 1 157 5 is_stmt 1 view .LVU76
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****     if (odr2 > fastest) {
 333              		.loc 1 159 5 view .LVU77
 334              		.loc 1 159 8 is_stmt 0 view .LVU78
 335 0008 F4EEE07A 		vcmpe.f32	s15, s1
 336 000c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 337 0010 01D4     		bmi	.L16
 157:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 338              		.loc 1 157 11 view .LVU79
 339 0012 F0EE670A 		vmov.f32	s1, s15
 340              	.LVL28:
 341              	.L16:
 160:Core/Src/main.c ****         fastest = odr2;
 161:Core/Src/main.c ****     }
 162:Core/Src/main.c ****     if (odr3 > fastest) {
 342              		.loc 1 162 5 is_stmt 1 view .LVU80
 343              		.loc 1 162 8 is_stmt 0 view .LVU81
 344 0016 F4EEC10A 		vcmpe.f32	s1, s2
 345 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 346 001e 01D4     		bmi	.L17
 347 0020 B0EE601A 		vmov.f32	s2, s1
 348              	.LVL29:
 349              	.L17:
 163:Core/Src/main.c ****         fastest = odr3;
 164:Core/Src/main.c ****     }
 165:Core/Src/main.c ****     if (odr4 > fastest) {
 350              		.loc 1 165 5 is_stmt 1 view .LVU82
 351              		.loc 1 165 8 is_stmt 0 view .LVU83
 352 0024 B4EEE11A 		vcmpe.f32	s2, s3
 353 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 354 002c 01D4     		bmi	.L18
 355 002e F0EE411A 		vmov.f32	s3, s2
 356              	.LVL30:
ARM GAS  C:\Temp\cc3UDUYh.s 			page 10


 357              	.L18:
 166:Core/Src/main.c ****         fastest = odr4;
 167:Core/Src/main.c ****     }
 168:Core/Src/main.c ****     if (odr5 > fastest) {
 358              		.loc 1 168 5 is_stmt 1 view .LVU84
 359              		.loc 1 168 8 is_stmt 0 view .LVU85
 360 0032 F4EEC01A 		vcmpe.f32	s3, s0
 361 0036 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 362 003a 01D4     		bmi	.L19
 363 003c B0EE610A 		vmov.f32	s0, s3
 364              	.L19:
 365              	.LVL31:
 169:Core/Src/main.c ****         fastest = odr5;
 170:Core/Src/main.c ****     }
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****     return fastest;
 366              		.loc 1 172 5 is_stmt 1 view .LVU86
 173:Core/Src/main.c **** }
 367              		.loc 1 173 1 is_stmt 0 view .LVU87
 368 0040 7047     		bx	lr
 369              		.cfi_endproc
 370              	.LFE141:
 372              		.section	.text.sendToSimulink,"ax",%progbits
 373              		.align	1
 374              		.global	sendToSimulink
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 379              	sendToSimulink:
 380              	.LFB142:
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** void sendToSimulink(){
 381              		.loc 1 175 22 is_stmt 1 view -0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 386              		.cfi_def_cfa_offset 24
 387              		.cfi_offset 4, -24
 388              		.cfi_offset 5, -20
 389              		.cfi_offset 6, -16
 390              		.cfi_offset 7, -12
 391              		.cfi_offset 8, -8
 392              		.cfi_offset 14, -4
 176:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 393              		.loc 1 176 5 view .LVU89
 394 0004 564C     		ldr	r4, .L24
 395 0006 4FF0FF33 		mov	r3, #-1
 396 000a 0322     		movs	r2, #3
 397 000c 5549     		ldr	r1, .L24+4
 398 000e 2046     		mov	r0, r4
 399 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 400              	.LVL32:
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &(accel1_axis.x)  ,4 , HAL_MAX_DELAY);
 401              		.loc 1 178 5 view .LVU90
 402 0014 544D     		ldr	r5, .L24+8
ARM GAS  C:\Temp\cc3UDUYh.s 			page 11


 403 0016 4FF0FF33 		mov	r3, #-1
 404 001a 0422     		movs	r2, #4
 405 001c 2946     		mov	r1, r5
 406 001e 2046     		mov	r0, r4
 407 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 408              	.LVL33:
 179:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
 409              		.loc 1 179 5 view .LVU91
 410 0024 4FF0FF33 		mov	r3, #-1
 411 0028 0422     		movs	r2, #4
 412 002a A918     		adds	r1, r5, r2
 413 002c 2046     		mov	r0, r4
 414 002e FFF7FEFF 		bl	HAL_UART_Transmit
 415              	.LVL34:
 180:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
 416              		.loc 1 180 5 view .LVU92
 417 0032 4FF0FF33 		mov	r3, #-1
 418 0036 0422     		movs	r2, #4
 419 0038 05F10801 		add	r1, r5, #8
 420 003c 2046     		mov	r0, r4
 421 003e FFF7FEFF 		bl	HAL_UART_Transmit
 422              	.LVL35:
 181:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
 423              		.loc 1 181 5 view .LVU93
 424 0042 4A4D     		ldr	r5, .L24+12
 425 0044 4FF0FF33 		mov	r3, #-1
 426 0048 0422     		movs	r2, #4
 427 004a 2946     		mov	r1, r5
 428 004c 2046     		mov	r0, r4
 429 004e FFF7FEFF 		bl	HAL_UART_Transmit
 430              	.LVL36:
 182:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
 431              		.loc 1 182 5 view .LVU94
 432 0052 4FF0FF33 		mov	r3, #-1
 433 0056 0422     		movs	r2, #4
 434 0058 A918     		adds	r1, r5, r2
 435 005a 2046     		mov	r0, r4
 436 005c FFF7FEFF 		bl	HAL_UART_Transmit
 437              	.LVL37:
 183:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
 438              		.loc 1 183 5 view .LVU95
 439 0060 4FF0FF33 		mov	r3, #-1
 440 0064 0422     		movs	r2, #4
 441 0066 05F10801 		add	r1, r5, #8
 442 006a 2046     		mov	r0, r4
 443 006c FFF7FEFF 		bl	HAL_UART_Transmit
 444              	.LVL38:
 184:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 445              		.loc 1 184 5 view .LVU96
 446 0070 3F4D     		ldr	r5, .L24+16
 447 0072 4FF0FF33 		mov	r3, #-1
 448 0076 0422     		movs	r2, #4
 449 0078 2946     		mov	r1, r5
 450 007a 2046     		mov	r0, r4
 451 007c FFF7FEFF 		bl	HAL_UART_Transmit
 452              	.LVL39:
 185:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
ARM GAS  C:\Temp\cc3UDUYh.s 			page 12


 453              		.loc 1 185 5 view .LVU97
 454 0080 4FF0FF33 		mov	r3, #-1
 455 0084 0422     		movs	r2, #4
 456 0086 A918     		adds	r1, r5, r2
 457 0088 2046     		mov	r0, r4
 458 008a FFF7FEFF 		bl	HAL_UART_Transmit
 459              	.LVL40:
 186:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 460              		.loc 1 186 5 view .LVU98
 461 008e 4FF0FF33 		mov	r3, #-1
 462 0092 0422     		movs	r2, #4
 463 0094 05F10801 		add	r1, r5, #8
 464 0098 2046     		mov	r0, r4
 465 009a FFF7FEFF 		bl	HAL_UART_Transmit
 466              	.LVL41:
 187:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 467              		.loc 1 187 5 view .LVU99
 468 009e 4FF0FF33 		mov	r3, #-1
 469 00a2 0422     		movs	r2, #4
 470 00a4 3349     		ldr	r1, .L24+20
 471 00a6 2046     		mov	r0, r4
 472 00a8 FFF7FEFF 		bl	HAL_UART_Transmit
 473              	.LVL42:
 188:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
 474              		.loc 1 188 5 view .LVU100
 475 00ac 324D     		ldr	r5, .L24+24
 476 00ae 4FF0FF33 		mov	r3, #-1
 477 00b2 0422     		movs	r2, #4
 478 00b4 2946     		mov	r1, r5
 479 00b6 2046     		mov	r0, r4
 480 00b8 FFF7FEFF 		bl	HAL_UART_Transmit
 481              	.LVL43:
 189:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
 482              		.loc 1 189 5 view .LVU101
 483 00bc 4FF0FF33 		mov	r3, #-1
 484 00c0 0422     		movs	r2, #4
 485 00c2 A918     		adds	r1, r5, r2
 486 00c4 2046     		mov	r0, r4
 487 00c6 FFF7FEFF 		bl	HAL_UART_Transmit
 488              	.LVL44:
 190:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
 489              		.loc 1 190 5 view .LVU102
 490 00ca 4FF0FF33 		mov	r3, #-1
 491 00ce 0422     		movs	r2, #4
 492 00d0 05F10801 		add	r1, r5, #8
 493 00d4 2046     		mov	r0, r4
 494 00d6 FFF7FEFF 		bl	HAL_UART_Transmit
 495              	.LVL45:
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****     for (int i = 0 ; i < 8*8 ; i++){
 496              		.loc 1 192 5 view .LVU103
 497              	.LBB4:
 498              		.loc 1 192 10 view .LVU104
 499              		.loc 1 192 14 is_stmt 0 view .LVU105
 500 00da 0024     		movs	r4, #0
 501              		.loc 1 192 5 view .LVU106
 502 00dc 2DE0     		b	.L21
ARM GAS  C:\Temp\cc3UDUYh.s 			page 13


 503              	.LVL46:
 504              	.L22:
 193:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_centre .ZoneResult[i]) .Distance  [0])  , 4 
 505              		.loc 1 193 9 is_stmt 1 discriminator 3 view .LVU107
 506              		.loc 1 193 36 is_stmt 0 discriminator 3 view .LVU108
 507 00de A600     		lsls	r6, r4, #2
 508 00e0 04EB8403 		add	r3, r4, r4, lsl #2
 509 00e4 9900     		lsls	r1, r3, #2
 510 00e6 DFF89C80 		ldr	r8, .L24+36
 511 00ea 4144     		add	r1, r1, r8
 512              		.loc 1 193 9 discriminator 3 view .LVU109
 513 00ec 1C4F     		ldr	r7, .L24
 514 00ee 4FF0FF33 		mov	r3, #-1
 515 00f2 0422     		movs	r2, #4
 516 00f4 0831     		adds	r1, r1, #8
 517 00f6 3846     		mov	r0, r7
 518 00f8 FFF7FEFF 		bl	HAL_UART_Transmit
 519              	.LVL47:
 194:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[i]) .Ambient   [0])  , 4 
 520              		.loc 1 194 9 is_stmt 1 discriminator 3 view .LVU110
 521              		.loc 1 194 36 is_stmt 0 discriminator 3 view .LVU111
 522 00fc 3319     		adds	r3, r6, r4
 523 00fe 9D00     		lsls	r5, r3, #2
 524 0100 0835     		adds	r5, r5, #8
 525 0102 4544     		add	r5, r5, r8
 526              		.loc 1 194 9 discriminator 3 view .LVU112
 527 0104 4FF0FF33 		mov	r3, #-1
 528 0108 0422     		movs	r2, #4
 529 010a 05F10801 		add	r1, r5, #8
 530 010e 3846     		mov	r0, r7
 531 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 532              	.LVL48:
 195:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[i]) .Signal    [0])  , 4 
 533              		.loc 1 195 9 is_stmt 1 discriminator 3 view .LVU113
 534              		.loc 1 195 36 is_stmt 0 discriminator 3 view .LVU114
 535 0114 2644     		add	r6, r6, r4
 536 0116 B100     		lsls	r1, r6, #2
 537 0118 1031     		adds	r1, r1, #16
 538 011a 4144     		add	r1, r1, r8
 539              		.loc 1 195 9 discriminator 3 view .LVU115
 540 011c 4FF0FF33 		mov	r3, #-1
 541 0120 0422     		movs	r2, #4
 542 0122 1144     		add	r1, r1, r2
 543 0124 3846     		mov	r0, r7
 544 0126 FFF7FEFF 		bl	HAL_UART_Transmit
 545              	.LVL49:
 196:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[i]) .Status    [0])  , 4 
 546              		.loc 1 196 9 is_stmt 1 discriminator 3 view .LVU116
 547 012a 4FF0FF33 		mov	r3, #-1
 548 012e 0422     		movs	r2, #4
 549 0130 A918     		adds	r1, r5, r2
 550 0132 3846     		mov	r0, r7
 551 0134 FFF7FEFF 		bl	HAL_UART_Transmit
 552              	.LVL50:
 192:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_centre .ZoneResult[i]) .Distance  [0])  , 4 
 553              		.loc 1 192 33 discriminator 3 view .LVU117
 554 0138 0134     		adds	r4, r4, #1
ARM GAS  C:\Temp\cc3UDUYh.s 			page 14


 555              	.LVL51:
 556              	.L21:
 192:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_centre .ZoneResult[i]) .Distance  [0])  , 4 
 557              		.loc 1 192 24 discriminator 1 view .LVU118
 558 013a 3F2C     		cmp	r4, #63
 559 013c CFDD     		ble	.L22
 560              	.LBE4:
 197:Core/Src/main.c ****     }
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &counter          ,4 , HAL_MAX_DELAY);
 561              		.loc 1 199 5 view .LVU119
 562 013e 084C     		ldr	r4, .L24
 563              	.LVL52:
 564              		.loc 1 199 5 is_stmt 0 view .LVU120
 565 0140 4FF0FF33 		mov	r3, #-1
 566 0144 0422     		movs	r2, #4
 567 0146 0D49     		ldr	r1, .L24+28
 568 0148 2046     		mov	r0, r4
 569 014a FFF7FEFF 		bl	HAL_UART_Transmit
 570              	.LVL53:
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 571              		.loc 1 201 5 is_stmt 1 view .LVU121
 572 014e 4FF0FF33 		mov	r3, #-1
 573 0152 0322     		movs	r2, #3
 574 0154 0A49     		ldr	r1, .L24+32
 575 0156 2046     		mov	r0, r4
 576 0158 FFF7FEFF 		bl	HAL_UART_Transmit
 577              	.LVL54:
 202:Core/Src/main.c **** }
 578              		.loc 1 202 1 is_stmt 0 view .LVU122
 579 015c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 580              	.L25:
 581              		.align	2
 582              	.L24:
 583 0160 00000000 		.word	huart2
 584 0164 00000000 		.word	header
 585 0168 00000000 		.word	accel1_axis
 586 016c 00000000 		.word	gyro_axis
 587 0170 00000000 		.word	accel2_axis
 588 0174 00000000 		.word	temperature
 589 0178 00000000 		.word	mag_axis
 590 017c 00000000 		.word	counter
 591 0180 00000000 		.word	terminator
 592 0184 00000000 		.word	TOF_centre
 593              		.cfi_endproc
 594              	.LFE142:
 596              		.section	.text.initialCalibration,"ax",%progbits
 597              		.align	1
 598              		.global	initialCalibration
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 603              	initialCalibration:
 604              	.LFB143:
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** void initialCalibration(){
ARM GAS  C:\Temp\cc3UDUYh.s 			page 15


 605              		.loc 1 204 26 is_stmt 1 view -0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609 0000 10B5     		push	{r4, lr}
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 4, -8
 612              		.cfi_offset 14, -4
 205:Core/Src/main.c ****   HAL_UART_Receive(&huart2, &bigBuffer, 4*8+3+3 ,HAL_MAX_DELAY);
 613              		.loc 1 205 3 view .LVU124
 614 0002 184C     		ldr	r4, .L30
 615 0004 4FF0FF33 		mov	r3, #-1
 616 0008 2622     		movs	r2, #38
 617 000a 2146     		mov	r1, r4
 618 000c 1648     		ldr	r0, .L30+4
 619 000e FFF7FEFF 		bl	HAL_UART_Receive
 620              	.LVL55:
 206:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 621              		.loc 1 206 3 view .LVU125
 622              		.loc 1 206 16 is_stmt 0 view .LVU126
 623 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 624              		.loc 1 206 6 view .LVU127
 625 0014 4A2B     		cmp	r3, #74
 626 0016 00D0     		beq	.L29
 627              	.L26:
 207:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 208:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2]){
 209:Core/Src/main.c ****         calibrated = 1;
 210:Core/Src/main.c ****         HAL_GPIO_WritePin(GREEN_LED_GPIO_Port , GREEN_LED_Pin , 1);
 211:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 212:Core/Src/main.c ****         fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 213:Core/Src/main.c ****   }
 214:Core/Src/main.c **** }
 628              		.loc 1 214 1 view .LVU128
 629 0018 10BD     		pop	{r4, pc}
 630              	.L29:
 207:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 631              		.loc 1 207 16 discriminator 1 view .LVU129
 632 001a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 206:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 633              		.loc 1 206 41 discriminator 1 view .LVU130
 634 001c 5F2B     		cmp	r3, #95
 635 001e FBD1     		bne	.L26
 208:Core/Src/main.c ****         calibrated = 1;
 636              		.loc 1 208 16 view .LVU131
 637 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 207:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 638              		.loc 1 207 41 view .LVU132
 639 0022 412B     		cmp	r3, #65
 640 0024 F8D1     		bne	.L26
 209:Core/Src/main.c ****         HAL_GPIO_WritePin(GREEN_LED_GPIO_Port , GREEN_LED_Pin , 1);
 641              		.loc 1 209 9 is_stmt 1 view .LVU133
 209:Core/Src/main.c ****         HAL_GPIO_WritePin(GREEN_LED_GPIO_Port , GREEN_LED_Pin , 1);
 642              		.loc 1 209 20 is_stmt 0 view .LVU134
 643 0026 0122     		movs	r2, #1
 644 0028 104B     		ldr	r3, .L30+8
 645 002a 1A70     		strb	r2, [r3]
ARM GAS  C:\Temp\cc3UDUYh.s 			page 16


 210:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 646              		.loc 1 210 9 is_stmt 1 view .LVU135
 647 002c 2021     		movs	r1, #32
 648 002e 1048     		ldr	r0, .L30+12
 649 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 650              	.LVL56:
 211:Core/Src/main.c ****         fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 651              		.loc 1 211 9 view .LVU136
 652 0034 2046     		mov	r0, r4
 653 0036 FFF7FEFF 		bl	receivedFromSimulink
 654              	.LVL57:
 212:Core/Src/main.c ****   }
 655              		.loc 1 212 9 view .LVU137
 212:Core/Src/main.c ****   }
 656              		.loc 1 212 22 is_stmt 0 view .LVU138
 657 003a 0E4B     		ldr	r3, .L30+16
 658 003c 93ED002A 		vldr.32	s4, [r3]
 659 0040 0D4B     		ldr	r3, .L30+20
 660 0042 D3ED001A 		vldr.32	s3, [r3]
 661 0046 0D4B     		ldr	r3, .L30+24
 662 0048 93ED001A 		vldr.32	s2, [r3]
 663 004c 0C4B     		ldr	r3, .L30+28
 664 004e D3ED000A 		vldr.32	s1, [r3]
 665 0052 0C4B     		ldr	r3, .L30+32
 666 0054 93ED000A 		vldr.32	s0, [r3]
 667 0058 FFF7FEFF 		bl	get_fastest_odr
 668              	.LVL58:
 212:Core/Src/main.c ****   }
 669              		.loc 1 212 20 view .LVU139
 670 005c 0A4B     		ldr	r3, .L30+36
 671 005e 83ED000A 		vstr.32	s0, [r3]
 672              		.loc 1 214 1 view .LVU140
 673 0062 D9E7     		b	.L26
 674              	.L31:
 675              		.align	2
 676              	.L30:
 677 0064 00000000 		.word	bigBuffer
 678 0068 00000000 		.word	huart2
 679 006c 00000000 		.word	calibrated
 680 0070 00000240 		.word	1073872896
 681 0074 00000000 		.word	tof_odr
 682 0078 00000000 		.word	mag_odr
 683 007c 00000000 		.word	accel2_odr
 684 0080 00000000 		.word	gyro_odr
 685 0084 00000000 		.word	accel1_odr
 686 0088 00000000 		.word	fastestODR
 687              		.cfi_endproc
 688              	.LFE143:
 690              		.section	.text.MX_GPIO_Init,"ax",%progbits
 691              		.align	1
 692              		.global	MX_GPIO_Init
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 697              	MX_GPIO_Init:
 698              	.LFB149:
 215:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 17


 216:Core/Src/main.c **** /* USER CODE END 0 */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** /**
 219:Core/Src/main.c ****   * @brief  The application entry point.
 220:Core/Src/main.c ****   * @retval int
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c **** int main(void)
 223:Core/Src/main.c **** {
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE END 1 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 232:Core/Src/main.c ****   HAL_Init();
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE END Init */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* Configure the system clock */
 239:Core/Src/main.c ****   SystemClock_Config();
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE END SysInit */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* Initialize all configured peripherals */
 246:Core/Src/main.c ****   MX_GPIO_Init();
 247:Core/Src/main.c ****   MX_TIM2_Init();
 248:Core/Src/main.c ****   MX_USART2_UART_Init();
 249:Core/Src/main.c ****   MX_TIM3_Init();
 250:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 251:Core/Src/main.c ****   while (calibrated != 1){
 252:Core/Src/main.c ****     initialCalibration();
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c ****   calibrateVL53L8A1();
 255:Core/Src/main.c ****   initVL53L8A1();
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   initIKS02A1();
 258:Core/Src/main.c ****   calibrate_IKS02A1();
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   configureTimer(fastestODR,TIM2);
 261:Core/Src/main.c ****   configureTimer(tof_odr,TIM3);
 262:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 263:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 264:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* USER CODE END 2 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* Infinite loop */
 269:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 270:Core/Src/main.c ****   while (1)
 271:Core/Src/main.c ****   {
 272:Core/Src/main.c ****     getIKS02A1();
ARM GAS  C:\Temp\cc3UDUYh.s 			page 18


 273:Core/Src/main.c ****     if (clearToGetL8 == 1){
 274:Core/Src/main.c ****       getVL53L8A1();
 275:Core/Src/main.c ****       clearToGetL8 = 0;
 276:Core/Src/main.c ****     }
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****     /* USER CODE END WHILE */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c ****   /* USER CODE END 3 */
 283:Core/Src/main.c **** }
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** /**
 286:Core/Src/main.c ****   * @brief System Clock Configuration
 287:Core/Src/main.c ****   * @retval None
 288:Core/Src/main.c ****   */
 289:Core/Src/main.c **** void SystemClock_Config(void)
 290:Core/Src/main.c **** {
 291:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 292:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 297:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 300:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 301:Core/Src/main.c ****   */
 302:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 303:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 304:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 305:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 306:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 308:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 309:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 310:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****     Error_Handler();
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 316:Core/Src/main.c ****   */
 317:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 318:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 319:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 320:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 321:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 322:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c **** }
 329:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 19


 330:Core/Src/main.c **** /**
 331:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 332:Core/Src/main.c ****   * @param None
 333:Core/Src/main.c ****   * @retval None
 334:Core/Src/main.c ****   */
 335:Core/Src/main.c **** static void MX_TIM2_Init(void)
 336:Core/Src/main.c **** {
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 343:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 348:Core/Src/main.c ****   htim2.Instance = TIM2;
 349:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 350:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 351:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 352:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 353:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 354:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 355:Core/Src/main.c ****   {
 356:Core/Src/main.c ****     Error_Handler();
 357:Core/Src/main.c ****   }
 358:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 359:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 360:Core/Src/main.c ****   {
 361:Core/Src/main.c ****     Error_Handler();
 362:Core/Src/main.c ****   }
 363:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 364:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 365:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 366:Core/Src/main.c ****   {
 367:Core/Src/main.c ****     Error_Handler();
 368:Core/Src/main.c ****   }
 369:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c **** }
 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** /**
 376:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 377:Core/Src/main.c ****   * @param None
 378:Core/Src/main.c ****   * @retval None
 379:Core/Src/main.c ****   */
 380:Core/Src/main.c **** static void MX_TIM3_Init(void)
 381:Core/Src/main.c **** {
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 386:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 20


 387:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 388:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 393:Core/Src/main.c ****   htim3.Instance = TIM3;
 394:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 395:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 396:Core/Src/main.c ****   htim3.Init.Period = 65535;
 397:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 398:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 399:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 400:Core/Src/main.c ****   {
 401:Core/Src/main.c ****     Error_Handler();
 402:Core/Src/main.c ****   }
 403:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 404:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 405:Core/Src/main.c ****   {
 406:Core/Src/main.c ****     Error_Handler();
 407:Core/Src/main.c ****   }
 408:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 409:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 410:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 415:Core/Src/main.c **** 
 416:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c **** }
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** /**
 421:Core/Src/main.c ****   * @brief USART2 Initialization Function
 422:Core/Src/main.c ****   * @param None
 423:Core/Src/main.c ****   * @retval None
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 426:Core/Src/main.c **** {
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 435:Core/Src/main.c ****   huart2.Instance = USART2;
 436:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 437:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 438:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 439:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 440:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 441:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 442:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 443:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
ARM GAS  C:\Temp\cc3UDUYh.s 			page 21


 444:Core/Src/main.c ****   {
 445:Core/Src/main.c ****     Error_Handler();
 446:Core/Src/main.c ****   }
 447:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** }
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /**
 454:Core/Src/main.c ****   * @brief GPIO Initialization Function
 455:Core/Src/main.c ****   * @param None
 456:Core/Src/main.c ****   * @retval None
 457:Core/Src/main.c ****   */
 458:Core/Src/main.c **** void MX_GPIO_Init(void)
 459:Core/Src/main.c **** {
 699              		.loc 1 459 1 is_stmt 1 view -0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 40
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 704              		.cfi_def_cfa_offset 24
 705              		.cfi_offset 4, -24
 706              		.cfi_offset 5, -20
 707              		.cfi_offset 6, -16
 708              		.cfi_offset 7, -12
 709              		.cfi_offset 8, -8
 710              		.cfi_offset 14, -4
 711 0004 8AB0     		sub	sp, sp, #40
 712              		.cfi_def_cfa_offset 64
 460:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 713              		.loc 1 460 3 view .LVU142
 714              		.loc 1 460 20 is_stmt 0 view .LVU143
 715 0006 0024     		movs	r4, #0
 716 0008 0594     		str	r4, [sp, #20]
 717 000a 0694     		str	r4, [sp, #24]
 718 000c 0794     		str	r4, [sp, #28]
 719 000e 0894     		str	r4, [sp, #32]
 720 0010 0994     		str	r4, [sp, #36]
 461:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 462:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 465:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 721              		.loc 1 465 3 is_stmt 1 view .LVU144
 722              	.LBB5:
 723              		.loc 1 465 3 view .LVU145
 724 0012 0094     		str	r4, [sp]
 725              		.loc 1 465 3 view .LVU146
 726 0014 574B     		ldr	r3, .L34
 727 0016 1A6B     		ldr	r2, [r3, #48]
 728 0018 42F00402 		orr	r2, r2, #4
 729 001c 1A63     		str	r2, [r3, #48]
 730              		.loc 1 465 3 view .LVU147
 731 001e 1A6B     		ldr	r2, [r3, #48]
 732 0020 02F00402 		and	r2, r2, #4
 733 0024 0092     		str	r2, [sp]
ARM GAS  C:\Temp\cc3UDUYh.s 			page 22


 734              		.loc 1 465 3 view .LVU148
 735 0026 009A     		ldr	r2, [sp]
 736              	.LBE5:
 737              		.loc 1 465 3 view .LVU149
 466:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 738              		.loc 1 466 3 view .LVU150
 739              	.LBB6:
 740              		.loc 1 466 3 view .LVU151
 741 0028 0194     		str	r4, [sp, #4]
 742              		.loc 1 466 3 view .LVU152
 743 002a 1A6B     		ldr	r2, [r3, #48]
 744 002c 42F08002 		orr	r2, r2, #128
 745 0030 1A63     		str	r2, [r3, #48]
 746              		.loc 1 466 3 view .LVU153
 747 0032 1A6B     		ldr	r2, [r3, #48]
 748 0034 02F08002 		and	r2, r2, #128
 749 0038 0192     		str	r2, [sp, #4]
 750              		.loc 1 466 3 view .LVU154
 751 003a 019A     		ldr	r2, [sp, #4]
 752              	.LBE6:
 753              		.loc 1 466 3 view .LVU155
 467:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 754              		.loc 1 467 3 view .LVU156
 755              	.LBB7:
 756              		.loc 1 467 3 view .LVU157
 757 003c 0294     		str	r4, [sp, #8]
 758              		.loc 1 467 3 view .LVU158
 759 003e 1A6B     		ldr	r2, [r3, #48]
 760 0040 42F00102 		orr	r2, r2, #1
 761 0044 1A63     		str	r2, [r3, #48]
 762              		.loc 1 467 3 view .LVU159
 763 0046 1A6B     		ldr	r2, [r3, #48]
 764 0048 02F00102 		and	r2, r2, #1
 765 004c 0292     		str	r2, [sp, #8]
 766              		.loc 1 467 3 view .LVU160
 767 004e 029A     		ldr	r2, [sp, #8]
 768              	.LBE7:
 769              		.loc 1 467 3 view .LVU161
 468:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 770              		.loc 1 468 3 view .LVU162
 771              	.LBB8:
 772              		.loc 1 468 3 view .LVU163
 773 0050 0394     		str	r4, [sp, #12]
 774              		.loc 1 468 3 view .LVU164
 775 0052 1A6B     		ldr	r2, [r3, #48]
 776 0054 42F00202 		orr	r2, r2, #2
 777 0058 1A63     		str	r2, [r3, #48]
 778              		.loc 1 468 3 view .LVU165
 779 005a 1A6B     		ldr	r2, [r3, #48]
 780 005c 02F00202 		and	r2, r2, #2
 781 0060 0392     		str	r2, [sp, #12]
 782              		.loc 1 468 3 view .LVU166
 783 0062 039A     		ldr	r2, [sp, #12]
 784              	.LBE8:
 785              		.loc 1 468 3 view .LVU167
 469:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 786              		.loc 1 469 3 view .LVU168
ARM GAS  C:\Temp\cc3UDUYh.s 			page 23


 787              	.LBB9:
 788              		.loc 1 469 3 view .LVU169
 789 0064 0494     		str	r4, [sp, #16]
 790              		.loc 1 469 3 view .LVU170
 791 0066 1A6B     		ldr	r2, [r3, #48]
 792 0068 42F00802 		orr	r2, r2, #8
 793 006c 1A63     		str	r2, [r3, #48]
 794              		.loc 1 469 3 view .LVU171
 795 006e 1B6B     		ldr	r3, [r3, #48]
 796 0070 03F00803 		and	r3, r3, #8
 797 0074 0493     		str	r3, [sp, #16]
 798              		.loc 1 469 3 view .LVU172
 799 0076 049B     		ldr	r3, [sp, #16]
 800              	.LBE9:
 801              		.loc 1 469 3 view .LVU173
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 472:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 802              		.loc 1 472 3 view .LVU174
 803 0078 3F4D     		ldr	r5, .L34+4
 804 007a 2246     		mov	r2, r4
 805 007c 2021     		movs	r1, #32
 806 007e 2846     		mov	r0, r5
 807 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 808              	.LVL59:
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 475:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|VL53L8A1_PWR_EN_Pin, GPIO_PIN_SET);
 809              		.loc 1 475 3 view .LVU175
 810 0084 0122     		movs	r2, #1
 811 0086 C021     		movs	r1, #192
 812 0088 2846     		mov	r0, r5
 813 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 814              	.LVL60:
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 478:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, VL53L8A1_LOW_PWR_Pin|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 815              		.loc 1 478 3 view .LVU176
 816 008e DFF8F480 		ldr	r8, .L34+16
 817 0092 0122     		movs	r2, #1
 818 0094 40F21141 		movw	r1, #1041
 819 0098 4046     		mov	r0, r8
 820 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 821              	.LVL61:
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 481:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 822              		.loc 1 481 3 view .LVU177
 823              		.loc 1 481 23 is_stmt 0 view .LVU178
 824 009e 4FF40053 		mov	r3, #8192
 825 00a2 0593     		str	r3, [sp, #20]
 482:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 826              		.loc 1 482 3 is_stmt 1 view .LVU179
 827              		.loc 1 482 24 is_stmt 0 view .LVU180
 828 00a4 4FF48813 		mov	r3, #1114112
 829 00a8 0693     		str	r3, [sp, #24]
 483:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  C:\Temp\cc3UDUYh.s 			page 24


 830              		.loc 1 483 3 is_stmt 1 view .LVU181
 831              		.loc 1 483 24 is_stmt 0 view .LVU182
 832 00aa 0794     		str	r4, [sp, #28]
 484:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 833              		.loc 1 484 3 is_stmt 1 view .LVU183
 834 00ac 334E     		ldr	r6, .L34+8
 835 00ae 05A9     		add	r1, sp, #20
 836 00b0 3046     		mov	r0, r6
 837 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 838              	.LVL62:
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 487:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 488:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 489:Core/Src/main.c ****                            PC12 */
 490:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 839              		.loc 1 490 3 view .LVU184
 840              		.loc 1 490 23 is_stmt 0 view .LVU185
 841 00b6 41F6FF73 		movw	r3, #8191
 842 00ba 0593     		str	r3, [sp, #20]
 491:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 492:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 493:Core/Src/main.c ****                           |GPIO_PIN_12;
 494:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 843              		.loc 1 494 3 is_stmt 1 view .LVU186
 844              		.loc 1 494 24 is_stmt 0 view .LVU187
 845 00bc 0327     		movs	r7, #3
 846 00be 0697     		str	r7, [sp, #24]
 495:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 847              		.loc 1 495 3 is_stmt 1 view .LVU188
 848              		.loc 1 495 24 is_stmt 0 view .LVU189
 849 00c0 0794     		str	r4, [sp, #28]
 496:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 850              		.loc 1 496 3 is_stmt 1 view .LVU190
 851 00c2 05A9     		add	r1, sp, #20
 852 00c4 3046     		mov	r0, r6
 853 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 854              	.LVL63:
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA8 PA9
 499:Core/Src/main.c ****                            PA10 PA11 PA12 PA15 */
 500:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 855              		.loc 1 500 3 view .LVU191
 856              		.loc 1 500 23 is_stmt 0 view .LVU192
 857 00ca 49F60373 		movw	r3, #40707
 858 00ce 0593     		str	r3, [sp, #20]
 501:Core/Src/main.c ****                           |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 502:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 859              		.loc 1 502 3 is_stmt 1 view .LVU193
 860              		.loc 1 502 24 is_stmt 0 view .LVU194
 861 00d0 0697     		str	r7, [sp, #24]
 503:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 862              		.loc 1 503 3 is_stmt 1 view .LVU195
 863              		.loc 1 503 24 is_stmt 0 view .LVU196
 864 00d2 0794     		str	r4, [sp, #28]
 504:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 865              		.loc 1 504 3 is_stmt 1 view .LVU197
ARM GAS  C:\Temp\cc3UDUYh.s 			page 25


 866 00d4 05A9     		add	r1, sp, #20
 867 00d6 2846     		mov	r0, r5
 868 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 869              	.LVL64:
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   /*Configure GPIO pin : VL53L8A1_INT_Pin */
 507:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L8A1_INT_Pin;
 870              		.loc 1 507 3 view .LVU198
 871              		.loc 1 507 23 is_stmt 0 view .LVU199
 872 00dc 1023     		movs	r3, #16
 873 00de 0593     		str	r3, [sp, #20]
 508:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 874              		.loc 1 508 3 is_stmt 1 view .LVU200
 875              		.loc 1 508 24 is_stmt 0 view .LVU201
 876 00e0 4FF40413 		mov	r3, #2162688
 877 00e4 0693     		str	r3, [sp, #24]
 509:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 878              		.loc 1 509 3 is_stmt 1 view .LVU202
 879              		.loc 1 509 24 is_stmt 0 view .LVU203
 880 00e6 0794     		str	r4, [sp, #28]
 510:Core/Src/main.c ****   HAL_GPIO_Init(VL53L8A1_INT_GPIO_Port, &GPIO_InitStruct);
 881              		.loc 1 510 3 is_stmt 1 view .LVU204
 882 00e8 05A9     		add	r1, sp, #20
 883 00ea 2846     		mov	r0, r5
 884 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 885              	.LVL65:
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 513:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 886              		.loc 1 513 3 view .LVU205
 887              		.loc 1 513 23 is_stmt 0 view .LVU206
 888 00f0 2023     		movs	r3, #32
 889 00f2 0593     		str	r3, [sp, #20]
 514:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 890              		.loc 1 514 3 is_stmt 1 view .LVU207
 891              		.loc 1 514 24 is_stmt 0 view .LVU208
 892 00f4 0126     		movs	r6, #1
 893 00f6 0696     		str	r6, [sp, #24]
 515:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 894              		.loc 1 515 3 is_stmt 1 view .LVU209
 895              		.loc 1 515 24 is_stmt 0 view .LVU210
 896 00f8 0794     		str	r4, [sp, #28]
 516:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 897              		.loc 1 516 3 is_stmt 1 view .LVU211
 898              		.loc 1 516 25 is_stmt 0 view .LVU212
 899 00fa 0894     		str	r4, [sp, #32]
 517:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 900              		.loc 1 517 3 is_stmt 1 view .LVU213
 901 00fc 05A9     		add	r1, sp, #20
 902 00fe 2846     		mov	r0, r5
 903 0100 FFF7FEFF 		bl	HAL_GPIO_Init
 904              	.LVL66:
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   /*Configure GPIO pins : PA6 VL53L8A1_PWR_EN_Pin */
 520:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|VL53L8A1_PWR_EN_Pin;
 905              		.loc 1 520 3 view .LVU214
 906              		.loc 1 520 23 is_stmt 0 view .LVU215
ARM GAS  C:\Temp\cc3UDUYh.s 			page 26


 907 0104 C023     		movs	r3, #192
 908 0106 0593     		str	r3, [sp, #20]
 521:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 909              		.loc 1 521 3 is_stmt 1 view .LVU216
 910              		.loc 1 521 24 is_stmt 0 view .LVU217
 911 0108 0696     		str	r6, [sp, #24]
 522:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 912              		.loc 1 522 3 is_stmt 1 view .LVU218
 913              		.loc 1 522 24 is_stmt 0 view .LVU219
 914 010a 0796     		str	r6, [sp, #28]
 523:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 915              		.loc 1 523 3 is_stmt 1 view .LVU220
 916              		.loc 1 523 25 is_stmt 0 view .LVU221
 917 010c 0894     		str	r4, [sp, #32]
 524:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 918              		.loc 1 524 3 is_stmt 1 view .LVU222
 919 010e 05A9     		add	r1, sp, #20
 920 0110 2846     		mov	r0, r5
 921 0112 FFF7FEFF 		bl	HAL_GPIO_Init
 922              	.LVL67:
 525:Core/Src/main.c **** 
 526:Core/Src/main.c ****   /*Configure GPIO pins : VL53L8A1_LOW_PWR_Pin PB10 PB4 */
 527:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L8A1_LOW_PWR_Pin|GPIO_PIN_10|GPIO_PIN_4;
 923              		.loc 1 527 3 view .LVU223
 924              		.loc 1 527 23 is_stmt 0 view .LVU224
 925 0116 40F21143 		movw	r3, #1041
 926 011a 0593     		str	r3, [sp, #20]
 528:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 927              		.loc 1 528 3 is_stmt 1 view .LVU225
 928              		.loc 1 528 24 is_stmt 0 view .LVU226
 929 011c 0696     		str	r6, [sp, #24]
 529:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 930              		.loc 1 529 3 is_stmt 1 view .LVU227
 931              		.loc 1 529 24 is_stmt 0 view .LVU228
 932 011e 0796     		str	r6, [sp, #28]
 530:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 933              		.loc 1 530 3 is_stmt 1 view .LVU229
 934              		.loc 1 530 25 is_stmt 0 view .LVU230
 935 0120 0894     		str	r4, [sp, #32]
 531:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 936              		.loc 1 531 3 is_stmt 1 view .LVU231
 937 0122 05A9     		add	r1, sp, #20
 938 0124 4046     		mov	r0, r8
 939 0126 FFF7FEFF 		bl	HAL_GPIO_Init
 940              	.LVL68:
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****   /*Configure GPIO pins : PB1 PB2 PB12 PB13
 534:Core/Src/main.c ****                            PB14 PB15 PB3 PB5
 535:Core/Src/main.c ****                            PB6 PB7 */
 536:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 941              		.loc 1 536 3 view .LVU232
 942              		.loc 1 536 23 is_stmt 0 view .LVU233
 943 012a 4FF2EE03 		movw	r3, #61678
 944 012e 0593     		str	r3, [sp, #20]
 537:Core/Src/main.c ****                           |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_5
 538:Core/Src/main.c ****                           |GPIO_PIN_6|GPIO_PIN_7;
 539:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
ARM GAS  C:\Temp\cc3UDUYh.s 			page 27


 945              		.loc 1 539 3 is_stmt 1 view .LVU234
 946              		.loc 1 539 24 is_stmt 0 view .LVU235
 947 0130 0697     		str	r7, [sp, #24]
 540:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 948              		.loc 1 540 3 is_stmt 1 view .LVU236
 949              		.loc 1 540 24 is_stmt 0 view .LVU237
 950 0132 0794     		str	r4, [sp, #28]
 541:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 951              		.loc 1 541 3 is_stmt 1 view .LVU238
 952 0134 05A9     		add	r1, sp, #20
 953 0136 4046     		mov	r0, r8
 954 0138 FFF7FEFF 		bl	HAL_GPIO_Init
 955              	.LVL69:
 542:Core/Src/main.c **** 
 543:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 544:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 956              		.loc 1 544 3 view .LVU239
 957              		.loc 1 544 23 is_stmt 0 view .LVU240
 958 013c 0423     		movs	r3, #4
 959 013e 0593     		str	r3, [sp, #20]
 545:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 960              		.loc 1 545 3 is_stmt 1 view .LVU241
 961              		.loc 1 545 24 is_stmt 0 view .LVU242
 962 0140 0697     		str	r7, [sp, #24]
 546:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 963              		.loc 1 546 3 is_stmt 1 view .LVU243
 964              		.loc 1 546 24 is_stmt 0 view .LVU244
 965 0142 0794     		str	r4, [sp, #28]
 547:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 966              		.loc 1 547 3 is_stmt 1 view .LVU245
 967 0144 05A9     		add	r1, sp, #20
 968 0146 0E48     		ldr	r0, .L34+12
 969 0148 FFF7FEFF 		bl	HAL_GPIO_Init
 970              	.LVL70:
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* EXTI interrupt init*/
 550:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 971              		.loc 1 550 3 view .LVU246
 972 014c 2246     		mov	r2, r4
 973 014e 2146     		mov	r1, r4
 974 0150 0A20     		movs	r0, #10
 975 0152 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 976              	.LVL71:
 551:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 977              		.loc 1 551 3 view .LVU247
 978 0156 0A20     		movs	r0, #10
 979 0158 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 980              	.LVL72:
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 981              		.loc 1 553 3 view .LVU248
 982 015c 2246     		mov	r2, r4
 983 015e 2146     		mov	r1, r4
 984 0160 2820     		movs	r0, #40
 985 0162 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 986              	.LVL73:
 554:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
ARM GAS  C:\Temp\cc3UDUYh.s 			page 28


 987              		.loc 1 554 3 view .LVU249
 988 0166 2820     		movs	r0, #40
 989 0168 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 990              	.LVL74:
 555:Core/Src/main.c **** 
 556:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 557:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 558:Core/Src/main.c **** }
 991              		.loc 1 558 1 is_stmt 0 view .LVU250
 992 016c 0AB0     		add	sp, sp, #40
 993              		.cfi_def_cfa_offset 24
 994              		@ sp needed
 995 016e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 996              	.L35:
 997 0172 00BF     		.align	2
 998              	.L34:
 999 0174 00380240 		.word	1073887232
 1000 0178 00000240 		.word	1073872896
 1001 017c 00080240 		.word	1073874944
 1002 0180 000C0240 		.word	1073875968
 1003 0184 00040240 		.word	1073873920
 1004              		.cfi_endproc
 1005              	.LFE149:
 1007              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1008              		.align	1
 1009              		.global	HAL_TIM_PeriodElapsedCallback
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1014              	HAL_TIM_PeriodElapsedCallback:
 1015              	.LVL75:
 1016              	.LFB150:
 559:Core/Src/main.c **** 
 560:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 561:Core/Src/main.c **** 
 562:Core/Src/main.c **** /* USER CODE END 4 */
 563:Core/Src/main.c **** 
 564:Core/Src/main.c **** /**
 565:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 566:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 567:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 568:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 569:Core/Src/main.c ****   * @param  htim : TIM handle
 570:Core/Src/main.c ****   * @retval None
 571:Core/Src/main.c ****   */
 572:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 573:Core/Src/main.c **** {
 1017              		.loc 1 573 1 is_stmt 1 view -0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		.loc 1 573 1 is_stmt 0 view .LVU252
 1022 0000 08B5     		push	{r3, lr}
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 3, -8
 1025              		.cfi_offset 14, -4
 574:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
ARM GAS  C:\Temp\cc3UDUYh.s 			page 29


 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 577:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 1026              		.loc 1 577 3 is_stmt 1 view .LVU253
 1027              		.loc 1 577 11 is_stmt 0 view .LVU254
 1028 0002 0268     		ldr	r2, [r0]
 1029              		.loc 1 577 6 view .LVU255
 1030 0004 034B     		ldr	r3, .L40
 1031 0006 9A42     		cmp	r2, r3
 1032 0008 00D0     		beq	.L39
 1033              	.LVL76:
 1034              	.L36:
 578:Core/Src/main.c ****     HAL_IncTick();
 579:Core/Src/main.c ****   }
 580:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 581:Core/Src/main.c **** 
 582:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 583:Core/Src/main.c **** }
 1035              		.loc 1 583 1 view .LVU256
 1036 000a 08BD     		pop	{r3, pc}
 1037              	.LVL77:
 1038              	.L39:
 578:Core/Src/main.c ****     HAL_IncTick();
 1039              		.loc 1 578 5 is_stmt 1 view .LVU257
 1040 000c FFF7FEFF 		bl	HAL_IncTick
 1041              	.LVL78:
 1042              		.loc 1 583 1 is_stmt 0 view .LVU258
 1043 0010 FBE7     		b	.L36
 1044              	.L41:
 1045 0012 00BF     		.align	2
 1046              	.L40:
 1047 0014 00000140 		.word	1073807360
 1048              		.cfi_endproc
 1049              	.LFE150:
 1051              		.section	.text.Error_Handler,"ax",%progbits
 1052              		.align	1
 1053              		.global	Error_Handler
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1058              	Error_Handler:
 1059              	.LFB151:
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** /**
 586:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 587:Core/Src/main.c ****   * @retval None
 588:Core/Src/main.c ****   */
 589:Core/Src/main.c **** void Error_Handler(void)
 590:Core/Src/main.c **** {
 1060              		.loc 1 590 1 is_stmt 1 view -0
 1061              		.cfi_startproc
 1062              		@ Volatile: function does not return.
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 591:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 592:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  C:\Temp\cc3UDUYh.s 			page 30


 593:Core/Src/main.c ****   __disable_irq();
 1066              		.loc 1 593 3 view .LVU260
 1067              	.LBB10:
 1068              	.LBI10:
 1069              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
ARM GAS  C:\Temp\cc3UDUYh.s 			page 31


  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\cc3UDUYh.s 			page 32


 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
ARM GAS  C:\Temp\cc3UDUYh.s 			page 33


 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 34


 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
ARM GAS  C:\Temp\cc3UDUYh.s 			page 35


 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 36


 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\cc3UDUYh.s 			page 37


 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Temp\cc3UDUYh.s 			page 38


 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
ARM GAS  C:\Temp\cc3UDUYh.s 			page 39


 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
ARM GAS  C:\Temp\cc3UDUYh.s 			page 40


 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 41


 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
ARM GAS  C:\Temp\cc3UDUYh.s 			page 42


 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
ARM GAS  C:\Temp\cc3UDUYh.s 			page 43


 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\cc3UDUYh.s 			page 44


 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 45


 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
ARM GAS  C:\Temp\cc3UDUYh.s 			page 46


 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1070              		.loc 2 960 27 view .LVU261
 1071              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  C:\Temp\cc3UDUYh.s 			page 47


 1072              		.loc 2 962 3 view .LVU262
 1073              		.syntax unified
 1074              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1075 0000 72B6     		cpsid i
 1076              	@ 0 "" 2
 1077              		.thumb
 1078              		.syntax unified
 1079              	.L43:
 1080              	.LBE11:
 1081              	.LBE10:
 594:Core/Src/main.c ****   while (1)
 1082              		.loc 1 594 3 discriminator 1 view .LVU263
 595:Core/Src/main.c ****   {
 596:Core/Src/main.c ****   }
 1083              		.loc 1 596 3 discriminator 1 view .LVU264
 594:Core/Src/main.c ****   while (1)
 1084              		.loc 1 594 9 discriminator 1 view .LVU265
 1085 0002 FEE7     		b	.L43
 1086              		.cfi_endproc
 1087              	.LFE151:
 1089              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1090              		.align	1
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1095              	MX_TIM2_Init:
 1096              	.LFB146:
 336:Core/Src/main.c **** 
 1097              		.loc 1 336 1 view -0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 24
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101 0000 00B5     		push	{lr}
 1102              		.cfi_def_cfa_offset 4
 1103              		.cfi_offset 14, -4
 1104 0002 87B0     		sub	sp, sp, #28
 1105              		.cfi_def_cfa_offset 32
 342:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1106              		.loc 1 342 3 view .LVU267
 342:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1107              		.loc 1 342 26 is_stmt 0 view .LVU268
 1108 0004 0023     		movs	r3, #0
 1109 0006 0293     		str	r3, [sp, #8]
 1110 0008 0393     		str	r3, [sp, #12]
 1111 000a 0493     		str	r3, [sp, #16]
 1112 000c 0593     		str	r3, [sp, #20]
 343:Core/Src/main.c **** 
 1113              		.loc 1 343 3 is_stmt 1 view .LVU269
 343:Core/Src/main.c **** 
 1114              		.loc 1 343 27 is_stmt 0 view .LVU270
 1115 000e 0093     		str	r3, [sp]
 1116 0010 0193     		str	r3, [sp, #4]
 348:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 1117              		.loc 1 348 3 is_stmt 1 view .LVU271
 348:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 1118              		.loc 1 348 18 is_stmt 0 view .LVU272
 1119 0012 1448     		ldr	r0, .L52
ARM GAS  C:\Temp\cc3UDUYh.s 			page 48


 1120 0014 4FF08042 		mov	r2, #1073741824
 1121 0018 0260     		str	r2, [r0]
 349:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1122              		.loc 1 349 3 is_stmt 1 view .LVU273
 349:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1123              		.loc 1 349 24 is_stmt 0 view .LVU274
 1124 001a 40F2E732 		movw	r2, #999
 1125 001e 4260     		str	r2, [r0, #4]
 350:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 1126              		.loc 1 350 3 is_stmt 1 view .LVU275
 350:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 1127              		.loc 1 350 26 is_stmt 0 view .LVU276
 1128 0020 8360     		str	r3, [r0, #8]
 351:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1129              		.loc 1 351 3 is_stmt 1 view .LVU277
 351:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1130              		.loc 1 351 21 is_stmt 0 view .LVU278
 1131 0022 C260     		str	r2, [r0, #12]
 352:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1132              		.loc 1 352 3 is_stmt 1 view .LVU279
 352:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1133              		.loc 1 352 28 is_stmt 0 view .LVU280
 1134 0024 0361     		str	r3, [r0, #16]
 353:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1135              		.loc 1 353 3 is_stmt 1 view .LVU281
 353:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1136              		.loc 1 353 32 is_stmt 0 view .LVU282
 1137 0026 8023     		movs	r3, #128
 1138 0028 8361     		str	r3, [r0, #24]
 354:Core/Src/main.c ****   {
 1139              		.loc 1 354 3 is_stmt 1 view .LVU283
 354:Core/Src/main.c ****   {
 1140              		.loc 1 354 7 is_stmt 0 view .LVU284
 1141 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1142              	.LVL79:
 354:Core/Src/main.c ****   {
 1143              		.loc 1 354 6 view .LVU285
 1144 002e 90B9     		cbnz	r0, .L49
 358:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1145              		.loc 1 358 3 is_stmt 1 view .LVU286
 358:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1146              		.loc 1 358 34 is_stmt 0 view .LVU287
 1147 0030 4FF48053 		mov	r3, #4096
 1148 0034 0293     		str	r3, [sp, #8]
 359:Core/Src/main.c ****   {
 1149              		.loc 1 359 3 is_stmt 1 view .LVU288
 359:Core/Src/main.c ****   {
 1150              		.loc 1 359 7 is_stmt 0 view .LVU289
 1151 0036 02A9     		add	r1, sp, #8
 1152 0038 0A48     		ldr	r0, .L52
 1153 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1154              	.LVL80:
 359:Core/Src/main.c ****   {
 1155              		.loc 1 359 6 view .LVU290
 1156 003e 60B9     		cbnz	r0, .L50
 363:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1157              		.loc 1 363 3 is_stmt 1 view .LVU291
ARM GAS  C:\Temp\cc3UDUYh.s 			page 49


 363:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1158              		.loc 1 363 37 is_stmt 0 view .LVU292
 1159 0040 0023     		movs	r3, #0
 1160 0042 0093     		str	r3, [sp]
 364:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1161              		.loc 1 364 3 is_stmt 1 view .LVU293
 364:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1162              		.loc 1 364 33 is_stmt 0 view .LVU294
 1163 0044 0193     		str	r3, [sp, #4]
 365:Core/Src/main.c ****   {
 1164              		.loc 1 365 3 is_stmt 1 view .LVU295
 365:Core/Src/main.c ****   {
 1165              		.loc 1 365 7 is_stmt 0 view .LVU296
 1166 0046 6946     		mov	r1, sp
 1167 0048 0648     		ldr	r0, .L52
 1168 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1169              	.LVL81:
 365:Core/Src/main.c ****   {
 1170              		.loc 1 365 6 view .LVU297
 1171 004e 30B9     		cbnz	r0, .L51
 373:Core/Src/main.c **** 
 1172              		.loc 1 373 1 view .LVU298
 1173 0050 07B0     		add	sp, sp, #28
 1174              		.cfi_remember_state
 1175              		.cfi_def_cfa_offset 4
 1176              		@ sp needed
 1177 0052 5DF804FB 		ldr	pc, [sp], #4
 1178              	.L49:
 1179              		.cfi_restore_state
 356:Core/Src/main.c ****   }
 1180              		.loc 1 356 5 is_stmt 1 view .LVU299
 1181 0056 FFF7FEFF 		bl	Error_Handler
 1182              	.LVL82:
 1183              	.L50:
 361:Core/Src/main.c ****   }
 1184              		.loc 1 361 5 view .LVU300
 1185 005a FFF7FEFF 		bl	Error_Handler
 1186              	.LVL83:
 1187              	.L51:
 367:Core/Src/main.c ****   }
 1188              		.loc 1 367 5 view .LVU301
 1189 005e FFF7FEFF 		bl	Error_Handler
 1190              	.LVL84:
 1191              	.L53:
 1192 0062 00BF     		.align	2
 1193              	.L52:
 1194 0064 00000000 		.word	htim2
 1195              		.cfi_endproc
 1196              	.LFE146:
 1198              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1199              		.align	1
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1204              	MX_USART2_UART_Init:
 1205              	.LFB148:
 426:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 50


 1206              		.loc 1 426 1 view -0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210 0000 08B5     		push	{r3, lr}
 1211              		.cfi_def_cfa_offset 8
 1212              		.cfi_offset 3, -8
 1213              		.cfi_offset 14, -4
 435:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 1214              		.loc 1 435 3 view .LVU303
 435:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 1215              		.loc 1 435 19 is_stmt 0 view .LVU304
 1216 0002 0D48     		ldr	r0, .L58
 1217 0004 0D4B     		ldr	r3, .L58+4
 1218 0006 0360     		str	r3, [r0]
 436:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 1219              		.loc 1 436 3 is_stmt 1 view .LVU305
 436:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 1220              		.loc 1 436 24 is_stmt 0 view .LVU306
 1221 0008 4FF4E113 		mov	r3, #1843200
 1222 000c 4360     		str	r3, [r0, #4]
 437:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 1223              		.loc 1 437 3 is_stmt 1 view .LVU307
 437:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 1224              		.loc 1 437 26 is_stmt 0 view .LVU308
 1225 000e 4FF48053 		mov	r3, #4096
 1226 0012 8360     		str	r3, [r0, #8]
 438:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 1227              		.loc 1 438 3 is_stmt 1 view .LVU309
 438:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 1228              		.loc 1 438 24 is_stmt 0 view .LVU310
 1229 0014 4FF40053 		mov	r3, #8192
 1230 0018 C360     		str	r3, [r0, #12]
 439:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1231              		.loc 1 439 3 is_stmt 1 view .LVU311
 439:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1232              		.loc 1 439 22 is_stmt 0 view .LVU312
 1233 001a 4FF48063 		mov	r3, #1024
 1234 001e 0361     		str	r3, [r0, #16]
 440:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1235              		.loc 1 440 3 is_stmt 1 view .LVU313
 440:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1236              		.loc 1 440 20 is_stmt 0 view .LVU314
 1237 0020 0C23     		movs	r3, #12
 1238 0022 4361     		str	r3, [r0, #20]
 441:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1239              		.loc 1 441 3 is_stmt 1 view .LVU315
 441:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1240              		.loc 1 441 25 is_stmt 0 view .LVU316
 1241 0024 0023     		movs	r3, #0
 1242 0026 8361     		str	r3, [r0, #24]
 442:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1243              		.loc 1 442 3 is_stmt 1 view .LVU317
 442:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1244              		.loc 1 442 28 is_stmt 0 view .LVU318
 1245 0028 C361     		str	r3, [r0, #28]
 443:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc3UDUYh.s 			page 51


 1246              		.loc 1 443 3 is_stmt 1 view .LVU319
 443:Core/Src/main.c ****   {
 1247              		.loc 1 443 7 is_stmt 0 view .LVU320
 1248 002a FFF7FEFF 		bl	HAL_UART_Init
 1249              	.LVL85:
 443:Core/Src/main.c ****   {
 1250              		.loc 1 443 6 view .LVU321
 1251 002e 00B9     		cbnz	r0, .L57
 451:Core/Src/main.c **** 
 1252              		.loc 1 451 1 view .LVU322
 1253 0030 08BD     		pop	{r3, pc}
 1254              	.L57:
 445:Core/Src/main.c ****   }
 1255              		.loc 1 445 5 is_stmt 1 view .LVU323
 1256 0032 FFF7FEFF 		bl	Error_Handler
 1257              	.LVL86:
 1258              	.L59:
 1259 0036 00BF     		.align	2
 1260              	.L58:
 1261 0038 00000000 		.word	huart2
 1262 003c 00440040 		.word	1073759232
 1263              		.cfi_endproc
 1264              	.LFE148:
 1266              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1267              		.align	1
 1268              		.syntax unified
 1269              		.thumb
 1270              		.thumb_func
 1272              	MX_TIM3_Init:
 1273              	.LFB147:
 381:Core/Src/main.c **** 
 1274              		.loc 1 381 1 view -0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 24
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278 0000 00B5     		push	{lr}
 1279              		.cfi_def_cfa_offset 4
 1280              		.cfi_offset 14, -4
 1281 0002 87B0     		sub	sp, sp, #28
 1282              		.cfi_def_cfa_offset 32
 387:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1283              		.loc 1 387 3 view .LVU325
 387:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1284              		.loc 1 387 26 is_stmt 0 view .LVU326
 1285 0004 0023     		movs	r3, #0
 1286 0006 0293     		str	r3, [sp, #8]
 1287 0008 0393     		str	r3, [sp, #12]
 1288 000a 0493     		str	r3, [sp, #16]
 1289 000c 0593     		str	r3, [sp, #20]
 388:Core/Src/main.c **** 
 1290              		.loc 1 388 3 is_stmt 1 view .LVU327
 388:Core/Src/main.c **** 
 1291              		.loc 1 388 27 is_stmt 0 view .LVU328
 1292 000e 0093     		str	r3, [sp]
 1293 0010 0193     		str	r3, [sp, #4]
 393:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 1294              		.loc 1 393 3 is_stmt 1 view .LVU329
ARM GAS  C:\Temp\cc3UDUYh.s 			page 52


 393:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 1295              		.loc 1 393 18 is_stmt 0 view .LVU330
 1296 0012 1348     		ldr	r0, .L68
 1297 0014 134A     		ldr	r2, .L68+4
 1298 0016 0260     		str	r2, [r0]
 394:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1299              		.loc 1 394 3 is_stmt 1 view .LVU331
 394:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1300              		.loc 1 394 24 is_stmt 0 view .LVU332
 1301 0018 4360     		str	r3, [r0, #4]
 395:Core/Src/main.c ****   htim3.Init.Period = 65535;
 1302              		.loc 1 395 3 is_stmt 1 view .LVU333
 395:Core/Src/main.c ****   htim3.Init.Period = 65535;
 1303              		.loc 1 395 26 is_stmt 0 view .LVU334
 1304 001a 8360     		str	r3, [r0, #8]
 396:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1305              		.loc 1 396 3 is_stmt 1 view .LVU335
 396:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1306              		.loc 1 396 21 is_stmt 0 view .LVU336
 1307 001c 4FF6FF72 		movw	r2, #65535
 1308 0020 C260     		str	r2, [r0, #12]
 397:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1309              		.loc 1 397 3 is_stmt 1 view .LVU337
 397:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1310              		.loc 1 397 28 is_stmt 0 view .LVU338
 1311 0022 0361     		str	r3, [r0, #16]
 398:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1312              		.loc 1 398 3 is_stmt 1 view .LVU339
 398:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1313              		.loc 1 398 32 is_stmt 0 view .LVU340
 1314 0024 8023     		movs	r3, #128
 1315 0026 8361     		str	r3, [r0, #24]
 399:Core/Src/main.c ****   {
 1316              		.loc 1 399 3 is_stmt 1 view .LVU341
 399:Core/Src/main.c ****   {
 1317              		.loc 1 399 7 is_stmt 0 view .LVU342
 1318 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1319              	.LVL87:
 399:Core/Src/main.c ****   {
 1320              		.loc 1 399 6 view .LVU343
 1321 002c 90B9     		cbnz	r0, .L65
 403:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1322              		.loc 1 403 3 is_stmt 1 view .LVU344
 403:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1323              		.loc 1 403 34 is_stmt 0 view .LVU345
 1324 002e 4FF48053 		mov	r3, #4096
 1325 0032 0293     		str	r3, [sp, #8]
 404:Core/Src/main.c ****   {
 1326              		.loc 1 404 3 is_stmt 1 view .LVU346
 404:Core/Src/main.c ****   {
 1327              		.loc 1 404 7 is_stmt 0 view .LVU347
 1328 0034 02A9     		add	r1, sp, #8
 1329 0036 0A48     		ldr	r0, .L68
 1330 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1331              	.LVL88:
 404:Core/Src/main.c ****   {
 1332              		.loc 1 404 6 view .LVU348
ARM GAS  C:\Temp\cc3UDUYh.s 			page 53


 1333 003c 60B9     		cbnz	r0, .L66
 408:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1334              		.loc 1 408 3 is_stmt 1 view .LVU349
 408:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1335              		.loc 1 408 37 is_stmt 0 view .LVU350
 1336 003e 0023     		movs	r3, #0
 1337 0040 0093     		str	r3, [sp]
 409:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1338              		.loc 1 409 3 is_stmt 1 view .LVU351
 409:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1339              		.loc 1 409 33 is_stmt 0 view .LVU352
 1340 0042 0193     		str	r3, [sp, #4]
 410:Core/Src/main.c ****   {
 1341              		.loc 1 410 3 is_stmt 1 view .LVU353
 410:Core/Src/main.c ****   {
 1342              		.loc 1 410 7 is_stmt 0 view .LVU354
 1343 0044 6946     		mov	r1, sp
 1344 0046 0648     		ldr	r0, .L68
 1345 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1346              	.LVL89:
 410:Core/Src/main.c ****   {
 1347              		.loc 1 410 6 view .LVU355
 1348 004c 30B9     		cbnz	r0, .L67
 418:Core/Src/main.c **** 
 1349              		.loc 1 418 1 view .LVU356
 1350 004e 07B0     		add	sp, sp, #28
 1351              		.cfi_remember_state
 1352              		.cfi_def_cfa_offset 4
 1353              		@ sp needed
 1354 0050 5DF804FB 		ldr	pc, [sp], #4
 1355              	.L65:
 1356              		.cfi_restore_state
 401:Core/Src/main.c ****   }
 1357              		.loc 1 401 5 is_stmt 1 view .LVU357
 1358 0054 FFF7FEFF 		bl	Error_Handler
 1359              	.LVL90:
 1360              	.L66:
 406:Core/Src/main.c ****   }
 1361              		.loc 1 406 5 view .LVU358
 1362 0058 FFF7FEFF 		bl	Error_Handler
 1363              	.LVL91:
 1364              	.L67:
 412:Core/Src/main.c ****   }
 1365              		.loc 1 412 5 view .LVU359
 1366 005c FFF7FEFF 		bl	Error_Handler
 1367              	.LVL92:
 1368              	.L69:
 1369              		.align	2
 1370              	.L68:
 1371 0060 00000000 		.word	htim3
 1372 0064 00040040 		.word	1073742848
 1373              		.cfi_endproc
 1374              	.LFE147:
 1376              		.section	.text.SystemClock_Config,"ax",%progbits
 1377              		.align	1
 1378              		.global	SystemClock_Config
 1379              		.syntax unified
ARM GAS  C:\Temp\cc3UDUYh.s 			page 54


 1380              		.thumb
 1381              		.thumb_func
 1383              	SystemClock_Config:
 1384              	.LFB145:
 290:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1385              		.loc 1 290 1 view -0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 80
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389 0000 00B5     		push	{lr}
 1390              		.cfi_def_cfa_offset 4
 1391              		.cfi_offset 14, -4
 1392 0002 95B0     		sub	sp, sp, #84
 1393              		.cfi_def_cfa_offset 88
 291:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1394              		.loc 1 291 3 view .LVU361
 291:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1395              		.loc 1 291 22 is_stmt 0 view .LVU362
 1396 0004 3022     		movs	r2, #48
 1397 0006 0021     		movs	r1, #0
 1398 0008 08A8     		add	r0, sp, #32
 1399 000a FFF7FEFF 		bl	memset
 1400              	.LVL93:
 292:Core/Src/main.c **** 
 1401              		.loc 1 292 3 is_stmt 1 view .LVU363
 292:Core/Src/main.c **** 
 1402              		.loc 1 292 22 is_stmt 0 view .LVU364
 1403 000e 0023     		movs	r3, #0
 1404 0010 0393     		str	r3, [sp, #12]
 1405 0012 0493     		str	r3, [sp, #16]
 1406 0014 0593     		str	r3, [sp, #20]
 1407 0016 0693     		str	r3, [sp, #24]
 1408 0018 0793     		str	r3, [sp, #28]
 296:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1409              		.loc 1 296 3 is_stmt 1 view .LVU365
 1410              	.LBB12:
 296:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1411              		.loc 1 296 3 view .LVU366
 1412 001a 0193     		str	r3, [sp, #4]
 296:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1413              		.loc 1 296 3 view .LVU367
 1414 001c 1F4A     		ldr	r2, .L76
 1415 001e 116C     		ldr	r1, [r2, #64]
 1416 0020 41F08051 		orr	r1, r1, #268435456
 1417 0024 1164     		str	r1, [r2, #64]
 296:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1418              		.loc 1 296 3 view .LVU368
 1419 0026 126C     		ldr	r2, [r2, #64]
 1420 0028 02F08052 		and	r2, r2, #268435456
 1421 002c 0192     		str	r2, [sp, #4]
 296:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1422              		.loc 1 296 3 view .LVU369
 1423 002e 019A     		ldr	r2, [sp, #4]
 1424              	.LBE12:
 296:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1425              		.loc 1 296 3 view .LVU370
 297:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 55


 1426              		.loc 1 297 3 view .LVU371
 1427              	.LBB13:
 297:Core/Src/main.c **** 
 1428              		.loc 1 297 3 view .LVU372
 1429 0030 0293     		str	r3, [sp, #8]
 297:Core/Src/main.c **** 
 1430              		.loc 1 297 3 view .LVU373
 1431 0032 1B4B     		ldr	r3, .L76+4
 1432 0034 1A68     		ldr	r2, [r3]
 1433 0036 42F44042 		orr	r2, r2, #49152
 1434 003a 1A60     		str	r2, [r3]
 297:Core/Src/main.c **** 
 1435              		.loc 1 297 3 view .LVU374
 1436 003c 1B68     		ldr	r3, [r3]
 1437 003e 03F44043 		and	r3, r3, #49152
 1438 0042 0293     		str	r3, [sp, #8]
 297:Core/Src/main.c **** 
 1439              		.loc 1 297 3 view .LVU375
 1440 0044 029B     		ldr	r3, [sp, #8]
 1441              	.LBE13:
 297:Core/Src/main.c **** 
 1442              		.loc 1 297 3 view .LVU376
 302:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1443              		.loc 1 302 3 view .LVU377
 302:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1444              		.loc 1 302 36 is_stmt 0 view .LVU378
 1445 0046 0123     		movs	r3, #1
 1446 0048 0893     		str	r3, [sp, #32]
 303:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1447              		.loc 1 303 3 is_stmt 1 view .LVU379
 303:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1448              		.loc 1 303 30 is_stmt 0 view .LVU380
 1449 004a 4FF48033 		mov	r3, #65536
 1450 004e 0993     		str	r3, [sp, #36]
 304:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1451              		.loc 1 304 3 is_stmt 1 view .LVU381
 304:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1452              		.loc 1 304 34 is_stmt 0 view .LVU382
 1453 0050 0222     		movs	r2, #2
 1454 0052 0E92     		str	r2, [sp, #56]
 305:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 1455              		.loc 1 305 3 is_stmt 1 view .LVU383
 305:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 1456              		.loc 1 305 35 is_stmt 0 view .LVU384
 1457 0054 4FF48003 		mov	r3, #4194304
 1458 0058 0F93     		str	r3, [sp, #60]
 306:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1459              		.loc 1 306 3 is_stmt 1 view .LVU385
 306:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1460              		.loc 1 306 30 is_stmt 0 view .LVU386
 1461 005a 0423     		movs	r3, #4
 1462 005c 1093     		str	r3, [sp, #64]
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1463              		.loc 1 307 3 is_stmt 1 view .LVU387
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1464              		.loc 1 307 30 is_stmt 0 view .LVU388
 1465 005e 6421     		movs	r1, #100
ARM GAS  C:\Temp\cc3UDUYh.s 			page 56


 1466 0060 1191     		str	r1, [sp, #68]
 308:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1467              		.loc 1 308 3 is_stmt 1 view .LVU389
 308:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1468              		.loc 1 308 30 is_stmt 0 view .LVU390
 1469 0062 1292     		str	r2, [sp, #72]
 309:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1470              		.loc 1 309 3 is_stmt 1 view .LVU391
 309:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1471              		.loc 1 309 30 is_stmt 0 view .LVU392
 1472 0064 1393     		str	r3, [sp, #76]
 310:Core/Src/main.c ****   {
 1473              		.loc 1 310 3 is_stmt 1 view .LVU393
 310:Core/Src/main.c ****   {
 1474              		.loc 1 310 7 is_stmt 0 view .LVU394
 1475 0066 08A8     		add	r0, sp, #32
 1476 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1477              	.LVL94:
 310:Core/Src/main.c ****   {
 1478              		.loc 1 310 6 view .LVU395
 1479 006c 88B9     		cbnz	r0, .L74
 317:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1480              		.loc 1 317 3 is_stmt 1 view .LVU396
 317:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1481              		.loc 1 317 31 is_stmt 0 view .LVU397
 1482 006e 0F23     		movs	r3, #15
 1483 0070 0393     		str	r3, [sp, #12]
 319:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1484              		.loc 1 319 3 is_stmt 1 view .LVU398
 319:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1485              		.loc 1 319 34 is_stmt 0 view .LVU399
 1486 0072 0223     		movs	r3, #2
 1487 0074 0493     		str	r3, [sp, #16]
 320:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1488              		.loc 1 320 3 is_stmt 1 view .LVU400
 320:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1489              		.loc 1 320 35 is_stmt 0 view .LVU401
 1490 0076 0023     		movs	r3, #0
 1491 0078 0593     		str	r3, [sp, #20]
 321:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1492              		.loc 1 321 3 is_stmt 1 view .LVU402
 321:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1493              		.loc 1 321 36 is_stmt 0 view .LVU403
 1494 007a 4FF48052 		mov	r2, #4096
 1495 007e 0692     		str	r2, [sp, #24]
 322:Core/Src/main.c **** 
 1496              		.loc 1 322 3 is_stmt 1 view .LVU404
 322:Core/Src/main.c **** 
 1497              		.loc 1 322 36 is_stmt 0 view .LVU405
 1498 0080 0793     		str	r3, [sp, #28]
 324:Core/Src/main.c ****   {
 1499              		.loc 1 324 3 is_stmt 1 view .LVU406
 324:Core/Src/main.c ****   {
 1500              		.loc 1 324 7 is_stmt 0 view .LVU407
 1501 0082 0321     		movs	r1, #3
 1502 0084 03A8     		add	r0, sp, #12
 1503 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  C:\Temp\cc3UDUYh.s 			page 57


 1504              	.LVL95:
 324:Core/Src/main.c ****   {
 1505              		.loc 1 324 6 view .LVU408
 1506 008a 20B9     		cbnz	r0, .L75
 328:Core/Src/main.c **** 
 1507              		.loc 1 328 1 view .LVU409
 1508 008c 15B0     		add	sp, sp, #84
 1509              		.cfi_remember_state
 1510              		.cfi_def_cfa_offset 4
 1511              		@ sp needed
 1512 008e 5DF804FB 		ldr	pc, [sp], #4
 1513              	.L74:
 1514              		.cfi_restore_state
 312:Core/Src/main.c ****   }
 1515              		.loc 1 312 5 is_stmt 1 view .LVU410
 1516 0092 FFF7FEFF 		bl	Error_Handler
 1517              	.LVL96:
 1518              	.L75:
 326:Core/Src/main.c ****   }
 1519              		.loc 1 326 5 view .LVU411
 1520 0096 FFF7FEFF 		bl	Error_Handler
 1521              	.LVL97:
 1522              	.L77:
 1523 009a 00BF     		.align	2
 1524              	.L76:
 1525 009c 00380240 		.word	1073887232
 1526 00a0 00700040 		.word	1073770496
 1527              		.cfi_endproc
 1528              	.LFE145:
 1530              		.section	.text.main,"ax",%progbits
 1531              		.align	1
 1532              		.global	main
 1533              		.syntax unified
 1534              		.thumb
 1535              		.thumb_func
 1537              	main:
 1538              	.LFB144:
 223:Core/Src/main.c **** 
 1539              		.loc 1 223 1 view -0
 1540              		.cfi_startproc
 1541              		@ Volatile: function does not return.
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544 0000 08B5     		push	{r3, lr}
 1545              		.cfi_def_cfa_offset 8
 1546              		.cfi_offset 3, -8
 1547              		.cfi_offset 14, -4
 232:Core/Src/main.c **** 
 1548              		.loc 1 232 3 view .LVU413
 1549 0002 FFF7FEFF 		bl	HAL_Init
 1550              	.LVL98:
 239:Core/Src/main.c **** 
 1551              		.loc 1 239 3 view .LVU414
 1552 0006 FFF7FEFF 		bl	SystemClock_Config
 1553              	.LVL99:
 246:Core/Src/main.c ****   MX_TIM2_Init();
 1554              		.loc 1 246 3 view .LVU415
ARM GAS  C:\Temp\cc3UDUYh.s 			page 58


 1555 000a FFF7FEFF 		bl	MX_GPIO_Init
 1556              	.LVL100:
 247:Core/Src/main.c ****   MX_USART2_UART_Init();
 1557              		.loc 1 247 3 view .LVU416
 1558 000e FFF7FEFF 		bl	MX_TIM2_Init
 1559              	.LVL101:
 248:Core/Src/main.c ****   MX_TIM3_Init();
 1560              		.loc 1 248 3 view .LVU417
 1561 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 1562              	.LVL102:
 249:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1563              		.loc 1 249 3 view .LVU418
 1564 0016 FFF7FEFF 		bl	MX_TIM3_Init
 1565              	.LVL103:
 251:Core/Src/main.c ****     initialCalibration();
 1566              		.loc 1 251 3 view .LVU419
 1567              	.L79:
 251:Core/Src/main.c ****     initialCalibration();
 1568              		.loc 1 251 21 view .LVU420
 1569 001a 194B     		ldr	r3, .L85
 1570 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1571 001e 012B     		cmp	r3, #1
 1572 0020 02D0     		beq	.L84
 252:Core/Src/main.c ****   }
 1573              		.loc 1 252 5 view .LVU421
 1574 0022 FFF7FEFF 		bl	initialCalibration
 1575              	.LVL104:
 1576 0026 F8E7     		b	.L79
 1577              	.L84:
 254:Core/Src/main.c ****   initVL53L8A1();
 1578              		.loc 1 254 3 view .LVU422
 1579 0028 FFF7FEFF 		bl	calibrateVL53L8A1
 1580              	.LVL105:
 255:Core/Src/main.c **** 
 1581              		.loc 1 255 3 view .LVU423
 1582 002c FFF7FEFF 		bl	initVL53L8A1
 1583              	.LVL106:
 257:Core/Src/main.c ****   calibrate_IKS02A1();
 1584              		.loc 1 257 3 view .LVU424
 1585 0030 FFF7FEFF 		bl	initIKS02A1
 1586              	.LVL107:
 258:Core/Src/main.c **** 
 1587              		.loc 1 258 3 view .LVU425
 1588 0034 FFF7FEFF 		bl	calibrate_IKS02A1
 1589              	.LVL108:
 260:Core/Src/main.c ****   configureTimer(tof_odr,TIM3);
 1590              		.loc 1 260 3 view .LVU426
 1591 0038 4FF08040 		mov	r0, #1073741824
 1592 003c 114B     		ldr	r3, .L85+4
 1593 003e 93ED000A 		vldr.32	s0, [r3]
 1594 0042 FFF7FEFF 		bl	configureTimer
 1595              	.LVL109:
 261:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 1596              		.loc 1 261 3 view .LVU427
 1597 0046 1048     		ldr	r0, .L85+8
 1598 0048 104B     		ldr	r3, .L85+12
 1599 004a 93ED000A 		vldr.32	s0, [r3]
ARM GAS  C:\Temp\cc3UDUYh.s 			page 59


 1600 004e FFF7FEFF 		bl	configureTimer
 1601              	.LVL110:
 262:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 1602              		.loc 1 262 3 view .LVU428
 1603 0052 0F48     		ldr	r0, .L85+16
 1604 0054 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1605              	.LVL111:
 263:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 1606              		.loc 1 263 3 view .LVU429
 1607 0058 0E48     		ldr	r0, .L85+20
 1608 005a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1609              	.LVL112:
 264:Core/Src/main.c **** 
 1610              		.loc 1 264 3 view .LVU430
 1611 005e 0122     		movs	r2, #1
 1612 0060 2021     		movs	r1, #32
 1613 0062 0D48     		ldr	r0, .L85+24
 1614 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1615              	.LVL113:
 1616              	.L81:
 270:Core/Src/main.c ****   {
 1617              		.loc 1 270 3 view .LVU431
 272:Core/Src/main.c ****     if (clearToGetL8 == 1){
 1618              		.loc 1 272 5 view .LVU432
 1619 0068 FFF7FEFF 		bl	getIKS02A1
 1620              	.LVL114:
 273:Core/Src/main.c ****       getVL53L8A1();
 1621              		.loc 1 273 5 view .LVU433
 273:Core/Src/main.c ****       getVL53L8A1();
 1622              		.loc 1 273 22 is_stmt 0 view .LVU434
 1623 006c 0B4B     		ldr	r3, .L85+28
 1624 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 273:Core/Src/main.c ****       getVL53L8A1();
 1625              		.loc 1 273 8 view .LVU435
 1626 0070 012B     		cmp	r3, #1
 1627 0072 F9D1     		bne	.L81
 274:Core/Src/main.c ****       clearToGetL8 = 0;
 1628              		.loc 1 274 7 is_stmt 1 view .LVU436
 1629 0074 FFF7FEFF 		bl	getVL53L8A1
 1630              	.LVL115:
 275:Core/Src/main.c ****     }
 1631              		.loc 1 275 7 view .LVU437
 275:Core/Src/main.c ****     }
 1632              		.loc 1 275 20 is_stmt 0 view .LVU438
 1633 0078 084B     		ldr	r3, .L85+28
 1634 007a 0022     		movs	r2, #0
 1635 007c 1A70     		strb	r2, [r3]
 1636 007e F3E7     		b	.L81
 1637              	.L86:
 1638              		.align	2
 1639              	.L85:
 1640 0080 00000000 		.word	calibrated
 1641 0084 00000000 		.word	fastestODR
 1642 0088 00040040 		.word	1073742848
 1643 008c 00000000 		.word	tof_odr
 1644 0090 00000000 		.word	htim2
 1645 0094 00000000 		.word	htim3
ARM GAS  C:\Temp\cc3UDUYh.s 			page 60


 1646 0098 00000240 		.word	1073872896
 1647 009c 00000000 		.word	clearToGetL8
 1648              		.cfi_endproc
 1649              	.LFE144:
 1651              		.section	.text.assert_failed,"ax",%progbits
 1652              		.align	1
 1653              		.global	assert_failed
 1654              		.syntax unified
 1655              		.thumb
 1656              		.thumb_func
 1658              	assert_failed:
 1659              	.LVL116:
 1660              	.LFB152:
 597:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 598:Core/Src/main.c **** }
 599:Core/Src/main.c **** 
 600:Core/Src/main.c **** #ifdef  USE_FULL_ASSERT
 601:Core/Src/main.c **** /**
 602:Core/Src/main.c ****   * @brief  Reports the name of the source file and the source line number
 603:Core/Src/main.c ****   *         where the assert_param error has occurred.
 604:Core/Src/main.c ****   * @param  file: pointer to the source file name
 605:Core/Src/main.c ****   * @param  line: assert_param error line source number
 606:Core/Src/main.c ****   * @retval None
 607:Core/Src/main.c ****   */
 608:Core/Src/main.c **** void assert_failed(uint8_t *file, uint32_t line)
 609:Core/Src/main.c **** {
 1661              		.loc 1 609 1 is_stmt 1 view -0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 1665              		@ link register save eliminated.
 610:Core/Src/main.c ****   /* USER CODE BEGIN 6 */
 611:Core/Src/main.c ****   /* User can add his own implementation to report the file name and line number,
 612:Core/Src/main.c ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 613:Core/Src/main.c ****   /* USER CODE END 6 */
 614:Core/Src/main.c **** }
 1666              		.loc 1 614 1 view .LVU440
 1667 0000 7047     		bx	lr
 1668              		.cfi_endproc
 1669              	.LFE152:
 1671              		.global	counter
 1672              		.section	.bss.counter,"aw",%nobits
 1673              		.align	2
 1676              	counter:
 1677 0000 00000000 		.space	4
 1678              		.global	calibrated
 1679              		.section	.bss.calibrated,"aw",%nobits
 1682              	calibrated:
 1683 0000 00       		.space	1
 1684              		.global	clearToGetL8
 1685              		.section	.bss.clearToGetL8,"aw",%nobits
 1688              	clearToGetL8:
 1689 0000 00       		.space	1
 1690              		.global	clearToSend
 1691              		.section	.bss.clearToSend,"aw",%nobits
 1694              	clearToSend:
 1695 0000 00       		.space	1
ARM GAS  C:\Temp\cc3UDUYh.s 			page 61


 1696              		.global	bigBuffer
 1697              		.section	.bss.bigBuffer,"aw",%nobits
 1698              		.align	2
 1701              	bigBuffer:
 1702 0000 00000000 		.space	38
 1702      00000000 
 1702      00000000 
 1702      00000000 
 1702      00000000 
 1703              		.global	numberOfSimulinkBytes
 1704              		.section	.rodata.numberOfSimulinkBytes,"a"
 1705              		.align	2
 1708              	numberOfSimulinkBytes:
 1709 0000 20000000 		.word	32
 1710              		.global	expectedTerminator
 1711              		.section	.rodata.expectedTerminator,"a"
 1712              		.align	2
 1715              	expectedTerminator:
 1716 0000 415F4A   		.ascii	"A_J"
 1717              		.global	expectedHeader
 1718              		.section	.rodata.expectedHeader,"a"
 1719              		.align	2
 1722              	expectedHeader:
 1723 0000 4A5F41   		.ascii	"J_A"
 1724              		.global	terminator
 1725              		.section	.data.terminator,"aw"
 1726              		.align	2
 1729              	terminator:
 1730 0000 415F4A00 		.word	4874049
 1731              		.global	header
 1732              		.section	.data.header,"aw"
 1733              		.align	2
 1736              	header:
 1737 0000 4A5F4100 		.word	4284234
 1738              		.global	TOF_centre
 1739              		.section	.bss.TOF_centre,"aw",%nobits
 1740              		.align	2
 1743              	TOF_centre:
 1744 0000 00000000 		.space	1284
 1744      00000000 
 1744      00000000 
 1744      00000000 
 1744      00000000 
 1745              		.global	mag_axis
 1746              		.section	.bss.mag_axis,"aw",%nobits
 1747              		.align	2
 1750              	mag_axis:
 1751 0000 00000000 		.space	12
 1751      00000000 
 1751      00000000 
 1752              		.global	accel2_axis
 1753              		.section	.bss.accel2_axis,"aw",%nobits
 1754              		.align	2
 1757              	accel2_axis:
 1758 0000 00000000 		.space	12
 1758      00000000 
 1758      00000000 
ARM GAS  C:\Temp\cc3UDUYh.s 			page 62


 1759              		.global	gyro_axis
 1760              		.section	.bss.gyro_axis,"aw",%nobits
 1761              		.align	2
 1764              	gyro_axis:
 1765 0000 00000000 		.space	12
 1765      00000000 
 1765      00000000 
 1766              		.global	accel1_axis
 1767              		.section	.bss.accel1_axis,"aw",%nobits
 1768              		.align	2
 1771              	accel1_axis:
 1772 0000 00000000 		.space	12
 1772      00000000 
 1772      00000000 
 1773              		.global	huart2
 1774              		.section	.bss.huart2,"aw",%nobits
 1775              		.align	2
 1778              	huart2:
 1779 0000 00000000 		.space	72
 1779      00000000 
 1779      00000000 
 1779      00000000 
 1779      00000000 
 1780              		.global	htim3
 1781              		.section	.bss.htim3,"aw",%nobits
 1782              		.align	2
 1785              	htim3:
 1786 0000 00000000 		.space	72
 1786      00000000 
 1786      00000000 
 1786      00000000 
 1786      00000000 
 1787              		.global	htim2
 1788              		.section	.bss.htim2,"aw",%nobits
 1789              		.align	2
 1792              	htim2:
 1793 0000 00000000 		.space	72
 1793      00000000 
 1793      00000000 
 1793      00000000 
 1793      00000000 
 1794              		.text
 1795              	.Letext0:
 1796              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1797              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1798              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1799              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1800              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1801              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1802              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1803              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1804              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1805              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1806              		.file 13 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 1807              		.file 14 "Drivers/BSP/IKS02A1/iks02a1_motion_sensors.h"
 1808              		.file 15 "Drivers/BSP/Components/vl53l8cx/modules/vl53l8cx_plugin_xtalk.h"
 1809              		.file 16 "Drivers/BSP/53L8A1/53l8a1_ranging_sensor.h"
ARM GAS  C:\Temp\cc3UDUYh.s 			page 63


 1810              		.file 17 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1811              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1812              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1813              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1814              		.file 21 "Core/Inc/VL53L8A1_Simulink.h"
 1815              		.file 22 "Core/Inc/IKS02A1_Simulink.h"
 1816              		.file 23 "<built-in>"
ARM GAS  C:\Temp\cc3UDUYh.s 			page 64


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\cc3UDUYh.s:21     .text.bytesToFloat_main:00000000 $t
  C:\Temp\cc3UDUYh.s:27     .text.bytesToFloat_main:00000000 bytesToFloat_main
  C:\Temp\cc3UDUYh.s:57     .text.bytesToInt32_main:00000000 $t
  C:\Temp\cc3UDUYh.s:63     .text.bytesToInt32_main:00000000 bytesToInt32_main
  C:\Temp\cc3UDUYh.s:98     .text.receivedFromSimulink:00000000 $t
  C:\Temp\cc3UDUYh.s:104    .text.receivedFromSimulink:00000000 receivedFromSimulink
  C:\Temp\cc3UDUYh.s:214    .text.receivedFromSimulink:00000098 $d
  C:\Temp\cc3UDUYh.s:227    .text.configureTimer:00000000 $t
  C:\Temp\cc3UDUYh.s:233    .text.configureTimer:00000000 configureTimer
  C:\Temp\cc3UDUYh.s:308    .text.configureTimer:0000004c $d
  C:\Temp\cc3UDUYh.s:314    .text.get_fastest_odr:00000000 $t
  C:\Temp\cc3UDUYh.s:320    .text.get_fastest_odr:00000000 get_fastest_odr
  C:\Temp\cc3UDUYh.s:373    .text.sendToSimulink:00000000 $t
  C:\Temp\cc3UDUYh.s:379    .text.sendToSimulink:00000000 sendToSimulink
  C:\Temp\cc3UDUYh.s:583    .text.sendToSimulink:00000160 $d
  C:\Temp\cc3UDUYh.s:1778   .bss.huart2:00000000 huart2
  C:\Temp\cc3UDUYh.s:1736   .data.header:00000000 header
  C:\Temp\cc3UDUYh.s:1771   .bss.accel1_axis:00000000 accel1_axis
  C:\Temp\cc3UDUYh.s:1764   .bss.gyro_axis:00000000 gyro_axis
  C:\Temp\cc3UDUYh.s:1757   .bss.accel2_axis:00000000 accel2_axis
  C:\Temp\cc3UDUYh.s:1750   .bss.mag_axis:00000000 mag_axis
  C:\Temp\cc3UDUYh.s:1676   .bss.counter:00000000 counter
  C:\Temp\cc3UDUYh.s:1729   .data.terminator:00000000 terminator
  C:\Temp\cc3UDUYh.s:1743   .bss.TOF_centre:00000000 TOF_centre
  C:\Temp\cc3UDUYh.s:597    .text.initialCalibration:00000000 $t
  C:\Temp\cc3UDUYh.s:603    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\cc3UDUYh.s:677    .text.initialCalibration:00000064 $d
  C:\Temp\cc3UDUYh.s:1701   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\cc3UDUYh.s:1682   .bss.calibrated:00000000 calibrated
  C:\Temp\cc3UDUYh.s:691    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\cc3UDUYh.s:697    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\cc3UDUYh.s:999    .text.MX_GPIO_Init:00000174 $d
  C:\Temp\cc3UDUYh.s:1008   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\cc3UDUYh.s:1014   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\cc3UDUYh.s:1047   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\cc3UDUYh.s:1052   .text.Error_Handler:00000000 $t
  C:\Temp\cc3UDUYh.s:1058   .text.Error_Handler:00000000 Error_Handler
  C:\Temp\cc3UDUYh.s:1090   .text.MX_TIM2_Init:00000000 $t
  C:\Temp\cc3UDUYh.s:1095   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\cc3UDUYh.s:1194   .text.MX_TIM2_Init:00000064 $d
  C:\Temp\cc3UDUYh.s:1792   .bss.htim2:00000000 htim2
  C:\Temp\cc3UDUYh.s:1199   .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\cc3UDUYh.s:1204   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\cc3UDUYh.s:1261   .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\cc3UDUYh.s:1267   .text.MX_TIM3_Init:00000000 $t
  C:\Temp\cc3UDUYh.s:1272   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
  C:\Temp\cc3UDUYh.s:1371   .text.MX_TIM3_Init:00000060 $d
  C:\Temp\cc3UDUYh.s:1785   .bss.htim3:00000000 htim3
  C:\Temp\cc3UDUYh.s:1377   .text.SystemClock_Config:00000000 $t
  C:\Temp\cc3UDUYh.s:1383   .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\cc3UDUYh.s:1525   .text.SystemClock_Config:0000009c $d
  C:\Temp\cc3UDUYh.s:1531   .text.main:00000000 $t
  C:\Temp\cc3UDUYh.s:1537   .text.main:00000000 main
  C:\Temp\cc3UDUYh.s:1640   .text.main:00000080 $d
  C:\Temp\cc3UDUYh.s:1688   .bss.clearToGetL8:00000000 clearToGetL8
ARM GAS  C:\Temp\cc3UDUYh.s 			page 65


  C:\Temp\cc3UDUYh.s:1652   .text.assert_failed:00000000 $t
  C:\Temp\cc3UDUYh.s:1658   .text.assert_failed:00000000 assert_failed
  C:\Temp\cc3UDUYh.s:1673   .bss.counter:00000000 $d
  C:\Temp\cc3UDUYh.s:1683   .bss.calibrated:00000000 $d
  C:\Temp\cc3UDUYh.s:1689   .bss.clearToGetL8:00000000 $d
  C:\Temp\cc3UDUYh.s:1694   .bss.clearToSend:00000000 clearToSend
  C:\Temp\cc3UDUYh.s:1695   .bss.clearToSend:00000000 $d
  C:\Temp\cc3UDUYh.s:1698   .bss.bigBuffer:00000000 $d
  C:\Temp\cc3UDUYh.s:1708   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\cc3UDUYh.s:1705   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\cc3UDUYh.s:1715   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\cc3UDUYh.s:1712   .rodata.expectedTerminator:00000000 $d
  C:\Temp\cc3UDUYh.s:1722   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\cc3UDUYh.s:1719   .rodata.expectedHeader:00000000 $d
  C:\Temp\cc3UDUYh.s:1726   .data.terminator:00000000 $d
  C:\Temp\cc3UDUYh.s:1733   .data.header:00000000 $d
  C:\Temp\cc3UDUYh.s:1740   .bss.TOF_centre:00000000 $d
  C:\Temp\cc3UDUYh.s:1747   .bss.mag_axis:00000000 $d
  C:\Temp\cc3UDUYh.s:1754   .bss.accel2_axis:00000000 $d
  C:\Temp\cc3UDUYh.s:1761   .bss.gyro_axis:00000000 $d
  C:\Temp\cc3UDUYh.s:1768   .bss.accel1_axis:00000000 $d
  C:\Temp\cc3UDUYh.s:1775   .bss.huart2:00000000 $d
  C:\Temp\cc3UDUYh.s:1782   .bss.htim3:00000000 $d
  C:\Temp\cc3UDUYh.s:1789   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
accel1_fsr
accel1_odr
gyro_fsr
gyro_odr
accel2_fsr
accel2_odr
mag_odr
tof_odr
__aeabi_f2ulz
SystemCoreClock
HAL_UART_Transmit
temperature
HAL_UART_Receive
HAL_GPIO_WritePin
fastestODR
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
calibrateVL53L8A1
initVL53L8A1
initIKS02A1
calibrate_IKS02A1
ARM GAS  C:\Temp\cc3UDUYh.s 			page 66


HAL_TIM_Base_Start_IT
getIKS02A1
getVL53L8A1
