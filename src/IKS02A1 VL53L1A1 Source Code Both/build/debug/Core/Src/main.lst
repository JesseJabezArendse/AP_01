ARM GAS  C:\Temp\cckKiP1p.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB151:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "iks02a1_motion_sensors.h"
  25:Core/Src/main.c **** #include "IKS02A1_Simulink.h"
  26:Core/Src/main.c **** #include "VL53L1A1_Simulink.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  46:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** UART_HandleTypeDef huart2;
  49:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_left;
  53:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_centre;
  54:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_right;
  55:Core/Src/main.c **** RANGING_SENSOR_ProfileConfig_t Profile;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel1_axis;
  59:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t gyro_axis;
  60:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel2_axis;
  61:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t mag_axis;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE END PV */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  67:Core/Src/main.c **** void SystemClock_Config(void);
  68:Core/Src/main.c **** static void MX_GPIO_Init(void);
  69:Core/Src/main.c **** static void MX_DMA_Init(void);
  70:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  71:Core/Src/main.c **** static void MX_TIM2_Init(void);
  72:Core/Src/main.c **** static void MX_TIM3_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** const uint8_t* header = 'A_J';
  80:Core/Src/main.c **** const uint8_t* terminator = 'J_A';
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  83:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  84:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2+2+2+2+1);
  85:Core/Src/main.c **** uint8_t bigBuffer[36+3+3] = {0};
  86:Core/Src/main.c **** uint8_t clearToSend = 0;
  87:Core/Src/main.c **** uint8_t clearToGetL1 = 0;
  88:Core/Src/main.c **** uint8_t calibrated = 0;
ARM GAS  C:\Temp\cckKiP1p.s 			page 3


  89:Core/Src/main.c **** int32_t counter = 0;
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** extern int32_t tof_fsr;
  92:Core/Src/main.c **** extern float tof_odr;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** extern int32_t accel1_fsr;
  95:Core/Src/main.c **** extern float accel1_odr;
  96:Core/Src/main.c **** extern int32_t gyro_fsr;
  97:Core/Src/main.c **** extern float gyro_odr;
  98:Core/Src/main.c **** extern int32_t accel2_fsr;
  99:Core/Src/main.c **** extern float accel2_odr;
 100:Core/Src/main.c **** extern float mag_odr;
 101:Core/Src/main.c **** extern float_t temperature;
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** extern float fastestODR;
 104:Core/Src/main.c ****  
 105:Core/Src/main.c **** float   bytesToFloat_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4) {
 106:Core/Src/main.c ****     float result;
 107:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****     // Use memcpy to copy the 4 bytes into a float (this preserves the binary representation)
 110:Core/Src/main.c ****     memcpy(&result, bytes, sizeof(float));
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****     return result;
 113:Core/Src/main.c **** }
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** int32_t bytesToInt32_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4)  {
 116:Core/Src/main.c ****     int32_t result;
 117:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****     // Use memcpy to copy the 4 bytes into a int32_t (this preserves the binary representation)
 120:Core/Src/main.c ****     memcpy(&result, bytes, sizeof(int32_t));
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****     return result;
 123:Core/Src/main.c **** }
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** void receivedFromSimulink(uint8_t* bigBuffer){
 126:Core/Src/main.c ****     tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuf
 127:Core/Src/main.c ****     tof_odr = bytesToFloat_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 128:Core/Src/main.c ****     
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     accel1_fsr = bytesToInt32_main(bigBuffer[11 + 0] , bigBuffer[11 + 1] , bigBuffer[11 + 2] ,  big
 131:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 132:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 133:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 134:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 135:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 136:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 137:Core/Src/main.c ****     
 138:Core/Src/main.c **** }
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** void configureTimer(float desired_frequency) {
 141:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 142:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
 145:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
ARM GAS  C:\Temp\cckKiP1p.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
 148:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 149:Core/Src/main.c ****     if (prescaler > 65535) {
 150:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 151:Core/Src/main.c ****     }
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
 154:Core/Src/main.c ****     uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
 155:Core/Src/main.c ****     if (arr > 65535) {
 156:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 157:Core/Src/main.c ****     }
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****     // Update the timer registers
 160:Core/Src/main.c ****     TIM2->PSC = prescaler;   // Set the prescaler
 161:Core/Src/main.c ****     TIM2->ARR = arr;         // Set the auto-reload register
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 164:Core/Src/main.c ****     TIM2->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 165:Core/Src/main.c **** }
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** void configureOtherTimer(float desired_frequency) {
 168:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 169:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
 172:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
 175:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 176:Core/Src/main.c ****     if (prescaler > 65535) {
 177:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 178:Core/Src/main.c ****     }
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
 181:Core/Src/main.c ****     uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
 182:Core/Src/main.c ****     if (arr > 65535) {
 183:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 184:Core/Src/main.c ****     }
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****     // Update the timer registers
 187:Core/Src/main.c ****     TIM3->PSC = prescaler;   // Set the prescaler
 188:Core/Src/main.c ****     TIM3->ARR = arr;         // Set the auto-reload register
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 191:Core/Src/main.c ****     TIM3->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 192:Core/Src/main.c **** }
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** // Function to return the fastest (highest) ODR
 195:Core/Src/main.c **** float get_fastest_odr(float odr1, float odr2, float odr3, float odr4, float odr5) {
 196:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****     if (odr2 > fastest) {
 199:Core/Src/main.c ****         fastest = odr2;
 200:Core/Src/main.c ****     }
 201:Core/Src/main.c ****     if (odr3 > fastest) {
 202:Core/Src/main.c ****         fastest = odr3;
ARM GAS  C:\Temp\cckKiP1p.s 			page 5


 203:Core/Src/main.c ****     }
 204:Core/Src/main.c ****     if (odr4 > fastest) {
 205:Core/Src/main.c ****         fastest = odr4;
 206:Core/Src/main.c ****     }
 207:Core/Src/main.c ****     if (odr5 > fastest) {
 208:Core/Src/main.c ****         fastest = odr5;
 209:Core/Src/main.c ****     }
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****     return fastest;
 212:Core/Src/main.c **** }
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** void sendToSimulink(){
 215:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_left   .ZoneResult[0]) .Distance  [0])  , 4 , HA
 218:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Ambient   [0])  , 4 , HA
 219:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Signal    [0])  , 4 , HA
 220:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_centre .ZoneResult[0]) .Distance  [0])  , 4 , HA
 221:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Ambient   [0])  , 4 , HA
 222:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Signal    [0])  , 4 , HA
 223:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_right  .ZoneResult[0]) .Distance  [0])  , 4 , HA
 224:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Ambient   [0])  , 4 , HA
 225:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Signal    [0])  , 4 , HA
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &(accel1_axis.x)  ,4 , HAL_MAX_DELAY);
 228:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
 229:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
 230:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
 231:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
 232:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
 233:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 234:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
 235:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 236:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 237:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
 238:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
 239:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
 240:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &counter          ,4 , HAL_MAX_DELAY);
 241:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &fastestODR       ,4 , HAL_MAX_DELAY);
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 244:Core/Src/main.c **** }
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** void initialCalibration(){
 247:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 248:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 249:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 250:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 251:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 252:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 253:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 254:Core/Src/main.c ****         calibrated = 1;
 255:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 256:Core/Src/main.c ****         fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 257:Core/Src/main.c ****   }
 258:Core/Src/main.c **** }
 259:Core/Src/main.c **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 6


 260:Core/Src/main.c **** /* USER CODE END 0 */
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** /**
 263:Core/Src/main.c ****   * @brief  The application entry point.
 264:Core/Src/main.c ****   * @retval int
 265:Core/Src/main.c ****   */
 266:Core/Src/main.c **** int main(void)
 267:Core/Src/main.c **** {
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE END 1 */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 276:Core/Src/main.c ****   HAL_Init();
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 279:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 280:Core/Src/main.c ****   /* USER CODE END Init */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* Configure the system clock */
 283:Core/Src/main.c ****   SystemClock_Config();
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END SysInit */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* Initialize all configured peripherals */
 290:Core/Src/main.c ****   MX_GPIO_Init();
 291:Core/Src/main.c ****   MX_DMA_Init();
 292:Core/Src/main.c ****   MX_USART2_UART_Init();
 293:Core/Src/main.c ****   MX_TIM2_Init();
 294:Core/Src/main.c ****   MX_TIM3_Init();
 295:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 296:Core/Src/main.c ****   while (calibrated != 1){
 297:Core/Src/main.c ****     initialCalibration();
 298:Core/Src/main.c ****   }
 299:Core/Src/main.c ****   calibrate_VL53L1A1();
 300:Core/Src/main.c ****   initVL53L1A1();
 301:Core/Src/main.c ****   initIKS02A1();
 302:Core/Src/main.c ****   calibrate_IKS02A1();
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   configureOtherTimer(tof_odr);
 305:Core/Src/main.c ****   configureTimer(fastestODR);
 306:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 307:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 308:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /* USER CODE END 2 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* Infinite loop */
 314:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 315:Core/Src/main.c ****   while (1)
 316:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cckKiP1p.s 			page 7


 317:Core/Src/main.c ****     getIKS02A1(); 
 318:Core/Src/main.c ****     // (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 319:Core/Src/main.c ****     
 320:Core/Src/main.c ****     if (clearToGetL1 == 1){
 321:Core/Src/main.c ****       getVL53L1A1();
 322:Core/Src/main.c ****       clearToGetL1 = 0;
 323:Core/Src/main.c ****     }
 324:Core/Src/main.c ****     /* USER CODE END WHILE */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c ****   /* USER CODE END 3 */
 329:Core/Src/main.c **** }
 330:Core/Src/main.c **** 
 331:Core/Src/main.c **** /**
 332:Core/Src/main.c ****   * @brief System Clock Configuration
 333:Core/Src/main.c ****   * @retval None
 334:Core/Src/main.c ****   */
 335:Core/Src/main.c **** void SystemClock_Config(void)
 336:Core/Src/main.c **** {
 337:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 338:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 341:Core/Src/main.c ****   */
 342:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 343:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 346:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 347:Core/Src/main.c ****   */
 348:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 349:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 350:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 351:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 352:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 353:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 354:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 355:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 356:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 357:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 358:Core/Src/main.c ****   {
 359:Core/Src/main.c ****     Error_Handler();
 360:Core/Src/main.c ****   }
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 365:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 366:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 367:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 368:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 369:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 372:Core/Src/main.c ****   {
 373:Core/Src/main.c ****     Error_Handler();
ARM GAS  C:\Temp\cckKiP1p.s 			page 8


 374:Core/Src/main.c ****   }
 375:Core/Src/main.c **** }
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** /**
 378:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 379:Core/Src/main.c ****   * @param None
 380:Core/Src/main.c ****   * @retval None
 381:Core/Src/main.c ****   */
 382:Core/Src/main.c **** static void MX_TIM2_Init(void)
 383:Core/Src/main.c **** {
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 390:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 395:Core/Src/main.c ****   htim2.Instance = TIM2;
 396:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 397:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 398:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 399:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 400:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 401:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     Error_Handler();
 404:Core/Src/main.c ****   }
 405:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 406:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 411:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 412:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 413:Core/Src/main.c ****   {
 414:Core/Src/main.c ****     Error_Handler();
 415:Core/Src/main.c ****   }
 416:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** }
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** /**
 423:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 424:Core/Src/main.c ****   * @param None
 425:Core/Src/main.c ****   * @retval None
 426:Core/Src/main.c ****   */
 427:Core/Src/main.c **** static void MX_TIM3_Init(void)
 428:Core/Src/main.c **** {
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
ARM GAS  C:\Temp\cckKiP1p.s 			page 9


 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 435:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 438:Core/Src/main.c **** 
 439:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 440:Core/Src/main.c ****   htim3.Instance = TIM3;
 441:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 442:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 443:Core/Src/main.c ****   htim3.Init.Period = 65535;
 444:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 445:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 446:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 447:Core/Src/main.c ****   {
 448:Core/Src/main.c ****     Error_Handler();
 449:Core/Src/main.c ****   }
 450:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 451:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 452:Core/Src/main.c ****   {
 453:Core/Src/main.c ****     Error_Handler();
 454:Core/Src/main.c ****   }
 455:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 456:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 457:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 458:Core/Src/main.c ****   {
 459:Core/Src/main.c ****     Error_Handler();
 460:Core/Src/main.c ****   }
 461:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** }
 466:Core/Src/main.c **** 
 467:Core/Src/main.c **** /**
 468:Core/Src/main.c ****   * @brief USART2 Initialization Function
 469:Core/Src/main.c ****   * @param None
 470:Core/Src/main.c ****   * @retval None
 471:Core/Src/main.c ****   */
 472:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 473:Core/Src/main.c **** {
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 482:Core/Src/main.c ****   huart2.Instance = USART2;
 483:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 484:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 485:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 486:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 487:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
ARM GAS  C:\Temp\cckKiP1p.s 			page 10


 488:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 489:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 490:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 491:Core/Src/main.c ****   {
 492:Core/Src/main.c ****     Error_Handler();
 493:Core/Src/main.c ****   }
 494:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 497:Core/Src/main.c **** 
 498:Core/Src/main.c **** }
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** /**
 501:Core/Src/main.c ****   * Enable DMA controller clock
 502:Core/Src/main.c ****   */
 503:Core/Src/main.c **** static void MX_DMA_Init(void)
 504:Core/Src/main.c **** {
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   /* DMA controller clock enable */
 507:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****   /* DMA interrupt init */
 510:Core/Src/main.c ****   /* DMA1_Stream0_IRQn interrupt configuration */
 511:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 512:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 513:Core/Src/main.c ****   /* DMA1_Stream1_IRQn interrupt configuration */
 514:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 515:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 516:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 517:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 518:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 519:Core/Src/main.c **** 
 520:Core/Src/main.c **** }
 521:Core/Src/main.c **** 
 522:Core/Src/main.c **** /**
 523:Core/Src/main.c ****   * @brief GPIO Initialization Function
 524:Core/Src/main.c ****   * @param None
 525:Core/Src/main.c ****   * @retval None
 526:Core/Src/main.c ****   */
 527:Core/Src/main.c **** static void MX_GPIO_Init(void)
 528:Core/Src/main.c **** {
  28              		.loc 1 528 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 529:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 529 3 view .LVU1
  41              		.loc 1 529 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
ARM GAS  C:\Temp\cckKiP1p.s 			page 11


  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 530:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 531:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 534:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 534 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 534 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 534 3 view .LVU5
  53 0012 2E4B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 534 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 534 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 534 3 view .LVU8
 535:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 535 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 535 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 535 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 535 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 535 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 535 3 view .LVU14
 536:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 536 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 536 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 536 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 536 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
ARM GAS  C:\Temp\cckKiP1p.s 			page 12


  93              		.loc 1 536 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 536 3 view .LVU20
 537:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 537 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 537 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 537 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 537 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 537 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 537 3 view .LVU26
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 540:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 540 3 view .LVU27
 114 0062 1B4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 543:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 543 3 view .LVU28
 121              		.loc 1 543 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 544:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 544 3 is_stmt 1 view .LVU30
 125              		.loc 1 544 24 is_stmt 0 view .LVU31
 126 0074 4FF40416 		mov	r6, #2162688
 127 0078 0696     		str	r6, [sp, #24]
 545:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 545 3 is_stmt 1 view .LVU32
 129              		.loc 1 545 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 546:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 546 3 is_stmt 1 view .LVU34
 132 007c 05A9     		add	r1, sp, #20
 133 007e 1548     		ldr	r0, .L3+8
 134 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL1:
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   /*Configure GPIO pin : L1_INT_Pin */
 549:Core/Src/main.c ****   GPIO_InitStruct.Pin = L1_INT_Pin;
 136              		.loc 1 549 3 view .LVU35
ARM GAS  C:\Temp\cckKiP1p.s 			page 13


 137              		.loc 1 549 23 is_stmt 0 view .LVU36
 138 0084 1023     		movs	r3, #16
 139 0086 0593     		str	r3, [sp, #20]
 550:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 140              		.loc 1 550 3 is_stmt 1 view .LVU37
 141              		.loc 1 550 24 is_stmt 0 view .LVU38
 142 0088 0696     		str	r6, [sp, #24]
 551:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 143              		.loc 1 551 3 is_stmt 1 view .LVU39
 144              		.loc 1 551 24 is_stmt 0 view .LVU40
 145 008a 0126     		movs	r6, #1
 146 008c 0796     		str	r6, [sp, #28]
 552:Core/Src/main.c ****   HAL_GPIO_Init(L1_INT_GPIO_Port, &GPIO_InitStruct);
 147              		.loc 1 552 3 is_stmt 1 view .LVU41
 148 008e 05A9     		add	r1, sp, #20
 149 0090 2846     		mov	r0, r5
 150 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL2:
 553:Core/Src/main.c **** 
 554:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 555:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 152              		.loc 1 555 3 view .LVU42
 153              		.loc 1 555 23 is_stmt 0 view .LVU43
 154 0096 2023     		movs	r3, #32
 155 0098 0593     		str	r3, [sp, #20]
 556:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 556 3 is_stmt 1 view .LVU44
 157              		.loc 1 556 24 is_stmt 0 view .LVU45
 158 009a 0696     		str	r6, [sp, #24]
 557:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 159              		.loc 1 557 3 is_stmt 1 view .LVU46
 160              		.loc 1 557 24 is_stmt 0 view .LVU47
 161 009c 0794     		str	r4, [sp, #28]
 558:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 162              		.loc 1 558 3 is_stmt 1 view .LVU48
 163              		.loc 1 558 25 is_stmt 0 view .LVU49
 164 009e 0894     		str	r4, [sp, #32]
 559:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 165              		.loc 1 559 3 is_stmt 1 view .LVU50
 166 00a0 05A9     		add	r1, sp, #20
 167 00a2 2846     		mov	r0, r5
 168 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /* EXTI interrupt init*/
 562:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 170              		.loc 1 562 3 view .LVU51
 171 00a8 2246     		mov	r2, r4
 172 00aa 2146     		mov	r1, r4
 173 00ac 0A20     		movs	r0, #10
 174 00ae FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL4:
 563:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 176              		.loc 1 563 3 view .LVU52
 177 00b2 0A20     		movs	r0, #10
 178 00b4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL5:
ARM GAS  C:\Temp\cckKiP1p.s 			page 14


 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 180              		.loc 1 565 3 view .LVU53
 181 00b8 2246     		mov	r2, r4
 182 00ba 2146     		mov	r1, r4
 183 00bc 2820     		movs	r0, #40
 184 00be FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL6:
 566:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 186              		.loc 1 566 3 view .LVU54
 187 00c2 2820     		movs	r0, #40
 188 00c4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL7:
 567:Core/Src/main.c **** 
 568:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 569:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 570:Core/Src/main.c **** }
 190              		.loc 1 570 1 is_stmt 0 view .LVU55
 191 00c8 0AB0     		add	sp, sp, #40
 192              		.cfi_def_cfa_offset 16
 193              		@ sp needed
 194 00ca 70BD     		pop	{r4, r5, r6, pc}
 195              	.L4:
 196              		.align	2
 197              	.L3:
 198 00cc 00380240 		.word	1073887232
 199 00d0 00000240 		.word	1073872896
 200 00d4 00080240 		.word	1073874944
 201              		.cfi_endproc
 202              	.LFE151:
 204              		.section	.text.MX_DMA_Init,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	MX_DMA_Init:
 211              	.LFB150:
 504:Core/Src/main.c **** 
 212              		.loc 1 504 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 220 0002 82B0     		sub	sp, sp, #8
 221              		.cfi_def_cfa_offset 16
 507:Core/Src/main.c **** 
 222              		.loc 1 507 3 view .LVU57
 223              	.LBB8:
 507:Core/Src/main.c **** 
 224              		.loc 1 507 3 view .LVU58
 225 0004 0024     		movs	r4, #0
 226 0006 0194     		str	r4, [sp, #4]
 507:Core/Src/main.c **** 
 227              		.loc 1 507 3 view .LVU59
ARM GAS  C:\Temp\cckKiP1p.s 			page 15


 228 0008 114B     		ldr	r3, .L7
 229 000a 1A6B     		ldr	r2, [r3, #48]
 230 000c 42F40012 		orr	r2, r2, #2097152
 231 0010 1A63     		str	r2, [r3, #48]
 507:Core/Src/main.c **** 
 232              		.loc 1 507 3 view .LVU60
 233 0012 1B6B     		ldr	r3, [r3, #48]
 234 0014 03F40013 		and	r3, r3, #2097152
 235 0018 0193     		str	r3, [sp, #4]
 507:Core/Src/main.c **** 
 236              		.loc 1 507 3 view .LVU61
 237 001a 019B     		ldr	r3, [sp, #4]
 238              	.LBE8:
 507:Core/Src/main.c **** 
 239              		.loc 1 507 3 view .LVU62
 511:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 240              		.loc 1 511 3 view .LVU63
 241 001c 2246     		mov	r2, r4
 242 001e 2146     		mov	r1, r4
 243 0020 0B20     		movs	r0, #11
 244 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL8:
 512:Core/Src/main.c ****   /* DMA1_Stream1_IRQn interrupt configuration */
 246              		.loc 1 512 3 view .LVU64
 247 0026 0B20     		movs	r0, #11
 248 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL9:
 514:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 250              		.loc 1 514 3 view .LVU65
 251 002c 2246     		mov	r2, r4
 252 002e 2146     		mov	r1, r4
 253 0030 0C20     		movs	r0, #12
 254 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 255              	.LVL10:
 515:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 256              		.loc 1 515 3 view .LVU66
 257 0036 0C20     		movs	r0, #12
 258 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 259              	.LVL11:
 517:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 260              		.loc 1 517 3 view .LVU67
 261 003c 2246     		mov	r2, r4
 262 003e 2146     		mov	r1, r4
 263 0040 1120     		movs	r0, #17
 264 0042 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 265              	.LVL12:
 518:Core/Src/main.c **** 
 266              		.loc 1 518 3 view .LVU68
 267 0046 1120     		movs	r0, #17
 268 0048 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 269              	.LVL13:
 520:Core/Src/main.c **** 
 270              		.loc 1 520 1 is_stmt 0 view .LVU69
 271 004c 02B0     		add	sp, sp, #8
 272              		.cfi_def_cfa_offset 8
 273              		@ sp needed
 274 004e 10BD     		pop	{r4, pc}
ARM GAS  C:\Temp\cckKiP1p.s 			page 16


 275              	.L8:
 276              		.align	2
 277              	.L7:
 278 0050 00380240 		.word	1073887232
 279              		.cfi_endproc
 280              	.LFE150:
 282              		.section	.text.bytesToFloat_main,"ax",%progbits
 283              		.align	1
 284              		.global	bytesToFloat_main
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	bytesToFloat_main:
 290              	.LVL14:
 291              	.LFB137:
 105:Core/Src/main.c ****     float result;
 292              		.loc 1 105 90 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 8
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 105:Core/Src/main.c ****     float result;
 297              		.loc 1 105 90 is_stmt 0 view .LVU71
 298 0000 82B0     		sub	sp, sp, #8
 299              		.cfi_def_cfa_offset 8
 106:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 300              		.loc 1 106 5 is_stmt 1 view .LVU72
 107:Core/Src/main.c **** 
 301              		.loc 1 107 5 view .LVU73
 107:Core/Src/main.c **** 
 302              		.loc 1 107 13 is_stmt 0 view .LVU74
 303 0002 8DF80400 		strb	r0, [sp, #4]
 304 0006 8DF80510 		strb	r1, [sp, #5]
 305 000a 8DF80620 		strb	r2, [sp, #6]
 306 000e 8DF80730 		strb	r3, [sp, #7]
 110:Core/Src/main.c **** 
 307              		.loc 1 110 5 is_stmt 1 view .LVU75
 112:Core/Src/main.c **** }
 308              		.loc 1 112 5 view .LVU76
 113:Core/Src/main.c **** 
 309              		.loc 1 113 1 is_stmt 0 view .LVU77
 310 0012 9DED010A 		vldr.32	s0, [sp, #4]
 311 0016 02B0     		add	sp, sp, #8
 312              		.cfi_def_cfa_offset 0
 313              		@ sp needed
 314 0018 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE137:
 318              		.section	.text.bytesToInt32_main,"ax",%progbits
 319              		.align	1
 320              		.global	bytesToInt32_main
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	bytesToInt32_main:
 326              	.LVL15:
 327              	.LFB138:
ARM GAS  C:\Temp\cckKiP1p.s 			page 17


 115:Core/Src/main.c ****     int32_t result;
 328              		.loc 1 115 91 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 115:Core/Src/main.c ****     int32_t result;
 333              		.loc 1 115 91 is_stmt 0 view .LVU79
 334 0000 82B0     		sub	sp, sp, #8
 335              		.cfi_def_cfa_offset 8
 116:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 336              		.loc 1 116 5 is_stmt 1 view .LVU80
 117:Core/Src/main.c **** 
 337              		.loc 1 117 5 view .LVU81
 117:Core/Src/main.c **** 
 338              		.loc 1 117 13 is_stmt 0 view .LVU82
 339 0002 8DF80400 		strb	r0, [sp, #4]
 340 0006 8DF80510 		strb	r1, [sp, #5]
 341 000a 8DF80620 		strb	r2, [sp, #6]
 342 000e 8DF80730 		strb	r3, [sp, #7]
 120:Core/Src/main.c **** 
 343              		.loc 1 120 5 is_stmt 1 view .LVU83
 344              	.LVL16:
 122:Core/Src/main.c **** }
 345              		.loc 1 122 5 view .LVU84
 123:Core/Src/main.c **** 
 346              		.loc 1 123 1 is_stmt 0 view .LVU85
 347 0012 0198     		ldr	r0, [sp, #4]
 348              	.LVL17:
 123:Core/Src/main.c **** 
 349              		.loc 1 123 1 view .LVU86
 350 0014 02B0     		add	sp, sp, #8
 351              		.cfi_def_cfa_offset 0
 352              	.LVL18:
 123:Core/Src/main.c **** 
 353              		.loc 1 123 1 view .LVU87
 354              		@ sp needed
 355 0016 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE138:
 359              		.section	.text.receivedFromSimulink,"ax",%progbits
 360              		.align	1
 361              		.global	receivedFromSimulink
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 366              	receivedFromSimulink:
 367              	.LVL19:
 368              	.LFB139:
 125:Core/Src/main.c ****     tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuf
 369              		.loc 1 125 46 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 125:Core/Src/main.c ****     tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuf
 373              		.loc 1 125 46 is_stmt 0 view .LVU89
 374 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Temp\cckKiP1p.s 			page 18


 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 4, -8
 377              		.cfi_offset 14, -4
 378 0002 0446     		mov	r4, r0
 126:Core/Src/main.c ****     tof_odr = bytesToFloat_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 379              		.loc 1 126 5 is_stmt 1 view .LVU90
 126:Core/Src/main.c ****     tof_odr = bytesToFloat_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 380              		.loc 1 126 15 is_stmt 0 view .LVU91
 381 0004 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 382 0006 4279     		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 383 0008 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 384 000a C078     		ldrb	r0, [r0, #3]	@ zero_extendqisi2
 385              	.LVL20:
 126:Core/Src/main.c ****     tof_odr = bytesToFloat_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 386              		.loc 1 126 15 view .LVU92
 387 000c FFF7FEFF 		bl	bytesToInt32_main
 388              	.LVL21:
 126:Core/Src/main.c ****     tof_odr = bytesToFloat_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 389              		.loc 1 126 13 view .LVU93
 390 0010 274B     		ldr	r3, .L15
 391 0012 1860     		str	r0, [r3]
 127:Core/Src/main.c ****     
 392              		.loc 1 127 5 is_stmt 1 view .LVU94
 127:Core/Src/main.c ****     
 393              		.loc 1 127 15 is_stmt 0 view .LVU95
 394 0014 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 395 0016 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 396 0018 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 397 001a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 398 001c FFF7FEFF 		bl	bytesToFloat_main
 399              	.LVL22:
 127:Core/Src/main.c ****     
 400              		.loc 1 127 13 view .LVU96
 401 0020 244B     		ldr	r3, .L15+4
 402 0022 83ED000A 		vstr.32	s0, [r3]
 130:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 403              		.loc 1 130 5 is_stmt 1 view .LVU97
 130:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 404              		.loc 1 130 18 is_stmt 0 view .LVU98
 405 0026 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 406 0028 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 407 002a 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
 408 002c E07A     		ldrb	r0, [r4, #11]	@ zero_extendqisi2
 409 002e FFF7FEFF 		bl	bytesToInt32_main
 410              	.LVL23:
 130:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 411              		.loc 1 130 16 view .LVU99
 412 0032 214B     		ldr	r3, .L15+8
 413 0034 1860     		str	r0, [r3]
 131:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 414              		.loc 1 131 5 is_stmt 1 view .LVU100
 131:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 415              		.loc 1 131 18 is_stmt 0 view .LVU101
 416 0036 A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 417 0038 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 418 003a 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 419 003c E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2
ARM GAS  C:\Temp\cckKiP1p.s 			page 19


 420 003e FFF7FEFF 		bl	bytesToFloat_main
 421              	.LVL24:
 131:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 422              		.loc 1 131 16 view .LVU102
 423 0042 1E4B     		ldr	r3, .L15+12
 424 0044 83ED000A 		vstr.32	s0, [r3]
 132:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 425              		.loc 1 132 5 is_stmt 1 view .LVU103
 132:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 426              		.loc 1 132 18 is_stmt 0 view .LVU104
 427 0048 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 428 004a 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 429 004c 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
 430 004e E07C     		ldrb	r0, [r4, #19]	@ zero_extendqisi2
 431 0050 FFF7FEFF 		bl	bytesToInt32_main
 432              	.LVL25:
 132:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 433              		.loc 1 132 14 view .LVU105
 434 0054 1A4B     		ldr	r3, .L15+16
 435 0056 1860     		str	r0, [r3]
 133:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 436              		.loc 1 133 5 is_stmt 1 view .LVU106
 133:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 437              		.loc 1 133 18 is_stmt 0 view .LVU107
 438 0058 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 439 005a 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2
 440 005c 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 441 005e E07D     		ldrb	r0, [r4, #23]	@ zero_extendqisi2
 442 0060 FFF7FEFF 		bl	bytesToFloat_main
 443              	.LVL26:
 133:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 444              		.loc 1 133 14 view .LVU108
 445 0064 174B     		ldr	r3, .L15+20
 446 0066 83ED000A 		vstr.32	s0, [r3]
 134:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 447              		.loc 1 134 5 is_stmt 1 view .LVU109
 134:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 448              		.loc 1 134 18 is_stmt 0 view .LVU110
 449 006a A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 450 006c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 451 006e 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 452 0070 E07E     		ldrb	r0, [r4, #27]	@ zero_extendqisi2
 453 0072 FFF7FEFF 		bl	bytesToInt32_main
 454              	.LVL27:
 134:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 455              		.loc 1 134 16 view .LVU111
 456 0076 144B     		ldr	r3, .L15+24
 457 0078 1860     		str	r0, [r3]
 135:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 458              		.loc 1 135 5 is_stmt 1 view .LVU112
 135:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 459              		.loc 1 135 18 is_stmt 0 view .LVU113
 460 007a 94F82230 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 461 007e 94F82120 		ldrb	r2, [r4, #33]	@ zero_extendqisi2
 462 0082 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 463 0086 E07F     		ldrb	r0, [r4, #31]	@ zero_extendqisi2
 464 0088 FFF7FEFF 		bl	bytesToFloat_main
ARM GAS  C:\Temp\cckKiP1p.s 			page 20


 465              	.LVL28:
 135:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 466              		.loc 1 135 16 view .LVU114
 467 008c 0F4B     		ldr	r3, .L15+28
 468 008e 83ED000A 		vstr.32	s0, [r3]
 136:Core/Src/main.c ****     
 469              		.loc 1 136 5 is_stmt 1 view .LVU115
 136:Core/Src/main.c ****     
 470              		.loc 1 136 18 is_stmt 0 view .LVU116
 471 0092 94F82630 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
 472 0096 94F82520 		ldrb	r2, [r4, #37]	@ zero_extendqisi2
 473 009a 94F82410 		ldrb	r1, [r4, #36]	@ zero_extendqisi2
 474 009e 94F82300 		ldrb	r0, [r4, #35]	@ zero_extendqisi2
 475 00a2 FFF7FEFF 		bl	bytesToFloat_main
 476              	.LVL29:
 136:Core/Src/main.c ****     
 477              		.loc 1 136 13 view .LVU117
 478 00a6 0A4B     		ldr	r3, .L15+32
 479 00a8 83ED000A 		vstr.32	s0, [r3]
 138:Core/Src/main.c **** 
 480              		.loc 1 138 1 view .LVU118
 481 00ac 10BD     		pop	{r4, pc}
 482              	.LVL30:
 483              	.L16:
 138:Core/Src/main.c **** 
 484              		.loc 1 138 1 view .LVU119
 485 00ae 00BF     		.align	2
 486              	.L15:
 487 00b0 00000000 		.word	tof_fsr
 488 00b4 00000000 		.word	tof_odr
 489 00b8 00000000 		.word	accel1_fsr
 490 00bc 00000000 		.word	accel1_odr
 491 00c0 00000000 		.word	gyro_fsr
 492 00c4 00000000 		.word	gyro_odr
 493 00c8 00000000 		.word	accel2_fsr
 494 00cc 00000000 		.word	accel2_odr
 495 00d0 00000000 		.word	mag_odr
 496              		.cfi_endproc
 497              	.LFE139:
 499              		.section	.text.configureTimer,"ax",%progbits
 500              		.align	1
 501              		.global	configureTimer
 502              		.syntax unified
 503              		.thumb
 504              		.thumb_func
 506              	configureTimer:
 507              	.LVL31:
 508              	.LFB140:
 140:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 509              		.loc 1 140 46 is_stmt 1 view -0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 142:Core/Src/main.c **** 
 514              		.loc 1 142 5 view .LVU121
 142:Core/Src/main.c **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 21


 515              		.loc 1 142 11 is_stmt 0 view .LVU122
 516 0000 154B     		ldr	r3, .L22
 517 0002 D3ED007A 		vldr.32	s15, [r3]	@ int
 518 0006 F8EE677A 		vcvt.f32.u32	s15, s15
 519              	.LVL32:
 145:Core/Src/main.c **** 
 520              		.loc 1 145 5 is_stmt 1 view .LVU123
 145:Core/Src/main.c **** 
 521              		.loc 1 145 11 is_stmt 0 view .LVU124
 522 000a C7EE806A 		vdiv.f32	s13, s15, s0
 523              	.LVL33:
 148:Core/Src/main.c ****     if (prescaler > 65535) {
 524              		.loc 1 148 5 is_stmt 1 view .LVU125
 148:Core/Src/main.c ****     if (prescaler > 65535) {
 525              		.loc 1 148 50 is_stmt 0 view .LVU126
 526 000e DFED137A 		vldr.32	s15, .L22+4
 527              	.LVL34:
 148:Core/Src/main.c ****     if (prescaler > 65535) {
 528              		.loc 1 148 50 view .LVU127
 529 0012 66EEA77A 		vmul.f32	s15, s13, s15
 148:Core/Src/main.c ****     if (prescaler > 65535) {
 530              		.loc 1 148 14 view .LVU128
 531 0016 FCEEE77A 		vcvt.u32.f32	s15, s15
 532 001a 17EE903A 		vmov	r3, s15	@ int
 533              	.LVL35:
 149:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 534              		.loc 1 149 5 is_stmt 1 view .LVU129
 149:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 535              		.loc 1 149 8 is_stmt 0 view .LVU130
 536 001e B3F5803F 		cmp	r3, #65536
 537 0022 01D3     		bcc	.L18
 150:Core/Src/main.c ****     }
 538              		.loc 1 150 19 view .LVU131
 539 0024 4FF6FF73 		movw	r3, #65535
 540              	.LVL36:
 541              	.L18:
 154:Core/Src/main.c ****     if (arr > 65535) {
 542              		.loc 1 154 5 is_stmt 1 view .LVU132
 154:Core/Src/main.c ****     if (arr > 65535) {
 543              		.loc 1 154 57 is_stmt 0 view .LVU133
 544 0028 5A1C     		adds	r2, r3, #1
 545 002a 07EE102A 		vmov	s14, r2	@ int
 154:Core/Src/main.c ****     if (arr > 65535) {
 546              		.loc 1 154 44 view .LVU134
 547 002e B8EE477A 		vcvt.f32.u32	s14, s14
 548 0032 C6EE877A 		vdiv.f32	s15, s13, s14
 154:Core/Src/main.c ****     if (arr > 65535) {
 549              		.loc 1 154 14 view .LVU135
 550 0036 FCEEE77A 		vcvt.u32.f32	s15, s15
 551 003a 17EE902A 		vmov	r2, s15	@ int
 552              	.LVL37:
 155:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 553              		.loc 1 155 5 is_stmt 1 view .LVU136
 155:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 554              		.loc 1 155 8 is_stmt 0 view .LVU137
 555 003e B2F5803F 		cmp	r2, #65536
 556 0042 01D3     		bcc	.L19
ARM GAS  C:\Temp\cckKiP1p.s 			page 22


 156:Core/Src/main.c ****     }
 557              		.loc 1 156 13 view .LVU138
 558 0044 4FF6FF72 		movw	r2, #65535
 559              	.LVL38:
 560              	.L19:
 160:Core/Src/main.c ****     TIM2->ARR = arr;         // Set the auto-reload register
 561              		.loc 1 160 5 is_stmt 1 view .LVU139
 160:Core/Src/main.c ****     TIM2->ARR = arr;         // Set the auto-reload register
 562              		.loc 1 160 15 is_stmt 0 view .LVU140
 563 0048 4FF08041 		mov	r1, #1073741824
 564 004c 8B62     		str	r3, [r1, #40]
 565              	.LVL39:
 161:Core/Src/main.c **** 
 566              		.loc 1 161 5 is_stmt 1 view .LVU141
 161:Core/Src/main.c **** 
 567              		.loc 1 161 15 is_stmt 0 view .LVU142
 568 004e CA62     		str	r2, [r1, #44]
 164:Core/Src/main.c **** }
 569              		.loc 1 164 5 is_stmt 1 view .LVU143
 164:Core/Src/main.c **** }
 570              		.loc 1 164 15 is_stmt 0 view .LVU144
 571 0050 0123     		movs	r3, #1
 572              	.LVL40:
 164:Core/Src/main.c **** }
 573              		.loc 1 164 15 view .LVU145
 574 0052 4B61     		str	r3, [r1, #20]
 165:Core/Src/main.c **** 
 575              		.loc 1 165 1 view .LVU146
 576 0054 7047     		bx	lr
 577              	.L23:
 578 0056 00BF     		.align	2
 579              	.L22:
 580 0058 00000000 		.word	SystemCoreClock
 581 005c 00008037 		.word	931135488
 582              		.cfi_endproc
 583              	.LFE140:
 585              		.section	.text.configureOtherTimer,"ax",%progbits
 586              		.align	1
 587              		.global	configureOtherTimer
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 592              	configureOtherTimer:
 593              	.LVL41:
 594              	.LFB141:
 167:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 595              		.loc 1 167 51 is_stmt 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 169:Core/Src/main.c **** 
 600              		.loc 1 169 5 view .LVU148
 169:Core/Src/main.c **** 
 601              		.loc 1 169 11 is_stmt 0 view .LVU149
 602 0000 144B     		ldr	r3, .L29
 603 0002 D3ED007A 		vldr.32	s15, [r3]	@ int
ARM GAS  C:\Temp\cckKiP1p.s 			page 23


 604 0006 F8EE677A 		vcvt.f32.u32	s15, s15
 605              	.LVL42:
 172:Core/Src/main.c **** 
 606              		.loc 1 172 5 is_stmt 1 view .LVU150
 172:Core/Src/main.c **** 
 607              		.loc 1 172 11 is_stmt 0 view .LVU151
 608 000a C7EE806A 		vdiv.f32	s13, s15, s0
 609              	.LVL43:
 175:Core/Src/main.c ****     if (prescaler > 65535) {
 610              		.loc 1 175 5 is_stmt 1 view .LVU152
 175:Core/Src/main.c ****     if (prescaler > 65535) {
 611              		.loc 1 175 50 is_stmt 0 view .LVU153
 612 000e DFED127A 		vldr.32	s15, .L29+4
 613              	.LVL44:
 175:Core/Src/main.c ****     if (prescaler > 65535) {
 614              		.loc 1 175 50 view .LVU154
 615 0012 66EEA77A 		vmul.f32	s15, s13, s15
 175:Core/Src/main.c ****     if (prescaler > 65535) {
 616              		.loc 1 175 14 view .LVU155
 617 0016 FCEEE77A 		vcvt.u32.f32	s15, s15
 618 001a 17EE903A 		vmov	r3, s15	@ int
 619              	.LVL45:
 176:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 620              		.loc 1 176 5 is_stmt 1 view .LVU156
 176:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 621              		.loc 1 176 8 is_stmt 0 view .LVU157
 622 001e B3F5803F 		cmp	r3, #65536
 623 0022 01D3     		bcc	.L25
 177:Core/Src/main.c ****     }
 624              		.loc 1 177 19 view .LVU158
 625 0024 4FF6FF73 		movw	r3, #65535
 626              	.LVL46:
 627              	.L25:
 181:Core/Src/main.c ****     if (arr > 65535) {
 628              		.loc 1 181 5 is_stmt 1 view .LVU159
 181:Core/Src/main.c ****     if (arr > 65535) {
 629              		.loc 1 181 57 is_stmt 0 view .LVU160
 630 0028 5A1C     		adds	r2, r3, #1
 631 002a 07EE102A 		vmov	s14, r2	@ int
 181:Core/Src/main.c ****     if (arr > 65535) {
 632              		.loc 1 181 44 view .LVU161
 633 002e B8EE477A 		vcvt.f32.u32	s14, s14
 634 0032 C6EE877A 		vdiv.f32	s15, s13, s14
 181:Core/Src/main.c ****     if (arr > 65535) {
 635              		.loc 1 181 14 view .LVU162
 636 0036 FCEEE77A 		vcvt.u32.f32	s15, s15
 637 003a 17EE902A 		vmov	r2, s15	@ int
 638              	.LVL47:
 182:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 639              		.loc 1 182 5 is_stmt 1 view .LVU163
 182:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 640              		.loc 1 182 8 is_stmt 0 view .LVU164
 641 003e B2F5803F 		cmp	r2, #65536
 642 0042 01D3     		bcc	.L26
 183:Core/Src/main.c ****     }
 643              		.loc 1 183 13 view .LVU165
 644 0044 4FF6FF72 		movw	r2, #65535
ARM GAS  C:\Temp\cckKiP1p.s 			page 24


 645              	.LVL48:
 646              	.L26:
 187:Core/Src/main.c ****     TIM3->ARR = arr;         // Set the auto-reload register
 647              		.loc 1 187 5 is_stmt 1 view .LVU166
 187:Core/Src/main.c ****     TIM3->ARR = arr;         // Set the auto-reload register
 648              		.loc 1 187 15 is_stmt 0 view .LVU167
 649 0048 0449     		ldr	r1, .L29+8
 650 004a 8B62     		str	r3, [r1, #40]
 651              	.LVL49:
 188:Core/Src/main.c **** 
 652              		.loc 1 188 5 is_stmt 1 view .LVU168
 188:Core/Src/main.c **** 
 653              		.loc 1 188 15 is_stmt 0 view .LVU169
 654 004c CA62     		str	r2, [r1, #44]
 191:Core/Src/main.c **** }
 655              		.loc 1 191 5 is_stmt 1 view .LVU170
 191:Core/Src/main.c **** }
 656              		.loc 1 191 15 is_stmt 0 view .LVU171
 657 004e 0123     		movs	r3, #1
 658              	.LVL50:
 191:Core/Src/main.c **** }
 659              		.loc 1 191 15 view .LVU172
 660 0050 4B61     		str	r3, [r1, #20]
 192:Core/Src/main.c **** 
 661              		.loc 1 192 1 view .LVU173
 662 0052 7047     		bx	lr
 663              	.L30:
 664              		.align	2
 665              	.L29:
 666 0054 00000000 		.word	SystemCoreClock
 667 0058 00008037 		.word	931135488
 668 005c 00040040 		.word	1073742848
 669              		.cfi_endproc
 670              	.LFE141:
 672              		.section	.text.get_fastest_odr,"ax",%progbits
 673              		.align	1
 674              		.global	get_fastest_odr
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 679              	get_fastest_odr:
 680              	.LVL51:
 681              	.LFB142:
 195:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 682              		.loc 1 195 83 is_stmt 1 view -0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 195:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 687              		.loc 1 195 83 is_stmt 0 view .LVU175
 688 0000 F0EE407A 		vmov.f32	s15, s0
 689 0004 B0EE420A 		vmov.f32	s0, s4
 690              	.LVL52:
 196:Core/Src/main.c **** 
 691              		.loc 1 196 5 is_stmt 1 view .LVU176
 198:Core/Src/main.c ****         fastest = odr2;
ARM GAS  C:\Temp\cckKiP1p.s 			page 25


 692              		.loc 1 198 5 view .LVU177
 198:Core/Src/main.c ****         fastest = odr2;
 693              		.loc 1 198 8 is_stmt 0 view .LVU178
 694 0008 F4EEE07A 		vcmpe.f32	s15, s1
 695 000c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 696 0010 01D4     		bmi	.L32
 196:Core/Src/main.c **** 
 697              		.loc 1 196 11 view .LVU179
 698 0012 F0EE670A 		vmov.f32	s1, s15
 699              	.LVL53:
 700              	.L32:
 201:Core/Src/main.c ****         fastest = odr3;
 701              		.loc 1 201 5 is_stmt 1 view .LVU180
 201:Core/Src/main.c ****         fastest = odr3;
 702              		.loc 1 201 8 is_stmt 0 view .LVU181
 703 0016 F4EEC10A 		vcmpe.f32	s1, s2
 704 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 705 001e 01D4     		bmi	.L33
 706 0020 B0EE601A 		vmov.f32	s2, s1
 707              	.LVL54:
 708              	.L33:
 204:Core/Src/main.c ****         fastest = odr4;
 709              		.loc 1 204 5 is_stmt 1 view .LVU182
 204:Core/Src/main.c ****         fastest = odr4;
 710              		.loc 1 204 8 is_stmt 0 view .LVU183
 711 0024 B4EEE11A 		vcmpe.f32	s2, s3
 712 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 713 002c 01D4     		bmi	.L34
 714 002e F0EE411A 		vmov.f32	s3, s2
 715              	.LVL55:
 716              	.L34:
 207:Core/Src/main.c ****         fastest = odr5;
 717              		.loc 1 207 5 is_stmt 1 view .LVU184
 207:Core/Src/main.c ****         fastest = odr5;
 718              		.loc 1 207 8 is_stmt 0 view .LVU185
 719 0032 F4EEC01A 		vcmpe.f32	s3, s0
 720 0036 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 721 003a 01D4     		bmi	.L35
 722 003c B0EE610A 		vmov.f32	s0, s3
 723              	.L35:
 724              	.LVL56:
 211:Core/Src/main.c **** }
 725              		.loc 1 211 5 is_stmt 1 view .LVU186
 212:Core/Src/main.c **** 
 726              		.loc 1 212 1 is_stmt 0 view .LVU187
 727 0040 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE142:
 731              		.section	.text.sendToSimulink,"ax",%progbits
 732              		.align	1
 733              		.global	sendToSimulink
 734              		.syntax unified
 735              		.thumb
 736              		.thumb_func
 738              	sendToSimulink:
 739              	.LFB143:
 214:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
ARM GAS  C:\Temp\cckKiP1p.s 			page 26


 740              		.loc 1 214 22 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744 0000 38B5     		push	{r3, r4, r5, lr}
 745              		.cfi_def_cfa_offset 16
 746              		.cfi_offset 3, -16
 747              		.cfi_offset 4, -12
 748              		.cfi_offset 5, -8
 749              		.cfi_offset 14, -4
 215:Core/Src/main.c **** 
 750              		.loc 1 215 5 view .LVU189
 751 0002 644C     		ldr	r4, .L38
 752 0004 4FF0FF33 		mov	r3, #-1
 753 0008 0322     		movs	r2, #3
 754 000a 6349     		ldr	r1, .L38+4
 755 000c 2046     		mov	r0, r4
 756 000e FFF7FEFF 		bl	HAL_UART_Transmit
 757              	.LVL57:
 217:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Ambient   [0])  , 4 , HA
 758              		.loc 1 217 5 view .LVU190
 759 0012 624D     		ldr	r5, .L38+8
 760 0014 4FF0FF33 		mov	r3, #-1
 761 0018 0422     		movs	r2, #4
 762 001a 2946     		mov	r1, r5
 763 001c 2046     		mov	r0, r4
 764 001e FFF7FEFF 		bl	HAL_UART_Transmit
 765              	.LVL58:
 218:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Signal    [0])  , 4 , HA
 766              		.loc 1 218 5 view .LVU191
 767 0022 4FF0FF33 		mov	r3, #-1
 768 0026 0422     		movs	r2, #4
 769 0028 05F12001 		add	r1, r5, #32
 770 002c 2046     		mov	r0, r4
 771 002e FFF7FEFF 		bl	HAL_UART_Transmit
 772              	.LVL59:
 219:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_centre .ZoneResult[0]) .Distance  [0])  , 4 , HA
 773              		.loc 1 219 5 view .LVU192
 774 0032 4FF0FF33 		mov	r3, #-1
 775 0036 0422     		movs	r2, #4
 776 0038 05F13001 		add	r1, r5, #48
 777 003c 2046     		mov	r0, r4
 778 003e FFF7FEFF 		bl	HAL_UART_Transmit
 779              	.LVL60:
 220:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Ambient   [0])  , 4 , HA
 780              		.loc 1 220 5 view .LVU193
 781 0042 574D     		ldr	r5, .L38+12
 782 0044 4FF0FF33 		mov	r3, #-1
 783 0048 0422     		movs	r2, #4
 784 004a 2946     		mov	r1, r5
 785 004c 2046     		mov	r0, r4
 786 004e FFF7FEFF 		bl	HAL_UART_Transmit
 787              	.LVL61:
 221:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Signal    [0])  , 4 , HA
 788              		.loc 1 221 5 view .LVU194
 789 0052 4FF0FF33 		mov	r3, #-1
 790 0056 0422     		movs	r2, #4
ARM GAS  C:\Temp\cckKiP1p.s 			page 27


 791 0058 05F12001 		add	r1, r5, #32
 792 005c 2046     		mov	r0, r4
 793 005e FFF7FEFF 		bl	HAL_UART_Transmit
 794              	.LVL62:
 222:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_right  .ZoneResult[0]) .Distance  [0])  , 4 , HA
 795              		.loc 1 222 5 view .LVU195
 796 0062 4FF0FF33 		mov	r3, #-1
 797 0066 0422     		movs	r2, #4
 798 0068 05F13001 		add	r1, r5, #48
 799 006c 2046     		mov	r0, r4
 800 006e FFF7FEFF 		bl	HAL_UART_Transmit
 801              	.LVL63:
 223:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Ambient   [0])  , 4 , HA
 802              		.loc 1 223 5 view .LVU196
 803 0072 4C4D     		ldr	r5, .L38+16
 804 0074 4FF0FF33 		mov	r3, #-1
 805 0078 0422     		movs	r2, #4
 806 007a 2946     		mov	r1, r5
 807 007c 2046     		mov	r0, r4
 808 007e FFF7FEFF 		bl	HAL_UART_Transmit
 809              	.LVL64:
 224:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Signal    [0])  , 4 , HA
 810              		.loc 1 224 5 view .LVU197
 811 0082 4FF0FF33 		mov	r3, #-1
 812 0086 0422     		movs	r2, #4
 813 0088 05F12001 		add	r1, r5, #32
 814 008c 2046     		mov	r0, r4
 815 008e FFF7FEFF 		bl	HAL_UART_Transmit
 816              	.LVL65:
 225:Core/Src/main.c **** 
 817              		.loc 1 225 5 view .LVU198
 818 0092 4FF0FF33 		mov	r3, #-1
 819 0096 0422     		movs	r2, #4
 820 0098 05F13001 		add	r1, r5, #48
 821 009c 2046     		mov	r0, r4
 822 009e FFF7FEFF 		bl	HAL_UART_Transmit
 823              	.LVL66:
 227:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
 824              		.loc 1 227 5 view .LVU199
 825 00a2 414D     		ldr	r5, .L38+20
 826 00a4 4FF0FF33 		mov	r3, #-1
 827 00a8 0422     		movs	r2, #4
 828 00aa 2946     		mov	r1, r5
 829 00ac 2046     		mov	r0, r4
 830 00ae FFF7FEFF 		bl	HAL_UART_Transmit
 831              	.LVL67:
 228:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
 832              		.loc 1 228 5 view .LVU200
 833 00b2 4FF0FF33 		mov	r3, #-1
 834 00b6 0422     		movs	r2, #4
 835 00b8 A918     		adds	r1, r5, r2
 836 00ba 2046     		mov	r0, r4
 837 00bc FFF7FEFF 		bl	HAL_UART_Transmit
 838              	.LVL68:
 229:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
 839              		.loc 1 229 5 view .LVU201
 840 00c0 4FF0FF33 		mov	r3, #-1
ARM GAS  C:\Temp\cckKiP1p.s 			page 28


 841 00c4 0422     		movs	r2, #4
 842 00c6 05F10801 		add	r1, r5, #8
 843 00ca 2046     		mov	r0, r4
 844 00cc FFF7FEFF 		bl	HAL_UART_Transmit
 845              	.LVL69:
 230:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
 846              		.loc 1 230 5 view .LVU202
 847 00d0 364D     		ldr	r5, .L38+24
 848 00d2 4FF0FF33 		mov	r3, #-1
 849 00d6 0422     		movs	r2, #4
 850 00d8 2946     		mov	r1, r5
 851 00da 2046     		mov	r0, r4
 852 00dc FFF7FEFF 		bl	HAL_UART_Transmit
 853              	.LVL70:
 231:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
 854              		.loc 1 231 5 view .LVU203
 855 00e0 4FF0FF33 		mov	r3, #-1
 856 00e4 0422     		movs	r2, #4
 857 00e6 A918     		adds	r1, r5, r2
 858 00e8 2046     		mov	r0, r4
 859 00ea FFF7FEFF 		bl	HAL_UART_Transmit
 860              	.LVL71:
 232:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 861              		.loc 1 232 5 view .LVU204
 862 00ee 4FF0FF33 		mov	r3, #-1
 863 00f2 0422     		movs	r2, #4
 864 00f4 05F10801 		add	r1, r5, #8
 865 00f8 2046     		mov	r0, r4
 866 00fa FFF7FEFF 		bl	HAL_UART_Transmit
 867              	.LVL72:
 233:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
 868              		.loc 1 233 5 view .LVU205
 869 00fe 2C4D     		ldr	r5, .L38+28
 870 0100 4FF0FF33 		mov	r3, #-1
 871 0104 0422     		movs	r2, #4
 872 0106 2946     		mov	r1, r5
 873 0108 2046     		mov	r0, r4
 874 010a FFF7FEFF 		bl	HAL_UART_Transmit
 875              	.LVL73:
 234:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 876              		.loc 1 234 5 view .LVU206
 877 010e 4FF0FF33 		mov	r3, #-1
 878 0112 0422     		movs	r2, #4
 879 0114 A918     		adds	r1, r5, r2
 880 0116 2046     		mov	r0, r4
 881 0118 FFF7FEFF 		bl	HAL_UART_Transmit
 882              	.LVL74:
 235:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 883              		.loc 1 235 5 view .LVU207
 884 011c 4FF0FF33 		mov	r3, #-1
 885 0120 0422     		movs	r2, #4
 886 0122 05F10801 		add	r1, r5, #8
 887 0126 2046     		mov	r0, r4
 888 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 889              	.LVL75:
 236:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
 890              		.loc 1 236 5 view .LVU208
ARM GAS  C:\Temp\cckKiP1p.s 			page 29


 891 012c 4FF0FF33 		mov	r3, #-1
 892 0130 0422     		movs	r2, #4
 893 0132 2049     		ldr	r1, .L38+32
 894 0134 2046     		mov	r0, r4
 895 0136 FFF7FEFF 		bl	HAL_UART_Transmit
 896              	.LVL76:
 237:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
 897              		.loc 1 237 5 view .LVU209
 898 013a 1F4D     		ldr	r5, .L38+36
 899 013c 4FF0FF33 		mov	r3, #-1
 900 0140 0422     		movs	r2, #4
 901 0142 2946     		mov	r1, r5
 902 0144 2046     		mov	r0, r4
 903 0146 FFF7FEFF 		bl	HAL_UART_Transmit
 904              	.LVL77:
 238:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
 905              		.loc 1 238 5 view .LVU210
 906 014a 4FF0FF33 		mov	r3, #-1
 907 014e 0422     		movs	r2, #4
 908 0150 A918     		adds	r1, r5, r2
 909 0152 2046     		mov	r0, r4
 910 0154 FFF7FEFF 		bl	HAL_UART_Transmit
 911              	.LVL78:
 239:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &counter          ,4 , HAL_MAX_DELAY);
 912              		.loc 1 239 5 view .LVU211
 913 0158 4FF0FF33 		mov	r3, #-1
 914 015c 0422     		movs	r2, #4
 915 015e 05F10801 		add	r1, r5, #8
 916 0162 2046     		mov	r0, r4
 917 0164 FFF7FEFF 		bl	HAL_UART_Transmit
 918              	.LVL79:
 240:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &fastestODR       ,4 , HAL_MAX_DELAY);
 919              		.loc 1 240 5 view .LVU212
 920 0168 4FF0FF33 		mov	r3, #-1
 921 016c 0422     		movs	r2, #4
 922 016e 1349     		ldr	r1, .L38+40
 923 0170 2046     		mov	r0, r4
 924 0172 FFF7FEFF 		bl	HAL_UART_Transmit
 925              	.LVL80:
 241:Core/Src/main.c **** 
 926              		.loc 1 241 5 view .LVU213
 927 0176 4FF0FF33 		mov	r3, #-1
 928 017a 0422     		movs	r2, #4
 929 017c 1049     		ldr	r1, .L38+44
 930 017e 2046     		mov	r0, r4
 931 0180 FFF7FEFF 		bl	HAL_UART_Transmit
 932              	.LVL81:
 243:Core/Src/main.c **** }
 933              		.loc 1 243 5 view .LVU214
 934 0184 4FF0FF33 		mov	r3, #-1
 935 0188 0322     		movs	r2, #3
 936 018a 0E49     		ldr	r1, .L38+48
 937 018c 2046     		mov	r0, r4
 938 018e FFF7FEFF 		bl	HAL_UART_Transmit
 939              	.LVL82:
 244:Core/Src/main.c **** 
 940              		.loc 1 244 1 is_stmt 0 view .LVU215
ARM GAS  C:\Temp\cckKiP1p.s 			page 30


 941 0192 38BD     		pop	{r3, r4, r5, pc}
 942              	.L39:
 943              		.align	2
 944              	.L38:
 945 0194 00000000 		.word	huart2
 946 0198 00000000 		.word	header
 947 019c 08000000 		.word	TOF_left+8
 948 01a0 08000000 		.word	TOF_centre+8
 949 01a4 08000000 		.word	TOF_right+8
 950 01a8 00000000 		.word	accel1_axis
 951 01ac 00000000 		.word	gyro_axis
 952 01b0 00000000 		.word	accel2_axis
 953 01b4 00000000 		.word	temperature
 954 01b8 00000000 		.word	mag_axis
 955 01bc 00000000 		.word	counter
 956 01c0 00000000 		.word	fastestODR
 957 01c4 00000000 		.word	terminator
 958              		.cfi_endproc
 959              	.LFE143:
 961              		.section	.text.initialCalibration,"ax",%progbits
 962              		.align	1
 963              		.global	initialCalibration
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 968              	initialCalibration:
 969              	.LFB144:
 246:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 970              		.loc 1 246 26 is_stmt 1 view -0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974 0000 10B5     		push	{r4, lr}
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 4, -8
 977              		.cfi_offset 14, -4
 247:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 978              		.loc 1 247 3 view .LVU217
 979 0002 1C4C     		ldr	r4, .L44
 980 0004 0123     		movs	r3, #1
 981 0006 2A22     		movs	r2, #42
 982 0008 2146     		mov	r1, r4
 983 000a 1B48     		ldr	r0, .L44+4
 984 000c FFF7FEFF 		bl	HAL_UART_Receive
 985              	.LVL83:
 248:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 986              		.loc 1 248 3 view .LVU218
 248:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 987              		.loc 1 248 16 is_stmt 0 view .LVU219
 988 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 248:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 989              		.loc 1 248 6 view .LVU220
 990 0012 4A2B     		cmp	r3, #74
 991 0014 00D0     		beq	.L43
 992              	.L40:
 258:Core/Src/main.c **** 
 993              		.loc 1 258 1 view .LVU221
ARM GAS  C:\Temp\cckKiP1p.s 			page 31


 994 0016 10BD     		pop	{r4, pc}
 995              	.L43:
 249:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 996              		.loc 1 249 16 discriminator 1 view .LVU222
 997 0018 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 248:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 998              		.loc 1 248 41 discriminator 1 view .LVU223
 999 001a 5F2B     		cmp	r3, #95
 1000 001c FBD1     		bne	.L40
 250:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 1001              		.loc 1 250 16 view .LVU224
 1002 001e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 249:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 1003              		.loc 1 249 41 view .LVU225
 1004 0020 412B     		cmp	r3, #65
 1005 0022 F8D1     		bne	.L40
 251:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 1006              		.loc 1 251 16 view .LVU226
 1007 0024 94F82730 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 250:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 1008              		.loc 1 250 41 view .LVU227
 1009 0028 412B     		cmp	r3, #65
 1010 002a F4D1     		bne	.L40
 252:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 1011              		.loc 1 252 16 view .LVU228
 1012 002c 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 251:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 1013              		.loc 1 251 69 view .LVU229
 1014 0030 5F2B     		cmp	r3, #95
 1015 0032 F0D1     		bne	.L40
 253:Core/Src/main.c ****         calibrated = 1;
 1016              		.loc 1 253 16 view .LVU230
 1017 0034 94F82930 		ldrb	r3, [r4, #41]	@ zero_extendqisi2
 252:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 1018              		.loc 1 252 69 view .LVU231
 1019 0038 4A2B     		cmp	r3, #74
 1020 003a ECD1     		bne	.L40
 254:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 1021              		.loc 1 254 9 is_stmt 1 view .LVU232
 254:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 1022              		.loc 1 254 20 is_stmt 0 view .LVU233
 1023 003c 0F4B     		ldr	r3, .L44+8
 1024 003e 0122     		movs	r2, #1
 1025 0040 1A70     		strb	r2, [r3]
 255:Core/Src/main.c ****         fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 1026              		.loc 1 255 9 is_stmt 1 view .LVU234
 1027 0042 2046     		mov	r0, r4
 1028 0044 FFF7FEFF 		bl	receivedFromSimulink
 1029              	.LVL84:
 256:Core/Src/main.c ****   }
 1030              		.loc 1 256 9 view .LVU235
 256:Core/Src/main.c ****   }
 1031              		.loc 1 256 22 is_stmt 0 view .LVU236
 1032 0048 0D4B     		ldr	r3, .L44+12
 1033 004a 93ED002A 		vldr.32	s4, [r3]
 1034 004e 0D4B     		ldr	r3, .L44+16
 1035 0050 D3ED001A 		vldr.32	s3, [r3]
ARM GAS  C:\Temp\cckKiP1p.s 			page 32


 1036 0054 0C4B     		ldr	r3, .L44+20
 1037 0056 93ED001A 		vldr.32	s2, [r3]
 1038 005a 0C4B     		ldr	r3, .L44+24
 1039 005c D3ED000A 		vldr.32	s1, [r3]
 1040 0060 0B4B     		ldr	r3, .L44+28
 1041 0062 93ED000A 		vldr.32	s0, [r3]
 1042 0066 FFF7FEFF 		bl	get_fastest_odr
 1043              	.LVL85:
 256:Core/Src/main.c ****   }
 1044              		.loc 1 256 20 view .LVU237
 1045 006a 0A4B     		ldr	r3, .L44+32
 1046 006c 83ED000A 		vstr.32	s0, [r3]
 258:Core/Src/main.c **** 
 1047              		.loc 1 258 1 view .LVU238
 1048 0070 D1E7     		b	.L40
 1049              	.L45:
 1050 0072 00BF     		.align	2
 1051              	.L44:
 1052 0074 00000000 		.word	bigBuffer
 1053 0078 00000000 		.word	huart2
 1054 007c 00000000 		.word	calibrated
 1055 0080 00000000 		.word	tof_odr
 1056 0084 00000000 		.word	mag_odr
 1057 0088 00000000 		.word	accel2_odr
 1058 008c 00000000 		.word	gyro_odr
 1059 0090 00000000 		.word	accel1_odr
 1060 0094 00000000 		.word	fastestODR
 1061              		.cfi_endproc
 1062              	.LFE144:
 1064              		.section	.text.Error_Handler,"ax",%progbits
 1065              		.align	1
 1066              		.global	Error_Handler
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1071              	Error_Handler:
 1072              	.LFB152:
 571:Core/Src/main.c **** 
 572:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 573:Core/Src/main.c **** 
 574:Core/Src/main.c **** /* USER CODE END 4 */
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** /**
 577:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 578:Core/Src/main.c ****   * @retval None
 579:Core/Src/main.c ****   */
 580:Core/Src/main.c **** void Error_Handler(void)
 581:Core/Src/main.c **** {
 1073              		.loc 1 581 1 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ Volatile: function does not return.
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 582:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 583:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 584:Core/Src/main.c ****   __disable_irq();
ARM GAS  C:\Temp\cckKiP1p.s 			page 33


 1079              		.loc 1 584 3 view .LVU240
 1080              	.LBB9:
 1081              	.LBI9:
 1082              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  C:\Temp\cckKiP1p.s 			page 34


  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  C:\Temp\cckKiP1p.s 			page 35


 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\cckKiP1p.s 			page 36


 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\cckKiP1p.s 			page 37


 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\cckKiP1p.s 			page 38


 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 39


 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 40


 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  C:\Temp\cckKiP1p.s 			page 41


 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\cckKiP1p.s 			page 42


 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
ARM GAS  C:\Temp\cckKiP1p.s 			page 43


 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 44


 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\cckKiP1p.s 			page 45


 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
ARM GAS  C:\Temp\cckKiP1p.s 			page 46


 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Temp\cckKiP1p.s 			page 47


 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 48


 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\cckKiP1p.s 			page 49


 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1083              		.loc 2 960 27 view .LVU241
 1084              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1085              		.loc 2 962 3 view .LVU242
ARM GAS  C:\Temp\cckKiP1p.s 			page 50


 1086              		.syntax unified
 1087              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1088 0000 72B6     		cpsid i
 1089              	@ 0 "" 2
 1090              		.thumb
 1091              		.syntax unified
 1092              	.L47:
 1093              	.LBE10:
 1094              	.LBE9:
 585:Core/Src/main.c ****   while (1)
 1095              		.loc 1 585 3 discriminator 1 view .LVU243
 586:Core/Src/main.c ****   {
 587:Core/Src/main.c ****   }
 1096              		.loc 1 587 3 discriminator 1 view .LVU244
 585:Core/Src/main.c ****   while (1)
 1097              		.loc 1 585 9 discriminator 1 view .LVU245
 1098 0002 FEE7     		b	.L47
 1099              		.cfi_endproc
 1100              	.LFE152:
 1102              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1103              		.align	1
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1108              	MX_USART2_UART_Init:
 1109              	.LFB149:
 473:Core/Src/main.c **** 
 1110              		.loc 1 473 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114 0000 08B5     		push	{r3, lr}
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 3, -8
 1117              		.cfi_offset 14, -4
 482:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 1118              		.loc 1 482 3 view .LVU247
 482:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 1119              		.loc 1 482 19 is_stmt 0 view .LVU248
 1120 0002 0D48     		ldr	r0, .L52
 1121 0004 0D4B     		ldr	r3, .L52+4
 1122 0006 0360     		str	r3, [r0]
 483:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 1123              		.loc 1 483 3 is_stmt 1 view .LVU249
 483:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 1124              		.loc 1 483 24 is_stmt 0 view .LVU250
 1125 0008 4FF4E113 		mov	r3, #1843200
 1126 000c 4360     		str	r3, [r0, #4]
 484:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 1127              		.loc 1 484 3 is_stmt 1 view .LVU251
 484:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 1128              		.loc 1 484 26 is_stmt 0 view .LVU252
 1129 000e 4FF48053 		mov	r3, #4096
 1130 0012 8360     		str	r3, [r0, #8]
 485:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 1131              		.loc 1 485 3 is_stmt 1 view .LVU253
 485:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
ARM GAS  C:\Temp\cckKiP1p.s 			page 51


 1132              		.loc 1 485 24 is_stmt 0 view .LVU254
 1133 0014 4FF40053 		mov	r3, #8192
 1134 0018 C360     		str	r3, [r0, #12]
 486:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1135              		.loc 1 486 3 is_stmt 1 view .LVU255
 486:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1136              		.loc 1 486 22 is_stmt 0 view .LVU256
 1137 001a 4FF48063 		mov	r3, #1024
 1138 001e 0361     		str	r3, [r0, #16]
 487:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1139              		.loc 1 487 3 is_stmt 1 view .LVU257
 487:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1140              		.loc 1 487 20 is_stmt 0 view .LVU258
 1141 0020 0C23     		movs	r3, #12
 1142 0022 4361     		str	r3, [r0, #20]
 488:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1143              		.loc 1 488 3 is_stmt 1 view .LVU259
 488:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1144              		.loc 1 488 25 is_stmt 0 view .LVU260
 1145 0024 0023     		movs	r3, #0
 1146 0026 8361     		str	r3, [r0, #24]
 489:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1147              		.loc 1 489 3 is_stmt 1 view .LVU261
 489:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1148              		.loc 1 489 28 is_stmt 0 view .LVU262
 1149 0028 C361     		str	r3, [r0, #28]
 490:Core/Src/main.c ****   {
 1150              		.loc 1 490 3 is_stmt 1 view .LVU263
 490:Core/Src/main.c ****   {
 1151              		.loc 1 490 7 is_stmt 0 view .LVU264
 1152 002a FFF7FEFF 		bl	HAL_UART_Init
 1153              	.LVL86:
 490:Core/Src/main.c ****   {
 1154              		.loc 1 490 6 view .LVU265
 1155 002e 00B9     		cbnz	r0, .L51
 498:Core/Src/main.c **** 
 1156              		.loc 1 498 1 view .LVU266
 1157 0030 08BD     		pop	{r3, pc}
 1158              	.L51:
 492:Core/Src/main.c ****   }
 1159              		.loc 1 492 5 is_stmt 1 view .LVU267
 1160 0032 FFF7FEFF 		bl	Error_Handler
 1161              	.LVL87:
 1162              	.L53:
 1163 0036 00BF     		.align	2
 1164              	.L52:
 1165 0038 00000000 		.word	huart2
 1166 003c 00440040 		.word	1073759232
 1167              		.cfi_endproc
 1168              	.LFE149:
 1170              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1171              		.align	1
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1176              	MX_TIM2_Init:
 1177              	.LFB147:
ARM GAS  C:\Temp\cckKiP1p.s 			page 52


 383:Core/Src/main.c **** 
 1178              		.loc 1 383 1 view -0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 24
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182 0000 00B5     		push	{lr}
 1183              		.cfi_def_cfa_offset 4
 1184              		.cfi_offset 14, -4
 1185 0002 87B0     		sub	sp, sp, #28
 1186              		.cfi_def_cfa_offset 32
 389:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1187              		.loc 1 389 3 view .LVU269
 389:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1188              		.loc 1 389 26 is_stmt 0 view .LVU270
 1189 0004 0023     		movs	r3, #0
 1190 0006 0293     		str	r3, [sp, #8]
 1191 0008 0393     		str	r3, [sp, #12]
 1192 000a 0493     		str	r3, [sp, #16]
 1193 000c 0593     		str	r3, [sp, #20]
 390:Core/Src/main.c **** 
 1194              		.loc 1 390 3 is_stmt 1 view .LVU271
 390:Core/Src/main.c **** 
 1195              		.loc 1 390 27 is_stmt 0 view .LVU272
 1196 000e 0093     		str	r3, [sp]
 1197 0010 0193     		str	r3, [sp, #4]
 395:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1198              		.loc 1 395 3 is_stmt 1 view .LVU273
 395:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1199              		.loc 1 395 18 is_stmt 0 view .LVU274
 1200 0012 1448     		ldr	r0, .L62
 1201 0014 4FF08042 		mov	r2, #1073741824
 1202 0018 0260     		str	r2, [r0]
 396:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1203              		.loc 1 396 3 is_stmt 1 view .LVU275
 396:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1204              		.loc 1 396 24 is_stmt 0 view .LVU276
 1205 001a 4360     		str	r3, [r0, #4]
 397:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1206              		.loc 1 397 3 is_stmt 1 view .LVU277
 397:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1207              		.loc 1 397 26 is_stmt 0 view .LVU278
 1208 001c 8360     		str	r3, [r0, #8]
 398:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1209              		.loc 1 398 3 is_stmt 1 view .LVU279
 398:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1210              		.loc 1 398 21 is_stmt 0 view .LVU280
 1211 001e 4FF0FF32 		mov	r2, #-1
 1212 0022 C260     		str	r2, [r0, #12]
 399:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1213              		.loc 1 399 3 is_stmt 1 view .LVU281
 399:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1214              		.loc 1 399 28 is_stmt 0 view .LVU282
 1215 0024 0361     		str	r3, [r0, #16]
 400:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1216              		.loc 1 400 3 is_stmt 1 view .LVU283
 400:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1217              		.loc 1 400 32 is_stmt 0 view .LVU284
ARM GAS  C:\Temp\cckKiP1p.s 			page 53


 1218 0026 8023     		movs	r3, #128
 1219 0028 8361     		str	r3, [r0, #24]
 401:Core/Src/main.c ****   {
 1220              		.loc 1 401 3 is_stmt 1 view .LVU285
 401:Core/Src/main.c ****   {
 1221              		.loc 1 401 7 is_stmt 0 view .LVU286
 1222 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1223              	.LVL88:
 401:Core/Src/main.c ****   {
 1224              		.loc 1 401 6 view .LVU287
 1225 002e 90B9     		cbnz	r0, .L59
 405:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1226              		.loc 1 405 3 is_stmt 1 view .LVU288
 405:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1227              		.loc 1 405 34 is_stmt 0 view .LVU289
 1228 0030 4FF48053 		mov	r3, #4096
 1229 0034 0293     		str	r3, [sp, #8]
 406:Core/Src/main.c ****   {
 1230              		.loc 1 406 3 is_stmt 1 view .LVU290
 406:Core/Src/main.c ****   {
 1231              		.loc 1 406 7 is_stmt 0 view .LVU291
 1232 0036 02A9     		add	r1, sp, #8
 1233 0038 0A48     		ldr	r0, .L62
 1234 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1235              	.LVL89:
 406:Core/Src/main.c ****   {
 1236              		.loc 1 406 6 view .LVU292
 1237 003e 60B9     		cbnz	r0, .L60
 410:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1238              		.loc 1 410 3 is_stmt 1 view .LVU293
 410:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1239              		.loc 1 410 37 is_stmt 0 view .LVU294
 1240 0040 0023     		movs	r3, #0
 1241 0042 0093     		str	r3, [sp]
 411:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1242              		.loc 1 411 3 is_stmt 1 view .LVU295
 411:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1243              		.loc 1 411 33 is_stmt 0 view .LVU296
 1244 0044 0193     		str	r3, [sp, #4]
 412:Core/Src/main.c ****   {
 1245              		.loc 1 412 3 is_stmt 1 view .LVU297
 412:Core/Src/main.c ****   {
 1246              		.loc 1 412 7 is_stmt 0 view .LVU298
 1247 0046 6946     		mov	r1, sp
 1248 0048 0648     		ldr	r0, .L62
 1249 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1250              	.LVL90:
 412:Core/Src/main.c ****   {
 1251              		.loc 1 412 6 view .LVU299
 1252 004e 30B9     		cbnz	r0, .L61
 420:Core/Src/main.c **** 
 1253              		.loc 1 420 1 view .LVU300
 1254 0050 07B0     		add	sp, sp, #28
 1255              		.cfi_remember_state
 1256              		.cfi_def_cfa_offset 4
 1257              		@ sp needed
 1258 0052 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  C:\Temp\cckKiP1p.s 			page 54


 1259              	.L59:
 1260              		.cfi_restore_state
 403:Core/Src/main.c ****   }
 1261              		.loc 1 403 5 is_stmt 1 view .LVU301
 1262 0056 FFF7FEFF 		bl	Error_Handler
 1263              	.LVL91:
 1264              	.L60:
 408:Core/Src/main.c ****   }
 1265              		.loc 1 408 5 view .LVU302
 1266 005a FFF7FEFF 		bl	Error_Handler
 1267              	.LVL92:
 1268              	.L61:
 414:Core/Src/main.c ****   }
 1269              		.loc 1 414 5 view .LVU303
 1270 005e FFF7FEFF 		bl	Error_Handler
 1271              	.LVL93:
 1272              	.L63:
 1273 0062 00BF     		.align	2
 1274              	.L62:
 1275 0064 00000000 		.word	htim2
 1276              		.cfi_endproc
 1277              	.LFE147:
 1279              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1280              		.align	1
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1285              	MX_TIM3_Init:
 1286              	.LFB148:
 428:Core/Src/main.c **** 
 1287              		.loc 1 428 1 view -0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 24
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291 0000 00B5     		push	{lr}
 1292              		.cfi_def_cfa_offset 4
 1293              		.cfi_offset 14, -4
 1294 0002 87B0     		sub	sp, sp, #28
 1295              		.cfi_def_cfa_offset 32
 434:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1296              		.loc 1 434 3 view .LVU305
 434:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1297              		.loc 1 434 26 is_stmt 0 view .LVU306
 1298 0004 0023     		movs	r3, #0
 1299 0006 0293     		str	r3, [sp, #8]
 1300 0008 0393     		str	r3, [sp, #12]
 1301 000a 0493     		str	r3, [sp, #16]
 1302 000c 0593     		str	r3, [sp, #20]
 435:Core/Src/main.c **** 
 1303              		.loc 1 435 3 is_stmt 1 view .LVU307
 435:Core/Src/main.c **** 
 1304              		.loc 1 435 27 is_stmt 0 view .LVU308
 1305 000e 0093     		str	r3, [sp]
 1306 0010 0193     		str	r3, [sp, #4]
 440:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 1307              		.loc 1 440 3 is_stmt 1 view .LVU309
 440:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
ARM GAS  C:\Temp\cckKiP1p.s 			page 55


 1308              		.loc 1 440 18 is_stmt 0 view .LVU310
 1309 0012 1348     		ldr	r0, .L72
 1310 0014 134A     		ldr	r2, .L72+4
 1311 0016 0260     		str	r2, [r0]
 441:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1312              		.loc 1 441 3 is_stmt 1 view .LVU311
 441:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1313              		.loc 1 441 24 is_stmt 0 view .LVU312
 1314 0018 4360     		str	r3, [r0, #4]
 442:Core/Src/main.c ****   htim3.Init.Period = 65535;
 1315              		.loc 1 442 3 is_stmt 1 view .LVU313
 442:Core/Src/main.c ****   htim3.Init.Period = 65535;
 1316              		.loc 1 442 26 is_stmt 0 view .LVU314
 1317 001a 8360     		str	r3, [r0, #8]
 443:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1318              		.loc 1 443 3 is_stmt 1 view .LVU315
 443:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1319              		.loc 1 443 21 is_stmt 0 view .LVU316
 1320 001c 4FF6FF72 		movw	r2, #65535
 1321 0020 C260     		str	r2, [r0, #12]
 444:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1322              		.loc 1 444 3 is_stmt 1 view .LVU317
 444:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1323              		.loc 1 444 28 is_stmt 0 view .LVU318
 1324 0022 0361     		str	r3, [r0, #16]
 445:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1325              		.loc 1 445 3 is_stmt 1 view .LVU319
 445:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1326              		.loc 1 445 32 is_stmt 0 view .LVU320
 1327 0024 8023     		movs	r3, #128
 1328 0026 8361     		str	r3, [r0, #24]
 446:Core/Src/main.c ****   {
 1329              		.loc 1 446 3 is_stmt 1 view .LVU321
 446:Core/Src/main.c ****   {
 1330              		.loc 1 446 7 is_stmt 0 view .LVU322
 1331 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1332              	.LVL94:
 446:Core/Src/main.c ****   {
 1333              		.loc 1 446 6 view .LVU323
 1334 002c 90B9     		cbnz	r0, .L69
 450:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1335              		.loc 1 450 3 is_stmt 1 view .LVU324
 450:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1336              		.loc 1 450 34 is_stmt 0 view .LVU325
 1337 002e 4FF48053 		mov	r3, #4096
 1338 0032 0293     		str	r3, [sp, #8]
 451:Core/Src/main.c ****   {
 1339              		.loc 1 451 3 is_stmt 1 view .LVU326
 451:Core/Src/main.c ****   {
 1340              		.loc 1 451 7 is_stmt 0 view .LVU327
 1341 0034 02A9     		add	r1, sp, #8
 1342 0036 0A48     		ldr	r0, .L72
 1343 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1344              	.LVL95:
 451:Core/Src/main.c ****   {
 1345              		.loc 1 451 6 view .LVU328
 1346 003c 60B9     		cbnz	r0, .L70
ARM GAS  C:\Temp\cckKiP1p.s 			page 56


 455:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1347              		.loc 1 455 3 is_stmt 1 view .LVU329
 455:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1348              		.loc 1 455 37 is_stmt 0 view .LVU330
 1349 003e 0023     		movs	r3, #0
 1350 0040 0093     		str	r3, [sp]
 456:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1351              		.loc 1 456 3 is_stmt 1 view .LVU331
 456:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1352              		.loc 1 456 33 is_stmt 0 view .LVU332
 1353 0042 0193     		str	r3, [sp, #4]
 457:Core/Src/main.c ****   {
 1354              		.loc 1 457 3 is_stmt 1 view .LVU333
 457:Core/Src/main.c ****   {
 1355              		.loc 1 457 7 is_stmt 0 view .LVU334
 1356 0044 6946     		mov	r1, sp
 1357 0046 0648     		ldr	r0, .L72
 1358 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1359              	.LVL96:
 457:Core/Src/main.c ****   {
 1360              		.loc 1 457 6 view .LVU335
 1361 004c 30B9     		cbnz	r0, .L71
 465:Core/Src/main.c **** 
 1362              		.loc 1 465 1 view .LVU336
 1363 004e 07B0     		add	sp, sp, #28
 1364              		.cfi_remember_state
 1365              		.cfi_def_cfa_offset 4
 1366              		@ sp needed
 1367 0050 5DF804FB 		ldr	pc, [sp], #4
 1368              	.L69:
 1369              		.cfi_restore_state
 448:Core/Src/main.c ****   }
 1370              		.loc 1 448 5 is_stmt 1 view .LVU337
 1371 0054 FFF7FEFF 		bl	Error_Handler
 1372              	.LVL97:
 1373              	.L70:
 453:Core/Src/main.c ****   }
 1374              		.loc 1 453 5 view .LVU338
 1375 0058 FFF7FEFF 		bl	Error_Handler
 1376              	.LVL98:
 1377              	.L71:
 459:Core/Src/main.c ****   }
 1378              		.loc 1 459 5 view .LVU339
 1379 005c FFF7FEFF 		bl	Error_Handler
 1380              	.LVL99:
 1381              	.L73:
 1382              		.align	2
 1383              	.L72:
 1384 0060 00000000 		.word	htim3
 1385 0064 00040040 		.word	1073742848
 1386              		.cfi_endproc
 1387              	.LFE148:
 1389              		.section	.text.SystemClock_Config,"ax",%progbits
 1390              		.align	1
 1391              		.global	SystemClock_Config
 1392              		.syntax unified
 1393              		.thumb
ARM GAS  C:\Temp\cckKiP1p.s 			page 57


 1394              		.thumb_func
 1396              	SystemClock_Config:
 1397              	.LFB146:
 336:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1398              		.loc 1 336 1 view -0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 80
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 1402 0000 00B5     		push	{lr}
 1403              		.cfi_def_cfa_offset 4
 1404              		.cfi_offset 14, -4
 1405 0002 95B0     		sub	sp, sp, #84
 1406              		.cfi_def_cfa_offset 88
 337:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1407              		.loc 1 337 3 view .LVU341
 337:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1408              		.loc 1 337 22 is_stmt 0 view .LVU342
 1409 0004 3022     		movs	r2, #48
 1410 0006 0021     		movs	r1, #0
 1411 0008 08A8     		add	r0, sp, #32
 1412 000a FFF7FEFF 		bl	memset
 1413              	.LVL100:
 338:Core/Src/main.c **** 
 1414              		.loc 1 338 3 is_stmt 1 view .LVU343
 338:Core/Src/main.c **** 
 1415              		.loc 1 338 22 is_stmt 0 view .LVU344
 1416 000e 0023     		movs	r3, #0
 1417 0010 0393     		str	r3, [sp, #12]
 1418 0012 0493     		str	r3, [sp, #16]
 1419 0014 0593     		str	r3, [sp, #20]
 1420 0016 0693     		str	r3, [sp, #24]
 1421 0018 0793     		str	r3, [sp, #28]
 342:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1422              		.loc 1 342 3 is_stmt 1 view .LVU345
 1423              	.LBB11:
 342:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1424              		.loc 1 342 3 view .LVU346
 1425 001a 0193     		str	r3, [sp, #4]
 342:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1426              		.loc 1 342 3 view .LVU347
 1427 001c 1E4A     		ldr	r2, .L80
 1428 001e 116C     		ldr	r1, [r2, #64]
 1429 0020 41F08051 		orr	r1, r1, #268435456
 1430 0024 1164     		str	r1, [r2, #64]
 342:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1431              		.loc 1 342 3 view .LVU348
 1432 0026 126C     		ldr	r2, [r2, #64]
 1433 0028 02F08052 		and	r2, r2, #268435456
 1434 002c 0192     		str	r2, [sp, #4]
 342:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1435              		.loc 1 342 3 view .LVU349
 1436 002e 019A     		ldr	r2, [sp, #4]
 1437              	.LBE11:
 342:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1438              		.loc 1 342 3 view .LVU350
 343:Core/Src/main.c **** 
 1439              		.loc 1 343 3 view .LVU351
ARM GAS  C:\Temp\cckKiP1p.s 			page 58


 1440              	.LBB12:
 343:Core/Src/main.c **** 
 1441              		.loc 1 343 3 view .LVU352
 1442 0030 0293     		str	r3, [sp, #8]
 343:Core/Src/main.c **** 
 1443              		.loc 1 343 3 view .LVU353
 1444 0032 1A4A     		ldr	r2, .L80+4
 1445 0034 1168     		ldr	r1, [r2]
 1446 0036 41F44041 		orr	r1, r1, #49152
 1447 003a 1160     		str	r1, [r2]
 343:Core/Src/main.c **** 
 1448              		.loc 1 343 3 view .LVU354
 1449 003c 1268     		ldr	r2, [r2]
 1450 003e 02F44042 		and	r2, r2, #49152
 1451 0042 0292     		str	r2, [sp, #8]
 343:Core/Src/main.c **** 
 1452              		.loc 1 343 3 view .LVU355
 1453 0044 029A     		ldr	r2, [sp, #8]
 1454              	.LBE12:
 343:Core/Src/main.c **** 
 1455              		.loc 1 343 3 view .LVU356
 348:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1456              		.loc 1 348 3 view .LVU357
 348:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1457              		.loc 1 348 36 is_stmt 0 view .LVU358
 1458 0046 0222     		movs	r2, #2
 1459 0048 0892     		str	r2, [sp, #32]
 349:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1460              		.loc 1 349 3 is_stmt 1 view .LVU359
 349:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1461              		.loc 1 349 30 is_stmt 0 view .LVU360
 1462 004a 0121     		movs	r1, #1
 1463 004c 0B91     		str	r1, [sp, #44]
 350:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1464              		.loc 1 350 3 is_stmt 1 view .LVU361
 350:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1465              		.loc 1 350 41 is_stmt 0 view .LVU362
 1466 004e 1021     		movs	r1, #16
 1467 0050 0C91     		str	r1, [sp, #48]
 351:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1468              		.loc 1 351 3 is_stmt 1 view .LVU363
 351:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1469              		.loc 1 351 34 is_stmt 0 view .LVU364
 1470 0052 0E92     		str	r2, [sp, #56]
 352:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1471              		.loc 1 352 3 is_stmt 1 view .LVU365
 352:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1472              		.loc 1 352 35 is_stmt 0 view .LVU366
 1473 0054 0F93     		str	r3, [sp, #60]
 353:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1474              		.loc 1 353 3 is_stmt 1 view .LVU367
 353:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1475              		.loc 1 353 30 is_stmt 0 view .LVU368
 1476 0056 0823     		movs	r3, #8
 1477 0058 1093     		str	r3, [sp, #64]
 354:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1478              		.loc 1 354 3 is_stmt 1 view .LVU369
ARM GAS  C:\Temp\cckKiP1p.s 			page 59


 354:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1479              		.loc 1 354 30 is_stmt 0 view .LVU370
 1480 005a 6423     		movs	r3, #100
 1481 005c 1193     		str	r3, [sp, #68]
 355:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1482              		.loc 1 355 3 is_stmt 1 view .LVU371
 355:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1483              		.loc 1 355 30 is_stmt 0 view .LVU372
 1484 005e 1292     		str	r2, [sp, #72]
 356:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1485              		.loc 1 356 3 is_stmt 1 view .LVU373
 356:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1486              		.loc 1 356 30 is_stmt 0 view .LVU374
 1487 0060 0423     		movs	r3, #4
 1488 0062 1393     		str	r3, [sp, #76]
 357:Core/Src/main.c ****   {
 1489              		.loc 1 357 3 is_stmt 1 view .LVU375
 357:Core/Src/main.c ****   {
 1490              		.loc 1 357 7 is_stmt 0 view .LVU376
 1491 0064 08A8     		add	r0, sp, #32
 1492 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1493              	.LVL101:
 357:Core/Src/main.c ****   {
 1494              		.loc 1 357 6 view .LVU377
 1495 006a 88B9     		cbnz	r0, .L78
 364:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1496              		.loc 1 364 3 is_stmt 1 view .LVU378
 364:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1497              		.loc 1 364 31 is_stmt 0 view .LVU379
 1498 006c 0F23     		movs	r3, #15
 1499 006e 0393     		str	r3, [sp, #12]
 366:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1500              		.loc 1 366 3 is_stmt 1 view .LVU380
 366:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1501              		.loc 1 366 34 is_stmt 0 view .LVU381
 1502 0070 0223     		movs	r3, #2
 1503 0072 0493     		str	r3, [sp, #16]
 367:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1504              		.loc 1 367 3 is_stmt 1 view .LVU382
 367:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1505              		.loc 1 367 35 is_stmt 0 view .LVU383
 1506 0074 0023     		movs	r3, #0
 1507 0076 0593     		str	r3, [sp, #20]
 368:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1508              		.loc 1 368 3 is_stmt 1 view .LVU384
 368:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1509              		.loc 1 368 36 is_stmt 0 view .LVU385
 1510 0078 4FF48052 		mov	r2, #4096
 1511 007c 0692     		str	r2, [sp, #24]
 369:Core/Src/main.c **** 
 1512              		.loc 1 369 3 is_stmt 1 view .LVU386
 369:Core/Src/main.c **** 
 1513              		.loc 1 369 36 is_stmt 0 view .LVU387
 1514 007e 0793     		str	r3, [sp, #28]
 371:Core/Src/main.c ****   {
 1515              		.loc 1 371 3 is_stmt 1 view .LVU388
 371:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cckKiP1p.s 			page 60


 1516              		.loc 1 371 7 is_stmt 0 view .LVU389
 1517 0080 0321     		movs	r1, #3
 1518 0082 03A8     		add	r0, sp, #12
 1519 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1520              	.LVL102:
 371:Core/Src/main.c ****   {
 1521              		.loc 1 371 6 view .LVU390
 1522 0088 20B9     		cbnz	r0, .L79
 375:Core/Src/main.c **** 
 1523              		.loc 1 375 1 view .LVU391
 1524 008a 15B0     		add	sp, sp, #84
 1525              		.cfi_remember_state
 1526              		.cfi_def_cfa_offset 4
 1527              		@ sp needed
 1528 008c 5DF804FB 		ldr	pc, [sp], #4
 1529              	.L78:
 1530              		.cfi_restore_state
 359:Core/Src/main.c ****   }
 1531              		.loc 1 359 5 is_stmt 1 view .LVU392
 1532 0090 FFF7FEFF 		bl	Error_Handler
 1533              	.LVL103:
 1534              	.L79:
 373:Core/Src/main.c ****   }
 1535              		.loc 1 373 5 view .LVU393
 1536 0094 FFF7FEFF 		bl	Error_Handler
 1537              	.LVL104:
 1538              	.L81:
 1539              		.align	2
 1540              	.L80:
 1541 0098 00380240 		.word	1073887232
 1542 009c 00700040 		.word	1073770496
 1543              		.cfi_endproc
 1544              	.LFE146:
 1546              		.section	.text.main,"ax",%progbits
 1547              		.align	1
 1548              		.global	main
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1553              	main:
 1554              	.LFB145:
 267:Core/Src/main.c **** 
 1555              		.loc 1 267 1 view -0
 1556              		.cfi_startproc
 1557              		@ Volatile: function does not return.
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560 0000 08B5     		push	{r3, lr}
 1561              		.cfi_def_cfa_offset 8
 1562              		.cfi_offset 3, -8
 1563              		.cfi_offset 14, -4
 276:Core/Src/main.c **** 
 1564              		.loc 1 276 3 view .LVU395
 1565 0002 FFF7FEFF 		bl	HAL_Init
 1566              	.LVL105:
 279:Core/Src/main.c ****   /* USER CODE END Init */
 1567              		.loc 1 279 3 view .LVU396
ARM GAS  C:\Temp\cckKiP1p.s 			page 61


 1568 0006 0022     		movs	r2, #0
 1569 0008 2021     		movs	r1, #32
 1570 000a 1F48     		ldr	r0, .L89
 1571 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1572              	.LVL106:
 283:Core/Src/main.c **** 
 1573              		.loc 1 283 3 view .LVU397
 1574 0010 FFF7FEFF 		bl	SystemClock_Config
 1575              	.LVL107:
 290:Core/Src/main.c ****   MX_DMA_Init();
 1576              		.loc 1 290 3 view .LVU398
 1577 0014 FFF7FEFF 		bl	MX_GPIO_Init
 1578              	.LVL108:
 291:Core/Src/main.c ****   MX_USART2_UART_Init();
 1579              		.loc 1 291 3 view .LVU399
 1580 0018 FFF7FEFF 		bl	MX_DMA_Init
 1581              	.LVL109:
 292:Core/Src/main.c ****   MX_TIM2_Init();
 1582              		.loc 1 292 3 view .LVU400
 1583 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1584              	.LVL110:
 293:Core/Src/main.c ****   MX_TIM3_Init();
 1585              		.loc 1 293 3 view .LVU401
 1586 0020 FFF7FEFF 		bl	MX_TIM2_Init
 1587              	.LVL111:
 294:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1588              		.loc 1 294 3 view .LVU402
 1589 0024 FFF7FEFF 		bl	MX_TIM3_Init
 1590              	.LVL112:
 296:Core/Src/main.c ****     initialCalibration();
 1591              		.loc 1 296 3 view .LVU403
 1592              	.L83:
 296:Core/Src/main.c ****     initialCalibration();
 1593              		.loc 1 296 21 view .LVU404
 1594 0028 184B     		ldr	r3, .L89+4
 1595 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1596 002c 012B     		cmp	r3, #1
 1597 002e 02D0     		beq	.L88
 297:Core/Src/main.c ****   }
 1598              		.loc 1 297 5 view .LVU405
 1599 0030 FFF7FEFF 		bl	initialCalibration
 1600              	.LVL113:
 1601 0034 F8E7     		b	.L83
 1602              	.L88:
 299:Core/Src/main.c ****   initVL53L1A1();
 1603              		.loc 1 299 3 view .LVU406
 1604 0036 FFF7FEFF 		bl	calibrate_VL53L1A1
 1605              	.LVL114:
 300:Core/Src/main.c ****   initIKS02A1();
 1606              		.loc 1 300 3 view .LVU407
 1607 003a FFF7FEFF 		bl	initVL53L1A1
 1608              	.LVL115:
 301:Core/Src/main.c ****   calibrate_IKS02A1();
 1609              		.loc 1 301 3 view .LVU408
 1610 003e FFF7FEFF 		bl	initIKS02A1
 1611              	.LVL116:
 302:Core/Src/main.c **** 
ARM GAS  C:\Temp\cckKiP1p.s 			page 62


 1612              		.loc 1 302 3 view .LVU409
 1613 0042 FFF7FEFF 		bl	calibrate_IKS02A1
 1614              	.LVL117:
 304:Core/Src/main.c ****   configureTimer(fastestODR);
 1615              		.loc 1 304 3 view .LVU410
 1616 0046 124B     		ldr	r3, .L89+8
 1617 0048 93ED000A 		vldr.32	s0, [r3]
 1618 004c FFF7FEFF 		bl	configureOtherTimer
 1619              	.LVL118:
 305:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 1620              		.loc 1 305 3 view .LVU411
 1621 0050 104B     		ldr	r3, .L89+12
 1622 0052 93ED000A 		vldr.32	s0, [r3]
 1623 0056 FFF7FEFF 		bl	configureTimer
 1624              	.LVL119:
 306:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 1625              		.loc 1 306 3 view .LVU412
 1626 005a 0F48     		ldr	r0, .L89+16
 1627 005c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1628              	.LVL120:
 307:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 1629              		.loc 1 307 3 view .LVU413
 1630 0060 0E48     		ldr	r0, .L89+20
 1631 0062 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1632              	.LVL121:
 308:Core/Src/main.c **** 
 1633              		.loc 1 308 3 view .LVU414
 1634 0066 0122     		movs	r2, #1
 1635 0068 2021     		movs	r1, #32
 1636 006a 0748     		ldr	r0, .L89
 1637 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1638              	.LVL122:
 1639              	.L85:
 315:Core/Src/main.c ****   {
 1640              		.loc 1 315 3 view .LVU415
 317:Core/Src/main.c ****     // (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 1641              		.loc 1 317 5 view .LVU416
 1642 0070 FFF7FEFF 		bl	getIKS02A1
 1643              	.LVL123:
 320:Core/Src/main.c ****       getVL53L1A1();
 1644              		.loc 1 320 5 view .LVU417
 320:Core/Src/main.c ****       getVL53L1A1();
 1645              		.loc 1 320 22 is_stmt 0 view .LVU418
 1646 0074 0A4B     		ldr	r3, .L89+24
 1647 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 320:Core/Src/main.c ****       getVL53L1A1();
 1648              		.loc 1 320 8 view .LVU419
 1649 0078 012B     		cmp	r3, #1
 1650 007a F9D1     		bne	.L85
 321:Core/Src/main.c ****       clearToGetL1 = 0;
 1651              		.loc 1 321 7 is_stmt 1 view .LVU420
 1652 007c FFF7FEFF 		bl	getVL53L1A1
 1653              	.LVL124:
 322:Core/Src/main.c ****     }
 1654              		.loc 1 322 7 view .LVU421
 322:Core/Src/main.c ****     }
 1655              		.loc 1 322 20 is_stmt 0 view .LVU422
ARM GAS  C:\Temp\cckKiP1p.s 			page 63


 1656 0080 074B     		ldr	r3, .L89+24
 1657 0082 0022     		movs	r2, #0
 1658 0084 1A70     		strb	r2, [r3]
 1659 0086 F3E7     		b	.L85
 1660              	.L90:
 1661              		.align	2
 1662              	.L89:
 1663 0088 00000240 		.word	1073872896
 1664 008c 00000000 		.word	calibrated
 1665 0090 00000000 		.word	tof_odr
 1666 0094 00000000 		.word	fastestODR
 1667 0098 00000000 		.word	htim2
 1668 009c 00000000 		.word	htim3
 1669 00a0 00000000 		.word	clearToGetL1
 1670              		.cfi_endproc
 1671              	.LFE145:
 1673              		.global	counter
 1674              		.section	.bss.counter,"aw",%nobits
 1675              		.align	2
 1678              	counter:
 1679 0000 00000000 		.space	4
 1680              		.global	calibrated
 1681              		.section	.bss.calibrated,"aw",%nobits
 1684              	calibrated:
 1685 0000 00       		.space	1
 1686              		.global	clearToGetL1
 1687              		.section	.bss.clearToGetL1,"aw",%nobits
 1690              	clearToGetL1:
 1691 0000 00       		.space	1
 1692              		.global	clearToSend
 1693              		.section	.bss.clearToSend,"aw",%nobits
 1696              	clearToSend:
 1697 0000 00       		.space	1
 1698              		.global	bigBuffer
 1699              		.section	.bss.bigBuffer,"aw",%nobits
 1700              		.align	2
 1703              	bigBuffer:
 1704 0000 00000000 		.space	42
 1704      00000000 
 1704      00000000 
 1704      00000000 
 1704      00000000 
 1705              		.global	numberOfSimulinkBytes
 1706              		.section	.rodata.numberOfSimulinkBytes,"a"
 1707              		.align	2
 1710              	numberOfSimulinkBytes:
 1711 0000 24000000 		.word	36
 1712              		.global	expectedTerminator
 1713              		.section	.rodata.expectedTerminator,"a"
 1714              		.align	2
 1717              	expectedTerminator:
 1718 0000 415F4A   		.ascii	"A_J"
 1719              		.global	expectedHeader
 1720              		.section	.rodata.expectedHeader,"a"
 1721              		.align	2
 1724              	expectedHeader:
 1725 0000 4A5F41   		.ascii	"J_A"
ARM GAS  C:\Temp\cckKiP1p.s 			page 64


 1726              		.global	terminator
 1727              		.section	.data.terminator,"aw"
 1728              		.align	2
 1731              	terminator:
 1732 0000 415F4A00 		.word	4874049
 1733              		.global	header
 1734              		.section	.data.header,"aw"
 1735              		.align	2
 1738              	header:
 1739 0000 4A5F4100 		.word	4284234
 1740              		.global	mag_axis
 1741              		.section	.bss.mag_axis,"aw",%nobits
 1742              		.align	2
 1745              	mag_axis:
 1746 0000 00000000 		.space	12
 1746      00000000 
 1746      00000000 
 1747              		.global	accel2_axis
 1748              		.section	.bss.accel2_axis,"aw",%nobits
 1749              		.align	2
 1752              	accel2_axis:
 1753 0000 00000000 		.space	12
 1753      00000000 
 1753      00000000 
 1754              		.global	gyro_axis
 1755              		.section	.bss.gyro_axis,"aw",%nobits
 1756              		.align	2
 1759              	gyro_axis:
 1760 0000 00000000 		.space	12
 1760      00000000 
 1760      00000000 
 1761              		.global	accel1_axis
 1762              		.section	.bss.accel1_axis,"aw",%nobits
 1763              		.align	2
 1766              	accel1_axis:
 1767 0000 00000000 		.space	12
 1767      00000000 
 1767      00000000 
 1768              		.global	Profile
 1769              		.section	.bss.Profile,"aw",%nobits
 1770              		.align	2
 1773              	Profile:
 1774 0000 00000000 		.space	20
 1774      00000000 
 1774      00000000 
 1774      00000000 
 1774      00000000 
 1775              		.global	TOF_right
 1776              		.section	.bss.TOF_right,"aw",%nobits
 1777              		.align	2
 1780              	TOF_right:
 1781 0000 00000000 		.space	72
 1781      00000000 
 1781      00000000 
 1781      00000000 
 1781      00000000 
 1782              		.global	TOF_centre
ARM GAS  C:\Temp\cckKiP1p.s 			page 65


 1783              		.section	.bss.TOF_centre,"aw",%nobits
 1784              		.align	2
 1787              	TOF_centre:
 1788 0000 00000000 		.space	72
 1788      00000000 
 1788      00000000 
 1788      00000000 
 1788      00000000 
 1789              		.global	TOF_left
 1790              		.section	.bss.TOF_left,"aw",%nobits
 1791              		.align	2
 1794              	TOF_left:
 1795 0000 00000000 		.space	72
 1795      00000000 
 1795      00000000 
 1795      00000000 
 1795      00000000 
 1796              		.global	hdma_usart2_tx
 1797              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 1798              		.align	2
 1801              	hdma_usart2_tx:
 1802 0000 00000000 		.space	96
 1802      00000000 
 1802      00000000 
 1802      00000000 
 1802      00000000 
 1803              		.global	huart2
 1804              		.section	.bss.huart2,"aw",%nobits
 1805              		.align	2
 1808              	huart2:
 1809 0000 00000000 		.space	72
 1809      00000000 
 1809      00000000 
 1809      00000000 
 1809      00000000 
 1810              		.global	htim3
 1811              		.section	.bss.htim3,"aw",%nobits
 1812              		.align	2
 1815              	htim3:
 1816 0000 00000000 		.space	72
 1816      00000000 
 1816      00000000 
 1816      00000000 
 1816      00000000 
 1817              		.global	htim2
 1818              		.section	.bss.htim2,"aw",%nobits
 1819              		.align	2
 1822              	htim2:
 1823 0000 00000000 		.space	72
 1823      00000000 
 1823      00000000 
 1823      00000000 
 1823      00000000 
 1824              		.text
 1825              	.Letext0:
 1826              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1827              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
ARM GAS  C:\Temp\cckKiP1p.s 			page 66


 1828              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1829              		.file 6 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1830              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1831              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1832              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1833              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1834              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1835              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1836              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1837              		.file 14 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 1838              		.file 15 "Drivers/BSP/IKS02A1/iks02a1_motion_sensors.h"
 1839              		.file 16 "Drivers/BSP/53L1A2/53l1a2_ranging_sensor.h"
 1840              		.file 17 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1841              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1842              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1843              		.file 20 "Core/Inc/VL53L1A1_Simulink.h"
 1844              		.file 21 "Core/Inc/IKS02A1_Simulink.h"
 1845              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1846              		.file 23 "<built-in>"
ARM GAS  C:\Temp\cckKiP1p.s 			page 67


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\cckKiP1p.s:21     .text.MX_GPIO_Init:00000000 $t
  C:\Temp\cckKiP1p.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\cckKiP1p.s:198    .text.MX_GPIO_Init:000000cc $d
  C:\Temp\cckKiP1p.s:205    .text.MX_DMA_Init:00000000 $t
  C:\Temp\cckKiP1p.s:210    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\cckKiP1p.s:278    .text.MX_DMA_Init:00000050 $d
  C:\Temp\cckKiP1p.s:283    .text.bytesToFloat_main:00000000 $t
  C:\Temp\cckKiP1p.s:289    .text.bytesToFloat_main:00000000 bytesToFloat_main
  C:\Temp\cckKiP1p.s:319    .text.bytesToInt32_main:00000000 $t
  C:\Temp\cckKiP1p.s:325    .text.bytesToInt32_main:00000000 bytesToInt32_main
  C:\Temp\cckKiP1p.s:360    .text.receivedFromSimulink:00000000 $t
  C:\Temp\cckKiP1p.s:366    .text.receivedFromSimulink:00000000 receivedFromSimulink
  C:\Temp\cckKiP1p.s:487    .text.receivedFromSimulink:000000b0 $d
  C:\Temp\cckKiP1p.s:500    .text.configureTimer:00000000 $t
  C:\Temp\cckKiP1p.s:506    .text.configureTimer:00000000 configureTimer
  C:\Temp\cckKiP1p.s:580    .text.configureTimer:00000058 $d
  C:\Temp\cckKiP1p.s:586    .text.configureOtherTimer:00000000 $t
  C:\Temp\cckKiP1p.s:592    .text.configureOtherTimer:00000000 configureOtherTimer
  C:\Temp\cckKiP1p.s:666    .text.configureOtherTimer:00000054 $d
  C:\Temp\cckKiP1p.s:673    .text.get_fastest_odr:00000000 $t
  C:\Temp\cckKiP1p.s:679    .text.get_fastest_odr:00000000 get_fastest_odr
  C:\Temp\cckKiP1p.s:732    .text.sendToSimulink:00000000 $t
  C:\Temp\cckKiP1p.s:738    .text.sendToSimulink:00000000 sendToSimulink
  C:\Temp\cckKiP1p.s:945    .text.sendToSimulink:00000194 $d
  C:\Temp\cckKiP1p.s:1808   .bss.huart2:00000000 huart2
  C:\Temp\cckKiP1p.s:1738   .data.header:00000000 header
  C:\Temp\cckKiP1p.s:1794   .bss.TOF_left:00000000 TOF_left
  C:\Temp\cckKiP1p.s:1787   .bss.TOF_centre:00000000 TOF_centre
  C:\Temp\cckKiP1p.s:1780   .bss.TOF_right:00000000 TOF_right
  C:\Temp\cckKiP1p.s:1766   .bss.accel1_axis:00000000 accel1_axis
  C:\Temp\cckKiP1p.s:1759   .bss.gyro_axis:00000000 gyro_axis
  C:\Temp\cckKiP1p.s:1752   .bss.accel2_axis:00000000 accel2_axis
  C:\Temp\cckKiP1p.s:1745   .bss.mag_axis:00000000 mag_axis
  C:\Temp\cckKiP1p.s:1678   .bss.counter:00000000 counter
  C:\Temp\cckKiP1p.s:1731   .data.terminator:00000000 terminator
  C:\Temp\cckKiP1p.s:962    .text.initialCalibration:00000000 $t
  C:\Temp\cckKiP1p.s:968    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\cckKiP1p.s:1052   .text.initialCalibration:00000074 $d
  C:\Temp\cckKiP1p.s:1703   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\cckKiP1p.s:1684   .bss.calibrated:00000000 calibrated
  C:\Temp\cckKiP1p.s:1065   .text.Error_Handler:00000000 $t
  C:\Temp\cckKiP1p.s:1071   .text.Error_Handler:00000000 Error_Handler
  C:\Temp\cckKiP1p.s:1103   .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\cckKiP1p.s:1108   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\cckKiP1p.s:1165   .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\cckKiP1p.s:1171   .text.MX_TIM2_Init:00000000 $t
  C:\Temp\cckKiP1p.s:1176   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\cckKiP1p.s:1275   .text.MX_TIM2_Init:00000064 $d
  C:\Temp\cckKiP1p.s:1822   .bss.htim2:00000000 htim2
  C:\Temp\cckKiP1p.s:1280   .text.MX_TIM3_Init:00000000 $t
  C:\Temp\cckKiP1p.s:1285   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
  C:\Temp\cckKiP1p.s:1384   .text.MX_TIM3_Init:00000060 $d
  C:\Temp\cckKiP1p.s:1815   .bss.htim3:00000000 htim3
  C:\Temp\cckKiP1p.s:1390   .text.SystemClock_Config:00000000 $t
  C:\Temp\cckKiP1p.s:1396   .text.SystemClock_Config:00000000 SystemClock_Config
ARM GAS  C:\Temp\cckKiP1p.s 			page 68


  C:\Temp\cckKiP1p.s:1541   .text.SystemClock_Config:00000098 $d
  C:\Temp\cckKiP1p.s:1547   .text.main:00000000 $t
  C:\Temp\cckKiP1p.s:1553   .text.main:00000000 main
  C:\Temp\cckKiP1p.s:1663   .text.main:00000088 $d
  C:\Temp\cckKiP1p.s:1690   .bss.clearToGetL1:00000000 clearToGetL1
  C:\Temp\cckKiP1p.s:1675   .bss.counter:00000000 $d
  C:\Temp\cckKiP1p.s:1685   .bss.calibrated:00000000 $d
  C:\Temp\cckKiP1p.s:1691   .bss.clearToGetL1:00000000 $d
  C:\Temp\cckKiP1p.s:1696   .bss.clearToSend:00000000 clearToSend
  C:\Temp\cckKiP1p.s:1697   .bss.clearToSend:00000000 $d
  C:\Temp\cckKiP1p.s:1700   .bss.bigBuffer:00000000 $d
  C:\Temp\cckKiP1p.s:1710   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\cckKiP1p.s:1707   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\cckKiP1p.s:1717   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\cckKiP1p.s:1714   .rodata.expectedTerminator:00000000 $d
  C:\Temp\cckKiP1p.s:1724   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\cckKiP1p.s:1721   .rodata.expectedHeader:00000000 $d
  C:\Temp\cckKiP1p.s:1728   .data.terminator:00000000 $d
  C:\Temp\cckKiP1p.s:1735   .data.header:00000000 $d
  C:\Temp\cckKiP1p.s:1742   .bss.mag_axis:00000000 $d
  C:\Temp\cckKiP1p.s:1749   .bss.accel2_axis:00000000 $d
  C:\Temp\cckKiP1p.s:1756   .bss.gyro_axis:00000000 $d
  C:\Temp\cckKiP1p.s:1763   .bss.accel1_axis:00000000 $d
  C:\Temp\cckKiP1p.s:1773   .bss.Profile:00000000 Profile
  C:\Temp\cckKiP1p.s:1770   .bss.Profile:00000000 $d
  C:\Temp\cckKiP1p.s:1777   .bss.TOF_right:00000000 $d
  C:\Temp\cckKiP1p.s:1784   .bss.TOF_centre:00000000 $d
  C:\Temp\cckKiP1p.s:1791   .bss.TOF_left:00000000 $d
  C:\Temp\cckKiP1p.s:1801   .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
  C:\Temp\cckKiP1p.s:1798   .bss.hdma_usart2_tx:00000000 $d
  C:\Temp\cckKiP1p.s:1805   .bss.huart2:00000000 $d
  C:\Temp\cckKiP1p.s:1812   .bss.htim3:00000000 $d
  C:\Temp\cckKiP1p.s:1819   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
tof_fsr
tof_odr
accel1_fsr
accel1_odr
gyro_fsr
gyro_odr
accel2_fsr
accel2_odr
mag_odr
SystemCoreClock
HAL_UART_Transmit
temperature
fastestODR
HAL_UART_Receive
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
ARM GAS  C:\Temp\cckKiP1p.s 			page 69


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
calibrate_VL53L1A1
initVL53L1A1
initIKS02A1
calibrate_IKS02A1
HAL_TIM_Base_Start_IT
getIKS02A1
getVL53L1A1
