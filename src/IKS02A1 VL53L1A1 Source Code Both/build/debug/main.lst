ARM GAS  C:\Temp\ccw7qgqf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB150:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "iks02a1_motion_sensors.h"
  25:Core/Src/main.c **** #include "IKS02A1_Simulink.h"
  26:Core/Src/main.c **** #include "VL53L1A1_Simulink.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  46:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** UART_HandleTypeDef huart2;
  49:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel1_axis;
  54:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t gyro_axis;
  55:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel2_axis;
  56:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t mag_axis;
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  62:Core/Src/main.c **** void SystemClock_Config(void);
  63:Core/Src/main.c **** static void MX_GPIO_Init(void);
  64:Core/Src/main.c **** static void MX_DMA_Init(void);
  65:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  66:Core/Src/main.c **** static void MX_TIM2_Init(void);
  67:Core/Src/main.c **** static void MX_TIM3_Init(void);
  68:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END PFP */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  73:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  74:Core/Src/main.c **** const uint8_t* header = 'A_J';
  75:Core/Src/main.c **** const uint8_t* terminator = 'J_A';
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  78:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  79:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2+2+2+2+1);
  80:Core/Src/main.c **** uint8_t bigBuffer[36+3+3] = {0};
  81:Core/Src/main.c **** uint8_t clearToSend = 0;
  82:Core/Src/main.c **** uint8_t clearToGetL1 = 0;
  83:Core/Src/main.c **** uint8_t calibrated = 0;
  84:Core/Src/main.c **** int32_t counter = 0;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** int32_t tof_fsr = 1;
  87:Core/Src/main.c **** int32_t tof_odr   = 30;
  88:Core/Src/main.c **** uint16_t rangingProfile = 1;
ARM GAS  C:\Temp\ccw7qgqf.s 			page 3


  89:Core/Src/main.c **** uint16_t timingBudget   = 30;
  90:Core/Src/main.c **** uint32_t pollingPeriod  = 250;
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** VL53L1_Result TOF_left_result;
  93:Core/Src/main.c **** VL53L1_Result TOF_centre_result;
  94:Core/Src/main.c **** VL53L1_Result TOF_right_result;
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** volatile int IntCount;
  97:Core/Src/main.c **** #define isInterrupt 0 /* If isInterrupt = 1 then device working in interrupt mode, else device work
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** extern int32_t accel1_fsr;
 101:Core/Src/main.c **** extern float accel1_odr;
 102:Core/Src/main.c **** extern int32_t gyro_fsr;
 103:Core/Src/main.c **** extern float gyro_odr;
 104:Core/Src/main.c **** extern int32_t accel2_fsr;
 105:Core/Src/main.c **** extern float accel2_odr;
 106:Core/Src/main.c **** extern float mag_odr;
 107:Core/Src/main.c **** extern float_t temperature;
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** extern float fastestODR;
 110:Core/Src/main.c ****  
 111:Core/Src/main.c **** float   bytesToFloat_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4) {
 112:Core/Src/main.c ****     float result;
 113:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****     // Use memcpy to copy the 4 bytes into a float (this preserves the binary representation)
 116:Core/Src/main.c ****     memcpy(&result, bytes, sizeof(float));
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****     return result;
 119:Core/Src/main.c **** }
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** int32_t bytesToInt32_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4)  {
 122:Core/Src/main.c ****     int32_t result;
 123:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****     // Use memcpy to copy the 4 bytes into a int32_t (this preserves the binary representation)
 126:Core/Src/main.c ****     memcpy(&result, bytes, sizeof(int32_t));
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****     return result;
 129:Core/Src/main.c **** }
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** void receivedFromSimulink(uint8_t* bigBuffer){
 132:Core/Src/main.c ****     tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuf
 133:Core/Src/main.c ****     tof_odr = bytesToInt32_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 134:Core/Src/main.c ****     
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****     accel1_fsr = bytesToInt32_main(bigBuffer[11 + 0] , bigBuffer[11 + 1] , bigBuffer[11 + 2] ,  big
 137:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 138:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 139:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 140:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 141:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 142:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 143:Core/Src/main.c ****     
 144:Core/Src/main.c **** }
 145:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 4


 146:Core/Src/main.c **** void configureTimer(float desired_frequency, TIM_TypeDef* tim) {
 147:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 148:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
 151:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
 154:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 155:Core/Src/main.c ****     if (prescaler > 65535) {
 156:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 157:Core/Src/main.c ****     }
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
 160:Core/Src/main.c ****     uint64_t arr = (uint64_t)(timer_period / (prescaler + 1));
 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****     // Update the timer registers
 165:Core/Src/main.c ****     tim->PSC = prescaler;   // Set the prescaler
 166:Core/Src/main.c ****     tim->ARR = arr;         // Set the auto-reload register
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 169:Core/Src/main.c ****     tim->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 170:Core/Src/main.c **** }
 171:Core/Src/main.c **** // Function to return the fastest (highest) ODR
 172:Core/Src/main.c **** float get_fastest_odr(float odr1, float odr2, float odr3, float odr4, float odr5) {
 173:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****     if (odr2 > fastest) {
 176:Core/Src/main.c ****         fastest = odr2;
 177:Core/Src/main.c ****     }
 178:Core/Src/main.c ****     if (odr3 > fastest) {
 179:Core/Src/main.c ****         fastest = odr3;
 180:Core/Src/main.c ****     }
 181:Core/Src/main.c ****     if (odr4 > fastest) {
 182:Core/Src/main.c ****         fastest = odr4;
 183:Core/Src/main.c ****     }
 184:Core/Src/main.c ****     if (odr5 > fastest) {
 185:Core/Src/main.c ****         fastest = odr5;
 186:Core/Src/main.c ****     }
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     return fastest;
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** void sendToSimulink(){
 192:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Distance)  , 4 , HAL_MAX_DELAY);
 195:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Ambient )  , 4 , HAL_MAX_DELAY);
 196:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Signal  )  , 4 , HAL_MAX_DELAY);
 197:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Status  )  , 4 , HAL_MAX_DELAY);
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Distance)  , 4 , HAL_MAX_DELAY);
 200:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Ambient )  , 4 , HAL_MAX_DELAY);
 201:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Signal  )  , 4 , HAL_MAX_DELAY);
 202:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Status  )  , 4 , HAL_MAX_DELAY);
ARM GAS  C:\Temp\ccw7qgqf.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Distance)  , 4 , HAL_MAX_DELAY);
 205:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Ambient )  , 4 , HAL_MAX_DELAY);
 206:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Signal  )  , 4 , HAL_MAX_DELAY);
 207:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Status  )  , 4 , HAL_MAX_DELAY);
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &(accel1_axis.x)  ,4 , HAL_MAX_DELAY);
 210:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
 211:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
 212:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
 213:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
 214:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
 215:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 216:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
 217:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 218:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 219:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
 220:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
 221:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &counter          ,4 , HAL_MAX_DELAY);
 224:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &fastestODR       ,4 , HAL_MAX_DELAY);
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 227:Core/Src/main.c **** }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** void initialCalibration(){
 230:Core/Src/main.c ****   HAL_UART_Receive(&huart2, &bigBuffer, 42 ,HAL_MAX_DELAY);
 231:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 232:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 233:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 234:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 235:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 236:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 237:Core/Src/main.c ****         calibrated = 1;
 238:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 239:Core/Src/main.c ****         fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 240:Core/Src/main.c ****   }
 241:Core/Src/main.c **** }
 242:Core/Src/main.c **** 
 243:Core/Src/main.c **** /* USER CODE END 0 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c **** /**
 246:Core/Src/main.c ****   * @brief  The application entry point.
 247:Core/Src/main.c ****   * @retval int
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** int main(void)
 250:Core/Src/main.c **** {
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END 1 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 259:Core/Src/main.c ****   HAL_Init();
ARM GAS  C:\Temp\ccw7qgqf.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 262:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 263:Core/Src/main.c ****   /* USER CODE END Init */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* Configure the system clock */
 266:Core/Src/main.c ****   SystemClock_Config();
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END SysInit */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* Initialize all configured peripherals */
 273:Core/Src/main.c ****   MX_GPIO_Init();
 274:Core/Src/main.c ****   MX_DMA_Init();
 275:Core/Src/main.c ****   MX_USART2_UART_Init();
 276:Core/Src/main.c ****   MX_TIM2_Init();
 277:Core/Src/main.c ****   MX_TIM3_Init();
 278:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 279:Core/Src/main.c ****   while (calibrated != 1){
 280:Core/Src/main.c ****     initialCalibration();
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   XNUCLEO53L1A1_Init(); // initializes GPIO Expanders
 284:Core/Src/main.c ****   
 285:Core/Src/main.c ****   TOF_left_result.Address = ToF_Left;
 286:Core/Src/main.c ****   TOF_centre_result.Address = ToF_Centre;
 287:Core/Src/main.c ****   TOF_right_result.Address = ToF_Right;
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_LEFT,   ToF_Left);
 290:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_CENTER, ToF_Centre);
 291:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_RIGHT,  ToF_Right);
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   initIKS02A1();
 294:Core/Src/main.c ****   calibrate_IKS02A1();
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   configureTimer(fastestODR,TIM2);
 297:Core/Src/main.c ****   configureTimer(tof_odr,TIM3);
 298:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 299:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 300:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE END 2 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* Infinite loop */
 305:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 306:Core/Src/main.c ****   while (1)
 307:Core/Src/main.c ****   {
 308:Core/Src/main.c ****     getIKS02A1(); 
 309:Core/Src/main.c ****     
 310:Core/Src/main.c ****     if (clearToGetL1 == 1){
 311:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 312:Core/Src/main.c ****       getVL53L1A1(&TOF_centre_result);
 313:Core/Src/main.c ****       getVL53L1A1(&TOF_right_result);
 314:Core/Src/main.c ****       clearToGetL1 = 0;
 315:Core/Src/main.c ****     }
 316:Core/Src/main.c ****     /* USER CODE END WHILE */
ARM GAS  C:\Temp\ccw7qgqf.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 319:Core/Src/main.c ****   }
 320:Core/Src/main.c ****   /* USER CODE END 3 */
 321:Core/Src/main.c **** }
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** /**
 324:Core/Src/main.c ****   * @brief System Clock Configuration
 325:Core/Src/main.c ****   * @retval None
 326:Core/Src/main.c ****   */
 327:Core/Src/main.c **** void SystemClock_Config(void)
 328:Core/Src/main.c **** {
 329:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 330:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 333:Core/Src/main.c ****   */
 334:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 335:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 338:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 339:Core/Src/main.c ****   */
 340:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 341:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 342:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 343:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 344:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 345:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 346:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 347:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 348:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 349:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 350:Core/Src/main.c ****   {
 351:Core/Src/main.c ****     Error_Handler();
 352:Core/Src/main.c ****   }
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 355:Core/Src/main.c ****   */
 356:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 357:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 358:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 359:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 360:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 361:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 364:Core/Src/main.c ****   {
 365:Core/Src/main.c ****     Error_Handler();
 366:Core/Src/main.c ****   }
 367:Core/Src/main.c **** }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /**
 370:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 371:Core/Src/main.c ****   * @param None
 372:Core/Src/main.c ****   * @retval None
 373:Core/Src/main.c ****   */
ARM GAS  C:\Temp\ccw7qgqf.s 			page 8


 374:Core/Src/main.c **** static void MX_TIM2_Init(void)
 375:Core/Src/main.c **** {
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 382:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 387:Core/Src/main.c ****   htim2.Instance = TIM2;
 388:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 389:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 390:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 391:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 392:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 393:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 394:Core/Src/main.c ****   {
 395:Core/Src/main.c ****     Error_Handler();
 396:Core/Src/main.c ****   }
 397:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 398:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****     Error_Handler();
 401:Core/Src/main.c ****   }
 402:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 403:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 404:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 405:Core/Src/main.c ****   {
 406:Core/Src/main.c ****     Error_Handler();
 407:Core/Src/main.c ****   }
 408:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c **** }
 413:Core/Src/main.c **** 
 414:Core/Src/main.c **** /**
 415:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 416:Core/Src/main.c ****   * @param None
 417:Core/Src/main.c ****   * @retval None
 418:Core/Src/main.c ****   */
 419:Core/Src/main.c **** static void MX_TIM3_Init(void)
 420:Core/Src/main.c **** {
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 427:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 430:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 9


 431:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 432:Core/Src/main.c ****   htim3.Instance = TIM3;
 433:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 434:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 435:Core/Src/main.c ****   htim3.Init.Period = 65535;
 436:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 437:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 438:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 439:Core/Src/main.c ****   {
 440:Core/Src/main.c ****     Error_Handler();
 441:Core/Src/main.c ****   }
 442:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 443:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 444:Core/Src/main.c ****   {
 445:Core/Src/main.c ****     Error_Handler();
 446:Core/Src/main.c ****   }
 447:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 448:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 449:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 450:Core/Src/main.c ****   {
 451:Core/Src/main.c ****     Error_Handler();
 452:Core/Src/main.c ****   }
 453:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c **** }
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** /**
 460:Core/Src/main.c ****   * @brief USART2 Initialization Function
 461:Core/Src/main.c ****   * @param None
 462:Core/Src/main.c ****   * @retval None
 463:Core/Src/main.c ****   */
 464:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 465:Core/Src/main.c **** {
 466:Core/Src/main.c **** 
 467:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 474:Core/Src/main.c ****   huart2.Instance = USART2;
 475:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 476:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 477:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 478:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 479:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 480:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 481:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 482:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 483:Core/Src/main.c ****   {
 484:Core/Src/main.c ****     Error_Handler();
 485:Core/Src/main.c ****   }
 486:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 487:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 10


 488:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 489:Core/Src/main.c **** 
 490:Core/Src/main.c **** }
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** /**
 493:Core/Src/main.c ****   * Enable DMA controller clock
 494:Core/Src/main.c ****   */
 495:Core/Src/main.c **** static void MX_DMA_Init(void)
 496:Core/Src/main.c **** {
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /* DMA controller clock enable */
 499:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* DMA interrupt init */
 502:Core/Src/main.c ****   /* DMA1_Stream0_IRQn interrupt configuration */
 503:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 504:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 505:Core/Src/main.c ****   /* DMA1_Stream1_IRQn interrupt configuration */
 506:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 507:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 508:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 509:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 510:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 511:Core/Src/main.c **** 
 512:Core/Src/main.c **** }
 513:Core/Src/main.c **** 
 514:Core/Src/main.c **** /**
 515:Core/Src/main.c ****   * @brief GPIO Initialization Function
 516:Core/Src/main.c ****   * @param None
 517:Core/Src/main.c ****   * @retval None
 518:Core/Src/main.c ****   */
 519:Core/Src/main.c **** static void MX_GPIO_Init(void)
 520:Core/Src/main.c **** {
  28              		.loc 1 520 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 521:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 521 3 view .LVU1
  41              		.loc 1 521 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 522:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 523:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 524:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 11


 525:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 526:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 526 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 526 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 526 3 view .LVU5
  53 0012 2E4B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 526 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 526 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 526 3 view .LVU8
 527:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 527 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 527 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 527 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 527 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 527 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 527 3 view .LVU14
 528:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 528 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 528 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 528 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 528 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 528 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 528 3 view .LVU20
 529:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 529 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 529 3 view .LVU22
ARM GAS  C:\Temp\ccw7qgqf.s 			page 12


 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 529 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 529 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 529 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 529 3 view .LVU26
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 532:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 532 3 view .LVU27
 114 0062 1B4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 535:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 535 3 view .LVU28
 121              		.loc 1 535 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 536:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 536 3 is_stmt 1 view .LVU30
 125              		.loc 1 536 24 is_stmt 0 view .LVU31
 126 0074 4FF40416 		mov	r6, #2162688
 127 0078 0696     		str	r6, [sp, #24]
 537:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 537 3 is_stmt 1 view .LVU32
 129              		.loc 1 537 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 538:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 538 3 is_stmt 1 view .LVU34
 132 007c 05A9     		add	r1, sp, #20
 133 007e 1548     		ldr	r0, .L3+8
 134 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL1:
 539:Core/Src/main.c **** 
 540:Core/Src/main.c ****   /*Configure GPIO pin : L1_INT_Pin */
 541:Core/Src/main.c ****   GPIO_InitStruct.Pin = L1_INT_Pin;
 136              		.loc 1 541 3 view .LVU35
 137              		.loc 1 541 23 is_stmt 0 view .LVU36
 138 0084 1023     		movs	r3, #16
 139 0086 0593     		str	r3, [sp, #20]
 542:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 140              		.loc 1 542 3 is_stmt 1 view .LVU37
 141              		.loc 1 542 24 is_stmt 0 view .LVU38
 142 0088 0696     		str	r6, [sp, #24]
 543:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
ARM GAS  C:\Temp\ccw7qgqf.s 			page 13


 143              		.loc 1 543 3 is_stmt 1 view .LVU39
 144              		.loc 1 543 24 is_stmt 0 view .LVU40
 145 008a 0126     		movs	r6, #1
 146 008c 0796     		str	r6, [sp, #28]
 544:Core/Src/main.c ****   HAL_GPIO_Init(L1_INT_GPIO_Port, &GPIO_InitStruct);
 147              		.loc 1 544 3 is_stmt 1 view .LVU41
 148 008e 05A9     		add	r1, sp, #20
 149 0090 2846     		mov	r0, r5
 150 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL2:
 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 547:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 152              		.loc 1 547 3 view .LVU42
 153              		.loc 1 547 23 is_stmt 0 view .LVU43
 154 0096 2023     		movs	r3, #32
 155 0098 0593     		str	r3, [sp, #20]
 548:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 548 3 is_stmt 1 view .LVU44
 157              		.loc 1 548 24 is_stmt 0 view .LVU45
 158 009a 0696     		str	r6, [sp, #24]
 549:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 159              		.loc 1 549 3 is_stmt 1 view .LVU46
 160              		.loc 1 549 24 is_stmt 0 view .LVU47
 161 009c 0794     		str	r4, [sp, #28]
 550:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 162              		.loc 1 550 3 is_stmt 1 view .LVU48
 163              		.loc 1 550 25 is_stmt 0 view .LVU49
 164 009e 0894     		str	r4, [sp, #32]
 551:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 165              		.loc 1 551 3 is_stmt 1 view .LVU50
 166 00a0 05A9     		add	r1, sp, #20
 167 00a2 2846     		mov	r0, r5
 168 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   /* EXTI interrupt init*/
 554:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 170              		.loc 1 554 3 view .LVU51
 171 00a8 2246     		mov	r2, r4
 172 00aa 2146     		mov	r1, r4
 173 00ac 0A20     		movs	r0, #10
 174 00ae FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL4:
 555:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 176              		.loc 1 555 3 view .LVU52
 177 00b2 0A20     		movs	r0, #10
 178 00b4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL5:
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 180              		.loc 1 557 3 view .LVU53
 181 00b8 2246     		mov	r2, r4
 182 00ba 2146     		mov	r1, r4
 183 00bc 2820     		movs	r0, #40
 184 00be FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL6:
ARM GAS  C:\Temp\ccw7qgqf.s 			page 14


 558:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 186              		.loc 1 558 3 view .LVU54
 187 00c2 2820     		movs	r0, #40
 188 00c4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL7:
 559:Core/Src/main.c **** 
 560:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 561:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 562:Core/Src/main.c **** }
 190              		.loc 1 562 1 is_stmt 0 view .LVU55
 191 00c8 0AB0     		add	sp, sp, #40
 192              		.cfi_def_cfa_offset 16
 193              		@ sp needed
 194 00ca 70BD     		pop	{r4, r5, r6, pc}
 195              	.L4:
 196              		.align	2
 197              	.L3:
 198 00cc 00380240 		.word	1073887232
 199 00d0 00000240 		.word	1073872896
 200 00d4 00080240 		.word	1073874944
 201              		.cfi_endproc
 202              	.LFE150:
 204              		.section	.text.MX_DMA_Init,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	MX_DMA_Init:
 211              	.LFB149:
 496:Core/Src/main.c **** 
 212              		.loc 1 496 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 220 0002 82B0     		sub	sp, sp, #8
 221              		.cfi_def_cfa_offset 16
 499:Core/Src/main.c **** 
 222              		.loc 1 499 3 view .LVU57
 223              	.LBB8:
 499:Core/Src/main.c **** 
 224              		.loc 1 499 3 view .LVU58
 225 0004 0024     		movs	r4, #0
 226 0006 0194     		str	r4, [sp, #4]
 499:Core/Src/main.c **** 
 227              		.loc 1 499 3 view .LVU59
 228 0008 114B     		ldr	r3, .L7
 229 000a 1A6B     		ldr	r2, [r3, #48]
 230 000c 42F40012 		orr	r2, r2, #2097152
 231 0010 1A63     		str	r2, [r3, #48]
 499:Core/Src/main.c **** 
 232              		.loc 1 499 3 view .LVU60
 233 0012 1B6B     		ldr	r3, [r3, #48]
 234 0014 03F40013 		and	r3, r3, #2097152
ARM GAS  C:\Temp\ccw7qgqf.s 			page 15


 235 0018 0193     		str	r3, [sp, #4]
 499:Core/Src/main.c **** 
 236              		.loc 1 499 3 view .LVU61
 237 001a 019B     		ldr	r3, [sp, #4]
 238              	.LBE8:
 499:Core/Src/main.c **** 
 239              		.loc 1 499 3 view .LVU62
 503:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 240              		.loc 1 503 3 view .LVU63
 241 001c 2246     		mov	r2, r4
 242 001e 2146     		mov	r1, r4
 243 0020 0B20     		movs	r0, #11
 244 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL8:
 504:Core/Src/main.c ****   /* DMA1_Stream1_IRQn interrupt configuration */
 246              		.loc 1 504 3 view .LVU64
 247 0026 0B20     		movs	r0, #11
 248 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL9:
 506:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 250              		.loc 1 506 3 view .LVU65
 251 002c 2246     		mov	r2, r4
 252 002e 2146     		mov	r1, r4
 253 0030 0C20     		movs	r0, #12
 254 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 255              	.LVL10:
 507:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 256              		.loc 1 507 3 view .LVU66
 257 0036 0C20     		movs	r0, #12
 258 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 259              	.LVL11:
 509:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 260              		.loc 1 509 3 view .LVU67
 261 003c 2246     		mov	r2, r4
 262 003e 2146     		mov	r1, r4
 263 0040 1120     		movs	r0, #17
 264 0042 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 265              	.LVL12:
 510:Core/Src/main.c **** 
 266              		.loc 1 510 3 view .LVU68
 267 0046 1120     		movs	r0, #17
 268 0048 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 269              	.LVL13:
 512:Core/Src/main.c **** 
 270              		.loc 1 512 1 is_stmt 0 view .LVU69
 271 004c 02B0     		add	sp, sp, #8
 272              		.cfi_def_cfa_offset 8
 273              		@ sp needed
 274 004e 10BD     		pop	{r4, pc}
 275              	.L8:
 276              		.align	2
 277              	.L7:
 278 0050 00380240 		.word	1073887232
 279              		.cfi_endproc
 280              	.LFE149:
 282              		.section	.text.bytesToFloat_main,"ax",%progbits
 283              		.align	1
ARM GAS  C:\Temp\ccw7qgqf.s 			page 16


 284              		.global	bytesToFloat_main
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	bytesToFloat_main:
 290              	.LVL14:
 291              	.LFB137:
 111:Core/Src/main.c ****     float result;
 292              		.loc 1 111 90 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 8
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 111:Core/Src/main.c ****     float result;
 297              		.loc 1 111 90 is_stmt 0 view .LVU71
 298 0000 82B0     		sub	sp, sp, #8
 299              		.cfi_def_cfa_offset 8
 112:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 300              		.loc 1 112 5 is_stmt 1 view .LVU72
 113:Core/Src/main.c **** 
 301              		.loc 1 113 5 view .LVU73
 113:Core/Src/main.c **** 
 302              		.loc 1 113 13 is_stmt 0 view .LVU74
 303 0002 8DF80400 		strb	r0, [sp, #4]
 304 0006 8DF80510 		strb	r1, [sp, #5]
 305 000a 8DF80620 		strb	r2, [sp, #6]
 306 000e 8DF80730 		strb	r3, [sp, #7]
 116:Core/Src/main.c **** 
 307              		.loc 1 116 5 is_stmt 1 view .LVU75
 118:Core/Src/main.c **** }
 308              		.loc 1 118 5 view .LVU76
 119:Core/Src/main.c **** 
 309              		.loc 1 119 1 is_stmt 0 view .LVU77
 310 0012 9DED010A 		vldr.32	s0, [sp, #4]
 311 0016 02B0     		add	sp, sp, #8
 312              		.cfi_def_cfa_offset 0
 313              		@ sp needed
 314 0018 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE137:
 318              		.section	.text.bytesToInt32_main,"ax",%progbits
 319              		.align	1
 320              		.global	bytesToInt32_main
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	bytesToInt32_main:
 326              	.LVL15:
 327              	.LFB138:
 121:Core/Src/main.c ****     int32_t result;
 328              		.loc 1 121 91 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 121:Core/Src/main.c ****     int32_t result;
 333              		.loc 1 121 91 is_stmt 0 view .LVU79
ARM GAS  C:\Temp\ccw7qgqf.s 			page 17


 334 0000 82B0     		sub	sp, sp, #8
 335              		.cfi_def_cfa_offset 8
 122:Core/Src/main.c ****     uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 336              		.loc 1 122 5 is_stmt 1 view .LVU80
 123:Core/Src/main.c **** 
 337              		.loc 1 123 5 view .LVU81
 123:Core/Src/main.c **** 
 338              		.loc 1 123 13 is_stmt 0 view .LVU82
 339 0002 8DF80400 		strb	r0, [sp, #4]
 340 0006 8DF80510 		strb	r1, [sp, #5]
 341 000a 8DF80620 		strb	r2, [sp, #6]
 342 000e 8DF80730 		strb	r3, [sp, #7]
 126:Core/Src/main.c **** 
 343              		.loc 1 126 5 is_stmt 1 view .LVU83
 344              	.LVL16:
 128:Core/Src/main.c **** }
 345              		.loc 1 128 5 view .LVU84
 129:Core/Src/main.c **** 
 346              		.loc 1 129 1 is_stmt 0 view .LVU85
 347 0012 0198     		ldr	r0, [sp, #4]
 348              	.LVL17:
 129:Core/Src/main.c **** 
 349              		.loc 1 129 1 view .LVU86
 350 0014 02B0     		add	sp, sp, #8
 351              		.cfi_def_cfa_offset 0
 352              	.LVL18:
 129:Core/Src/main.c **** 
 353              		.loc 1 129 1 view .LVU87
 354              		@ sp needed
 355 0016 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE138:
 359              		.section	.text.receivedFromSimulink,"ax",%progbits
 360              		.align	1
 361              		.global	receivedFromSimulink
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 366              	receivedFromSimulink:
 367              	.LVL19:
 368              	.LFB139:
 131:Core/Src/main.c ****     tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuf
 369              		.loc 1 131 46 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 131:Core/Src/main.c ****     tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuf
 373              		.loc 1 131 46 is_stmt 0 view .LVU89
 374 0000 10B5     		push	{r4, lr}
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 4, -8
 377              		.cfi_offset 14, -4
 378 0002 0446     		mov	r4, r0
 132:Core/Src/main.c ****     tof_odr = bytesToInt32_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 379              		.loc 1 132 5 is_stmt 1 view .LVU90
 132:Core/Src/main.c ****     tof_odr = bytesToInt32_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 380              		.loc 1 132 15 is_stmt 0 view .LVU91
ARM GAS  C:\Temp\ccw7qgqf.s 			page 18


 381 0004 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 382 0006 4279     		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 383 0008 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 384 000a C078     		ldrb	r0, [r0, #3]	@ zero_extendqisi2
 385              	.LVL20:
 132:Core/Src/main.c ****     tof_odr = bytesToInt32_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 386              		.loc 1 132 15 view .LVU92
 387 000c FFF7FEFF 		bl	bytesToInt32_main
 388              	.LVL21:
 132:Core/Src/main.c ****     tof_odr = bytesToInt32_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuf
 389              		.loc 1 132 13 view .LVU93
 390 0010 264B     		ldr	r3, .L15
 391 0012 1860     		str	r0, [r3]
 133:Core/Src/main.c ****     
 392              		.loc 1 133 5 is_stmt 1 view .LVU94
 133:Core/Src/main.c ****     
 393              		.loc 1 133 15 is_stmt 0 view .LVU95
 394 0014 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 395 0016 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 396 0018 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 397 001a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 398 001c FFF7FEFF 		bl	bytesToInt32_main
 399              	.LVL22:
 133:Core/Src/main.c ****     
 400              		.loc 1 133 13 view .LVU96
 401 0020 234B     		ldr	r3, .L15+4
 402 0022 1860     		str	r0, [r3]
 136:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 403              		.loc 1 136 5 is_stmt 1 view .LVU97
 136:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 404              		.loc 1 136 18 is_stmt 0 view .LVU98
 405 0024 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 406 0026 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 407 0028 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
 408 002a E07A     		ldrb	r0, [r4, #11]	@ zero_extendqisi2
 409 002c FFF7FEFF 		bl	bytesToInt32_main
 410              	.LVL23:
 136:Core/Src/main.c ****     accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  big
 411              		.loc 1 136 16 view .LVU99
 412 0030 204B     		ldr	r3, .L15+8
 413 0032 1860     		str	r0, [r3]
 137:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 414              		.loc 1 137 5 is_stmt 1 view .LVU100
 137:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 415              		.loc 1 137 18 is_stmt 0 view .LVU101
 416 0034 A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 417 0036 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 418 0038 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 419 003a E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2
 420 003c FFF7FEFF 		bl	bytesToFloat_main
 421              	.LVL24:
 137:Core/Src/main.c ****     gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  big
 422              		.loc 1 137 16 view .LVU102
 423 0040 1D4B     		ldr	r3, .L15+12
 424 0042 83ED000A 		vstr.32	s0, [r3]
 138:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 425              		.loc 1 138 5 is_stmt 1 view .LVU103
ARM GAS  C:\Temp\ccw7qgqf.s 			page 19


 138:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 426              		.loc 1 138 18 is_stmt 0 view .LVU104
 427 0046 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 428 0048 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 429 004a 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
 430 004c E07C     		ldrb	r0, [r4, #19]	@ zero_extendqisi2
 431 004e FFF7FEFF 		bl	bytesToInt32_main
 432              	.LVL25:
 138:Core/Src/main.c ****     gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  big
 433              		.loc 1 138 14 view .LVU105
 434 0052 1A4B     		ldr	r3, .L15+16
 435 0054 1860     		str	r0, [r3]
 139:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 436              		.loc 1 139 5 is_stmt 1 view .LVU106
 139:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 437              		.loc 1 139 18 is_stmt 0 view .LVU107
 438 0056 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 439 0058 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2
 440 005a 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 441 005c E07D     		ldrb	r0, [r4, #23]	@ zero_extendqisi2
 442 005e FFF7FEFF 		bl	bytesToFloat_main
 443              	.LVL26:
 139:Core/Src/main.c ****     accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  big
 444              		.loc 1 139 14 view .LVU108
 445 0062 174B     		ldr	r3, .L15+20
 446 0064 83ED000A 		vstr.32	s0, [r3]
 140:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 447              		.loc 1 140 5 is_stmt 1 view .LVU109
 140:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 448              		.loc 1 140 18 is_stmt 0 view .LVU110
 449 0068 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 450 006a 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 451 006c 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 452 006e E07E     		ldrb	r0, [r4, #27]	@ zero_extendqisi2
 453 0070 FFF7FEFF 		bl	bytesToInt32_main
 454              	.LVL27:
 140:Core/Src/main.c ****     accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  big
 455              		.loc 1 140 16 view .LVU111
 456 0074 134B     		ldr	r3, .L15+24
 457 0076 1860     		str	r0, [r3]
 141:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 458              		.loc 1 141 5 is_stmt 1 view .LVU112
 141:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 459              		.loc 1 141 18 is_stmt 0 view .LVU113
 460 0078 94F82230 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 461 007c 94F82120 		ldrb	r2, [r4, #33]	@ zero_extendqisi2
 462 0080 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 463 0084 E07F     		ldrb	r0, [r4, #31]	@ zero_extendqisi2
 464 0086 FFF7FEFF 		bl	bytesToFloat_main
 465              	.LVL28:
 141:Core/Src/main.c ****     mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  big
 466              		.loc 1 141 16 view .LVU114
 467 008a 0F4B     		ldr	r3, .L15+28
 468 008c 83ED000A 		vstr.32	s0, [r3]
 142:Core/Src/main.c ****     
 469              		.loc 1 142 5 is_stmt 1 view .LVU115
 142:Core/Src/main.c ****     
ARM GAS  C:\Temp\ccw7qgqf.s 			page 20


 470              		.loc 1 142 18 is_stmt 0 view .LVU116
 471 0090 94F82630 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
 472 0094 94F82520 		ldrb	r2, [r4, #37]	@ zero_extendqisi2
 473 0098 94F82410 		ldrb	r1, [r4, #36]	@ zero_extendqisi2
 474 009c 94F82300 		ldrb	r0, [r4, #35]	@ zero_extendqisi2
 475 00a0 FFF7FEFF 		bl	bytesToFloat_main
 476              	.LVL29:
 142:Core/Src/main.c ****     
 477              		.loc 1 142 13 view .LVU117
 478 00a4 094B     		ldr	r3, .L15+32
 479 00a6 83ED000A 		vstr.32	s0, [r3]
 144:Core/Src/main.c **** 
 480              		.loc 1 144 1 view .LVU118
 481 00aa 10BD     		pop	{r4, pc}
 482              	.LVL30:
 483              	.L16:
 144:Core/Src/main.c **** 
 484              		.loc 1 144 1 view .LVU119
 485              		.align	2
 486              	.L15:
 487 00ac 00000000 		.word	tof_fsr
 488 00b0 00000000 		.word	tof_odr
 489 00b4 00000000 		.word	accel1_fsr
 490 00b8 00000000 		.word	accel1_odr
 491 00bc 00000000 		.word	gyro_fsr
 492 00c0 00000000 		.word	gyro_odr
 493 00c4 00000000 		.word	accel2_fsr
 494 00c8 00000000 		.word	accel2_odr
 495 00cc 00000000 		.word	mag_odr
 496              		.cfi_endproc
 497              	.LFE139:
 499              		.global	__aeabi_f2ulz
 500              		.section	.text.configureTimer,"ax",%progbits
 501              		.align	1
 502              		.global	configureTimer
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 507              	configureTimer:
 508              	.LVL31:
 509              	.LFB140:
 146:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 510              		.loc 1 146 64 is_stmt 1 view -0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 146:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 514              		.loc 1 146 64 is_stmt 0 view .LVU121
 515 0000 38B5     		push	{r3, r4, r5, lr}
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 3, -16
 518              		.cfi_offset 4, -12
 519              		.cfi_offset 5, -8
 520              		.cfi_offset 14, -4
 521 0002 0546     		mov	r5, r0
 148:Core/Src/main.c **** 
 522              		.loc 1 148 5 is_stmt 1 view .LVU122
ARM GAS  C:\Temp\ccw7qgqf.s 			page 21


 148:Core/Src/main.c **** 
 523              		.loc 1 148 11 is_stmt 0 view .LVU123
 524 0004 114B     		ldr	r3, .L21
 525 0006 D3ED007A 		vldr.32	s15, [r3]	@ int
 526 000a F8EE677A 		vcvt.f32.u32	s15, s15
 527              	.LVL32:
 151:Core/Src/main.c **** 
 528              		.loc 1 151 5 is_stmt 1 view .LVU124
 151:Core/Src/main.c **** 
 529              		.loc 1 151 11 is_stmt 0 view .LVU125
 530 000e 87EE807A 		vdiv.f32	s14, s15, s0
 531              	.LVL33:
 154:Core/Src/main.c ****     if (prescaler > 65535) {
 532              		.loc 1 154 5 is_stmt 1 view .LVU126
 154:Core/Src/main.c ****     if (prescaler > 65535) {
 533              		.loc 1 154 50 is_stmt 0 view .LVU127
 534 0012 DFED0F7A 		vldr.32	s15, .L21+4
 535              	.LVL34:
 154:Core/Src/main.c ****     if (prescaler > 65535) {
 536              		.loc 1 154 50 view .LVU128
 537 0016 67EE277A 		vmul.f32	s15, s14, s15
 154:Core/Src/main.c ****     if (prescaler > 65535) {
 538              		.loc 1 154 14 view .LVU129
 539 001a FCEEE77A 		vcvt.u32.f32	s15, s15
 540 001e 17EE904A 		vmov	r4, s15	@ int
 541              	.LVL35:
 155:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 542              		.loc 1 155 5 is_stmt 1 view .LVU130
 155:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 543              		.loc 1 155 8 is_stmt 0 view .LVU131
 544 0022 B4F5803F 		cmp	r4, #65536
 545 0026 01D3     		bcc	.L18
 156:Core/Src/main.c ****     }
 546              		.loc 1 156 19 view .LVU132
 547 0028 4FF6FF74 		movw	r4, #65535
 548              	.LVL36:
 549              	.L18:
 160:Core/Src/main.c **** 
 550              		.loc 1 160 5 is_stmt 1 view .LVU133
 160:Core/Src/main.c **** 
 551              		.loc 1 160 57 is_stmt 0 view .LVU134
 552 002c 631C     		adds	r3, r4, #1
 553              	.LVL37:
 160:Core/Src/main.c **** 
 554              		.loc 1 160 57 view .LVU135
 555 002e 07EE903A 		vmov	s15, r3	@ int
 160:Core/Src/main.c **** 
 556              		.loc 1 160 44 view .LVU136
 557 0032 F8EE677A 		vcvt.f32.u32	s15, s15
 160:Core/Src/main.c **** 
 558              		.loc 1 160 14 view .LVU137
 559 0036 C7EE277A 		vdiv.f32	s15, s14, s15
 560 003a 17EE900A 		vmov	r0, s15
 561              	.LVL38:
 160:Core/Src/main.c **** 
 562              		.loc 1 160 14 view .LVU138
 563 003e FFF7FEFF 		bl	__aeabi_f2ulz
ARM GAS  C:\Temp\ccw7qgqf.s 			page 22


 564              	.LVL39:
 165:Core/Src/main.c ****     tim->ARR = arr;         // Set the auto-reload register
 565              		.loc 1 165 5 is_stmt 1 view .LVU139
 165:Core/Src/main.c ****     tim->ARR = arr;         // Set the auto-reload register
 566              		.loc 1 165 14 is_stmt 0 view .LVU140
 567 0042 AC62     		str	r4, [r5, #40]
 166:Core/Src/main.c **** 
 568              		.loc 1 166 5 is_stmt 1 view .LVU141
 166:Core/Src/main.c **** 
 569              		.loc 1 166 14 is_stmt 0 view .LVU142
 570 0044 E862     		str	r0, [r5, #44]
 169:Core/Src/main.c **** }
 571              		.loc 1 169 5 is_stmt 1 view .LVU143
 169:Core/Src/main.c **** }
 572              		.loc 1 169 14 is_stmt 0 view .LVU144
 573 0046 0123     		movs	r3, #1
 574 0048 6B61     		str	r3, [r5, #20]
 170:Core/Src/main.c **** // Function to return the fastest (highest) ODR
 575              		.loc 1 170 1 view .LVU145
 576 004a 38BD     		pop	{r3, r4, r5, pc}
 577              	.LVL40:
 578              	.L22:
 170:Core/Src/main.c **** // Function to return the fastest (highest) ODR
 579              		.loc 1 170 1 view .LVU146
 580              		.align	2
 581              	.L21:
 582 004c 00000000 		.word	SystemCoreClock
 583 0050 00008037 		.word	931135488
 584              		.cfi_endproc
 585              	.LFE140:
 587              		.section	.text.get_fastest_odr,"ax",%progbits
 588              		.align	1
 589              		.global	get_fastest_odr
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 594              	get_fastest_odr:
 595              	.LVL41:
 596              	.LFB141:
 172:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 597              		.loc 1 172 83 is_stmt 1 view -0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 172:Core/Src/main.c ****     float fastest = odr1; // Assume odr1 is the fastest initially
 602              		.loc 1 172 83 is_stmt 0 view .LVU148
 603 0000 F0EE407A 		vmov.f32	s15, s0
 604 0004 B0EE420A 		vmov.f32	s0, s4
 605              	.LVL42:
 173:Core/Src/main.c **** 
 606              		.loc 1 173 5 is_stmt 1 view .LVU149
 175:Core/Src/main.c ****         fastest = odr2;
 607              		.loc 1 175 5 view .LVU150
 175:Core/Src/main.c ****         fastest = odr2;
 608              		.loc 1 175 8 is_stmt 0 view .LVU151
 609 0008 F4EEE07A 		vcmpe.f32	s15, s1
ARM GAS  C:\Temp\ccw7qgqf.s 			page 23


 610 000c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 611 0010 01D4     		bmi	.L24
 173:Core/Src/main.c **** 
 612              		.loc 1 173 11 view .LVU152
 613 0012 F0EE670A 		vmov.f32	s1, s15
 614              	.LVL43:
 615              	.L24:
 178:Core/Src/main.c ****         fastest = odr3;
 616              		.loc 1 178 5 is_stmt 1 view .LVU153
 178:Core/Src/main.c ****         fastest = odr3;
 617              		.loc 1 178 8 is_stmt 0 view .LVU154
 618 0016 F4EEC10A 		vcmpe.f32	s1, s2
 619 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 620 001e 01D4     		bmi	.L25
 621 0020 B0EE601A 		vmov.f32	s2, s1
 622              	.LVL44:
 623              	.L25:
 181:Core/Src/main.c ****         fastest = odr4;
 624              		.loc 1 181 5 is_stmt 1 view .LVU155
 181:Core/Src/main.c ****         fastest = odr4;
 625              		.loc 1 181 8 is_stmt 0 view .LVU156
 626 0024 B4EEE11A 		vcmpe.f32	s2, s3
 627 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 628 002c 01D4     		bmi	.L26
 629 002e F0EE411A 		vmov.f32	s3, s2
 630              	.LVL45:
 631              	.L26:
 184:Core/Src/main.c ****         fastest = odr5;
 632              		.loc 1 184 5 is_stmt 1 view .LVU157
 184:Core/Src/main.c ****         fastest = odr5;
 633              		.loc 1 184 8 is_stmt 0 view .LVU158
 634 0032 F4EEC01A 		vcmpe.f32	s3, s0
 635 0036 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 636 003a 01D4     		bmi	.L27
 637 003c B0EE610A 		vmov.f32	s0, s3
 638              	.L27:
 639              	.LVL46:
 188:Core/Src/main.c **** }
 640              		.loc 1 188 5 is_stmt 1 view .LVU159
 189:Core/Src/main.c **** 
 641              		.loc 1 189 1 is_stmt 0 view .LVU160
 642 0040 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE141:
 646              		.section	.text.sendToSimulink,"ax",%progbits
 647              		.align	1
 648              		.global	sendToSimulink
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	sendToSimulink:
 654              	.LFB142:
 191:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 655              		.loc 1 191 22 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Temp\ccw7qgqf.s 			page 24


 659 0000 38B5     		push	{r3, r4, r5, lr}
 660              		.cfi_def_cfa_offset 16
 661              		.cfi_offset 3, -16
 662              		.cfi_offset 4, -12
 663              		.cfi_offset 5, -8
 664              		.cfi_offset 14, -4
 192:Core/Src/main.c **** 
 665              		.loc 1 192 5 view .LVU162
 666 0002 6F4C     		ldr	r4, .L30
 667 0004 4FF0FF33 		mov	r3, #-1
 668 0008 0322     		movs	r2, #3
 669 000a 6E49     		ldr	r1, .L30+4
 670 000c 2046     		mov	r0, r4
 671 000e FFF7FEFF 		bl	HAL_UART_Transmit
 672              	.LVL47:
 194:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Ambient )  , 4 , HAL_MAX_DELAY);
 673              		.loc 1 194 5 view .LVU163
 674 0012 6D4D     		ldr	r5, .L30+8
 675 0014 4FF0FF33 		mov	r3, #-1
 676 0018 0422     		movs	r2, #4
 677 001a 2946     		mov	r1, r5
 678 001c 2046     		mov	r0, r4
 679 001e FFF7FEFF 		bl	HAL_UART_Transmit
 680              	.LVL48:
 195:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Signal  )  , 4 , HAL_MAX_DELAY);
 681              		.loc 1 195 5 view .LVU164
 682 0022 4FF0FF33 		mov	r3, #-1
 683 0026 0422     		movs	r2, #4
 684 0028 05F10801 		add	r1, r5, #8
 685 002c 2046     		mov	r0, r4
 686 002e FFF7FEFF 		bl	HAL_UART_Transmit
 687              	.LVL49:
 196:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Status  )  , 4 , HAL_MAX_DELAY);
 688              		.loc 1 196 5 view .LVU165
 689 0032 4FF0FF33 		mov	r3, #-1
 690 0036 0422     		movs	r2, #4
 691 0038 05F10C01 		add	r1, r5, #12
 692 003c 2046     		mov	r0, r4
 693 003e FFF7FEFF 		bl	HAL_UART_Transmit
 694              	.LVL50:
 197:Core/Src/main.c **** 
 695              		.loc 1 197 5 view .LVU166
 696 0042 4FF0FF33 		mov	r3, #-1
 697 0046 0422     		movs	r2, #4
 698 0048 A918     		adds	r1, r5, r2
 699 004a 2046     		mov	r0, r4
 700 004c FFF7FEFF 		bl	HAL_UART_Transmit
 701              	.LVL51:
 199:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Ambient )  , 4 , HAL_MAX_DELAY);
 702              		.loc 1 199 5 view .LVU167
 703 0050 5E4D     		ldr	r5, .L30+12
 704 0052 4FF0FF33 		mov	r3, #-1
 705 0056 0422     		movs	r2, #4
 706 0058 2946     		mov	r1, r5
 707 005a 2046     		mov	r0, r4
 708 005c FFF7FEFF 		bl	HAL_UART_Transmit
 709              	.LVL52:
ARM GAS  C:\Temp\ccw7qgqf.s 			page 25


 200:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Signal  )  , 4 , HAL_MAX_DELAY);
 710              		.loc 1 200 5 view .LVU168
 711 0060 4FF0FF33 		mov	r3, #-1
 712 0064 0422     		movs	r2, #4
 713 0066 05F10801 		add	r1, r5, #8
 714 006a 2046     		mov	r0, r4
 715 006c FFF7FEFF 		bl	HAL_UART_Transmit
 716              	.LVL53:
 201:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Status  )  , 4 , HAL_MAX_DELAY);
 717              		.loc 1 201 5 view .LVU169
 718 0070 4FF0FF33 		mov	r3, #-1
 719 0074 0422     		movs	r2, #4
 720 0076 05F10C01 		add	r1, r5, #12
 721 007a 2046     		mov	r0, r4
 722 007c FFF7FEFF 		bl	HAL_UART_Transmit
 723              	.LVL54:
 202:Core/Src/main.c **** 
 724              		.loc 1 202 5 view .LVU170
 725 0080 4FF0FF33 		mov	r3, #-1
 726 0084 0422     		movs	r2, #4
 727 0086 A918     		adds	r1, r5, r2
 728 0088 2046     		mov	r0, r4
 729 008a FFF7FEFF 		bl	HAL_UART_Transmit
 730              	.LVL55:
 204:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Ambient )  , 4 , HAL_MAX_DELAY);
 731              		.loc 1 204 5 view .LVU171
 732 008e 504D     		ldr	r5, .L30+16
 733 0090 4FF0FF33 		mov	r3, #-1
 734 0094 0422     		movs	r2, #4
 735 0096 2946     		mov	r1, r5
 736 0098 2046     		mov	r0, r4
 737 009a FFF7FEFF 		bl	HAL_UART_Transmit
 738              	.LVL56:
 205:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Signal  )  , 4 , HAL_MAX_DELAY);
 739              		.loc 1 205 5 view .LVU172
 740 009e 4FF0FF33 		mov	r3, #-1
 741 00a2 0422     		movs	r2, #4
 742 00a4 05F10801 		add	r1, r5, #8
 743 00a8 2046     		mov	r0, r4
 744 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 745              	.LVL57:
 206:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Status  )  , 4 , HAL_MAX_DELAY);
 746              		.loc 1 206 5 view .LVU173
 747 00ae 4FF0FF33 		mov	r3, #-1
 748 00b2 0422     		movs	r2, #4
 749 00b4 05F10C01 		add	r1, r5, #12
 750 00b8 2046     		mov	r0, r4
 751 00ba FFF7FEFF 		bl	HAL_UART_Transmit
 752              	.LVL58:
 207:Core/Src/main.c **** 
 753              		.loc 1 207 5 view .LVU174
 754 00be 4FF0FF33 		mov	r3, #-1
 755 00c2 0422     		movs	r2, #4
 756 00c4 A918     		adds	r1, r5, r2
 757 00c6 2046     		mov	r0, r4
 758 00c8 FFF7FEFF 		bl	HAL_UART_Transmit
 759              	.LVL59:
ARM GAS  C:\Temp\ccw7qgqf.s 			page 26


 209:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
 760              		.loc 1 209 5 view .LVU175
 761 00cc 414D     		ldr	r5, .L30+20
 762 00ce 4FF0FF33 		mov	r3, #-1
 763 00d2 0422     		movs	r2, #4
 764 00d4 2946     		mov	r1, r5
 765 00d6 2046     		mov	r0, r4
 766 00d8 FFF7FEFF 		bl	HAL_UART_Transmit
 767              	.LVL60:
 210:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
 768              		.loc 1 210 5 view .LVU176
 769 00dc 4FF0FF33 		mov	r3, #-1
 770 00e0 0422     		movs	r2, #4
 771 00e2 A918     		adds	r1, r5, r2
 772 00e4 2046     		mov	r0, r4
 773 00e6 FFF7FEFF 		bl	HAL_UART_Transmit
 774              	.LVL61:
 211:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
 775              		.loc 1 211 5 view .LVU177
 776 00ea 4FF0FF33 		mov	r3, #-1
 777 00ee 0422     		movs	r2, #4
 778 00f0 05F10801 		add	r1, r5, #8
 779 00f4 2046     		mov	r0, r4
 780 00f6 FFF7FEFF 		bl	HAL_UART_Transmit
 781              	.LVL62:
 212:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
 782              		.loc 1 212 5 view .LVU178
 783 00fa 374D     		ldr	r5, .L30+24
 784 00fc 4FF0FF33 		mov	r3, #-1
 785 0100 0422     		movs	r2, #4
 786 0102 2946     		mov	r1, r5
 787 0104 2046     		mov	r0, r4
 788 0106 FFF7FEFF 		bl	HAL_UART_Transmit
 789              	.LVL63:
 213:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
 790              		.loc 1 213 5 view .LVU179
 791 010a 4FF0FF33 		mov	r3, #-1
 792 010e 0422     		movs	r2, #4
 793 0110 A918     		adds	r1, r5, r2
 794 0112 2046     		mov	r0, r4
 795 0114 FFF7FEFF 		bl	HAL_UART_Transmit
 796              	.LVL64:
 214:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 797              		.loc 1 214 5 view .LVU180
 798 0118 4FF0FF33 		mov	r3, #-1
 799 011c 0422     		movs	r2, #4
 800 011e 05F10801 		add	r1, r5, #8
 801 0122 2046     		mov	r0, r4
 802 0124 FFF7FEFF 		bl	HAL_UART_Transmit
 803              	.LVL65:
 215:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
 804              		.loc 1 215 5 view .LVU181
 805 0128 2C4D     		ldr	r5, .L30+28
 806 012a 4FF0FF33 		mov	r3, #-1
 807 012e 0422     		movs	r2, #4
 808 0130 2946     		mov	r1, r5
 809 0132 2046     		mov	r0, r4
ARM GAS  C:\Temp\ccw7qgqf.s 			page 27


 810 0134 FFF7FEFF 		bl	HAL_UART_Transmit
 811              	.LVL66:
 216:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 812              		.loc 1 216 5 view .LVU182
 813 0138 4FF0FF33 		mov	r3, #-1
 814 013c 0422     		movs	r2, #4
 815 013e A918     		adds	r1, r5, r2
 816 0140 2046     		mov	r0, r4
 817 0142 FFF7FEFF 		bl	HAL_UART_Transmit
 818              	.LVL67:
 217:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 819              		.loc 1 217 5 view .LVU183
 820 0146 4FF0FF33 		mov	r3, #-1
 821 014a 0422     		movs	r2, #4
 822 014c 05F10801 		add	r1, r5, #8
 823 0150 2046     		mov	r0, r4
 824 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 825              	.LVL68:
 218:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
 826              		.loc 1 218 5 view .LVU184
 827 0156 4FF0FF33 		mov	r3, #-1
 828 015a 0422     		movs	r2, #4
 829 015c 2049     		ldr	r1, .L30+32
 830 015e 2046     		mov	r0, r4
 831 0160 FFF7FEFF 		bl	HAL_UART_Transmit
 832              	.LVL69:
 219:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
 833              		.loc 1 219 5 view .LVU185
 834 0164 1F4D     		ldr	r5, .L30+36
 835 0166 4FF0FF33 		mov	r3, #-1
 836 016a 0422     		movs	r2, #4
 837 016c 2946     		mov	r1, r5
 838 016e 2046     		mov	r0, r4
 839 0170 FFF7FEFF 		bl	HAL_UART_Transmit
 840              	.LVL70:
 220:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
 841              		.loc 1 220 5 view .LVU186
 842 0174 4FF0FF33 		mov	r3, #-1
 843 0178 0422     		movs	r2, #4
 844 017a A918     		adds	r1, r5, r2
 845 017c 2046     		mov	r0, r4
 846 017e FFF7FEFF 		bl	HAL_UART_Transmit
 847              	.LVL71:
 221:Core/Src/main.c **** 
 848              		.loc 1 221 5 view .LVU187
 849 0182 4FF0FF33 		mov	r3, #-1
 850 0186 0422     		movs	r2, #4
 851 0188 05F10801 		add	r1, r5, #8
 852 018c 2046     		mov	r0, r4
 853 018e FFF7FEFF 		bl	HAL_UART_Transmit
 854              	.LVL72:
 223:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (float_t *) &fastestODR       ,4 , HAL_MAX_DELAY);
 855              		.loc 1 223 5 view .LVU188
 856 0192 4FF0FF33 		mov	r3, #-1
 857 0196 0422     		movs	r2, #4
 858 0198 1349     		ldr	r1, .L30+40
 859 019a 2046     		mov	r0, r4
ARM GAS  C:\Temp\ccw7qgqf.s 			page 28


 860 019c FFF7FEFF 		bl	HAL_UART_Transmit
 861              	.LVL73:
 224:Core/Src/main.c **** 
 862              		.loc 1 224 5 view .LVU189
 863 01a0 4FF0FF33 		mov	r3, #-1
 864 01a4 0422     		movs	r2, #4
 865 01a6 1149     		ldr	r1, .L30+44
 866 01a8 2046     		mov	r0, r4
 867 01aa FFF7FEFF 		bl	HAL_UART_Transmit
 868              	.LVL74:
 226:Core/Src/main.c **** }
 869              		.loc 1 226 5 view .LVU190
 870 01ae 4FF0FF33 		mov	r3, #-1
 871 01b2 0322     		movs	r2, #3
 872 01b4 0E49     		ldr	r1, .L30+48
 873 01b6 2046     		mov	r0, r4
 874 01b8 FFF7FEFF 		bl	HAL_UART_Transmit
 875              	.LVL75:
 227:Core/Src/main.c **** 
 876              		.loc 1 227 1 is_stmt 0 view .LVU191
 877 01bc 38BD     		pop	{r3, r4, r5, pc}
 878              	.L31:
 879 01be 00BF     		.align	2
 880              	.L30:
 881 01c0 00000000 		.word	huart2
 882 01c4 00000000 		.word	header
 883 01c8 04000000 		.word	TOF_left_result+4
 884 01cc 04000000 		.word	TOF_centre_result+4
 885 01d0 04000000 		.word	TOF_right_result+4
 886 01d4 00000000 		.word	accel1_axis
 887 01d8 00000000 		.word	gyro_axis
 888 01dc 00000000 		.word	accel2_axis
 889 01e0 00000000 		.word	temperature
 890 01e4 00000000 		.word	mag_axis
 891 01e8 00000000 		.word	counter
 892 01ec 00000000 		.word	fastestODR
 893 01f0 00000000 		.word	terminator
 894              		.cfi_endproc
 895              	.LFE142:
 897              		.section	.text.initialCalibration,"ax",%progbits
 898              		.align	1
 899              		.global	initialCalibration
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 904              	initialCalibration:
 905              	.LFB143:
 229:Core/Src/main.c ****   HAL_UART_Receive(&huart2, &bigBuffer, 42 ,HAL_MAX_DELAY);
 906              		.loc 1 229 26 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910 0000 10B5     		push	{r4, lr}
 911              		.cfi_def_cfa_offset 8
 912              		.cfi_offset 4, -8
 913              		.cfi_offset 14, -4
 230:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
ARM GAS  C:\Temp\ccw7qgqf.s 			page 29


 914              		.loc 1 230 3 view .LVU193
 915 0002 1D4C     		ldr	r4, .L36
 916 0004 4FF0FF33 		mov	r3, #-1
 917 0008 2A22     		movs	r2, #42
 918 000a 2146     		mov	r1, r4
 919 000c 1B48     		ldr	r0, .L36+4
 920 000e FFF7FEFF 		bl	HAL_UART_Receive
 921              	.LVL76:
 231:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 922              		.loc 1 231 3 view .LVU194
 231:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 923              		.loc 1 231 16 is_stmt 0 view .LVU195
 924 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 231:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 925              		.loc 1 231 6 view .LVU196
 926 0014 4A2B     		cmp	r3, #74
 927 0016 00D0     		beq	.L35
 928              	.L32:
 241:Core/Src/main.c **** 
 929              		.loc 1 241 1 view .LVU197
 930 0018 10BD     		pop	{r4, pc}
 931              	.L35:
 232:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 932              		.loc 1 232 16 discriminator 1 view .LVU198
 933 001a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 231:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 934              		.loc 1 231 41 discriminator 1 view .LVU199
 935 001c 5F2B     		cmp	r3, #95
 936 001e FBD1     		bne	.L32
 233:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 937              		.loc 1 233 16 view .LVU200
 938 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 232:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 939              		.loc 1 232 41 view .LVU201
 940 0022 412B     		cmp	r3, #65
 941 0024 F8D1     		bne	.L32
 234:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 942              		.loc 1 234 16 view .LVU202
 943 0026 94F82730 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 233:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 944              		.loc 1 233 41 view .LVU203
 945 002a 412B     		cmp	r3, #65
 946 002c F4D1     		bne	.L32
 235:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 947              		.loc 1 235 16 view .LVU204
 948 002e 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 234:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 949              		.loc 1 234 69 view .LVU205
 950 0032 5F2B     		cmp	r3, #95
 951 0034 F0D1     		bne	.L32
 236:Core/Src/main.c ****         calibrated = 1;
 952              		.loc 1 236 16 view .LVU206
 953 0036 94F82930 		ldrb	r3, [r4, #41]	@ zero_extendqisi2
 235:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 954              		.loc 1 235 69 view .LVU207
 955 003a 4A2B     		cmp	r3, #74
 956 003c ECD1     		bne	.L32
ARM GAS  C:\Temp\ccw7qgqf.s 			page 30


 237:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 957              		.loc 1 237 9 is_stmt 1 view .LVU208
 237:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 958              		.loc 1 237 20 is_stmt 0 view .LVU209
 959 003e 104B     		ldr	r3, .L36+8
 960 0040 0122     		movs	r2, #1
 961 0042 1A70     		strb	r2, [r3]
 238:Core/Src/main.c ****         fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 962              		.loc 1 238 9 is_stmt 1 view .LVU210
 963 0044 2046     		mov	r0, r4
 964 0046 FFF7FEFF 		bl	receivedFromSimulink
 965              	.LVL77:
 239:Core/Src/main.c ****   }
 966              		.loc 1 239 9 view .LVU211
 239:Core/Src/main.c ****   }
 967              		.loc 1 239 22 is_stmt 0 view .LVU212
 968 004a 0E4B     		ldr	r3, .L36+12
 969 004c 93ED002A 		vldr.32	s4, [r3]	@ int
 970 0050 B8EEC22A 		vcvt.f32.s32	s4, s4
 971 0054 0C4B     		ldr	r3, .L36+16
 972 0056 D3ED001A 		vldr.32	s3, [r3]
 973 005a 0C4B     		ldr	r3, .L36+20
 974 005c 93ED001A 		vldr.32	s2, [r3]
 975 0060 0B4B     		ldr	r3, .L36+24
 976 0062 D3ED000A 		vldr.32	s1, [r3]
 977 0066 0B4B     		ldr	r3, .L36+28
 978 0068 93ED000A 		vldr.32	s0, [r3]
 979 006c FFF7FEFF 		bl	get_fastest_odr
 980              	.LVL78:
 239:Core/Src/main.c ****   }
 981              		.loc 1 239 20 view .LVU213
 982 0070 094B     		ldr	r3, .L36+32
 983 0072 83ED000A 		vstr.32	s0, [r3]
 241:Core/Src/main.c **** 
 984              		.loc 1 241 1 view .LVU214
 985 0076 CFE7     		b	.L32
 986              	.L37:
 987              		.align	2
 988              	.L36:
 989 0078 00000000 		.word	bigBuffer
 990 007c 00000000 		.word	huart2
 991 0080 00000000 		.word	calibrated
 992 0084 00000000 		.word	tof_odr
 993 0088 00000000 		.word	mag_odr
 994 008c 00000000 		.word	accel2_odr
 995 0090 00000000 		.word	gyro_odr
 996 0094 00000000 		.word	accel1_odr
 997 0098 00000000 		.word	fastestODR
 998              		.cfi_endproc
 999              	.LFE143:
 1001              		.section	.text.Error_Handler,"ax",%progbits
 1002              		.align	1
 1003              		.global	Error_Handler
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1008              	Error_Handler:
ARM GAS  C:\Temp\ccw7qgqf.s 			page 31


 1009              	.LFB151:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 565:Core/Src/main.c **** 
 566:Core/Src/main.c **** /* USER CODE END 4 */
 567:Core/Src/main.c **** 
 568:Core/Src/main.c **** /**
 569:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 570:Core/Src/main.c ****   * @retval None
 571:Core/Src/main.c ****   */
 572:Core/Src/main.c **** void Error_Handler(void)
 573:Core/Src/main.c **** {
 1010              		.loc 1 573 1 is_stmt 1 view -0
 1011              		.cfi_startproc
 1012              		@ Volatile: function does not return.
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              		@ link register save eliminated.
 574:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 575:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 576:Core/Src/main.c ****   __disable_irq();
 1016              		.loc 1 576 3 view .LVU216
 1017              	.LBB9:
 1018              	.LBI9:
 1019              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  C:\Temp\ccw7qgqf.s 			page 32


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Temp\ccw7qgqf.s 			page 33


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
ARM GAS  C:\Temp\ccw7qgqf.s 			page 34


 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 35


 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  C:\Temp\ccw7qgqf.s 			page 36


 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\ccw7qgqf.s 			page 37


 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\ccw7qgqf.s 			page 38


 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccw7qgqf.s 			page 39


 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Temp\ccw7qgqf.s 			page 40


 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Temp\ccw7qgqf.s 			page 41


 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\ccw7qgqf.s 			page 42


 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 43


 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Temp\ccw7qgqf.s 			page 44


 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
ARM GAS  C:\Temp\ccw7qgqf.s 			page 45


 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccw7qgqf.s 			page 46


 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  C:\Temp\ccw7qgqf.s 			page 47


 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\ccw7qgqf.s 			page 48


 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1020              		.loc 2 960 27 view .LVU217
 1021              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1022              		.loc 2 962 3 view .LVU218
 1023              		.syntax unified
 1024              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1025 0000 72B6     		cpsid i
 1026              	@ 0 "" 2
 1027              		.thumb
 1028              		.syntax unified
 1029              	.L39:
 1030              	.LBE10:
 1031              	.LBE9:
 577:Core/Src/main.c ****   while (1)
 1032              		.loc 1 577 3 discriminator 1 view .LVU219
 578:Core/Src/main.c ****   {
 579:Core/Src/main.c ****   }
 1033              		.loc 1 579 3 discriminator 1 view .LVU220
 577:Core/Src/main.c ****   while (1)
 1034              		.loc 1 577 9 discriminator 1 view .LVU221
 1035 0002 FEE7     		b	.L39
 1036              		.cfi_endproc
 1037              	.LFE151:
 1039              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1040              		.align	1
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1045              	MX_USART2_UART_Init:
 1046              	.LFB148:
 465:Core/Src/main.c **** 
 1047              		.loc 1 465 1 view -0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051 0000 08B5     		push	{r3, lr}
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 3, -8
 1054              		.cfi_offset 14, -4
 474:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
ARM GAS  C:\Temp\ccw7qgqf.s 			page 49


 1055              		.loc 1 474 3 view .LVU223
 474:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 1056              		.loc 1 474 19 is_stmt 0 view .LVU224
 1057 0002 0D48     		ldr	r0, .L44
 1058 0004 0D4B     		ldr	r3, .L44+4
 1059 0006 0360     		str	r3, [r0]
 475:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 1060              		.loc 1 475 3 is_stmt 1 view .LVU225
 475:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 1061              		.loc 1 475 24 is_stmt 0 view .LVU226
 1062 0008 4FF4E113 		mov	r3, #1843200
 1063 000c 4360     		str	r3, [r0, #4]
 476:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 1064              		.loc 1 476 3 is_stmt 1 view .LVU227
 476:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 1065              		.loc 1 476 26 is_stmt 0 view .LVU228
 1066 000e 4FF48053 		mov	r3, #4096
 1067 0012 8360     		str	r3, [r0, #8]
 477:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 1068              		.loc 1 477 3 is_stmt 1 view .LVU229
 477:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 1069              		.loc 1 477 24 is_stmt 0 view .LVU230
 1070 0014 4FF40053 		mov	r3, #8192
 1071 0018 C360     		str	r3, [r0, #12]
 478:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1072              		.loc 1 478 3 is_stmt 1 view .LVU231
 478:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1073              		.loc 1 478 22 is_stmt 0 view .LVU232
 1074 001a 4FF48063 		mov	r3, #1024
 1075 001e 0361     		str	r3, [r0, #16]
 479:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1076              		.loc 1 479 3 is_stmt 1 view .LVU233
 479:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1077              		.loc 1 479 20 is_stmt 0 view .LVU234
 1078 0020 0C23     		movs	r3, #12
 1079 0022 4361     		str	r3, [r0, #20]
 480:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1080              		.loc 1 480 3 is_stmt 1 view .LVU235
 480:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1081              		.loc 1 480 25 is_stmt 0 view .LVU236
 1082 0024 0023     		movs	r3, #0
 1083 0026 8361     		str	r3, [r0, #24]
 481:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1084              		.loc 1 481 3 is_stmt 1 view .LVU237
 481:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1085              		.loc 1 481 28 is_stmt 0 view .LVU238
 1086 0028 C361     		str	r3, [r0, #28]
 482:Core/Src/main.c ****   {
 1087              		.loc 1 482 3 is_stmt 1 view .LVU239
 482:Core/Src/main.c ****   {
 1088              		.loc 1 482 7 is_stmt 0 view .LVU240
 1089 002a FFF7FEFF 		bl	HAL_UART_Init
 1090              	.LVL79:
 482:Core/Src/main.c ****   {
 1091              		.loc 1 482 6 view .LVU241
 1092 002e 00B9     		cbnz	r0, .L43
 490:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 50


 1093              		.loc 1 490 1 view .LVU242
 1094 0030 08BD     		pop	{r3, pc}
 1095              	.L43:
 484:Core/Src/main.c ****   }
 1096              		.loc 1 484 5 is_stmt 1 view .LVU243
 1097 0032 FFF7FEFF 		bl	Error_Handler
 1098              	.LVL80:
 1099              	.L45:
 1100 0036 00BF     		.align	2
 1101              	.L44:
 1102 0038 00000000 		.word	huart2
 1103 003c 00440040 		.word	1073759232
 1104              		.cfi_endproc
 1105              	.LFE148:
 1107              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1108              		.align	1
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1113              	MX_TIM2_Init:
 1114              	.LFB146:
 375:Core/Src/main.c **** 
 1115              		.loc 1 375 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 24
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119 0000 00B5     		push	{lr}
 1120              		.cfi_def_cfa_offset 4
 1121              		.cfi_offset 14, -4
 1122 0002 87B0     		sub	sp, sp, #28
 1123              		.cfi_def_cfa_offset 32
 381:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1124              		.loc 1 381 3 view .LVU245
 381:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1125              		.loc 1 381 26 is_stmt 0 view .LVU246
 1126 0004 0023     		movs	r3, #0
 1127 0006 0293     		str	r3, [sp, #8]
 1128 0008 0393     		str	r3, [sp, #12]
 1129 000a 0493     		str	r3, [sp, #16]
 1130 000c 0593     		str	r3, [sp, #20]
 382:Core/Src/main.c **** 
 1131              		.loc 1 382 3 is_stmt 1 view .LVU247
 382:Core/Src/main.c **** 
 1132              		.loc 1 382 27 is_stmt 0 view .LVU248
 1133 000e 0093     		str	r3, [sp]
 1134 0010 0193     		str	r3, [sp, #4]
 387:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1135              		.loc 1 387 3 is_stmt 1 view .LVU249
 387:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1136              		.loc 1 387 18 is_stmt 0 view .LVU250
 1137 0012 1448     		ldr	r0, .L54
 1138 0014 4FF08042 		mov	r2, #1073741824
 1139 0018 0260     		str	r2, [r0]
 388:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1140              		.loc 1 388 3 is_stmt 1 view .LVU251
 388:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1141              		.loc 1 388 24 is_stmt 0 view .LVU252
ARM GAS  C:\Temp\ccw7qgqf.s 			page 51


 1142 001a 4360     		str	r3, [r0, #4]
 389:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1143              		.loc 1 389 3 is_stmt 1 view .LVU253
 389:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1144              		.loc 1 389 26 is_stmt 0 view .LVU254
 1145 001c 8360     		str	r3, [r0, #8]
 390:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1146              		.loc 1 390 3 is_stmt 1 view .LVU255
 390:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1147              		.loc 1 390 21 is_stmt 0 view .LVU256
 1148 001e 4FF0FF32 		mov	r2, #-1
 1149 0022 C260     		str	r2, [r0, #12]
 391:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1150              		.loc 1 391 3 is_stmt 1 view .LVU257
 391:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1151              		.loc 1 391 28 is_stmt 0 view .LVU258
 1152 0024 0361     		str	r3, [r0, #16]
 392:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1153              		.loc 1 392 3 is_stmt 1 view .LVU259
 392:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1154              		.loc 1 392 32 is_stmt 0 view .LVU260
 1155 0026 8023     		movs	r3, #128
 1156 0028 8361     		str	r3, [r0, #24]
 393:Core/Src/main.c ****   {
 1157              		.loc 1 393 3 is_stmt 1 view .LVU261
 393:Core/Src/main.c ****   {
 1158              		.loc 1 393 7 is_stmt 0 view .LVU262
 1159 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1160              	.LVL81:
 393:Core/Src/main.c ****   {
 1161              		.loc 1 393 6 view .LVU263
 1162 002e 90B9     		cbnz	r0, .L51
 397:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1163              		.loc 1 397 3 is_stmt 1 view .LVU264
 397:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1164              		.loc 1 397 34 is_stmt 0 view .LVU265
 1165 0030 4FF48053 		mov	r3, #4096
 1166 0034 0293     		str	r3, [sp, #8]
 398:Core/Src/main.c ****   {
 1167              		.loc 1 398 3 is_stmt 1 view .LVU266
 398:Core/Src/main.c ****   {
 1168              		.loc 1 398 7 is_stmt 0 view .LVU267
 1169 0036 02A9     		add	r1, sp, #8
 1170 0038 0A48     		ldr	r0, .L54
 1171 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1172              	.LVL82:
 398:Core/Src/main.c ****   {
 1173              		.loc 1 398 6 view .LVU268
 1174 003e 60B9     		cbnz	r0, .L52
 402:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1175              		.loc 1 402 3 is_stmt 1 view .LVU269
 402:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1176              		.loc 1 402 37 is_stmt 0 view .LVU270
 1177 0040 0023     		movs	r3, #0
 1178 0042 0093     		str	r3, [sp]
 403:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1179              		.loc 1 403 3 is_stmt 1 view .LVU271
ARM GAS  C:\Temp\ccw7qgqf.s 			page 52


 403:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1180              		.loc 1 403 33 is_stmt 0 view .LVU272
 1181 0044 0193     		str	r3, [sp, #4]
 404:Core/Src/main.c ****   {
 1182              		.loc 1 404 3 is_stmt 1 view .LVU273
 404:Core/Src/main.c ****   {
 1183              		.loc 1 404 7 is_stmt 0 view .LVU274
 1184 0046 6946     		mov	r1, sp
 1185 0048 0648     		ldr	r0, .L54
 1186 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1187              	.LVL83:
 404:Core/Src/main.c ****   {
 1188              		.loc 1 404 6 view .LVU275
 1189 004e 30B9     		cbnz	r0, .L53
 412:Core/Src/main.c **** 
 1190              		.loc 1 412 1 view .LVU276
 1191 0050 07B0     		add	sp, sp, #28
 1192              		.cfi_remember_state
 1193              		.cfi_def_cfa_offset 4
 1194              		@ sp needed
 1195 0052 5DF804FB 		ldr	pc, [sp], #4
 1196              	.L51:
 1197              		.cfi_restore_state
 395:Core/Src/main.c ****   }
 1198              		.loc 1 395 5 is_stmt 1 view .LVU277
 1199 0056 FFF7FEFF 		bl	Error_Handler
 1200              	.LVL84:
 1201              	.L52:
 400:Core/Src/main.c ****   }
 1202              		.loc 1 400 5 view .LVU278
 1203 005a FFF7FEFF 		bl	Error_Handler
 1204              	.LVL85:
 1205              	.L53:
 406:Core/Src/main.c ****   }
 1206              		.loc 1 406 5 view .LVU279
 1207 005e FFF7FEFF 		bl	Error_Handler
 1208              	.LVL86:
 1209              	.L55:
 1210 0062 00BF     		.align	2
 1211              	.L54:
 1212 0064 00000000 		.word	htim2
 1213              		.cfi_endproc
 1214              	.LFE146:
 1216              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1217              		.align	1
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1222              	MX_TIM3_Init:
 1223              	.LFB147:
 420:Core/Src/main.c **** 
 1224              		.loc 1 420 1 view -0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 24
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228 0000 00B5     		push	{lr}
 1229              		.cfi_def_cfa_offset 4
ARM GAS  C:\Temp\ccw7qgqf.s 			page 53


 1230              		.cfi_offset 14, -4
 1231 0002 87B0     		sub	sp, sp, #28
 1232              		.cfi_def_cfa_offset 32
 426:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1233              		.loc 1 426 3 view .LVU281
 426:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1234              		.loc 1 426 26 is_stmt 0 view .LVU282
 1235 0004 0023     		movs	r3, #0
 1236 0006 0293     		str	r3, [sp, #8]
 1237 0008 0393     		str	r3, [sp, #12]
 1238 000a 0493     		str	r3, [sp, #16]
 1239 000c 0593     		str	r3, [sp, #20]
 427:Core/Src/main.c **** 
 1240              		.loc 1 427 3 is_stmt 1 view .LVU283
 427:Core/Src/main.c **** 
 1241              		.loc 1 427 27 is_stmt 0 view .LVU284
 1242 000e 0093     		str	r3, [sp]
 1243 0010 0193     		str	r3, [sp, #4]
 432:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 1244              		.loc 1 432 3 is_stmt 1 view .LVU285
 432:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 1245              		.loc 1 432 18 is_stmt 0 view .LVU286
 1246 0012 1348     		ldr	r0, .L64
 1247 0014 134A     		ldr	r2, .L64+4
 1248 0016 0260     		str	r2, [r0]
 433:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1249              		.loc 1 433 3 is_stmt 1 view .LVU287
 433:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1250              		.loc 1 433 24 is_stmt 0 view .LVU288
 1251 0018 4360     		str	r3, [r0, #4]
 434:Core/Src/main.c ****   htim3.Init.Period = 65535;
 1252              		.loc 1 434 3 is_stmt 1 view .LVU289
 434:Core/Src/main.c ****   htim3.Init.Period = 65535;
 1253              		.loc 1 434 26 is_stmt 0 view .LVU290
 1254 001a 8360     		str	r3, [r0, #8]
 435:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1255              		.loc 1 435 3 is_stmt 1 view .LVU291
 435:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1256              		.loc 1 435 21 is_stmt 0 view .LVU292
 1257 001c 4FF6FF72 		movw	r2, #65535
 1258 0020 C260     		str	r2, [r0, #12]
 436:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1259              		.loc 1 436 3 is_stmt 1 view .LVU293
 436:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1260              		.loc 1 436 28 is_stmt 0 view .LVU294
 1261 0022 0361     		str	r3, [r0, #16]
 437:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1262              		.loc 1 437 3 is_stmt 1 view .LVU295
 437:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1263              		.loc 1 437 32 is_stmt 0 view .LVU296
 1264 0024 8023     		movs	r3, #128
 1265 0026 8361     		str	r3, [r0, #24]
 438:Core/Src/main.c ****   {
 1266              		.loc 1 438 3 is_stmt 1 view .LVU297
 438:Core/Src/main.c ****   {
 1267              		.loc 1 438 7 is_stmt 0 view .LVU298
 1268 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
ARM GAS  C:\Temp\ccw7qgqf.s 			page 54


 1269              	.LVL87:
 438:Core/Src/main.c ****   {
 1270              		.loc 1 438 6 view .LVU299
 1271 002c 90B9     		cbnz	r0, .L61
 442:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1272              		.loc 1 442 3 is_stmt 1 view .LVU300
 442:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1273              		.loc 1 442 34 is_stmt 0 view .LVU301
 1274 002e 4FF48053 		mov	r3, #4096
 1275 0032 0293     		str	r3, [sp, #8]
 443:Core/Src/main.c ****   {
 1276              		.loc 1 443 3 is_stmt 1 view .LVU302
 443:Core/Src/main.c ****   {
 1277              		.loc 1 443 7 is_stmt 0 view .LVU303
 1278 0034 02A9     		add	r1, sp, #8
 1279 0036 0A48     		ldr	r0, .L64
 1280 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1281              	.LVL88:
 443:Core/Src/main.c ****   {
 1282              		.loc 1 443 6 view .LVU304
 1283 003c 60B9     		cbnz	r0, .L62
 447:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1284              		.loc 1 447 3 is_stmt 1 view .LVU305
 447:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1285              		.loc 1 447 37 is_stmt 0 view .LVU306
 1286 003e 0023     		movs	r3, #0
 1287 0040 0093     		str	r3, [sp]
 448:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1288              		.loc 1 448 3 is_stmt 1 view .LVU307
 448:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1289              		.loc 1 448 33 is_stmt 0 view .LVU308
 1290 0042 0193     		str	r3, [sp, #4]
 449:Core/Src/main.c ****   {
 1291              		.loc 1 449 3 is_stmt 1 view .LVU309
 449:Core/Src/main.c ****   {
 1292              		.loc 1 449 7 is_stmt 0 view .LVU310
 1293 0044 6946     		mov	r1, sp
 1294 0046 0648     		ldr	r0, .L64
 1295 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1296              	.LVL89:
 449:Core/Src/main.c ****   {
 1297              		.loc 1 449 6 view .LVU311
 1298 004c 30B9     		cbnz	r0, .L63
 457:Core/Src/main.c **** 
 1299              		.loc 1 457 1 view .LVU312
 1300 004e 07B0     		add	sp, sp, #28
 1301              		.cfi_remember_state
 1302              		.cfi_def_cfa_offset 4
 1303              		@ sp needed
 1304 0050 5DF804FB 		ldr	pc, [sp], #4
 1305              	.L61:
 1306              		.cfi_restore_state
 440:Core/Src/main.c ****   }
 1307              		.loc 1 440 5 is_stmt 1 view .LVU313
 1308 0054 FFF7FEFF 		bl	Error_Handler
 1309              	.LVL90:
 1310              	.L62:
ARM GAS  C:\Temp\ccw7qgqf.s 			page 55


 445:Core/Src/main.c ****   }
 1311              		.loc 1 445 5 view .LVU314
 1312 0058 FFF7FEFF 		bl	Error_Handler
 1313              	.LVL91:
 1314              	.L63:
 451:Core/Src/main.c ****   }
 1315              		.loc 1 451 5 view .LVU315
 1316 005c FFF7FEFF 		bl	Error_Handler
 1317              	.LVL92:
 1318              	.L65:
 1319              		.align	2
 1320              	.L64:
 1321 0060 00000000 		.word	htim3
 1322 0064 00040040 		.word	1073742848
 1323              		.cfi_endproc
 1324              	.LFE147:
 1326              		.section	.text.SystemClock_Config,"ax",%progbits
 1327              		.align	1
 1328              		.global	SystemClock_Config
 1329              		.syntax unified
 1330              		.thumb
 1331              		.thumb_func
 1333              	SystemClock_Config:
 1334              	.LFB145:
 328:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1335              		.loc 1 328 1 view -0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 80
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339 0000 00B5     		push	{lr}
 1340              		.cfi_def_cfa_offset 4
 1341              		.cfi_offset 14, -4
 1342 0002 95B0     		sub	sp, sp, #84
 1343              		.cfi_def_cfa_offset 88
 329:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1344              		.loc 1 329 3 view .LVU317
 329:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1345              		.loc 1 329 22 is_stmt 0 view .LVU318
 1346 0004 3022     		movs	r2, #48
 1347 0006 0021     		movs	r1, #0
 1348 0008 08A8     		add	r0, sp, #32
 1349 000a FFF7FEFF 		bl	memset
 1350              	.LVL93:
 330:Core/Src/main.c **** 
 1351              		.loc 1 330 3 is_stmt 1 view .LVU319
 330:Core/Src/main.c **** 
 1352              		.loc 1 330 22 is_stmt 0 view .LVU320
 1353 000e 0023     		movs	r3, #0
 1354 0010 0393     		str	r3, [sp, #12]
 1355 0012 0493     		str	r3, [sp, #16]
 1356 0014 0593     		str	r3, [sp, #20]
 1357 0016 0693     		str	r3, [sp, #24]
 1358 0018 0793     		str	r3, [sp, #28]
 334:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1359              		.loc 1 334 3 is_stmt 1 view .LVU321
 1360              	.LBB11:
 334:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
ARM GAS  C:\Temp\ccw7qgqf.s 			page 56


 1361              		.loc 1 334 3 view .LVU322
 1362 001a 0193     		str	r3, [sp, #4]
 334:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1363              		.loc 1 334 3 view .LVU323
 1364 001c 1E4A     		ldr	r2, .L72
 1365 001e 116C     		ldr	r1, [r2, #64]
 1366 0020 41F08051 		orr	r1, r1, #268435456
 1367 0024 1164     		str	r1, [r2, #64]
 334:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1368              		.loc 1 334 3 view .LVU324
 1369 0026 126C     		ldr	r2, [r2, #64]
 1370 0028 02F08052 		and	r2, r2, #268435456
 1371 002c 0192     		str	r2, [sp, #4]
 334:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1372              		.loc 1 334 3 view .LVU325
 1373 002e 019A     		ldr	r2, [sp, #4]
 1374              	.LBE11:
 334:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1375              		.loc 1 334 3 view .LVU326
 335:Core/Src/main.c **** 
 1376              		.loc 1 335 3 view .LVU327
 1377              	.LBB12:
 335:Core/Src/main.c **** 
 1378              		.loc 1 335 3 view .LVU328
 1379 0030 0293     		str	r3, [sp, #8]
 335:Core/Src/main.c **** 
 1380              		.loc 1 335 3 view .LVU329
 1381 0032 1A4A     		ldr	r2, .L72+4
 1382 0034 1168     		ldr	r1, [r2]
 1383 0036 41F44041 		orr	r1, r1, #49152
 1384 003a 1160     		str	r1, [r2]
 335:Core/Src/main.c **** 
 1385              		.loc 1 335 3 view .LVU330
 1386 003c 1268     		ldr	r2, [r2]
 1387 003e 02F44042 		and	r2, r2, #49152
 1388 0042 0292     		str	r2, [sp, #8]
 335:Core/Src/main.c **** 
 1389              		.loc 1 335 3 view .LVU331
 1390 0044 029A     		ldr	r2, [sp, #8]
 1391              	.LBE12:
 335:Core/Src/main.c **** 
 1392              		.loc 1 335 3 view .LVU332
 340:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1393              		.loc 1 340 3 view .LVU333
 340:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1394              		.loc 1 340 36 is_stmt 0 view .LVU334
 1395 0046 0222     		movs	r2, #2
 1396 0048 0892     		str	r2, [sp, #32]
 341:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1397              		.loc 1 341 3 is_stmt 1 view .LVU335
 341:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1398              		.loc 1 341 30 is_stmt 0 view .LVU336
 1399 004a 0121     		movs	r1, #1
 1400 004c 0B91     		str	r1, [sp, #44]
 342:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1401              		.loc 1 342 3 is_stmt 1 view .LVU337
 342:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  C:\Temp\ccw7qgqf.s 			page 57


 1402              		.loc 1 342 41 is_stmt 0 view .LVU338
 1403 004e 1021     		movs	r1, #16
 1404 0050 0C91     		str	r1, [sp, #48]
 343:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1405              		.loc 1 343 3 is_stmt 1 view .LVU339
 343:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1406              		.loc 1 343 34 is_stmt 0 view .LVU340
 1407 0052 0E92     		str	r2, [sp, #56]
 344:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1408              		.loc 1 344 3 is_stmt 1 view .LVU341
 344:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1409              		.loc 1 344 35 is_stmt 0 view .LVU342
 1410 0054 0F93     		str	r3, [sp, #60]
 345:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1411              		.loc 1 345 3 is_stmt 1 view .LVU343
 345:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1412              		.loc 1 345 30 is_stmt 0 view .LVU344
 1413 0056 0823     		movs	r3, #8
 1414 0058 1093     		str	r3, [sp, #64]
 346:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1415              		.loc 1 346 3 is_stmt 1 view .LVU345
 346:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1416              		.loc 1 346 30 is_stmt 0 view .LVU346
 1417 005a 6423     		movs	r3, #100
 1418 005c 1193     		str	r3, [sp, #68]
 347:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1419              		.loc 1 347 3 is_stmt 1 view .LVU347
 347:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1420              		.loc 1 347 30 is_stmt 0 view .LVU348
 1421 005e 1292     		str	r2, [sp, #72]
 348:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1422              		.loc 1 348 3 is_stmt 1 view .LVU349
 348:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1423              		.loc 1 348 30 is_stmt 0 view .LVU350
 1424 0060 0423     		movs	r3, #4
 1425 0062 1393     		str	r3, [sp, #76]
 349:Core/Src/main.c ****   {
 1426              		.loc 1 349 3 is_stmt 1 view .LVU351
 349:Core/Src/main.c ****   {
 1427              		.loc 1 349 7 is_stmt 0 view .LVU352
 1428 0064 08A8     		add	r0, sp, #32
 1429 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1430              	.LVL94:
 349:Core/Src/main.c ****   {
 1431              		.loc 1 349 6 view .LVU353
 1432 006a 88B9     		cbnz	r0, .L70
 356:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1433              		.loc 1 356 3 is_stmt 1 view .LVU354
 356:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1434              		.loc 1 356 31 is_stmt 0 view .LVU355
 1435 006c 0F23     		movs	r3, #15
 1436 006e 0393     		str	r3, [sp, #12]
 358:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1437              		.loc 1 358 3 is_stmt 1 view .LVU356
 358:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1438              		.loc 1 358 34 is_stmt 0 view .LVU357
 1439 0070 0223     		movs	r3, #2
ARM GAS  C:\Temp\ccw7qgqf.s 			page 58


 1440 0072 0493     		str	r3, [sp, #16]
 359:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1441              		.loc 1 359 3 is_stmt 1 view .LVU358
 359:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1442              		.loc 1 359 35 is_stmt 0 view .LVU359
 1443 0074 0023     		movs	r3, #0
 1444 0076 0593     		str	r3, [sp, #20]
 360:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1445              		.loc 1 360 3 is_stmt 1 view .LVU360
 360:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1446              		.loc 1 360 36 is_stmt 0 view .LVU361
 1447 0078 4FF48052 		mov	r2, #4096
 1448 007c 0692     		str	r2, [sp, #24]
 361:Core/Src/main.c **** 
 1449              		.loc 1 361 3 is_stmt 1 view .LVU362
 361:Core/Src/main.c **** 
 1450              		.loc 1 361 36 is_stmt 0 view .LVU363
 1451 007e 0793     		str	r3, [sp, #28]
 363:Core/Src/main.c ****   {
 1452              		.loc 1 363 3 is_stmt 1 view .LVU364
 363:Core/Src/main.c ****   {
 1453              		.loc 1 363 7 is_stmt 0 view .LVU365
 1454 0080 0321     		movs	r1, #3
 1455 0082 03A8     		add	r0, sp, #12
 1456 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1457              	.LVL95:
 363:Core/Src/main.c ****   {
 1458              		.loc 1 363 6 view .LVU366
 1459 0088 20B9     		cbnz	r0, .L71
 367:Core/Src/main.c **** 
 1460              		.loc 1 367 1 view .LVU367
 1461 008a 15B0     		add	sp, sp, #84
 1462              		.cfi_remember_state
 1463              		.cfi_def_cfa_offset 4
 1464              		@ sp needed
 1465 008c 5DF804FB 		ldr	pc, [sp], #4
 1466              	.L70:
 1467              		.cfi_restore_state
 351:Core/Src/main.c ****   }
 1468              		.loc 1 351 5 is_stmt 1 view .LVU368
 1469 0090 FFF7FEFF 		bl	Error_Handler
 1470              	.LVL96:
 1471              	.L71:
 365:Core/Src/main.c ****   }
 1472              		.loc 1 365 5 view .LVU369
 1473 0094 FFF7FEFF 		bl	Error_Handler
 1474              	.LVL97:
 1475              	.L73:
 1476              		.align	2
 1477              	.L72:
 1478 0098 00380240 		.word	1073887232
 1479 009c 00700040 		.word	1073770496
 1480              		.cfi_endproc
 1481              	.LFE145:
 1483              		.section	.text.main,"ax",%progbits
 1484              		.align	1
 1485              		.global	main
ARM GAS  C:\Temp\ccw7qgqf.s 			page 59


 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1490              	main:
 1491              	.LFB144:
 250:Core/Src/main.c **** 
 1492              		.loc 1 250 1 view -0
 1493              		.cfi_startproc
 1494              		@ Volatile: function does not return.
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497 0000 08B5     		push	{r3, lr}
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 3, -8
 1500              		.cfi_offset 14, -4
 259:Core/Src/main.c **** 
 1501              		.loc 1 259 3 view .LVU371
 1502 0002 FFF7FEFF 		bl	HAL_Init
 1503              	.LVL98:
 262:Core/Src/main.c ****   /* USER CODE END Init */
 1504              		.loc 1 262 3 view .LVU372
 1505 0006 0022     		movs	r2, #0
 1506 0008 2021     		movs	r1, #32
 1507 000a 2E48     		ldr	r0, .L81
 1508 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1509              	.LVL99:
 266:Core/Src/main.c **** 
 1510              		.loc 1 266 3 view .LVU373
 1511 0010 FFF7FEFF 		bl	SystemClock_Config
 1512              	.LVL100:
 273:Core/Src/main.c ****   MX_DMA_Init();
 1513              		.loc 1 273 3 view .LVU374
 1514 0014 FFF7FEFF 		bl	MX_GPIO_Init
 1515              	.LVL101:
 274:Core/Src/main.c ****   MX_USART2_UART_Init();
 1516              		.loc 1 274 3 view .LVU375
 1517 0018 FFF7FEFF 		bl	MX_DMA_Init
 1518              	.LVL102:
 275:Core/Src/main.c ****   MX_TIM2_Init();
 1519              		.loc 1 275 3 view .LVU376
 1520 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1521              	.LVL103:
 276:Core/Src/main.c ****   MX_TIM3_Init();
 1522              		.loc 1 276 3 view .LVU377
 1523 0020 FFF7FEFF 		bl	MX_TIM2_Init
 1524              	.LVL104:
 277:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1525              		.loc 1 277 3 view .LVU378
 1526 0024 FFF7FEFF 		bl	MX_TIM3_Init
 1527              	.LVL105:
 279:Core/Src/main.c ****     initialCalibration();
 1528              		.loc 1 279 3 view .LVU379
 1529              	.L75:
 279:Core/Src/main.c ****     initialCalibration();
 1530              		.loc 1 279 21 view .LVU380
 1531 0028 274B     		ldr	r3, .L81+4
 1532 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Temp\ccw7qgqf.s 			page 60


 1533 002c 012B     		cmp	r3, #1
 1534 002e 02D0     		beq	.L80
 280:Core/Src/main.c ****   }
 1535              		.loc 1 280 5 view .LVU381
 1536 0030 FFF7FEFF 		bl	initialCalibration
 1537              	.LVL106:
 1538 0034 F8E7     		b	.L75
 1539              	.L80:
 283:Core/Src/main.c ****   
 1540              		.loc 1 283 3 view .LVU382
 1541 0036 FFF7FEFF 		bl	XNUCLEO53L1A1_Init
 1542              	.LVL107:
 285:Core/Src/main.c ****   TOF_centre_result.Address = ToF_Centre;
 1543              		.loc 1 285 3 view .LVU383
 285:Core/Src/main.c ****   TOF_centre_result.Address = ToF_Centre;
 1544              		.loc 1 285 27 is_stmt 0 view .LVU384
 1545 003a 5421     		movs	r1, #84
 1546 003c 234B     		ldr	r3, .L81+8
 1547 003e 1980     		strh	r1, [r3]	@ movhi
 286:Core/Src/main.c ****   TOF_right_result.Address = ToF_Right;
 1548              		.loc 1 286 3 is_stmt 1 view .LVU385
 286:Core/Src/main.c ****   TOF_right_result.Address = ToF_Right;
 1549              		.loc 1 286 29 is_stmt 0 view .LVU386
 1550 0040 5625     		movs	r5, #86
 1551 0042 234B     		ldr	r3, .L81+12
 1552 0044 1D80     		strh	r5, [r3]	@ movhi
 287:Core/Src/main.c **** 
 1553              		.loc 1 287 3 is_stmt 1 view .LVU387
 287:Core/Src/main.c **** 
 1554              		.loc 1 287 28 is_stmt 0 view .LVU388
 1555 0046 5824     		movs	r4, #88
 1556 0048 224B     		ldr	r3, .L81+16
 1557 004a 1C80     		strh	r4, [r3]	@ movhi
 289:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_CENTER, ToF_Centre);
 1558              		.loc 1 289 3 is_stmt 1 view .LVU389
 1559 004c 0020     		movs	r0, #0
 1560 004e FFF7FEFF 		bl	initVL53L1A1
 1561              	.LVL108:
 290:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_RIGHT,  ToF_Right);
 1562              		.loc 1 290 3 view .LVU390
 1563 0052 2946     		mov	r1, r5
 1564 0054 0120     		movs	r0, #1
 1565 0056 FFF7FEFF 		bl	initVL53L1A1
 1566              	.LVL109:
 291:Core/Src/main.c **** 
 1567              		.loc 1 291 3 view .LVU391
 1568 005a 2146     		mov	r1, r4
 1569 005c 0220     		movs	r0, #2
 1570 005e FFF7FEFF 		bl	initVL53L1A1
 1571              	.LVL110:
 293:Core/Src/main.c ****   calibrate_IKS02A1();
 1572              		.loc 1 293 3 view .LVU392
 1573 0062 FFF7FEFF 		bl	initIKS02A1
 1574              	.LVL111:
 294:Core/Src/main.c **** 
 1575              		.loc 1 294 3 view .LVU393
 1576 0066 FFF7FEFF 		bl	calibrate_IKS02A1
ARM GAS  C:\Temp\ccw7qgqf.s 			page 61


 1577              	.LVL112:
 296:Core/Src/main.c ****   configureTimer(tof_odr,TIM3);
 1578              		.loc 1 296 3 view .LVU394
 1579 006a 4FF08040 		mov	r0, #1073741824
 1580 006e 1A4B     		ldr	r3, .L81+20
 1581 0070 93ED000A 		vldr.32	s0, [r3]
 1582 0074 FFF7FEFF 		bl	configureTimer
 1583              	.LVL113:
 297:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 1584              		.loc 1 297 3 view .LVU395
 1585 0078 184B     		ldr	r3, .L81+24
 1586 007a 93ED000A 		vldr.32	s0, [r3]	@ int
 1587 007e 1848     		ldr	r0, .L81+28
 1588 0080 B8EEC00A 		vcvt.f32.s32	s0, s0
 1589 0084 FFF7FEFF 		bl	configureTimer
 1590              	.LVL114:
 298:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 1591              		.loc 1 298 3 view .LVU396
 1592 0088 1648     		ldr	r0, .L81+32
 1593 008a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1594              	.LVL115:
 299:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 1595              		.loc 1 299 3 view .LVU397
 1596 008e 1648     		ldr	r0, .L81+36
 1597 0090 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1598              	.LVL116:
 300:Core/Src/main.c **** 
 1599              		.loc 1 300 3 view .LVU398
 1600 0094 0122     		movs	r2, #1
 1601 0096 2021     		movs	r1, #32
 1602 0098 0A48     		ldr	r0, .L81
 1603 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1604              	.LVL117:
 1605              	.L77:
 306:Core/Src/main.c ****   {
 1606              		.loc 1 306 3 view .LVU399
 308:Core/Src/main.c ****     
 1607              		.loc 1 308 5 view .LVU400
 1608 009e FFF7FEFF 		bl	getIKS02A1
 1609              	.LVL118:
 310:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 1610              		.loc 1 310 5 view .LVU401
 310:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 1611              		.loc 1 310 22 is_stmt 0 view .LVU402
 1612 00a2 124B     		ldr	r3, .L81+40
 1613 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 310:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 1614              		.loc 1 310 8 view .LVU403
 1615 00a6 012B     		cmp	r3, #1
 1616 00a8 F9D1     		bne	.L77
 311:Core/Src/main.c ****       getVL53L1A1(&TOF_centre_result);
 1617              		.loc 1 311 7 is_stmt 1 view .LVU404
 1618 00aa 0848     		ldr	r0, .L81+8
 1619 00ac FFF7FEFF 		bl	getVL53L1A1
 1620              	.LVL119:
 312:Core/Src/main.c ****       getVL53L1A1(&TOF_right_result);
 1621              		.loc 1 312 7 view .LVU405
ARM GAS  C:\Temp\ccw7qgqf.s 			page 62


 1622 00b0 0748     		ldr	r0, .L81+12
 1623 00b2 FFF7FEFF 		bl	getVL53L1A1
 1624              	.LVL120:
 313:Core/Src/main.c ****       clearToGetL1 = 0;
 1625              		.loc 1 313 7 view .LVU406
 1626 00b6 0748     		ldr	r0, .L81+16
 1627 00b8 FFF7FEFF 		bl	getVL53L1A1
 1628              	.LVL121:
 314:Core/Src/main.c ****     }
 1629              		.loc 1 314 7 view .LVU407
 314:Core/Src/main.c ****     }
 1630              		.loc 1 314 20 is_stmt 0 view .LVU408
 1631 00bc 0B4B     		ldr	r3, .L81+40
 1632 00be 0022     		movs	r2, #0
 1633 00c0 1A70     		strb	r2, [r3]
 1634 00c2 ECE7     		b	.L77
 1635              	.L82:
 1636              		.align	2
 1637              	.L81:
 1638 00c4 00000240 		.word	1073872896
 1639 00c8 00000000 		.word	calibrated
 1640 00cc 00000000 		.word	TOF_left_result
 1641 00d0 00000000 		.word	TOF_centre_result
 1642 00d4 00000000 		.word	TOF_right_result
 1643 00d8 00000000 		.word	fastestODR
 1644 00dc 00000000 		.word	tof_odr
 1645 00e0 00040040 		.word	1073742848
 1646 00e4 00000000 		.word	htim2
 1647 00e8 00000000 		.word	htim3
 1648 00ec 00000000 		.word	clearToGetL1
 1649              		.cfi_endproc
 1650              	.LFE144:
 1652              		.global	IntCount
 1653              		.section	.bss.IntCount,"aw",%nobits
 1654              		.align	2
 1657              	IntCount:
 1658 0000 00000000 		.space	4
 1659              		.global	TOF_right_result
 1660              		.section	.bss.TOF_right_result,"aw",%nobits
 1661              		.align	2
 1664              	TOF_right_result:
 1665 0000 00000000 		.space	20
 1665      00000000 
 1665      00000000 
 1665      00000000 
 1665      00000000 
 1666              		.global	TOF_centre_result
 1667              		.section	.bss.TOF_centre_result,"aw",%nobits
 1668              		.align	2
 1671              	TOF_centre_result:
 1672 0000 00000000 		.space	20
 1672      00000000 
 1672      00000000 
 1672      00000000 
 1672      00000000 
 1673              		.global	TOF_left_result
 1674              		.section	.bss.TOF_left_result,"aw",%nobits
ARM GAS  C:\Temp\ccw7qgqf.s 			page 63


 1675              		.align	2
 1678              	TOF_left_result:
 1679 0000 00000000 		.space	20
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1680              		.global	pollingPeriod
 1681              		.section	.data.pollingPeriod,"aw"
 1682              		.align	2
 1685              	pollingPeriod:
 1686 0000 FA000000 		.word	250
 1687              		.global	timingBudget
 1688              		.section	.data.timingBudget,"aw"
 1689              		.align	1
 1692              	timingBudget:
 1693 0000 1E00     		.short	30
 1694              		.global	rangingProfile
 1695              		.section	.data.rangingProfile,"aw"
 1696              		.align	1
 1699              	rangingProfile:
 1700 0000 0100     		.short	1
 1701              		.global	tof_odr
 1702              		.section	.data.tof_odr,"aw"
 1703              		.align	2
 1706              	tof_odr:
 1707 0000 1E000000 		.word	30
 1708              		.global	tof_fsr
 1709              		.section	.data.tof_fsr,"aw"
 1710              		.align	2
 1713              	tof_fsr:
 1714 0000 01000000 		.word	1
 1715              		.global	counter
 1716              		.section	.bss.counter,"aw",%nobits
 1717              		.align	2
 1720              	counter:
 1721 0000 00000000 		.space	4
 1722              		.global	calibrated
 1723              		.section	.bss.calibrated,"aw",%nobits
 1726              	calibrated:
 1727 0000 00       		.space	1
 1728              		.global	clearToGetL1
 1729              		.section	.bss.clearToGetL1,"aw",%nobits
 1732              	clearToGetL1:
 1733 0000 00       		.space	1
 1734              		.global	clearToSend
 1735              		.section	.bss.clearToSend,"aw",%nobits
 1738              	clearToSend:
 1739 0000 00       		.space	1
 1740              		.global	bigBuffer
 1741              		.section	.bss.bigBuffer,"aw",%nobits
 1742              		.align	2
 1745              	bigBuffer:
 1746 0000 00000000 		.space	42
 1746      00000000 
 1746      00000000 
 1746      00000000 
ARM GAS  C:\Temp\ccw7qgqf.s 			page 64


 1746      00000000 
 1747              		.global	numberOfSimulinkBytes
 1748              		.section	.rodata.numberOfSimulinkBytes,"a"
 1749              		.align	2
 1752              	numberOfSimulinkBytes:
 1753 0000 24000000 		.word	36
 1754              		.global	expectedTerminator
 1755              		.section	.rodata.expectedTerminator,"a"
 1756              		.align	2
 1759              	expectedTerminator:
 1760 0000 415F4A   		.ascii	"A_J"
 1761              		.global	expectedHeader
 1762              		.section	.rodata.expectedHeader,"a"
 1763              		.align	2
 1766              	expectedHeader:
 1767 0000 4A5F41   		.ascii	"J_A"
 1768              		.global	terminator
 1769              		.section	.data.terminator,"aw"
 1770              		.align	2
 1773              	terminator:
 1774 0000 415F4A00 		.word	4874049
 1775              		.global	header
 1776              		.section	.data.header,"aw"
 1777              		.align	2
 1780              	header:
 1781 0000 4A5F4100 		.word	4284234
 1782              		.global	mag_axis
 1783              		.section	.bss.mag_axis,"aw",%nobits
 1784              		.align	2
 1787              	mag_axis:
 1788 0000 00000000 		.space	12
 1788      00000000 
 1788      00000000 
 1789              		.global	accel2_axis
 1790              		.section	.bss.accel2_axis,"aw",%nobits
 1791              		.align	2
 1794              	accel2_axis:
 1795 0000 00000000 		.space	12
 1795      00000000 
 1795      00000000 
 1796              		.global	gyro_axis
 1797              		.section	.bss.gyro_axis,"aw",%nobits
 1798              		.align	2
 1801              	gyro_axis:
 1802 0000 00000000 		.space	12
 1802      00000000 
 1802      00000000 
 1803              		.global	accel1_axis
 1804              		.section	.bss.accel1_axis,"aw",%nobits
 1805              		.align	2
 1808              	accel1_axis:
 1809 0000 00000000 		.space	12
 1809      00000000 
 1809      00000000 
 1810              		.global	hdma_usart2_tx
 1811              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 1812              		.align	2
ARM GAS  C:\Temp\ccw7qgqf.s 			page 65


 1815              	hdma_usart2_tx:
 1816 0000 00000000 		.space	96
 1816      00000000 
 1816      00000000 
 1816      00000000 
 1816      00000000 
 1817              		.global	huart2
 1818              		.section	.bss.huart2,"aw",%nobits
 1819              		.align	2
 1822              	huart2:
 1823 0000 00000000 		.space	72
 1823      00000000 
 1823      00000000 
 1823      00000000 
 1823      00000000 
 1824              		.global	htim3
 1825              		.section	.bss.htim3,"aw",%nobits
 1826              		.align	2
 1829              	htim3:
 1830 0000 00000000 		.space	72
 1830      00000000 
 1830      00000000 
 1830      00000000 
 1830      00000000 
 1831              		.global	htim2
 1832              		.section	.bss.htim2,"aw",%nobits
 1833              		.align	2
 1836              	htim2:
 1837 0000 00000000 		.space	72
 1837      00000000 
 1837      00000000 
 1837      00000000 
 1837      00000000 
 1838              		.text
 1839              	.Letext0:
 1840              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1841              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1842              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1843              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1844              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1845              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1846              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1847              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1848              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1849              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1850              		.file 13 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 1851              		.file 14 "Drivers/BSP/IKS02A1/iks02a1_motion_sensors.h"
 1852              		.file 15 "Core/Inc/VL53L1A1_Simulink.h"
 1853              		.file 16 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1854              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1855              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1856              		.file 19 "Core/Inc/IKS02A1_Simulink.h"
 1857              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1858              		.file 21 "<built-in>"
ARM GAS  C:\Temp\ccw7qgqf.s 			page 66


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\ccw7qgqf.s:21     .text.MX_GPIO_Init:00000000 $t
  C:\Temp\ccw7qgqf.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\ccw7qgqf.s:198    .text.MX_GPIO_Init:000000cc $d
  C:\Temp\ccw7qgqf.s:205    .text.MX_DMA_Init:00000000 $t
  C:\Temp\ccw7qgqf.s:210    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\ccw7qgqf.s:278    .text.MX_DMA_Init:00000050 $d
  C:\Temp\ccw7qgqf.s:283    .text.bytesToFloat_main:00000000 $t
  C:\Temp\ccw7qgqf.s:289    .text.bytesToFloat_main:00000000 bytesToFloat_main
  C:\Temp\ccw7qgqf.s:319    .text.bytesToInt32_main:00000000 $t
  C:\Temp\ccw7qgqf.s:325    .text.bytesToInt32_main:00000000 bytesToInt32_main
  C:\Temp\ccw7qgqf.s:360    .text.receivedFromSimulink:00000000 $t
  C:\Temp\ccw7qgqf.s:366    .text.receivedFromSimulink:00000000 receivedFromSimulink
  C:\Temp\ccw7qgqf.s:487    .text.receivedFromSimulink:000000ac $d
  C:\Temp\ccw7qgqf.s:1713   .data.tof_fsr:00000000 tof_fsr
  C:\Temp\ccw7qgqf.s:1706   .data.tof_odr:00000000 tof_odr
  C:\Temp\ccw7qgqf.s:501    .text.configureTimer:00000000 $t
  C:\Temp\ccw7qgqf.s:507    .text.configureTimer:00000000 configureTimer
  C:\Temp\ccw7qgqf.s:582    .text.configureTimer:0000004c $d
  C:\Temp\ccw7qgqf.s:588    .text.get_fastest_odr:00000000 $t
  C:\Temp\ccw7qgqf.s:594    .text.get_fastest_odr:00000000 get_fastest_odr
  C:\Temp\ccw7qgqf.s:647    .text.sendToSimulink:00000000 $t
  C:\Temp\ccw7qgqf.s:653    .text.sendToSimulink:00000000 sendToSimulink
  C:\Temp\ccw7qgqf.s:881    .text.sendToSimulink:000001c0 $d
  C:\Temp\ccw7qgqf.s:1822   .bss.huart2:00000000 huart2
  C:\Temp\ccw7qgqf.s:1780   .data.header:00000000 header
  C:\Temp\ccw7qgqf.s:1678   .bss.TOF_left_result:00000000 TOF_left_result
  C:\Temp\ccw7qgqf.s:1671   .bss.TOF_centre_result:00000000 TOF_centre_result
  C:\Temp\ccw7qgqf.s:1664   .bss.TOF_right_result:00000000 TOF_right_result
  C:\Temp\ccw7qgqf.s:1808   .bss.accel1_axis:00000000 accel1_axis
  C:\Temp\ccw7qgqf.s:1801   .bss.gyro_axis:00000000 gyro_axis
  C:\Temp\ccw7qgqf.s:1794   .bss.accel2_axis:00000000 accel2_axis
  C:\Temp\ccw7qgqf.s:1787   .bss.mag_axis:00000000 mag_axis
  C:\Temp\ccw7qgqf.s:1720   .bss.counter:00000000 counter
  C:\Temp\ccw7qgqf.s:1773   .data.terminator:00000000 terminator
  C:\Temp\ccw7qgqf.s:898    .text.initialCalibration:00000000 $t
  C:\Temp\ccw7qgqf.s:904    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\ccw7qgqf.s:989    .text.initialCalibration:00000078 $d
  C:\Temp\ccw7qgqf.s:1745   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\ccw7qgqf.s:1726   .bss.calibrated:00000000 calibrated
  C:\Temp\ccw7qgqf.s:1002   .text.Error_Handler:00000000 $t
  C:\Temp\ccw7qgqf.s:1008   .text.Error_Handler:00000000 Error_Handler
  C:\Temp\ccw7qgqf.s:1040   .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\ccw7qgqf.s:1045   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\ccw7qgqf.s:1102   .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\ccw7qgqf.s:1108   .text.MX_TIM2_Init:00000000 $t
  C:\Temp\ccw7qgqf.s:1113   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\ccw7qgqf.s:1212   .text.MX_TIM2_Init:00000064 $d
  C:\Temp\ccw7qgqf.s:1836   .bss.htim2:00000000 htim2
  C:\Temp\ccw7qgqf.s:1217   .text.MX_TIM3_Init:00000000 $t
  C:\Temp\ccw7qgqf.s:1222   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
  C:\Temp\ccw7qgqf.s:1321   .text.MX_TIM3_Init:00000060 $d
  C:\Temp\ccw7qgqf.s:1829   .bss.htim3:00000000 htim3
  C:\Temp\ccw7qgqf.s:1327   .text.SystemClock_Config:00000000 $t
  C:\Temp\ccw7qgqf.s:1333   .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\ccw7qgqf.s:1478   .text.SystemClock_Config:00000098 $d
ARM GAS  C:\Temp\ccw7qgqf.s 			page 67


  C:\Temp\ccw7qgqf.s:1484   .text.main:00000000 $t
  C:\Temp\ccw7qgqf.s:1490   .text.main:00000000 main
  C:\Temp\ccw7qgqf.s:1638   .text.main:000000c4 $d
  C:\Temp\ccw7qgqf.s:1732   .bss.clearToGetL1:00000000 clearToGetL1
  C:\Temp\ccw7qgqf.s:1657   .bss.IntCount:00000000 IntCount
  C:\Temp\ccw7qgqf.s:1654   .bss.IntCount:00000000 $d
  C:\Temp\ccw7qgqf.s:1661   .bss.TOF_right_result:00000000 $d
  C:\Temp\ccw7qgqf.s:1668   .bss.TOF_centre_result:00000000 $d
  C:\Temp\ccw7qgqf.s:1675   .bss.TOF_left_result:00000000 $d
  C:\Temp\ccw7qgqf.s:1685   .data.pollingPeriod:00000000 pollingPeriod
  C:\Temp\ccw7qgqf.s:1682   .data.pollingPeriod:00000000 $d
  C:\Temp\ccw7qgqf.s:1692   .data.timingBudget:00000000 timingBudget
  C:\Temp\ccw7qgqf.s:1689   .data.timingBudget:00000000 $d
  C:\Temp\ccw7qgqf.s:1699   .data.rangingProfile:00000000 rangingProfile
  C:\Temp\ccw7qgqf.s:1696   .data.rangingProfile:00000000 $d
  C:\Temp\ccw7qgqf.s:1703   .data.tof_odr:00000000 $d
  C:\Temp\ccw7qgqf.s:1710   .data.tof_fsr:00000000 $d
  C:\Temp\ccw7qgqf.s:1717   .bss.counter:00000000 $d
  C:\Temp\ccw7qgqf.s:1727   .bss.calibrated:00000000 $d
  C:\Temp\ccw7qgqf.s:1733   .bss.clearToGetL1:00000000 $d
  C:\Temp\ccw7qgqf.s:1738   .bss.clearToSend:00000000 clearToSend
  C:\Temp\ccw7qgqf.s:1739   .bss.clearToSend:00000000 $d
  C:\Temp\ccw7qgqf.s:1742   .bss.bigBuffer:00000000 $d
  C:\Temp\ccw7qgqf.s:1752   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\ccw7qgqf.s:1749   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\ccw7qgqf.s:1759   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\ccw7qgqf.s:1756   .rodata.expectedTerminator:00000000 $d
  C:\Temp\ccw7qgqf.s:1766   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\ccw7qgqf.s:1763   .rodata.expectedHeader:00000000 $d
  C:\Temp\ccw7qgqf.s:1770   .data.terminator:00000000 $d
  C:\Temp\ccw7qgqf.s:1777   .data.header:00000000 $d
  C:\Temp\ccw7qgqf.s:1784   .bss.mag_axis:00000000 $d
  C:\Temp\ccw7qgqf.s:1791   .bss.accel2_axis:00000000 $d
  C:\Temp\ccw7qgqf.s:1798   .bss.gyro_axis:00000000 $d
  C:\Temp\ccw7qgqf.s:1805   .bss.accel1_axis:00000000 $d
  C:\Temp\ccw7qgqf.s:1815   .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
  C:\Temp\ccw7qgqf.s:1812   .bss.hdma_usart2_tx:00000000 $d
  C:\Temp\ccw7qgqf.s:1819   .bss.huart2:00000000 $d
  C:\Temp\ccw7qgqf.s:1826   .bss.htim3:00000000 $d
  C:\Temp\ccw7qgqf.s:1833   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
accel1_fsr
accel1_odr
gyro_fsr
gyro_odr
accel2_fsr
accel2_odr
mag_odr
__aeabi_f2ulz
SystemCoreClock
HAL_UART_Transmit
temperature
ARM GAS  C:\Temp\ccw7qgqf.s 			page 68


fastestODR
HAL_UART_Receive
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
XNUCLEO53L1A1_Init
initVL53L1A1
initIKS02A1
calibrate_IKS02A1
HAL_TIM_Base_Start_IT
getIKS02A1
getVL53L1A1
