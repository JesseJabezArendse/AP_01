
build/debug/NucleoMX_IKS02A1_VL53L1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008484  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008624  08008624  00009624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008778  08008778  00009778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008780  08008780  00009780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008784  08008784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  20000000  08008788  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d8  20000140  080088c8  0000a140  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000818  080088c8  0000a818  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY
 10 .comment      00000039  00000000  00000000  0000a170  2**0
                  CONTENTS, READONLY
 11 .debug_info   000417c0  00000000  00000000  0000a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a33  00000000  00000000  0004b969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000194f2  00000000  00000000  0005039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002888  00000000  00000000  00069890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ee7  00000000  00000000  0006c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00027da2  00000000  00000000  0006dfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00010710  00000000  00000000  00095da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000890c  00000000  00000000  000a64b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000199  00000000  00000000  000aedc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2uiz>:
 80009dc:	004a      	lsls	r2, r1, #1
 80009de:	d211      	bcs.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009e4:	d211      	bcs.n	8000a0a <__aeabi_d2uiz+0x2e>
 80009e6:	d50d      	bpl.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d40e      	bmi.n	8000a10 <__aeabi_d2uiz+0x34>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	fa23 f002 	lsr.w	r0, r3, r2
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0e:	d102      	bne.n	8000a16 <__aeabi_d2uiz+0x3a>
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	4770      	bx	lr

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b80c 	b.w	8000a4c <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f007 fc88 	bl	8008350 <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_idiv0>:
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__do_global_dtors_aux>:
 8000a50:	b510      	push	{r4, lr}
 8000a52:	4c05      	ldr	r4, [pc, #20]	@ (8000a68 <__do_global_dtors_aux+0x18>)
 8000a54:	7823      	ldrb	r3, [r4, #0]
 8000a56:	b933      	cbnz	r3, 8000a66 <__do_global_dtors_aux+0x16>
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__do_global_dtors_aux+0x1c>)
 8000a5a:	b113      	cbz	r3, 8000a62 <__do_global_dtors_aux+0x12>
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <__do_global_dtors_aux+0x20>)
 8000a5e:	f3af 8000 	nop.w
 8000a62:	2301      	movs	r3, #1
 8000a64:	7023      	strb	r3, [r4, #0]
 8000a66:	bd10      	pop	{r4, pc}
 8000a68:	20000140 	.word	0x20000140
 8000a6c:	00000000 	.word	0x00000000
 8000a70:	0800860c 	.word	0x0800860c

08000a74 <frame_dummy>:
 8000a74:	b508      	push	{r3, lr}
 8000a76:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <frame_dummy+0x10>)
 8000a78:	b11b      	cbz	r3, 8000a82 <frame_dummy+0xe>
 8000a7a:	4903      	ldr	r1, [pc, #12]	@ (8000a88 <frame_dummy+0x14>)
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <frame_dummy+0x18>)
 8000a7e:	f3af 8000 	nop.w
 8000a82:	bd08      	pop	{r3, pc}
 8000a84:	00000000 	.word	0x00000000
 8000a88:	20000144 	.word	0x20000144
 8000a8c:	0800860c 	.word	0x0800860c

08000a90 <getTemperature>:
float_t temperature;

// Functions /////////////////////////////////////////////


void getTemperature(){
 8000a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a92:	b085      	sub	sp, #20
    HAL_I2C_Mem_Read(&hi2c1 , IIS2DLPC_I2C_ADD_H , IIS2DLPC_OUT_T_L , 1 , &temperature_raw_l , 1 , HAL_MAX_DELAY);
 8000a94:	4f11      	ldr	r7, [pc, #68]	@ (8000adc <getTemperature+0x4c>)
 8000a96:	f04f 36ff 	mov.w	r6, #4294967295
 8000a9a:	9602      	str	r6, [sp, #8]
 8000a9c:	2401      	movs	r4, #1
 8000a9e:	9401      	str	r4, [sp, #4]
 8000aa0:	4d0f      	ldr	r5, [pc, #60]	@ (8000ae0 <getTemperature+0x50>)
 8000aa2:	9500      	str	r5, [sp, #0]
 8000aa4:	4623      	mov	r3, r4
 8000aa6:	220d      	movs	r2, #13
 8000aa8:	2133      	movs	r1, #51	@ 0x33
 8000aaa:	4638      	mov	r0, r7
 8000aac:	f005 fb0e 	bl	80060cc <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1 , IIS2DLPC_I2C_ADD_H , IIS2DLPC_OUT_T_H , 1 , &temperature_raw_h , 1 , HAL_MAX_DELAY);
 8000ab0:	9602      	str	r6, [sp, #8]
 8000ab2:	9401      	str	r4, [sp, #4]
 8000ab4:	4e0b      	ldr	r6, [pc, #44]	@ (8000ae4 <getTemperature+0x54>)
 8000ab6:	9600      	str	r6, [sp, #0]
 8000ab8:	4623      	mov	r3, r4
 8000aba:	220e      	movs	r2, #14
 8000abc:	2133      	movs	r1, #51	@ 0x33
 8000abe:	4638      	mov	r0, r7
 8000ac0:	f005 fb04 	bl	80060cc <HAL_I2C_Mem_Read>
    int16_t rawTemp = (int16_t)((temperature_raw_h << 8) | temperature_raw_l); // Combine low and high bytes
 8000ac4:	7833      	ldrb	r3, [r6, #0]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	7828      	ldrb	r0, [r5, #0]
    temperature = iis2dlpc_from_lsb_to_celsius(rawTemp);
 8000acc:	4318      	orrs	r0, r3
 8000ace:	f001 fa71 	bl	8001fb4 <iis2dlpc_from_lsb_to_celsius>
 8000ad2:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <getTemperature+0x58>)
 8000ad4:	ed83 0a00 	vstr	s0, [r3]
}
 8000ad8:	b005      	add	sp, #20
 8000ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000adc:	20000578 	.word	0x20000578
 8000ae0:	20000161 	.word	0x20000161
 8000ae4:	20000160 	.word	0x20000160
 8000ae8:	2000015c 	.word	0x2000015c

08000aec <initIKS02A1>:
    memcpy(&result, bytes, sizeof(int32_t));

    return result;
}

void initIKS02A1(){
 8000aec:	b508      	push	{r3, lr}

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 8000aee:	2103      	movs	r1, #3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f002 f841 	bl	8002b78 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8000af6:	2102      	movs	r1, #2
 8000af8:	2001      	movs	r0, #1
 8000afa:	f002 f83d 	bl	8002b78 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 8000afe:	2104      	movs	r1, #4
 8000b00:	2002      	movs	r0, #2
 8000b02:	f002 f839 	bl	8002b78 <IKS02A1_MOTION_SENSOR_Init>
  
}
 8000b06:	bd08      	pop	{r3, pc}

08000b08 <getIKS02A1>:

void getIKS02A1(){
 8000b08:	b508      	push	{r3, lr}
    while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO , &accel1_axis) != BSP_ERROR_NONE){}
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <getIKS02A1+0x40>)
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f002 f8f2 	bl	8002cf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d1f8      	bne.n	8000b0a <getIKS02A1+0x2>
    while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_ISM330DHCX_0, MOTION_GYRO     , &gyro_axis  ) != BSP_ERROR_NONE){}
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <getIKS02A1+0x44>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f002 f8eb 	bl	8002cf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d1f8      	bne.n	8000b18 <getIKS02A1+0x10>
    while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_IIS2DLPC_0,   MOTION_ACCELERO , &accel2_axis) != BSP_ERROR_NONE){}
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <getIKS02A1+0x48>)
 8000b28:	2102      	movs	r1, #2
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f002 f8e4 	bl	8002cf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1f8      	bne.n	8000b26 <getIKS02A1+0x1e>
    while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_IIS2MDC_0,    MOTION_MAGNETO  , &mag_axis   ) != BSP_ERROR_NONE){}
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <getIKS02A1+0x4c>)
 8000b36:	2104      	movs	r1, #4
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f002 f8dd 	bl	8002cf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d1f8      	bne.n	8000b34 <getIKS02A1+0x2c>
    getTemperature();
 8000b42:	f7ff ffa5 	bl	8000a90 <getTemperature>
}
 8000b46:	bd08      	pop	{r3, pc}
 8000b48:	2000036c 	.word	0x2000036c
 8000b4c:	20000360 	.word	0x20000360
 8000b50:	20000354 	.word	0x20000354
 8000b54:	20000348 	.word	0x20000348

08000b58 <calibrate_IKS02A1>:
    IKS02A1_MOTION_SENSOR_SetOutputDataRate (INSTANCE_IIS2MDC,MOTION_MAGNETO,mag_odr);
}

// functions from BSP/<boards>
// parameters from BSP/<boards>
void calibrate_IKS02A1(){
 8000b58:	b508      	push	{r3, lr}

    // Accel1
    IKS02A1_MOTION_SENSOR_SetFullScale      (INSTANCE_ISM330DHCX,MOTION_ACCELERO,accel1_fsr);
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <calibrate_IKS02A1+0x60>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	2102      	movs	r1, #2
 8000b60:	2000      	movs	r0, #0
 8000b62:	f002 f91f 	bl	8002da4 <IKS02A1_MOTION_SENSOR_SetFullScale>
    IKS02A1_MOTION_SENSOR_SetOutputDataRate (INSTANCE_ISM330DHCX,MOTION_ACCELERO,accel1_odr);
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <calibrate_IKS02A1+0x64>)
 8000b68:	ed93 0a00 	vldr	s0, [r3]
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f002 f8ee 	bl	8002d50 <IKS02A1_MOTION_SENSOR_SetOutputDataRate>
    // Gyro1
    IKS02A1_MOTION_SENSOR_SetFullScale      (INSTANCE_ISM330DHCX,MOTION_GYRO,gyro_fsr);
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <calibrate_IKS02A1+0x68>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f002 f912 	bl	8002da4 <IKS02A1_MOTION_SENSOR_SetFullScale>
    IKS02A1_MOTION_SENSOR_SetOutputDataRate (INSTANCE_ISM330DHCX,MOTION_GYRO,gyro_odr);
 8000b80:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <calibrate_IKS02A1+0x6c>)
 8000b82:	ed93 0a00 	vldr	s0, [r3]
 8000b86:	2101      	movs	r1, #1
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f002 f8e1 	bl	8002d50 <IKS02A1_MOTION_SENSOR_SetOutputDataRate>

    // Accel2
    IKS02A1_MOTION_SENSOR_SetFullScale      (INSTANCE_IIS2DLPC,MOTION_ACCELERO,accel2_fsr);
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <calibrate_IKS02A1+0x70>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	2102      	movs	r1, #2
 8000b94:	2001      	movs	r0, #1
 8000b96:	f002 f905 	bl	8002da4 <IKS02A1_MOTION_SENSOR_SetFullScale>
    IKS02A1_MOTION_SENSOR_SetOutputDataRate (INSTANCE_IIS2DLPC,MOTION_ACCELERO,accel2_odr);
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <calibrate_IKS02A1+0x74>)
 8000b9c:	ed93 0a00 	vldr	s0, [r3]
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f002 f8d4 	bl	8002d50 <IKS02A1_MOTION_SENSOR_SetOutputDataRate>

    // Magneto
    IKS02A1_MOTION_SENSOR_SetOutputDataRate (INSTANCE_IIS2MDC,MOTION_MAGNETO,mag_odr);
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <calibrate_IKS02A1+0x78>)
 8000baa:	ed93 0a00 	vldr	s0, [r3]
 8000bae:	2104      	movs	r1, #4
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f002 f8cd 	bl	8002d50 <IKS02A1_MOTION_SENSOR_SetOutputDataRate>

 8000bb6:	bd08      	pop	{r3, pc}
 8000bb8:	20000180 	.word	0x20000180
 8000bbc:	2000017c 	.word	0x2000017c
 8000bc0:	20000178 	.word	0x20000178
 8000bc4:	20000174 	.word	0x20000174
 8000bc8:	20000170 	.word	0x20000170
 8000bcc:	2000016c 	.word	0x2000016c
 8000bd0:	20000168 	.word	0x20000168

08000bd4 <initVL53L1A1>:
extern UART_HandleTypeDef huart2;


// Functions /////////////////////////////////////////////

void initVL53L1A1(int ToFNumber, uint8_t newToFAddress){
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	4604      	mov	r4, r0
 8000bda:	460d      	mov	r5, r1
  int status = 0;
  uint8_t buffer[50];

  uint8_t byteData, sensorState=0;
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f88d 1002 	strb.w	r1, [sp, #2]
  uint16_t wordData;
  status = XNUCLEO53L1A1_ResetId(ToFNumber, VL53L1X_POWER_OFF); // Reset ToF sensor
 8000be2:	f000 fd51 	bl	8001688 <XNUCLEO53L1A1_ResetId>
  HAL_Delay(2);
 8000be6:	2002      	movs	r0, #2
 8000be8:	f003 ff04 	bl	80049f4 <HAL_Delay>
  status = XNUCLEO53L1A1_ResetId(ToFNumber, VL53L1X_POWER_ON); // Reset ToF sensor
 8000bec:	2101      	movs	r1, #1
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f000 fd4a 	bl	8001688 <XNUCLEO53L1A1_ResetId>
  HAL_Delay(2);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f003 fefd 	bl	80049f4 <HAL_Delay>


/* Those basic I2C read functions can be used to check your own I2C functions */
  status = VL53L1_RdByte(VL53L1_address_default, 0x010F, &byteData);
 8000bfa:	4e42      	ldr	r6, [pc, #264]	@ (8000d04 <initVL53L1A1+0x130>)
 8000bfc:	f10d 0203 	add.w	r2, sp, #3
 8000c00:	f240 110f 	movw	r1, #271	@ 0x10f
 8000c04:	8830      	ldrh	r0, [r6, #0]
 8000c06:	f006 fe6f 	bl	80078e8 <VL53L1_RdByte>
  sprintf(buffer, "VL53L1X Model_ID: %X \n", byteData);
 8000c0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000c0e:	493e      	ldr	r1, [pc, #248]	@ (8000d08 <initVL53L1A1+0x134>)
 8000c10:	a801      	add	r0, sp, #4
 8000c12:	f006 fed1 	bl	80079b8 <siprintf>
  HAL_UART_Transmit(&huart2 , buffer, sizeof(buffer) , HAL_MAX_DELAY);
 8000c16:	4c3d      	ldr	r4, [pc, #244]	@ (8000d0c <initVL53L1A1+0x138>)
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	2232      	movs	r2, #50	@ 0x32
 8000c1e:	a901      	add	r1, sp, #4
 8000c20:	4620      	mov	r0, r4
 8000c22:	f006 fb5c 	bl	80072de <HAL_UART_Transmit>

  status = VL53L1_RdByte(VL53L1_address_default, 0x0110, &byteData);
 8000c26:	f10d 0203 	add.w	r2, sp, #3
 8000c2a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000c2e:	8830      	ldrh	r0, [r6, #0]
 8000c30:	f006 fe5a 	bl	80078e8 <VL53L1_RdByte>
  sprintf(buffer, "VL53L1X Module_Type: %X \n", byteData);
 8000c34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000c38:	4935      	ldr	r1, [pc, #212]	@ (8000d10 <initVL53L1A1+0x13c>)
 8000c3a:	a801      	add	r0, sp, #4
 8000c3c:	f006 febc 	bl	80079b8 <siprintf>
  HAL_UART_Transmit(&huart2 , buffer, sizeof(buffer) , HAL_MAX_DELAY);
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2232      	movs	r2, #50	@ 0x32
 8000c46:	a901      	add	r1, sp, #4
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f006 fb48 	bl	80072de <HAL_UART_Transmit>

  status = VL53L1_RdWord(VL53L1_address_default, 0x010F, &wordData);
 8000c4e:	466a      	mov	r2, sp
 8000c50:	f240 110f 	movw	r1, #271	@ 0x10f
 8000c54:	8830      	ldrh	r0, [r6, #0]
 8000c56:	f006 fe63 	bl	8007920 <VL53L1_RdWord>
  sprintf(buffer, "VL53L1X: %X \n", wordData);
 8000c5a:	f8bd 2000 	ldrh.w	r2, [sp]
 8000c5e:	492d      	ldr	r1, [pc, #180]	@ (8000d14 <initVL53L1A1+0x140>)
 8000c60:	a801      	add	r0, sp, #4
 8000c62:	f006 fea9 	bl	80079b8 <siprintf>
  HAL_UART_Transmit(&huart2 , buffer, sizeof(buffer) , HAL_MAX_DELAY);
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	2232      	movs	r2, #50	@ 0x32
 8000c6c:	a901      	add	r1, sp, #4
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f006 fb35 	bl	80072de <HAL_UART_Transmit>

  while(sensorState==0){
 8000c74:	e008      	b.n	8000c88 <initVL53L1A1+0xb4>
		status = VL53L1X_BootState(VL53L1_address_default, &sensorState);
 8000c76:	f10d 0102 	add.w	r1, sp, #2
 8000c7a:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <initVL53L1A1+0x130>)
 8000c7c:	8818      	ldrh	r0, [r3, #0]
 8000c7e:	f000 fb03 	bl	8001288 <VL53L1X_BootState>
	  HAL_Delay(2);
 8000c82:	2002      	movs	r0, #2
 8000c84:	f003 feb6 	bl	80049f4 <HAL_Delay>
  while(sensorState==0){
 8000c88:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f2      	beq.n	8000c76 <initVL53L1A1+0xa2>
  }
  sprintf(buffer, "VL53L1X Model_ID: %X \n", byteData);
 8000c90:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000c94:	491c      	ldr	r1, [pc, #112]	@ (8000d08 <initVL53L1A1+0x134>)
 8000c96:	a801      	add	r0, sp, #4
 8000c98:	f006 fe8e 	bl	80079b8 <siprintf>
  HAL_UART_Transmit(&huart2 , buffer, sizeof(buffer) , HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	2232      	movs	r2, #50	@ 0x32
 8000ca2:	a901      	add	r1, sp, #4
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <initVL53L1A1+0x138>)
 8000ca6:	f006 fb1a 	bl	80072de <HAL_UART_Transmit>

    /* This function must to be called to initialize the sensor with the default setting  */
  status = VL53L1X_SensorInit(VL53L1_address_default);
 8000caa:	4c16      	ldr	r4, [pc, #88]	@ (8000d04 <initVL53L1A1+0x130>)
 8000cac:	8820      	ldrh	r0, [r4, #0]
 8000cae:	f000 f8dd 	bl	8000e6c <VL53L1X_SensorInit>

  /* Optional functions to be used to change the main ranging parameters according the application requirements to get the best ranging performances */

  status = VL53L1X_SetDistanceMode(VL53L1_address_default, rangingProfile); /* 1=short, 2=long */
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <initVL53L1A1+0x144>)
 8000cb4:	8819      	ldrh	r1, [r3, #0]
 8000cb6:	8820      	ldrh	r0, [r4, #0]
 8000cb8:	f000 fa5d 	bl	8001176 <VL53L1X_SetDistanceMode>

  status = VL53L1X_SetTimingBudgetInMs(VL53L1_address_default, timingBudget); /* in ms possible values [20, 50, 100, 200, 500] */
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <initVL53L1A1+0x148>)
 8000cbe:	8819      	ldrh	r1, [r3, #0]
 8000cc0:	8820      	ldrh	r0, [r4, #0]
 8000cc2:	f000 f97e 	bl	8000fc2 <VL53L1X_SetTimingBudgetInMs>
  status = VL53L1X_SetInterMeasurementInMs(VL53L1_address_default, pollingPeriod); /* in ms, IM must be > = TB */
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <initVL53L1A1+0x14c>)
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	8820      	ldrh	r0, [r4, #0]
 8000ccc:	f000 fab4 	bl	8001238 <VL53L1X_SetInterMeasurementInMs>

  status = VL53L1X_SetROI(VL53L1_address_default, ROI_X, ROI_Y); /* minimum ROI 4,4 */
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <initVL53L1A1+0x150>)
 8000cd2:	881a      	ldrh	r2, [r3, #0]
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <initVL53L1A1+0x154>)
 8000cd6:	8819      	ldrh	r1, [r3, #0]
 8000cd8:	8820      	ldrh	r0, [r4, #0]
 8000cda:	f000 fb37 	bl	800134c <VL53L1X_SetROI>
  status = VL53L1X_StartRanging(VL53L1_address_default);   /* This function has to be called to enable the ranging */
 8000cde:	8820      	ldrh	r0, [r4, #0]
 8000ce0:	f000 f896 	bl	8000e10 <VL53L1X_StartRanging>
  status =  VL53L1X_SetI2CAddress(VL53L1_address_default, newToFAddress);
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	8820      	ldrh	r0, [r4, #0]
 8000ce8:	f000 f872 	bl	8000dd0 <VL53L1X_SetI2CAddress>
  if (status == 0){
 8000cec:	b108      	cbz	r0, 8000cf2 <initVL53L1A1+0x11e>
    HAL_UART_Transmit(&huart2 , "VL53L1X Initialized and Calibrated", sizeof("VL53L1X Initialized and Calibrated") , HAL_MAX_DELAY);
  }
}
 8000cee:	b00e      	add	sp, #56	@ 0x38
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_Transmit(&huart2 , "VL53L1X Initialized and Calibrated", sizeof("VL53L1X Initialized and Calibrated") , HAL_MAX_DELAY);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2223      	movs	r2, #35	@ 0x23
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <initVL53L1A1+0x158>)
 8000cfa:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <initVL53L1A1+0x138>)
 8000cfc:	f006 faef 	bl	80072de <HAL_UART_Transmit>
}
 8000d00:	e7f5      	b.n	8000cee <initVL53L1A1+0x11a>
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	08008624 	.word	0x08008624
 8000d0c:	200003d8 	.word	0x200003d8
 8000d10:	0800863c 	.word	0x0800863c
 8000d14:	08008658 	.word	0x08008658
 8000d18:	200000d2 	.word	0x200000d2
 8000d1c:	200000d0 	.word	0x200000d0
 8000d20:	200000cc 	.word	0x200000cc
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	08008668 	.word	0x08008668

08000d30 <getVL53L1A1>:

void getVL53L1A1(VL53L1_Result* TOF_result){
 8000d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d34:	4604      	mov	r4, r0
    int status = 0;
    uint8_t buffer[150];

    while (dataReady == 0){
 8000d36:	e006      	b.n	8000d46 <getVL53L1A1+0x16>
		  status = VL53L1X_CheckForDataReady(TOF_result->Address, &dataReady);
 8000d38:	491f      	ldr	r1, [pc, #124]	@ (8000db8 <getVL53L1A1+0x88>)
 8000d3a:	8820      	ldrh	r0, [r4, #0]
 8000d3c:	f000 f874 	bl	8000e28 <VL53L1X_CheckForDataReady>
          HAL_Delay(2);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f003 fe57 	bl	80049f4 <HAL_Delay>
    while (dataReady == 0){
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <getVL53L1A1+0x88>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f4      	beq.n	8000d38 <getVL53L1A1+0x8>
	}
	dataReady = 0;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <getVL53L1A1+0x88>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
	status = VL53L1X_GetRangeStatus(TOF_result->Address, &RangeStatus);
 8000d54:	4f19      	ldr	r7, [pc, #100]	@ (8000dbc <getVL53L1A1+0x8c>)
 8000d56:	4639      	mov	r1, r7
 8000d58:	8820      	ldrh	r0, [r4, #0]
 8000d5a:	f000 fadd 	bl	8001318 <VL53L1X_GetRangeStatus>
	status = VL53L1X_GetDistance(TOF_result->Address, &Distance);
 8000d5e:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8000dcc <getVL53L1A1+0x9c>
 8000d62:	4641      	mov	r1, r8
 8000d64:	8820      	ldrh	r0, [r4, #0]
 8000d66:	f000 fa9f 	bl	80012a8 <VL53L1X_GetDistance>
	status = VL53L1X_GetSignalRate(TOF_result->Address, &SignalRate);
 8000d6a:	4d15      	ldr	r5, [pc, #84]	@ (8000dc0 <getVL53L1A1+0x90>)
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	8820      	ldrh	r0, [r4, #0]
 8000d70:	f000 faa7 	bl	80012c2 <VL53L1X_GetSignalRate>
	status = VL53L1X_GetAmbientRate(TOF_result->Address, &AmbientRate);
 8000d74:	4e13      	ldr	r6, [pc, #76]	@ (8000dc4 <getVL53L1A1+0x94>)
 8000d76:	4631      	mov	r1, r6
 8000d78:	8820      	ldrh	r0, [r4, #0]
 8000d7a:	f000 fabe 	bl	80012fa <VL53L1X_GetAmbientRate>
	status = VL53L1X_GetSpadNb(TOF_result->Address, &SpadNum);
 8000d7e:	4912      	ldr	r1, [pc, #72]	@ (8000dc8 <getVL53L1A1+0x98>)
 8000d80:	8820      	ldrh	r0, [r4, #0]
 8000d82:	f000 faac 	bl	80012de <VL53L1X_GetSpadNb>
	status = VL53L1X_ClearInterrupt(TOF_result->Address); /* clear interrupt has to be called to enable next interrupt*/
 8000d86:	8820      	ldrh	r0, [r4, #0]
 8000d88:	f000 f828 	bl	8000ddc <VL53L1X_ClearInterrupt>
    
  TOF_result->Distance = Distance;
 8000d8c:	f8b8 3000 	ldrh.w	r3, [r8]
 8000d90:	6063      	str	r3, [r4, #4]
  TOF_result->Status = RangeStatus;
 8000d92:	783b      	ldrb	r3, [r7, #0]
 8000d94:	60a3      	str	r3, [r4, #8]
  TOF_result->Ambient = AmbientRate;
 8000d96:	8833      	ldrh	r3, [r6, #0]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da0:	edc4 7a03 	vstr	s15, [r4, #12]
  TOF_result->Signal = SignalRate;
 8000da4:	882b      	ldrh	r3, [r5, #0]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dae:	edc4 7a04 	vstr	s15, [r4, #16]

    // sprintf(buffer, "Distance: %d \n", TOF_result.Distance);
}
 8000db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000db6:	bf00      	nop
 8000db8:	2000018c 	.word	0x2000018c
 8000dbc:	2000018d 	.word	0x2000018d
 8000dc0:	20000188 	.word	0x20000188
 8000dc4:	20000186 	.word	0x20000186
 8000dc8:	20000184 	.word	0x20000184
 8000dcc:	2000018a 	.word	0x2000018a

08000dd0 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8000dd0:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000dd2:	084a      	lsrs	r2, r1, #1
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f006 fd43 	bl	8007860 <VL53L1_WrByte>
	return status;
}
 8000dda:	bd08      	pop	{r3, pc}

08000ddc <VL53L1X_ClearInterrupt>:
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
	return status;
}

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000ddc:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2186      	movs	r1, #134	@ 0x86
 8000de2:	f006 fd3d 	bl	8007860 <VL53L1_WrByte>
	return status;
}
 8000de6:	bd08      	pop	{r3, pc}

08000de8 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000de8:	b510      	push	{r4, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	460c      	mov	r4, r1
	uint8_t Temp;
	VL53L1X_ERROR status = 0;

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000dee:	f10d 0207 	add.w	r2, sp, #7
 8000df2:	2130      	movs	r1, #48	@ 0x30
 8000df4:	f006 fd78 	bl	80078e8 <VL53L1_RdByte>
	Temp = Temp & 0x10;
 8000df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	f88d 3007 	strb.w	r3, [sp, #7]
	*pInterruptPolarity = !(Temp>>4);
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	7023      	strb	r3, [r4, #0]
	return status;
}
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd10      	pop	{r4, pc}

08000e10 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000e10:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000e12:	2240      	movs	r2, #64	@ 0x40
 8000e14:	2187      	movs	r1, #135	@ 0x87
 8000e16:	f006 fd23 	bl	8007860 <VL53L1_WrByte>
	return status;
}
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000e1c:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2187      	movs	r1, #135	@ 0x87
 8000e22:	f006 fd1d 	bl	8007860 <VL53L1_WrByte>
	return status;
}
 8000e26:	bd08      	pop	{r3, pc}

08000e28 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	460e      	mov	r6, r1
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000e30:	f10d 0106 	add.w	r1, sp, #6
 8000e34:	f7ff ffd8 	bl	8000de8 <VL53L1X_GetInterruptPolarity>
 8000e38:	4604      	mov	r4, r0
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000e3a:	f10d 0207 	add.w	r2, sp, #7
 8000e3e:	2131      	movs	r1, #49	@ 0x31
 8000e40:	4628      	mov	r0, r5
 8000e42:	f006 fd51 	bl	80078e8 <VL53L1_RdByte>
 8000e46:	4320      	orrs	r0, r4
 8000e48:	b240      	sxtb	r0, r0
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000e4a:	b948      	cbnz	r0, 8000e60 <VL53L1X_CheckForDataReady+0x38>
		if ((Temp & 1) == IntPol)
 8000e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e50:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d003      	beq.n	8000e64 <VL53L1X_CheckForDataReady+0x3c>
			*isDataReady = 1;
		else
			*isDataReady = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	7033      	strb	r3, [r6, #0]
	}
	return status;
}
 8000e60:	b002      	add	sp, #8
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
			*isDataReady = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	7033      	strb	r3, [r6, #0]
 8000e68:	e7fa      	b.n	8000e60 <VL53L1X_CheckForDataReady+0x38>
	...

08000e6c <VL53L1X_SensorInit>:
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	4606      	mov	r6, r0
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e72:	242d      	movs	r4, #45	@ 0x2d
	VL53L1X_ERROR status = 0;
 8000e74:	2500      	movs	r5, #0
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e76:	e00b      	b.n	8000e90 <VL53L1X_SensorInit+0x24>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000e78:	f1a4 032d 	sub.w	r3, r4, #45	@ 0x2d
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <VL53L1X_SensorInit+0x88>)
 8000e7e:	5cd2      	ldrb	r2, [r2, r3]
 8000e80:	4621      	mov	r1, r4
 8000e82:	4630      	mov	r0, r6
 8000e84:	f006 fcec 	bl	8007860 <VL53L1_WrByte>
 8000e88:	4305      	orrs	r5, r0
 8000e8a:	b26d      	sxtb	r5, r5
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e8c:	3401      	adds	r4, #1
 8000e8e:	b2e4      	uxtb	r4, r4
 8000e90:	2c87      	cmp	r4, #135	@ 0x87
 8000e92:	d9f1      	bls.n	8000e78 <VL53L1X_SensorInit+0xc>
	status |= VL53L1X_StartRanging(dev);
 8000e94:	4630      	mov	r0, r6
 8000e96:	f7ff ffbb 	bl	8000e10 <VL53L1X_StartRanging>
 8000e9a:	ea45 0400 	orr.w	r4, r5, r0
 8000e9e:	b264      	sxtb	r4, r4
	tmp  = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f88d 3007 	strb.w	r3, [sp, #7]
	while(tmp==0){
 8000ea6:	e006      	b.n	8000eb6 <VL53L1X_SensorInit+0x4a>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8000ea8:	f10d 0107 	add.w	r1, sp, #7
 8000eac:	4630      	mov	r0, r6
 8000eae:	f7ff ffbb 	bl	8000e28 <VL53L1X_CheckForDataReady>
 8000eb2:	4304      	orrs	r4, r0
 8000eb4:	b264      	sxtb	r4, r4
	while(tmp==0){
 8000eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f4      	beq.n	8000ea8 <VL53L1X_SensorInit+0x3c>
	status |= VL53L1X_ClearInterrupt(dev);
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f7ff ff8c 	bl	8000ddc <VL53L1X_ClearInterrupt>
 8000ec4:	4304      	orrs	r4, r0
 8000ec6:	b264      	sxtb	r4, r4
	status |= VL53L1X_StopRanging(dev);
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f7ff ffa7 	bl	8000e1c <VL53L1X_StopRanging>
 8000ece:	4304      	orrs	r4, r0
 8000ed0:	b264      	sxtb	r4, r4
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000ed2:	2209      	movs	r2, #9
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	f006 fcc2 	bl	8007860 <VL53L1_WrByte>
 8000edc:	4304      	orrs	r4, r0
 8000ede:	b264      	sxtb	r4, r4
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	210b      	movs	r1, #11
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f006 fcbb 	bl	8007860 <VL53L1_WrByte>
 8000eea:	4320      	orrs	r0, r4
}
 8000eec:	b240      	sxtb	r0, r0
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
 8000ef2:	bf00      	nop
 8000ef4:	080086a4 	.word	0x080086a4

08000ef8 <VL53L1X_GetTimingBudgetInMs>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	460c      	mov	r4, r1
	uint16_t Temp;
	VL53L1X_ERROR status = 0;

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8000efe:	f10d 0206 	add.w	r2, sp, #6
 8000f02:	215e      	movs	r1, #94	@ 0x5e
 8000f04:	f006 fd0c 	bl	8007920 <VL53L1_RdWord>
	switch (Temp) {
 8000f08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f0c:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8000f10:	d03b      	beq.n	8000f8a <VL53L1X_GetTimingBudgetInMs+0x92>
 8000f12:	d81a      	bhi.n	8000f4a <VL53L1X_GetTimingBudgetInMs+0x52>
 8000f14:	2b51      	cmp	r3, #81	@ 0x51
 8000f16:	d00f      	beq.n	8000f38 <VL53L1X_GetTimingBudgetInMs+0x40>
 8000f18:	d906      	bls.n	8000f28 <VL53L1X_GetTimingBudgetInMs+0x30>
 8000f1a:	2bad      	cmp	r3, #173	@ 0xad
 8000f1c:	d035      	beq.n	8000f8a <VL53L1X_GetTimingBudgetInMs+0x92>
 8000f1e:	2bd6      	cmp	r3, #214	@ 0xd6
 8000f20:	d10d      	bne.n	8000f3e <VL53L1X_GetTimingBudgetInMs+0x46>
		case 0x001E :
			*pTimingBudget = 20;
			break;
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8000f22:	2321      	movs	r3, #33	@ 0x21
 8000f24:	8023      	strh	r3, [r4, #0]
			break;
 8000f26:	e003      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8000f28:	2b1d      	cmp	r3, #29
 8000f2a:	d103      	bne.n	8000f34 <VL53L1X_GetTimingBudgetInMs+0x3c>
			*pTimingBudget = 15;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	8023      	strh	r3, [r4, #0]
		default:
			status = 1;
			*pTimingBudget = 0;
	}
	return status;
}
 8000f30:	b002      	add	sp, #8
 8000f32:	bd10      	pop	{r4, pc}
	switch (Temp) {
 8000f34:	2b1e      	cmp	r3, #30
 8000f36:	d104      	bne.n	8000f42 <VL53L1X_GetTimingBudgetInMs+0x4a>
			*pTimingBudget = 20;
 8000f38:	2314      	movs	r3, #20
 8000f3a:	8023      	strh	r3, [r4, #0]
			break;
 8000f3c:	e7f8      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8000f3e:	2b60      	cmp	r3, #96	@ 0x60
 8000f40:	d0ef      	beq.n	8000f22 <VL53L1X_GetTimingBudgetInMs+0x2a>
			*pTimingBudget = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	8023      	strh	r3, [r4, #0]
			status = 1;
 8000f46:	2001      	movs	r0, #1
 8000f48:	e7f2      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8000f4a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01e      	beq.n	8000f90 <VL53L1X_GetTimingBudgetInMs+0x98>
 8000f52:	d90b      	bls.n	8000f6c <VL53L1X_GetTimingBudgetInMs+0x74>
 8000f54:	f240 428f 	movw	r2, #1167	@ 0x48f
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d003      	beq.n	8000f64 <VL53L1X_GetTimingBudgetInMs+0x6c>
 8000f5c:	f240 5291 	movw	r2, #1425	@ 0x591
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d1ee      	bne.n	8000f42 <VL53L1X_GetTimingBudgetInMs+0x4a>
			*pTimingBudget = 500;
 8000f64:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f68:	8023      	strh	r3, [r4, #0]
			break;
 8000f6a:	e7e1      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8000f6c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00d      	beq.n	8000f90 <VL53L1X_GetTimingBudgetInMs+0x98>
 8000f74:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d102      	bne.n	8000f82 <VL53L1X_GetTimingBudgetInMs+0x8a>
			*pTimingBudget = 100;
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	8023      	strh	r3, [r4, #0]
			break;
 8000f80:	e7d6      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8000f82:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8000f86:	d0f9      	beq.n	8000f7c <VL53L1X_GetTimingBudgetInMs+0x84>
 8000f88:	e7db      	b.n	8000f42 <VL53L1X_GetTimingBudgetInMs+0x4a>
			*pTimingBudget = 50;
 8000f8a:	2332      	movs	r3, #50	@ 0x32
 8000f8c:	8023      	strh	r3, [r4, #0]
			break;
 8000f8e:	e7cf      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>
			*pTimingBudget = 200;
 8000f90:	23c8      	movs	r3, #200	@ 0xc8
 8000f92:	8023      	strh	r3, [r4, #0]
			break;
 8000f94:	e7cc      	b.n	8000f30 <VL53L1X_GetTimingBudgetInMs+0x38>

08000f96 <VL53L1X_GetDistanceMode>:
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8000f96:	b510      	push	{r4, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	460c      	mov	r4, r1
	uint8_t TempDM, status=0;

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8000f9c:	f10d 0207 	add.w	r2, sp, #7
 8000fa0:	214b      	movs	r1, #75	@ 0x4b
 8000fa2:	f006 fca1 	bl	80078e8 <VL53L1_RdByte>
	if (TempDM == 0x14)
 8000fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000faa:	2b14      	cmp	r3, #20
 8000fac:	d003      	beq.n	8000fb6 <VL53L1X_GetDistanceMode+0x20>
		*DM=1;
	if(TempDM == 0x0A)
 8000fae:	2b0a      	cmp	r3, #10
 8000fb0:	d004      	beq.n	8000fbc <VL53L1X_GetDistanceMode+0x26>
		*DM=2;
	return status;
}
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd10      	pop	{r4, pc}
		*DM=1;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	8022      	strh	r2, [r4, #0]
 8000fba:	e7f8      	b.n	8000fae <VL53L1X_GetDistanceMode+0x18>
		*DM=2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	8023      	strh	r3, [r4, #0]
 8000fc0:	e7f7      	b.n	8000fb2 <VL53L1X_GetDistanceMode+0x1c>

08000fc2 <VL53L1X_SetTimingBudgetInMs>:
{
 8000fc2:	b570      	push	{r4, r5, r6, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	460c      	mov	r4, r1
	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8000fca:	f10d 0106 	add.w	r1, sp, #6
 8000fce:	f7ff ffe2 	bl	8000f96 <VL53L1X_GetDistanceMode>
	if (DM == 0)
 8000fd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80c9 	beq.w	800116e <VL53L1X_SetTimingBudgetInMs+0x1ac>
 8000fdc:	4605      	mov	r5, r0
	else if (DM == 1) {	/* Short DistanceMode */
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d014      	beq.n	800100c <VL53L1X_SetTimingBudgetInMs+0x4a>
		switch (TimingBudgetInMs) {
 8000fe2:	2c64      	cmp	r4, #100	@ 0x64
 8000fe4:	f000 80a9 	beq.w	800113a <VL53L1X_SetTimingBudgetInMs+0x178>
 8000fe8:	f200 8088 	bhi.w	80010fc <VL53L1X_SetTimingBudgetInMs+0x13a>
 8000fec:	2c21      	cmp	r4, #33	@ 0x21
 8000fee:	f000 8099 	beq.w	8001124 <VL53L1X_SetTimingBudgetInMs+0x162>
 8000ff2:	2c32      	cmp	r4, #50	@ 0x32
 8000ff4:	d173      	bne.n	80010de <VL53L1X_SetTimingBudgetInMs+0x11c>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000ff6:	22ad      	movs	r2, #173	@ 0xad
 8000ff8:	215e      	movs	r1, #94	@ 0x5e
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f006 fc44 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001000:	22c6      	movs	r2, #198	@ 0xc6
 8001002:	2161      	movs	r1, #97	@ 0x61
 8001004:	4630      	mov	r0, r6
 8001006:	f006 fc3f 	bl	8007888 <VL53L1_WrWord>
			break;
 800100a:	e0b1      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 800100c:	2c32      	cmp	r4, #50	@ 0x32
 800100e:	d04c      	beq.n	80010aa <VL53L1X_SetTimingBudgetInMs+0xe8>
 8001010:	d81d      	bhi.n	800104e <VL53L1X_SetTimingBudgetInMs+0x8c>
 8001012:	2c14      	cmp	r4, #20
 8001014:	d03e      	beq.n	8001094 <VL53L1X_SetTimingBudgetInMs+0xd2>
 8001016:	2c21      	cmp	r4, #33	@ 0x21
 8001018:	d10a      	bne.n	8001030 <VL53L1X_SetTimingBudgetInMs+0x6e>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800101a:	22d6      	movs	r2, #214	@ 0xd6
 800101c:	215e      	movs	r1, #94	@ 0x5e
 800101e:	4630      	mov	r0, r6
 8001020:	f006 fc32 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001024:	226e      	movs	r2, #110	@ 0x6e
 8001026:	2161      	movs	r1, #97	@ 0x61
 8001028:	4630      	mov	r0, r6
 800102a:	f006 fc2d 	bl	8007888 <VL53L1_WrWord>
			break;
 800102e:	e09f      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001030:	2c0f      	cmp	r4, #15
 8001032:	d10a      	bne.n	800104a <VL53L1X_SetTimingBudgetInMs+0x88>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001034:	221d      	movs	r2, #29
 8001036:	215e      	movs	r1, #94	@ 0x5e
 8001038:	4630      	mov	r0, r6
 800103a:	f006 fc25 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800103e:	2227      	movs	r2, #39	@ 0x27
 8001040:	2161      	movs	r1, #97	@ 0x61
 8001042:	4630      	mov	r0, r6
 8001044:	f006 fc20 	bl	8007888 <VL53L1_WrWord>
			break;
 8001048:	e092      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 800104a:	2501      	movs	r5, #1
 800104c:	e090      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
 800104e:	2cc8      	cmp	r4, #200	@ 0xc8
 8001050:	d038      	beq.n	80010c4 <VL53L1X_SetTimingBudgetInMs+0x102>
 8001052:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8001056:	d10c      	bne.n	8001072 <VL53L1X_SetTimingBudgetInMs+0xb0>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001058:	f240 5291 	movw	r2, #1425	@ 0x591
 800105c:	215e      	movs	r1, #94	@ 0x5e
 800105e:	4630      	mov	r0, r6
 8001060:	f006 fc12 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001064:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8001068:	2161      	movs	r1, #97	@ 0x61
 800106a:	4630      	mov	r0, r6
 800106c:	f006 fc0c 	bl	8007888 <VL53L1_WrWord>
			break;
 8001070:	e07e      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001072:	2c64      	cmp	r4, #100	@ 0x64
 8001074:	d10c      	bne.n	8001090 <VL53L1X_SetTimingBudgetInMs+0xce>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001076:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800107a:	215e      	movs	r1, #94	@ 0x5e
 800107c:	4630      	mov	r0, r6
 800107e:	f006 fc03 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001082:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8001086:	2161      	movs	r1, #97	@ 0x61
 8001088:	4630      	mov	r0, r6
 800108a:	f006 fbfd 	bl	8007888 <VL53L1_WrWord>
			break;
 800108e:	e06f      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001090:	2501      	movs	r5, #1
 8001092:	e06d      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001094:	2251      	movs	r2, #81	@ 0x51
 8001096:	215e      	movs	r1, #94	@ 0x5e
 8001098:	4630      	mov	r0, r6
 800109a:	f006 fbf5 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800109e:	226e      	movs	r2, #110	@ 0x6e
 80010a0:	2161      	movs	r1, #97	@ 0x61
 80010a2:	4630      	mov	r0, r6
 80010a4:	f006 fbf0 	bl	8007888 <VL53L1_WrWord>
			break;
 80010a8:	e062      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010aa:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80010ae:	215e      	movs	r1, #94	@ 0x5e
 80010b0:	4630      	mov	r0, r6
 80010b2:	f006 fbe9 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010b6:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80010ba:	2161      	movs	r1, #97	@ 0x61
 80010bc:	4630      	mov	r0, r6
 80010be:	f006 fbe3 	bl	8007888 <VL53L1_WrWord>
			break;
 80010c2:	e055      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010c4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80010c8:	215e      	movs	r1, #94	@ 0x5e
 80010ca:	4630      	mov	r0, r6
 80010cc:	f006 fbdc 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010d0:	f240 4296 	movw	r2, #1174	@ 0x496
 80010d4:	2161      	movs	r1, #97	@ 0x61
 80010d6:	4630      	mov	r0, r6
 80010d8:	f006 fbd6 	bl	8007888 <VL53L1_WrWord>
			break;
 80010dc:	e048      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 80010de:	2c14      	cmp	r4, #20
 80010e0:	d10a      	bne.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x136>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010e2:	221e      	movs	r2, #30
 80010e4:	215e      	movs	r1, #94	@ 0x5e
 80010e6:	4630      	mov	r0, r6
 80010e8:	f006 fbce 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010ec:	2222      	movs	r2, #34	@ 0x22
 80010ee:	2161      	movs	r1, #97	@ 0x61
 80010f0:	4630      	mov	r0, r6
 80010f2:	f006 fbc9 	bl	8007888 <VL53L1_WrWord>
			break;
 80010f6:	e03b      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 80010f8:	2501      	movs	r5, #1
 80010fa:	e039      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
 80010fc:	2cc8      	cmp	r4, #200	@ 0xc8
 80010fe:	d029      	beq.n	8001154 <VL53L1X_SetTimingBudgetInMs+0x192>
 8001100:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8001104:	d10c      	bne.n	8001120 <VL53L1X_SetTimingBudgetInMs+0x15e>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001106:	f240 428f 	movw	r2, #1167	@ 0x48f
 800110a:	215e      	movs	r1, #94	@ 0x5e
 800110c:	4630      	mov	r0, r6
 800110e:	f006 fbbb 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001112:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 8001116:	2161      	movs	r1, #97	@ 0x61
 8001118:	4630      	mov	r0, r6
 800111a:	f006 fbb5 	bl	8007888 <VL53L1_WrWord>
			break;
 800111e:	e027      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001120:	2501      	movs	r5, #1
 8001122:	e025      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001124:	2260      	movs	r2, #96	@ 0x60
 8001126:	215e      	movs	r1, #94	@ 0x5e
 8001128:	4630      	mov	r0, r6
 800112a:	f006 fbad 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800112e:	226e      	movs	r2, #110	@ 0x6e
 8001130:	2161      	movs	r1, #97	@ 0x61
 8001132:	4630      	mov	r0, r6
 8001134:	f006 fba8 	bl	8007888 <VL53L1_WrWord>
			break;
 8001138:	e01a      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800113a:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800113e:	215e      	movs	r1, #94	@ 0x5e
 8001140:	4630      	mov	r0, r6
 8001142:	f006 fba1 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001146:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800114a:	2161      	movs	r1, #97	@ 0x61
 800114c:	4630      	mov	r0, r6
 800114e:	f006 fb9b 	bl	8007888 <VL53L1_WrWord>
			break;
 8001152:	e00d      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001154:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001158:	215e      	movs	r1, #94	@ 0x5e
 800115a:	4630      	mov	r0, r6
 800115c:	f006 fb94 	bl	8007888 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001160:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001164:	2161      	movs	r1, #97	@ 0x61
 8001166:	4630      	mov	r0, r6
 8001168:	f006 fb8e 	bl	8007888 <VL53L1_WrWord>
			break;
 800116c:	e000      	b.n	8001170 <VL53L1X_SetTimingBudgetInMs+0x1ae>
		return 1;
 800116e:	2501      	movs	r5, #1
}
 8001170:	4628      	mov	r0, r5
 8001172:	b002      	add	sp, #8
 8001174:	bd70      	pop	{r4, r5, r6, pc}

08001176 <VL53L1X_SetDistanceMode>:
{
 8001176:	b530      	push	{r4, r5, lr}
 8001178:	b083      	sub	sp, #12
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 800117e:	f10d 0106 	add.w	r1, sp, #6
 8001182:	f7ff feb9 	bl	8000ef8 <VL53L1X_GetTimingBudgetInMs>
	if (status != 0)
 8001186:	2800      	cmp	r0, #0
 8001188:	d151      	bne.n	800122e <VL53L1X_SetDistanceMode+0xb8>
	switch (DM) {
 800118a:	2d01      	cmp	r5, #1
 800118c:	d003      	beq.n	8001196 <VL53L1X_SetDistanceMode+0x20>
 800118e:	2d02      	cmp	r5, #2
 8001190:	d02b      	beq.n	80011ea <VL53L1X_SetDistanceMode+0x74>
 8001192:	2501      	movs	r5, #1
 8001194:	e04c      	b.n	8001230 <VL53L1X_SetDistanceMode+0xba>
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001196:	2214      	movs	r2, #20
 8001198:	214b      	movs	r1, #75	@ 0x4b
 800119a:	4620      	mov	r0, r4
 800119c:	f006 fb60 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 80011a0:	2207      	movs	r2, #7
 80011a2:	2160      	movs	r1, #96	@ 0x60
 80011a4:	4620      	mov	r0, r4
 80011a6:	f006 fb5b 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 80011aa:	2205      	movs	r2, #5
 80011ac:	2163      	movs	r1, #99	@ 0x63
 80011ae:	4620      	mov	r0, r4
 80011b0:	f006 fb56 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 80011b4:	2238      	movs	r2, #56	@ 0x38
 80011b6:	2169      	movs	r1, #105	@ 0x69
 80011b8:	4620      	mov	r0, r4
 80011ba:	f006 fb51 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 80011be:	f240 7205 	movw	r2, #1797	@ 0x705
 80011c2:	2178      	movs	r1, #120	@ 0x78
 80011c4:	4620      	mov	r0, r4
 80011c6:	f006 fb5f 	bl	8007888 <VL53L1_WrWord>
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 80011ca:	f240 6206 	movw	r2, #1542	@ 0x606
 80011ce:	217a      	movs	r1, #122	@ 0x7a
 80011d0:	4620      	mov	r0, r4
 80011d2:	f006 fb59 	bl	8007888 <VL53L1_WrWord>
 80011d6:	4605      	mov	r5, r0
	if (status == 0)
 80011d8:	bb55      	cbnz	r5, 8001230 <VL53L1X_SetDistanceMode+0xba>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80011da:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff feef 	bl	8000fc2 <VL53L1X_SetTimingBudgetInMs>
 80011e4:	4305      	orrs	r5, r0
 80011e6:	b26d      	sxtb	r5, r5
 80011e8:	e022      	b.n	8001230 <VL53L1X_SetDistanceMode+0xba>
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 80011ea:	220a      	movs	r2, #10
 80011ec:	214b      	movs	r1, #75	@ 0x4b
 80011ee:	4620      	mov	r0, r4
 80011f0:	f006 fb36 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 80011f4:	220f      	movs	r2, #15
 80011f6:	2160      	movs	r1, #96	@ 0x60
 80011f8:	4620      	mov	r0, r4
 80011fa:	f006 fb31 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 80011fe:	220d      	movs	r2, #13
 8001200:	2163      	movs	r1, #99	@ 0x63
 8001202:	4620      	mov	r0, r4
 8001204:	f006 fb2c 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001208:	22b8      	movs	r2, #184	@ 0xb8
 800120a:	2169      	movs	r1, #105	@ 0x69
 800120c:	4620      	mov	r0, r4
 800120e:	f006 fb27 	bl	8007860 <VL53L1_WrByte>
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001212:	f640 720d 	movw	r2, #3853	@ 0xf0d
 8001216:	2178      	movs	r1, #120	@ 0x78
 8001218:	4620      	mov	r0, r4
 800121a:	f006 fb35 	bl	8007888 <VL53L1_WrWord>
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 800121e:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8001222:	217a      	movs	r1, #122	@ 0x7a
 8001224:	4620      	mov	r0, r4
 8001226:	f006 fb2f 	bl	8007888 <VL53L1_WrWord>
 800122a:	4605      	mov	r5, r0
		break;
 800122c:	e7d4      	b.n	80011d8 <VL53L1X_SetDistanceMode+0x62>
		return 1;
 800122e:	2501      	movs	r5, #1
}
 8001230:	4628      	mov	r0, r5
 8001232:	b003      	add	sp, #12
 8001234:	bd30      	pop	{r4, r5, pc}
	...

08001238 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	4605      	mov	r5, r0
 800123e:	460e      	mov	r6, r1
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001240:	f10d 0206 	add.w	r2, sp, #6
 8001244:	21de      	movs	r1, #222	@ 0xde
 8001246:	f006 fb6b 	bl	8007920 <VL53L1_RdWord>
 800124a:	4604      	mov	r4, r0
	ClockPLL = ClockPLL&0x3FF;
 800124c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001254:	f8ad 3006 	strh.w	r3, [sp, #6]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001258:	fb06 f003 	mul.w	r0, r6, r3
 800125c:	f7ff f932 	bl	80004c4 <__aeabi_ui2d>
 8001260:	a307      	add	r3, pc, #28	@ (adr r3, 8001280 <VL53L1X_SetInterMeasurementInMs+0x48>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9a7 	bl	80005b8 <__aeabi_dmul>
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 800126a:	f7ff fbb7 	bl	80009dc <__aeabi_d2uiz>
 800126e:	4602      	mov	r2, r0
 8001270:	216c      	movs	r1, #108	@ 0x6c
 8001272:	4628      	mov	r0, r5
 8001274:	f006 fb1e 	bl	80078b4 <VL53L1_WrDWord>
	return status;

}
 8001278:	4620      	mov	r0, r4
 800127a:	b002      	add	sp, #8
 800127c:	bd70      	pop	{r4, r5, r6, pc}
 800127e:	bf00      	nop
 8001280:	33333333 	.word	0x33333333
 8001284:	3ff13333 	.word	0x3ff13333

08001288 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001288:	b510      	push	{r4, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint8_t tmp = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f88d 3007 	strb.w	r3, [sp, #7]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001294:	f10d 0207 	add.w	r2, sp, #7
 8001298:	21e5      	movs	r1, #229	@ 0xe5
 800129a:	f006 fb25 	bl	80078e8 <VL53L1_RdByte>
	*state = tmp;
 800129e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012a2:	7023      	strb	r3, [r4, #0]
	return status;
}
 80012a4:	b002      	add	sp, #8
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80012ae:	f10d 0206 	add.w	r2, sp, #6
 80012b2:	2196      	movs	r1, #150	@ 0x96
 80012b4:	f006 fb34 	bl	8007920 <VL53L1_RdWord>
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 80012b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012bc:	8023      	strh	r3, [r4, #0]
	return status;
}
 80012be:	b002      	add	sp, #8
 80012c0:	bd10      	pop	{r4, pc}

080012c2 <VL53L1X_GetSignalRate>:
	*ambPerSp=(uint16_t) (200.0 * AmbientRate / SpNb);
	return status;
}

VL53L1X_ERROR VL53L1X_GetSignalRate(uint16_t dev, uint16_t *signal)
{
 80012c2:	b510      	push	{r4, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 80012c8:	f10d 0206 	add.w	r2, sp, #6
 80012cc:	2198      	movs	r1, #152	@ 0x98
 80012ce:	f006 fb27 	bl	8007920 <VL53L1_RdWord>
		VL53L1_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0, &tmp);
	*signal = tmp*8;
 80012d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	8023      	strh	r3, [r4, #0]
	return status;
}
 80012da:	b002      	add	sp, #8
 80012dc:	bd10      	pop	{r4, pc}

080012de <VL53L1X_GetSpadNb>:

VL53L1X_ERROR VL53L1X_GetSpadNb(uint16_t dev, uint16_t *spNb)
{
 80012de:	b510      	push	{r4, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 80012e4:	f10d 0206 	add.w	r2, sp, #6
 80012e8:	218c      	movs	r1, #140	@ 0x8c
 80012ea:	f006 fb19 	bl	8007920 <VL53L1_RdWord>
			      VL53L1_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0, &tmp);
	*spNb = tmp >> 8;
 80012ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	8023      	strh	r3, [r4, #0]
	return status;
}
 80012f6:	b002      	add	sp, #8
 80012f8:	bd10      	pop	{r4, pc}

080012fa <VL53L1X_GetAmbientRate>:

VL53L1X_ERROR VL53L1X_GetAmbientRate(uint16_t dev, uint16_t *ambRate)
{
 80012fa:	b510      	push	{r4, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= VL53L1_RdWord(dev, RESULT__AMBIENT_COUNT_RATE_MCPS_SD, &tmp);
 8001300:	f10d 0206 	add.w	r2, sp, #6
 8001304:	2190      	movs	r1, #144	@ 0x90
 8001306:	f006 fb0b 	bl	8007920 <VL53L1_RdWord>
	*ambRate = tmp*8;
 800130a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	8023      	strh	r3, [r4, #0]
	return status;
}
 8001312:	b002      	add	sp, #8
 8001314:	bd10      	pop	{r4, pc}
	...

08001318 <VL53L1X_GetRangeStatus>:

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8001318:	b510      	push	{r4, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint8_t RgSt;

	*rangeStatus = 255;
 800131e:	23ff      	movs	r3, #255	@ 0xff
 8001320:	700b      	strb	r3, [r1, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001322:	f10d 0207 	add.w	r2, sp, #7
 8001326:	2189      	movs	r1, #137	@ 0x89
 8001328:	f006 fade 	bl	80078e8 <VL53L1_RdByte>
	RgSt = RgSt & 0x1F;
 800132c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	f88d 3007 	strb.w	r3, [sp, #7]
	if (RgSt < 24)
 8001338:	2b17      	cmp	r3, #23
 800133a:	d802      	bhi.n	8001342 <VL53L1X_GetRangeStatus+0x2a>
		*rangeStatus = status_rtn[RgSt];
 800133c:	4a02      	ldr	r2, [pc, #8]	@ (8001348 <VL53L1X_GetRangeStatus+0x30>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	7023      	strb	r3, [r4, #0]
	return status;
}
 8001342:	b002      	add	sp, #8
 8001344:	bd10      	pop	{r4, pc}
 8001346:	bf00      	nop
 8001348:	0800868c 	.word	0x0800868c

0800134c <VL53L1X_SetROI>:
	*ROICenter = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROI(uint16_t dev, uint16_t X, uint16_t Y)
{
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	b083      	sub	sp, #12
 8001350:	4607      	mov	r7, r0
 8001352:	460c      	mov	r4, r1
 8001354:	4616      	mov	r6, r2
	uint8_t OpticalCenter;
	VL53L1X_ERROR status = 0;

	status |=VL53L1_RdByte(dev, VL53L1_ROI_CONFIG__MODE_ROI_CENTRE_SPAD, &OpticalCenter);
 8001356:	f10d 0207 	add.w	r2, sp, #7
 800135a:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 800135e:	f006 fac3 	bl	80078e8 <VL53L1_RdByte>
 8001362:	4605      	mov	r5, r0
	if (X > 16)
 8001364:	2c10      	cmp	r4, #16
 8001366:	d900      	bls.n	800136a <VL53L1X_SetROI+0x1e>
		X = 16;
 8001368:	2410      	movs	r4, #16
	if (Y > 16)
 800136a:	2e10      	cmp	r6, #16
 800136c:	d900      	bls.n	8001370 <VL53L1X_SetROI+0x24>
		Y = 16;
 800136e:	2610      	movs	r6, #16
	if (X > 10 || Y > 10){
 8001370:	2c0a      	cmp	r4, #10
 8001372:	d801      	bhi.n	8001378 <VL53L1X_SetROI+0x2c>
 8001374:	2e0a      	cmp	r6, #10
 8001376:	d902      	bls.n	800137e <VL53L1X_SetROI+0x32>
		OpticalCenter = 199;
 8001378:	23c7      	movs	r3, #199	@ 0xc7
 800137a:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	status |= VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, OpticalCenter);
 800137e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001382:	217f      	movs	r1, #127	@ 0x7f
 8001384:	4638      	mov	r0, r7
 8001386:	f006 fa6b 	bl	8007860 <VL53L1_WrByte>
 800138a:	4305      	orrs	r5, r0
 800138c:	b26d      	sxtb	r5, r5
	status |= VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
		       (Y - 1) << 4 | (X - 1));
 800138e:	3e01      	subs	r6, #1
 8001390:	1e62      	subs	r2, r4, #1
 8001392:	b2d2      	uxtb	r2, r2
	status |= VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 8001394:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	2180      	movs	r1, #128	@ 0x80
 800139c:	4638      	mov	r0, r7
 800139e:	f006 fa5f 	bl	8007860 <VL53L1_WrByte>
 80013a2:	4328      	orrs	r0, r5
	return status;
}
 80013a4:	b240      	sxtb	r0, r0
 80013a6:	b003      	add	sp, #12
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080013ac <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	b088      	sub	sp, #32
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 80013b0:	2600      	movs	r6, #0
 80013b2:	9601      	str	r6, [sp, #4]
 80013b4:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <_I2cFailRecover+0x114>)
 80013b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b8:	f042 0202 	orr.w	r2, r2, #2
 80013bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80013c8:	4c3e      	ldr	r4, [pc, #248]	@ (80014c4 <_I2cFailRecover+0x118>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d0:	4620      	mov	r0, r4
 80013d2:	f003 ff02 	bl	80051da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013dc:	4620      	mov	r0, r4
 80013de:	f003 fefc 	bl	80051da <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 80013e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013e8:	2311      	movs	r3, #17
 80013ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	a903      	add	r1, sp, #12
 80013f2:	4620      	mov	r0, r4
 80013f4:	f003 fd7e 	bl	8004ef4 <HAL_GPIO_Init>
 80013f8:	e01f      	b.n	800143a <_I2cFailRecover+0x8e>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80013fa:	4d32      	ldr	r5, [pc, #200]	@ (80014c4 <_I2cFailRecover+0x118>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001402:	4628      	mov	r0, r5
 8001404:	f003 fee9 	bl	80051da <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f003 faf3 	bl	80049f4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001414:	4628      	mov	r0, r5
 8001416:	f003 fee0 	bl	80051da <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f003 faea 	bl	80049f4 <HAL_Delay>
        for( i=0; i<10; i++){
 8001420:	3401      	adds	r4, #1
 8001422:	2c09      	cmp	r4, #9
 8001424:	dde9      	ble.n	80013fa <_I2cFailRecover+0x4e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8001426:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800142a:	4826      	ldr	r0, [pc, #152]	@ (80014c4 <_I2cFailRecover+0x118>)
 800142c:	f003 fece 	bl	80051cc <HAL_GPIO_ReadPin>
 8001430:	b928      	cbnz	r0, 800143e <_I2cFailRecover+0x92>
 8001432:	1c73      	adds	r3, r6, #1
 8001434:	2e06      	cmp	r6, #6
 8001436:	dc02      	bgt.n	800143e <_I2cFailRecover+0x92>
 8001438:	461e      	mov	r6, r3
        for( i=0; i<10; i++){
 800143a:	2400      	movs	r4, #0
 800143c:	e7f1      	b.n	8001422 <_I2cFailRecover+0x76>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 800143e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001442:	4820      	ldr	r0, [pc, #128]	@ (80014c4 <_I2cFailRecover+0x118>)
 8001444:	f003 fec2 	bl	80051cc <HAL_GPIO_ReadPin>
 8001448:	b108      	cbz	r0, 800144e <_I2cFailRecover+0xa2>
            HAL_Delay(33);
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
            HAL_Delay(33*20);
        }while(1);
    }
}
 800144a:	b008      	add	sp, #32
 800144c:	bd70      	pop	{r4, r5, r6, pc}
        __GPIOA_CLK_ENABLE();
 800144e:	2100      	movs	r1, #0
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <_I2cFailRecover+0x114>)
 8001454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8001466:	2320      	movs	r3, #32
 8001468:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	9105      	str	r1, [sp, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	a903      	add	r1, sp, #12
 8001472:	4815      	ldr	r0, [pc, #84]	@ (80014c8 <_I2cFailRecover+0x11c>)
 8001474:	f003 fd3e 	bl	8004ef4 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001478:	4c13      	ldr	r4, [pc, #76]	@ (80014c8 <_I2cFailRecover+0x11c>)
 800147a:	2201      	movs	r2, #1
 800147c:	2120      	movs	r1, #32
 800147e:	4620      	mov	r0, r4
 8001480:	f003 feab 	bl	80051da <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001484:	2021      	movs	r0, #33	@ 0x21
 8001486:	f003 fab5 	bl	80049f4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2120      	movs	r1, #32
 800148e:	4620      	mov	r0, r4
 8001490:	f003 fea3 	bl	80051da <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001494:	2021      	movs	r0, #33	@ 0x21
 8001496:	f003 faad 	bl	80049f4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2120      	movs	r1, #32
 800149e:	4620      	mov	r0, r4
 80014a0:	f003 fe9b 	bl	80051da <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80014a4:	2021      	movs	r0, #33	@ 0x21
 80014a6:	f003 faa5 	bl	80049f4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2120      	movs	r1, #32
 80014ae:	4620      	mov	r0, r4
 80014b0:	f003 fe93 	bl	80051da <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 80014b4:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80014b8:	f003 fa9c 	bl	80049f4 <HAL_Delay>
        do{
 80014bc:	e7dc      	b.n	8001478 <_I2cFailRecover+0xcc>
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020000 	.word	0x40020000

080014cc <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	4616      	mov	r6, r2
 80014d2:	461d      	mov	r5, r3

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 80014d4:	f88d 100f 	strb.w	r1, [sp, #15]
    XNUCLEO53L1A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80014d8:	b284      	uxth	r4, r0
 80014da:	2164      	movs	r1, #100	@ 0x64
 80014dc:	9100      	str	r1, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	f10d 020f 	add.w	r2, sp, #15
 80014e4:	4621      	mov	r1, r4
 80014e6:	4808      	ldr	r0, [pc, #32]	@ (8001508 <_ExpanderRd+0x3c>)
 80014e8:	f004 fb04 	bl	8005af4 <HAL_I2C_Master_Transmit>
        if (status)
 80014ec:	b108      	cbz	r0, 80014f2 <_ExpanderRd+0x26>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
    } while (0);
    XNUCLEO53L1A1_PutI2cBus();
    return status;
}
 80014ee:	b004      	add	sp, #16
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80014f2:	2364      	movs	r3, #100	@ 0x64
 80014f4:	fb05 f303 	mul.w	r3, r5, r3
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	b2ab      	uxth	r3, r5
 80014fc:	4632      	mov	r2, r6
 80014fe:	4621      	mov	r1, r4
 8001500:	4801      	ldr	r0, [pc, #4]	@ (8001508 <_ExpanderRd+0x3c>)
 8001502:	f004 fbb3 	bl	8005c6c <HAL_I2C_Master_Receive>
    return status;
 8001506:	e7f2      	b.n	80014ee <_ExpanderRd+0x22>
 8001508:	20000194 	.word	0x20000194

0800150c <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 800150c:	b530      	push	{r4, r5, lr}
 800150e:	b087      	sub	sp, #28
 8001510:	4605      	mov	r5, r0
 8001512:	4608      	mov	r0, r1
 8001514:	4611      	mov	r1, r2
 8001516:	461c      	mov	r4, r3

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8001518:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(RegAddr + 1, data, n_data);
 800151c:	461a      	mov	r2, r3
 800151e:	f10d 0009 	add.w	r0, sp, #9
 8001522:	f006 fa9d 	bl	8007a60 <memcpy>
    XNUCLEO53L1A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001526:	1c63      	adds	r3, r4, #1
 8001528:	2264      	movs	r2, #100	@ 0x64
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	aa02      	add	r2, sp, #8
 8001530:	b2a9      	uxth	r1, r5
 8001532:	4802      	ldr	r0, [pc, #8]	@ (800153c <_ExpanderWR+0x30>)
 8001534:	f004 fade 	bl	8005af4 <HAL_I2C_Master_Transmit>
    XNUCLEO53L1A1_PutI2cBus();
    return status;
}
 8001538:	b007      	add	sp, #28
 800153a:	bd30      	pop	{r4, r5, pc}
 800153c:	20000194 	.word	0x20000194

08001540 <_ExpandersSetAllIO>:
static int _ExpandersSetAllIO(void){
 8001540:	b508      	push	{r3, lr}
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8001542:	2302      	movs	r3, #2
 8001544:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <_ExpandersSetAllIO+0x20>)
 8001546:	2112      	movs	r1, #18
 8001548:	2086      	movs	r0, #134	@ 0x86
 800154a:	f7ff ffdf 	bl	800150c <_ExpanderWR>
    if( status ){
 800154e:	b100      	cbz	r0, 8001552 <_ExpandersSetAllIO+0x12>
}
 8001550:	bd08      	pop	{r3, pc}
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8001552:	2302      	movs	r3, #2
 8001554:	4a03      	ldr	r2, [pc, #12]	@ (8001564 <_ExpandersSetAllIO+0x24>)
 8001556:	2112      	movs	r1, #18
 8001558:	2084      	movs	r0, #132	@ 0x84
 800155a:	f7ff ffd7 	bl	800150c <_ExpanderWR>
    return status;
 800155e:	e7f7      	b.n	8001550 <_ExpandersSetAllIO+0x10>
 8001560:	20000190 	.word	0x20000190
 8001564:	20000192 	.word	0x20000192

08001568 <XNUCLEO53L1A1_I2C1Configure>:
int XNUCLEO53L1A1_I2C1Configure() {
 8001568:	b510      	push	{r4, lr}
 800156a:	b088      	sub	sp, #32
    _I2cFailRecover();
 800156c:	f7ff ff1e 	bl	80013ac <_I2cFailRecover>
    __GPIOB_CLK_ENABLE();
 8001570:	2400      	movs	r4, #0
 8001572:	9401      	str	r4, [sp, #4]
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <XNUCLEO53L1A1_I2C1Configure+0x74>)
 8001576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001578:	f042 0202 	orr.w	r2, r2, #2
 800157c:	631a      	str	r2, [r3, #48]	@ 0x30
 800157e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001580:	f002 0202 	and.w	r2, r2, #2
 8001584:	9201      	str	r2, [sp, #4]
 8001586:	9a01      	ldr	r2, [sp, #4]
    __I2C1_CLK_ENABLE();
 8001588:	9402      	str	r4, [sp, #8]
 800158a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800158c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001590:	641a      	str	r2, [r3, #64]	@ 0x40
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800159c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a2:	2312      	movs	r3, #18
 80015a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80015a8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015aa:	2304      	movs	r3, #4
 80015ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	a903      	add	r1, sp, #12
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <XNUCLEO53L1A1_I2C1Configure+0x78>)
 80015b2:	f003 fc9f 	bl	8004ef4 <HAL_GPIO_Init>
    XNUCLEO53L1A1_hi2c.Instance = I2C1;
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <XNUCLEO53L1A1_I2C1Configure+0x7c>)
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <XNUCLEO53L1A1_I2C1Configure+0x80>)
 80015ba:	6003      	str	r3, [r0, #0]
    XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <XNUCLEO53L1A1_I2C1Configure+0x84>)
 80015be:	6043      	str	r3, [r0, #4]
    XNUCLEO53L1A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c0:	6084      	str	r4, [r0, #8]
    XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 80015c2:	60c4      	str	r4, [r0, #12]
    XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015c8:	6103      	str	r3, [r0, #16]
    XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80015ca:	6144      	str	r4, [r0, #20]
    XNUCLEO53L1A1_hi2c.Init.OwnAddress2 = 0;
 80015cc:	6184      	str	r4, [r0, #24]
    XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80015ce:	61c4      	str	r4, [r0, #28]
    XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80015d0:	6204      	str	r4, [r0, #32]
    status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 80015d2:	f004 f997 	bl	8005904 <HAL_I2C_Init>
}
 80015d6:	b008      	add	sp, #32
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	20000194 	.word	0x20000194
 80015e8:	40005400 	.word	0x40005400
 80015ec:	00061a80 	.word	0x00061a80

080015f0 <XNUCLEO53L1A1_Init>:
int XNUCLEO53L1A1_Init(void) {
 80015f0:	b500      	push	{lr}
 80015f2:	b083      	sub	sp, #12
    XNUCLEO53L1A1_I2C1Configure();
 80015f4:	f7ff ffb8 	bl	8001568 <XNUCLEO53L1A1_I2C1Configure>
    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 80015f8:	2302      	movs	r3, #2
 80015fa:	aa01      	add	r2, sp, #4
 80015fc:	2100      	movs	r1, #0
 80015fe:	2086      	movs	r0, #134	@ 0x86
 8001600:	f7ff ff64 	bl	80014cc <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8001604:	b930      	cbnz	r0, 8001614 <XNUCLEO53L1A1_Init+0x24>
 8001606:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800160a:	b91b      	cbnz	r3, 8001614 <XNUCLEO53L1A1_Init+0x24>
 800160c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001610:	2b16      	cmp	r3, #22
 8001612:	d002      	beq.n	800161a <XNUCLEO53L1A1_Init+0x2a>
}
 8001614:	b003      	add	sp, #12
 8001616:	f85d fb04 	ldr.w	pc, [sp], #4
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 800161a:	2302      	movs	r3, #2
 800161c:	aa01      	add	r2, sp, #4
 800161e:	2100      	movs	r1, #0
 8001620:	2084      	movs	r0, #132	@ 0x84
 8001622:	f7ff ff53 	bl	80014cc <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8001626:	2800      	cmp	r0, #0
 8001628:	d1f4      	bne.n	8001614 <XNUCLEO53L1A1_Init+0x24>
 800162a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <XNUCLEO53L1A1_Init+0x24>
 8001632:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001636:	2b16      	cmp	r3, #22
 8001638:	d1ec      	bne.n	8001614 <XNUCLEO53L1A1_Init+0x24>
    CurIOVal.u32=0x0;
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <XNUCLEO53L1A1_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
    ExpanderData[0] = 0xFF;
 8001640:	23ff      	movs	r3, #255	@ 0xff
 8001642:	f88d 3004 	strb.w	r3, [sp, #4]
    ExpanderData[1] = 0xFF;
 8001646:	f88d 3005 	strb.w	r3, [sp, #5]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 800164a:	2302      	movs	r3, #2
 800164c:	aa01      	add	r2, sp, #4
 800164e:	2114      	movs	r1, #20
 8001650:	2086      	movs	r0, #134	@ 0x86
 8001652:	f7ff ff5b 	bl	800150c <_ExpanderWR>
    if (status) {
 8001656:	2800      	cmp	r0, #0
 8001658:	d1dc      	bne.n	8001614 <XNUCLEO53L1A1_Init+0x24>
    ExpanderData[0] = 0xFF;
 800165a:	23ff      	movs	r3, #255	@ 0xff
 800165c:	f88d 3004 	strb.w	r3, [sp, #4]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8001660:	23bf      	movs	r3, #191	@ 0xbf
 8001662:	f88d 3005 	strb.w	r3, [sp, #5]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8001666:	2302      	movs	r3, #2
 8001668:	aa01      	add	r2, sp, #4
 800166a:	2114      	movs	r1, #20
 800166c:	2084      	movs	r0, #132	@ 0x84
 800166e:	f7ff ff4d 	bl	800150c <_ExpanderWR>
    if (status) {
 8001672:	2800      	cmp	r0, #0
 8001674:	d1ce      	bne.n	8001614 <XNUCLEO53L1A1_Init+0x24>
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8001676:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <XNUCLEO53L1A1_Init+0x94>)
 8001678:	f06f 22c0 	mvn.w	r2, #3221274624	@ 0xc000c000
 800167c:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 800167e:	f7ff ff5f 	bl	8001540 <_ExpandersSetAllIO>
    return status;
 8001682:	e7c7      	b.n	8001614 <XNUCLEO53L1A1_Init+0x24>
 8001684:	20000190 	.word	0x20000190

08001688 <XNUCLEO53L1A1_ResetId>:
int XNUCLEO53L1A1_ResetId(int DevNo, int state) {
 8001688:	b508      	push	{r3, lr}
    switch( DevNo ){
 800168a:	2863      	cmp	r0, #99	@ 0x63
 800168c:	d01f      	beq.n	80016ce <XNUCLEO53L1A1_ResetId+0x46>
 800168e:	dc07      	bgt.n	80016a0 <XNUCLEO53L1A1_ResetId+0x18>
 8001690:	2801      	cmp	r0, #1
 8001692:	d01c      	beq.n	80016ce <XNUCLEO53L1A1_ResetId+0x46>
 8001694:	2802      	cmp	r0, #2
 8001696:	d007      	beq.n	80016a8 <XNUCLEO53L1A1_ResetId+0x20>
 8001698:	b348      	cbz	r0, 80016ee <XNUCLEO53L1A1_ResetId+0x66>
 800169a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800169e:	bd08      	pop	{r3, pc}
    switch( DevNo ){
 80016a0:	286c      	cmp	r0, #108	@ 0x6c
 80016a2:	d024      	beq.n	80016ee <XNUCLEO53L1A1_ResetId+0x66>
 80016a4:	2872      	cmp	r0, #114	@ 0x72
 80016a6:	d10f      	bne.n	80016c8 <XNUCLEO53L1A1_ResetId+0x40>
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <XNUCLEO53L1A1_ResetId+0x88>)
 80016aa:	7853      	ldrb	r3, [r2, #1]
 80016ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016b0:	7053      	strb	r3, [r2, #1]
        if( state )
 80016b2:	b111      	cbz	r1, 80016ba <XNUCLEO53L1A1_ResetId+0x32>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 80016b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b8:	7053      	strb	r3, [r2, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 80016ba:	2301      	movs	r3, #1
 80016bc:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <XNUCLEO53L1A1_ResetId+0x8c>)
 80016be:	2113      	movs	r1, #19
 80016c0:	2086      	movs	r0, #134	@ 0x86
 80016c2:	f7ff ff23 	bl	800150c <_ExpanderWR>
    return status;
 80016c6:	e7ea      	b.n	800169e <XNUCLEO53L1A1_ResetId+0x16>
    switch( DevNo ){
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	e7e7      	b.n	800169e <XNUCLEO53L1A1_ResetId+0x16>
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <XNUCLEO53L1A1_ResetId+0x88>)
 80016d0:	78d3      	ldrb	r3, [r2, #3]
 80016d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016d6:	70d3      	strb	r3, [r2, #3]
        if( state )
 80016d8:	b111      	cbz	r1, 80016e0 <XNUCLEO53L1A1_ResetId+0x58>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80016da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016de:	70d3      	strb	r3, [r2, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 80016e0:	2301      	movs	r3, #1
 80016e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <XNUCLEO53L1A1_ResetId+0x90>)
 80016e4:	2113      	movs	r1, #19
 80016e6:	2084      	movs	r0, #132	@ 0x84
 80016e8:	f7ff ff10 	bl	800150c <_ExpanderWR>
        break;
 80016ec:	e7d7      	b.n	800169e <XNUCLEO53L1A1_ResetId+0x16>
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 80016ee:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <XNUCLEO53L1A1_ResetId+0x88>)
 80016f0:	7853      	ldrb	r3, [r2, #1]
 80016f2:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80016f6:	7053      	strb	r3, [r2, #1]
        if( state )
 80016f8:	b111      	cbz	r1, 8001700 <XNUCLEO53L1A1_ResetId+0x78>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 80016fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fe:	7053      	strb	r3, [r2, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001700:	2301      	movs	r3, #1
 8001702:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <XNUCLEO53L1A1_ResetId+0x8c>)
 8001704:	2113      	movs	r1, #19
 8001706:	2086      	movs	r0, #134	@ 0x86
 8001708:	f7ff ff00 	bl	800150c <_ExpanderWR>
        break;
 800170c:	e7c7      	b.n	800169e <XNUCLEO53L1A1_ResetId+0x16>
 800170e:	bf00      	nop
 8001710:	20000190 	.word	0x20000190
 8001714:	20000191 	.word	0x20000191
 8001718:	20000193 	.word	0x20000193

0800171c <IIS2DLPC_GetCapabilities>:
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 8001720:	2000      	movs	r0, #0
 8001722:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8001724:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8001726:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8001728:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 800172a:	2310      	movs	r3, #16
 800172c:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800172e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001730:	2300      	movs	r3, #0
 8001732:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001734:	4a01      	ldr	r2, [pc, #4]	@ (800173c <IIS2DLPC_GetCapabilities+0x20>)
 8001736:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001738:	618b      	str	r3, [r1, #24]
  return IIS2DLPC_OK;
}
 800173a:	4770      	bx	lr
 800173c:	44c80000 	.word	0x44c80000

08001740 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                            IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001740:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8001744:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001748:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80017e4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa4>
 800174c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d933      	bls.n	80017be <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7e>
                  : (Odr <=   25.0f) ?   25.0f
 8001756:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 800175a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d930      	bls.n	80017c6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x86>
                  : (Odr <=   50.0f) ?   50.0f
 8001764:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8001768:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d92b      	bls.n	80017ca <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x8a>
                  : (Odr <=  100.0f) ?  100.0f
 8001772:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 80017e8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001776:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d926      	bls.n	80017ce <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x8e>
                  : (Odr <=  200.0f) ?  200.0f
 8001780:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80017ec <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xac>
 8001784:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	d921      	bls.n	80017d2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
                  : (Odr <=  400.0f) ?  400.0f
 800178e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80017f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8001792:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	d91c      	bls.n	80017d6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x96>
                  : (Odr <=  800.0f) ?  800.0f
 800179c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80017f4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xb4>
 80017a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d917      	bls.n	80017da <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x9a>
                  :                    1600.0f;
 80017aa:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80017f8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xb8>
 80017ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d812      	bhi.n	80017de <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x9e>
 80017b8:	ee17 3a90 	vmov	r3, s15
 80017bc:	e000      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   12.5f) ?   12.5f
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80017c0:	6343      	str	r3, [r0, #52]	@ 0x34

  return IIS2DLPC_OK;
}
 80017c2:	2000      	movs	r0, #0
 80017c4:	4770      	bx	lr
                  : (Odr <=   25.0f) ?   25.0f
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80017c8:	e7fa      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   50.0f) ?   50.0f
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80017cc:	e7f8      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  100.0f) ?  100.0f
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80017d0:	e7f6      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  200.0f) ?  200.0f
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80017d4:	e7f4      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  400.0f) ?  400.0f
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80017d8:	e7f2      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  800.0f) ?  800.0f
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80017dc:	e7f0      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  :                    1600.0f;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80017e0:	e7ee      	b.n	80017c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
 80017e2:	bf00      	nop
 80017e4:	3fcccccd 	.word	0x3fcccccd
 80017e8:	42480000 	.word	0x42480000
 80017ec:	42c80000 	.word	0x42c80000
 80017f0:	43480000 	.word	0x43480000
 80017f4:	43c80000 	.word	0x43c80000
 80017f8:	44480000 	.word	0x44480000
 80017fc:	3fcccccd 	.word	0x3fcccccd
 8001800:	41480000 	.word	0x41480000
 8001804:	41c80000 	.word	0x41c80000
 8001808:	42480000 	.word	0x42480000
 800180c:	42c80000 	.word	0x42c80000
 8001810:	43480000 	.word	0x43480000
 8001814:	43c80000 	.word	0x43c80000
 8001818:	44c80000 	.word	0x44c80000

0800181c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800181c:	b510      	push	{r4, lr}
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800181e:	6944      	ldr	r4, [r0, #20]
 8001820:	7b00      	ldrb	r0, [r0, #12]
 8001822:	47a0      	blx	r4
}
 8001824:	bd10      	pop	{r4, pc}

08001826 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001826:	b510      	push	{r4, lr}
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001828:	6904      	ldr	r4, [r0, #16]
 800182a:	7b00      	ldrb	r0, [r0, #12]
 800182c:	47a0      	blx	r4
}
 800182e:	bd10      	pop	{r4, pc}

08001830 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
{
 8001830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001834:	ed2d 8b02 	vpush	{d8}
 8001838:	4604      	mov	r4, r0
 800183a:	eeb0 8a40 	vmov.f32	s16, s0
 800183e:	460d      	mov	r5, r1
 8001840:	4616      	mov	r6, r2
  switch (Mode)
 8001842:	1e4b      	subs	r3, r1, #1
 8001844:	2b03      	cmp	r3, #3
 8001846:	d803      	bhi.n	8001850 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x20>
 8001848:	e8df f003 	tbb	[pc, r3]
 800184c:	7c6b5b13 	.word	0x7c6b5b13
      switch (Noise)
 8001850:	2e01      	cmp	r6, #1
 8001852:	d00b      	beq.n	800186c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x3c>
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 8001854:	f04f 0804 	mov.w	r8, #4
      if (Odr < 12.5f)
 8001858:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 800185c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	d510      	bpl.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 12.5f;
 8001866:	eeb2 8a09 	vmov.f32	s16, #41	@ 0x41480000  12.5
 800186a:	e00d      	b.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 800186c:	f04f 0814 	mov.w	r8, #20
 8001870:	e7f2      	b.n	8001858 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x28>
      switch (Noise)
 8001872:	2e01      	cmp	r6, #1
 8001874:	d042      	beq.n	80018fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xcc>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 8001876:	f04f 0803 	mov.w	r8, #3
      if (Odr > 200.0f)
 800187a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800187e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	dc6e      	bgt.n	8001966 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x136>
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 8001888:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80019c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 800188c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d96a      	bls.n	800196c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001896:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 800189a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	d979      	bls.n	8001998 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 80018a4:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80018a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d974      	bls.n	800199c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x16c>
 80018b2:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80019c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x198>
 80018b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d96f      	bls.n	80019a0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x170>
 80018c0:	eddf 7a42 	vldr	s15, [pc, #264]	@ 80019cc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x19c>
 80018c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	d96a      	bls.n	80019a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x174>
 80018ce:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 80018d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d965      	bls.n	80019a8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x178>
 80018dc:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80019d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 80018e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d960      	bls.n	80019ac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17c>
 80018ea:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80019d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1a4>
 80018ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d85b      	bhi.n	80019b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x180>
 80018f8:	2108      	movs	r1, #8
 80018fa:	e038      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 80018fc:	f04f 0813 	mov.w	r8, #19
 8001900:	e7bb      	b.n	800187a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x4a>
      switch (Noise)
 8001902:	2e01      	cmp	r6, #1
 8001904:	d00a      	beq.n	800191c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xec>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 8001906:	4688      	mov	r8, r1
      if (Odr > 200.0f)
 8001908:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800190c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	ddb8      	ble.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8001916:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800191a:	e7b5      	b.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 800191c:	f04f 0812 	mov.w	r8, #18
 8001920:	e7f2      	b.n	8001908 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xd8>
      switch (Noise)
 8001922:	2e01      	cmp	r6, #1
 8001924:	d00b      	beq.n	800193e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8001926:	f04f 0801 	mov.w	r8, #1
      if (Odr > 200.0f)
 800192a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800192e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dda7      	ble.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8001938:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800193c:	e7a4      	b.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 800193e:	f04f 0811 	mov.w	r8, #17
 8001942:	e7f2      	b.n	800192a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xfa>
      switch (Noise)
 8001944:	2e01      	cmp	r6, #1
 8001946:	d00b      	beq.n	8001960 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x130>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 8001948:	f04f 0800 	mov.w	r8, #0
      if (Odr > 200.0f)
 800194c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 8001950:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	dd96      	ble.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 800195a:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800195e:	e793      	b.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001960:	f04f 0810 	mov.w	r8, #16
 8001964:	e7f2      	b.n	800194c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x11c>
        Odr = 200.0f;
 8001966:	ed9f 8a16 	vldr	s16, [pc, #88]	@ 80019c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800196a:	e78d      	b.n	8001888 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 800196c:	2101      	movs	r1, #1
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 800196e:	f104 0720 	add.w	r7, r4, #32
 8001972:	4638      	mov	r0, r7
 8001974:	f000 fbd5 	bl	8002122 <iis2dlpc_data_rate_set>
 8001978:	b9e0      	cbnz	r0, 80019b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x184>
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 800197a:	4641      	mov	r1, r8
 800197c:	4638      	mov	r0, r7
 800197e:	f000 fb29 	bl	8001fd4 <iis2dlpc_power_mode_set>
 8001982:	b9d0      	cbnz	r0, 80019ba <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x18a>
  pObj->acc_odr = Odr;
 8001984:	ed84 8a0d 	vstr	s16, [r4, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 8001988:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 800198c:	f884 6039 	strb.w	r6, [r4, #57]	@ 0x39
}
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 8001998:	2102      	movs	r1, #2
 800199a:	e7e8      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 800199c:	2103      	movs	r1, #3
 800199e:	e7e6      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80019a0:	2104      	movs	r1, #4
 80019a2:	e7e4      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80019a4:	2105      	movs	r1, #5
 80019a6:	e7e2      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80019a8:	2106      	movs	r1, #6
 80019aa:	e7e0      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80019ac:	2107      	movs	r1, #7
 80019ae:	e7de      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80019b0:	2109      	movs	r1, #9
 80019b2:	e7dc      	b.n	800196e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
    return IIS2DLPC_ERROR;
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	e7ea      	b.n	8001990 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x160>
    return IIS2DLPC_ERROR;
 80019ba:	f04f 30ff 	mov.w	r0, #4294967295
 80019be:	e7e7      	b.n	8001990 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x160>
 80019c0:	43480000 	.word	0x43480000
 80019c4:	3fcccccd 	.word	0x3fcccccd
 80019c8:	42480000 	.word	0x42480000
 80019cc:	42c80000 	.word	0x42c80000
 80019d0:	43c80000 	.word	0x43c80000
 80019d4:	44480000 	.word	0x44480000

080019d8 <IIS2DLPC_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80019d8:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d00e      	beq.n	80019fe <IIS2DLPC_ACC_Enable+0x26>
{
 80019e0:	b510      	push	{r4, lr}
 80019e2:	4604      	mov	r4, r0
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80019e4:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80019e8:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80019ec:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80019f0:	f7ff ff1e 	bl	8001830 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 80019f4:	b928      	cbnz	r0, 8001a02 <IIS2DLPC_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 80019fc:	bd10      	pop	{r4, pc}
    return IIS2DLPC_OK;
 80019fe:	2000      	movs	r0, #0
}
 8001a00:	4770      	bx	lr
    return IIS2DLPC_ERROR;
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	e7f9      	b.n	80019fc <IIS2DLPC_ACC_Enable+0x24>

08001a08 <IIS2DLPC_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8001a08:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001a0c:	b90b      	cbnz	r3, 8001a12 <IIS2DLPC_ACC_Disable+0xa>
    return IIS2DLPC_OK;
 8001a0e:	2000      	movs	r0, #0
}
 8001a10:	4770      	bx	lr
{
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001a16:	2100      	movs	r1, #0
 8001a18:	3020      	adds	r0, #32
 8001a1a:	f000 fb82 	bl	8002122 <iis2dlpc_data_rate_set>
 8001a1e:	b910      	cbnz	r0, 8001a26 <IIS2DLPC_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 8001a20:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
}
 8001a24:	bd10      	pop	{r4, pc}
    return IIS2DLPC_ERROR;
 8001a26:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2a:	e7fb      	b.n	8001a24 <IIS2DLPC_ACC_Disable+0x1c>

08001a2c <IIS2DLPC_DeInit>:
{
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 8001a30:	f7ff ffea 	bl	8001a08 <IIS2DLPC_ACC_Disable>
 8001a34:	b948      	cbnz	r0, 8001a4a <IIS2DLPC_DeInit+0x1e>
  pObj->acc_odr = 0.0f;
 8001a36:	2300      	movs	r3, #0
 8001a38:	6363      	str	r3, [r4, #52]	@ 0x34
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001a40:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  pObj->is_initialized = 0;
 8001a44:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8001a48:	bd10      	pop	{r4, pc}
    return IIS2DLPC_ERROR;
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4e:	e7fb      	b.n	8001a48 <IIS2DLPC_DeInit+0x1c>

08001a50 <IIS2DLPC_Init>:
{
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4604      	mov	r4, r0
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001a54:	f100 0520 	add.w	r5, r0, #32
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 fc6c 	bl	8002338 <iis2dlpc_auto_increment_set>
 8001a60:	bb10      	cbnz	r0, 8001aa8 <IIS2DLPC_Init+0x58>
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001a62:	2101      	movs	r1, #1
 8001a64:	4628      	mov	r0, r5
 8001a66:	f000 fbea 	bl	800223e <iis2dlpc_block_data_update_set>
 8001a6a:	bb00      	cbnz	r0, 8001aae <IIS2DLPC_Init+0x5e>
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 fc7b 	bl	800236a <iis2dlpc_fifo_mode_set>
 8001a74:	b9f0      	cbnz	r0, 8001ab4 <IIS2DLPC_Init+0x64>
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 8001a76:	2104      	movs	r1, #4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f000 faab 	bl	8001fd4 <iis2dlpc_power_mode_set>
 8001a7e:	b9e0      	cbnz	r0, 8001aba <IIS2DLPC_Init+0x6a>
  pObj->acc_odr = 100.0f;
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <IIS2DLPC_Init+0x7c>)
 8001a82:	6363      	str	r3, [r4, #52]	@ 0x34
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001a84:	2100      	movs	r1, #0
 8001a86:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001a8a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f000 fb47 	bl	8002122 <iis2dlpc_data_rate_set>
 8001a94:	b9a0      	cbnz	r0, 8001ac0 <IIS2DLPC_Init+0x70>
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 fbe9 	bl	8002270 <iis2dlpc_full_scale_set>
 8001a9e:	b990      	cbnz	r0, 8001ac6 <IIS2DLPC_Init+0x76>
  pObj->is_initialized = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2DLPC_ERROR;
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	e7fb      	b.n	8001aa6 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab2:	e7f8      	b.n	8001aa6 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	e7f5      	b.n	8001aa6 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295
 8001abe:	e7f2      	b.n	8001aa6 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	e7ef      	b.n	8001aa6 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aca:	e7ec      	b.n	8001aa6 <IIS2DLPC_Init+0x56>
 8001acc:	42c80000 	.word	0x42c80000

08001ad0 <IIS2DLPC_ACC_SetFullScale>:
{
 8001ad0:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? IIS2DLPC_4g
 8001ad2:	2902      	cmp	r1, #2
 8001ad4:	dd05      	ble.n	8001ae2 <IIS2DLPC_ACC_SetFullScale+0x12>
 8001ad6:	2904      	cmp	r1, #4
 8001ad8:	dd09      	ble.n	8001aee <IIS2DLPC_ACC_SetFullScale+0x1e>
 8001ada:	2908      	cmp	r1, #8
 8001adc:	dc09      	bgt.n	8001af2 <IIS2DLPC_ACC_SetFullScale+0x22>
 8001ade:	2102      	movs	r1, #2
 8001ae0:	e000      	b.n	8001ae4 <IIS2DLPC_ACC_SetFullScale+0x14>
 8001ae2:	2100      	movs	r1, #0
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 8001ae4:	3020      	adds	r0, #32
 8001ae6:	f000 fbc3 	bl	8002270 <iis2dlpc_full_scale_set>
 8001aea:	b920      	cbnz	r0, 8001af6 <IIS2DLPC_ACC_SetFullScale+0x26>
}
 8001aec:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? IIS2DLPC_4g
 8001aee:	2101      	movs	r1, #1
 8001af0:	e7f8      	b.n	8001ae4 <IIS2DLPC_ACC_SetFullScale+0x14>
 8001af2:	2103      	movs	r1, #3
 8001af4:	e7f6      	b.n	8001ae4 <IIS2DLPC_ACC_SetFullScale+0x14>
    return IIS2DLPC_ERROR;
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295
 8001afa:	e7f7      	b.n	8001aec <IIS2DLPC_ACC_SetFullScale+0x1c>

08001afc <IIS2DLPC_ReadID>:
{
 8001afc:	b508      	push	{r3, lr}
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 8001afe:	3020      	adds	r0, #32
 8001b00:	f000 fc13 	bl	800232a <iis2dlpc_device_id_get>
 8001b04:	b900      	cbnz	r0, 8001b08 <IIS2DLPC_ReadID+0xc>
}
 8001b06:	bd08      	pop	{r3, pc}
    return IIS2DLPC_ERROR;
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	e7fb      	b.n	8001b06 <IIS2DLPC_ReadID+0xa>

08001b0e <IIS2DLPC_ACC_GetFullScale>:
{
 8001b0e:	b510      	push	{r4, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	460c      	mov	r4, r1
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 8001b14:	f10d 0107 	add.w	r1, sp, #7
 8001b18:	3020      	adds	r0, #32
 8001b1a:	f000 fbc2 	bl	80022a2 <iis2dlpc_full_scale_get>
 8001b1e:	b9c0      	cbnz	r0, 8001b52 <IIS2DLPC_ACC_GetFullScale+0x44>
  switch (fs_low_level)
 8001b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d810      	bhi.n	8001b4a <IIS2DLPC_ACC_GetFullScale+0x3c>
 8001b28:	e8df f003 	tbb	[pc, r3]
 8001b2c:	0c090602 	.word	0x0c090602
      *FullScale =  2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	6023      	str	r3, [r4, #0]
}
 8001b34:	b002      	add	sp, #8
 8001b36:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	6023      	str	r3, [r4, #0]
      break;
 8001b3c:	e7fa      	b.n	8001b34 <IIS2DLPC_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8001b3e:	2308      	movs	r3, #8
 8001b40:	6023      	str	r3, [r4, #0]
      break;
 8001b42:	e7f7      	b.n	8001b34 <IIS2DLPC_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8001b44:	2310      	movs	r3, #16
 8001b46:	6023      	str	r3, [r4, #0]
      break;
 8001b48:	e7f4      	b.n	8001b34 <IIS2DLPC_ACC_GetFullScale+0x26>
      *FullScale = -1;
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	6020      	str	r0, [r4, #0]
      break;
 8001b50:	e7f0      	b.n	8001b34 <IIS2DLPC_ACC_GetFullScale+0x26>
    return IIS2DLPC_ERROR;
 8001b52:	f04f 30ff 	mov.w	r0, #4294967295
 8001b56:	e7ed      	b.n	8001b34 <IIS2DLPC_ACC_GetFullScale+0x26>

08001b58 <IIS2DLPC_ACC_GetSensitivity>:
{
 8001b58:	b530      	push	{r4, r5, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	460d      	mov	r5, r1
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 8001b5e:	f100 0420 	add.w	r4, r0, #32
 8001b62:	f10d 0107 	add.w	r1, sp, #7
 8001b66:	4620      	mov	r0, r4
 8001b68:	f000 fb9b 	bl	80022a2 <iis2dlpc_full_scale_get>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d14c      	bne.n	8001c0a <IIS2DLPC_ACC_GetSensitivity+0xb2>
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001b70:	f10d 0106 	add.w	r1, sp, #6
 8001b74:	4620      	mov	r0, r4
 8001b76:	f000 fa6a 	bl	800204e <iis2dlpc_power_mode_get>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d148      	bne.n	8001c10 <IIS2DLPC_ACC_GetSensitivity+0xb8>
  switch (mode)
 8001b7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001b82:	2a1b      	cmp	r2, #27
 8001b84:	d809      	bhi.n	8001b9a <IIS2DLPC_ACC_GetSensitivity+0x42>
 8001b86:	2301      	movs	r3, #1
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	f003 321e 	and.w	r2, r3, #505290270	@ 0x1e1e1e1e
 8001b8e:	f022 2210 	bic.w	r2, r2, #268439552	@ 0x10001000
 8001b92:	bb0a      	cbnz	r2, 8001bd8 <IIS2DLPC_ACC_GetSensitivity+0x80>
 8001b94:	f013 3f01 	tst.w	r3, #16843009	@ 0x1010101
 8001b98:	d105      	bne.n	8001ba6 <IIS2DLPC_ACC_GetSensitivity+0x4e>
      *Sensitivity = -1.0f;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <IIS2DLPC_ACC_GetSensitivity+0xc0>)
 8001b9c:	602b      	str	r3, [r5, #0]
      ret = IIS2DLPC_ERROR;
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ba2:	b003      	add	sp, #12
 8001ba4:	bd30      	pop	{r4, r5, pc}
      switch (full_scale)
 8001ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d80f      	bhi.n	8001bce <IIS2DLPC_ACC_GetSensitivity+0x76>
 8001bae:	e8df f003 	tbb	[pc, r3]
 8001bb2:	0502      	.short	0x0502
 8001bb4:	0b08      	.short	0x0b08
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <IIS2DLPC_ACC_GetSensitivity+0xc4>)
 8001bb8:	602b      	str	r3, [r5, #0]
          break;
 8001bba:	e7f2      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <IIS2DLPC_ACC_GetSensitivity+0xc8>)
 8001bbe:	602b      	str	r3, [r5, #0]
          break;
 8001bc0:	e7ef      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <IIS2DLPC_ACC_GetSensitivity+0xcc>)
 8001bc4:	602b      	str	r3, [r5, #0]
          break;
 8001bc6:	e7ec      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8001bca:	602b      	str	r3, [r5, #0]
          break;
 8001bcc:	e7e9      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = -1.0f;
 8001bce:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <IIS2DLPC_ACC_GetSensitivity+0xc0>)
 8001bd0:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8001bd2:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001bd6:	e7e4      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
      switch (full_scale)
 8001bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d80f      	bhi.n	8001c00 <IIS2DLPC_ACC_GetSensitivity+0xa8>
 8001be0:	e8df f003 	tbb	[pc, r3]
 8001be4:	0b080502 	.word	0x0b080502
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <IIS2DLPC_ACC_GetSensitivity+0xd4>)
 8001bea:	602b      	str	r3, [r5, #0]
          break;
 8001bec:	e7d9      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <IIS2DLPC_ACC_GetSensitivity+0xd8>)
 8001bf0:	602b      	str	r3, [r5, #0]
          break;
 8001bf2:	e7d6      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <IIS2DLPC_ACC_GetSensitivity+0xc4>)
 8001bf6:	602b      	str	r3, [r5, #0]
          break;
 8001bf8:	e7d3      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <IIS2DLPC_ACC_GetSensitivity+0xc8>)
 8001bfc:	602b      	str	r3, [r5, #0]
          break;
 8001bfe:	e7d0      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = -1.0f;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <IIS2DLPC_ACC_GetSensitivity+0xc0>)
 8001c02:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001c08:	e7cb      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
    return IIS2DLPC_ERROR;
 8001c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0e:	e7c8      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
    return IIS2DLPC_ERROR;
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	e7c5      	b.n	8001ba2 <IIS2DLPC_ACC_GetSensitivity+0x4a>
 8001c16:	bf00      	nop
 8001c18:	bf800000 	.word	0xbf800000
 8001c1c:	3f79db23 	.word	0x3f79db23
 8001c20:	3ff9db23 	.word	0x3ff9db23
 8001c24:	4079db23 	.word	0x4079db23
 8001c28:	40f9db23 	.word	0x40f9db23
 8001c2c:	3e79db23 	.word	0x3e79db23
 8001c30:	3ef9db23 	.word	0x3ef9db23

08001c34 <IIS2DLPC_ACC_GetOutputDataRate>:
{
 8001c34:	b530      	push	{r4, r5, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	460d      	mov	r5, r1
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 8001c3a:	f100 0420 	add.w	r4, r0, #32
 8001c3e:	f10d 0107 	add.w	r1, sp, #7
 8001c42:	4620      	mov	r0, r4
 8001c44:	f000 faa3 	bl	800218e <iis2dlpc_data_rate_get>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	f040 8095 	bne.w	8001d78 <IIS2DLPC_ACC_GetOutputDataRate+0x144>
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001c4e:	f10d 0106 	add.w	r1, sp, #6
 8001c52:	4620      	mov	r0, r4
 8001c54:	f000 f9fb 	bl	800204e <iis2dlpc_power_mode_get>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	f040 8090 	bne.w	8001d7e <IIS2DLPC_ACC_GetOutputDataRate+0x14a>
  switch (odr_low_level)
 8001c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c62:	2b22      	cmp	r3, #34	@ 0x22
 8001c64:	f200 8083 	bhi.w	8001d6e <IIS2DLPC_ACC_GetOutputDataRate+0x13a>
 8001c68:	e8df f003 	tbb	[pc, r3]
 8001c6c:	302d1612 	.word	0x302d1612
 8001c70:	3c393633 	.word	0x3c393633
 8001c74:	81816a53 	.word	0x81816a53
 8001c78:	81818181 	.word	0x81818181
 8001c7c:	81128181 	.word	0x81128181
 8001c80:	81818181 	.word	0x81818181
 8001c84:	81818181 	.word	0x81818181
 8001c88:	81818181 	.word	0x81818181
 8001c8c:	8181      	.short	0x8181
 8001c8e:	12          	.byte	0x12
 8001c8f:	00          	.byte	0x00
      *Odr = 0.0f;
 8001c90:	2300      	movs	r3, #0
 8001c92:	602b      	str	r3, [r5, #0]
}
 8001c94:	b003      	add	sp, #12
 8001c96:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 8001c98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001c9c:	2a1b      	cmp	r2, #27
 8001c9e:	d80a      	bhi.n	8001cb6 <IIS2DLPC_ACC_GetOutputDataRate+0x82>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 8001ca8:	d002      	beq.n	8001cb0 <IIS2DLPC_ACC_GetOutputDataRate+0x7c>
          *Odr = 1.6f;
 8001caa:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <IIS2DLPC_ACC_GetOutputDataRate+0x150>)
 8001cac:	602b      	str	r3, [r5, #0]
          break;
 8001cae:	e7f1      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8001cb0:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 8001cb4:	d104      	bne.n	8001cc0 <IIS2DLPC_ACC_GetOutputDataRate+0x8c>
          *Odr = -1.0f;
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 8001cb8:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001cbe:	e7e9      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 12.5f;
 8001cc0:	4b32      	ldr	r3, [pc, #200]	@ (8001d8c <IIS2DLPC_ACC_GetOutputDataRate+0x158>)
 8001cc2:	602b      	str	r3, [r5, #0]
          break;
 8001cc4:	e7e6      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 12.5f;
 8001cc6:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <IIS2DLPC_ACC_GetOutputDataRate+0x158>)
 8001cc8:	602b      	str	r3, [r5, #0]
      break;
 8001cca:	e7e3      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 25.0f;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <IIS2DLPC_ACC_GetOutputDataRate+0x15c>)
 8001cce:	602b      	str	r3, [r5, #0]
      break;
 8001cd0:	e7e0      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 50.0f;
 8001cd2:	4b30      	ldr	r3, [pc, #192]	@ (8001d94 <IIS2DLPC_ACC_GetOutputDataRate+0x160>)
 8001cd4:	602b      	str	r3, [r5, #0]
      break;
 8001cd6:	e7dd      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 100.0f;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <IIS2DLPC_ACC_GetOutputDataRate+0x164>)
 8001cda:	602b      	str	r3, [r5, #0]
      break;
 8001cdc:	e7da      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 200.0f;
 8001cde:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8001ce0:	602b      	str	r3, [r5, #0]
      break;
 8001ce2:	e7d7      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      switch (mode)
 8001ce4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001ce8:	2a1b      	cmp	r2, #27
 8001cea:	d80a      	bhi.n	8001d02 <IIS2DLPC_ACC_GetOutputDataRate+0xce>
 8001cec:	2301      	movs	r3, #1
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 8001cf4:	d002      	beq.n	8001cfc <IIS2DLPC_ACC_GetOutputDataRate+0xc8>
          *Odr = 200.0f;
 8001cf6:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8001cf8:	602b      	str	r3, [r5, #0]
          break;
 8001cfa:	e7cb      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8001cfc:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 8001d00:	d104      	bne.n	8001d0c <IIS2DLPC_ACC_GetOutputDataRate+0xd8>
          *Odr = -1.0f;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 8001d04:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001d0a:	e7c3      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 400.0f;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <IIS2DLPC_ACC_GetOutputDataRate+0x16c>)
 8001d0e:	602b      	str	r3, [r5, #0]
          break;
 8001d10:	e7c0      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      switch (mode)
 8001d12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001d16:	2a1b      	cmp	r2, #27
 8001d18:	d80a      	bhi.n	8001d30 <IIS2DLPC_ACC_GetOutputDataRate+0xfc>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 8001d22:	d002      	beq.n	8001d2a <IIS2DLPC_ACC_GetOutputDataRate+0xf6>
          *Odr = 200.0f;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8001d26:	602b      	str	r3, [r5, #0]
          break;
 8001d28:	e7b4      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8001d2a:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 8001d2e:	d104      	bne.n	8001d3a <IIS2DLPC_ACC_GetOutputDataRate+0x106>
          *Odr = -1.0f;
 8001d30:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 8001d32:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001d38:	e7ac      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 800.0f;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <IIS2DLPC_ACC_GetOutputDataRate+0x170>)
 8001d3c:	602b      	str	r3, [r5, #0]
          break;
 8001d3e:	e7a9      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      switch (mode)
 8001d40:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001d44:	2a1b      	cmp	r2, #27
 8001d46:	d80a      	bhi.n	8001d5e <IIS2DLPC_ACC_GetOutputDataRate+0x12a>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 8001d50:	d002      	beq.n	8001d58 <IIS2DLPC_ACC_GetOutputDataRate+0x124>
          *Odr = 200.0f;
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8001d54:	602b      	str	r3, [r5, #0]
          break;
 8001d56:	e79d      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8001d58:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 8001d5c:	d104      	bne.n	8001d68 <IIS2DLPC_ACC_GetOutputDataRate+0x134>
          *Odr = -1.0f;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 8001d60:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8001d66:	e795      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 1600.0f;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <IIS2DLPC_ACC_GetOutputDataRate+0x174>)
 8001d6a:	602b      	str	r3, [r5, #0]
          break;
 8001d6c:	e792      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = -1.0f;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 8001d70:	602b      	str	r3, [r5, #0]
      ret = IIS2DLPC_ERROR;
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8001d76:	e78d      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
    return IIS2DLPC_ERROR;
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	e78a      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
    return IIS2DLPC_ERROR;
 8001d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d82:	e787      	b.n	8001c94 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8001d84:	3fcccccd 	.word	0x3fcccccd
 8001d88:	bf800000 	.word	0xbf800000
 8001d8c:	41480000 	.word	0x41480000
 8001d90:	41c80000 	.word	0x41c80000
 8001d94:	42480000 	.word	0x42480000
 8001d98:	42c80000 	.word	0x42c80000
 8001d9c:	43480000 	.word	0x43480000
 8001da0:	43c80000 	.word	0x43c80000
 8001da4:	44480000 	.word	0x44480000
 8001da8:	44c80000 	.word	0x44c80000

08001dac <IIS2DLPC_ACC_GetAxesRaw>:
{
 8001dac:	b530      	push	{r4, r5, lr}
 8001dae:	b085      	sub	sp, #20
 8001db0:	460d      	mov	r5, r1
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001db2:	f100 0420 	add.w	r4, r0, #32
 8001db6:	f10d 0107 	add.w	r1, sp, #7
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f000 f947 	bl	800204e <iis2dlpc_power_mode_get>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d149      	bne.n	8001e58 <IIS2DLPC_ACC_GetAxesRaw+0xac>
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 8001dc4:	a902      	add	r1, sp, #8
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f000 fa8d 	bl	80022e6 <iis2dlpc_acceleration_raw_get>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d146      	bne.n	8001e5e <IIS2DLPC_ACC_GetAxesRaw+0xb2>
  switch (mode)
 8001dd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001dd4:	2a1b      	cmp	r2, #27
 8001dd6:	d845      	bhi.n	8001e64 <IIS2DLPC_ACC_GetAxesRaw+0xb8>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	4093      	lsls	r3, r2
 8001ddc:	f003 321e 	and.w	r2, r3, #505290270	@ 0x1e1e1e1e
 8001de0:	f022 2210 	bic.w	r2, r2, #268439552	@ 0x10001000
 8001de4:	b9fa      	cbnz	r2, 8001e26 <IIS2DLPC_ACC_GetAxesRaw+0x7a>
 8001de6:	f013 3f01 	tst.w	r3, #16843009	@ 0x1010101
 8001dea:	d102      	bne.n	8001df2 <IIS2DLPC_ACC_GetAxesRaw+0x46>
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	e011      	b.n	8001e16 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
      Value->x = (data_raw.i16bit[0] / 16);
 8001df2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0f      	blt.n	8001e1a <IIS2DLPC_ACC_GetAxesRaw+0x6e>
 8001dfa:	111b      	asrs	r3, r3, #4
 8001dfc:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001dfe:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <IIS2DLPC_ACC_GetAxesRaw+0x72>
 8001e06:	111b      	asrs	r3, r3, #4
 8001e08:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001e0a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db07      	blt.n	8001e22 <IIS2DLPC_ACC_GetAxesRaw+0x76>
 8001e12:	111b      	asrs	r3, r3, #4
 8001e14:	80ab      	strh	r3, [r5, #4]
}
 8001e16:	b005      	add	sp, #20
 8001e18:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 8001e1a:	330f      	adds	r3, #15
 8001e1c:	e7ed      	b.n	8001dfa <IIS2DLPC_ACC_GetAxesRaw+0x4e>
      Value->y = (data_raw.i16bit[1] / 16);
 8001e1e:	330f      	adds	r3, #15
 8001e20:	e7f1      	b.n	8001e06 <IIS2DLPC_ACC_GetAxesRaw+0x5a>
      Value->z = (data_raw.i16bit[2] / 16);
 8001e22:	330f      	adds	r3, #15
 8001e24:	e7f5      	b.n	8001e12 <IIS2DLPC_ACC_GetAxesRaw+0x66>
      Value->x = (data_raw.i16bit[0] / 4);
 8001e26:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0e      	blt.n	8001e4c <IIS2DLPC_ACC_GetAxesRaw+0xa0>
 8001e2e:	109b      	asrs	r3, r3, #2
 8001e30:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001e32:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0a      	blt.n	8001e50 <IIS2DLPC_ACC_GetAxesRaw+0xa4>
 8001e3a:	109b      	asrs	r3, r3, #2
 8001e3c:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001e3e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db06      	blt.n	8001e54 <IIS2DLPC_ACC_GetAxesRaw+0xa8>
 8001e46:	109b      	asrs	r3, r3, #2
 8001e48:	80ab      	strh	r3, [r5, #4]
      break;
 8001e4a:	e7e4      	b.n	8001e16 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
      Value->x = (data_raw.i16bit[0] / 4);
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	e7ee      	b.n	8001e2e <IIS2DLPC_ACC_GetAxesRaw+0x82>
      Value->y = (data_raw.i16bit[1] / 4);
 8001e50:	3303      	adds	r3, #3
 8001e52:	e7f2      	b.n	8001e3a <IIS2DLPC_ACC_GetAxesRaw+0x8e>
      Value->z = (data_raw.i16bit[2] / 4);
 8001e54:	3303      	adds	r3, #3
 8001e56:	e7f6      	b.n	8001e46 <IIS2DLPC_ACC_GetAxesRaw+0x9a>
    return IIS2DLPC_ERROR;
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	e7db      	b.n	8001e16 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
    return IIS2DLPC_ERROR;
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e62:	e7d8      	b.n	8001e16 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
  switch (mode)
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	e7d5      	b.n	8001e16 <IIS2DLPC_ACC_GetAxesRaw+0x6a>

08001e6a <IIS2DLPC_ACC_GetAxes>:
{
 8001e6a:	b530      	push	{r4, r5, lr}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	4605      	mov	r5, r0
 8001e70:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8001e72:	2300      	movs	r3, #0
 8001e74:	9301      	str	r3, [sp, #4]
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 8001e76:	a902      	add	r1, sp, #8
 8001e78:	f7ff ff98 	bl	8001dac <IIS2DLPC_ACC_GetAxesRaw>
 8001e7c:	bb60      	cbnz	r0, 8001ed8 <IIS2DLPC_ACC_GetAxes+0x6e>
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8001e7e:	a901      	add	r1, sp, #4
 8001e80:	4628      	mov	r0, r5
 8001e82:	f7ff fe69 	bl	8001b58 <IIS2DLPC_ACC_GetSensitivity>
 8001e86:	bb50      	cbnz	r0, 8001ede <IIS2DLPC_ACC_GetAxes+0x74>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001e88:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001e8c:	ee07 3a10 	vmov	s14, r3
 8001e90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e94:	eddd 7a01 	vldr	s15, [sp, #4]
 8001e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001ea0:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001ea4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001ea8:	ee07 3a10 	vmov	s14, r3
 8001eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001eb8:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001ebc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001ec0:	ee07 3a10 	vmov	s14, r3
 8001ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed0:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bd30      	pop	{r4, r5, pc}
    return IIS2DLPC_ERROR;
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	e7fa      	b.n	8001ed4 <IIS2DLPC_ACC_GetAxes+0x6a>
    return IIS2DLPC_ERROR;
 8001ede:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee2:	e7f7      	b.n	8001ed4 <IIS2DLPC_ACC_GetAxes+0x6a>

08001ee4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
{
 8001ee4:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8001ee6:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x10>
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001eee:	f7ff fc27 	bl	8001740 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
}
 8001ef2:	bd08      	pop	{r3, pc}
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001ef4:	f7ff fc9c 	bl	8001830 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001ef8:	e7fb      	b.n	8001ef2 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0xe>

08001efa <IIS2DLPC_ACC_SetOutputDataRate>:
{
 8001efa:	b508      	push	{r3, lr}
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 8001efc:	2200      	movs	r2, #0
 8001efe:	4611      	mov	r1, r2
 8001f00:	f7ff fff0 	bl	8001ee4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
}
 8001f04:	bd08      	pop	{r3, pc}

08001f06 <IIS2DLPC_Write_Reg>:
{
 8001f06:	b500      	push	{lr}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	f88d 2007 	strb.w	r2, [sp, #7]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f10d 0207 	add.w	r2, sp, #7
 8001f14:	3020      	adds	r0, #32
 8001f16:	f000 f848 	bl	8001faa <iis2dlpc_write_reg>
 8001f1a:	b910      	cbnz	r0, 8001f22 <IIS2DLPC_Write_Reg+0x1c>
}
 8001f1c:	b003      	add	sp, #12
 8001f1e:	f85d fb04 	ldr.w	pc, [sp], #4
    return IIS2DLPC_ERROR;
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295
 8001f26:	e7f9      	b.n	8001f1c <IIS2DLPC_Write_Reg+0x16>

08001f28 <IIS2DLPC_RegisterBusIO>:
  if (pObj == NULL)
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d02b      	beq.n	8001f84 <IIS2DLPC_RegisterBusIO+0x5c>
{
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8001f30:	680b      	ldr	r3, [r1, #0]
 8001f32:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f34:	684a      	ldr	r2, [r1, #4]
 8001f36:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f38:	688a      	ldr	r2, [r1, #8]
 8001f3a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8001f3c:	7b0a      	ldrb	r2, [r1, #12]
 8001f3e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f40:	690a      	ldr	r2, [r1, #16]
 8001f42:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f44:	694a      	ldr	r2, [r1, #20]
 8001f46:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f48:	698a      	ldr	r2, [r1, #24]
 8001f4a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <IIS2DLPC_RegisterBusIO+0x70>)
 8001f4e:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001f50:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <IIS2DLPC_RegisterBusIO+0x74>)
 8001f52:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001f54:	69ca      	ldr	r2, [r1, #28]
 8001f56:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001f58:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 8001f5a:	b1b3      	cbz	r3, 8001f8a <IIS2DLPC_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 8001f5c:	4798      	blx	r3
 8001f5e:	b9b8      	cbnz	r0, 8001f90 <IIS2DLPC_RegisterBusIO+0x68>
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d000      	beq.n	8001f68 <IIS2DLPC_RegisterBusIO+0x40>
}
 8001f66:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8001f68:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1fa      	bne.n	8001f66 <IIS2DLPC_RegisterBusIO+0x3e>
          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 8001f70:	2205      	movs	r2, #5
 8001f72:	2121      	movs	r1, #33	@ 0x21
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff ffc6 	bl	8001f06 <IIS2DLPC_Write_Reg>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d0f3      	beq.n	8001f66 <IIS2DLPC_RegisterBusIO+0x3e>
            ret = IIS2DLPC_ERROR;
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001f82:	e7f0      	b.n	8001f66 <IIS2DLPC_RegisterBusIO+0x3e>
    ret = IIS2DLPC_ERROR;
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f88:	4770      	bx	lr
      ret = IIS2DLPC_ERROR;
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8e:	e7ea      	b.n	8001f66 <IIS2DLPC_RegisterBusIO+0x3e>
      ret = IIS2DLPC_ERROR;
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	e7e7      	b.n	8001f66 <IIS2DLPC_RegisterBusIO+0x3e>
 8001f96:	bf00      	nop
 8001f98:	0800181d 	.word	0x0800181d
 8001f9c:	08001827 	.word	0x08001827

08001fa0 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001fa0:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fa2:	6844      	ldr	r4, [r0, #4]
 8001fa4:	68c0      	ldr	r0, [r0, #12]
 8001fa6:	47a0      	blx	r4

  return ret;
}
 8001fa8:	bd10      	pop	{r4, pc}

08001faa <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001faa:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001fac:	6804      	ldr	r4, [r0, #0]
 8001fae:	68c0      	ldr	r0, [r0, #12]
 8001fb0:	47a0      	blx	r4

  return ret;
}
 8001fb2:	bd10      	pop	{r4, pc}

08001fb4 <iis2dlpc_from_lsb_to_celsius>:
{
  return ((float_t)lsb) * 0.488f;
}

float_t iis2dlpc_from_lsb_to_celsius(int16_t lsb)
{
 8001fb4:	ee07 0a90 	vmov	s15, r0
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbc:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001fd0 <iis2dlpc_from_lsb_to_celsius+0x1c>
 8001fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001fc4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8001fc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	3b800000 	.word	0x3b800000

08001fd4 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8001fd4:	b530      	push	{r4, r5, lr}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	4605      	mov	r5, r0
 8001fda:	460c      	mov	r4, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	aa01      	add	r2, sp, #4
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	f7ff ffdd 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b118      	cbz	r0, 8001ff2 <iis2dlpc_power_mode_set+0x1e>
  if (ret == 0)
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  if (ret == 0)
 8001fea:	b303      	cbz	r3, 800202e <iis2dlpc_power_mode_set+0x5a>
  {
    ret = ret;
  }

  return ret;
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	b003      	add	sp, #12
 8001ff0:	bd30      	pop	{r4, r5, pc}
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001ff2:	f3c4 0381 	ubfx	r3, r4, #2, #2
 8001ff6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ffa:	f363 0283 	bfi	r2, r3, #2, #2
 8001ffe:	f88d 2004 	strb.w	r2, [sp, #4]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002002:	b2d3      	uxtb	r3, r2
 8002004:	f364 0301 	bfi	r3, r4, #0, #2
 8002008:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800200c:	2301      	movs	r3, #1
 800200e:	aa01      	add	r2, sp, #4
 8002010:	2120      	movs	r1, #32
 8002012:	4628      	mov	r0, r5
 8002014:	f7ff ffc9 	bl	8001faa <iis2dlpc_write_reg>
  if (ret == 0)
 8002018:	4603      	mov	r3, r0
 800201a:	2800      	cmp	r0, #0
 800201c:	d1e6      	bne.n	8001fec <iis2dlpc_power_mode_set+0x18>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 800201e:	2301      	movs	r3, #1
 8002020:	466a      	mov	r2, sp
 8002022:	2125      	movs	r1, #37	@ 0x25
 8002024:	4628      	mov	r0, r5
 8002026:	f7ff ffbb 	bl	8001fa0 <iis2dlpc_read_reg>
 800202a:	4603      	mov	r3, r0
 800202c:	e7dd      	b.n	8001fea <iis2dlpc_power_mode_set+0x16>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800202e:	f3c4 1100 	ubfx	r1, r4, #4, #1
 8002032:	f89d 3000 	ldrb.w	r3, [sp]
 8002036:	f361 0382 	bfi	r3, r1, #2, #1
 800203a:	f88d 3000 	strb.w	r3, [sp]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 800203e:	2301      	movs	r3, #1
 8002040:	466a      	mov	r2, sp
 8002042:	2125      	movs	r1, #37	@ 0x25
 8002044:	4628      	mov	r0, r5
 8002046:	f7ff ffb0 	bl	8001faa <iis2dlpc_write_reg>
 800204a:	4603      	mov	r3, r0
  return ret;
 800204c:	e7ce      	b.n	8001fec <iis2dlpc_power_mode_set+0x18>

0800204e <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 800204e:	b530      	push	{r4, r5, lr}
 8002050:	b083      	sub	sp, #12
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002056:	2301      	movs	r3, #1
 8002058:	aa01      	add	r2, sp, #4
 800205a:	2120      	movs	r1, #32
 800205c:	f7ff ffa0 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 8002060:	b108      	cbz	r0, 8002066 <iis2dlpc_power_mode_get+0x18>
        break;
    }
  }

  return ret;
}
 8002062:	b003      	add	sp, #12
 8002064:	bd30      	pop	{r4, r5, pc}
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002066:	2301      	movs	r3, #1
 8002068:	466a      	mov	r2, sp
 800206a:	2125      	movs	r1, #37	@ 0x25
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ff97 	bl	8001fa0 <iis2dlpc_read_reg>
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002072:	f89d 1000 	ldrb.w	r1, [sp]
 8002076:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800207a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800207e:	f002 030c 	and.w	r3, r2, #12
 8002082:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode))
 8002086:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800208a:	4413      	add	r3, r2
 800208c:	2b1b      	cmp	r3, #27
 800208e:	d845      	bhi.n	800211c <iis2dlpc_power_mode_get+0xce>
 8002090:	e8df f003 	tbb	[pc, r3]
 8002094:	1114171a 	.word	0x1114171a
 8002098:	4444440e 	.word	0x4444440e
 800209c:	1d202326 	.word	0x1d202326
 80020a0:	44444444 	.word	0x44444444
 80020a4:	2c2f3235 	.word	0x2c2f3235
 80020a8:	44444429 	.word	0x44444429
 80020ac:	383b3e41 	.word	0x383b3e41
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 80020b0:	2304      	movs	r3, #4
 80020b2:	702b      	strb	r3, [r5, #0]
        break;
 80020b4:	e7d5      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 80020b6:	2303      	movs	r3, #3
 80020b8:	702b      	strb	r3, [r5, #0]
        break;
 80020ba:	e7d2      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 80020bc:	2302      	movs	r3, #2
 80020be:	702b      	strb	r3, [r5, #0]
        break;
 80020c0:	e7cf      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 80020c2:	2301      	movs	r3, #1
 80020c4:	702b      	strb	r3, [r5, #0]
        break;
 80020c6:	e7cc      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 80020c8:	2300      	movs	r3, #0
 80020ca:	702b      	strb	r3, [r5, #0]
        break;
 80020cc:	e7c9      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 80020ce:	230b      	movs	r3, #11
 80020d0:	702b      	strb	r3, [r5, #0]
        break;
 80020d2:	e7c6      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 80020d4:	230a      	movs	r3, #10
 80020d6:	702b      	strb	r3, [r5, #0]
        break;
 80020d8:	e7c3      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 80020da:	2309      	movs	r3, #9
 80020dc:	702b      	strb	r3, [r5, #0]
        break;
 80020de:	e7c0      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 80020e0:	2308      	movs	r3, #8
 80020e2:	702b      	strb	r3, [r5, #0]
        break;
 80020e4:	e7bd      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 80020e6:	2314      	movs	r3, #20
 80020e8:	702b      	strb	r3, [r5, #0]
        break;
 80020ea:	e7ba      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 80020ec:	2313      	movs	r3, #19
 80020ee:	702b      	strb	r3, [r5, #0]
        break;
 80020f0:	e7b7      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 80020f2:	2312      	movs	r3, #18
 80020f4:	702b      	strb	r3, [r5, #0]
        break;
 80020f6:	e7b4      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 80020f8:	2311      	movs	r3, #17
 80020fa:	702b      	strb	r3, [r5, #0]
        break;
 80020fc:	e7b1      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 80020fe:	2310      	movs	r3, #16
 8002100:	702b      	strb	r3, [r5, #0]
        break;
 8002102:	e7ae      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002104:	231b      	movs	r3, #27
 8002106:	702b      	strb	r3, [r5, #0]
        break;
 8002108:	e7ab      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 800210a:	231a      	movs	r3, #26
 800210c:	702b      	strb	r3, [r5, #0]
        break;
 800210e:	e7a8      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002110:	2319      	movs	r3, #25
 8002112:	702b      	strb	r3, [r5, #0]
        break;
 8002114:	e7a5      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002116:	2318      	movs	r3, #24
 8002118:	702b      	strb	r3, [r5, #0]
        break;
 800211a:	e7a2      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 800211c:	2304      	movs	r3, #4
 800211e:	702b      	strb	r3, [r5, #0]
  return ret;
 8002120:	e79f      	b.n	8002062 <iis2dlpc_power_mode_get+0x14>

08002122 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8002122:	b530      	push	{r4, r5, lr}
 8002124:	b083      	sub	sp, #12
 8002126:	4605      	mov	r5, r0
 8002128:	460c      	mov	r4, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800212a:	2301      	movs	r3, #1
 800212c:	aa01      	add	r2, sp, #4
 800212e:	2120      	movs	r1, #32
 8002130:	f7ff ff36 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 8002134:	4603      	mov	r3, r0
 8002136:	b118      	cbz	r0, 8002140 <iis2dlpc_data_rate_set+0x1e>
  if (ret == 0)
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  if (ret == 0)
 8002138:	b1cb      	cbz	r3, 800216e <iis2dlpc_data_rate_set+0x4c>
  {
    ret = ret;
  }

  return ret;
}
 800213a:	4618      	mov	r0, r3
 800213c:	b003      	add	sp, #12
 800213e:	bd30      	pop	{r4, r5, pc}
    ctrl1.odr = (uint8_t) val;
 8002140:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002144:	f364 1307 	bfi	r3, r4, #4, #4
 8002148:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800214c:	2301      	movs	r3, #1
 800214e:	aa01      	add	r2, sp, #4
 8002150:	2120      	movs	r1, #32
 8002152:	4628      	mov	r0, r5
 8002154:	f7ff ff29 	bl	8001faa <iis2dlpc_write_reg>
  if (ret == 0)
 8002158:	4603      	mov	r3, r0
 800215a:	2800      	cmp	r0, #0
 800215c:	d1ed      	bne.n	800213a <iis2dlpc_data_rate_set+0x18>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 800215e:	2301      	movs	r3, #1
 8002160:	466a      	mov	r2, sp
 8002162:	2122      	movs	r1, #34	@ 0x22
 8002164:	4628      	mov	r0, r5
 8002166:	f7ff ff1b 	bl	8001fa0 <iis2dlpc_read_reg>
 800216a:	4603      	mov	r3, r0
 800216c:	e7e4      	b.n	8002138 <iis2dlpc_data_rate_set+0x16>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800216e:	f3c4 1101 	ubfx	r1, r4, #4, #2
 8002172:	f89d 3000 	ldrb.w	r3, [sp]
 8002176:	f361 0301 	bfi	r3, r1, #0, #2
 800217a:	f88d 3000 	strb.w	r3, [sp]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 800217e:	2301      	movs	r3, #1
 8002180:	466a      	mov	r2, sp
 8002182:	2122      	movs	r1, #34	@ 0x22
 8002184:	4628      	mov	r0, r5
 8002186:	f7ff ff10 	bl	8001faa <iis2dlpc_write_reg>
 800218a:	4603      	mov	r3, r0
  return ret;
 800218c:	e7d5      	b.n	800213a <iis2dlpc_data_rate_set+0x18>

0800218e <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 800218e:	b530      	push	{r4, r5, lr}
 8002190:	b083      	sub	sp, #12
 8002192:	4604      	mov	r4, r0
 8002194:	460d      	mov	r5, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002196:	2301      	movs	r3, #1
 8002198:	aa01      	add	r2, sp, #4
 800219a:	2120      	movs	r1, #32
 800219c:	f7ff ff00 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 80021a0:	b108      	cbz	r0, 80021a6 <iis2dlpc_data_rate_get+0x18>
        break;
    }
  }

  return ret;
}
 80021a2:	b003      	add	sp, #12
 80021a4:	bd30      	pop	{r4, r5, pc}
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80021a6:	2301      	movs	r3, #1
 80021a8:	466a      	mov	r2, sp
 80021aa:	2122      	movs	r1, #34	@ 0x22
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff fef7 	bl	8001fa0 <iis2dlpc_read_reg>
    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80021b2:	f89d 2000 	ldrb.w	r2, [sp]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80021c4:	2b22      	cmp	r3, #34	@ 0x22
 80021c6:	d837      	bhi.n	8002238 <iis2dlpc_data_rate_get+0xaa>
 80021c8:	e8df f003 	tbb	[pc, r3]
 80021cc:	1b181512 	.word	0x1b181512
 80021d0:	2724211e 	.word	0x2724211e
 80021d4:	36362d2a 	.word	0x36362d2a
 80021d8:	36363636 	.word	0x36363636
 80021dc:	36303636 	.word	0x36303636
 80021e0:	36363636 	.word	0x36363636
 80021e4:	36363636 	.word	0x36363636
 80021e8:	36363636 	.word	0x36363636
 80021ec:	3636      	.short	0x3636
 80021ee:	33          	.byte	0x33
 80021ef:	00          	.byte	0x00
        *val = IIS2DLPC_XL_ODR_OFF;
 80021f0:	2300      	movs	r3, #0
 80021f2:	702b      	strb	r3, [r5, #0]
        break;
 80021f4:	e7d5      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 80021f6:	2301      	movs	r3, #1
 80021f8:	702b      	strb	r3, [r5, #0]
        break;
 80021fa:	e7d2      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_12Hz5;
 80021fc:	2302      	movs	r3, #2
 80021fe:	702b      	strb	r3, [r5, #0]
        break;
 8002200:	e7cf      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002202:	2303      	movs	r3, #3
 8002204:	702b      	strb	r3, [r5, #0]
        break;
 8002206:	e7cc      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_50Hz;
 8002208:	2304      	movs	r3, #4
 800220a:	702b      	strb	r3, [r5, #0]
        break;
 800220c:	e7c9      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_100Hz;
 800220e:	2305      	movs	r3, #5
 8002210:	702b      	strb	r3, [r5, #0]
        break;
 8002212:	e7c6      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_200Hz;
 8002214:	2306      	movs	r3, #6
 8002216:	702b      	strb	r3, [r5, #0]
        break;
 8002218:	e7c3      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_400Hz;
 800221a:	2307      	movs	r3, #7
 800221c:	702b      	strb	r3, [r5, #0]
        break;
 800221e:	e7c0      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_800Hz;
 8002220:	2308      	movs	r3, #8
 8002222:	702b      	strb	r3, [r5, #0]
        break;
 8002224:	e7bd      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002226:	2309      	movs	r3, #9
 8002228:	702b      	strb	r3, [r5, #0]
        break;
 800222a:	e7ba      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 800222c:	2312      	movs	r3, #18
 800222e:	702b      	strb	r3, [r5, #0]
        break;
 8002230:	e7b7      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002232:	2322      	movs	r3, #34	@ 0x22
 8002234:	702b      	strb	r3, [r5, #0]
        break;
 8002236:	e7b4      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_OFF;
 8002238:	2300      	movs	r3, #0
 800223a:	702b      	strb	r3, [r5, #0]
  return ret;
 800223c:	e7b1      	b.n	80021a2 <iis2dlpc_data_rate_get+0x14>

0800223e <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800223e:	b530      	push	{r4, r5, lr}
 8002240:	b083      	sub	sp, #12
 8002242:	4604      	mov	r4, r0
 8002244:	460d      	mov	r5, r1
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002246:	2301      	movs	r3, #1
 8002248:	aa01      	add	r2, sp, #4
 800224a:	2121      	movs	r1, #33	@ 0x21
 800224c:	f7ff fea8 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 8002250:	b108      	cbz	r0, 8002256 <iis2dlpc_block_data_update_set+0x18>
    reg.bdu = val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002252:	b003      	add	sp, #12
 8002254:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8002256:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800225a:	f365 03c3 	bfi	r3, r5, #3, #1
 800225e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002262:	2301      	movs	r3, #1
 8002264:	aa01      	add	r2, sp, #4
 8002266:	2121      	movs	r1, #33	@ 0x21
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff fe9e 	bl	8001faa <iis2dlpc_write_reg>
  return ret;
 800226e:	e7f0      	b.n	8002252 <iis2dlpc_block_data_update_set+0x14>

08002270 <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8002270:	b530      	push	{r4, r5, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002278:	2301      	movs	r3, #1
 800227a:	aa01      	add	r2, sp, #4
 800227c:	2125      	movs	r1, #37	@ 0x25
 800227e:	f7ff fe8f 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 8002282:	b108      	cbz	r0, 8002288 <iis2dlpc_full_scale_set+0x18>
    reg.fs = (uint8_t) val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002284:	b003      	add	sp, #12
 8002286:	bd30      	pop	{r4, r5, pc}
    reg.fs = (uint8_t) val;
 8002288:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800228c:	f365 1305 	bfi	r3, r5, #4, #2
 8002290:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002294:	2301      	movs	r3, #1
 8002296:	aa01      	add	r2, sp, #4
 8002298:	2125      	movs	r1, #37	@ 0x25
 800229a:	4620      	mov	r0, r4
 800229c:	f7ff fe85 	bl	8001faa <iis2dlpc_write_reg>
  return ret;
 80022a0:	e7f0      	b.n	8002284 <iis2dlpc_full_scale_set+0x14>

080022a2 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 80022a2:	b510      	push	{r4, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	460c      	mov	r4, r1
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 80022a8:	2301      	movs	r3, #1
 80022aa:	aa01      	add	r2, sp, #4
 80022ac:	2125      	movs	r1, #37	@ 0x25
 80022ae:	f7ff fe77 	bl	8001fa0 <iis2dlpc_read_reg>

  switch (reg.fs)
 80022b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022b6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d810      	bhi.n	80022e0 <iis2dlpc_full_scale_get+0x3e>
 80022be:	e8df f003 	tbb	[pc, r3]
 80022c2:	0602      	.short	0x0602
 80022c4:	0c09      	.short	0x0c09
  {
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 80022c6:	2300      	movs	r3, #0
 80022c8:	7023      	strb	r3, [r4, #0]
      *val = IIS2DLPC_2g;
      break;
  }

  return ret;
}
 80022ca:	b002      	add	sp, #8
 80022cc:	bd10      	pop	{r4, pc}
      *val = IIS2DLPC_4g;
 80022ce:	2301      	movs	r3, #1
 80022d0:	7023      	strb	r3, [r4, #0]
      break;
 80022d2:	e7fa      	b.n	80022ca <iis2dlpc_full_scale_get+0x28>
      *val = IIS2DLPC_8g;
 80022d4:	2302      	movs	r3, #2
 80022d6:	7023      	strb	r3, [r4, #0]
      break;
 80022d8:	e7f7      	b.n	80022ca <iis2dlpc_full_scale_get+0x28>
      *val = IIS2DLPC_16g;
 80022da:	2303      	movs	r3, #3
 80022dc:	7023      	strb	r3, [r4, #0]
      break;
 80022de:	e7f4      	b.n	80022ca <iis2dlpc_full_scale_get+0x28>
      *val = IIS2DLPC_2g;
 80022e0:	2300      	movs	r3, #0
 80022e2:	7023      	strb	r3, [r4, #0]
  return ret;
 80022e4:	e7f1      	b.n	80022ca <iis2dlpc_full_scale_get+0x28>

080022e6 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80022e6:	b510      	push	{r4, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 80022ec:	2306      	movs	r3, #6
 80022ee:	466a      	mov	r2, sp
 80022f0:	2128      	movs	r1, #40	@ 0x28
 80022f2:	f7ff fe55 	bl	8001fa0 <iis2dlpc_read_reg>
  val[0] = (int16_t)buff[1];
 80022f6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80022fa:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80022fc:	f89d 3000 	ldrb.w	r3, [sp]
 8002300:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002304:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8002306:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800230a:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800230c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002310:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002314:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8002316:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800231a:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800231c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002320:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002324:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8002326:	b002      	add	sp, #8
 8002328:	bd10      	pop	{r4, pc}

0800232a <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800232a:	b508      	push	{r3, lr}
 800232c:	460a      	mov	r2, r1
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 800232e:	2301      	movs	r3, #1
 8002330:	210f      	movs	r1, #15
 8002332:	f7ff fe35 	bl	8001fa0 <iis2dlpc_read_reg>

  return ret;
}
 8002336:	bd08      	pop	{r3, pc}

08002338 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002338:	b530      	push	{r4, r5, lr}
 800233a:	b083      	sub	sp, #12
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002340:	2301      	movs	r3, #1
 8002342:	aa01      	add	r2, sp, #4
 8002344:	2121      	movs	r1, #33	@ 0x21
 8002346:	f7ff fe2b 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 800234a:	b108      	cbz	r0, 8002350 <iis2dlpc_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800234c:	b003      	add	sp, #12
 800234e:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 8002350:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002354:	f365 0382 	bfi	r3, r5, #2, #1
 8002358:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800235c:	2301      	movs	r3, #1
 800235e:	aa01      	add	r2, sp, #4
 8002360:	2121      	movs	r1, #33	@ 0x21
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff fe21 	bl	8001faa <iis2dlpc_write_reg>
  return ret;
 8002368:	e7f0      	b.n	800234c <iis2dlpc_auto_increment_set+0x14>

0800236a <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 800236a:	b530      	push	{r4, r5, lr}
 800236c:	b083      	sub	sp, #12
 800236e:	4604      	mov	r4, r0
 8002370:	460d      	mov	r5, r1
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002372:	2301      	movs	r3, #1
 8002374:	aa01      	add	r2, sp, #4
 8002376:	212e      	movs	r1, #46	@ 0x2e
 8002378:	f7ff fe12 	bl	8001fa0 <iis2dlpc_read_reg>

  if (ret == 0)
 800237c:	b108      	cbz	r0, 8002382 <iis2dlpc_fifo_mode_set+0x18>
    reg.fmode = (uint8_t) val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800237e:	b003      	add	sp, #12
 8002380:	bd30      	pop	{r4, r5, pc}
    reg.fmode = (uint8_t) val;
 8002382:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002386:	f365 1347 	bfi	r3, r5, #5, #3
 800238a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 800238e:	2301      	movs	r3, #1
 8002390:	aa01      	add	r2, sp, #4
 8002392:	212e      	movs	r1, #46	@ 0x2e
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fe08 	bl	8001faa <iis2dlpc_write_reg>
  return ret;
 800239a:	e7f0      	b.n	800237e <iis2dlpc_fifo_mode_set+0x14>

0800239c <IIS2MDC_GetCapabilities>:
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800239c:	2000      	movs	r0, #0
 800239e:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 80023a0:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 80023a6:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 80023a8:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 80023aa:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 80023ac:	2332      	movs	r3, #50	@ 0x32
 80023ae:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80023b0:	2300      	movs	r3, #0
 80023b2:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80023b4:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80023b6:	4b01      	ldr	r3, [pc, #4]	@ (80023bc <IIS2MDC_GetCapabilities+0x20>)
 80023b8:	618b      	str	r3, [r1, #24]
  return IIS2MDC_OK;
}
 80023ba:	4770      	bx	lr
 80023bc:	42c80000 	.word	0x42c80000

080023c0 <IIS2MDC_MAG_GetSensitivity>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80023c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80023c4:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 80023c6:	2000      	movs	r0, #0
 80023c8:	4770      	bx	lr

080023ca <IIS2MDC_MAG_GetFullScale>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
  UNUSED(pObj);
  *FullScale = 50;
 80023ca:	2332      	movs	r3, #50	@ 0x32
 80023cc:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 80023ce:	2000      	movs	r0, #0
 80023d0:	4770      	bx	lr

080023d2 <IIS2MDC_MAG_SetFullScale>:
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
}
 80023d2:	2000      	movs	r0, #0
 80023d4:	4770      	bx	lr

080023d6 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023d6:	b510      	push	{r4, lr}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80023d8:	6884      	ldr	r4, [r0, #8]
 80023da:	b92c      	cbnz	r4, 80023e8 <ReadMagRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80023dc:	6944      	ldr	r4, [r0, #20]
 80023de:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80023e2:	7b00      	ldrb	r0, [r0, #12]
 80023e4:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 80023e6:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80023e8:	6944      	ldr	r4, [r0, #20]
 80023ea:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80023ee:	7b00      	ldrb	r0, [r0, #12]
 80023f0:	47a0      	blx	r4
 80023f2:	e7f8      	b.n	80023e6 <ReadMagRegWrap+0x10>

080023f4 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023f4:	b510      	push	{r4, lr}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80023f6:	6884      	ldr	r4, [r0, #8]
 80023f8:	b92c      	cbnz	r4, 8002406 <WriteMagRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80023fa:	6904      	ldr	r4, [r0, #16]
 80023fc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002400:	7b00      	ldrb	r0, [r0, #12]
 8002402:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002404:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002406:	6904      	ldr	r4, [r0, #16]
 8002408:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800240c:	7b00      	ldrb	r0, [r0, #12]
 800240e:	47a0      	blx	r4
 8002410:	e7f8      	b.n	8002404 <WriteMagRegWrap+0x10>

08002412 <IIS2MDC_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002412:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8002416:	2b01      	cmp	r3, #1
 8002418:	d00a      	beq.n	8002430 <IIS2MDC_MAG_Enable+0x1e>
{
 800241a:	b510      	push	{r4, lr}
 800241c:	4604      	mov	r4, r0
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800241e:	2100      	movs	r1, #0
 8002420:	3020      	adds	r0, #32
 8002422:	f000 f943 	bl	80026ac <iis2mdc_operating_mode_set>
 8002426:	b928      	cbnz	r0, 8002434 <IIS2MDC_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 8002428:	2301      	movs	r3, #1
 800242a:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 800242e:	bd10      	pop	{r4, pc}
    return IIS2MDC_OK;
 8002430:	2000      	movs	r0, #0
}
 8002432:	4770      	bx	lr
    return IIS2MDC_ERROR;
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	e7f9      	b.n	800242e <IIS2MDC_MAG_Enable+0x1c>

0800243a <IIS2MDC_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 800243a:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 800243e:	b90b      	cbnz	r3, 8002444 <IIS2MDC_MAG_Disable+0xa>
    return IIS2MDC_OK;
 8002440:	2000      	movs	r0, #0
}
 8002442:	4770      	bx	lr
{
 8002444:	b510      	push	{r4, lr}
 8002446:	4604      	mov	r4, r0
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002448:	2102      	movs	r1, #2
 800244a:	3020      	adds	r0, #32
 800244c:	f000 f92e 	bl	80026ac <iis2mdc_operating_mode_set>
 8002450:	b910      	cbnz	r0, 8002458 <IIS2MDC_MAG_Disable+0x1e>
  pObj->mag_is_enabled = 0;
 8002452:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
}
 8002456:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	e7fb      	b.n	8002456 <IIS2MDC_MAG_Disable+0x1c>

0800245e <IIS2MDC_DeInit>:
{
 800245e:	b510      	push	{r4, lr}
 8002460:	4604      	mov	r4, r0
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002462:	f7ff ffea 	bl	800243a <IIS2MDC_MAG_Disable>
 8002466:	b910      	cbnz	r0, 800246e <IIS2MDC_DeInit+0x10>
  pObj->is_initialized = 0;
 8002468:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
}
 800246c:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
 8002472:	e7fb      	b.n	800246c <IIS2MDC_DeInit+0xe>

08002474 <IIS2MDC_MAG_SetOutputDataRate>:
{
 8002474:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002476:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800247a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	d90f      	bls.n	80024a4 <IIS2MDC_MAG_SetOutputDataRate+0x30>
 8002484:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8002488:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d90e      	bls.n	80024b0 <IIS2MDC_MAG_SetOutputDataRate+0x3c>
 8002492:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80024c0 <IIS2MDC_MAG_SetOutputDataRate+0x4c>
 8002496:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	d809      	bhi.n	80024b4 <IIS2MDC_MAG_SetOutputDataRate+0x40>
 80024a0:	2102      	movs	r1, #2
 80024a2:	e000      	b.n	80024a6 <IIS2MDC_MAG_SetOutputDataRate+0x32>
 80024a4:	2100      	movs	r1, #0
  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80024a6:	3020      	adds	r0, #32
 80024a8:	f000 f919 	bl	80026de <iis2mdc_data_rate_set>
 80024ac:	b920      	cbnz	r0, 80024b8 <IIS2MDC_MAG_SetOutputDataRate+0x44>
}
 80024ae:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80024b0:	2101      	movs	r1, #1
 80024b2:	e7f8      	b.n	80024a6 <IIS2MDC_MAG_SetOutputDataRate+0x32>
 80024b4:	2103      	movs	r1, #3
 80024b6:	e7f6      	b.n	80024a6 <IIS2MDC_MAG_SetOutputDataRate+0x32>
    return IIS2MDC_ERROR;
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	e7f7      	b.n	80024ae <IIS2MDC_MAG_SetOutputDataRate+0x3a>
 80024be:	bf00      	nop
 80024c0:	42480000 	.word	0x42480000

080024c4 <IIS2MDC_Init>:
{
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4604      	mov	r4, r0
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 80024c8:	f100 0520 	add.w	r5, r0, #32
 80024cc:	2101      	movs	r1, #1
 80024ce:	4628      	mov	r0, r5
 80024d0:	f000 f940 	bl	8002754 <iis2mdc_block_data_update_set>
 80024d4:	b990      	cbnz	r0, 80024fc <IIS2MDC_Init+0x38>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80024d6:	2102      	movs	r1, #2
 80024d8:	4628      	mov	r0, r5
 80024da:	f000 f8e7 	bl	80026ac <iis2mdc_operating_mode_set>
 80024de:	b980      	cbnz	r0, 8002502 <IIS2MDC_Init+0x3e>
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80024e0:	2103      	movs	r1, #3
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 f8fb 	bl	80026de <iis2mdc_data_rate_set>
 80024e8:	b970      	cbnz	r0, 8002508 <IIS2MDC_Init+0x44>
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 80024ea:	2100      	movs	r1, #0
 80024ec:	4628      	mov	r0, r5
 80024ee:	f000 f973 	bl	80027d8 <iis2mdc_self_test_set>
 80024f2:	b960      	cbnz	r0, 800250e <IIS2MDC_Init+0x4a>
  pObj->is_initialized = 1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2MDC_ERROR;
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	e7fb      	b.n	80024fa <IIS2MDC_Init+0x36>
    return IIS2MDC_ERROR;
 8002502:	f04f 30ff 	mov.w	r0, #4294967295
 8002506:	e7f8      	b.n	80024fa <IIS2MDC_Init+0x36>
    return IIS2MDC_ERROR;
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	e7f5      	b.n	80024fa <IIS2MDC_Init+0x36>
    return IIS2MDC_ERROR;
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	e7f2      	b.n	80024fa <IIS2MDC_Init+0x36>

08002514 <IIS2MDC_ReadID>:
{
 8002514:	b508      	push	{r3, lr}
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002516:	3020      	adds	r0, #32
 8002518:	f000 f957 	bl	80027ca <iis2mdc_device_id_get>
 800251c:	b900      	cbnz	r0, 8002520 <IIS2MDC_ReadID+0xc>
}
 800251e:	bd08      	pop	{r3, pc}
    return IIS2MDC_ERROR;
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	e7fb      	b.n	800251e <IIS2MDC_ReadID+0xa>
	...

08002528 <IIS2MDC_MAG_GetOutputDataRate>:
{
 8002528:	b510      	push	{r4, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	460c      	mov	r4, r1
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800252e:	f10d 0107 	add.w	r1, sp, #7
 8002532:	3020      	adds	r0, #32
 8002534:	f000 f8ec 	bl	8002710 <iis2mdc_data_rate_get>
 8002538:	b9a0      	cbnz	r0, 8002564 <IIS2MDC_MAG_GetOutputDataRate+0x3c>
  switch (odr_low_level)
 800253a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d813      	bhi.n	800256a <IIS2MDC_MAG_GetOutputDataRate+0x42>
 8002542:	e8df f003 	tbb	[pc, r3]
 8002546:	0602      	.short	0x0602
 8002548:	0c09      	.short	0x0c09
      *Odr = 10.0f;
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <IIS2MDC_MAG_GetOutputDataRate+0x48>)
 800254c:	6023      	str	r3, [r4, #0]
}
 800254e:	b002      	add	sp, #8
 8002550:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <IIS2MDC_MAG_GetOutputDataRate+0x4c>)
 8002554:	6023      	str	r3, [r4, #0]
      break;
 8002556:	e7fa      	b.n	800254e <IIS2MDC_MAG_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 8002558:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <IIS2MDC_MAG_GetOutputDataRate+0x50>)
 800255a:	6023      	str	r3, [r4, #0]
      break;
 800255c:	e7f7      	b.n	800254e <IIS2MDC_MAG_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <IIS2MDC_MAG_GetOutputDataRate+0x54>)
 8002560:	6023      	str	r3, [r4, #0]
      break;
 8002562:	e7f4      	b.n	800254e <IIS2MDC_MAG_GetOutputDataRate+0x26>
    return IIS2MDC_ERROR;
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	e7f1      	b.n	800254e <IIS2MDC_MAG_GetOutputDataRate+0x26>
  switch (odr_low_level)
 800256a:	f04f 30ff 	mov.w	r0, #4294967295
 800256e:	e7ee      	b.n	800254e <IIS2MDC_MAG_GetOutputDataRate+0x26>
 8002570:	41200000 	.word	0x41200000
 8002574:	41a00000 	.word	0x41a00000
 8002578:	42480000 	.word	0x42480000
 800257c:	42c80000 	.word	0x42c80000

08002580 <IIS2MDC_MAG_GetAxesRaw>:
{
 8002580:	b510      	push	{r4, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	460c      	mov	r4, r1
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002586:	4669      	mov	r1, sp
 8002588:	3020      	adds	r0, #32
 800258a:	f000 f8fc 	bl	8002786 <iis2mdc_magnetic_raw_get>
 800258e:	b950      	cbnz	r0, 80025a6 <IIS2MDC_MAG_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8002590:	f9bd 3000 	ldrsh.w	r3, [sp]
 8002594:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8002596:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800259a:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 800259c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80025a0:	80a3      	strh	r3, [r4, #4]
}
 80025a2:	b002      	add	sp, #8
 80025a4:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295
 80025aa:	e7fa      	b.n	80025a2 <IIS2MDC_MAG_GetAxesRaw+0x22>

080025ac <IIS2MDC_MAG_GetAxes>:
{
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	4605      	mov	r5, r0
 80025b2:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80025b4:	2300      	movs	r3, #0
 80025b6:	9301      	str	r3, [sp, #4]
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80025b8:	a902      	add	r1, sp, #8
 80025ba:	3020      	adds	r0, #32
 80025bc:	f000 f8e3 	bl	8002786 <iis2mdc_magnetic_raw_get>
 80025c0:	bb68      	cbnz	r0, 800261e <IIS2MDC_MAG_GetAxes+0x72>
 80025c2:	4606      	mov	r6, r0
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80025c4:	a901      	add	r1, sp, #4
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7ff fefa 	bl	80023c0 <IIS2MDC_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80025cc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80025d0:	ee07 3a10 	vmov	s14, r3
 80025d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025d8:	eddd 7a01 	vldr	s15, [sp, #4]
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80025e4:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80025e8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80025ec:	ee07 3a10 	vmov	s14, r3
 80025f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80025fc:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002600:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002604:	ee07 3a10 	vmov	s14, r3
 8002608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800260c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002614:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002618:	4630      	mov	r0, r6
 800261a:	b004      	add	sp, #16
 800261c:	bd70      	pop	{r4, r5, r6, pc}
    return IIS2MDC_ERROR;
 800261e:	f04f 36ff 	mov.w	r6, #4294967295
 8002622:	e7f9      	b.n	8002618 <IIS2MDC_MAG_GetAxes+0x6c>

08002624 <IIS2MDC_RegisterBusIO>:
  if (pObj == NULL)
 8002624:	2800      	cmp	r0, #0
 8002626:	d029      	beq.n	800267c <IIS2MDC_RegisterBusIO+0x58>
{
 8002628:	b510      	push	{r4, lr}
 800262a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 800262c:	680b      	ldr	r3, [r1, #0]
 800262e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002630:	684a      	ldr	r2, [r1, #4]
 8002632:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002634:	688a      	ldr	r2, [r1, #8]
 8002636:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8002638:	7b0a      	ldrb	r2, [r1, #12]
 800263a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800263c:	690a      	ldr	r2, [r1, #16]
 800263e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002640:	694a      	ldr	r2, [r1, #20]
 8002642:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002644:	698a      	ldr	r2, [r1, #24]
 8002646:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002648:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <IIS2MDC_RegisterBusIO+0x6c>)
 800264a:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800264c:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <IIS2MDC_RegisterBusIO+0x70>)
 800264e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002650:	69ca      	ldr	r2, [r1, #28]
 8002652:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002654:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 8002656:	b1a3      	cbz	r3, 8002682 <IIS2MDC_RegisterBusIO+0x5e>
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002658:	4798      	blx	r3
 800265a:	b9a8      	cbnz	r0, 8002688 <IIS2MDC_RegisterBusIO+0x64>
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 800265c:	68a3      	ldr	r3, [r4, #8]
 800265e:	b113      	cbz	r3, 8002666 <IIS2MDC_RegisterBusIO+0x42>
        if (pObj->is_initialized == 0U)
 8002660:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8002664:	b103      	cbz	r3, 8002668 <IIS2MDC_RegisterBusIO+0x44>
}
 8002666:	bd10      	pop	{r4, pc}
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002668:	2101      	movs	r1, #1
 800266a:	f104 0020 	add.w	r0, r4, #32
 800266e:	f000 f8cc 	bl	800280a <iis2mdc_i2c_interface_set>
 8002672:	2800      	cmp	r0, #0
 8002674:	d0f7      	beq.n	8002666 <IIS2MDC_RegisterBusIO+0x42>
            ret = IIS2MDC_ERROR;
 8002676:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800267a:	e7f4      	b.n	8002666 <IIS2MDC_RegisterBusIO+0x42>
    ret = IIS2MDC_ERROR;
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002680:	4770      	bx	lr
      ret = IIS2MDC_ERROR;
 8002682:	f04f 30ff 	mov.w	r0, #4294967295
 8002686:	e7ee      	b.n	8002666 <IIS2MDC_RegisterBusIO+0x42>
      ret = IIS2MDC_ERROR;
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	e7eb      	b.n	8002666 <IIS2MDC_RegisterBusIO+0x42>
 800268e:	bf00      	nop
 8002690:	080023d7 	.word	0x080023d7
 8002694:	080023f5 	.word	0x080023f5

08002698 <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002698:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800269a:	6844      	ldr	r4, [r0, #4]
 800269c:	68c0      	ldr	r0, [r0, #12]
 800269e:	47a0      	blx	r4

  return ret;
}
 80026a0:	bd10      	pop	{r4, pc}

080026a2 <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80026a2:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80026a4:	6804      	ldr	r4, [r0, #0]
 80026a6:	68c0      	ldr	r0, [r0, #12]
 80026a8:	47a0      	blx	r4

  return ret;
}
 80026aa:	bd10      	pop	{r4, pc}

080026ac <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 80026ac:	b530      	push	{r4, r5, lr}
 80026ae:	b083      	sub	sp, #12
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026b4:	2301      	movs	r3, #1
 80026b6:	aa01      	add	r2, sp, #4
 80026b8:	2160      	movs	r1, #96	@ 0x60
 80026ba:	f7ff ffed 	bl	8002698 <iis2mdc_read_reg>

  if (ret == 0)
 80026be:	b108      	cbz	r0, 80026c4 <iis2mdc_operating_mode_set+0x18>
    reg.md = (uint8_t)val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80026c0:	b003      	add	sp, #12
 80026c2:	bd30      	pop	{r4, r5, pc}
    reg.md = (uint8_t)val;
 80026c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026c8:	f365 0301 	bfi	r3, r5, #0, #2
 80026cc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026d0:	2301      	movs	r3, #1
 80026d2:	aa01      	add	r2, sp, #4
 80026d4:	2160      	movs	r1, #96	@ 0x60
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff ffe3 	bl	80026a2 <iis2mdc_write_reg>
  return ret;
 80026dc:	e7f0      	b.n	80026c0 <iis2mdc_operating_mode_set+0x14>

080026de <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80026de:	b530      	push	{r4, r5, lr}
 80026e0:	b083      	sub	sp, #12
 80026e2:	4604      	mov	r4, r0
 80026e4:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026e6:	2301      	movs	r3, #1
 80026e8:	aa01      	add	r2, sp, #4
 80026ea:	2160      	movs	r1, #96	@ 0x60
 80026ec:	f7ff ffd4 	bl	8002698 <iis2mdc_read_reg>

  if (ret == 0)
 80026f0:	b108      	cbz	r0, 80026f6 <iis2mdc_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80026f2:	b003      	add	sp, #12
 80026f4:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 80026f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026fa:	f365 0383 	bfi	r3, r5, #2, #2
 80026fe:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002702:	2301      	movs	r3, #1
 8002704:	aa01      	add	r2, sp, #4
 8002706:	2160      	movs	r1, #96	@ 0x60
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff ffca 	bl	80026a2 <iis2mdc_write_reg>
  return ret;
 800270e:	e7f0      	b.n	80026f2 <iis2mdc_data_rate_set+0x14>

08002710 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002710:	b510      	push	{r4, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	460c      	mov	r4, r1
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002716:	2301      	movs	r3, #1
 8002718:	aa01      	add	r2, sp, #4
 800271a:	2160      	movs	r1, #96	@ 0x60
 800271c:	f7ff ffbc 	bl	8002698 <iis2mdc_read_reg>

  switch (reg.odr)
 8002720:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002724:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002728:	2b03      	cmp	r3, #3
 800272a:	d810      	bhi.n	800274e <iis2mdc_data_rate_get+0x3e>
 800272c:	e8df f003 	tbb	[pc, r3]
 8002730:	0c090602 	.word	0x0c090602
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002734:	2300      	movs	r3, #0
 8002736:	7023      	strb	r3, [r4, #0]
      *val = IIS2MDC_ODR_10Hz;
      break;
  }

  return ret;
}
 8002738:	b002      	add	sp, #8
 800273a:	bd10      	pop	{r4, pc}
      *val = IIS2MDC_ODR_20Hz;
 800273c:	2301      	movs	r3, #1
 800273e:	7023      	strb	r3, [r4, #0]
      break;
 8002740:	e7fa      	b.n	8002738 <iis2mdc_data_rate_get+0x28>
      *val = IIS2MDC_ODR_50Hz;
 8002742:	2302      	movs	r3, #2
 8002744:	7023      	strb	r3, [r4, #0]
      break;
 8002746:	e7f7      	b.n	8002738 <iis2mdc_data_rate_get+0x28>
      *val = IIS2MDC_ODR_100Hz;
 8002748:	2303      	movs	r3, #3
 800274a:	7023      	strb	r3, [r4, #0]
      break;
 800274c:	e7f4      	b.n	8002738 <iis2mdc_data_rate_get+0x28>
      *val = IIS2MDC_ODR_10Hz;
 800274e:	2300      	movs	r3, #0
 8002750:	7023      	strb	r3, [r4, #0]
  return ret;
 8002752:	e7f1      	b.n	8002738 <iis2mdc_data_rate_get+0x28>

08002754 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002754:	b530      	push	{r4, r5, lr}
 8002756:	b083      	sub	sp, #12
 8002758:	4604      	mov	r4, r0
 800275a:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800275c:	2301      	movs	r3, #1
 800275e:	aa01      	add	r2, sp, #4
 8002760:	2162      	movs	r1, #98	@ 0x62
 8002762:	f7ff ff99 	bl	8002698 <iis2mdc_read_reg>

  if (ret == 0)
 8002766:	b108      	cbz	r0, 800276c <iis2mdc_block_data_update_set+0x18>
    reg.bdu = val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002768:	b003      	add	sp, #12
 800276a:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 800276c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002770:	f365 1304 	bfi	r3, r5, #4, #1
 8002774:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002778:	2301      	movs	r3, #1
 800277a:	aa01      	add	r2, sp, #4
 800277c:	2162      	movs	r1, #98	@ 0x62
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff ff8f 	bl	80026a2 <iis2mdc_write_reg>
  return ret;
 8002784:	e7f0      	b.n	8002768 <iis2mdc_block_data_update_set+0x14>

08002786 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002786:	b510      	push	{r4, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 800278c:	2306      	movs	r3, #6
 800278e:	466a      	mov	r2, sp
 8002790:	2168      	movs	r1, #104	@ 0x68
 8002792:	f7ff ff81 	bl	8002698 <iis2mdc_read_reg>
  val[0] = (int16_t)buff[1];
 8002796:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800279a:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800279c:	f89d 3000 	ldrb.w	r3, [sp]
 80027a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027a4:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 80027a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80027aa:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80027b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027b4:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 80027b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80027ba:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027c4:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80027c6:	b002      	add	sp, #8
 80027c8:	bd10      	pop	{r4, pc}

080027ca <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80027ca:	b508      	push	{r3, lr}
 80027cc:	460a      	mov	r2, r1
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 80027ce:	2301      	movs	r3, #1
 80027d0:	214f      	movs	r1, #79	@ 0x4f
 80027d2:	f7ff ff61 	bl	8002698 <iis2mdc_read_reg>

  return ret;
}
 80027d6:	bd08      	pop	{r3, pc}

080027d8 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027d8:	b530      	push	{r4, r5, lr}
 80027da:	b083      	sub	sp, #12
 80027dc:	4604      	mov	r4, r0
 80027de:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027e0:	2301      	movs	r3, #1
 80027e2:	aa01      	add	r2, sp, #4
 80027e4:	2162      	movs	r1, #98	@ 0x62
 80027e6:	f7ff ff57 	bl	8002698 <iis2mdc_read_reg>

  if (ret == 0)
 80027ea:	b108      	cbz	r0, 80027f0 <iis2mdc_self_test_set+0x18>
    reg.self_test = val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80027ec:	b003      	add	sp, #12
 80027ee:	bd30      	pop	{r4, r5, pc}
    reg.self_test = val;
 80027f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027f4:	f365 0341 	bfi	r3, r5, #1, #1
 80027f8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027fc:	2301      	movs	r3, #1
 80027fe:	aa01      	add	r2, sp, #4
 8002800:	2162      	movs	r1, #98	@ 0x62
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff ff4d 	bl	80026a2 <iis2mdc_write_reg>
  return ret;
 8002808:	e7f0      	b.n	80027ec <iis2mdc_self_test_set+0x14>

0800280a <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 800280a:	b530      	push	{r4, r5, lr}
 800280c:	b083      	sub	sp, #12
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002812:	2301      	movs	r3, #1
 8002814:	aa01      	add	r2, sp, #4
 8002816:	2162      	movs	r1, #98	@ 0x62
 8002818:	f7ff ff3e 	bl	8002698 <iis2mdc_read_reg>

  if (ret == 0)
 800281c:	b108      	cbz	r0, 8002822 <iis2mdc_i2c_interface_set+0x18>
    reg.i2c_dis = (uint8_t)val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800281e:	b003      	add	sp, #12
 8002820:	bd30      	pop	{r4, r5, pc}
    reg.i2c_dis = (uint8_t)val;
 8002822:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002826:	f365 1345 	bfi	r3, r5, #5, #1
 800282a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800282e:	2301      	movs	r3, #1
 8002830:	aa01      	add	r2, sp, #4
 8002832:	2162      	movs	r1, #98	@ 0x62
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff ff34 	bl	80026a2 <iis2mdc_write_reg>
  return ret;
 800283a:	e7f0      	b.n	800281e <iis2mdc_i2c_interface_set+0x14>

0800283c <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	b090      	sub	sp, #64	@ 0x40
 8002840:	4604      	mov	r4, r0
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8002842:	2300      	movs	r3, #0
 8002844:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8002846:	23d7      	movs	r3, #215	@ 0xd7
 8002848:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS02A1_I2C_INIT;
 800284c:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <ISM330DHCX_0_Probe+0xf8>)
 800284e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DEINIT;
 8002850:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <ISM330DHCX_0_Probe+0xfc>)
 8002852:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_READ_REG;
 8002854:	4b39      	ldr	r3, [pc, #228]	@ (800293c <ISM330DHCX_0_Probe+0x100>)
 8002856:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WRITE_REG;
 8002858:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <ISM330DHCX_0_Probe+0x104>)
 800285a:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS02A1_GET_TICK;
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <ISM330DHCX_0_Probe+0x108>)
 800285e:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS02A1_DELAY;
 8002860:	4b39      	ldr	r3, [pc, #228]	@ (8002948 <ISM330DHCX_0_Probe+0x10c>)
 8002862:	930f      	str	r3, [sp, #60]	@ 0x3c

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8002864:	a908      	add	r1, sp, #32
 8002866:	4839      	ldr	r0, [pc, #228]	@ (800294c <ISM330DHCX_0_Probe+0x110>)
 8002868:	f000 ff76 	bl	8003758 <ISM330DHCX_RegisterBusIO>
 800286c:	2800      	cmp	r0, #0
 800286e:	d152      	bne.n	8002916 <ISM330DHCX_0_Probe+0xda>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (ISM330DHCX_Set_Mem_Bank(&ism330dhcx_obj_0, ISM330DHCX_USER_BANK) != ISM330DHCX_OK)
 8002870:	2100      	movs	r1, #0
 8002872:	4836      	ldr	r0, [pc, #216]	@ (800294c <ISM330DHCX_0_Probe+0x110>)
 8002874:	f000 ffac 	bl	80037d0 <ISM330DHCX_Set_Mem_Bank>
 8002878:	2800      	cmp	r0, #0
 800287a:	d14f      	bne.n	800291c <ISM330DHCX_0_Probe+0xe0>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 800287c:	f10d 011f 	add.w	r1, sp, #31
 8002880:	4832      	ldr	r0, [pc, #200]	@ (800294c <ISM330DHCX_0_Probe+0x110>)
 8002882:	f000 fced 	bl	8003260 <ISM330DHCX_ReadID>
 8002886:	4606      	mov	r6, r0
 8002888:	2800      	cmp	r0, #0
 800288a:	d14a      	bne.n	8002922 <ISM330DHCX_0_Probe+0xe6>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != ISM330DHCX_ID)
 800288c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002890:	2b6b      	cmp	r3, #107	@ 0x6b
 8002892:	d149      	bne.n	8002928 <ISM330DHCX_0_Probe+0xec>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8002894:	4d2d      	ldr	r5, [pc, #180]	@ (800294c <ISM330DHCX_0_Probe+0x110>)
 8002896:	4669      	mov	r1, sp
 8002898:	4628      	mov	r0, r5
 800289a:	f000 faaf 	bl	8002dfc <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800289e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80028a2:	f89d 3000 	ldrb.w	r3, [sp]
 80028a6:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80028aa:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80028ae:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80028b2:	4927      	ldr	r1, [pc, #156]	@ (8002950 <ISM330DHCX_0_Probe+0x114>)
 80028b4:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <ISM330DHCX_0_Probe+0x118>)
 80028b8:	601d      	str	r5, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 80028ba:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <ISM330DHCX_0_Probe+0x11c>)
 80028bc:	4927      	ldr	r1, [pc, #156]	@ (800295c <ISM330DHCX_0_Probe+0x120>)
 80028be:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80028c0:	f014 0f01 	tst.w	r4, #1
 80028c4:	d001      	beq.n	80028ca <ISM330DHCX_0_Probe+0x8e>
 80028c6:	2a01      	cmp	r2, #1
 80028c8:	d00c      	beq.n	80028e4 <ISM330DHCX_0_Probe+0xa8>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80028ca:	f014 0f02 	tst.w	r4, #2
 80028ce:	d003      	beq.n	80028d8 <ISM330DHCX_0_Probe+0x9c>
 80028d0:	f89d 3000 	ldrb.w	r3, [sp]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d010      	beq.n	80028fa <ISM330DHCX_0_Probe+0xbe>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80028d8:	f014 0f04 	tst.w	r4, #4
 80028dc:	d127      	bne.n	800292e <ISM330DHCX_0_Probe+0xf2>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80028de:	4630      	mov	r0, r6
 80028e0:	b010      	add	sp, #64	@ 0x40
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <ISM330DHCX_0_Probe+0x124>)
 80028e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002964 <ISM330DHCX_0_Probe+0x128>)
 80028e8:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 80028ea:	680b      	ldr	r3, [r1, #0]
 80028ec:	4628      	mov	r0, r5
 80028ee:	4798      	blx	r3
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d0ea      	beq.n	80028ca <ISM330DHCX_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80028f4:	f06f 0604 	mvn.w	r6, #4
 80028f8:	e7f1      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <ISM330DHCX_0_Probe+0x124>)
 80028fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002968 <ISM330DHCX_0_Probe+0x12c>)
 80028fe:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8002900:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <ISM330DHCX_0_Probe+0x11c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a13      	ldr	r2, [pc, #76]	@ (8002954 <ISM330DHCX_0_Probe+0x118>)
 8002908:	6810      	ldr	r0, [r2, #0]
 800290a:	4798      	blx	r3
 800290c:	2800      	cmp	r0, #0
 800290e:	d0e3      	beq.n	80028d8 <ISM330DHCX_0_Probe+0x9c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002910:	f06f 0604 	mvn.w	r6, #4
 8002914:	e7e3      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002916:	f06f 0606 	mvn.w	r6, #6
 800291a:	e7e0      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800291c:	f06f 0606 	mvn.w	r6, #6
 8002920:	e7dd      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002922:	f06f 0606 	mvn.w	r6, #6
 8002926:	e7da      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002928:	f06f 0606 	mvn.w	r6, #6
 800292c:	e7d7      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800292e:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8002932:	e7d4      	b.n	80028de <ISM330DHCX_0_Probe+0xa2>
 8002934:	08007779 	.word	0x08007779
 8002938:	08007691 	.word	0x08007691
 800293c:	08007705 	.word	0x08007705
 8002940:	080076c9 	.word	0x080076c9
 8002944:	08007741 	.word	0x08007741
 8002948:	080049f5 	.word	0x080049f5
 800294c:	20000258 	.word	0x20000258
 8002950:	20000290 	.word	0x20000290
 8002954:	200002cc 	.word	0x200002cc
 8002958:	2000029c 	.word	0x2000029c
 800295c:	200000bc 	.word	0x200000bc
 8002960:	200002a8 	.word	0x200002a8
 8002964:	20000074 	.word	0x20000074
 8002968:	20000098 	.word	0x20000098

0800296c <IIS2DLPC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	b090      	sub	sp, #64	@ 0x40
 8002970:	4604      	mov	r4, r0
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 8002972:	2300      	movs	r3, #0
 8002974:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 8002976:	2333      	movs	r3, #51	@ 0x33
 8002978:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS02A1_I2C_INIT;
 800297c:	4b30      	ldr	r3, [pc, #192]	@ (8002a40 <IIS2DLPC_0_Probe+0xd4>)
 800297e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DEINIT;
 8002980:	4b30      	ldr	r3, [pc, #192]	@ (8002a44 <IIS2DLPC_0_Probe+0xd8>)
 8002982:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_READ_REG;
 8002984:	4b30      	ldr	r3, [pc, #192]	@ (8002a48 <IIS2DLPC_0_Probe+0xdc>)
 8002986:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WRITE_REG;
 8002988:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <IIS2DLPC_0_Probe+0xe0>)
 800298a:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS02A1_GET_TICK;
 800298c:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <IIS2DLPC_0_Probe+0xe4>)
 800298e:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS02A1_DELAY;
 8002990:	4b30      	ldr	r3, [pc, #192]	@ (8002a54 <IIS2DLPC_0_Probe+0xe8>)
 8002992:	930f      	str	r3, [sp, #60]	@ 0x3c

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 8002994:	a908      	add	r1, sp, #32
 8002996:	4830      	ldr	r0, [pc, #192]	@ (8002a58 <IIS2DLPC_0_Probe+0xec>)
 8002998:	f7ff fac6 	bl	8001f28 <IIS2DLPC_RegisterBusIO>
 800299c:	2800      	cmp	r0, #0
 800299e:	d142      	bne.n	8002a26 <IIS2DLPC_0_Probe+0xba>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 80029a0:	f10d 011f 	add.w	r1, sp, #31
 80029a4:	482c      	ldr	r0, [pc, #176]	@ (8002a58 <IIS2DLPC_0_Probe+0xec>)
 80029a6:	f7ff f8a9 	bl	8001afc <IIS2DLPC_ReadID>
 80029aa:	4605      	mov	r5, r0
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d13d      	bne.n	8002a2c <IIS2DLPC_0_Probe+0xc0>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != IIS2DLPC_ID)
 80029b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80029b4:	2b44      	cmp	r3, #68	@ 0x44
 80029b6:	d13c      	bne.n	8002a32 <IIS2DLPC_0_Probe+0xc6>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 80029b8:	4e27      	ldr	r6, [pc, #156]	@ (8002a58 <IIS2DLPC_0_Probe+0xec>)
 80029ba:	4669      	mov	r1, sp
 80029bc:	4630      	mov	r0, r6
 80029be:	f7fe fead 	bl	800171c <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80029c2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80029c6:	f89d 1000 	ldrb.w	r1, [sp]
 80029ca:	ea42 0341 	orr.w	r3, r2, r1, lsl #1
 80029ce:	f89d 0002 	ldrb.w	r0, [sp, #2]
 80029d2:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 80029d6:	4821      	ldr	r0, [pc, #132]	@ (8002a5c <IIS2DLPC_0_Probe+0xf0>)
 80029d8:	6043      	str	r3, [r0, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 80029da:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <IIS2DLPC_0_Probe+0xf4>)
 80029dc:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <IIS2DLPC_0_Probe+0xf8>)
 80029e0:	4821      	ldr	r0, [pc, #132]	@ (8002a68 <IIS2DLPC_0_Probe+0xfc>)
 80029e2:	6058      	str	r0, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80029e4:	f014 0f01 	tst.w	r4, #1
 80029e8:	d001      	beq.n	80029ee <IIS2DLPC_0_Probe+0x82>
 80029ea:	2a01      	cmp	r2, #1
 80029ec:	d018      	beq.n	8002a20 <IIS2DLPC_0_Probe+0xb4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80029ee:	f014 0f02 	tst.w	r4, #2
 80029f2:	d001      	beq.n	80029f8 <IIS2DLPC_0_Probe+0x8c>
 80029f4:	2901      	cmp	r1, #1
 80029f6:	d006      	beq.n	8002a06 <IIS2DLPC_0_Probe+0x9a>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80029f8:	b915      	cbnz	r5, 8002a00 <IIS2DLPC_0_Probe+0x94>
 80029fa:	f014 0f04 	tst.w	r4, #4
 80029fe:	d11b      	bne.n	8002a38 <IIS2DLPC_0_Probe+0xcc>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8002a00:	4628      	mov	r0, r5
 8002a02:	b010      	add	sp, #64	@ 0x40
 8002a04:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8002a06:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <IIS2DLPC_0_Probe+0x100>)
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <IIS2DLPC_0_Probe+0x104>)
 8002a0a:	611a      	str	r2, [r3, #16]
      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 8002a0c:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <IIS2DLPC_0_Probe+0xfc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4811      	ldr	r0, [pc, #68]	@ (8002a58 <IIS2DLPC_0_Probe+0xec>)
 8002a12:	4798      	blx	r3
 8002a14:	4605      	mov	r5, r0
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d0ef      	beq.n	80029fa <IIS2DLPC_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a1a:	f06f 0504 	mvn.w	r5, #4
 8002a1e:	e7ef      	b.n	8002a00 <IIS2DLPC_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a20:	f06f 0504 	mvn.w	r5, #4
 8002a24:	e7e8      	b.n	80029f8 <IIS2DLPC_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002a26:	f06f 0506 	mvn.w	r5, #6
 8002a2a:	e7e9      	b.n	8002a00 <IIS2DLPC_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002a2c:	f06f 0506 	mvn.w	r5, #6
 8002a30:	e7e6      	b.n	8002a00 <IIS2DLPC_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002a32:	f06f 0506 	mvn.w	r5, #6
 8002a36:	e7e3      	b.n	8002a00 <IIS2DLPC_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a38:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8002a3c:	e7e0      	b.n	8002a00 <IIS2DLPC_0_Probe+0x94>
 8002a3e:	bf00      	nop
 8002a40:	08007779 	.word	0x08007779
 8002a44:	08007691 	.word	0x08007691
 8002a48:	08007705 	.word	0x08007705
 8002a4c:	080076c9 	.word	0x080076c9
 8002a50:	08007741 	.word	0x08007741
 8002a54:	080049f5 	.word	0x080049f5
 8002a58:	2000021c 	.word	0x2000021c
 8002a5c:	20000290 	.word	0x20000290
 8002a60:	200002cc 	.word	0x200002cc
 8002a64:	2000029c 	.word	0x2000029c
 8002a68:	20000030 	.word	0x20000030
 8002a6c:	200002a8 	.word	0x200002a8
 8002a70:	2000000c 	.word	0x2000000c

08002a74 <IIS2MDC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	b090      	sub	sp, #64	@ 0x40
 8002a78:	4604      	mov	r4, r0
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8002a7e:	233d      	movs	r3, #61	@ 0x3d
 8002a80:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS02A1_I2C_INIT;
 8002a84:	4b2f      	ldr	r3, [pc, #188]	@ (8002b44 <IIS2MDC_0_Probe+0xd0>)
 8002a86:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DEINIT;
 8002a88:	4b2f      	ldr	r3, [pc, #188]	@ (8002b48 <IIS2MDC_0_Probe+0xd4>)
 8002a8a:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_READ_REG;
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <IIS2MDC_0_Probe+0xd8>)
 8002a8e:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WRITE_REG;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	@ (8002b50 <IIS2MDC_0_Probe+0xdc>)
 8002a92:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS02A1_GET_TICK;
 8002a94:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <IIS2MDC_0_Probe+0xe0>)
 8002a96:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS02A1_DELAY;
 8002a98:	4b2f      	ldr	r3, [pc, #188]	@ (8002b58 <IIS2MDC_0_Probe+0xe4>)
 8002a9a:	930f      	str	r3, [sp, #60]	@ 0x3c

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8002a9c:	a908      	add	r1, sp, #32
 8002a9e:	482f      	ldr	r0, [pc, #188]	@ (8002b5c <IIS2MDC_0_Probe+0xe8>)
 8002aa0:	f7ff fdc0 	bl	8002624 <IIS2MDC_RegisterBusIO>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d141      	bne.n	8002b2c <IIS2MDC_0_Probe+0xb8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8002aa8:	f10d 011f 	add.w	r1, sp, #31
 8002aac:	482b      	ldr	r0, [pc, #172]	@ (8002b5c <IIS2MDC_0_Probe+0xe8>)
 8002aae:	f7ff fd31 	bl	8002514 <IIS2MDC_ReadID>
 8002ab2:	4605      	mov	r5, r0
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d13c      	bne.n	8002b32 <IIS2MDC_0_Probe+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != IIS2MDC_ID)
 8002ab8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002abc:	2b40      	cmp	r3, #64	@ 0x40
 8002abe:	d13b      	bne.n	8002b38 <IIS2MDC_0_Probe+0xc4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8002ac0:	4e26      	ldr	r6, [pc, #152]	@ (8002b5c <IIS2MDC_0_Probe+0xe8>)
 8002ac2:	4669      	mov	r1, sp
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f7ff fc69 	bl	800239c <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8002aca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ace:	f89d 1000 	ldrb.w	r1, [sp]
 8002ad2:	ea42 0341 	orr.w	r3, r2, r1, lsl #1
 8002ad6:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8002ada:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8002ade:	4820      	ldr	r0, [pc, #128]	@ (8002b60 <IIS2MDC_0_Probe+0xec>)
 8002ae0:	6083      	str	r3, [r0, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <IIS2MDC_0_Probe+0xf0>)
 8002ae4:	609e      	str	r6, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8002ae6:	4b20      	ldr	r3, [pc, #128]	@ (8002b68 <IIS2MDC_0_Probe+0xf4>)
 8002ae8:	4820      	ldr	r0, [pc, #128]	@ (8002b6c <IIS2MDC_0_Probe+0xf8>)
 8002aea:	6098      	str	r0, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8002aec:	f014 0f01 	tst.w	r4, #1
 8002af0:	d001      	beq.n	8002af6 <IIS2MDC_0_Probe+0x82>
 8002af2:	2a01      	cmp	r2, #1
 8002af4:	d014      	beq.n	8002b20 <IIS2MDC_0_Probe+0xac>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8002af6:	f014 0f02 	tst.w	r4, #2
 8002afa:	d001      	beq.n	8002b00 <IIS2MDC_0_Probe+0x8c>
 8002afc:	2901      	cmp	r1, #1
 8002afe:	d01e      	beq.n	8002b3e <IIS2MDC_0_Probe+0xca>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8002b00:	b95d      	cbnz	r5, 8002b1a <IIS2MDC_0_Probe+0xa6>
 8002b02:	f014 0f04 	tst.w	r4, #4
 8002b06:	d008      	beq.n	8002b1a <IIS2MDC_0_Probe+0xa6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8002b08:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <IIS2MDC_0_Probe+0xfc>)
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b74 <IIS2MDC_0_Probe+0x100>)
 8002b0c:	621a      	str	r2, [r3, #32]
                                                                          void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 8002b0e:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <IIS2MDC_0_Probe+0xf8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4812      	ldr	r0, [pc, #72]	@ (8002b5c <IIS2MDC_0_Probe+0xe8>)
 8002b14:	4798      	blx	r3
 8002b16:	4605      	mov	r5, r0
 8002b18:	b928      	cbnz	r0, 8002b26 <IIS2MDC_0_Probe+0xb2>
        ret = BSP_ERROR_NONE;
      }
    }
  }
  return ret;
}
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	b010      	add	sp, #64	@ 0x40
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b20:	f06f 0504 	mvn.w	r5, #4
 8002b24:	e7ec      	b.n	8002b00 <IIS2MDC_0_Probe+0x8c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b26:	f06f 0504 	mvn.w	r5, #4
 8002b2a:	e7f6      	b.n	8002b1a <IIS2MDC_0_Probe+0xa6>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b2c:	f06f 0506 	mvn.w	r5, #6
 8002b30:	e7f3      	b.n	8002b1a <IIS2MDC_0_Probe+0xa6>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b32:	f06f 0506 	mvn.w	r5, #6
 8002b36:	e7f0      	b.n	8002b1a <IIS2MDC_0_Probe+0xa6>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b38:	f06f 0506 	mvn.w	r5, #6
 8002b3c:	e7ed      	b.n	8002b1a <IIS2MDC_0_Probe+0xa6>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b3e:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8002b42:	e7ea      	b.n	8002b1a <IIS2MDC_0_Probe+0xa6>
 8002b44:	08007779 	.word	0x08007779
 8002b48:	08007691 	.word	0x08007691
 8002b4c:	08007705 	.word	0x08007705
 8002b50:	080076c9 	.word	0x080076c9
 8002b54:	08007741 	.word	0x08007741
 8002b58:	080049f5 	.word	0x080049f5
 8002b5c:	200001e8 	.word	0x200001e8
 8002b60:	20000290 	.word	0x20000290
 8002b64:	200002cc 	.word	0x200002cc
 8002b68:	2000029c 	.word	0x2000029c
 8002b6c:	20000064 	.word	0x20000064
 8002b70:	200002a8 	.word	0x200002a8
 8002b74:	20000040 	.word	0x20000040

08002b78 <IKS02A1_MOTION_SENSOR_Init>:
{
 8002b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b7c:	b088      	sub	sp, #32
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460f      	mov	r7, r1
  switch (Instance)
 8002b82:	2801      	cmp	r0, #1
 8002b84:	d030      	beq.n	8002be8 <IKS02A1_MOTION_SENSOR_Init+0x70>
 8002b86:	2802      	cmp	r0, #2
 8002b88:	d055      	beq.n	8002c36 <IKS02A1_MOTION_SENSOR_Init+0xbe>
 8002b8a:	b110      	cbz	r0, 8002b92 <IKS02A1_MOTION_SENSOR_Init+0x1a>
 8002b8c:	f06f 0001 	mvn.w	r0, #1
 8002b90:	e095      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8002b92:	4608      	mov	r0, r1
 8002b94:	f7ff fe52 	bl	800283c <ISM330DHCX_0_Probe>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	f040 8093 	bne.w	8002cc4 <IKS02A1_MOTION_SENSOR_Init+0x14c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002b9e:	4b52      	ldr	r3, [pc, #328]	@ (8002ce8 <IKS02A1_MOTION_SENSOR_Init+0x170>)
 8002ba0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	a901      	add	r1, sp, #4
 8002ba8:	4a50      	ldr	r2, [pc, #320]	@ (8002cec <IKS02A1_MOTION_SENSOR_Init+0x174>)
 8002baa:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002bae:	4798      	blx	r3
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	f040 808a 	bne.w	8002cca <IKS02A1_MOTION_SENSOR_Init+0x152>
      if (cap.Acc == 1U)
 8002bb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d00b      	beq.n	8002bd6 <IKS02A1_MOTION_SENSOR_Init+0x5e>
  uint32_t component_functions = 0;
 8002bbe:	46a0      	mov	r8, r4
      if (cap.Gyro == 1U)
 8002bc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d009      	beq.n	8002bdc <IKS02A1_MOTION_SENSOR_Init+0x64>
      if (cap.Magneto == 1U)
 8002bc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d008      	beq.n	8002be2 <IKS02A1_MOTION_SENSOR_Init+0x6a>
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8002bd0:	2600      	movs	r6, #0
  uint32_t function = MOTION_GYRO;
 8002bd2:	2501      	movs	r5, #1
 8002bd4:	e057      	b.n	8002c86 <IKS02A1_MOTION_SENSOR_Init+0x10e>
        component_functions |= MOTION_ACCELERO;
 8002bd6:	f04f 0802 	mov.w	r8, #2
 8002bda:	e7f1      	b.n	8002bc0 <IKS02A1_MOTION_SENSOR_Init+0x48>
        component_functions |= MOTION_GYRO;
 8002bdc:	f048 0801 	orr.w	r8, r8, #1
 8002be0:	e7f2      	b.n	8002bc8 <IKS02A1_MOTION_SENSOR_Init+0x50>
        component_functions |= MOTION_MAGNETO;
 8002be2:	f048 0804 	orr.w	r8, r8, #4
 8002be6:	e7f3      	b.n	8002bd0 <IKS02A1_MOTION_SENSOR_Init+0x58>
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 8002be8:	4608      	mov	r0, r1
 8002bea:	f7ff febf 	bl	800296c <IIS2DLPC_0_Probe>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d16e      	bne.n	8002cd0 <IKS02A1_MOTION_SENSOR_Init+0x158>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <IKS02A1_MOTION_SENSOR_Init+0x170>)
 8002bf4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	a901      	add	r1, sp, #4
 8002bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8002cec <IKS02A1_MOTION_SENSOR_Init+0x174>)
 8002bfe:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002c02:	4798      	blx	r3
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d166      	bne.n	8002cd6 <IKS02A1_MOTION_SENSOR_Init+0x15e>
      if (cap.Acc == 1U)
 8002c08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d00c      	beq.n	8002c2a <IKS02A1_MOTION_SENSOR_Init+0xb2>
  uint32_t component_functions = 0;
 8002c10:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8002c14:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d009      	beq.n	8002c30 <IKS02A1_MOTION_SENSOR_Init+0xb8>
      if (cap.Magneto == 1U)
 8002c1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d1d5      	bne.n	8002bd0 <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 8002c24:	f048 0804 	orr.w	r8, r8, #4
 8002c28:	e7d2      	b.n	8002bd0 <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 8002c2a:	f04f 0802 	mov.w	r8, #2
 8002c2e:	e7f1      	b.n	8002c14 <IKS02A1_MOTION_SENSOR_Init+0x9c>
        component_functions |= MOTION_GYRO;
 8002c30:	f048 0801 	orr.w	r8, r8, #1
 8002c34:	e7f2      	b.n	8002c1c <IKS02A1_MOTION_SENSOR_Init+0xa4>
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8002c36:	4608      	mov	r0, r1
 8002c38:	f7ff ff1c 	bl	8002a74 <IIS2MDC_0_Probe>
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d14d      	bne.n	8002cdc <IKS02A1_MOTION_SENSOR_Init+0x164>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002c40:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <IKS02A1_MOTION_SENSOR_Init+0x170>)
 8002c42:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	a901      	add	r1, sp, #4
 8002c4a:	4a28      	ldr	r2, [pc, #160]	@ (8002cec <IKS02A1_MOTION_SENSOR_Init+0x174>)
 8002c4c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002c50:	4798      	blx	r3
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d145      	bne.n	8002ce2 <IKS02A1_MOTION_SENSOR_Init+0x16a>
      if (cap.Acc == 1U)
 8002c56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d00c      	beq.n	8002c78 <IKS02A1_MOTION_SENSOR_Init+0x100>
  uint32_t component_functions = 0;
 8002c5e:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8002c62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d008      	beq.n	8002c7c <IKS02A1_MOTION_SENSOR_Init+0x104>
      if (cap.Magneto == 1U)
 8002c6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d1ae      	bne.n	8002bd0 <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 8002c72:	f048 0804 	orr.w	r8, r8, #4
 8002c76:	e7ab      	b.n	8002bd0 <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 8002c78:	46a0      	mov	r8, r4
 8002c7a:	e7f2      	b.n	8002c62 <IKS02A1_MOTION_SENSOR_Init+0xea>
        component_functions |= MOTION_GYRO;
 8002c7c:	f048 0801 	orr.w	r8, r8, #1
 8002c80:	e7f3      	b.n	8002c6a <IKS02A1_MOTION_SENSOR_Init+0xf2>
    function = function << 1;
 8002c82:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8002c84:	3601      	adds	r6, #1
 8002c86:	2e02      	cmp	r6, #2
 8002c88:	d818      	bhi.n	8002cbc <IKS02A1_MOTION_SENSOR_Init+0x144>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8002c8a:	ea35 0307 	bics.w	r3, r5, r7
 8002c8e:	d1f8      	bne.n	8002c82 <IKS02A1_MOTION_SENSOR_Init+0x10a>
 8002c90:	ea35 0308 	bics.w	r3, r5, r8
 8002c94:	d1f5      	bne.n	8002c82 <IKS02A1_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8002c96:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <IKS02A1_MOTION_SENSOR_Init+0x178>)
 8002c98:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8002c9c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <IKS02A1_MOTION_SENSOR_Init+0x17c>)
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a10      	ldr	r2, [pc, #64]	@ (8002cec <IKS02A1_MOTION_SENSOR_Init+0x174>)
 8002cac:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002cb0:	4798      	blx	r3
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d0e5      	beq.n	8002c82 <IKS02A1_MOTION_SENSOR_Init+0x10a>
        return BSP_ERROR_COMPONENT_FAILURE;
 8002cb6:	f06f 0004 	mvn.w	r0, #4
 8002cba:	e000      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
 8002cbc:	2000      	movs	r0, #0
}
 8002cbe:	b008      	add	sp, #32
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	e7f9      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8002cca:	f06f 0006 	mvn.w	r0, #6
 8002cce:	e7f6      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	e7f3      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8002cd6:	f06f 0006 	mvn.w	r0, #6
 8002cda:	e7f0      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	e7ed      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8002ce2:	f06f 0006 	mvn.w	r0, #6
 8002ce6:	e7ea      	b.n	8002cbe <IKS02A1_MOTION_SENSOR_Init+0x146>
 8002ce8:	2000029c 	.word	0x2000029c
 8002cec:	200002cc 	.word	0x200002cc
 8002cf0:	08008700 	.word	0x08008700
 8002cf4:	200002a8 	.word	0x200002a8

08002cf8 <IKS02A1_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8002cf8:	2802      	cmp	r0, #2
 8002cfa:	d81b      	bhi.n	8002d34 <IKS02A1_MOTION_SENSOR_GetAxes+0x3c>
{
 8002cfc:	b508      	push	{r3, lr}
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8002d02:	4a0f      	ldr	r2, [pc, #60]	@ (8002d40 <IKS02A1_MOTION_SENSOR_GetAxes+0x48>)
 8002d04:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002d08:	ea33 0202 	bics.w	r2, r3, r2
 8002d0c:	d115      	bne.n	8002d3a <IKS02A1_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <IKS02A1_MOTION_SENSOR_GetAxes+0x4c>)
 8002d10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d14:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d48 <IKS02A1_MOTION_SENSOR_GetAxes+0x50>)
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <IKS02A1_MOTION_SENSOR_GetAxes+0x54>)
 8002d24:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002d28:	4798      	blx	r3
 8002d2a:	b900      	cbnz	r0, 8002d2e <IKS02A1_MOTION_SENSOR_GetAxes+0x36>
}
 8002d2c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d2e:	f06f 0004 	mvn.w	r0, #4
 8002d32:	e7fb      	b.n	8002d2c <IKS02A1_MOTION_SENSOR_GetAxes+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8002d34:	f06f 0001 	mvn.w	r0, #1
}
 8002d38:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8002d3a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002d3e:	e7f5      	b.n	8002d2c <IKS02A1_MOTION_SENSOR_GetAxes+0x34>
 8002d40:	20000290 	.word	0x20000290
 8002d44:	08008700 	.word	0x08008700
 8002d48:	200002a8 	.word	0x200002a8
 8002d4c:	200002cc 	.word	0x200002cc

08002d50 <IKS02A1_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8002d50:	2802      	cmp	r0, #2
 8002d52:	d819      	bhi.n	8002d88 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x38>
{
 8002d54:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8002d56:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x44>)
 8002d58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d5c:	ea31 0303 	bics.w	r3, r1, r3
 8002d60:	d115      	bne.n	8002d8e <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x48>)
 8002d64:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002d68:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d9c <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x50>)
 8002d78:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002d7c:	4798      	blx	r3
 8002d7e:	b900      	cbnz	r0, 8002d82 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x32>
}
 8002d80:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d82:	f06f 0004 	mvn.w	r0, #4
 8002d86:	e7fb      	b.n	8002d80 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8002d88:	f06f 0001 	mvn.w	r0, #1
}
 8002d8c:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8002d8e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002d92:	e7f5      	b.n	8002d80 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x30>
 8002d94:	20000290 	.word	0x20000290
 8002d98:	08008700 	.word	0x08008700
 8002d9c:	200002a8 	.word	0x200002a8
 8002da0:	200002cc 	.word	0x200002cc

08002da4 <IKS02A1_MOTION_SENSOR_SetFullScale>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8002da4:	2802      	cmp	r0, #2
 8002da6:	d81b      	bhi.n	8002de0 <IKS02A1_MOTION_SENSOR_SetFullScale+0x3c>
{
 8002da8:	b508      	push	{r3, lr}
 8002daa:	460b      	mov	r3, r1
 8002dac:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8002dae:	4a0f      	ldr	r2, [pc, #60]	@ (8002dec <IKS02A1_MOTION_SENSOR_SetFullScale+0x48>)
 8002db0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002db4:	ea33 0202 	bics.w	r2, r3, r2
 8002db8:	d115      	bne.n	8002de6 <IKS02A1_MOTION_SENSOR_SetFullScale+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8002dba:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <IKS02A1_MOTION_SENSOR_SetFullScale+0x4c>)
 8002dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dc0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002df4 <IKS02A1_MOTION_SENSOR_SetFullScale+0x50>)
 8002dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <IKS02A1_MOTION_SENSOR_SetFullScale+0x54>)
 8002dd0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002dd4:	4798      	blx	r3
 8002dd6:	b900      	cbnz	r0, 8002dda <IKS02A1_MOTION_SENSOR_SetFullScale+0x36>
}
 8002dd8:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002dda:	f06f 0004 	mvn.w	r0, #4
 8002dde:	e7fb      	b.n	8002dd8 <IKS02A1_MOTION_SENSOR_SetFullScale+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8002de0:	f06f 0001 	mvn.w	r0, #1
}
 8002de4:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8002de6:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002dea:	e7f5      	b.n	8002dd8 <IKS02A1_MOTION_SENSOR_SetFullScale+0x34>
 8002dec:	20000290 	.word	0x20000290
 8002df0:	08008700 	.word	0x08008700
 8002df4:	200002a8 	.word	0x200002a8
 8002df8:	200002cc 	.word	0x200002cc

08002dfc <ISM330DHCX_GetCapabilities>:
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8002e00:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 8002e02:	2000      	movs	r0, #0
 8002e04:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002e06:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 4000;
 8002e08:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002e0c:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8002e0e:	2310      	movs	r3, #16
 8002e10:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8002e12:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8002e14:	4b02      	ldr	r3, [pc, #8]	@ (8002e20 <ISM330DHCX_GetCapabilities+0x24>)
 8002e16:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002e18:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	618b      	str	r3, [r1, #24]
  return ISM330DHCX_OK;
}
 8002e1e:	4770      	bx	lr
 8002e20:	45d05800 	.word	0x45d05800

08002e24 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002e24:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8002e28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d939      	bls.n	8002ea6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x82>
 8002e32:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8002e36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3e:	d937      	bls.n	8002eb0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x8c>
 8002e40:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8002ed0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xac>
 8002e44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	d932      	bls.n	8002eb4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002e4e:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8002ed4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002e52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	d92d      	bls.n	8002eb8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x94>
 8002e5c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002ed8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb4>
 8002e60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	d928      	bls.n	8002ebc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x98>
 8002e6a:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8002edc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8002e6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d923      	bls.n	8002ec0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x9c>
 8002e78:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002ee0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002e7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d91e      	bls.n	8002ec4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa0>
 8002e86:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002ee4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8002e8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e92:	d919      	bls.n	8002ec8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8002e94:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8002ee8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8002e98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d814      	bhi.n	8002ecc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002ea2:	2309      	movs	r3, #9
 8002ea4:	e000      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ea6:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8002ea8:	f880 3033 	strb.w	r3, [r0, #51]	@ 0x33
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
}
 8002eac:	2000      	movs	r0, #0
 8002eae:	4770      	bx	lr
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e7f9      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e7f7      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e7f5      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ebc:	2305      	movs	r3, #5
 8002ebe:	e7f3      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ec0:	2306      	movs	r3, #6
 8002ec2:	e7f1      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	e7ef      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ec8:	2308      	movs	r3, #8
 8002eca:	e7ed      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ecc:	230a      	movs	r3, #10
 8002ece:	e7eb      	b.n	8002ea8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ed0:	42500000 	.word	0x42500000
 8002ed4:	42d00000 	.word	0x42d00000
 8002ed8:	43500000 	.word	0x43500000
 8002edc:	43d00000 	.word	0x43d00000
 8002ee0:	44504000 	.word	0x44504000
 8002ee4:	44d04000 	.word	0x44d04000
 8002ee8:	45504000 	.word	0x45504000

08002eec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8002eec:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8002ef0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d939      	bls.n	8002f6e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x82>
 8002efa:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8002efe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d937      	bls.n	8002f78 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x8c>
 8002f08:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8002f98 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8002f0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	d932      	bls.n	8002f7c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002f16:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8002f9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8002f1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f22:	d92d      	bls.n	8002f80 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x94>
 8002f24:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002fa0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 8002f28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	d928      	bls.n	8002f84 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x98>
 8002f32:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8002fa4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 8002f36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3e:	d923      	bls.n	8002f88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8002f40:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002fa8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8002f44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d91e      	bls.n	8002f8c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 8002f4e:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002fac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 8002f52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	d919      	bls.n	8002f90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8002f5c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8002fb0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 8002f60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	d814      	bhi.n	8002f94 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 8002f6a:	2309      	movs	r3, #9
 8002f6c:	e000      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f6e:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8002f70:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
}
 8002f74:	2000      	movs	r0, #0
 8002f76:	4770      	bx	lr
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e7f9      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e7f7      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f80:	2304      	movs	r3, #4
 8002f82:	e7f5      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f84:	2305      	movs	r3, #5
 8002f86:	e7f3      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f88:	2306      	movs	r3, #6
 8002f8a:	e7f1      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	e7ef      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f90:	2308      	movs	r3, #8
 8002f92:	e7ed      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f94:	230a      	movs	r3, #10
 8002f96:	e7eb      	b.n	8002f70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002f98:	42500000 	.word	0x42500000
 8002f9c:	42d00000 	.word	0x42d00000
 8002fa0:	43500000 	.word	0x43500000
 8002fa4:	43d00000 	.word	0x43d00000
 8002fa8:	44504000 	.word	0x44504000
 8002fac:	44d04000 	.word	0x44d04000
 8002fb0:	45504000 	.word	0x45504000

08002fb4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fb4:	b510      	push	{r4, lr}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fb6:	6944      	ldr	r4, [r0, #20]
 8002fb8:	7b00      	ldrb	r0, [r0, #12]
 8002fba:	47a0      	blx	r4
}
 8002fbc:	bd10      	pop	{r4, pc}

08002fbe <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fbe:	b510      	push	{r4, lr}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fc0:	6904      	ldr	r4, [r0, #16]
 8002fc2:	7b00      	ldrb	r0, [r0, #12]
 8002fc4:	47a0      	blx	r4
}
 8002fc6:	bd10      	pop	{r4, pc}

08002fc8 <ISM330DHCX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002fc8:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d00b      	beq.n	8002fe8 <ISM330DHCX_ACC_Enable+0x20>
{
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002fd4:	f890 1033 	ldrb.w	r1, [r0, #51]	@ 0x33
 8002fd8:	3020      	adds	r0, #32
 8002fda:	f000 feec 	bl	8003db6 <ism330dhcx_xl_data_rate_set>
 8002fde:	b928      	cbnz	r0, 8002fec <ISM330DHCX_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 8002fe6:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 8002fe8:	2000      	movs	r0, #0
}
 8002fea:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	e7f9      	b.n	8002fe6 <ISM330DHCX_ACC_Enable+0x1e>
	...

08002ff4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
{
 8002ff4:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002ff6:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8002ffa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d939      	bls.n	8003078 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x84>
 8003004:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003008:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d938      	bls.n	8003084 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003012:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80030ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003016:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d933      	bls.n	8003088 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x94>
 8003020:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80030b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003024:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d92e      	bls.n	800308c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x98>
 800302e:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80030b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003032:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	d929      	bls.n	8003090 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x9c>
 800303c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80030b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xc4>
 8003040:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003048:	d924      	bls.n	8003094 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa0>
 800304a:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80030bc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xc8>
 800304e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d91f      	bls.n	8003098 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa4>
 8003058:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80030c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xcc>
 800305c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	d91a      	bls.n	800309c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa8>
 8003066:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80030c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd0>
 800306a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	d815      	bhi.n	80030a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xac>
 8003074:	2109      	movs	r1, #9
 8003076:	e000      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003078:	2101      	movs	r1, #1
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800307a:	3020      	adds	r0, #32
 800307c:	f000 fe9b 	bl	8003db6 <ism330dhcx_xl_data_rate_set>
 8003080:	b980      	cbnz	r0, 80030a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb0>
}
 8003082:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003084:	2102      	movs	r1, #2
 8003086:	e7f8      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003088:	2103      	movs	r1, #3
 800308a:	e7f6      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 800308c:	2104      	movs	r1, #4
 800308e:	e7f4      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003090:	2105      	movs	r1, #5
 8003092:	e7f2      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003094:	2106      	movs	r1, #6
 8003096:	e7f0      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003098:	2107      	movs	r1, #7
 800309a:	e7ee      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 800309c:	2108      	movs	r1, #8
 800309e:	e7ec      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 80030a0:	210a      	movs	r1, #10
 80030a2:	e7ea      	b.n	800307a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
    return ISM330DHCX_ERROR;
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	e7eb      	b.n	8003082 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x8e>
 80030aa:	bf00      	nop
 80030ac:	42500000 	.word	0x42500000
 80030b0:	42d00000 	.word	0x42d00000
 80030b4:	43500000 	.word	0x43500000
 80030b8:	43d00000 	.word	0x43d00000
 80030bc:	44504000 	.word	0x44504000
 80030c0:	44d04000 	.word	0x44d04000
 80030c4:	45504000 	.word	0x45504000

080030c8 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 80030c8:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 80030ca:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d002      	beq.n	80030d8 <ISM330DHCX_ACC_SetOutputDataRate+0x10>
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80030d2:	f7ff fea7 	bl	8002e24 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
}
 80030d6:	bd08      	pop	{r3, pc}
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80030d8:	f7ff ff8c 	bl	8002ff4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80030dc:	e7fb      	b.n	80030d6 <ISM330DHCX_ACC_SetOutputDataRate+0xe>

080030de <ISM330DHCX_ACC_SetFullScale>:
{
 80030de:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80030e0:	2902      	cmp	r1, #2
 80030e2:	dd05      	ble.n	80030f0 <ISM330DHCX_ACC_SetFullScale+0x12>
 80030e4:	2904      	cmp	r1, #4
 80030e6:	dd09      	ble.n	80030fc <ISM330DHCX_ACC_SetFullScale+0x1e>
 80030e8:	2908      	cmp	r1, #8
 80030ea:	dc09      	bgt.n	8003100 <ISM330DHCX_ACC_SetFullScale+0x22>
 80030ec:	2103      	movs	r1, #3
 80030ee:	e000      	b.n	80030f2 <ISM330DHCX_ACC_SetFullScale+0x14>
 80030f0:	2100      	movs	r1, #0
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80030f2:	3020      	adds	r0, #32
 80030f4:	f000 fbea 	bl	80038cc <ism330dhcx_xl_full_scale_set>
 80030f8:	b920      	cbnz	r0, 8003104 <ISM330DHCX_ACC_SetFullScale+0x26>
}
 80030fa:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80030fc:	2102      	movs	r1, #2
 80030fe:	e7f8      	b.n	80030f2 <ISM330DHCX_ACC_SetFullScale+0x14>
 8003100:	2101      	movs	r1, #1
 8003102:	e7f6      	b.n	80030f2 <ISM330DHCX_ACC_SetFullScale+0x14>
    return ISM330DHCX_ERROR;
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	e7f7      	b.n	80030fa <ISM330DHCX_ACC_SetFullScale+0x1c>

0800310a <ISM330DHCX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 800310a:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 800310e:	2b01      	cmp	r3, #1
 8003110:	d00b      	beq.n	800312a <ISM330DHCX_GYRO_Enable+0x20>
{
 8003112:	b510      	push	{r4, lr}
 8003114:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003116:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 800311a:	3020      	adds	r0, #32
 800311c:	f000 ff32 	bl	8003f84 <ism330dhcx_gy_data_rate_set>
 8003120:	b928      	cbnz	r0, 800312e <ISM330DHCX_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
}
 8003128:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 800312a:	2000      	movs	r0, #0
}
 800312c:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 800312e:	f04f 30ff 	mov.w	r0, #4294967295
 8003132:	e7f9      	b.n	8003128 <ISM330DHCX_GYRO_Enable+0x1e>

08003134 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
{
 8003134:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003136:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 800313a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	d939      	bls.n	80031b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x84>
 8003144:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003148:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	d938      	bls.n	80031c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003152:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80031ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb8>
 8003156:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	d933      	bls.n	80031c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8003160:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80031f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003164:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316c:	d92e      	bls.n	80031cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x98>
 800316e:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80031f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8003172:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317a:	d929      	bls.n	80031d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 800317c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80031f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 8003180:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	d924      	bls.n	80031d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 800318a:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80031fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 800318e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	d91f      	bls.n	80031d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8003198:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003200 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 800319c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a4:	d91a      	bls.n	80031dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 80031a6:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003204 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 80031aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b2:	d815      	bhi.n	80031e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xac>
 80031b4:	2109      	movs	r1, #9
 80031b6:	e000      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031b8:	2101      	movs	r1, #1
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80031ba:	3020      	adds	r0, #32
 80031bc:	f000 fee2 	bl	8003f84 <ism330dhcx_gy_data_rate_set>
 80031c0:	b980      	cbnz	r0, 80031e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb0>
}
 80031c2:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80031c4:	2102      	movs	r1, #2
 80031c6:	e7f8      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031c8:	2103      	movs	r1, #3
 80031ca:	e7f6      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031cc:	2104      	movs	r1, #4
 80031ce:	e7f4      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031d0:	2105      	movs	r1, #5
 80031d2:	e7f2      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031d4:	2106      	movs	r1, #6
 80031d6:	e7f0      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031d8:	2107      	movs	r1, #7
 80031da:	e7ee      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031dc:	2108      	movs	r1, #8
 80031de:	e7ec      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80031e0:	210a      	movs	r1, #10
 80031e2:	e7ea      	b.n	80031ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return ISM330DHCX_ERROR;
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	e7eb      	b.n	80031c2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 80031ea:	bf00      	nop
 80031ec:	42500000 	.word	0x42500000
 80031f0:	42d00000 	.word	0x42d00000
 80031f4:	43500000 	.word	0x43500000
 80031f8:	43d00000 	.word	0x43d00000
 80031fc:	44504000 	.word	0x44504000
 8003200:	44d04000 	.word	0x44d04000
 8003204:	45504000 	.word	0x45504000

08003208 <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 8003208:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 800320a:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 800320e:	2b01      	cmp	r3, #1
 8003210:	d002      	beq.n	8003218 <ISM330DHCX_GYRO_SetOutputDataRate+0x10>
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003212:	f7ff fe6b 	bl	8002eec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
}
 8003216:	bd08      	pop	{r3, pc}
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003218:	f7ff ff8c 	bl	8003134 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 800321c:	e7fb      	b.n	8003216 <ISM330DHCX_GYRO_SetOutputDataRate+0xe>

0800321e <ISM330DHCX_GYRO_SetFullScale>:
{
 800321e:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003220:	297d      	cmp	r1, #125	@ 0x7d
 8003222:	dd0c      	ble.n	800323e <ISM330DHCX_GYRO_SetFullScale+0x20>
 8003224:	29fa      	cmp	r1, #250	@ 0xfa
 8003226:	dd10      	ble.n	800324a <ISM330DHCX_GYRO_SetFullScale+0x2c>
 8003228:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 800322c:	dd0f      	ble.n	800324e <ISM330DHCX_GYRO_SetFullScale+0x30>
 800322e:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8003232:	dd0e      	ble.n	8003252 <ISM330DHCX_GYRO_SetFullScale+0x34>
 8003234:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 8003238:	dc0d      	bgt.n	8003256 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800323a:	210c      	movs	r1, #12
 800323c:	e000      	b.n	8003240 <ISM330DHCX_GYRO_SetFullScale+0x22>
 800323e:	2102      	movs	r1, #2
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003240:	3020      	adds	r0, #32
 8003242:	f000 fbbb 	bl	80039bc <ism330dhcx_gy_full_scale_set>
 8003246:	b940      	cbnz	r0, 800325a <ISM330DHCX_GYRO_SetFullScale+0x3c>
}
 8003248:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800324a:	2100      	movs	r1, #0
 800324c:	e7f8      	b.n	8003240 <ISM330DHCX_GYRO_SetFullScale+0x22>
 800324e:	2104      	movs	r1, #4
 8003250:	e7f6      	b.n	8003240 <ISM330DHCX_GYRO_SetFullScale+0x22>
 8003252:	2108      	movs	r1, #8
 8003254:	e7f4      	b.n	8003240 <ISM330DHCX_GYRO_SetFullScale+0x22>
 8003256:	2101      	movs	r1, #1
 8003258:	e7f2      	b.n	8003240 <ISM330DHCX_GYRO_SetFullScale+0x22>
    return ISM330DHCX_ERROR;
 800325a:	f04f 30ff 	mov.w	r0, #4294967295
 800325e:	e7f3      	b.n	8003248 <ISM330DHCX_GYRO_SetFullScale+0x2a>

08003260 <ISM330DHCX_ReadID>:
{
 8003260:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003262:	3020      	adds	r0, #32
 8003264:	f000 fcb9 	bl	8003bda <ism330dhcx_device_id_get>
 8003268:	b900      	cbnz	r0, 800326c <ISM330DHCX_ReadID+0xc>
}
 800326a:	bd08      	pop	{r3, pc}
    return ISM330DHCX_ERROR;
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	e7fb      	b.n	800326a <ISM330DHCX_ReadID+0xa>

08003272 <ISM330DHCX_ACC_Disable>:
{
 8003272:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003274:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8003278:	b90b      	cbnz	r3, 800327e <ISM330DHCX_ACC_Disable+0xc>
    return ISM330DHCX_OK;
 800327a:	2000      	movs	r0, #0
}
 800327c:	bd38      	pop	{r3, r4, r5, pc}
 800327e:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003280:	f100 0520 	add.w	r5, r0, #32
 8003284:	f100 0133 	add.w	r1, r0, #51	@ 0x33
 8003288:	4628      	mov	r0, r5
 800328a:	f000 fb5a 	bl	8003942 <ism330dhcx_xl_data_rate_get>
 800328e:	b938      	cbnz	r0, 80032a0 <ISM330DHCX_ACC_Disable+0x2e>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003290:	2100      	movs	r1, #0
 8003292:	4628      	mov	r0, r5
 8003294:	f000 fd8f 	bl	8003db6 <ism330dhcx_xl_data_rate_set>
 8003298:	b928      	cbnz	r0, 80032a6 <ISM330DHCX_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 800329a:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
  return ISM330DHCX_OK;
 800329e:	e7ed      	b.n	800327c <ISM330DHCX_ACC_Disable+0xa>
    return ISM330DHCX_ERROR;
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	e7ea      	b.n	800327c <ISM330DHCX_ACC_Disable+0xa>
    return ISM330DHCX_ERROR;
 80032a6:	f04f 30ff 	mov.w	r0, #4294967295
 80032aa:	e7e7      	b.n	800327c <ISM330DHCX_ACC_Disable+0xa>

080032ac <ISM330DHCX_ACC_GetOutputDataRate>:
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80032b2:	f10d 0107 	add.w	r1, sp, #7
 80032b6:	3020      	adds	r0, #32
 80032b8:	f000 fb43 	bl	8003942 <ism330dhcx_xl_data_rate_get>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d130      	bne.n	8003322 <ISM330DHCX_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 80032c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032c4:	2b0b      	cmp	r3, #11
 80032c6:	d82f      	bhi.n	8003328 <ISM330DHCX_ACC_GetOutputDataRate+0x7c>
 80032c8:	e8df f003 	tbb	[pc, r3]
 80032cc:	100d0a06 	.word	0x100d0a06
 80032d0:	1c191613 	.word	0x1c191613
 80032d4:	2825221f 	.word	0x2825221f
      *Odr = 0.0f;
 80032d8:	2300      	movs	r3, #0
 80032da:	6023      	str	r3, [r4, #0]
}
 80032dc:	b002      	add	sp, #8
 80032de:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 80032e0:	4b13      	ldr	r3, [pc, #76]	@ (8003330 <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 80032e2:	6023      	str	r3, [r4, #0]
      break;
 80032e4:	e7fa      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <ISM330DHCX_ACC_GetOutputDataRate+0x88>)
 80032e8:	6023      	str	r3, [r4, #0]
      break;
 80032ea:	e7f7      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <ISM330DHCX_ACC_GetOutputDataRate+0x8c>)
 80032ee:	6023      	str	r3, [r4, #0]
      break;
 80032f0:	e7f4      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <ISM330DHCX_ACC_GetOutputDataRate+0x90>)
 80032f4:	6023      	str	r3, [r4, #0]
      break;
 80032f6:	e7f1      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <ISM330DHCX_ACC_GetOutputDataRate+0x94>)
 80032fa:	6023      	str	r3, [r4, #0]
      break;
 80032fc:	e7ee      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 416.0f;
 80032fe:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <ISM330DHCX_ACC_GetOutputDataRate+0x98>)
 8003300:	6023      	str	r3, [r4, #0]
      break;
 8003302:	e7eb      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8003304:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <ISM330DHCX_ACC_GetOutputDataRate+0x9c>)
 8003306:	6023      	str	r3, [r4, #0]
      break;
 8003308:	e7e8      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 1666.0f;
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <ISM330DHCX_ACC_GetOutputDataRate+0xa0>)
 800330c:	6023      	str	r3, [r4, #0]
      break;
 800330e:	e7e5      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 3332.0f;
 8003310:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <ISM330DHCX_ACC_GetOutputDataRate+0xa4>)
 8003312:	6023      	str	r3, [r4, #0]
      break;
 8003314:	e7e2      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8003316:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <ISM330DHCX_ACC_GetOutputDataRate+0xa8>)
 8003318:	6023      	str	r3, [r4, #0]
      break;
 800331a:	e7df      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 1.6f;
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <ISM330DHCX_ACC_GetOutputDataRate+0xac>)
 800331e:	6023      	str	r3, [r4, #0]
      break;
 8003320:	e7dc      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
    return ISM330DHCX_ERROR;
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	e7d9      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	e7d6      	b.n	80032dc <ISM330DHCX_ACC_GetOutputDataRate+0x30>
 800332e:	bf00      	nop
 8003330:	41480000 	.word	0x41480000
 8003334:	41d00000 	.word	0x41d00000
 8003338:	42500000 	.word	0x42500000
 800333c:	42d00000 	.word	0x42d00000
 8003340:	43500000 	.word	0x43500000
 8003344:	43d00000 	.word	0x43d00000
 8003348:	44504000 	.word	0x44504000
 800334c:	44d04000 	.word	0x44d04000
 8003350:	45504000 	.word	0x45504000
 8003354:	45d05800 	.word	0x45d05800
 8003358:	3fcccccd 	.word	0x3fcccccd

0800335c <ISM330DHCX_ACC_GetSensitivity>:
{
 800335c:	b510      	push	{r4, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003362:	f10d 0107 	add.w	r1, sp, #7
 8003366:	3020      	adds	r0, #32
 8003368:	f000 fac9 	bl	80038fe <ism330dhcx_xl_full_scale_get>
 800336c:	b9a0      	cbnz	r0, 8003398 <ISM330DHCX_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 800336e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d813      	bhi.n	800339e <ISM330DHCX_ACC_GetSensitivity+0x42>
 8003376:	e8df f003 	tbb	[pc, r3]
 800337a:	0c02      	.short	0x0c02
 800337c:	0906      	.short	0x0906
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <ISM330DHCX_ACC_GetSensitivity+0x48>)
 8003380:	6023      	str	r3, [r4, #0]
}
 8003382:	b002      	add	sp, #8
 8003384:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003386:	4b08      	ldr	r3, [pc, #32]	@ (80033a8 <ISM330DHCX_ACC_GetSensitivity+0x4c>)
 8003388:	6023      	str	r3, [r4, #0]
      break;
 800338a:	e7fa      	b.n	8003382 <ISM330DHCX_ACC_GetSensitivity+0x26>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 800338c:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <ISM330DHCX_ACC_GetSensitivity+0x50>)
 800338e:	6023      	str	r3, [r4, #0]
      break;
 8003390:	e7f7      	b.n	8003382 <ISM330DHCX_ACC_GetSensitivity+0x26>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <ISM330DHCX_ACC_GetSensitivity+0x54>)
 8003394:	6023      	str	r3, [r4, #0]
      break;
 8003396:	e7f4      	b.n	8003382 <ISM330DHCX_ACC_GetSensitivity+0x26>
    return ISM330DHCX_ERROR;
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	e7f1      	b.n	8003382 <ISM330DHCX_ACC_GetSensitivity+0x26>
  switch (full_scale)
 800339e:	f04f 30ff 	mov.w	r0, #4294967295
 80033a2:	e7ee      	b.n	8003382 <ISM330DHCX_ACC_GetSensitivity+0x26>
 80033a4:	3d79db23 	.word	0x3d79db23
 80033a8:	3df9db23 	.word	0x3df9db23
 80033ac:	3e79db23 	.word	0x3e79db23
 80033b0:	3ef9db23 	.word	0x3ef9db23

080033b4 <ISM330DHCX_ACC_GetFullScale>:
{
 80033b4:	b510      	push	{r4, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80033ba:	f10d 0107 	add.w	r1, sp, #7
 80033be:	3020      	adds	r0, #32
 80033c0:	f000 fa9d 	bl	80038fe <ism330dhcx_xl_full_scale_get>
 80033c4:	b9a0      	cbnz	r0, 80033f0 <ISM330DHCX_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 80033c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d813      	bhi.n	80033f6 <ISM330DHCX_ACC_GetFullScale+0x42>
 80033ce:	e8df f003 	tbb	[pc, r3]
 80033d2:	0c02      	.short	0x0c02
 80033d4:	0906      	.short	0x0906
      *FullScale =  2;
 80033d6:	2302      	movs	r3, #2
 80033d8:	6023      	str	r3, [r4, #0]
}
 80033da:	b002      	add	sp, #8
 80033dc:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 80033de:	2304      	movs	r3, #4
 80033e0:	6023      	str	r3, [r4, #0]
      break;
 80033e2:	e7fa      	b.n	80033da <ISM330DHCX_ACC_GetFullScale+0x26>
      *FullScale =  8;
 80033e4:	2308      	movs	r3, #8
 80033e6:	6023      	str	r3, [r4, #0]
      break;
 80033e8:	e7f7      	b.n	80033da <ISM330DHCX_ACC_GetFullScale+0x26>
      *FullScale = 16;
 80033ea:	2310      	movs	r3, #16
 80033ec:	6023      	str	r3, [r4, #0]
      break;
 80033ee:	e7f4      	b.n	80033da <ISM330DHCX_ACC_GetFullScale+0x26>
    return ISM330DHCX_ERROR;
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e7f1      	b.n	80033da <ISM330DHCX_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295
 80033fa:	e7ee      	b.n	80033da <ISM330DHCX_ACC_GetFullScale+0x26>

080033fc <ISM330DHCX_ACC_GetAxesRaw>:
{
 80033fc:	b510      	push	{r4, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003402:	4669      	mov	r1, sp
 8003404:	3020      	adds	r0, #32
 8003406:	f000 fb94 	bl	8003b32 <ism330dhcx_acceleration_raw_get>
 800340a:	b950      	cbnz	r0, 8003422 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 800340c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003410:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003412:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003416:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003418:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800341c:	80a3      	strh	r3, [r4, #4]
}
 800341e:	b002      	add	sp, #8
 8003420:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8003422:	f04f 30ff 	mov.w	r0, #4294967295
 8003426:	e7fa      	b.n	800341e <ISM330DHCX_ACC_GetAxesRaw+0x22>

08003428 <ISM330DHCX_ACC_GetAxes>:
{
 8003428:	b530      	push	{r4, r5, lr}
 800342a:	b085      	sub	sp, #20
 800342c:	4605      	mov	r5, r0
 800342e:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8003430:	2300      	movs	r3, #0
 8003432:	9301      	str	r3, [sp, #4]
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003434:	a902      	add	r1, sp, #8
 8003436:	3020      	adds	r0, #32
 8003438:	f000 fb7b 	bl	8003b32 <ism330dhcx_acceleration_raw_get>
 800343c:	bb60      	cbnz	r0, 8003498 <ISM330DHCX_ACC_GetAxes+0x70>
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800343e:	a901      	add	r1, sp, #4
 8003440:	4628      	mov	r0, r5
 8003442:	f7ff ff8b 	bl	800335c <ISM330DHCX_ACC_GetSensitivity>
 8003446:	bb50      	cbnz	r0, 800349e <ISM330DHCX_ACC_GetAxes+0x76>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003448:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800344c:	ee07 3a10 	vmov	s14, r3
 8003450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003454:	eddd 7a01 	vldr	s15, [sp, #4]
 8003458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003460:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003464:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003468:	ee07 3a10 	vmov	s14, r3
 800346c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003474:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003478:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800347c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003480:	ee07 3a10 	vmov	s14, r3
 8003484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003490:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003494:	b005      	add	sp, #20
 8003496:	bd30      	pop	{r4, r5, pc}
    return ISM330DHCX_ERROR;
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	e7fa      	b.n	8003494 <ISM330DHCX_ACC_GetAxes+0x6c>
    return ISM330DHCX_ERROR;
 800349e:	f04f 30ff 	mov.w	r0, #4294967295
 80034a2:	e7f7      	b.n	8003494 <ISM330DHCX_ACC_GetAxes+0x6c>

080034a4 <ISM330DHCX_GYRO_Disable>:
{
 80034a4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 80034a6:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 80034aa:	b90b      	cbnz	r3, 80034b0 <ISM330DHCX_GYRO_Disable+0xc>
    return ISM330DHCX_OK;
 80034ac:	2000      	movs	r0, #0
}
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80034b2:	f100 0520 	add.w	r5, r0, #32
 80034b6:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 fac4 	bl	8003a48 <ism330dhcx_gy_data_rate_get>
 80034c0:	b938      	cbnz	r0, 80034d2 <ISM330DHCX_GYRO_Disable+0x2e>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80034c2:	2100      	movs	r1, #0
 80034c4:	4628      	mov	r0, r5
 80034c6:	f000 fd5d 	bl	8003f84 <ism330dhcx_gy_data_rate_set>
 80034ca:	b928      	cbnz	r0, 80034d8 <ISM330DHCX_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 80034cc:	f884 0032 	strb.w	r0, [r4, #50]	@ 0x32
  return ISM330DHCX_OK;
 80034d0:	e7ed      	b.n	80034ae <ISM330DHCX_GYRO_Disable+0xa>
    return ISM330DHCX_ERROR;
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	e7ea      	b.n	80034ae <ISM330DHCX_GYRO_Disable+0xa>
    return ISM330DHCX_ERROR;
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	e7e7      	b.n	80034ae <ISM330DHCX_GYRO_Disable+0xa>

080034de <ISM330DHCX_DeInit>:
{
 80034de:	b510      	push	{r4, lr}
 80034e0:	4604      	mov	r4, r0
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 80034e2:	f7ff fec6 	bl	8003272 <ISM330DHCX_ACC_Disable>
 80034e6:	b950      	cbnz	r0, 80034fe <ISM330DHCX_DeInit+0x20>
  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff ffdb 	bl	80034a4 <ISM330DHCX_GYRO_Disable>
 80034ee:	b948      	cbnz	r0, 8003504 <ISM330DHCX_DeInit+0x26>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80034f0:	f884 0033 	strb.w	r0, [r4, #51]	@ 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80034f4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  pObj->is_initialized = 0;
 80034f8:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
}
 80034fc:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 80034fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003502:	e7fb      	b.n	80034fc <ISM330DHCX_DeInit+0x1e>
    return ISM330DHCX_ERROR;
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	e7f8      	b.n	80034fc <ISM330DHCX_DeInit+0x1e>
	...

0800350c <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 800350c:	b510      	push	{r4, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003512:	f10d 0107 	add.w	r1, sp, #7
 8003516:	3020      	adds	r0, #32
 8003518:	f000 fa96 	bl	8003a48 <ism330dhcx_gy_data_rate_get>
 800351c:	2800      	cmp	r0, #0
 800351e:	d12d      	bne.n	800357c <ISM330DHCX_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8003520:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003524:	2b0a      	cmp	r3, #10
 8003526:	d82c      	bhi.n	8003582 <ISM330DHCX_GYRO_GetOutputDataRate+0x76>
 8003528:	e8df f003 	tbb	[pc, r3]
 800352c:	100d0a06 	.word	0x100d0a06
 8003530:	1c191613 	.word	0x1c191613
 8003534:	221f      	.short	0x221f
 8003536:	25          	.byte	0x25
 8003537:	00          	.byte	0x00
      *Odr = 0.0f;
 8003538:	2300      	movs	r3, #0
 800353a:	6023      	str	r3, [r4, #0]
}
 800353c:	b002      	add	sp, #8
 800353e:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8003540:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 8003542:	6023      	str	r3, [r4, #0]
      break;
 8003544:	e7fa      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 8003548:	6023      	str	r3, [r4, #0]
      break;
 800354a:	e7f7      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 800354c:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 800354e:	6023      	str	r3, [r4, #0]
      break;
 8003550:	e7f4      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <ISM330DHCX_GYRO_GetOutputDataRate+0x88>)
 8003554:	6023      	str	r3, [r4, #0]
      break;
 8003556:	e7f1      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8003558:	4b0f      	ldr	r3, [pc, #60]	@ (8003598 <ISM330DHCX_GYRO_GetOutputDataRate+0x8c>)
 800355a:	6023      	str	r3, [r4, #0]
      break;
 800355c:	e7ee      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 416.0f;
 800355e:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <ISM330DHCX_GYRO_GetOutputDataRate+0x90>)
 8003560:	6023      	str	r3, [r4, #0]
      break;
 8003562:	e7eb      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8003564:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <ISM330DHCX_GYRO_GetOutputDataRate+0x94>)
 8003566:	6023      	str	r3, [r4, #0]
      break;
 8003568:	e7e8      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  1666.0f;
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <ISM330DHCX_GYRO_GetOutputDataRate+0x98>)
 800356c:	6023      	str	r3, [r4, #0]
      break;
 800356e:	e7e5      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  3332.0f;
 8003570:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <ISM330DHCX_GYRO_GetOutputDataRate+0x9c>)
 8003572:	6023      	str	r3, [r4, #0]
      break;
 8003574:	e7e2      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  6667.0f;
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <ISM330DHCX_GYRO_GetOutputDataRate+0xa0>)
 8003578:	6023      	str	r3, [r4, #0]
      break;
 800357a:	e7df      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
    return ISM330DHCX_ERROR;
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	e7dc      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	e7d9      	b.n	800353c <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
 8003588:	41480000 	.word	0x41480000
 800358c:	41d00000 	.word	0x41d00000
 8003590:	42500000 	.word	0x42500000
 8003594:	42d00000 	.word	0x42d00000
 8003598:	43500000 	.word	0x43500000
 800359c:	43d00000 	.word	0x43d00000
 80035a0:	44504000 	.word	0x44504000
 80035a4:	44d04000 	.word	0x44d04000
 80035a8:	45504000 	.word	0x45504000
 80035ac:	45d05800 	.word	0x45d05800

080035b0 <ISM330DHCX_GYRO_GetSensitivity>:
{
 80035b0:	b510      	push	{r4, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80035b6:	f10d 0107 	add.w	r1, sp, #7
 80035ba:	3020      	adds	r0, #32
 80035bc:	f000 fa17 	bl	80039ee <ism330dhcx_gy_full_scale_get>
 80035c0:	b9f0      	cbnz	r0, 8003600 <ISM330DHCX_GYRO_GetSensitivity+0x50>
  switch (full_scale)
 80035c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d81d      	bhi.n	8003606 <ISM330DHCX_GYRO_GetSensitivity+0x56>
 80035ca:	e8df f003 	tbb	[pc, r3]
 80035ce:	160a      	.short	0x160a
 80035d0:	1c0d1c07 	.word	0x1c0d1c07
 80035d4:	1c101c1c 	.word	0x1c101c1c
 80035d8:	1c1c      	.short	0x1c1c
 80035da:	13          	.byte	0x13
 80035db:	00          	.byte	0x00
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <ISM330DHCX_GYRO_GetSensitivity+0x60>)
 80035de:	6023      	str	r3, [r4, #0]
      break;
 80035e0:	e013      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80035e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <ISM330DHCX_GYRO_GetSensitivity+0x64>)
 80035e4:	6023      	str	r3, [r4, #0]
      break;
 80035e6:	e010      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <ISM330DHCX_GYRO_GetSensitivity+0x68>)
 80035ea:	6023      	str	r3, [r4, #0]
      break;
 80035ec:	e00d      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80035ee:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <ISM330DHCX_GYRO_GetSensitivity+0x6c>)
 80035f0:	6023      	str	r3, [r4, #0]
      break;
 80035f2:	e00a      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <ISM330DHCX_GYRO_GetSensitivity+0x70>)
 80035f6:	6023      	str	r3, [r4, #0]
      break;
 80035f8:	e007      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <ISM330DHCX_GYRO_GetSensitivity+0x74>)
 80035fc:	6023      	str	r3, [r4, #0]
      break;
 80035fe:	e004      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
    return ISM330DHCX_ERROR;
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	e001      	b.n	800360a <ISM330DHCX_GYRO_GetSensitivity+0x5a>
  switch (full_scale)
 8003606:	f04f 30ff 	mov.w	r0, #4294967295
}
 800360a:	b002      	add	sp, #8
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	408c0000 	.word	0x408c0000
 8003614:	410c0000 	.word	0x410c0000
 8003618:	418c0000 	.word	0x418c0000
 800361c:	420c0000 	.word	0x420c0000
 8003620:	428c0000 	.word	0x428c0000
 8003624:	430c0000 	.word	0x430c0000

08003628 <ISM330DHCX_GYRO_GetFullScale>:
{
 8003628:	b510      	push	{r4, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800362e:	f10d 0107 	add.w	r1, sp, #7
 8003632:	3020      	adds	r0, #32
 8003634:	f000 f9db 	bl	80039ee <ism330dhcx_gy_full_scale_get>
 8003638:	bb10      	cbnz	r0, 8003680 <ISM330DHCX_GYRO_GetFullScale+0x58>
  switch (fs_low_level)
 800363a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d821      	bhi.n	8003686 <ISM330DHCX_GYRO_GetFullScale+0x5e>
 8003642:	e8df f003 	tbb	[pc, r3]
 8003646:	190a      	.short	0x190a
 8003648:	200d2007 	.word	0x200d2007
 800364c:	20112020 	.word	0x20112020
 8003650:	2020      	.short	0x2020
 8003652:	15          	.byte	0x15
 8003653:	00          	.byte	0x00
      *FullScale =  125;
 8003654:	237d      	movs	r3, #125	@ 0x7d
 8003656:	6023      	str	r3, [r4, #0]
      break;
 8003658:	e017      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale =  250;
 800365a:	23fa      	movs	r3, #250	@ 0xfa
 800365c:	6023      	str	r3, [r4, #0]
      break;
 800365e:	e014      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale =  500;
 8003660:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003664:	6023      	str	r3, [r4, #0]
      break;
 8003666:	e010      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 1000;
 8003668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800366c:	6023      	str	r3, [r4, #0]
      break;
 800366e:	e00c      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 2000;
 8003670:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003674:	6023      	str	r3, [r4, #0]
      break;
 8003676:	e008      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 4000;
 8003678:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800367c:	6023      	str	r3, [r4, #0]
      break;
 800367e:	e004      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
    return ISM330DHCX_ERROR;
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e001      	b.n	800368a <ISM330DHCX_GYRO_GetFullScale+0x62>
  switch (fs_low_level)
 8003686:	f04f 30ff 	mov.w	r0, #4294967295
}
 800368a:	b002      	add	sp, #8
 800368c:	bd10      	pop	{r4, pc}

0800368e <ISM330DHCX_GYRO_GetAxesRaw>:
{
 800368e:	b510      	push	{r4, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003694:	4669      	mov	r1, sp
 8003696:	3020      	adds	r0, #32
 8003698:	f000 fa29 	bl	8003aee <ism330dhcx_angular_rate_raw_get>
 800369c:	b950      	cbnz	r0, 80036b4 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 800369e:	f9bd 3000 	ldrsh.w	r3, [sp]
 80036a2:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80036a4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80036a8:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80036aa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80036ae:	80a3      	strh	r3, [r4, #4]
}
 80036b0:	b002      	add	sp, #8
 80036b2:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e7fa      	b.n	80036b0 <ISM330DHCX_GYRO_GetAxesRaw+0x22>

080036ba <ISM330DHCX_GYRO_GetAxes>:
{
 80036ba:	b530      	push	{r4, r5, lr}
 80036bc:	b085      	sub	sp, #20
 80036be:	4605      	mov	r5, r0
 80036c0:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80036c2:	2300      	movs	r3, #0
 80036c4:	9301      	str	r3, [sp, #4]
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80036c6:	a902      	add	r1, sp, #8
 80036c8:	3020      	adds	r0, #32
 80036ca:	f000 fa10 	bl	8003aee <ism330dhcx_angular_rate_raw_get>
 80036ce:	bb60      	cbnz	r0, 800372a <ISM330DHCX_GYRO_GetAxes+0x70>
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80036d0:	a901      	add	r1, sp, #4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f7ff ff6c 	bl	80035b0 <ISM330DHCX_GYRO_GetSensitivity>
 80036d8:	bb50      	cbnz	r0, 8003730 <ISM330DHCX_GYRO_GetAxes+0x76>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80036da:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80036de:	ee07 3a10 	vmov	s14, r3
 80036e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036e6:	eddd 7a01 	vldr	s15, [sp, #4]
 80036ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80036f2:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80036f6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80036fa:	ee07 3a10 	vmov	s14, r3
 80036fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003706:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800370a:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800370e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003712:	ee07 3a10 	vmov	s14, r3
 8003716:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800371a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003722:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003726:	b005      	add	sp, #20
 8003728:	bd30      	pop	{r4, r5, pc}
    return ISM330DHCX_ERROR;
 800372a:	f04f 30ff 	mov.w	r0, #4294967295
 800372e:	e7fa      	b.n	8003726 <ISM330DHCX_GYRO_GetAxes+0x6c>
    return ISM330DHCX_ERROR;
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e7f7      	b.n	8003726 <ISM330DHCX_GYRO_GetAxes+0x6c>

08003736 <ISM330DHCX_Write_Reg>:
{
 8003736:	b500      	push	{lr}
 8003738:	b083      	sub	sp, #12
 800373a:	f88d 2007 	strb.w	r2, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800373e:	2301      	movs	r3, #1
 8003740:	f10d 0207 	add.w	r2, sp, #7
 8003744:	3020      	adds	r0, #32
 8003746:	f000 f8bc 	bl	80038c2 <ism330dhcx_write_reg>
 800374a:	b910      	cbnz	r0, 8003752 <ISM330DHCX_Write_Reg+0x1c>
}
 800374c:	b003      	add	sp, #12
 800374e:	f85d fb04 	ldr.w	pc, [sp], #4
    return ISM330DHCX_ERROR;
 8003752:	f04f 30ff 	mov.w	r0, #4294967295
 8003756:	e7f9      	b.n	800374c <ISM330DHCX_Write_Reg+0x16>

08003758 <ISM330DHCX_RegisterBusIO>:
  if (pObj == NULL)
 8003758:	2800      	cmp	r0, #0
 800375a:	d02b      	beq.n	80037b4 <ISM330DHCX_RegisterBusIO+0x5c>
{
 800375c:	b510      	push	{r4, lr}
 800375e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8003760:	680b      	ldr	r3, [r1, #0]
 8003762:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003764:	684a      	ldr	r2, [r1, #4]
 8003766:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003768:	688a      	ldr	r2, [r1, #8]
 800376a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800376c:	7b0a      	ldrb	r2, [r1, #12]
 800376e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003770:	690a      	ldr	r2, [r1, #16]
 8003772:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003774:	694a      	ldr	r2, [r1, #20]
 8003776:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003778:	698a      	ldr	r2, [r1, #24]
 800377a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800377c:	4a12      	ldr	r2, [pc, #72]	@ (80037c8 <ISM330DHCX_RegisterBusIO+0x70>)
 800377e:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003780:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <ISM330DHCX_RegisterBusIO+0x74>)
 8003782:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003784:	69ca      	ldr	r2, [r1, #28]
 8003786:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003788:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 800378a:	b1b3      	cbz	r3, 80037ba <ISM330DHCX_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800378c:	4798      	blx	r3
 800378e:	b9b8      	cbnz	r0, 80037c0 <ISM330DHCX_RegisterBusIO+0x68>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003790:	68a3      	ldr	r3, [r4, #8]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d000      	beq.n	8003798 <ISM330DHCX_RegisterBusIO+0x40>
}
 8003796:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003798:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1fa      	bne.n	8003796 <ISM330DHCX_RegisterBusIO+0x3e>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80037a0:	220c      	movs	r2, #12
 80037a2:	2112      	movs	r1, #18
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ffc6 	bl	8003736 <ISM330DHCX_Write_Reg>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d0f3      	beq.n	8003796 <ISM330DHCX_RegisterBusIO+0x3e>
            ret = ISM330DHCX_ERROR;
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80037b2:	e7f0      	b.n	8003796 <ISM330DHCX_RegisterBusIO+0x3e>
    ret = ISM330DHCX_ERROR;
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80037b8:	4770      	bx	lr
      ret = ISM330DHCX_ERROR;
 80037ba:	f04f 30ff 	mov.w	r0, #4294967295
 80037be:	e7ea      	b.n	8003796 <ISM330DHCX_RegisterBusIO+0x3e>
      ret = ISM330DHCX_ERROR;
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	e7e7      	b.n	8003796 <ISM330DHCX_RegisterBusIO+0x3e>
 80037c6:	bf00      	nop
 80037c8:	08002fb5 	.word	0x08002fb5
 80037cc:	08002fbf 	.word	0x08002fbf

080037d0 <ISM330DHCX_Set_Mem_Bank>:
{
 80037d0:	b508      	push	{r3, lr}
        : (Val == 2U) ? ISM330DHCX_EMBEDDED_FUNC_BANK
 80037d2:	2901      	cmp	r1, #1
 80037d4:	d002      	beq.n	80037dc <ISM330DHCX_Set_Mem_Bank+0xc>
 80037d6:	2902      	cmp	r1, #2
 80037d8:	d000      	beq.n	80037dc <ISM330DHCX_Set_Mem_Bank+0xc>
 80037da:	2100      	movs	r1, #0
  if (ism330dhcx_mem_bank_set(&(pObj->Ctx), reg) != ISM330DHCX_OK)
 80037dc:	3020      	adds	r0, #32
 80037de:	f000 f9e3 	bl	8003ba8 <ism330dhcx_mem_bank_set>
 80037e2:	b900      	cbnz	r0, 80037e6 <ISM330DHCX_Set_Mem_Bank+0x16>
}
 80037e4:	bd08      	pop	{r3, pc}
    ret = ISM330DHCX_ERROR;
 80037e6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80037ea:	e7fb      	b.n	80037e4 <ISM330DHCX_Set_Mem_Bank+0x14>

080037ec <ISM330DHCX_Init>:
{
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4605      	mov	r5, r0
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037f0:	f100 0420 	add.w	r4, r0, #32
 80037f4:	2101      	movs	r1, #1
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 f9bd 	bl	8003b76 <ism330dhcx_device_conf_set>
 80037fc:	bbd8      	cbnz	r0, 8003876 <ISM330DHCX_Init+0x8a>
  if (ISM330DHCX_Set_Mem_Bank(pObj, (uint8_t)ISM330DHCX_USER_BANK) != ISM330DHCX_OK)
 80037fe:	2100      	movs	r1, #0
 8003800:	4628      	mov	r0, r5
 8003802:	f7ff ffe5 	bl	80037d0 <ISM330DHCX_Set_Mem_Bank>
 8003806:	bbc8      	cbnz	r0, 800387c <ISM330DHCX_Init+0x90>
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003808:	2101      	movs	r1, #1
 800380a:	4620      	mov	r0, r4
 800380c:	f000 fa05 	bl	8003c1a <ism330dhcx_auto_increment_set>
 8003810:	bbb8      	cbnz	r0, 8003882 <ISM330DHCX_Init+0x96>
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003812:	2101      	movs	r1, #1
 8003814:	4620      	mov	r0, r4
 8003816:	f000 f9e7 	bl	8003be8 <ism330dhcx_reset_set>
 800381a:	bba8      	cbnz	r0, 8003888 <ISM330DHCX_Init+0x9c>
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800381c:	2101      	movs	r1, #1
 800381e:	4620      	mov	r0, r4
 8003820:	f000 f9fb 	bl	8003c1a <ism330dhcx_auto_increment_set>
 8003824:	bb98      	cbnz	r0, 800388e <ISM330DHCX_Init+0xa2>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003826:	2101      	movs	r1, #1
 8003828:	4620      	mov	r0, r4
 800382a:	f000 f947 	bl	8003abc <ism330dhcx_block_data_update_set>
 800382e:	bb88      	cbnz	r0, 8003894 <ISM330DHCX_Init+0xa8>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003830:	2100      	movs	r1, #0
 8003832:	4620      	mov	r0, r4
 8003834:	f000 fa0a 	bl	8003c4c <ism330dhcx_fifo_mode_set>
 8003838:	bb78      	cbnz	r0, 800389a <ISM330DHCX_Init+0xae>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 800383a:	2304      	movs	r3, #4
 800383c:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003840:	2100      	movs	r1, #0
 8003842:	4620      	mov	r0, r4
 8003844:	f000 fab7 	bl	8003db6 <ism330dhcx_xl_data_rate_set>
 8003848:	bb50      	cbnz	r0, 80038a0 <ISM330DHCX_Init+0xb4>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 800384a:	2100      	movs	r1, #0
 800384c:	4620      	mov	r0, r4
 800384e:	f000 f83d 	bl	80038cc <ism330dhcx_xl_full_scale_set>
 8003852:	bb40      	cbnz	r0, 80038a6 <ISM330DHCX_Init+0xba>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8003854:	2304      	movs	r3, #4
 8003856:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800385a:	2100      	movs	r1, #0
 800385c:	4620      	mov	r0, r4
 800385e:	f000 fb91 	bl	8003f84 <ism330dhcx_gy_data_rate_set>
 8003862:	bb18      	cbnz	r0, 80038ac <ISM330DHCX_Init+0xc0>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003864:	210c      	movs	r1, #12
 8003866:	4620      	mov	r0, r4
 8003868:	f000 f8a8 	bl	80039bc <ism330dhcx_gy_full_scale_set>
 800386c:	bb08      	cbnz	r0, 80038b2 <ISM330DHCX_Init+0xc6>
  pObj->is_initialized = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
}
 8003874:	bd38      	pop	{r3, r4, r5, pc}
    return ISM330DHCX_ERROR;
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	e7fb      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	e7f8      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	e7f5      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e7f2      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 800388e:	f04f 30ff 	mov.w	r0, #4294967295
 8003892:	e7ef      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	e7ec      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	e7e9      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	e7e6      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295
 80038aa:	e7e3      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	e7e0      	b.n	8003874 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	e7dd      	b.n	8003874 <ISM330DHCX_Init+0x88>

080038b8 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80038b8:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80038ba:	6844      	ldr	r4, [r0, #4]
 80038bc:	68c0      	ldr	r0, [r0, #12]
 80038be:	47a0      	blx	r4

  return ret;
}
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80038c2:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80038c4:	6804      	ldr	r4, [r0, #0]
 80038c6:	68c0      	ldr	r0, [r0, #12]
 80038c8:	47a0      	blx	r4

  return ret;
}
 80038ca:	bd10      	pop	{r4, pc}

080038cc <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80038cc:	b530      	push	{r4, r5, lr}
 80038ce:	b083      	sub	sp, #12
 80038d0:	4604      	mov	r4, r0
 80038d2:	460d      	mov	r5, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80038d4:	2301      	movs	r3, #1
 80038d6:	aa01      	add	r2, sp, #4
 80038d8:	2110      	movs	r1, #16
 80038da:	f7ff ffed 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80038de:	b108      	cbz	r0, 80038e4 <ism330dhcx_xl_full_scale_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80038e0:	b003      	add	sp, #12
 80038e2:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t)val;
 80038e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038e8:	f365 0383 	bfi	r3, r5, #2, #2
 80038ec:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80038f0:	2301      	movs	r3, #1
 80038f2:	aa01      	add	r2, sp, #4
 80038f4:	2110      	movs	r1, #16
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff ffe3 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 80038fc:	e7f0      	b.n	80038e0 <ism330dhcx_xl_full_scale_set+0x14>

080038fe <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80038fe:	b510      	push	{r4, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	460c      	mov	r4, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003904:	2301      	movs	r3, #1
 8003906:	aa01      	add	r2, sp, #4
 8003908:	2110      	movs	r1, #16
 800390a:	f7ff ffd5 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 800390e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003912:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003916:	2b03      	cmp	r3, #3
 8003918:	d810      	bhi.n	800393c <ism330dhcx_xl_full_scale_get+0x3e>
 800391a:	e8df f003 	tbb	[pc, r3]
 800391e:	0602      	.short	0x0602
 8003920:	0c09      	.short	0x0c09
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8003922:	2300      	movs	r3, #0
 8003924:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_2g;
      break;
  }

  return ret;
}
 8003926:	b002      	add	sp, #8
 8003928:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_16g;
 800392a:	2301      	movs	r3, #1
 800392c:	7023      	strb	r3, [r4, #0]
      break;
 800392e:	e7fa      	b.n	8003926 <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_4g;
 8003930:	2302      	movs	r3, #2
 8003932:	7023      	strb	r3, [r4, #0]
      break;
 8003934:	e7f7      	b.n	8003926 <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_8g;
 8003936:	2303      	movs	r3, #3
 8003938:	7023      	strb	r3, [r4, #0]
      break;
 800393a:	e7f4      	b.n	8003926 <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_2g;
 800393c:	2300      	movs	r3, #0
 800393e:	7023      	strb	r3, [r4, #0]
  return ret;
 8003940:	e7f1      	b.n	8003926 <ism330dhcx_xl_full_scale_get+0x28>

08003942 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8003942:	b510      	push	{r4, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	460c      	mov	r4, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003948:	2301      	movs	r3, #1
 800394a:	aa01      	add	r2, sp, #4
 800394c:	2110      	movs	r1, #16
 800394e:	f7ff ffb3 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8003952:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	2b0b      	cmp	r3, #11
 800395a:	d82c      	bhi.n	80039b6 <ism330dhcx_xl_data_rate_get+0x74>
 800395c:	e8df f003 	tbb	[pc, r3]
 8003960:	100d0a06 	.word	0x100d0a06
 8003964:	1c191613 	.word	0x1c191613
 8003968:	2825221f 	.word	0x2825221f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 800396c:	2300      	movs	r3, #0
 800396e:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8003970:	b002      	add	sp, #8
 8003972:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003974:	2301      	movs	r3, #1
 8003976:	7023      	strb	r3, [r4, #0]
      break;
 8003978:	e7fa      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_26Hz;
 800397a:	2302      	movs	r3, #2
 800397c:	7023      	strb	r3, [r4, #0]
      break;
 800397e:	e7f7      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003980:	2303      	movs	r3, #3
 8003982:	7023      	strb	r3, [r4, #0]
      break;
 8003984:	e7f4      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_104Hz;
 8003986:	2304      	movs	r3, #4
 8003988:	7023      	strb	r3, [r4, #0]
      break;
 800398a:	e7f1      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_208Hz;
 800398c:	2305      	movs	r3, #5
 800398e:	7023      	strb	r3, [r4, #0]
      break;
 8003990:	e7ee      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_416Hz;
 8003992:	2306      	movs	r3, #6
 8003994:	7023      	strb	r3, [r4, #0]
      break;
 8003996:	e7eb      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_833Hz;
 8003998:	2307      	movs	r3, #7
 800399a:	7023      	strb	r3, [r4, #0]
      break;
 800399c:	e7e8      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_1666Hz;
 800399e:	2308      	movs	r3, #8
 80039a0:	7023      	strb	r3, [r4, #0]
      break;
 80039a2:	e7e5      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_3332Hz;
 80039a4:	2309      	movs	r3, #9
 80039a6:	7023      	strb	r3, [r4, #0]
      break;
 80039a8:	e7e2      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_6667Hz;
 80039aa:	230a      	movs	r3, #10
 80039ac:	7023      	strb	r3, [r4, #0]
      break;
 80039ae:	e7df      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_1Hz6;
 80039b0:	230b      	movs	r3, #11
 80039b2:	7023      	strb	r3, [r4, #0]
      break;
 80039b4:	e7dc      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_OFF;
 80039b6:	2300      	movs	r3, #0
 80039b8:	7023      	strb	r3, [r4, #0]
  return ret;
 80039ba:	e7d9      	b.n	8003970 <ism330dhcx_xl_data_rate_get+0x2e>

080039bc <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 80039bc:	b530      	push	{r4, r5, lr}
 80039be:	b083      	sub	sp, #12
 80039c0:	4604      	mov	r4, r0
 80039c2:	460d      	mov	r5, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80039c4:	2301      	movs	r3, #1
 80039c6:	aa01      	add	r2, sp, #4
 80039c8:	2111      	movs	r1, #17
 80039ca:	f7ff ff75 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 80039ce:	b108      	cbz	r0, 80039d4 <ism330dhcx_gy_full_scale_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 80039d0:	b003      	add	sp, #12
 80039d2:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t)val;
 80039d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80039d8:	f365 0303 	bfi	r3, r5, #0, #4
 80039dc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80039e0:	2301      	movs	r3, #1
 80039e2:	aa01      	add	r2, sp, #4
 80039e4:	2111      	movs	r1, #17
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff ff6b 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 80039ec:	e7f0      	b.n	80039d0 <ism330dhcx_gy_full_scale_set+0x14>

080039ee <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80039ee:	b510      	push	{r4, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	460c      	mov	r4, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80039f4:	2301      	movs	r3, #1
 80039f6:	aa01      	add	r2, sp, #4
 80039f8:	2111      	movs	r1, #17
 80039fa:	f7ff ff5d 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 80039fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d81b      	bhi.n	8003a42 <ism330dhcx_gy_full_scale_get+0x54>
 8003a0a:	e8df f003 	tbb	[pc, r3]
 8003a0e:	170b      	.short	0x170b
 8003a10:	1a0e1a07 	.word	0x1a0e1a07
 8003a14:	1a111a1a 	.word	0x1a111a1a
 8003a18:	1a1a      	.short	0x1a1a
 8003a1a:	14          	.byte	0x14
 8003a1b:	00          	.byte	0x00
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_125dps;
      break;
  }

  return ret;
}
 8003a20:	b002      	add	sp, #8
 8003a22:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_250dps;
 8003a24:	2300      	movs	r3, #0
 8003a26:	7023      	strb	r3, [r4, #0]
      break;
 8003a28:	e7fa      	b.n	8003a20 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_500dps;
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	7023      	strb	r3, [r4, #0]
      break;
 8003a2e:	e7f7      	b.n	8003a20 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_1000dps;
 8003a30:	2308      	movs	r3, #8
 8003a32:	7023      	strb	r3, [r4, #0]
      break;
 8003a34:	e7f4      	b.n	8003a20 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_2000dps;
 8003a36:	230c      	movs	r3, #12
 8003a38:	7023      	strb	r3, [r4, #0]
      break;
 8003a3a:	e7f1      	b.n	8003a20 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_4000dps;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	7023      	strb	r3, [r4, #0]
      break;
 8003a40:	e7ee      	b.n	8003a20 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_125dps;
 8003a42:	2302      	movs	r3, #2
 8003a44:	7023      	strb	r3, [r4, #0]
  return ret;
 8003a46:	e7eb      	b.n	8003a20 <ism330dhcx_gy_full_scale_get+0x32>

08003a48 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	460c      	mov	r4, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003a4e:	2301      	movs	r3, #1
 8003a50:	aa01      	add	r2, sp, #4
 8003a52:	2111      	movs	r1, #17
 8003a54:	f7ff ff30 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8003a58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	2b0a      	cmp	r3, #10
 8003a60:	d829      	bhi.n	8003ab6 <ism330dhcx_gy_data_rate_get+0x6e>
 8003a62:	e8df f003 	tbb	[pc, r3]
 8003a66:	0a06      	.short	0x0a06
 8003a68:	1613100d 	.word	0x1613100d
 8003a6c:	221f1c19 	.word	0x221f1c19
 8003a70:	25          	.byte	0x25
 8003a71:	00          	.byte	0x00
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8003a72:	2300      	movs	r3, #0
 8003a74:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_GY_ODR_OFF;
      break;
  }

  return ret;
}
 8003a76:	b002      	add	sp, #8
 8003a78:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	7023      	strb	r3, [r4, #0]
      break;
 8003a7e:	e7fa      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_26Hz;
 8003a80:	2302      	movs	r3, #2
 8003a82:	7023      	strb	r3, [r4, #0]
      break;
 8003a84:	e7f7      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_52Hz;
 8003a86:	2303      	movs	r3, #3
 8003a88:	7023      	strb	r3, [r4, #0]
      break;
 8003a8a:	e7f4      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_104Hz;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	7023      	strb	r3, [r4, #0]
      break;
 8003a90:	e7f1      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_208Hz;
 8003a92:	2305      	movs	r3, #5
 8003a94:	7023      	strb	r3, [r4, #0]
      break;
 8003a96:	e7ee      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_416Hz;
 8003a98:	2306      	movs	r3, #6
 8003a9a:	7023      	strb	r3, [r4, #0]
      break;
 8003a9c:	e7eb      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_833Hz;
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	7023      	strb	r3, [r4, #0]
      break;
 8003aa2:	e7e8      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	7023      	strb	r3, [r4, #0]
      break;
 8003aa8:	e7e5      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8003aaa:	2309      	movs	r3, #9
 8003aac:	7023      	strb	r3, [r4, #0]
      break;
 8003aae:	e7e2      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8003ab0:	230a      	movs	r3, #10
 8003ab2:	7023      	strb	r3, [r4, #0]
      break;
 8003ab4:	e7df      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_OFF;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	7023      	strb	r3, [r4, #0]
  return ret;
 8003aba:	e7dc      	b.n	8003a76 <ism330dhcx_gy_data_rate_get+0x2e>

08003abc <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8003abc:	b530      	push	{r4, r5, lr}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	aa01      	add	r2, sp, #4
 8003ac8:	2112      	movs	r1, #18
 8003aca:	f7ff fef5 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003ace:	b108      	cbz	r0, 8003ad4 <ism330dhcx_block_data_update_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003ad0:	b003      	add	sp, #12
 8003ad2:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = (uint8_t)val;
 8003ad4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ad8:	f365 1386 	bfi	r3, r5, #6, #1
 8003adc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	aa01      	add	r2, sp, #4
 8003ae4:	2112      	movs	r1, #18
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7ff feeb 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 8003aec:	e7f0      	b.n	8003ad0 <ism330dhcx_block_data_update_set+0x14>

08003aee <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8003aee:	b510      	push	{r4, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8003af4:	2306      	movs	r3, #6
 8003af6:	466a      	mov	r2, sp
 8003af8:	2122      	movs	r1, #34	@ 0x22
 8003afa:	f7ff fedd 	bl	80038b8 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
 8003afe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003b02:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b04:	f89d 3000 	ldrb.w	r3, [sp]
 8003b08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b0c:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003b0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b12:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b14:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003b18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b1c:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003b1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003b22:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003b24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b2c:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003b2e:	b002      	add	sp, #8
 8003b30:	bd10      	pop	{r4, pc}

08003b32 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8003b32:	b510      	push	{r4, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8003b38:	2306      	movs	r3, #6
 8003b3a:	466a      	mov	r2, sp
 8003b3c:	2128      	movs	r1, #40	@ 0x28
 8003b3e:	f7ff febb 	bl	80038b8 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
 8003b42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003b46:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b48:	f89d 3000 	ldrb.w	r3, [sp]
 8003b4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b50:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003b52:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b56:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b58:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003b5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b60:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003b62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003b66:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003b68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b70:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003b72:	b002      	add	sp, #8
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b76:	b530      	push	{r4, r5, lr}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	460d      	mov	r5, r1
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8003b7e:	2301      	movs	r3, #1
 8003b80:	aa01      	add	r2, sp, #4
 8003b82:	2118      	movs	r1, #24
 8003b84:	f7ff fe98 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8003b88:	b108      	cbz	r0, 8003b8e <ism330dhcx_device_conf_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
}
 8003b8a:	b003      	add	sp, #12
 8003b8c:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.device_conf = (uint8_t)val;
 8003b8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b92:	f365 0341 	bfi	r3, r5, #1, #1
 8003b96:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	aa01      	add	r2, sp, #4
 8003b9e:	2118      	movs	r1, #24
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff fe8e 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 8003ba6:	e7f0      	b.n	8003b8a <ism330dhcx_device_conf_set+0x14>

08003ba8 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8003ba8:	b530      	push	{r4, r5, lr}
 8003baa:	b083      	sub	sp, #12
 8003bac:	4604      	mov	r4, r0
 8003bae:	460d      	mov	r5, r1
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	aa01      	add	r2, sp, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f7ff fe7f 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8003bba:	b108      	cbz	r0, 8003bc0 <ism330dhcx_mem_bank_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 8003bbc:	b003      	add	sp, #12
 8003bbe:	bd30      	pop	{r4, r5, pc}
    func_cfg_access.reg_access = (uint8_t)val;
 8003bc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bc4:	f365 1387 	bfi	r3, r5, #6, #2
 8003bc8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8003bcc:	2301      	movs	r3, #1
 8003bce:	aa01      	add	r2, sp, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff fe75 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 8003bd8:	e7f0      	b.n	8003bbc <ism330dhcx_mem_bank_set+0x14>

08003bda <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003bda:	b508      	push	{r3, lr}
 8003bdc:	460a      	mov	r2, r1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8003bde:	2301      	movs	r3, #1
 8003be0:	210f      	movs	r1, #15
 8003be2:	f7ff fe69 	bl	80038b8 <ism330dhcx_read_reg>

  return ret;
}
 8003be6:	bd08      	pop	{r3, pc}

08003be8 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003be8:	b530      	push	{r4, r5, lr}
 8003bea:	b083      	sub	sp, #12
 8003bec:	4604      	mov	r4, r0
 8003bee:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	aa01      	add	r2, sp, #4
 8003bf4:	2112      	movs	r1, #18
 8003bf6:	f7ff fe5f 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003bfa:	b108      	cbz	r0, 8003c00 <ism330dhcx_reset_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003bfc:	b003      	add	sp, #12
 8003bfe:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sw_reset = (uint8_t)val;
 8003c00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c04:	f365 0300 	bfi	r3, r5, #0, #1
 8003c08:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	aa01      	add	r2, sp, #4
 8003c10:	2112      	movs	r1, #18
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff fe55 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 8003c18:	e7f0      	b.n	8003bfc <ism330dhcx_reset_set+0x14>

08003c1a <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c1a:	b530      	push	{r4, r5, lr}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003c22:	2301      	movs	r3, #1
 8003c24:	aa01      	add	r2, sp, #4
 8003c26:	2112      	movs	r1, #18
 8003c28:	f7ff fe46 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003c2c:	b108      	cbz	r0, 8003c32 <ism330dhcx_auto_increment_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003c2e:	b003      	add	sp, #12
 8003c30:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = (uint8_t)val;
 8003c32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c36:	f365 0382 	bfi	r3, r5, #2, #1
 8003c3a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003c3e:	2301      	movs	r3, #1
 8003c40:	aa01      	add	r2, sp, #4
 8003c42:	2112      	movs	r1, #18
 8003c44:	4620      	mov	r0, r4
 8003c46:	f7ff fe3c 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 8003c4a:	e7f0      	b.n	8003c2e <ism330dhcx_auto_increment_set+0x14>

08003c4c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8003c4c:	b530      	push	{r4, r5, lr}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	4604      	mov	r4, r0
 8003c52:	460d      	mov	r5, r1
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8003c54:	2301      	movs	r3, #1
 8003c56:	aa01      	add	r2, sp, #4
 8003c58:	210a      	movs	r1, #10
 8003c5a:	f7ff fe2d 	bl	80038b8 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8003c5e:	b108      	cbz	r0, 8003c64 <ism330dhcx_fifo_mode_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8003c60:	b003      	add	sp, #12
 8003c62:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8003c64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c68:	f365 0302 	bfi	r3, r5, #0, #3
 8003c6c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8003c70:	2301      	movs	r3, #1
 8003c72:	aa01      	add	r2, sp, #4
 8003c74:	210a      	movs	r1, #10
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff fe23 	bl	80038c2 <ism330dhcx_write_reg>
  return ret;
 8003c7c:	e7f0      	b.n	8003c60 <ism330dhcx_fifo_mode_set+0x14>

08003c7e <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8003c7e:	b538      	push	{r3, r4, r5, lr}
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8003c84:	2102      	movs	r1, #2
 8003c86:	f7ff ff8f 	bl	8003ba8 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	b110      	cbz	r0, 8003c94 <ism330dhcx_fsm_enable_get+0x16>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
  }

  if (ret == 0)
 8003c8e:	b193      	cbz	r3, 8003cb6 <ism330dhcx_fsm_enable_get+0x38>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8003c94:	2301      	movs	r3, #1
 8003c96:	462a      	mov	r2, r5
 8003c98:	2146      	movs	r1, #70	@ 0x46
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fe0c 	bl	80038b8 <ism330dhcx_read_reg>
  if (ret == 0)
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d1f4      	bne.n	8003c90 <ism330dhcx_fsm_enable_get+0x12>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	18ea      	adds	r2, r5, r3
 8003caa:	2147      	movs	r1, #71	@ 0x47
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7ff fe03 	bl	80038b8 <ism330dhcx_read_reg>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	e7eb      	b.n	8003c8e <ism330dhcx_fsm_enable_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff ff75 	bl	8003ba8 <ism330dhcx_mem_bank_set>
 8003cbe:	4603      	mov	r3, r0
  return ret;
 8003cc0:	e7e6      	b.n	8003c90 <ism330dhcx_fsm_enable_get+0x12>

08003cc2 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8003cc2:	b530      	push	{r4, r5, lr}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	460d      	mov	r5, r1
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	f7ff ff6c 	bl	8003ba8 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 8003cd0:	b148      	cbz	r0, 8003ce6 <ism330dhcx_fsm_data_rate_get+0x24>
  if (ret == 0)
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8003cd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003cd6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d81d      	bhi.n	8003d1a <ism330dhcx_fsm_data_rate_get+0x58>
 8003cde:	e8df f003 	tbb	[pc, r3]
 8003ce2:	130f      	.short	0x130f
 8003ce4:	1916      	.short	0x1916
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	aa01      	add	r2, sp, #4
 8003cea:	215f      	movs	r1, #95	@ 0x5f
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff fde3 	bl	80038b8 <ism330dhcx_read_reg>
  if (ret == 0)
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d1ed      	bne.n	8003cd2 <ism330dhcx_fsm_data_rate_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7ff ff55 	bl	8003ba8 <ism330dhcx_mem_bank_set>
 8003cfe:	e7e8      	b.n	8003cd2 <ism330dhcx_fsm_data_rate_get+0x10>
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8003d00:	2300      	movs	r3, #0
 8003d02:	702b      	strb	r3, [r5, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 8003d04:	b003      	add	sp, #12
 8003d06:	bd30      	pop	{r4, r5, pc}
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	702b      	strb	r3, [r5, #0]
      break;
 8003d0c:	e7fa      	b.n	8003d04 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	702b      	strb	r3, [r5, #0]
      break;
 8003d12:	e7f7      	b.n	8003d04 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8003d14:	2303      	movs	r3, #3
 8003d16:	702b      	strb	r3, [r5, #0]
      break;
 8003d18:	e7f4      	b.n	8003d04 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	702b      	strb	r3, [r5, #0]
  return ret;
 8003d1e:	e7f1      	b.n	8003d04 <ism330dhcx_fsm_data_rate_get+0x42>

08003d20 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003d20:	b530      	push	{r4, r5, lr}
 8003d22:	b083      	sub	sp, #12
 8003d24:	4604      	mov	r4, r0
 8003d26:	460d      	mov	r5, r1
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8003d28:	2102      	movs	r1, #2
 8003d2a:	f7ff ff3d 	bl	8003ba8 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 8003d2e:	b108      	cbz	r0, 8003d34 <ism330dhcx_mlc_get+0x14>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    *val  = reg.mlc_en;
  }

  return ret;
}
 8003d30:	b003      	add	sp, #12
 8003d32:	bd30      	pop	{r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8003d34:	2301      	movs	r3, #1
 8003d36:	aa01      	add	r2, sp, #4
 8003d38:	2105      	movs	r1, #5
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fdbc 	bl	80038b8 <ism330dhcx_read_reg>
  if (ret == 0)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1f5      	bne.n	8003d30 <ism330dhcx_mlc_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8003d44:	2100      	movs	r1, #0
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7ff ff2e 	bl	8003ba8 <ism330dhcx_mem_bank_set>
    *val  = reg.mlc_en;
 8003d4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d54:	702b      	strb	r3, [r5, #0]
  return ret;
 8003d56:	e7eb      	b.n	8003d30 <ism330dhcx_mlc_get+0x10>

08003d58 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8003d58:	b530      	push	{r4, r5, lr}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	460c      	mov	r4, r1
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8003d60:	2102      	movs	r1, #2
 8003d62:	f7ff ff21 	bl	8003ba8 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 8003d66:	b108      	cbz	r0, 8003d6c <ism330dhcx_mlc_data_rate_get+0x14>

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 8003d68:	b003      	add	sp, #12
 8003d6a:	bd30      	pop	{r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	aa01      	add	r2, sp, #4
 8003d70:	2160      	movs	r1, #96	@ 0x60
 8003d72:	4628      	mov	r0, r5
 8003d74:	f7ff fda0 	bl	80038b8 <ism330dhcx_read_reg>
  if (ret == 0)
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d1f5      	bne.n	8003d68 <ism330dhcx_mlc_data_rate_get+0x10>
    switch (reg.mlc_odr)
 8003d7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d80:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d813      	bhi.n	8003db0 <ism330dhcx_mlc_data_rate_get+0x58>
 8003d88:	e8df f003 	tbb	[pc, r3]
 8003d8c:	0f0c0902 	.word	0x0f0c0902
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8003d90:	2300      	movs	r3, #0
 8003d92:	7023      	strb	r3, [r4, #0]
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8003d94:	2100      	movs	r1, #0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7ff ff06 	bl	8003ba8 <ism330dhcx_mem_bank_set>
  return ret;
 8003d9c:	e7e4      	b.n	8003d68 <ism330dhcx_mlc_data_rate_get+0x10>
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	7023      	strb	r3, [r4, #0]
        break;
 8003da2:	e7f7      	b.n	8003d94 <ism330dhcx_mlc_data_rate_get+0x3c>
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8003da4:	2302      	movs	r3, #2
 8003da6:	7023      	strb	r3, [r4, #0]
        break;
 8003da8:	e7f4      	b.n	8003d94 <ism330dhcx_mlc_data_rate_get+0x3c>
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8003daa:	2303      	movs	r3, #3
 8003dac:	7023      	strb	r3, [r4, #0]
        break;
 8003dae:	e7f1      	b.n	8003d94 <ism330dhcx_mlc_data_rate_get+0x3c>
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8003db0:	2300      	movs	r3, #0
 8003db2:	7023      	strb	r3, [r4, #0]
        break;
 8003db4:	e7ee      	b.n	8003d94 <ism330dhcx_mlc_data_rate_get+0x3c>

08003db6 <ism330dhcx_xl_data_rate_set>:
{
 8003db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db8:	b083      	sub	sp, #12
 8003dba:	4605      	mov	r5, r0
 8003dbc:	460c      	mov	r4, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003dbe:	a901      	add	r1, sp, #4
 8003dc0:	f7ff ff5d 	bl	8003c7e <ism330dhcx_fsm_enable_get>
  if (ret == 0)
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d160      	bne.n	8003e8c <ism330dhcx_xl_data_rate_set+0xd6>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003dca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003dce:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003dd2:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003dd6:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003dd8:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003ddc:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003dde:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003de2:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003de4:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003de8:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003dea:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003dee:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003df0:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003df4:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003df6:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003dfa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8003dfe:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003e02:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e04:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e08:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e0a:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e0e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e10:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e14:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e16:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e1a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e1c:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e20:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 8003e22:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e26:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003e28:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 8003e2c:	d101      	bne.n	8003e32 <ism330dhcx_xl_data_rate_set+0x7c>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003e2e:	4626      	mov	r6, r4
 8003e30:	e02d      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003e32:	f10d 0103 	add.w	r1, sp, #3
 8003e36:	4628      	mov	r0, r5
 8003e38:	f7ff ff43 	bl	8003cc2 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	bb78      	cbnz	r0, 8003ea0 <ism330dhcx_xl_data_rate_set+0xea>
        switch (fsm_odr)
 8003e40:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d82d      	bhi.n	8003ea4 <ism330dhcx_xl_data_rate_set+0xee>
 8003e48:	e8df f003 	tbb	[pc, r3]
 8003e4c:	150c0502 	.word	0x150c0502
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003e50:	bb54      	cbnz	r4, 8003ea8 <ism330dhcx_xl_data_rate_set+0xf2>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003e52:	2601      	movs	r6, #1
 8003e54:	e01b      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003e56:	b34c      	cbz	r4, 8003eac <ism330dhcx_xl_data_rate_set+0xf6>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003e58:	2c01      	cmp	r4, #1
 8003e5a:	d001      	beq.n	8003e60 <ism330dhcx_xl_data_rate_set+0xaa>
              odr_xl = val;
 8003e5c:	4626      	mov	r6, r4
 8003e5e:	e016      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003e60:	2602      	movs	r6, #2
 8003e62:	e014      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003e64:	b324      	cbz	r4, 8003eb0 <ism330dhcx_xl_data_rate_set+0xfa>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003e66:	2c01      	cmp	r4, #1
 8003e68:	d024      	beq.n	8003eb4 <ism330dhcx_xl_data_rate_set+0xfe>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8003e6a:	2c02      	cmp	r4, #2
 8003e6c:	d001      	beq.n	8003e72 <ism330dhcx_xl_data_rate_set+0xbc>
              odr_xl = val;
 8003e6e:	4626      	mov	r6, r4
 8003e70:	e00d      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003e72:	2603      	movs	r6, #3
 8003e74:	e00b      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003e76:	b1fc      	cbz	r4, 8003eb8 <ism330dhcx_xl_data_rate_set+0x102>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003e78:	2c02      	cmp	r4, #2
 8003e7a:	d01f      	beq.n	8003ebc <ism330dhcx_xl_data_rate_set+0x106>
 8003e7c:	2c03      	cmp	r4, #3
 8003e7e:	d01f      	beq.n	8003ec0 <ism330dhcx_xl_data_rate_set+0x10a>
 8003e80:	2c01      	cmp	r4, #1
 8003e82:	d001      	beq.n	8003e88 <ism330dhcx_xl_data_rate_set+0xd2>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003e84:	4626      	mov	r6, r4
 8003e86:	e002      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
 8003e88:	2604      	movs	r6, #4
 8003e8a:	e000      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003e8c:	4626      	mov	r6, r4
  mlc_enable = PROPERTY_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0)
 8003e94:	b1b2      	cbz	r2, 8003ec4 <ism330dhcx_xl_data_rate_set+0x10e>
  if (ret == 0)
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d066      	beq.n	8003f68 <ism330dhcx_xl_data_rate_set+0x1b2>
}
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	b003      	add	sp, #12
 8003e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003ea0:	4626      	mov	r6, r4
 8003ea2:	e7f4      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
        switch (fsm_odr)
 8003ea4:	4626      	mov	r6, r4
 8003ea6:	e7f2      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = val;
 8003ea8:	4626      	mov	r6, r4
 8003eaa:	e7f0      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003eac:	2602      	movs	r6, #2
 8003eae:	e7ee      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003eb0:	2603      	movs	r6, #3
 8003eb2:	e7ec      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003eb4:	2603      	movs	r6, #3
 8003eb6:	e7ea      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003eb8:	2604      	movs	r6, #4
 8003eba:	e7e8      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003ebc:	2604      	movs	r6, #4
 8003ebe:	e7e6      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
 8003ec0:	2604      	movs	r6, #4
 8003ec2:	e7e4      	b.n	8003e8e <ism330dhcx_xl_data_rate_set+0xd8>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003ec4:	f10d 0102 	add.w	r1, sp, #2
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff ff29 	bl	8003d20 <ism330dhcx_mlc_get>
 8003ece:	4602      	mov	r2, r0
    if (mlc_enable == PROPERTY_ENABLE)
 8003ed0:	f89d 7002 	ldrb.w	r7, [sp, #2]
 8003ed4:	2f01      	cmp	r7, #1
 8003ed6:	d009      	beq.n	8003eec <ism330dhcx_xl_data_rate_set+0x136>
  if (ret == 0)
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d1de      	bne.n	8003e9a <ism330dhcx_xl_data_rate_set+0xe4>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003edc:	2301      	movs	r3, #1
 8003ede:	466a      	mov	r2, sp
 8003ee0:	2110      	movs	r1, #16
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f7ff fce8 	bl	80038b8 <ism330dhcx_read_reg>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	e7d4      	b.n	8003e96 <ism330dhcx_xl_data_rate_set+0xe0>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003eec:	f10d 0101 	add.w	r1, sp, #1
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f7ff ff31 	bl	8003d58 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d1ce      	bne.n	8003e9a <ism330dhcx_xl_data_rate_set+0xe4>
        switch (mlc_odr)
 8003efc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d821      	bhi.n	8003f48 <ism330dhcx_xl_data_rate_set+0x192>
 8003f04:	e8df f003 	tbb	[pc, r3]
 8003f08:	150c0502 	.word	0x150c0502
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003f0c:	b9f4      	cbnz	r4, 8003f4c <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003f0e:	463e      	mov	r6, r7
 8003f10:	e7e2      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003f12:	b1ec      	cbz	r4, 8003f50 <ism330dhcx_xl_data_rate_set+0x19a>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003f14:	2c01      	cmp	r4, #1
 8003f16:	d001      	beq.n	8003f1c <ism330dhcx_xl_data_rate_set+0x166>
              odr_xl = val;
 8003f18:	4626      	mov	r6, r4
 8003f1a:	e7dd      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003f1c:	2602      	movs	r6, #2
 8003f1e:	e7db      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003f20:	b1c4      	cbz	r4, 8003f54 <ism330dhcx_xl_data_rate_set+0x19e>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003f22:	2c01      	cmp	r4, #1
 8003f24:	d018      	beq.n	8003f58 <ism330dhcx_xl_data_rate_set+0x1a2>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8003f26:	2c02      	cmp	r4, #2
 8003f28:	d001      	beq.n	8003f2e <ism330dhcx_xl_data_rate_set+0x178>
              odr_xl = val;
 8003f2a:	4626      	mov	r6, r4
 8003f2c:	e7d4      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003f2e:	2603      	movs	r6, #3
 8003f30:	e7d2      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003f32:	b19c      	cbz	r4, 8003f5c <ism330dhcx_xl_data_rate_set+0x1a6>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003f34:	2c02      	cmp	r4, #2
 8003f36:	d013      	beq.n	8003f60 <ism330dhcx_xl_data_rate_set+0x1aa>
 8003f38:	2c03      	cmp	r4, #3
 8003f3a:	d013      	beq.n	8003f64 <ism330dhcx_xl_data_rate_set+0x1ae>
 8003f3c:	2c01      	cmp	r4, #1
 8003f3e:	d001      	beq.n	8003f44 <ism330dhcx_xl_data_rate_set+0x18e>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003f40:	4626      	mov	r6, r4
 8003f42:	e7c9      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
 8003f44:	2604      	movs	r6, #4
 8003f46:	e7c7      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
        switch (mlc_odr)
 8003f48:	4626      	mov	r6, r4
 8003f4a:	e7c5      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = val;
 8003f4c:	4626      	mov	r6, r4
 8003f4e:	e7c3      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003f50:	2602      	movs	r6, #2
 8003f52:	e7c1      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003f54:	2603      	movs	r6, #3
 8003f56:	e7bf      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003f58:	2603      	movs	r6, #3
 8003f5a:	e7bd      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003f5c:	2604      	movs	r6, #4
 8003f5e:	e7bb      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003f60:	2604      	movs	r6, #4
 8003f62:	e7b9      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
 8003f64:	2604      	movs	r6, #4
 8003f66:	e7b7      	b.n	8003ed8 <ism330dhcx_xl_data_rate_set+0x122>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003f68:	f89d 3000 	ldrb.w	r3, [sp]
 8003f6c:	f366 1307 	bfi	r3, r6, #4, #4
 8003f70:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003f74:	2301      	movs	r3, #1
 8003f76:	466a      	mov	r2, sp
 8003f78:	2110      	movs	r1, #16
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7ff fca1 	bl	80038c2 <ism330dhcx_write_reg>
 8003f80:	4602      	mov	r2, r0
  return ret;
 8003f82:	e78a      	b.n	8003e9a <ism330dhcx_xl_data_rate_set+0xe4>

08003f84 <ism330dhcx_gy_data_rate_set>:
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b083      	sub	sp, #12
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460c      	mov	r4, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003f8c:	a901      	add	r1, sp, #4
 8003f8e:	f7ff fe76 	bl	8003c7e <ism330dhcx_fsm_enable_get>
  if (ret == 0)
 8003f92:	4602      	mov	r2, r0
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d160      	bne.n	800405a <ism330dhcx_gy_data_rate_set+0xd6>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003f98:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003f9c:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003fa0:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003fa4:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003fa6:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003faa:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003fac:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003fb0:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003fb2:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003fb6:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003fb8:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003fbc:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003fbe:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003fc2:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003fc4:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003fc8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8003fcc:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003fd0:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 8003fd2:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003fd6:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 8003fd8:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8003fdc:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 8003fde:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8003fe2:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 8003fe4:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8003fe8:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 8003fea:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8003fee:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 8003ff0:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8003ff4:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003ff6:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 8003ffa:	d101      	bne.n	8004000 <ism330dhcx_gy_data_rate_set+0x7c>
  ism330dhcx_odr_g_t odr_gy =  val;
 8003ffc:	4626      	mov	r6, r4
 8003ffe:	e02d      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004000:	f10d 0103 	add.w	r1, sp, #3
 8004004:	4628      	mov	r0, r5
 8004006:	f7ff fe5c 	bl	8003cc2 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
 800400a:	4602      	mov	r2, r0
 800400c:	bb78      	cbnz	r0, 800406e <ism330dhcx_gy_data_rate_set+0xea>
        switch (fsm_odr)
 800400e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d82d      	bhi.n	8004072 <ism330dhcx_gy_data_rate_set+0xee>
 8004016:	e8df f003 	tbb	[pc, r3]
 800401a:	0502      	.short	0x0502
 800401c:	150c      	.short	0x150c
            if (val == ISM330DHCX_GY_ODR_OFF)
 800401e:	bb54      	cbnz	r4, 8004076 <ism330dhcx_gy_data_rate_set+0xf2>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004020:	2601      	movs	r6, #1
 8004022:	e01b      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004024:	b34c      	cbz	r4, 800407a <ism330dhcx_gy_data_rate_set+0xf6>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004026:	2c01      	cmp	r4, #1
 8004028:	d001      	beq.n	800402e <ism330dhcx_gy_data_rate_set+0xaa>
              odr_gy = val;
 800402a:	4626      	mov	r6, r4
 800402c:	e016      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800402e:	2602      	movs	r6, #2
 8004030:	e014      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004032:	b324      	cbz	r4, 800407e <ism330dhcx_gy_data_rate_set+0xfa>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004034:	2c01      	cmp	r4, #1
 8004036:	d024      	beq.n	8004082 <ism330dhcx_gy_data_rate_set+0xfe>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8004038:	2c02      	cmp	r4, #2
 800403a:	d001      	beq.n	8004040 <ism330dhcx_gy_data_rate_set+0xbc>
              odr_gy = val;
 800403c:	4626      	mov	r6, r4
 800403e:	e00d      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004040:	2603      	movs	r6, #3
 8004042:	e00b      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004044:	b1fc      	cbz	r4, 8004086 <ism330dhcx_gy_data_rate_set+0x102>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004046:	2c02      	cmp	r4, #2
 8004048:	d01f      	beq.n	800408a <ism330dhcx_gy_data_rate_set+0x106>
 800404a:	2c03      	cmp	r4, #3
 800404c:	d01f      	beq.n	800408e <ism330dhcx_gy_data_rate_set+0x10a>
 800404e:	2c01      	cmp	r4, #1
 8004050:	d001      	beq.n	8004056 <ism330dhcx_gy_data_rate_set+0xd2>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004052:	4626      	mov	r6, r4
 8004054:	e002      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
 8004056:	2604      	movs	r6, #4
 8004058:	e000      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
  ism330dhcx_odr_g_t odr_gy =  val;
 800405a:	4626      	mov	r6, r4
  mlc_enable = PROPERTY_DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0)
 8004062:	b1b2      	cbz	r2, 8004092 <ism330dhcx_gy_data_rate_set+0x10e>
  if (ret == 0)
 8004064:	2a00      	cmp	r2, #0
 8004066:	d066      	beq.n	8004136 <ism330dhcx_gy_data_rate_set+0x1b2>
}
 8004068:	4610      	mov	r0, r2
 800406a:	b003      	add	sp, #12
 800406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ism330dhcx_odr_g_t odr_gy =  val;
 800406e:	4626      	mov	r6, r4
 8004070:	e7f4      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
        switch (fsm_odr)
 8004072:	4626      	mov	r6, r4
 8004074:	e7f2      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = val;
 8004076:	4626      	mov	r6, r4
 8004078:	e7f0      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800407a:	2602      	movs	r6, #2
 800407c:	e7ee      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800407e:	2603      	movs	r6, #3
 8004080:	e7ec      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004082:	2603      	movs	r6, #3
 8004084:	e7ea      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004086:	2604      	movs	r6, #4
 8004088:	e7e8      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800408a:	2604      	movs	r6, #4
 800408c:	e7e6      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
 800408e:	2604      	movs	r6, #4
 8004090:	e7e4      	b.n	800405c <ism330dhcx_gy_data_rate_set+0xd8>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004092:	f10d 0102 	add.w	r1, sp, #2
 8004096:	4628      	mov	r0, r5
 8004098:	f7ff fe42 	bl	8003d20 <ism330dhcx_mlc_get>
 800409c:	4602      	mov	r2, r0
    if (mlc_enable == PROPERTY_ENABLE)
 800409e:	f89d 7002 	ldrb.w	r7, [sp, #2]
 80040a2:	2f01      	cmp	r7, #1
 80040a4:	d009      	beq.n	80040ba <ism330dhcx_gy_data_rate_set+0x136>
  if (ret == 0)
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	d1de      	bne.n	8004068 <ism330dhcx_gy_data_rate_set+0xe4>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80040aa:	2301      	movs	r3, #1
 80040ac:	466a      	mov	r2, sp
 80040ae:	2111      	movs	r1, #17
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7ff fc01 	bl	80038b8 <ism330dhcx_read_reg>
 80040b6:	4602      	mov	r2, r0
 80040b8:	e7d4      	b.n	8004064 <ism330dhcx_gy_data_rate_set+0xe0>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80040ba:	f10d 0101 	add.w	r1, sp, #1
 80040be:	4628      	mov	r0, r5
 80040c0:	f7ff fe4a 	bl	8003d58 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
 80040c4:	4602      	mov	r2, r0
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d1ce      	bne.n	8004068 <ism330dhcx_gy_data_rate_set+0xe4>
        switch (mlc_odr)
 80040ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d821      	bhi.n	8004116 <ism330dhcx_gy_data_rate_set+0x192>
 80040d2:	e8df f003 	tbb	[pc, r3]
 80040d6:	0502      	.short	0x0502
 80040d8:	150c      	.short	0x150c
            if (val == ISM330DHCX_GY_ODR_OFF)
 80040da:	b9f4      	cbnz	r4, 800411a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80040dc:	463e      	mov	r6, r7
 80040de:	e7e2      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80040e0:	b1ec      	cbz	r4, 800411e <ism330dhcx_gy_data_rate_set+0x19a>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80040e2:	2c01      	cmp	r4, #1
 80040e4:	d001      	beq.n	80040ea <ism330dhcx_gy_data_rate_set+0x166>
              odr_gy = val;
 80040e6:	4626      	mov	r6, r4
 80040e8:	e7dd      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80040ea:	2602      	movs	r6, #2
 80040ec:	e7db      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80040ee:	b1c4      	cbz	r4, 8004122 <ism330dhcx_gy_data_rate_set+0x19e>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80040f0:	2c01      	cmp	r4, #1
 80040f2:	d018      	beq.n	8004126 <ism330dhcx_gy_data_rate_set+0x1a2>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80040f4:	2c02      	cmp	r4, #2
 80040f6:	d001      	beq.n	80040fc <ism330dhcx_gy_data_rate_set+0x178>
              odr_gy = val;
 80040f8:	4626      	mov	r6, r4
 80040fa:	e7d4      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80040fc:	2603      	movs	r6, #3
 80040fe:	e7d2      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004100:	b19c      	cbz	r4, 800412a <ism330dhcx_gy_data_rate_set+0x1a6>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004102:	2c02      	cmp	r4, #2
 8004104:	d013      	beq.n	800412e <ism330dhcx_gy_data_rate_set+0x1aa>
 8004106:	2c03      	cmp	r4, #3
 8004108:	d013      	beq.n	8004132 <ism330dhcx_gy_data_rate_set+0x1ae>
 800410a:	2c01      	cmp	r4, #1
 800410c:	d001      	beq.n	8004112 <ism330dhcx_gy_data_rate_set+0x18e>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800410e:	4626      	mov	r6, r4
 8004110:	e7c9      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
 8004112:	2604      	movs	r6, #4
 8004114:	e7c7      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
        switch (mlc_odr)
 8004116:	4626      	mov	r6, r4
 8004118:	e7c5      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = val;
 800411a:	4626      	mov	r6, r4
 800411c:	e7c3      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800411e:	2602      	movs	r6, #2
 8004120:	e7c1      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004122:	2603      	movs	r6, #3
 8004124:	e7bf      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004126:	2603      	movs	r6, #3
 8004128:	e7bd      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800412a:	2604      	movs	r6, #4
 800412c:	e7bb      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800412e:	2604      	movs	r6, #4
 8004130:	e7b9      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
 8004132:	2604      	movs	r6, #4
 8004134:	e7b7      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x122>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004136:	f89d 3000 	ldrb.w	r3, [sp]
 800413a:	f366 1307 	bfi	r3, r6, #4, #4
 800413e:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004142:	2301      	movs	r3, #1
 8004144:	466a      	mov	r2, sp
 8004146:	2111      	movs	r1, #17
 8004148:	4628      	mov	r0, r5
 800414a:	f7ff fbba 	bl	80038c2 <ism330dhcx_write_reg>
 800414e:	4602      	mov	r2, r0
  return ret;
 8004150:	e78a      	b.n	8004068 <ism330dhcx_gy_data_rate_set+0xe4>
	...

08004154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	2400      	movs	r4, #0
 800415a:	9405      	str	r4, [sp, #20]
 800415c:	9406      	str	r4, [sp, #24]
 800415e:	9407      	str	r4, [sp, #28]
 8004160:	9408      	str	r4, [sp, #32]
 8004162:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004164:	9401      	str	r4, [sp, #4]
 8004166:	4b2e      	ldr	r3, [pc, #184]	@ (8004220 <MX_GPIO_Init+0xcc>)
 8004168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416a:	f042 0204 	orr.w	r2, r2, #4
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004172:	f002 0204 	and.w	r2, r2, #4
 8004176:	9201      	str	r2, [sp, #4]
 8004178:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800417a:	9402      	str	r4, [sp, #8]
 800417c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800417e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
 8004184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004186:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800418a:	9202      	str	r2, [sp, #8]
 800418c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800418e:	9403      	str	r4, [sp, #12]
 8004190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
 8004198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800419a:	f002 0201 	and.w	r2, r2, #1
 800419e:	9203      	str	r2, [sp, #12]
 80041a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a2:	9404      	str	r4, [sp, #16]
 80041a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a6:	f042 0202 	orr.w	r2, r2, #2
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	9304      	str	r3, [sp, #16]
 80041b4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80041b6:	4d1b      	ldr	r5, [pc, #108]	@ (8004224 <MX_GPIO_Init+0xd0>)
 80041b8:	4622      	mov	r2, r4
 80041ba:	2120      	movs	r1, #32
 80041bc:	4628      	mov	r0, r5
 80041be:	f001 f80c 	bl	80051da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80041c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041c8:	f44f 1604 	mov.w	r6, #2162688	@ 0x210000
 80041cc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041d0:	a905      	add	r1, sp, #20
 80041d2:	4815      	ldr	r0, [pc, #84]	@ (8004228 <MX_GPIO_Init+0xd4>)
 80041d4:	f000 fe8e 	bl	8004ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_INT_Pin */
  GPIO_InitStruct.Pin = L1_INT_Pin;
 80041d8:	2310      	movs	r3, #16
 80041da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041dc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041de:	2601      	movs	r6, #1
 80041e0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(L1_INT_GPIO_Port, &GPIO_InitStruct);
 80041e2:	a905      	add	r1, sp, #20
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 fe85 	bl	8004ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80041ea:	2320      	movs	r3, #32
 80041ec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ee:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80041f4:	a905      	add	r1, sp, #20
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fe7c 	bl	8004ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80041fc:	4622      	mov	r2, r4
 80041fe:	4621      	mov	r1, r4
 8004200:	200a      	movs	r0, #10
 8004202:	f000 fc5f 	bl	8004ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004206:	200a      	movs	r0, #10
 8004208:	f000 fc6c 	bl	8004ae4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800420c:	4622      	mov	r2, r4
 800420e:	4621      	mov	r1, r4
 8004210:	2028      	movs	r0, #40	@ 0x28
 8004212:	f000 fc57 	bl	8004ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004216:	2028      	movs	r0, #40	@ 0x28
 8004218:	f000 fc64 	bl	8004ae4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800421c:	b00a      	add	sp, #40	@ 0x28
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	40023800 	.word	0x40023800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020800 	.word	0x40020800

0800422c <MX_DMA_Init>:
{
 800422c:	b510      	push	{r4, lr}
 800422e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004230:	2400      	movs	r4, #0
 8004232:	9401      	str	r4, [sp, #4]
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <MX_DMA_Init+0x50>)
 8004236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004238:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004248:	4622      	mov	r2, r4
 800424a:	4621      	mov	r1, r4
 800424c:	200b      	movs	r0, #11
 800424e:	f000 fc39 	bl	8004ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004252:	200b      	movs	r0, #11
 8004254:	f000 fc46 	bl	8004ae4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004258:	4622      	mov	r2, r4
 800425a:	4621      	mov	r1, r4
 800425c:	200c      	movs	r0, #12
 800425e:	f000 fc31 	bl	8004ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004262:	200c      	movs	r0, #12
 8004264:	f000 fc3e 	bl	8004ae4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004268:	4622      	mov	r2, r4
 800426a:	4621      	mov	r1, r4
 800426c:	2011      	movs	r0, #17
 800426e:	f000 fc29 	bl	8004ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004272:	2011      	movs	r0, #17
 8004274:	f000 fc36 	bl	8004ae4 <HAL_NVIC_EnableIRQ>
}
 8004278:	b002      	add	sp, #8
 800427a:	bd10      	pop	{r4, pc}
 800427c:	40023800 	.word	0x40023800

08004280 <bytesToFloat_main>:
float   bytesToFloat_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4) {
 8004280:	b082      	sub	sp, #8
    uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 8004282:	f88d 0004 	strb.w	r0, [sp, #4]
 8004286:	f88d 1005 	strb.w	r1, [sp, #5]
 800428a:	f88d 2006 	strb.w	r2, [sp, #6]
 800428e:	f88d 3007 	strb.w	r3, [sp, #7]
}
 8004292:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004296:	b002      	add	sp, #8
 8004298:	4770      	bx	lr

0800429a <bytesToInt32_main>:
int32_t bytesToInt32_main(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4)  {
 800429a:	b082      	sub	sp, #8
    uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 800429c:	f88d 0004 	strb.w	r0, [sp, #4]
 80042a0:	f88d 1005 	strb.w	r1, [sp, #5]
 80042a4:	f88d 2006 	strb.w	r2, [sp, #6]
 80042a8:	f88d 3007 	strb.w	r3, [sp, #7]
}
 80042ac:	9801      	ldr	r0, [sp, #4]
 80042ae:	b002      	add	sp, #8
 80042b0:	4770      	bx	lr
	...

080042b4 <receivedFromSimulink>:
void receivedFromSimulink(uint8_t* bigBuffer){
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4604      	mov	r4, r0
    tof_fsr = bytesToInt32_main(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuffer[3  + 3] );
 80042b8:	7983      	ldrb	r3, [r0, #6]
 80042ba:	7942      	ldrb	r2, [r0, #5]
 80042bc:	7901      	ldrb	r1, [r0, #4]
 80042be:	78c0      	ldrb	r0, [r0, #3]
 80042c0:	f7ff ffeb 	bl	800429a <bytesToInt32_main>
 80042c4:	4b26      	ldr	r3, [pc, #152]	@ (8004360 <receivedFromSimulink+0xac>)
 80042c6:	6018      	str	r0, [r3, #0]
    tof_odr = bytesToInt32_main(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuffer[7  + 3] );
 80042c8:	7aa3      	ldrb	r3, [r4, #10]
 80042ca:	7a62      	ldrb	r2, [r4, #9]
 80042cc:	7a21      	ldrb	r1, [r4, #8]
 80042ce:	79e0      	ldrb	r0, [r4, #7]
 80042d0:	f7ff ffe3 	bl	800429a <bytesToInt32_main>
 80042d4:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <receivedFromSimulink+0xb0>)
 80042d6:	6018      	str	r0, [r3, #0]
    accel1_fsr = bytesToInt32_main(bigBuffer[11 + 0] , bigBuffer[11 + 1] , bigBuffer[11 + 2] ,  bigBuffer[11 + 3] );
 80042d8:	7ba3      	ldrb	r3, [r4, #14]
 80042da:	7b62      	ldrb	r2, [r4, #13]
 80042dc:	7b21      	ldrb	r1, [r4, #12]
 80042de:	7ae0      	ldrb	r0, [r4, #11]
 80042e0:	f7ff ffdb 	bl	800429a <bytesToInt32_main>
 80042e4:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <receivedFromSimulink+0xb4>)
 80042e6:	6018      	str	r0, [r3, #0]
    accel1_odr = bytesToFloat_main(bigBuffer[15 + 0] , bigBuffer[15 + 1] , bigBuffer[15 + 2] ,  bigBuffer[15 + 3] );
 80042e8:	7ca3      	ldrb	r3, [r4, #18]
 80042ea:	7c62      	ldrb	r2, [r4, #17]
 80042ec:	7c21      	ldrb	r1, [r4, #16]
 80042ee:	7be0      	ldrb	r0, [r4, #15]
 80042f0:	f7ff ffc6 	bl	8004280 <bytesToFloat_main>
 80042f4:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <receivedFromSimulink+0xb8>)
 80042f6:	ed83 0a00 	vstr	s0, [r3]
    gyro_fsr =   bytesToInt32_main(bigBuffer[19 + 0] , bigBuffer[19 + 1] , bigBuffer[19 + 2] ,  bigBuffer[19 + 3] );
 80042fa:	7da3      	ldrb	r3, [r4, #22]
 80042fc:	7d62      	ldrb	r2, [r4, #21]
 80042fe:	7d21      	ldrb	r1, [r4, #20]
 8004300:	7ce0      	ldrb	r0, [r4, #19]
 8004302:	f7ff ffca 	bl	800429a <bytesToInt32_main>
 8004306:	4b1a      	ldr	r3, [pc, #104]	@ (8004370 <receivedFromSimulink+0xbc>)
 8004308:	6018      	str	r0, [r3, #0]
    gyro_odr =   bytesToFloat_main(bigBuffer[23 + 0] , bigBuffer[23 + 1] , bigBuffer[23 + 2] ,  bigBuffer[23 + 3] );
 800430a:	7ea3      	ldrb	r3, [r4, #26]
 800430c:	7e62      	ldrb	r2, [r4, #25]
 800430e:	7e21      	ldrb	r1, [r4, #24]
 8004310:	7de0      	ldrb	r0, [r4, #23]
 8004312:	f7ff ffb5 	bl	8004280 <bytesToFloat_main>
 8004316:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <receivedFromSimulink+0xc0>)
 8004318:	ed83 0a00 	vstr	s0, [r3]
    accel2_fsr = bytesToInt32_main(bigBuffer[27 + 0] , bigBuffer[27 + 1] , bigBuffer[27 + 2] ,  bigBuffer[27 + 3] );
 800431c:	7fa3      	ldrb	r3, [r4, #30]
 800431e:	7f62      	ldrb	r2, [r4, #29]
 8004320:	7f21      	ldrb	r1, [r4, #28]
 8004322:	7ee0      	ldrb	r0, [r4, #27]
 8004324:	f7ff ffb9 	bl	800429a <bytesToInt32_main>
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <receivedFromSimulink+0xc4>)
 800432a:	6018      	str	r0, [r3, #0]
    accel2_odr = bytesToFloat_main(bigBuffer[31 + 0] , bigBuffer[31 + 1] , bigBuffer[31 + 2] ,  bigBuffer[31 + 3] );
 800432c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8004330:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 8004334:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004338:	7fe0      	ldrb	r0, [r4, #31]
 800433a:	f7ff ffa1 	bl	8004280 <bytesToFloat_main>
 800433e:	4b0f      	ldr	r3, [pc, #60]	@ (800437c <receivedFromSimulink+0xc8>)
 8004340:	ed83 0a00 	vstr	s0, [r3]
    mag_odr =    bytesToFloat_main(bigBuffer[35 + 0] , bigBuffer[35 + 1] , bigBuffer[35 + 2] ,  bigBuffer[35 + 3] );
 8004344:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8004348:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800434c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 8004350:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8004354:	f7ff ff94 	bl	8004280 <bytesToFloat_main>
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <receivedFromSimulink+0xcc>)
 800435a:	ed83 0a00 	vstr	s0, [r3]
}
 800435e:	bd10      	pop	{r4, pc}
 8004360:	200000d8 	.word	0x200000d8
 8004364:	200000d4 	.word	0x200000d4
 8004368:	20000180 	.word	0x20000180
 800436c:	2000017c 	.word	0x2000017c
 8004370:	20000178 	.word	0x20000178
 8004374:	20000174 	.word	0x20000174
 8004378:	20000170 	.word	0x20000170
 800437c:	2000016c 	.word	0x2000016c
 8004380:	20000168 	.word	0x20000168

08004384 <configureTimer>:
void configureTimer(float desired_frequency, TIM_TypeDef* tim) {
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4605      	mov	r5, r0
    float clock_frequency = SystemCoreClock; // 100 MHz
 8004388:	4b11      	ldr	r3, [pc, #68]	@ (80043d0 <configureTimer+0x4c>)
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    float timer_period = clock_frequency / desired_frequency;
 8004392:	ee87 7a80 	vdiv.f32	s14, s15, s0
    uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 8004396:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80043d4 <configureTimer+0x50>
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a2:	ee17 4a90 	vmov	r4, s15
    if (prescaler > 65535) {
 80043a6:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 80043aa:	d301      	bcc.n	80043b0 <configureTimer+0x2c>
        prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 80043ac:	f64f 74ff 	movw	r4, #65535	@ 0xffff
    uint64_t arr = (uint64_t)(timer_period / (prescaler + 1));
 80043b0:	1c63      	adds	r3, r4, #1
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ba:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80043be:	ee17 0a90 	vmov	r0, s15
 80043c2:	f003 ffa5 	bl	8008310 <__aeabi_f2ulz>
    tim->PSC = prescaler;   // Set the prescaler
 80043c6:	62ac      	str	r4, [r5, #40]	@ 0x28
    tim->ARR = arr;         // Set the auto-reload register
 80043c8:	62e8      	str	r0, [r5, #44]	@ 0x2c
    tim->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 80043ca:	2301      	movs	r3, #1
 80043cc:	616b      	str	r3, [r5, #20]
}
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	200000ec 	.word	0x200000ec
 80043d4:	37800000 	.word	0x37800000

080043d8 <get_fastest_odr>:
float get_fastest_odr(float odr1, float odr2, float odr3, float odr4, float odr5) {
 80043d8:	eef0 7a40 	vmov.f32	s15, s0
 80043dc:	eeb0 0a42 	vmov.f32	s0, s4
    if (odr2 > fastest) {
 80043e0:	eef4 7ae0 	vcmpe.f32	s15, s1
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d401      	bmi.n	80043ee <get_fastest_odr+0x16>
    float fastest = odr1; // Assume odr1 is the fastest initially
 80043ea:	eef0 0a67 	vmov.f32	s1, s15
    if (odr3 > fastest) {
 80043ee:	eef4 0ac1 	vcmpe.f32	s1, s2
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	d401      	bmi.n	80043fc <get_fastest_odr+0x24>
 80043f8:	eeb0 1a60 	vmov.f32	s2, s1
    if (odr4 > fastest) {
 80043fc:	eeb4 1ae1 	vcmpe.f32	s2, s3
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	d401      	bmi.n	800440a <get_fastest_odr+0x32>
 8004406:	eef0 1a41 	vmov.f32	s3, s2
    if (odr5 > fastest) {
 800440a:	eef4 1ac0 	vcmpe.f32	s3, s0
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d401      	bmi.n	8004418 <get_fastest_odr+0x40>
 8004414:	eeb0 0a61 	vmov.f32	s0, s3
}
 8004418:	4770      	bx	lr
	...

0800441c <sendToSimulink>:
void sendToSimulink(){
 800441c:	b538      	push	{r3, r4, r5, lr}
    HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 800441e:	4c6f      	ldr	r4, [pc, #444]	@ (80045dc <sendToSimulink+0x1c0>)
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	2203      	movs	r2, #3
 8004426:	496e      	ldr	r1, [pc, #440]	@ (80045e0 <sendToSimulink+0x1c4>)
 8004428:	4620      	mov	r0, r4
 800442a:	f002 ff58 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &(TOF_left_result.Distance)  , 4 , HAL_MAX_DELAY);
 800442e:	4d6d      	ldr	r5, [pc, #436]	@ (80045e4 <sendToSimulink+0x1c8>)
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	2204      	movs	r2, #4
 8004436:	4629      	mov	r1, r5
 8004438:	4620      	mov	r0, r4
 800443a:	f002 ff50 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &(TOF_left_result.Ambient )  , 4 , HAL_MAX_DELAY);
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	2204      	movs	r2, #4
 8004444:	f105 0108 	add.w	r1, r5, #8
 8004448:	4620      	mov	r0, r4
 800444a:	f002 ff48 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &(TOF_left_result.Signal  )  , 4 , HAL_MAX_DELAY);
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	2204      	movs	r2, #4
 8004454:	f105 010c 	add.w	r1, r5, #12
 8004458:	4620      	mov	r0, r4
 800445a:	f002 ff40 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &(TOF_left_result.Status  )  , 4 , HAL_MAX_DELAY);
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	2204      	movs	r2, #4
 8004464:	18a9      	adds	r1, r5, r2
 8004466:	4620      	mov	r0, r4
 8004468:	f002 ff39 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Distance)  , 4 , HAL_MAX_DELAY);
 800446c:	4d5e      	ldr	r5, [pc, #376]	@ (80045e8 <sendToSimulink+0x1cc>)
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	2204      	movs	r2, #4
 8004474:	4629      	mov	r1, r5
 8004476:	4620      	mov	r0, r4
 8004478:	f002 ff31 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Ambient )  , 4 , HAL_MAX_DELAY);
 800447c:	f04f 33ff 	mov.w	r3, #4294967295
 8004480:	2204      	movs	r2, #4
 8004482:	f105 0108 	add.w	r1, r5, #8
 8004486:	4620      	mov	r0, r4
 8004488:	f002 ff29 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Signal  )  , 4 , HAL_MAX_DELAY);
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	2204      	movs	r2, #4
 8004492:	f105 010c 	add.w	r1, r5, #12
 8004496:	4620      	mov	r0, r4
 8004498:	f002 ff21 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Status  )  , 4 , HAL_MAX_DELAY);
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
 80044a0:	2204      	movs	r2, #4
 80044a2:	18a9      	adds	r1, r5, r2
 80044a4:	4620      	mov	r0, r4
 80044a6:	f002 ff1a 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_right_result.Distance)  , 4 , HAL_MAX_DELAY);
 80044aa:	4d50      	ldr	r5, [pc, #320]	@ (80045ec <sendToSimulink+0x1d0>)
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295
 80044b0:	2204      	movs	r2, #4
 80044b2:	4629      	mov	r1, r5
 80044b4:	4620      	mov	r0, r4
 80044b6:	f002 ff12 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_right_result.Ambient )  , 4 , HAL_MAX_DELAY);
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	2204      	movs	r2, #4
 80044c0:	f105 0108 	add.w	r1, r5, #8
 80044c4:	4620      	mov	r0, r4
 80044c6:	f002 ff0a 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_right_result.Signal  )  , 4 , HAL_MAX_DELAY);
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	2204      	movs	r2, #4
 80044d0:	f105 010c 	add.w	r1, r5, #12
 80044d4:	4620      	mov	r0, r4
 80044d6:	f002 ff02 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  &(TOF_right_result.Status  )  , 4 , HAL_MAX_DELAY);
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	2204      	movs	r2, #4
 80044e0:	18a9      	adds	r1, r5, r2
 80044e2:	4620      	mov	r0, r4
 80044e4:	f002 fefb 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &(accel1_axis.x)  ,4 , HAL_MAX_DELAY);
 80044e8:	4d41      	ldr	r5, [pc, #260]	@ (80045f0 <sendToSimulink+0x1d4>)
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	2204      	movs	r2, #4
 80044f0:	4629      	mov	r1, r5
 80044f2:	4620      	mov	r0, r4
 80044f4:	f002 fef3 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	2204      	movs	r2, #4
 80044fe:	18a9      	adds	r1, r5, r2
 8004500:	4620      	mov	r0, r4
 8004502:	f002 feec 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	2204      	movs	r2, #4
 800450c:	f105 0108 	add.w	r1, r5, #8
 8004510:	4620      	mov	r0, r4
 8004512:	f002 fee4 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
 8004516:	4d37      	ldr	r5, [pc, #220]	@ (80045f4 <sendToSimulink+0x1d8>)
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	2204      	movs	r2, #4
 800451e:	4629      	mov	r1, r5
 8004520:	4620      	mov	r0, r4
 8004522:	f002 fedc 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	2204      	movs	r2, #4
 800452c:	18a9      	adds	r1, r5, r2
 800452e:	4620      	mov	r0, r4
 8004530:	f002 fed5 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
 8004534:	f04f 33ff 	mov.w	r3, #4294967295
 8004538:	2204      	movs	r2, #4
 800453a:	f105 0108 	add.w	r1, r5, #8
 800453e:	4620      	mov	r0, r4
 8004540:	f002 fecd 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 8004544:	4d2c      	ldr	r5, [pc, #176]	@ (80045f8 <sendToSimulink+0x1dc>)
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	2204      	movs	r2, #4
 800454c:	4629      	mov	r1, r5
 800454e:	4620      	mov	r0, r4
 8004550:	f002 fec5 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
 8004558:	2204      	movs	r2, #4
 800455a:	18a9      	adds	r1, r5, r2
 800455c:	4620      	mov	r0, r4
 800455e:	f002 febe 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	2204      	movs	r2, #4
 8004568:	f105 0108 	add.w	r1, r5, #8
 800456c:	4620      	mov	r0, r4
 800456e:	f002 feb6 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 8004572:	f04f 33ff 	mov.w	r3, #4294967295
 8004576:	2204      	movs	r2, #4
 8004578:	4920      	ldr	r1, [pc, #128]	@ (80045fc <sendToSimulink+0x1e0>)
 800457a:	4620      	mov	r0, r4
 800457c:	f002 feaf 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
 8004580:	4d1f      	ldr	r5, [pc, #124]	@ (8004600 <sendToSimulink+0x1e4>)
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	2204      	movs	r2, #4
 8004588:	4629      	mov	r1, r5
 800458a:	4620      	mov	r0, r4
 800458c:	f002 fea7 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	2204      	movs	r2, #4
 8004596:	18a9      	adds	r1, r5, r2
 8004598:	4620      	mov	r0, r4
 800459a:	f002 fea0 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	2204      	movs	r2, #4
 80045a4:	f105 0108 	add.w	r1, r5, #8
 80045a8:	4620      	mov	r0, r4
 80045aa:	f002 fe98 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (int32_t *) &counter          ,4 , HAL_MAX_DELAY);
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	2204      	movs	r2, #4
 80045b4:	4913      	ldr	r1, [pc, #76]	@ (8004604 <sendToSimulink+0x1e8>)
 80045b6:	4620      	mov	r0, r4
 80045b8:	f002 fe91 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *) &fastestODR       ,4 , HAL_MAX_DELAY);
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295
 80045c0:	2204      	movs	r2, #4
 80045c2:	4911      	ldr	r1, [pc, #68]	@ (8004608 <sendToSimulink+0x1ec>)
 80045c4:	4620      	mov	r0, r4
 80045c6:	f002 fe8a 	bl	80072de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	2203      	movs	r2, #3
 80045d0:	490e      	ldr	r1, [pc, #56]	@ (800460c <sendToSimulink+0x1f0>)
 80045d2:	4620      	mov	r0, r4
 80045d4:	f002 fe83 	bl	80072de <HAL_UART_Transmit>
}
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	200003d8 	.word	0x200003d8
 80045e0:	200000e0 	.word	0x200000e0
 80045e4:	20000304 	.word	0x20000304
 80045e8:	200002f0 	.word	0x200002f0
 80045ec:	200002dc 	.word	0x200002dc
 80045f0:	2000036c 	.word	0x2000036c
 80045f4:	20000360 	.word	0x20000360
 80045f8:	20000354 	.word	0x20000354
 80045fc:	2000015c 	.word	0x2000015c
 8004600:	20000348 	.word	0x20000348
 8004604:	20000314 	.word	0x20000314
 8004608:	20000164 	.word	0x20000164
 800460c:	200000dc 	.word	0x200000dc

08004610 <initialCalibration>:
void initialCalibration(){
 8004610:	b510      	push	{r4, lr}
  HAL_UART_Receive(&huart2, &bigBuffer, 42 ,HAL_MAX_DELAY);
 8004612:	4c1d      	ldr	r4, [pc, #116]	@ (8004688 <initialCalibration+0x78>)
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	222a      	movs	r2, #42	@ 0x2a
 800461a:	4621      	mov	r1, r4
 800461c:	481b      	ldr	r0, [pc, #108]	@ (800468c <initialCalibration+0x7c>)
 800461e:	f002 fec4 	bl	80073aa <HAL_UART_Receive>
  if (bigBuffer[0] == expectedHeader[0] &&
 8004622:	7823      	ldrb	r3, [r4, #0]
 8004624:	2b4a      	cmp	r3, #74	@ 0x4a
 8004626:	d000      	beq.n	800462a <initialCalibration+0x1a>
}
 8004628:	bd10      	pop	{r4, pc}
      bigBuffer[1] == expectedHeader[1] &&
 800462a:	7863      	ldrb	r3, [r4, #1]
  if (bigBuffer[0] == expectedHeader[0] &&
 800462c:	2b5f      	cmp	r3, #95	@ 0x5f
 800462e:	d1fb      	bne.n	8004628 <initialCalibration+0x18>
      bigBuffer[2] == expectedHeader[2] &&
 8004630:	78a3      	ldrb	r3, [r4, #2]
      bigBuffer[1] == expectedHeader[1] &&
 8004632:	2b41      	cmp	r3, #65	@ 0x41
 8004634:	d1f8      	bne.n	8004628 <initialCalibration+0x18>
      bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 8004636:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
      bigBuffer[2] == expectedHeader[2] &&
 800463a:	2b41      	cmp	r3, #65	@ 0x41
 800463c:	d1f4      	bne.n	8004628 <initialCalibration+0x18>
      bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 800463e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
      bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 8004642:	2b5f      	cmp	r3, #95	@ 0x5f
 8004644:	d1f0      	bne.n	8004628 <initialCalibration+0x18>
      bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 8004646:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
      bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 800464a:	2b4a      	cmp	r3, #74	@ 0x4a
 800464c:	d1ec      	bne.n	8004628 <initialCalibration+0x18>
        calibrated = 1;
 800464e:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <initialCalibration+0x80>)
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]
        receivedFromSimulink(&bigBuffer);
 8004654:	4620      	mov	r0, r4
 8004656:	f7ff fe2d 	bl	80042b4 <receivedFromSimulink>
        fastestODR = get_fastest_odr(accel1_odr,gyro_odr,accel2_odr,mag_odr,tof_odr);
 800465a:	4b0e      	ldr	r3, [pc, #56]	@ (8004694 <initialCalibration+0x84>)
 800465c:	ed93 2a00 	vldr	s4, [r3]
 8004660:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8004664:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <initialCalibration+0x88>)
 8004666:	edd3 1a00 	vldr	s3, [r3]
 800466a:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <initialCalibration+0x8c>)
 800466c:	ed93 1a00 	vldr	s2, [r3]
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <initialCalibration+0x90>)
 8004672:	edd3 0a00 	vldr	s1, [r3]
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <initialCalibration+0x94>)
 8004678:	ed93 0a00 	vldr	s0, [r3]
 800467c:	f7ff feac 	bl	80043d8 <get_fastest_odr>
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <initialCalibration+0x98>)
 8004682:	ed83 0a00 	vstr	s0, [r3]
}
 8004686:	e7cf      	b.n	8004628 <initialCalibration+0x18>
 8004688:	2000031c 	.word	0x2000031c
 800468c:	200003d8 	.word	0x200003d8
 8004690:	20000318 	.word	0x20000318
 8004694:	200000d4 	.word	0x200000d4
 8004698:	20000168 	.word	0x20000168
 800469c:	2000016c 	.word	0x2000016c
 80046a0:	20000174 	.word	0x20000174
 80046a4:	2000017c 	.word	0x2000017c
 80046a8:	20000164 	.word	0x20000164

080046ac <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046ac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046ae:	e7fe      	b.n	80046ae <Error_Handler+0x2>

080046b0 <MX_USART2_UART_Init>:
{
 80046b0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80046b2:	480d      	ldr	r0, [pc, #52]	@ (80046e8 <MX_USART2_UART_Init+0x38>)
 80046b4:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <MX_USART2_UART_Init+0x3c>)
 80046b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1843200;
 80046b8:	f44f 13e1 	mov.w	r3, #1843200	@ 0x1c2000
 80046bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80046be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046c2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80046c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046c8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80046ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046ce:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046d0:	230c      	movs	r3, #12
 80046d2:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046da:	f002 fdd0 	bl	800727e <HAL_UART_Init>
 80046de:	b900      	cbnz	r0, 80046e2 <MX_USART2_UART_Init+0x32>
}
 80046e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80046e2:	f7ff ffe3 	bl	80046ac <Error_Handler>
 80046e6:	bf00      	nop
 80046e8:	200003d8 	.word	0x200003d8
 80046ec:	40004400 	.word	0x40004400

080046f0 <MX_TIM2_Init>:
{
 80046f0:	b500      	push	{lr}
 80046f2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046f4:	2300      	movs	r3, #0
 80046f6:	9302      	str	r3, [sp, #8]
 80046f8:	9303      	str	r3, [sp, #12]
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8004702:	4814      	ldr	r0, [pc, #80]	@ (8004754 <MX_TIM2_Init+0x64>)
 8004704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004708:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800470a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800470c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004714:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004716:	2380      	movs	r3, #128	@ 0x80
 8004718:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800471a:	f002 fbbf 	bl	8006e9c <HAL_TIM_Base_Init>
 800471e:	b990      	cbnz	r0, 8004746 <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004724:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004726:	a902      	add	r1, sp, #8
 8004728:	480a      	ldr	r0, [pc, #40]	@ (8004754 <MX_TIM2_Init+0x64>)
 800472a:	f002 fbf0 	bl	8006f0e <HAL_TIM_ConfigClockSource>
 800472e:	b960      	cbnz	r0, 800474a <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004730:	2300      	movs	r3, #0
 8004732:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004734:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004736:	4669      	mov	r1, sp
 8004738:	4806      	ldr	r0, [pc, #24]	@ (8004754 <MX_TIM2_Init+0x64>)
 800473a:	f002 fc67 	bl	800700c <HAL_TIMEx_MasterConfigSynchronization>
 800473e:	b930      	cbnz	r0, 800474e <MX_TIM2_Init+0x5e>
}
 8004740:	b007      	add	sp, #28
 8004742:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004746:	f7ff ffb1 	bl	80046ac <Error_Handler>
    Error_Handler();
 800474a:	f7ff ffaf 	bl	80046ac <Error_Handler>
    Error_Handler();
 800474e:	f7ff ffad 	bl	80046ac <Error_Handler>
 8004752:	bf00      	nop
 8004754:	20000468 	.word	0x20000468

08004758 <MX_TIM3_Init>:
{
 8004758:	b500      	push	{lr}
 800475a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800475c:	2300      	movs	r3, #0
 800475e:	9302      	str	r3, [sp, #8]
 8004760:	9303      	str	r3, [sp, #12]
 8004762:	9304      	str	r3, [sp, #16]
 8004764:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 800476a:	4813      	ldr	r0, [pc, #76]	@ (80047b8 <MX_TIM3_Init+0x60>)
 800476c:	4a13      	ldr	r2, [pc, #76]	@ (80047bc <MX_TIM3_Init+0x64>)
 800476e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8004770:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004772:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8004774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004778:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800477a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004780:	f002 fb8c 	bl	8006e9c <HAL_TIM_Base_Init>
 8004784:	b990      	cbnz	r0, 80047ac <MX_TIM3_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800478a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800478c:	a902      	add	r1, sp, #8
 800478e:	480a      	ldr	r0, [pc, #40]	@ (80047b8 <MX_TIM3_Init+0x60>)
 8004790:	f002 fbbd 	bl	8006f0e <HAL_TIM_ConfigClockSource>
 8004794:	b960      	cbnz	r0, 80047b0 <MX_TIM3_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800479c:	4669      	mov	r1, sp
 800479e:	4806      	ldr	r0, [pc, #24]	@ (80047b8 <MX_TIM3_Init+0x60>)
 80047a0:	f002 fc34 	bl	800700c <HAL_TIMEx_MasterConfigSynchronization>
 80047a4:	b930      	cbnz	r0, 80047b4 <MX_TIM3_Init+0x5c>
}
 80047a6:	b007      	add	sp, #28
 80047a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80047ac:	f7ff ff7e 	bl	80046ac <Error_Handler>
    Error_Handler();
 80047b0:	f7ff ff7c 	bl	80046ac <Error_Handler>
    Error_Handler();
 80047b4:	f7ff ff7a 	bl	80046ac <Error_Handler>
 80047b8:	20000420 	.word	0x20000420
 80047bc:	40000400 	.word	0x40000400

080047c0 <SystemClock_Config>:
{
 80047c0:	b500      	push	{lr}
 80047c2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047c4:	2230      	movs	r2, #48	@ 0x30
 80047c6:	2100      	movs	r1, #0
 80047c8:	a808      	add	r0, sp, #32
 80047ca:	f003 f915 	bl	80079f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047ce:	2300      	movs	r3, #0
 80047d0:	9303      	str	r3, [sp, #12]
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	9305      	str	r3, [sp, #20]
 80047d6:	9306      	str	r3, [sp, #24]
 80047d8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004858 <SystemClock_Config+0x98>)
 80047de:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80047e0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80047e4:	6411      	str	r1, [r2, #64]	@ 0x40
 80047e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047e8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80047ec:	9201      	str	r2, [sp, #4]
 80047ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <SystemClock_Config+0x9c>)
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80047fa:	6011      	str	r1, [r2, #0]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8004802:	9202      	str	r2, [sp, #8]
 8004804:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004806:	2202      	movs	r2, #2
 8004808:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800480a:	2101      	movs	r1, #1
 800480c:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800480e:	2110      	movs	r1, #16
 8004810:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004812:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004814:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004816:	2308      	movs	r3, #8
 8004818:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800481a:	2364      	movs	r3, #100	@ 0x64
 800481c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800481e:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004820:	2304      	movs	r3, #4
 8004822:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004824:	a808      	add	r0, sp, #32
 8004826:	f001 fe83 	bl	8006530 <HAL_RCC_OscConfig>
 800482a:	b988      	cbnz	r0, 8004850 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800482c:	230f      	movs	r3, #15
 800482e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004830:	2302      	movs	r3, #2
 8004832:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004834:	2300      	movs	r3, #0
 8004836:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800483c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800483e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004840:	2103      	movs	r1, #3
 8004842:	a803      	add	r0, sp, #12
 8004844:	f002 f8de 	bl	8006a04 <HAL_RCC_ClockConfig>
 8004848:	b920      	cbnz	r0, 8004854 <SystemClock_Config+0x94>
}
 800484a:	b015      	add	sp, #84	@ 0x54
 800484c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004850:	f7ff ff2c 	bl	80046ac <Error_Handler>
    Error_Handler();
 8004854:	f7ff ff2a 	bl	80046ac <Error_Handler>
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000

08004860 <main>:
{
 8004860:	b508      	push	{r3, lr}
  HAL_Init();
 8004862:	f000 f89b 	bl	800499c <HAL_Init>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 8004866:	2200      	movs	r2, #0
 8004868:	2120      	movs	r1, #32
 800486a:	482e      	ldr	r0, [pc, #184]	@ (8004924 <main+0xc4>)
 800486c:	f000 fcb5 	bl	80051da <HAL_GPIO_WritePin>
  SystemClock_Config();
 8004870:	f7ff ffa6 	bl	80047c0 <SystemClock_Config>
  MX_GPIO_Init();
 8004874:	f7ff fc6e 	bl	8004154 <MX_GPIO_Init>
  MX_DMA_Init();
 8004878:	f7ff fcd8 	bl	800422c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800487c:	f7ff ff18 	bl	80046b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8004880:	f7ff ff36 	bl	80046f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004884:	f7ff ff68 	bl	8004758 <MX_TIM3_Init>
  while (calibrated != 1){
 8004888:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <main+0xc8>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d002      	beq.n	8004896 <main+0x36>
    initialCalibration();
 8004890:	f7ff febe 	bl	8004610 <initialCalibration>
 8004894:	e7f8      	b.n	8004888 <main+0x28>
  XNUCLEO53L1A1_Init(); // initializes GPIO Expanders
 8004896:	f7fc feab 	bl	80015f0 <XNUCLEO53L1A1_Init>
  TOF_left_result.Address = ToF_Left;
 800489a:	2154      	movs	r1, #84	@ 0x54
 800489c:	4b23      	ldr	r3, [pc, #140]	@ (800492c <main+0xcc>)
 800489e:	8019      	strh	r1, [r3, #0]
  TOF_centre_result.Address = ToF_Centre;
 80048a0:	2556      	movs	r5, #86	@ 0x56
 80048a2:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <main+0xd0>)
 80048a4:	801d      	strh	r5, [r3, #0]
  TOF_right_result.Address = ToF_Right;
 80048a6:	2458      	movs	r4, #88	@ 0x58
 80048a8:	4b22      	ldr	r3, [pc, #136]	@ (8004934 <main+0xd4>)
 80048aa:	801c      	strh	r4, [r3, #0]
  initVL53L1A1(XNUCLEO53L1A1_DEV_LEFT,   ToF_Left);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7fc f991 	bl	8000bd4 <initVL53L1A1>
  initVL53L1A1(XNUCLEO53L1A1_DEV_CENTER, ToF_Centre);
 80048b2:	4629      	mov	r1, r5
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fc f98d 	bl	8000bd4 <initVL53L1A1>
  initVL53L1A1(XNUCLEO53L1A1_DEV_RIGHT,  ToF_Right);
 80048ba:	4621      	mov	r1, r4
 80048bc:	2002      	movs	r0, #2
 80048be:	f7fc f989 	bl	8000bd4 <initVL53L1A1>
  initIKS02A1();
 80048c2:	f7fc f913 	bl	8000aec <initIKS02A1>
  calibrate_IKS02A1();
 80048c6:	f7fc f947 	bl	8000b58 <calibrate_IKS02A1>
  configureTimer(fastestODR,TIM2);
 80048ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <main+0xd8>)
 80048d0:	ed93 0a00 	vldr	s0, [r3]
 80048d4:	f7ff fd56 	bl	8004384 <configureTimer>
  configureTimer(tof_odr,TIM3);
 80048d8:	4b18      	ldr	r3, [pc, #96]	@ (800493c <main+0xdc>)
 80048da:	ed93 0a00 	vldr	s0, [r3]
 80048de:	4818      	ldr	r0, [pc, #96]	@ (8004940 <main+0xe0>)
 80048e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80048e4:	f7ff fd4e 	bl	8004384 <configureTimer>
  HAL_TIM_Base_Start_IT(&htim2);
 80048e8:	4816      	ldr	r0, [pc, #88]	@ (8004944 <main+0xe4>)
 80048ea:	f002 f991 	bl	8006c10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80048ee:	4816      	ldr	r0, [pc, #88]	@ (8004948 <main+0xe8>)
 80048f0:	f002 f98e 	bl	8006c10 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 80048f4:	2201      	movs	r2, #1
 80048f6:	2120      	movs	r1, #32
 80048f8:	480a      	ldr	r0, [pc, #40]	@ (8004924 <main+0xc4>)
 80048fa:	f000 fc6e 	bl	80051da <HAL_GPIO_WritePin>
    getIKS02A1(); 
 80048fe:	f7fc f903 	bl	8000b08 <getIKS02A1>
    if (clearToGetL1 == 1){
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <main+0xec>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d1f9      	bne.n	80048fe <main+0x9e>
      getVL53L1A1(&TOF_left_result);
 800490a:	4808      	ldr	r0, [pc, #32]	@ (800492c <main+0xcc>)
 800490c:	f7fc fa10 	bl	8000d30 <getVL53L1A1>
      getVL53L1A1(&TOF_centre_result);
 8004910:	4807      	ldr	r0, [pc, #28]	@ (8004930 <main+0xd0>)
 8004912:	f7fc fa0d 	bl	8000d30 <getVL53L1A1>
      getVL53L1A1(&TOF_right_result);
 8004916:	4807      	ldr	r0, [pc, #28]	@ (8004934 <main+0xd4>)
 8004918:	f7fc fa0a 	bl	8000d30 <getVL53L1A1>
      clearToGetL1 = 0;
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <main+0xec>)
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e7ec      	b.n	80048fe <main+0x9e>
 8004924:	40020000 	.word	0x40020000
 8004928:	20000318 	.word	0x20000318
 800492c:	20000300 	.word	0x20000300
 8004930:	200002ec 	.word	0x200002ec
 8004934:	200002d8 	.word	0x200002d8
 8004938:	20000164 	.word	0x20000164
 800493c:	200000d4 	.word	0x200000d4
 8004940:	40000400 	.word	0x40000400
 8004944:	20000468 	.word	0x20000468
 8004948:	20000420 	.word	0x20000420
 800494c:	20000319 	.word	0x20000319

08004950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004950:	b510      	push	{r4, lr}
 8004952:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004954:	4b0e      	ldr	r3, [pc, #56]	@ (8004990 <HAL_InitTick+0x40>)
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800495c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004960:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <HAL_InitTick+0x44>)
 8004962:	6810      	ldr	r0, [r2, #0]
 8004964:	fbb0 f0f3 	udiv	r0, r0, r3
 8004968:	f000 f8c0 	bl	8004aec <HAL_SYSTICK_Config>
 800496c:	b968      	cbnz	r0, 800498a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800496e:	2c0f      	cmp	r4, #15
 8004970:	d901      	bls.n	8004976 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004972:	2001      	movs	r0, #1
 8004974:	e00a      	b.n	800498c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004976:	2200      	movs	r2, #0
 8004978:	4621      	mov	r1, r4
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	f000 f8a1 	bl	8004ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_InitTick+0x48>)
 8004984:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004986:	2000      	movs	r0, #0
 8004988:	e000      	b.n	800498c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800498a:	2001      	movs	r0, #1
}
 800498c:	bd10      	pop	{r4, pc}
 800498e:	bf00      	nop
 8004990:	200000e4 	.word	0x200000e4
 8004994:	200000ec 	.word	0x200000ec
 8004998:	200000e8 	.word	0x200000e8

0800499c <HAL_Init>:
{
 800499c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800499e:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_Init+0x30>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b8:	2003      	movs	r0, #3
 80049ba:	f000 f871 	bl	8004aa0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7ff ffc6 	bl	8004950 <HAL_InitTick>
  HAL_MspInit();
 80049c4:	f001 fd04 	bl	80063d0 <HAL_MspInit>
}
 80049c8:	2000      	movs	r0, #0
 80049ca:	bd08      	pop	{r3, pc}
 80049cc:	40023c00 	.word	0x40023c00

080049d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80049d0:	4a03      	ldr	r2, [pc, #12]	@ (80049e0 <HAL_IncTick+0x10>)
 80049d2:	6811      	ldr	r1, [r2, #0]
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_IncTick+0x14>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	440b      	add	r3, r1
 80049da:	6013      	str	r3, [r2, #0]
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	200004b0 	.word	0x200004b0
 80049e4:	200000e4 	.word	0x200000e4

080049e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80049e8:	4b01      	ldr	r3, [pc, #4]	@ (80049f0 <HAL_GetTick+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	200004b0 	.word	0x200004b0

080049f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7ff fff6 	bl	80049e8 <HAL_GetTick>
 80049fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004a02:	d002      	beq.n	8004a0a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a04:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <HAL_Delay+0x24>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a0a:	f7ff ffed 	bl	80049e8 <HAL_GetTick>
 8004a0e:	1b40      	subs	r0, r0, r5
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d3fa      	bcc.n	8004a0a <HAL_Delay+0x16>
  {
  }
}
 8004a14:	bd38      	pop	{r3, r4, r5, pc}
 8004a16:	bf00      	nop
 8004a18:	200000e4 	.word	0x200000e4

08004a1c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	db07      	blt.n	8004a30 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a20:	f000 021f 	and.w	r2, r0, #31
 8004a24:	0940      	lsrs	r0, r0, #5
 8004a26:	2301      	movs	r3, #1
 8004a28:	4093      	lsls	r3, r2
 8004a2a:	4a02      	ldr	r2, [pc, #8]	@ (8004a34 <__NVIC_EnableIRQ+0x18>)
 8004a2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	e000e100 	.word	0xe000e100

08004a38 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	db08      	blt.n	8004a4e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3c:	0109      	lsls	r1, r1, #4
 8004a3e:	b2c9      	uxtb	r1, r1
 8004a40:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004a44:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004a48:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004a4c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	f000 000f 	and.w	r0, r0, #15
 8004a52:	0109      	lsls	r1, r1, #4
 8004a54:	b2c9      	uxtb	r1, r1
 8004a56:	4b01      	ldr	r3, [pc, #4]	@ (8004a5c <__NVIC_SetPriority+0x24>)
 8004a58:	5419      	strb	r1, [r3, r0]
  }
}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000ed14 	.word	0xe000ed14

08004a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a60:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a62:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a66:	f1c0 0c07 	rsb	ip, r0, #7
 8004a6a:	f1bc 0f04 	cmp.w	ip, #4
 8004a6e:	bf28      	it	cs
 8004a70:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a74:	1d03      	adds	r3, r0, #4
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d90f      	bls.n	8004a9a <NVIC_EncodePriority+0x3a>
 8004a7a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	f04f 3eff 	mov.w	lr, #4294967295
 8004a80:	fa0e f00c 	lsl.w	r0, lr, ip
 8004a84:	ea21 0100 	bic.w	r1, r1, r0
 8004a88:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a8a:	fa0e fe03 	lsl.w	lr, lr, r3
 8004a8e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8004a92:	ea41 0002 	orr.w	r0, r1, r2
 8004a96:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e7ee      	b.n	8004a7c <NVIC_EncodePriority+0x1c>
	...

08004aa0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa0:	4a07      	ldr	r2, [pc, #28]	@ (8004ac0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004aa2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aac:	0200      	lsls	r0, r0, #8
 8004aae:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004abc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004abe:	4770      	bx	lr
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_NVIC_SetPriority+0x1c>)
 8004aca:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004acc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004ad0:	f7ff ffc6 	bl	8004a60 <NVIC_EncodePriority>
 8004ad4:	4601      	mov	r1, r0
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff ffae 	bl	8004a38 <__NVIC_SetPriority>
}
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	bf00      	nop
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae6:	f7ff ff99 	bl	8004a1c <__NVIC_EnableIRQ>
}
 8004aea:	bd08      	pop	{r3, pc}

08004aec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aec:	3801      	subs	r0, #1
 8004aee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004af2:	d20b      	bcs.n	8004b0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004af8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afa:	4a05      	ldr	r2, [pc, #20]	@ (8004b10 <HAL_SYSTICK_Config+0x24>)
 8004afc:	21f0      	movs	r1, #240	@ 0xf0
 8004afe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b02:	2000      	movs	r0, #0
 8004b04:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b06:	2207      	movs	r2, #7
 8004b08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004b0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004b0e:	4770      	bx	lr
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b14:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b16:	6803      	ldr	r3, [r0, #0]
 8004b18:	b2d9      	uxtb	r1, r3
 8004b1a:	3910      	subs	r1, #16
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <DMA_CalcBaseAndBitshift+0x3c>)
 8004b1e:	fba2 4201 	umull	r4, r2, r2, r1
 8004b22:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b24:	4c0b      	ldr	r4, [pc, #44]	@ (8004b54 <DMA_CalcBaseAndBitshift+0x40>)
 8004b26:	5ca2      	ldrb	r2, [r4, r2]
 8004b28:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b2a:	295f      	cmp	r1, #95	@ 0x5f
 8004b2c:	d909      	bls.n	8004b42 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	3304      	adds	r3, #4
 8004b38:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8004b3a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8004b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b40:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	6583      	str	r3, [r0, #88]	@ 0x58
 8004b4c:	e7f5      	b.n	8004b3a <DMA_CalcBaseAndBitshift+0x26>
 8004b4e:	bf00      	nop
 8004b50:	aaaaaaab 	.word	0xaaaaaaab
 8004b54:	08008724 	.word	0x08008724

08004b58 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b5a:	6982      	ldr	r2, [r0, #24]
 8004b5c:	b992      	cbnz	r2, 8004b84 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d00a      	beq.n	8004b78 <DMA_CheckFifoParam+0x20>
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d002      	beq.n	8004b6c <DMA_CheckFifoParam+0x14>
 8004b66:	b10b      	cbz	r3, 8004b6c <DMA_CheckFifoParam+0x14>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004b6e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004b72:	d128      	bne.n	8004bc6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2000      	movs	r0, #0
 8004b76:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b78:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b7e:	d024      	beq.n	8004bca <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2000      	movs	r0, #0
 8004b82:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b84:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004b88:	d009      	beq.n	8004b9e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d925      	bls.n	8004bda <DMA_CheckFifoParam+0x82>
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d125      	bne.n	8004bde <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b92:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004b94:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004b98:	d123      	bne.n	8004be2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	4770      	bx	lr
    switch (tmp)
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d803      	bhi.n	8004baa <DMA_CheckFifoParam+0x52>
 8004ba2:	e8df f003 	tbb	[pc, r3]
 8004ba6:	0414      	.short	0x0414
 8004ba8:	0a14      	.short	0x0a14
 8004baa:	2000      	movs	r0, #0
 8004bac:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004bb0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004bb4:	d10d      	bne.n	8004bd2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bc0:	d009      	beq.n	8004bd6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	4770      	bx	lr
        status = HAL_ERROR;
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	4770      	bx	lr
        status = HAL_ERROR;
 8004bca:	2001      	movs	r0, #1
 8004bcc:	4770      	bx	lr
      status = HAL_ERROR;
 8004bce:	2001      	movs	r0, #1
 8004bd0:	4770      	bx	lr
        status = HAL_ERROR;
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	4770      	bx	lr
        status = HAL_ERROR;
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	4770      	bx	lr
      status = HAL_ERROR;
 8004bda:	2001      	movs	r0, #1
 8004bdc:	4770      	bx	lr
    switch (tmp)
 8004bde:	2000      	movs	r0, #0
 8004be0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8004be2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_DMA_Init>:
{
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bec:	f7ff fefc 	bl	80049e8 <HAL_GetTick>
  if(hdma == NULL)
 8004bf0:	2c00      	cmp	r4, #0
 8004bf2:	d05b      	beq.n	8004cac <HAL_DMA_Init+0xc4>
 8004bf4:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	f012 0f01 	tst.w	r2, #1
 8004c14:	d00a      	beq.n	8004c2c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c16:	f7ff fee7 	bl	80049e8 <HAL_GetTick>
 8004c1a:	1b43      	subs	r3, r0, r5
 8004c1c:	2b05      	cmp	r3, #5
 8004c1e:	d9f5      	bls.n	8004c0c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c20:	2320      	movs	r3, #32
 8004c22:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c24:	2003      	movs	r0, #3
 8004c26:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004c2c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c2e:	4920      	ldr	r1, [pc, #128]	@ (8004cb0 <HAL_DMA_Init+0xc8>)
 8004c30:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	68a0      	ldr	r0, [r4, #8]
 8004c36:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c38:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3c:	6920      	ldr	r0, [r4, #16]
 8004c3e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c40:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c42:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c44:	69a0      	ldr	r0, [r4, #24]
 8004c46:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c48:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c4c:	6a20      	ldr	r0, [r4, #32]
 8004c4e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c50:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c54:	2904      	cmp	r1, #4
 8004c56:	d01e      	beq.n	8004c96 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004c58:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004c5a:	6826      	ldr	r6, [r4, #0]
 8004c5c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c5e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8004c62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c64:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d107      	bne.n	8004c7a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8004c6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c6c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c70:	b11b      	cbz	r3, 8004c7a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7ff ff70 	bl	8004b58 <DMA_CheckFifoParam>
 8004c78:	b990      	cbnz	r0, 8004ca0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8004c7a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff ff49 	bl	8004b14 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c82:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004c84:	233f      	movs	r3, #63	@ 0x3f
 8004c86:	4093      	lsls	r3, r2
 8004c88:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004c94:	e7c9      	b.n	8004c2a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c98:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004c9a:	4301      	orrs	r1, r0
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	e7db      	b.n	8004c58 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ca0:	2340      	movs	r3, #64	@ 0x40
 8004ca2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8004caa:	e7be      	b.n	8004c2a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8004cac:	2001      	movs	r0, #1
 8004cae:	e7bc      	b.n	8004c2a <HAL_DMA_Init+0x42>
 8004cb0:	f010803f 	.word	0xf010803f

08004cb4 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d02d      	beq.n	8004d14 <HAL_DMA_DeInit+0x60>
{
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004cbc:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
 8004cc0:	b2c0      	uxtb	r0, r0
 8004cc2:	2802      	cmp	r0, #2
 8004cc4:	d025      	beq.n	8004d12 <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 8004cc6:	682a      	ldr	r2, [r5, #0]
 8004cc8:	6813      	ldr	r3, [r2, #0]
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	2400      	movs	r4, #0
 8004cd4:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8004cda:	682b      	ldr	r3, [r5, #0]
 8004cdc:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8004cde:	682b      	ldr	r3, [r5, #0]
 8004ce0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	2221      	movs	r2, #33	@ 0x21
 8004cea:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cec:	4628      	mov	r0, r5
 8004cee:	f7ff ff11 	bl	8004b14 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8004cf2:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004cf4:	642c      	str	r4, [r5, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004cf6:	646c      	str	r4, [r5, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004cf8:	64ac      	str	r4, [r5, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004cfa:	64ec      	str	r4, [r5, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004cfc:	652c      	str	r4, [r5, #80]	@ 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfe:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004d00:	233f      	movs	r3, #63	@ 0x3f
 8004d02:	4093      	lsls	r3, r2
 8004d04:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d06:	656c      	str	r4, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8004d08:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8004d0c:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  return HAL_OK;
 8004d10:	4620      	mov	r0, r4
}
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
}
 8004d16:	4770      	bx	lr

08004d18 <HAL_DMA_IRQHandler>:
{
 8004d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d22:	4b72      	ldr	r3, [pc, #456]	@ (8004eec <HAL_DMA_IRQHandler+0x1d4>)
 8004d24:	681d      	ldr	r5, [r3, #0]
 8004d26:	4b72      	ldr	r3, [pc, #456]	@ (8004ef0 <HAL_DMA_IRQHandler+0x1d8>)
 8004d28:	fba3 3505 	umull	r3, r5, r3, r5
 8004d2c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8004d30:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d32:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004d34:	2308      	movs	r3, #8
 8004d36:	4093      	lsls	r3, r2
 8004d38:	4233      	tst	r3, r6
 8004d3a:	d010      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d3c:	6803      	ldr	r3, [r0, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	f012 0f04 	tst.w	r2, #4
 8004d44:	d00b      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f022 0204 	bic.w	r2, r2, #4
 8004d4c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d4e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004d50:	2308      	movs	r3, #8
 8004d52:	4093      	lsls	r3, r2
 8004d54:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d56:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004d60:	2301      	movs	r3, #1
 8004d62:	4093      	lsls	r3, r2
 8004d64:	4233      	tst	r3, r6
 8004d66:	d009      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	6952      	ldr	r2, [r2, #20]
 8004d6c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004d70:	d004      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d72:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004d76:	f043 0302 	orr.w	r3, r3, #2
 8004d7a:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d7c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004d7e:	2304      	movs	r3, #4
 8004d80:	4093      	lsls	r3, r2
 8004d82:	4233      	tst	r3, r6
 8004d84:	d009      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	f012 0f02 	tst.w	r2, #2
 8004d8e:	d004      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d90:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d92:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	4093      	lsls	r3, r2
 8004da0:	4233      	tst	r3, r6
 8004da2:	d024      	beq.n	8004dee <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	f012 0f08 	tst.w	r2, #8
 8004dac:	d01f      	beq.n	8004dee <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dae:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004db8:	d00d      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004dc0:	d104      	bne.n	8004dcc <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8004dc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dc4:	b19b      	cbz	r3, 8004dee <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4798      	blx	r3
 8004dca:	e010      	b.n	8004dee <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dcc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004dce:	b173      	cbz	r3, 8004dee <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4798      	blx	r3
 8004dd4:	e00b      	b.n	8004dee <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004ddc:	d103      	bne.n	8004de6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	f022 0208 	bic.w	r2, r2, #8
 8004de4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004de6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004de8:	b10b      	cbz	r3, 8004dee <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004dea:	4620      	mov	r0, r4
 8004dec:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dee:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004df0:	2320      	movs	r3, #32
 8004df2:	4093      	lsls	r3, r2
 8004df4:	4233      	tst	r3, r6
 8004df6:	d055      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004df8:	6822      	ldr	r2, [r4, #0]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	f012 0f10 	tst.w	r2, #16
 8004e00:	d050      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e02:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e04:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d00e      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004e16:	d033      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004e1e:	d12a      	bne.n	8004e76 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8004e20:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d03e      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8004e26:	4620      	mov	r0, r4
 8004e28:	4798      	blx	r3
 8004e2a:	e03b      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	f023 0316 	bic.w	r3, r3, #22
 8004e34:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	6953      	ldr	r3, [r2, #20]
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e3e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e42:	b1a3      	cbz	r3, 8004e6e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	f023 0308 	bic.w	r3, r3, #8
 8004e4c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004e50:	233f      	movs	r3, #63	@ 0x3f
 8004e52:	4093      	lsls	r3, r2
 8004e54:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004e62:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d03f      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4798      	blx	r3
        return;
 8004e6c:	e03c      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e7      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x12c>
 8004e74:	e7eb      	b.n	8004e4e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8004e76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004e78:	b1a3      	cbz	r3, 8004ea4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4798      	blx	r3
 8004e7e:	e011      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004e86:	d109      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f022 0210 	bic.w	r2, r2, #16
 8004e8e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004e96:	2300      	movs	r3, #0
 8004e98:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8004e9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004e9e:	b10b      	cbz	r3, 8004ea4 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ea4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ea6:	b1fb      	cbz	r3, 8004ee8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ea8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004eaa:	f013 0f01 	tst.w	r3, #1
 8004eae:	d017      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eb0:	2305      	movs	r3, #5
 8004eb2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004ec0:	9b01      	ldr	r3, [sp, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	42ab      	cmp	r3, r5
 8004ec8:	d804      	bhi.n	8004ed4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f013 0f01 	tst.w	r3, #1
 8004ed2:	d1f5      	bne.n	8004ec0 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004eda:	2300      	movs	r3, #0
 8004edc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8004ee0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ee2:	b10b      	cbz	r3, 8004ee8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4798      	blx	r3
}
 8004ee8:	b003      	add	sp, #12
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eec:	200000ec 	.word	0x200000ec
 8004ef0:	1b4e81b5 	.word	0x1b4e81b5

08004ef4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b0f      	cmp	r3, #15
 8004ef8:	f200 80d7 	bhi.w	80050aa <HAL_GPIO_Init+0x1b6>
{
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	e065      	b.n	8004fce <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f02:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f04:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004f08:	2403      	movs	r4, #3
 8004f0a:	fa04 f40e 	lsl.w	r4, r4, lr
 8004f0e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f12:	68cc      	ldr	r4, [r1, #12]
 8004f14:	fa04 f40e 	lsl.w	r4, r4, lr
 8004f18:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004f1a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f1e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f22:	684a      	ldr	r2, [r1, #4]
 8004f24:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004f2c:	6042      	str	r2, [r0, #4]
 8004f2e:	e05c      	b.n	8004fea <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f30:	08dc      	lsrs	r4, r3, #3
 8004f32:	3408      	adds	r4, #8
 8004f34:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f38:	f003 0507 	and.w	r5, r3, #7
 8004f3c:	00ad      	lsls	r5, r5, #2
 8004f3e:	f04f 0e0f 	mov.w	lr, #15
 8004f42:	fa0e fe05 	lsl.w	lr, lr, r5
 8004f46:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f4a:	690a      	ldr	r2, [r1, #16]
 8004f4c:	40aa      	lsls	r2, r5
 8004f4e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004f52:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004f56:	e05c      	b.n	8005012 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f58:	2204      	movs	r2, #4
 8004f5a:	e000      	b.n	8004f5e <HAL_GPIO_Init+0x6a>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	fa02 f20e 	lsl.w	r2, r2, lr
 8004f62:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f64:	3402      	adds	r4, #2
 8004f66:	4d51      	ldr	r5, [pc, #324]	@ (80050ac <HAL_GPIO_Init+0x1b8>)
 8004f68:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f6c:	4a50      	ldr	r2, [pc, #320]	@ (80050b0 <HAL_GPIO_Init+0x1bc>)
 8004f6e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004f70:	ea6f 020c 	mvn.w	r2, ip
 8004f74:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f78:	684e      	ldr	r6, [r1, #4]
 8004f7a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8004f7e:	d001      	beq.n	8004f84 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8004f80:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8004f84:	4c4a      	ldr	r4, [pc, #296]	@ (80050b0 <HAL_GPIO_Init+0x1bc>)
 8004f86:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8004f88:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004f8a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f8e:	684e      	ldr	r6, [r1, #4]
 8004f90:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8004f94:	d001      	beq.n	8004f9a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8004f96:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8004f9a:	4c45      	ldr	r4, [pc, #276]	@ (80050b0 <HAL_GPIO_Init+0x1bc>)
 8004f9c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8004f9e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004fa0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa4:	684e      	ldr	r6, [r1, #4]
 8004fa6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8004faa:	d001      	beq.n	8004fb0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8004fac:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8004fb0:	4c3f      	ldr	r4, [pc, #252]	@ (80050b0 <HAL_GPIO_Init+0x1bc>)
 8004fb2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fb4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8004fb6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb8:	684d      	ldr	r5, [r1, #4]
 8004fba:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8004fbe:	d001      	beq.n	8004fc4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8004fc0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8004fc4:	4c3a      	ldr	r4, [pc, #232]	@ (80050b0 <HAL_GPIO_Init+0x1bc>)
 8004fc6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc8:	3301      	adds	r3, #1
 8004fca:	2b0f      	cmp	r3, #15
 8004fcc:	d86b      	bhi.n	80050a6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8004fce:	2201      	movs	r2, #1
 8004fd0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fd2:	680c      	ldr	r4, [r1, #0]
 8004fd4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8004fd8:	ea32 0404 	bics.w	r4, r2, r4
 8004fdc:	d1f4      	bne.n	8004fc8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fde:	684c      	ldr	r4, [r1, #4]
 8004fe0:	f004 0403 	and.w	r4, r4, #3
 8004fe4:	3c01      	subs	r4, #1
 8004fe6:	2c01      	cmp	r4, #1
 8004fe8:	d98b      	bls.n	8004f02 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fea:	684a      	ldr	r2, [r1, #4]
 8004fec:	f002 0203 	and.w	r2, r2, #3
 8004ff0:	2a03      	cmp	r2, #3
 8004ff2:	d009      	beq.n	8005008 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004ff4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ff6:	005d      	lsls	r5, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	40aa      	lsls	r2, r5
 8004ffc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005000:	688a      	ldr	r2, [r1, #8]
 8005002:	40aa      	lsls	r2, r5
 8005004:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005006:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005008:	684a      	ldr	r2, [r1, #4]
 800500a:	f002 0203 	and.w	r2, r2, #3
 800500e:	2a02      	cmp	r2, #2
 8005010:	d08e      	beq.n	8004f30 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8005012:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005014:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f20e 	lsl.w	r2, r2, lr
 800501e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005022:	684a      	ldr	r2, [r1, #4]
 8005024:	f002 0203 	and.w	r2, r2, #3
 8005028:	fa02 f20e 	lsl.w	r2, r2, lr
 800502c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800502e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005030:	684a      	ldr	r2, [r1, #4]
 8005032:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8005036:	d0c7      	beq.n	8004fc8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005038:	2200      	movs	r2, #0
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <HAL_GPIO_Init+0x1c0>)
 800503e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8005040:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8005044:	6454      	str	r4, [r2, #68]	@ 0x44
 8005046:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005048:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800504c:	9201      	str	r2, [sp, #4]
 800504e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005050:	089c      	lsrs	r4, r3, #2
 8005052:	1ca5      	adds	r5, r4, #2
 8005054:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <HAL_GPIO_Init+0x1b8>)
 8005056:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800505a:	f003 0e03 	and.w	lr, r3, #3
 800505e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005062:	220f      	movs	r2, #15
 8005064:	fa02 f20e 	lsl.w	r2, r2, lr
 8005068:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800506c:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <HAL_GPIO_Init+0x1c4>)
 800506e:	4290      	cmp	r0, r2
 8005070:	f43f af74 	beq.w	8004f5c <HAL_GPIO_Init+0x68>
 8005074:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005078:	4290      	cmp	r0, r2
 800507a:	d00e      	beq.n	800509a <HAL_GPIO_Init+0x1a6>
 800507c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005080:	4290      	cmp	r0, r2
 8005082:	d00c      	beq.n	800509e <HAL_GPIO_Init+0x1aa>
 8005084:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005088:	4290      	cmp	r0, r2
 800508a:	d00a      	beq.n	80050a2 <HAL_GPIO_Init+0x1ae>
 800508c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005090:	4290      	cmp	r0, r2
 8005092:	f43f af61 	beq.w	8004f58 <HAL_GPIO_Init+0x64>
 8005096:	2207      	movs	r2, #7
 8005098:	e761      	b.n	8004f5e <HAL_GPIO_Init+0x6a>
 800509a:	2201      	movs	r2, #1
 800509c:	e75f      	b.n	8004f5e <HAL_GPIO_Init+0x6a>
 800509e:	2202      	movs	r2, #2
 80050a0:	e75d      	b.n	8004f5e <HAL_GPIO_Init+0x6a>
 80050a2:	2203      	movs	r2, #3
 80050a4:	e75b      	b.n	8004f5e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80050a6:	b002      	add	sp, #8
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	4770      	bx	lr
 80050ac:	40013800 	.word	0x40013800
 80050b0:	40013c00 	.word	0x40013c00
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40020000 	.word	0x40020000

080050bc <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050bc:	2300      	movs	r3, #0
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d87c      	bhi.n	80051bc <HAL_GPIO_DeInit+0x100>
{
 80050c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c4:	e02d      	b.n	8005122 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80050c6:	2504      	movs	r5, #4
 80050c8:	e000      	b.n	80050cc <HAL_GPIO_DeInit+0x10>
 80050ca:	2500      	movs	r5, #0
 80050cc:	fa05 f50c 	lsl.w	r5, r5, ip
 80050d0:	42a5      	cmp	r5, r4
 80050d2:	d057      	beq.n	8005184 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050d4:	6804      	ldr	r4, [r0, #0]
 80050d6:	005d      	lsls	r5, r3, #1
 80050d8:	f04f 0c03 	mov.w	ip, #3
 80050dc:	fa0c fc05 	lsl.w	ip, ip, r5
 80050e0:	ea24 040c 	bic.w	r4, r4, ip
 80050e4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050e6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80050ea:	f10e 0e08 	add.w	lr, lr, #8
 80050ee:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80050f2:	f003 0607 	and.w	r6, r3, #7
 80050f6:	00b6      	lsls	r6, r6, #2
 80050f8:	250f      	movs	r5, #15
 80050fa:	40b5      	lsls	r5, r6
 80050fc:	ea24 0405 	bic.w	r4, r4, r5
 8005100:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005104:	68c4      	ldr	r4, [r0, #12]
 8005106:	ea24 040c 	bic.w	r4, r4, ip
 800510a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800510c:	6844      	ldr	r4, [r0, #4]
 800510e:	ea24 0202 	bic.w	r2, r4, r2
 8005112:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005114:	6882      	ldr	r2, [r0, #8]
 8005116:	ea22 020c 	bic.w	r2, r2, ip
 800511a:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800511c:	3301      	adds	r3, #1
 800511e:	2b0f      	cmp	r3, #15
 8005120:	d84b      	bhi.n	80051ba <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8005122:	2201      	movs	r2, #1
 8005124:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8005126:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 800512a:	ea32 0401 	bics.w	r4, r2, r1
 800512e:	d1f5      	bne.n	800511c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005130:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8005134:	f10e 0502 	add.w	r5, lr, #2
 8005138:	4c21      	ldr	r4, [pc, #132]	@ (80051c0 <HAL_GPIO_DeInit+0x104>)
 800513a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800513e:	f003 0c03 	and.w	ip, r3, #3
 8005142:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005146:	250f      	movs	r5, #15
 8005148:	fa05 f70c 	lsl.w	r7, r5, ip
 800514c:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800514e:	4d1d      	ldr	r5, [pc, #116]	@ (80051c4 <HAL_GPIO_DeInit+0x108>)
 8005150:	42a8      	cmp	r0, r5
 8005152:	d0ba      	beq.n	80050ca <HAL_GPIO_DeInit+0xe>
 8005154:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005158:	42a8      	cmp	r0, r5
 800515a:	d00d      	beq.n	8005178 <HAL_GPIO_DeInit+0xbc>
 800515c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005160:	42a8      	cmp	r0, r5
 8005162:	d00b      	beq.n	800517c <HAL_GPIO_DeInit+0xc0>
 8005164:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005168:	42a8      	cmp	r0, r5
 800516a:	d009      	beq.n	8005180 <HAL_GPIO_DeInit+0xc4>
 800516c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005170:	42a8      	cmp	r0, r5
 8005172:	d0a8      	beq.n	80050c6 <HAL_GPIO_DeInit+0xa>
 8005174:	2507      	movs	r5, #7
 8005176:	e7a9      	b.n	80050cc <HAL_GPIO_DeInit+0x10>
 8005178:	2501      	movs	r5, #1
 800517a:	e7a7      	b.n	80050cc <HAL_GPIO_DeInit+0x10>
 800517c:	2502      	movs	r5, #2
 800517e:	e7a5      	b.n	80050cc <HAL_GPIO_DeInit+0x10>
 8005180:	2503      	movs	r5, #3
 8005182:	e7a3      	b.n	80050cc <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005184:	4c10      	ldr	r4, [pc, #64]	@ (80051c8 <HAL_GPIO_DeInit+0x10c>)
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	ea25 0506 	bic.w	r5, r5, r6
 800518c:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800518e:	6865      	ldr	r5, [r4, #4]
 8005190:	ea25 0506 	bic.w	r5, r5, r6
 8005194:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005196:	68e5      	ldr	r5, [r4, #12]
 8005198:	ea25 0506 	bic.w	r5, r5, r6
 800519c:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800519e:	68a5      	ldr	r5, [r4, #8]
 80051a0:	ea25 0506 	bic.w	r5, r5, r6
 80051a4:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80051a6:	4e06      	ldr	r6, [pc, #24]	@ (80051c0 <HAL_GPIO_DeInit+0x104>)
 80051a8:	f10e 0402 	add.w	r4, lr, #2
 80051ac:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80051b0:	ea25 0507 	bic.w	r5, r5, r7
 80051b4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 80051b8:	e78c      	b.n	80050d4 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40013800 	.word	0x40013800
 80051c4:	40020000 	.word	0x40020000
 80051c8:	40013c00 	.word	0x40013c00

080051cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051cc:	6903      	ldr	r3, [r0, #16]
 80051ce:	4219      	tst	r1, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80051d2:	2001      	movs	r0, #1
 80051d4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80051d8:	4770      	bx	lr

080051da <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051da:	b10a      	cbz	r2, 80051e0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051dc:	6181      	str	r1, [r0, #24]
 80051de:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051e0:	0409      	lsls	r1, r1, #16
 80051e2:	6181      	str	r1, [r0, #24]
  }
}
 80051e4:	4770      	bx	lr

080051e6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051e6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051e8:	ea01 0203 	and.w	r2, r1, r3
 80051ec:	ea21 0103 	bic.w	r1, r1, r3
 80051f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051f4:	6181      	str	r1, [r0, #24]
}
 80051f6:	4770      	bx	lr

080051f8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_GPIO_EXTI_IRQHandler>:
{
 80051fc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051fe:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	4203      	tst	r3, r0
 8005204:	d100      	bne.n	8005208 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8005206:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005208:	4b02      	ldr	r3, [pc, #8]	@ (8005214 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800520a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800520c:	f7ff fff4 	bl	80051f8 <HAL_GPIO_EXTI_Callback>
}
 8005210:	e7f9      	b.n	8005206 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005212:	bf00      	nop
 8005214:	40013c00 	.word	0x40013c00

08005218 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005218:	6803      	ldr	r3, [r0, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8005220:	d101      	bne.n	8005226 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8005222:	2000      	movs	r0, #0
}
 8005224:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005226:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800522a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800522c:	2300      	movs	r3, #0
 800522e:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005230:	2220      	movs	r2, #32
 8005232:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005236:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800523a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800523c:	f042 0204 	orr.w	r2, r2, #4
 8005240:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8005242:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8005246:	2001      	movs	r0, #1
 8005248:	4770      	bx	lr

0800524a <I2C_WaitOnFlagUntilTimeout>:
{
 800524a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524e:	4606      	mov	r6, r0
 8005250:	460c      	mov	r4, r1
 8005252:	4617      	mov	r7, r2
 8005254:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005256:	e03b      	b.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005258:	f7ff fbc6 	bl	80049e8 <HAL_GetTick>
 800525c:	9b06      	ldr	r3, [sp, #24]
 800525e:	1ac0      	subs	r0, r0, r3
 8005260:	4540      	cmp	r0, r8
 8005262:	d802      	bhi.n	800526a <I2C_WaitOnFlagUntilTimeout+0x20>
 8005264:	f1b8 0f00 	cmp.w	r8, #0
 8005268:	d132      	bne.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800526a:	2d01      	cmp	r5, #1
 800526c:	d018      	beq.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x56>
 800526e:	6833      	ldr	r3, [r6, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	ea24 0303 	bic.w	r3, r4, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	fab3 f383 	clz	r3, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	429f      	cmp	r7, r3
 8005280:	d126      	bne.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005282:	2300      	movs	r3, #0
 8005284:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005286:	2220      	movs	r2, #32
 8005288:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800528c:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005290:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8005292:	f042 0220 	orr.w	r2, r2, #32
 8005296:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005298:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 800529c:	2001      	movs	r0, #1
 800529e:	e027      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052a0:	6833      	ldr	r3, [r6, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	ea24 0303 	bic.w	r3, r4, r3
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	e7e5      	b.n	800527e <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b2:	6833      	ldr	r3, [r6, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	ea24 0c03 	bic.w	ip, r4, r3
 80052ba:	fa1f fc8c 	uxth.w	ip, ip
 80052be:	fabc fc8c 	clz	ip, ip
 80052c2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80052c6:	4567      	cmp	r7, ip
 80052c8:	d111      	bne.n	80052ee <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	f1b8 3fff 	cmp.w	r8, #4294967295
 80052ce:	d1c3      	bne.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d0:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80052d4:	2d01      	cmp	r5, #1
 80052d6:	d0ec      	beq.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x68>
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	ea24 0c03 	bic.w	ip, r4, r3
 80052e0:	fa1f fc8c 	uxth.w	ip, ip
 80052e4:	fabc fc8c 	clz	ip, ip
 80052e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80052ec:	e7eb      	b.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80052ee:	2000      	movs	r0, #0
}
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	4605      	mov	r5, r0
 80052fa:	460e      	mov	r6, r1
 80052fc:	4690      	mov	r8, r2
 80052fe:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005300:	e053      	b.n	80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005308:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005310:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	2300      	movs	r3, #0
 8005314:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005316:	2220      	movs	r2, #32
 8005318:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005320:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8005322:	f042 0204 	orr.w	r2, r2, #4
 8005326:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8005328:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 800532c:	2001      	movs	r0, #1
 800532e:	e04a      	b.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7ff fb5a 	bl	80049e8 <HAL_GetTick>
 8005334:	eba0 0009 	sub.w	r0, r0, r9
 8005338:	4540      	cmp	r0, r8
 800533a:	d802      	bhi.n	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 800533c:	f1b8 0f00 	cmp.w	r8, #0
 8005340:	d133      	bne.n	80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005342:	2f01      	cmp	r7, #1
 8005344:	d017      	beq.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8005346:	682b      	ldr	r3, [r5, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	ea26 0303 	bic.w	r3, r6, r3
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b00      	subs	r3, #0
 8005352:	bf18      	it	ne
 8005354:	2301      	movne	r3, #1
 8005356:	b343      	cbz	r3, 80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005358:	2300      	movs	r3, #0
 800535a:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800535c:	2220      	movs	r2, #32
 800535e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005362:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005366:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8005368:	f042 0220 	orr.w	r2, r2, #32
 800536c:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800536e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8005372:	2001      	movs	r0, #1
 8005374:	e027      	b.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	ea26 0303 	bic.w	r3, r6, r3
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b00      	subs	r3, #0
 8005382:	bf18      	it	ne
 8005384:	2301      	movne	r3, #1
 8005386:	e7e6      	b.n	8005356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	699c      	ldr	r4, [r3, #24]
 800538c:	ea26 0404 	bic.w	r4, r6, r4
 8005390:	b2a4      	uxth	r4, r4
 8005392:	3c00      	subs	r4, #0
 8005394:	bf18      	it	ne
 8005396:	2401      	movne	r4, #1
 8005398:	b1a4      	cbz	r4, 80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80053a2:	d1ae      	bne.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80053a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80053a8:	d1c2      	bne.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053aa:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80053ae:	2f01      	cmp	r7, #1
 80053b0:	d1ea      	bne.n	8005388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	695c      	ldr	r4, [r3, #20]
 80053b6:	ea26 0404 	bic.w	r4, r6, r4
 80053ba:	b2a4      	uxth	r4, r4
 80053bc:	3c00      	subs	r4, #0
 80053be:	bf18      	it	ne
 80053c0:	2401      	movne	r4, #1
 80053c2:	e7e9      	b.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80053c4:	2000      	movs	r0, #0
}
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080053cc <I2C_MasterRequestWrite>:
{
 80053cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ce:	b083      	sub	sp, #12
 80053d0:	4604      	mov	r4, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	4616      	mov	r6, r2
 80053d6:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d00d      	beq.n	80053fa <I2C_MasterRequestWrite+0x2e>
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d00b      	beq.n	80053fa <I2C_MasterRequestWrite+0x2e>
 80053e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053e6:	d008      	beq.n	80053fa <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80053ea:	2b12      	cmp	r3, #18
 80053ec:	d10a      	bne.n	8005404 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ee:	6802      	ldr	r2, [r0, #0]
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e004      	b.n	8005404 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	6813      	ldr	r3, [r2, #0]
 80053fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005402:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005404:	9700      	str	r7, [sp, #0]
 8005406:	4633      	mov	r3, r6
 8005408:	2200      	movs	r2, #0
 800540a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff ff1b 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005414:	b980      	cbnz	r0, 8005438 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800541c:	d116      	bne.n	800544c <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8005424:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005426:	463b      	mov	r3, r7
 8005428:	4632      	mov	r2, r6
 800542a:	4913      	ldr	r1, [pc, #76]	@ (8005478 <I2C_MasterRequestWrite+0xac>)
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff ff61 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005432:	b9f8      	cbnz	r0, 8005474 <I2C_MasterRequestWrite+0xa8>
}
 8005434:	b003      	add	sp, #12
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005440:	d002      	beq.n	8005448 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005446:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005448:	2003      	movs	r0, #3
 800544a:	e7f3      	b.n	8005434 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800544c:	11eb      	asrs	r3, r5, #7
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	f003 0306 	and.w	r3, r3, #6
 8005454:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8005458:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800545a:	463b      	mov	r3, r7
 800545c:	4632      	mov	r2, r6
 800545e:	4907      	ldr	r1, [pc, #28]	@ (800547c <I2C_MasterRequestWrite+0xb0>)
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff ff47 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005466:	b918      	cbnz	r0, 8005470 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	b2ed      	uxtb	r5, r5
 800546c:	611d      	str	r5, [r3, #16]
 800546e:	e7da      	b.n	8005426 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8005470:	2001      	movs	r0, #1
 8005472:	e7df      	b.n	8005434 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8005474:	2001      	movs	r0, #1
 8005476:	e7dd      	b.n	8005434 <I2C_MasterRequestWrite+0x68>
 8005478:	00010002 	.word	0x00010002
 800547c:	00010008 	.word	0x00010008

08005480 <I2C_MasterRequestRead>:
{
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	4604      	mov	r4, r0
 8005488:	460d      	mov	r5, r1
 800548a:	4616      	mov	r6, r2
 800548c:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800548e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	6801      	ldr	r1, [r0, #0]
 8005492:	680b      	ldr	r3, [r1, #0]
 8005494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005498:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800549a:	2a08      	cmp	r2, #8
 800549c:	d00d      	beq.n	80054ba <I2C_MasterRequestRead+0x3a>
 800549e:	2a01      	cmp	r2, #1
 80054a0:	d00b      	beq.n	80054ba <I2C_MasterRequestRead+0x3a>
 80054a2:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80054a6:	d008      	beq.n	80054ba <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80054aa:	2b11      	cmp	r3, #17
 80054ac:	d10a      	bne.n	80054c4 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ae:	6802      	ldr	r2, [r0, #0]
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e004      	b.n	80054c4 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	6813      	ldr	r3, [r2, #0]
 80054be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c4:	9700      	str	r7, [sp, #0]
 80054c6:	4633      	mov	r3, r6
 80054c8:	2200      	movs	r2, #0
 80054ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff febb 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 80054d4:	b998      	cbnz	r0, 80054fe <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054dc:	d119      	bne.n	8005512 <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	f045 0501 	orr.w	r5, r5, #1
 80054e4:	b2ed      	uxtb	r5, r5
 80054e6:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e8:	463b      	mov	r3, r7
 80054ea:	4632      	mov	r2, r6
 80054ec:	492a      	ldr	r1, [pc, #168]	@ (8005598 <I2C_MasterRequestRead+0x118>)
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7ff ff00 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d14c      	bne.n	8005592 <I2C_MasterRequestRead+0x112>
}
 80054f8:	b004      	add	sp, #16
 80054fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005506:	d002      	beq.n	800550e <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800550c:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800550e:	2003      	movs	r0, #3
 8005510:	e7f2      	b.n	80054f8 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005512:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8005516:	f008 0806 	and.w	r8, r8, #6
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 8005520:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005522:	463b      	mov	r3, r7
 8005524:	4632      	mov	r2, r6
 8005526:	491d      	ldr	r1, [pc, #116]	@ (800559c <I2C_MasterRequestRead+0x11c>)
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff fee3 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800552e:	b108      	cbz	r0, 8005534 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 8005530:	2001      	movs	r0, #1
 8005532:	e7e1      	b.n	80054f8 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	b2ed      	uxtb	r5, r5
 8005538:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800553a:	463b      	mov	r3, r7
 800553c:	4632      	mov	r2, r6
 800553e:	4916      	ldr	r1, [pc, #88]	@ (8005598 <I2C_MasterRequestRead+0x118>)
 8005540:	4620      	mov	r0, r4
 8005542:	f7ff fed7 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005546:	b108      	cbz	r0, 800554c <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 8005548:	2001      	movs	r0, #1
 800554a:	e7d5      	b.n	80054f8 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2200      	movs	r2, #0
 800554e:	9203      	str	r2, [sp, #12]
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6959      	ldr	r1, [r3, #20]
 8005554:	9103      	str	r1, [sp, #12]
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	9103      	str	r1, [sp, #12]
 800555a:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555c:	6819      	ldr	r1, [r3, #0]
 800555e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8005562:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005564:	9700      	str	r7, [sp, #0]
 8005566:	4633      	mov	r3, r6
 8005568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff fe6c 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005572:	b920      	cbnz	r0, 800557e <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 800557a:	6113      	str	r3, [r2, #16]
 800557c:	e7b4      	b.n	80054e8 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005586:	d002      	beq.n	800558e <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005588:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800558c:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 800558e:	2003      	movs	r0, #3
 8005590:	e7b2      	b.n	80054f8 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 8005592:	2001      	movs	r0, #1
 8005594:	e7b0      	b.n	80054f8 <I2C_MasterRequestRead+0x78>
 8005596:	bf00      	nop
 8005598:	00010002 	.word	0x00010002
 800559c:	00010008 	.word	0x00010008

080055a0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	4604      	mov	r4, r0
 80055a4:	460d      	mov	r5, r1
 80055a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055b0:	d121      	bne.n	80055f6 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff fe30 	bl	8005218 <I2C_IsAcknowledgeFailed>
 80055b8:	b9f8      	cbnz	r0, 80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 80055be:	d0f3      	beq.n	80055a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7ff fa12 	bl	80049e8 <HAL_GetTick>
 80055c4:	1b80      	subs	r0, r0, r6
 80055c6:	42a8      	cmp	r0, r5
 80055c8:	d801      	bhi.n	80055ce <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	d1ec      	bne.n	80055a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055d6:	d1e7      	bne.n	80055a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055d8:	2300      	movs	r3, #0
 80055da:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055dc:	2220      	movs	r2, #32
 80055de:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80055e8:	f042 0220 	orr.w	r2, r2, #32
 80055ec:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80055ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80055f2:	2001      	movs	r0, #1
 80055f4:	e000      	b.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80055f6:	2000      	movs	r0, #0
}
 80055f8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80055fa:	2001      	movs	r0, #1
 80055fc:	e7fc      	b.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08005600 <I2C_RequestMemoryWrite>:
{
 8005600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005604:	b085      	sub	sp, #20
 8005606:	4604      	mov	r4, r0
 8005608:	460d      	mov	r5, r1
 800560a:	4691      	mov	r9, r2
 800560c:	461f      	mov	r7, r3
 800560e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8005612:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005614:	6803      	ldr	r3, [r0, #0]
 8005616:	6819      	ldr	r1, [r3, #0]
 8005618:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800561c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800561e:	9600      	str	r6, [sp, #0]
 8005620:	4643      	mov	r3, r8
 8005622:	2200      	movs	r2, #0
 8005624:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005628:	f7ff fe0f 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 800562c:	b960      	cbnz	r0, 8005648 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8005634:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005636:	4633      	mov	r3, r6
 8005638:	4642      	mov	r2, r8
 800563a:	4926      	ldr	r1, [pc, #152]	@ (80056d4 <I2C_RequestMemoryWrite+0xd4>)
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff fe59 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005642:	b168      	cbz	r0, 8005660 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8005644:	2001      	movs	r0, #1
 8005646:	e008      	b.n	800565a <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005650:	d002      	beq.n	8005658 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005656:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005658:	2003      	movs	r0, #3
}
 800565a:	b005      	add	sp, #20
 800565c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005660:	2300      	movs	r3, #0
 8005662:	9303      	str	r3, [sp, #12]
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	9203      	str	r2, [sp, #12]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	9303      	str	r3, [sp, #12]
 800566e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005670:	4632      	mov	r2, r6
 8005672:	4641      	mov	r1, r8
 8005674:	4620      	mov	r0, r4
 8005676:	f7ff ff93 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800567a:	b930      	cbnz	r0, 800568a <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800567c:	2f01      	cmp	r7, #1
 800567e:	d10f      	bne.n	80056a0 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	fa5f f689 	uxtb.w	r6, r9
 8005686:	611e      	str	r6, [r3, #16]
 8005688:	e7e7      	b.n	800565a <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800568c:	2b04      	cmp	r3, #4
 800568e:	d001      	beq.n	8005694 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8005690:	2001      	movs	r0, #1
 8005692:	e7e2      	b.n	800565a <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	6822      	ldr	r2, [r4, #0]
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e7f7      	b.n	8005690 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80056a6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a8:	4632      	mov	r2, r6
 80056aa:	4641      	mov	r1, r8
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7ff ff77 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056b2:	b920      	cbnz	r0, 80056be <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	fa5f f689 	uxtb.w	r6, r9
 80056ba:	611e      	str	r6, [r3, #16]
 80056bc:	e7cd      	b.n	800565a <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d001      	beq.n	80056c8 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80056c4:	2001      	movs	r0, #1
 80056c6:	e7c8      	b.n	800565a <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e7f7      	b.n	80056c4 <I2C_RequestMemoryWrite+0xc4>
 80056d4:	00010002 	.word	0x00010002

080056d8 <I2C_RequestMemoryRead>:
{
 80056d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	4604      	mov	r4, r0
 80056e0:	460d      	mov	r5, r1
 80056e2:	4616      	mov	r6, r2
 80056e4:	4699      	mov	r9, r3
 80056e6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80056e8:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ec:	6802      	ldr	r2, [r0, #0]
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056f4:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f6:	6803      	ldr	r3, [r0, #0]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80056fe:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005700:	f8cd 8000 	str.w	r8, [sp]
 8005704:	463b      	mov	r3, r7
 8005706:	2200      	movs	r2, #0
 8005708:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800570c:	f7ff fd9d 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005710:	b970      	cbnz	r0, 8005730 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005712:	fa5f fa85 	uxtb.w	sl, r5
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800571c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800571e:	4643      	mov	r3, r8
 8005720:	463a      	mov	r2, r7
 8005722:	4941      	ldr	r1, [pc, #260]	@ (8005828 <I2C_RequestMemoryRead+0x150>)
 8005724:	4620      	mov	r0, r4
 8005726:	f7ff fde5 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572a:	b168      	cbz	r0, 8005748 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 800572c:	2001      	movs	r0, #1
 800572e:	e008      	b.n	8005742 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005738:	d002      	beq.n	8005740 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800573e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005740:	2003      	movs	r0, #3
}
 8005742:	b004      	add	sp, #16
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005748:	2300      	movs	r3, #0
 800574a:	9303      	str	r3, [sp, #12]
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	9203      	str	r2, [sp, #12]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005758:	4642      	mov	r2, r8
 800575a:	4639      	mov	r1, r7
 800575c:	4620      	mov	r0, r4
 800575e:	f7ff ff1f 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005762:	b980      	cbnz	r0, 8005786 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005764:	f1b9 0f01 	cmp.w	r9, #1
 8005768:	d118      	bne.n	800579c <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	b2f6      	uxtb	r6, r6
 800576e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005770:	4642      	mov	r2, r8
 8005772:	4639      	mov	r1, r7
 8005774:	4620      	mov	r0, r4
 8005776:	f7ff ff13 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800577a:	b368      	cbz	r0, 80057d8 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d024      	beq.n	80057cc <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8005782:	2001      	movs	r0, #1
 8005784:	e7dd      	b.n	8005742 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005788:	2b04      	cmp	r3, #4
 800578a:	d001      	beq.n	8005790 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 800578c:	2001      	movs	r0, #1
 800578e:	e7d8      	b.n	8005742 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e7f7      	b.n	800578c <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	0a32      	lsrs	r2, r6, #8
 80057a0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a2:	4642      	mov	r2, r8
 80057a4:	4639      	mov	r1, r7
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7ff fefa 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	b918      	cbnz	r0, 80057b6 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	b2f6      	uxtb	r6, r6
 80057b2:	611e      	str	r6, [r3, #16]
 80057b4:	e7dc      	b.n	8005770 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d001      	beq.n	80057c0 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 80057bc:	2001      	movs	r0, #1
 80057be:	e7c0      	b.n	8005742 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e7f7      	b.n	80057bc <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e7d4      	b.n	8005782 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	6813      	ldr	r3, [r2, #0]
 80057dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e2:	f8cd 8000 	str.w	r8, [sp]
 80057e6:	463b      	mov	r3, r7
 80057e8:	2200      	movs	r2, #0
 80057ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff fd2b 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 80057f4:	b968      	cbnz	r0, 8005812 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	f04a 0301 	orr.w	r3, sl, #1
 80057fc:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057fe:	4643      	mov	r3, r8
 8005800:	463a      	mov	r2, r7
 8005802:	4909      	ldr	r1, [pc, #36]	@ (8005828 <I2C_RequestMemoryRead+0x150>)
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff fd75 	bl	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800580a:	2800      	cmp	r0, #0
 800580c:	d099      	beq.n	8005742 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800580e:	2001      	movs	r0, #1
 8005810:	e797      	b.n	8005742 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800581a:	d002      	beq.n	8005822 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800581c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005820:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005822:	2003      	movs	r0, #3
 8005824:	e78d      	b.n	8005742 <I2C_RequestMemoryRead+0x6a>
 8005826:	bf00      	nop
 8005828:	00010002 	.word	0x00010002

0800582c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4604      	mov	r4, r0
 8005830:	460d      	mov	r5, r1
 8005832:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f013 0f04 	tst.w	r3, #4
 800583c:	d121      	bne.n	8005882 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff fcea 	bl	8005218 <I2C_IsAcknowledgeFailed>
 8005844:	b9f8      	cbnz	r0, 8005886 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8005846:	f1b5 3fff 	cmp.w	r5, #4294967295
 800584a:	d0f3      	beq.n	8005834 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7ff f8cc 	bl	80049e8 <HAL_GetTick>
 8005850:	1b80      	subs	r0, r0, r6
 8005852:	42a8      	cmp	r0, r5
 8005854:	d801      	bhi.n	800585a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005856:	2d00      	cmp	r5, #0
 8005858:	d1ec      	bne.n	8005834 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f013 0f04 	tst.w	r3, #4
 8005862:	d1e7      	bne.n	8005834 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005864:	2300      	movs	r3, #0
 8005866:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005868:	2220      	movs	r2, #32
 800586a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005872:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800587a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800587e:	2001      	movs	r0, #1
 8005880:	e000      	b.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8005882:	2000      	movs	r0, #0
}
 8005884:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005886:	2001      	movs	r0, #1
 8005888:	e7fc      	b.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800588a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800588a:	b570      	push	{r4, r5, r6, lr}
 800588c:	4604      	mov	r4, r0
 800588e:	460d      	mov	r5, r1
 8005890:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005892:	e014      	b.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005894:	f06f 0210 	mvn.w	r2, #16
 8005898:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800589a:	2300      	movs	r3, #0
 800589c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800589e:	2220      	movs	r2, #32
 80058a0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80058aa:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80058ac:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80058b0:	2001      	movs	r0, #1
 80058b2:	e025      	b.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80058bc:	d010      	beq.n	80058e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	6958      	ldr	r0, [r3, #20]
 80058c2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80058c6:	d11a      	bne.n	80058fe <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058c8:	6958      	ldr	r0, [r3, #20]
 80058ca:	f010 0f10 	tst.w	r0, #16
 80058ce:	d1e1      	bne.n	8005894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d0:	f7ff f88a 	bl	80049e8 <HAL_GetTick>
 80058d4:	1b80      	subs	r0, r0, r6
 80058d6:	42a8      	cmp	r0, r5
 80058d8:	d8ec      	bhi.n	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80058da:	2d00      	cmp	r5, #0
 80058dc:	d1ef      	bne.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80058de:	e7e9      	b.n	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e4:	2220      	movs	r2, #32
 80058e6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80058f0:	f042 0220 	orr.w	r2, r2, #32
 80058f4:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80058f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80058fa:	2001      	movs	r0, #1
 80058fc:	e000      	b.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80058fe:	2000      	movs	r0, #0
}
 8005900:	bd70      	pop	{r4, r5, r6, pc}

08005902 <HAL_I2C_MspInit>:
}
 8005902:	4770      	bx	lr

08005904 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005904:	2800      	cmp	r0, #0
 8005906:	f000 80cc 	beq.w	8005aa2 <HAL_I2C_Init+0x19e>
{
 800590a:	b570      	push	{r4, r5, r6, lr}
 800590c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800590e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005912:	2b00      	cmp	r3, #0
 8005914:	d077      	beq.n	8005a06 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005916:	2324      	movs	r3, #36	@ 0x24
 8005918:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800591c:	6822      	ldr	r2, [r4, #0]
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800592e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	6813      	ldr	r3, [r2, #0]
 8005934:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005938:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800593a:	f001 f919 	bl	8006b70 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800593e:	6862      	ldr	r2, [r4, #4]
 8005940:	4b5a      	ldr	r3, [pc, #360]	@ (8005aac <HAL_I2C_Init+0x1a8>)
 8005942:	429a      	cmp	r2, r3
 8005944:	d864      	bhi.n	8005a10 <HAL_I2C_Init+0x10c>
 8005946:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab0 <HAL_I2C_Init+0x1ac>)
 8005948:	4298      	cmp	r0, r3
 800594a:	bf8c      	ite	hi
 800594c:	2300      	movhi	r3, #0
 800594e:	2301      	movls	r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 80a8 	bne.w	8005aa6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8005956:	4957      	ldr	r1, [pc, #348]	@ (8005ab4 <HAL_I2C_Init+0x1b0>)
 8005958:	fba1 3100 	umull	r3, r1, r1, r0
 800595c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800595e:	6825      	ldr	r5, [r4, #0]
 8005960:	686a      	ldr	r2, [r5, #4]
 8005962:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005966:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800596a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800596c:	6821      	ldr	r1, [r4, #0]
 800596e:	6a0a      	ldr	r2, [r1, #32]
 8005970:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005974:	6866      	ldr	r6, [r4, #4]
 8005976:	4d4d      	ldr	r5, [pc, #308]	@ (8005aac <HAL_I2C_Init+0x1a8>)
 8005978:	42ae      	cmp	r6, r5
 800597a:	d84f      	bhi.n	8005a1c <HAL_I2C_Init+0x118>
 800597c:	3301      	adds	r3, #1
 800597e:	4313      	orrs	r3, r2
 8005980:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005982:	6821      	ldr	r1, [r4, #0]
 8005984:	69ca      	ldr	r2, [r1, #28]
 8005986:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800598a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800598e:	6865      	ldr	r5, [r4, #4]
 8005990:	4b46      	ldr	r3, [pc, #280]	@ (8005aac <HAL_I2C_Init+0x1a8>)
 8005992:	429d      	cmp	r5, r3
 8005994:	d84c      	bhi.n	8005a30 <HAL_I2C_Init+0x12c>
 8005996:	1e43      	subs	r3, r0, #1
 8005998:	006d      	lsls	r5, r5, #1
 800599a:	fbb3 f3f5 	udiv	r3, r3, r5
 800599e:	3301      	adds	r3, #1
 80059a0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80059a4:	4203      	tst	r3, r0
 80059a6:	d078      	beq.n	8005a9a <HAL_I2C_Init+0x196>
 80059a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ac:	431a      	orrs	r2, r3
 80059ae:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059b0:	6821      	ldr	r1, [r4, #0]
 80059b2:	680b      	ldr	r3, [r1, #0]
 80059b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059b8:	69e2      	ldr	r2, [r4, #28]
 80059ba:	6a20      	ldr	r0, [r4, #32]
 80059bc:	4302      	orrs	r2, r0
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059c2:	6821      	ldr	r1, [r4, #0]
 80059c4:	688b      	ldr	r3, [r1, #8]
 80059c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059ce:	6922      	ldr	r2, [r4, #16]
 80059d0:	68e0      	ldr	r0, [r4, #12]
 80059d2:	4302      	orrs	r2, r0
 80059d4:	4313      	orrs	r3, r2
 80059d6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059d8:	6821      	ldr	r1, [r4, #0]
 80059da:	68cb      	ldr	r3, [r1, #12]
 80059dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059e0:	6962      	ldr	r2, [r4, #20]
 80059e2:	69a0      	ldr	r0, [r4, #24]
 80059e4:	4302      	orrs	r2, r0
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	2000      	movs	r0, #0
 80059f6:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	2320      	movs	r3, #32
 80059fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fe:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005a06:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8005a0a:	f7ff ff7a 	bl	8005902 <HAL_I2C_MspInit>
 8005a0e:	e782      	b.n	8005916 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a10:	4b29      	ldr	r3, [pc, #164]	@ (8005ab8 <HAL_I2C_Init+0x1b4>)
 8005a12:	4298      	cmp	r0, r3
 8005a14:	bf8c      	ite	hi
 8005a16:	2300      	movhi	r3, #0
 8005a18:	2301      	movls	r3, #1
 8005a1a:	e799      	b.n	8005950 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a1c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8005a20:	fb05 f303 	mul.w	r3, r5, r3
 8005a24:	4d25      	ldr	r5, [pc, #148]	@ (8005abc <HAL_I2C_Init+0x1b8>)
 8005a26:	fba5 5303 	umull	r5, r3, r5, r3
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	e7a6      	b.n	800597e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a30:	68a6      	ldr	r6, [r4, #8]
 8005a32:	b9be      	cbnz	r6, 8005a64 <HAL_I2C_Init+0x160>
 8005a34:	1e43      	subs	r3, r0, #1
 8005a36:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8005a3a:	fbb3 f3fc 	udiv	r3, r3, ip
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a44:	fab3 f383 	clz	r3, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	bb43      	cbnz	r3, 8005a9e <HAL_I2C_Init+0x19a>
 8005a4c:	b9c6      	cbnz	r6, 8005a80 <HAL_I2C_Init+0x17c>
 8005a4e:	1e43      	subs	r3, r0, #1
 8005a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a54:	fbb3 f3f5 	udiv	r3, r3, r5
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a62:	e7a3      	b.n	80059ac <HAL_I2C_Init+0xa8>
 8005a64:	1e43      	subs	r3, r0, #1
 8005a66:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8005a6a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005a6e:	fbb3 f3fc 	udiv	r3, r3, ip
 8005a72:	3301      	adds	r3, #1
 8005a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a78:	fab3 f383 	clz	r3, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	e7e4      	b.n	8005a4a <HAL_I2C_Init+0x146>
 8005a80:	1e43      	subs	r3, r0, #1
 8005a82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005a86:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005a8a:	fbb3 f3f5 	udiv	r3, r3, r5
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a98:	e788      	b.n	80059ac <HAL_I2C_Init+0xa8>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	e786      	b.n	80059ac <HAL_I2C_Init+0xa8>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e784      	b.n	80059ac <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8005aa2:	2001      	movs	r0, #1
}
 8005aa4:	4770      	bx	lr
    return HAL_ERROR;
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	e7ac      	b.n	8005a04 <HAL_I2C_Init+0x100>
 8005aaa:	bf00      	nop
 8005aac:	000186a0 	.word	0x000186a0
 8005ab0:	001e847f 	.word	0x001e847f
 8005ab4:	431bde83 	.word	0x431bde83
 8005ab8:	003d08ff 	.word	0x003d08ff
 8005abc:	10624dd3 	.word	0x10624dd3

08005ac0 <HAL_I2C_MspDeInit>:
}
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8005ac2:	b1a8      	cbz	r0, 8005af0 <HAL_I2C_DeInit+0x2e>
{
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac8:	2324      	movs	r3, #36	@ 0x24
 8005aca:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005ace:	6802      	ldr	r2, [r0, #0]
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005ad8:	f7ff fff2 	bl	8005ac0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005adc:	2000      	movs	r0, #0
 8005ade:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005ae0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae4:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ae6:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8005aea:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8005aee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
}
 8005af2:	4770      	bx	lr

08005af4 <HAL_I2C_Master_Transmit>:
{
 8005af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005af8:	b085      	sub	sp, #20
 8005afa:	4604      	mov	r4, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4691      	mov	r9, r2
 8005b00:	4698      	mov	r8, r3
 8005b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8005b04:	f7fe ff70 	bl	80049e8 <HAL_GetTick>
 8005b08:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8005b0e:	b2c0      	uxtb	r0, r0
 8005b10:	2820      	cmp	r0, #32
 8005b12:	d004      	beq.n	8005b1e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8005b14:	2702      	movs	r7, #2
}
 8005b16:	4638      	mov	r0, r7
 8005b18:	b005      	add	sp, #20
 8005b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b1e:	9500      	str	r5, [sp, #0]
 8005b20:	2319      	movs	r3, #25
 8005b22:	2201      	movs	r2, #1
 8005b24:	494f      	ldr	r1, [pc, #316]	@ (8005c64 <HAL_I2C_Master_Transmit+0x170>)
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff fb8f 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f040 8092 	bne.w	8005c56 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8005b32:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f000 808f 	beq.w	8005c5a <HAL_I2C_Master_Transmit+0x166>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f012 0f01 	tst.w	r2, #1
 8005b4a:	d103      	bne.n	8005b54 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b5c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b5e:	2321      	movs	r3, #33	@ 0x21
 8005b60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b64:	2310      	movs	r3, #16
 8005b66:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005b6e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b72:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b76:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b78:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c68 <HAL_I2C_Master_Transmit+0x174>)
 8005b7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b7e:	462b      	mov	r3, r5
 8005b80:	4632      	mov	r2, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7ff fc21 	bl	80053cc <I2C_MasterRequestWrite>
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d166      	bne.n	8005c5e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b90:	2300      	movs	r3, #0
 8005b92:	9303      	str	r3, [sp, #12]
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	9203      	str	r2, [sp, #12]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	9303      	str	r3, [sp, #12]
 8005b9e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8005ba0:	e011      	b.n	8005bc6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d001      	beq.n	8005bac <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8005ba8:	2701      	movs	r7, #1
 8005baa:	e7b4      	b.n	8005b16 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e7f7      	b.n	8005ba8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb8:	462a      	mov	r2, r5
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff fe35 	bl	800582c <I2C_WaitOnBTFFlagUntilTimeout>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d12e      	bne.n	8005c24 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8005bc6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d036      	beq.n	8005c3a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff fce5 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bda:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	7812      	ldrb	r2, [r2, #0]
 8005be0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005be2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005be8:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8005bea:	b289      	uxth	r1, r1
 8005bec:	3901      	subs	r1, #1
 8005bee:	b289      	uxth	r1, r1
 8005bf0:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bf2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	6951      	ldr	r1, [r2, #20]
 8005bfe:	f011 0f04 	tst.w	r1, #4
 8005c02:	d0d9      	beq.n	8005bb8 <HAL_I2C_Master_Transmit+0xc4>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0d7      	beq.n	8005bb8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c08:	7843      	ldrb	r3, [r0, #1]
 8005c0a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8005c0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005c0e:	3301      	adds	r3, #1
 8005c10:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8005c12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8005c1c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	8523      	strh	r3, [r4, #40]	@ 0x28
 8005c22:	e7c9      	b.n	8005bb8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8005c2a:	2701      	movs	r7, #1
 8005c2c:	e773      	b.n	8005b16 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	6813      	ldr	r3, [r2, #0]
 8005c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	e7f7      	b.n	8005c2a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	6813      	ldr	r3, [r2, #0]
 8005c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c42:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c44:	2320      	movs	r3, #32
 8005c46:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8005c50:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8005c54:	e75f      	b.n	8005b16 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8005c56:	2702      	movs	r7, #2
 8005c58:	e75d      	b.n	8005b16 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8005c5a:	2702      	movs	r7, #2
 8005c5c:	e75b      	b.n	8005b16 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8005c5e:	2701      	movs	r7, #1
 8005c60:	e759      	b.n	8005b16 <HAL_I2C_Master_Transmit+0x22>
 8005c62:	bf00      	nop
 8005c64:	00100002 	.word	0x00100002
 8005c68:	ffff0000 	.word	0xffff0000

08005c6c <HAL_I2C_Master_Receive>:
{
 8005c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c70:	b087      	sub	sp, #28
 8005c72:	4604      	mov	r4, r0
 8005c74:	460f      	mov	r7, r1
 8005c76:	4691      	mov	r9, r2
 8005c78:	4698      	mov	r8, r3
 8005c7a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 8005c7c:	f7fe feb4 	bl	80049e8 <HAL_GetTick>
 8005c80:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c82:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8005c86:	b2c0      	uxtb	r0, r0
 8005c88:	2820      	cmp	r0, #32
 8005c8a:	d004      	beq.n	8005c96 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8005c8c:	2702      	movs	r7, #2
}
 8005c8e:	4638      	mov	r0, r7
 8005c90:	b007      	add	sp, #28
 8005c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c96:	9500      	str	r5, [sp, #0]
 8005c98:	2319      	movs	r3, #25
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	4989      	ldr	r1, [pc, #548]	@ (8005ec4 <HAL_I2C_Master_Receive+0x258>)
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f7ff fad3 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f040 814f 	bne.w	8005f48 <HAL_I2C_Master_Receive+0x2dc>
    __HAL_LOCK(hi2c);
 8005caa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	f000 814c 	beq.w	8005f4c <HAL_I2C_Master_Receive+0x2e0>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	f012 0f01 	tst.w	r2, #1
 8005cc2:	d103      	bne.n	8005ccc <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cd6:	2322      	movs	r3, #34	@ 0x22
 8005cd8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005ce6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cea:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005cf0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cf2:	4b75      	ldr	r3, [pc, #468]	@ (8005ec8 <HAL_I2C_Master_Receive+0x25c>)
 8005cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7ff fbbf 	bl	8005480 <I2C_MasterRequestRead>
 8005d02:	4607      	mov	r7, r0
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f040 8123 	bne.w	8005f50 <HAL_I2C_Master_Receive+0x2e4>
    if (hi2c->XferSize == 0U)
 8005d0a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005d0c:	b95b      	cbnz	r3, 8005d26 <HAL_I2C_Master_Receive+0xba>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0e:	9302      	str	r3, [sp, #8]
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	9202      	str	r2, [sp, #8]
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	9202      	str	r2, [sp, #8]
 8005d1a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e07a      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
    else if (hi2c->XferSize == 1U)
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d00f      	beq.n	8005d4a <HAL_I2C_Master_Receive+0xde>
    else if (hi2c->XferSize == 2U)
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d01f      	beq.n	8005d6e <HAL_I2C_Master_Receive+0x102>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d36:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	9205      	str	r2, [sp, #20]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	9305      	str	r3, [sp, #20]
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	e068      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d52:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d54:	2300      	movs	r3, #0
 8005d56:	9303      	str	r3, [sp, #12]
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	9203      	str	r2, [sp, #12]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	9203      	str	r2, [sp, #12]
 8005d62:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e056      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	6813      	ldr	r3, [r2, #0]
 8005d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d76:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	6813      	ldr	r3, [r2, #0]
 8005d7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005d80:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d82:	2300      	movs	r3, #0
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	9204      	str	r2, [sp, #16]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	9b04      	ldr	r3, [sp, #16]
 8005d92:	e043      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d94:	462a      	mov	r2, r5
 8005d96:	4631      	mov	r1, r6
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7ff fd76 	bl	800588a <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f040 80d8 	bne.w	8005f54 <HAL_I2C_Master_Receive+0x2e8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005daa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005dac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005dae:	3301      	adds	r3, #1
 8005db0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005db2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005db4:	3b01      	subs	r3, #1
 8005db6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005db8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005dc2:	e02b      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dc4:	9500      	str	r5, [sp, #0]
 8005dc6:	4633      	mov	r3, r6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4940      	ldr	r1, [pc, #256]	@ (8005ecc <HAL_I2C_Master_Receive+0x260>)
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f7ff fa3c 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	f040 80c0 	bne.w	8005f58 <HAL_I2C_Master_Receive+0x2ec>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005de0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005de8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005dea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005dec:	1c53      	adds	r3, r2, #1
 8005dee:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005df0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005df2:	3b01      	subs	r3, #1
 8005df4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005df6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005e06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005e0c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005e12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e1c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	f000 8089 	beq.w	8005f36 <HAL_I2C_Master_Receive+0x2ca>
      if (hi2c->XferSize <= 3U)
 8005e24:	2903      	cmp	r1, #3
 8005e26:	d853      	bhi.n	8005ed0 <HAL_I2C_Master_Receive+0x264>
        if (hi2c->XferSize == 1U)
 8005e28:	2901      	cmp	r1, #1
 8005e2a:	d0b3      	beq.n	8005d94 <HAL_I2C_Master_Receive+0x128>
        else if (hi2c->XferSize == 2U)
 8005e2c:	2902      	cmp	r1, #2
 8005e2e:	d0c9      	beq.n	8005dc4 <HAL_I2C_Master_Receive+0x158>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e30:	9500      	str	r5, [sp, #0]
 8005e32:	4633      	mov	r3, r6
 8005e34:	2200      	movs	r2, #0
 8005e36:	4925      	ldr	r1, [pc, #148]	@ (8005ecc <HAL_I2C_Master_Receive+0x260>)
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff fa06 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f040 808c 	bne.w	8005f5c <HAL_I2C_Master_Receive+0x2f0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	6813      	ldr	r3, [r2, #0]
 8005e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e4c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e54:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005e56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e58:	3301      	adds	r3, #1
 8005e5a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005e5c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005e62:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8005e64:	b289      	uxth	r1, r1
 8005e66:	3901      	subs	r1, #1
 8005e68:	b289      	uxth	r1, r1
 8005e6a:	8561      	strh	r1, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e6c:	9500      	str	r5, [sp, #0]
 8005e6e:	4633      	mov	r3, r6
 8005e70:	2200      	movs	r2, #0
 8005e72:	4916      	ldr	r1, [pc, #88]	@ (8005ecc <HAL_I2C_Master_Receive+0x260>)
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff f9e8 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d170      	bne.n	8005f60 <HAL_I2C_Master_Receive+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e86:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e8e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005e90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005e92:	1c53      	adds	r3, r2, #1
 8005e94:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005e96:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005e9c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005eac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005eae:	3301      	adds	r3, #1
 8005eb0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005eb2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005ec2:	e7ab      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
 8005ec4:	00100002 	.word	0x00100002
 8005ec8:	ffff0000 	.word	0xffff0000
 8005ecc:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7ff fcd8 	bl	800588a <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d142      	bne.n	8005f64 <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ee4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ee6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8005eec:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8005eee:	3a01      	subs	r2, #1
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005ef4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	6959      	ldr	r1, [r3, #20]
 8005f02:	f011 0f04 	tst.w	r1, #4
 8005f06:	d089      	beq.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
          if (hi2c->XferSize == 3U)
 8005f08:	2a03      	cmp	r2, #3
 8005f0a:	d00f      	beq.n	8005f2c <HAL_I2C_Master_Receive+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f12:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005f14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f16:	3301      	adds	r3, #1
 8005f18:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005f1a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005f20:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005f2a:	e777      	b.n	8005e1c <HAL_I2C_Master_Receive+0x1b0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e7ea      	b.n	8005f0c <HAL_I2C_Master_Receive+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f36:	2320      	movs	r3, #32
 8005f38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8005f42:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8005f46:	e6a2      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8005f48:	2702      	movs	r7, #2
 8005f4a:	e6a0      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8005f4c:	2702      	movs	r7, #2
 8005f4e:	e69e      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 8005f50:	2701      	movs	r7, #1
 8005f52:	e69c      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8005f54:	2701      	movs	r7, #1
 8005f56:	e69a      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8005f58:	2701      	movs	r7, #1
 8005f5a:	e698      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8005f5c:	2701      	movs	r7, #1
 8005f5e:	e696      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8005f60:	2701      	movs	r7, #1
 8005f62:	e694      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 8005f64:	2701      	movs	r7, #1
 8005f66:	e692      	b.n	8005c8e <HAL_I2C_Master_Receive+0x22>

08005f68 <HAL_I2C_Mem_Write>:
{
 8005f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	4604      	mov	r4, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	4690      	mov	r8, r2
 8005f74:	4699      	mov	r9, r3
 8005f76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8005f78:	f7fe fd36 	bl	80049e8 <HAL_GetTick>
 8005f7c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f7e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8005f82:	b2c0      	uxtb	r0, r0
 8005f84:	2820      	cmp	r0, #32
 8005f86:	d003      	beq.n	8005f90 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8005f88:	2002      	movs	r0, #2
}
 8005f8a:	b003      	add	sp, #12
 8005f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f90:	9500      	str	r5, [sp, #0]
 8005f92:	2319      	movs	r3, #25
 8005f94:	2201      	movs	r2, #1
 8005f96:	494b      	ldr	r1, [pc, #300]	@ (80060c4 <HAL_I2C_Mem_Write+0x15c>)
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff f956 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f040 8089 	bne.w	80060b6 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8005fa4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	f000 8086 	beq.w	80060ba <HAL_I2C_Mem_Write+0x152>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	f012 0f01 	tst.w	r2, #1
 8005fbc:	d103      	bne.n	8005fc6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	f042 0201 	orr.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	6813      	ldr	r3, [r2, #0]
 8005fca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fce:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fd0:	2321      	movs	r3, #33	@ 0x21
 8005fd2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd6:	2340      	movs	r3, #64	@ 0x40
 8005fd8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fe4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8005fe8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005fec:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fee:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <HAL_I2C_Mem_Write+0x160>)
 8005ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff2:	9501      	str	r5, [sp, #4]
 8005ff4:	9600      	str	r6, [sp, #0]
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7ff faff 	bl	8005600 <I2C_RequestMemoryWrite>
 8006002:	2800      	cmp	r0, #0
 8006004:	d15b      	bne.n	80060be <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8006006:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	d035      	beq.n	8006078 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600c:	462a      	mov	r2, r5
 800600e:	4631      	mov	r1, r6
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff fac5 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006016:	bb20      	cbnz	r0, 8006062 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006018:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006020:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006022:	1c53      	adds	r3, r2, #1
 8006024:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006026:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8006028:	3901      	subs	r1, #1
 800602a:	b289      	uxth	r1, r1
 800602c:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800602e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	6958      	ldr	r0, [r3, #20]
 800603c:	f010 0f04 	tst.w	r0, #4
 8006040:	d0e1      	beq.n	8006006 <HAL_I2C_Mem_Write+0x9e>
 8006042:	2900      	cmp	r1, #0
 8006044:	d0df      	beq.n	8006006 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006046:	7852      	ldrb	r2, [r2, #1]
 8006048:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800604a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800604c:	3301      	adds	r3, #1
 800604e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8006050:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8006056:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006060:	e7d1      	b.n	8006006 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006064:	2b04      	cmp	r3, #4
 8006066:	d001      	beq.n	800606c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8006068:	2001      	movs	r0, #1
 800606a:	e78e      	b.n	8005f8a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e7f7      	b.n	8006068 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006078:	462a      	mov	r2, r5
 800607a:	4631      	mov	r1, r6
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff fbd5 	bl	800582c <I2C_WaitOnBTFFlagUntilTimeout>
 8006082:	b150      	cbz	r0, 800609a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006086:	2b04      	cmp	r3, #4
 8006088:	d001      	beq.n	800608e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800608a:	2001      	movs	r0, #1
 800608c:	e77d      	b.n	8005f8a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	e7f7      	b.n	800608a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	6813      	ldr	r3, [r2, #0]
 800609e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	2320      	movs	r3, #32
 80060a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80060b0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80060b4:	e769      	b.n	8005f8a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80060b6:	2002      	movs	r0, #2
 80060b8:	e767      	b.n	8005f8a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80060ba:	2002      	movs	r0, #2
 80060bc:	e765      	b.n	8005f8a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80060be:	2001      	movs	r0, #1
 80060c0:	e763      	b.n	8005f8a <HAL_I2C_Mem_Write+0x22>
 80060c2:	bf00      	nop
 80060c4:	00100002 	.word	0x00100002
 80060c8:	ffff0000 	.word	0xffff0000

080060cc <HAL_I2C_Mem_Read>:
{
 80060cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060d0:	b087      	sub	sp, #28
 80060d2:	4604      	mov	r4, r0
 80060d4:	460f      	mov	r7, r1
 80060d6:	4690      	mov	r8, r2
 80060d8:	4699      	mov	r9, r3
 80060da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80060dc:	f7fe fc84 	bl	80049e8 <HAL_GetTick>
 80060e0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80060e6:	b2c0      	uxtb	r0, r0
 80060e8:	2820      	cmp	r0, #32
 80060ea:	d004      	beq.n	80060f6 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 80060ec:	2702      	movs	r7, #2
}
 80060ee:	4638      	mov	r0, r7
 80060f0:	b007      	add	sp, #28
 80060f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f6:	9500      	str	r5, [sp, #0]
 80060f8:	2319      	movs	r3, #25
 80060fa:	2201      	movs	r2, #1
 80060fc:	4988      	ldr	r1, [pc, #544]	@ (8006320 <HAL_I2C_Mem_Read+0x254>)
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff f8a3 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 8006104:	2800      	cmp	r0, #0
 8006106:	f040 814d 	bne.w	80063a4 <HAL_I2C_Mem_Read+0x2d8>
    __HAL_LOCK(hi2c);
 800610a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	f000 814a 	beq.w	80063a8 <HAL_I2C_Mem_Read+0x2dc>
 8006114:	2301      	movs	r3, #1
 8006116:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f012 0f01 	tst.w	r2, #1
 8006122:	d103      	bne.n	800612c <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006134:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006136:	2322      	movs	r3, #34	@ 0x22
 8006138:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800613c:	2340      	movs	r3, #64	@ 0x40
 800613e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006142:	2300      	movs	r3, #0
 8006144:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8006146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006148:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800614a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800614e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006150:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006152:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006154:	4b73      	ldr	r3, [pc, #460]	@ (8006324 <HAL_I2C_Mem_Read+0x258>)
 8006156:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006158:	9501      	str	r5, [sp, #4]
 800615a:	9600      	str	r6, [sp, #0]
 800615c:	464b      	mov	r3, r9
 800615e:	4642      	mov	r2, r8
 8006160:	4639      	mov	r1, r7
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff fab8 	bl	80056d8 <I2C_RequestMemoryRead>
 8006168:	4607      	mov	r7, r0
 800616a:	2800      	cmp	r0, #0
 800616c:	f040 811e 	bne.w	80063ac <HAL_I2C_Mem_Read+0x2e0>
    if (hi2c->XferSize == 0U)
 8006170:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006172:	b95b      	cbnz	r3, 800618c <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006174:	9302      	str	r3, [sp, #8]
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	9202      	str	r2, [sp, #8]
 800617c:	699a      	ldr	r2, [r3, #24]
 800617e:	9202      	str	r2, [sp, #8]
 8006180:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e075      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 800618c:	2b01      	cmp	r3, #1
 800618e:	d00a      	beq.n	80061a6 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8006190:	2b02      	cmp	r3, #2
 8006192:	d01a      	beq.n	80061ca <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006194:	2300      	movs	r3, #0
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	9205      	str	r2, [sp, #20]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	9b05      	ldr	r3, [sp, #20]
 80061a4:	e068      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	6813      	ldr	r3, [r2, #0]
 80061aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ae:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b0:	2300      	movs	r3, #0
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	9203      	str	r2, [sp, #12]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	9203      	str	r2, [sp, #12]
 80061be:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e056      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	6813      	ldr	r3, [r2, #0]
 80061ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061d2:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	6813      	ldr	r3, [r2, #0]
 80061d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80061dc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061de:	2300      	movs	r3, #0
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	695a      	ldr	r2, [r3, #20]
 80061e6:	9204      	str	r2, [sp, #16]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	e043      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f0:	462a      	mov	r2, r5
 80061f2:	4631      	mov	r1, r6
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7ff fb48 	bl	800588a <I2C_WaitOnRXNEFlagUntilTimeout>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f040 80d8 	bne.w	80063b0 <HAL_I2C_Mem_Read+0x2e4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006206:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006208:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800620a:	3301      	adds	r3, #1
 800620c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800620e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006210:	3b01      	subs	r3, #1
 8006212:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006214:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800621e:	e02b      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006220:	9500      	str	r5, [sp, #0]
 8006222:	4633      	mov	r3, r6
 8006224:	2200      	movs	r2, #0
 8006226:	4940      	ldr	r1, [pc, #256]	@ (8006328 <HAL_I2C_Mem_Read+0x25c>)
 8006228:	4620      	mov	r0, r4
 800622a:	f7ff f80e 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 800622e:	2800      	cmp	r0, #0
 8006230:	f040 80c0 	bne.w	80063b4 <HAL_I2C_Mem_Read+0x2e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800623c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006244:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006246:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006248:	1c53      	adds	r3, r2, #1
 800624a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800624c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800624e:	3b01      	subs	r3, #1
 8006250:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006252:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006262:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8006268:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800626a:	3b01      	subs	r3, #1
 800626c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800626e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29b      	uxth	r3, r3
 8006276:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006278:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8089 	beq.w	8006392 <HAL_I2C_Mem_Read+0x2c6>
      if (hi2c->XferSize <= 3U)
 8006280:	2b03      	cmp	r3, #3
 8006282:	d853      	bhi.n	800632c <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 8006284:	2b01      	cmp	r3, #1
 8006286:	d0b3      	beq.n	80061f0 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8006288:	2b02      	cmp	r3, #2
 800628a:	d0c9      	beq.n	8006220 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800628c:	9500      	str	r5, [sp, #0]
 800628e:	4633      	mov	r3, r6
 8006290:	2200      	movs	r2, #0
 8006292:	4925      	ldr	r1, [pc, #148]	@ (8006328 <HAL_I2C_Mem_Read+0x25c>)
 8006294:	4620      	mov	r0, r4
 8006296:	f7fe ffd8 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 808c 	bne.w	80063b8 <HAL_I2C_Mem_Read+0x2ec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062a8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062b0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80062b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062b4:	3301      	adds	r3, #1
 80062b6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80062b8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80062ba:	3b01      	subs	r3, #1
 80062bc:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80062be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062c8:	9500      	str	r5, [sp, #0]
 80062ca:	4633      	mov	r3, r6
 80062cc:	2200      	movs	r2, #0
 80062ce:	4916      	ldr	r1, [pc, #88]	@ (8006328 <HAL_I2C_Mem_Read+0x25c>)
 80062d0:	4620      	mov	r0, r4
 80062d2:	f7fe ffba 	bl	800524a <I2C_WaitOnFlagUntilTimeout>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d170      	bne.n	80063bc <HAL_I2C_Mem_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	6813      	ldr	r3, [r2, #0]
 80062de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062e2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062ea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80062ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80062ee:	1c53      	adds	r3, r2, #1
 80062f0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80062f2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80062f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006308:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800630a:	3301      	adds	r3, #1
 800630c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800630e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006310:	3b01      	subs	r3, #1
 8006312:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006314:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29b      	uxth	r3, r3
 800631c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800631e:	e7ab      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
 8006320:	00100002 	.word	0x00100002
 8006324:	ffff0000 	.word	0xffff0000
 8006328:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800632c:	462a      	mov	r2, r5
 800632e:	4631      	mov	r1, r6
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff faaa 	bl	800588a <I2C_WaitOnRXNEFlagUntilTimeout>
 8006336:	2800      	cmp	r0, #0
 8006338:	d142      	bne.n	80063c0 <HAL_I2C_Mem_Read+0x2f4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006340:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006342:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006344:	3301      	adds	r3, #1
 8006346:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8006348:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800634a:	3a01      	subs	r2, #1
 800634c:	b292      	uxth	r2, r2
 800634e:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8006350:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29b      	uxth	r3, r3
 8006358:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6959      	ldr	r1, [r3, #20]
 800635e:	f011 0f04 	tst.w	r1, #4
 8006362:	d089      	beq.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
          if (hi2c->XferSize == 3U)
 8006364:	2a03      	cmp	r2, #3
 8006366:	d00f      	beq.n	8006388 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800636e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006370:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006372:	3301      	adds	r3, #1
 8006374:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8006376:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800637c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006386:	e777      	b.n	8006278 <HAL_I2C_Mem_Read+0x1ac>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e7ea      	b.n	8006368 <HAL_I2C_Mem_Read+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006392:	2320      	movs	r3, #32
 8006394:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	2300      	movs	r3, #0
 800639a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800639e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80063a2:	e6a4      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80063a4:	2702      	movs	r7, #2
 80063a6:	e6a2      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80063a8:	2702      	movs	r7, #2
 80063aa:	e6a0      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80063ac:	2701      	movs	r7, #1
 80063ae:	e69e      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80063b0:	2701      	movs	r7, #1
 80063b2:	e69c      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80063b4:	2701      	movs	r7, #1
 80063b6:	e69a      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80063b8:	2701      	movs	r7, #1
 80063ba:	e698      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80063bc:	2701      	movs	r7, #1
 80063be:	e696      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80063c0:	2701      	movs	r7, #1
 80063c2:	e694      	b.n	80060ee <HAL_I2C_Mem_Read+0x22>

080063c4 <HAL_I2C_GetState>:
  return hi2c->State;
 80063c4:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 80063c8:	4770      	bx	lr

080063ca <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80063ca:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
 80063cc:	4770      	bx	lr
	...

080063d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063d0:	b500      	push	{lr}
 80063d2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063d4:	2100      	movs	r1, #0
 80063d6:	9100      	str	r1, [sp, #0]
 80063d8:	4b0c      	ldr	r3, [pc, #48]	@ (800640c <HAL_MspInit+0x3c>)
 80063da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80063e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063e4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80063e8:	9200      	str	r2, [sp, #0]
 80063ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ec:	9101      	str	r1, [sp, #4]
 80063ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80063f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006400:	2007      	movs	r0, #7
 8006402:	f7fe fb4d 	bl	8004aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006406:	b003      	add	sp, #12
 8006408:	f85d fb04 	ldr.w	pc, [sp], #4
 800640c:	40023800 	.word	0x40023800

08006410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006410:	b500      	push	{lr}
 8006412:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8006414:	6803      	ldr	r3, [r0, #0]
 8006416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641a:	d005      	beq.n	8006428 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800641c:	4a17      	ldr	r2, [pc, #92]	@ (800647c <HAL_TIM_Base_MspInit+0x6c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d017      	beq.n	8006452 <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006422:	b003      	add	sp, #12
 8006424:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006428:	2100      	movs	r1, #0
 800642a:	9100      	str	r1, [sp, #0]
 800642c:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8006430:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	641a      	str	r2, [r3, #64]	@ 0x40
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006442:	460a      	mov	r2, r1
 8006444:	201c      	movs	r0, #28
 8006446:	f7fe fb3d 	bl	8004ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800644a:	201c      	movs	r0, #28
 800644c:	f7fe fb4a 	bl	8004ae4 <HAL_NVIC_EnableIRQ>
 8006450:	e7e7      	b.n	8006422 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006452:	2100      	movs	r1, #0
 8006454:	9101      	str	r1, [sp, #4]
 8006456:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <HAL_TIM_Base_MspInit+0x70>)
 8006458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800645a:	f042 0202 	orr.w	r2, r2, #2
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800646a:	460a      	mov	r2, r1
 800646c:	201d      	movs	r0, #29
 800646e:	f7fe fb29 	bl	8004ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006472:	201d      	movs	r0, #29
 8006474:	f7fe fb36 	bl	8004ae4 <HAL_NVIC_EnableIRQ>
}
 8006478:	e7d3      	b.n	8006422 <HAL_TIM_Base_MspInit+0x12>
 800647a:	bf00      	nop
 800647c:	40000400 	.word	0x40000400
 8006480:	40023800 	.word	0x40023800

08006484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006484:	b530      	push	{r4, r5, lr}
 8006486:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006488:	2300      	movs	r3, #0
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	9306      	str	r3, [sp, #24]
 8006492:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8006494:	6802      	ldr	r2, [r0, #0]
 8006496:	4b22      	ldr	r3, [pc, #136]	@ (8006520 <HAL_UART_MspInit+0x9c>)
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800649c:	b009      	add	sp, #36	@ 0x24
 800649e:	bd30      	pop	{r4, r5, pc}
 80064a0:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 80064a2:	2500      	movs	r5, #0
 80064a4:	9501      	str	r5, [sp, #4]
 80064a6:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80064aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80064b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80064b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064b4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80064b8:	9201      	str	r2, [sp, #4]
 80064ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064bc:	9502      	str	r5, [sp, #8]
 80064be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	9302      	str	r3, [sp, #8]
 80064ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80064d0:	230c      	movs	r3, #12
 80064d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d4:	2302      	movs	r3, #2
 80064d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d8:	2303      	movs	r3, #3
 80064da:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064dc:	2307      	movs	r3, #7
 80064de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064e0:	a903      	add	r1, sp, #12
 80064e2:	4810      	ldr	r0, [pc, #64]	@ (8006524 <HAL_UART_MspInit+0xa0>)
 80064e4:	f7fe fd06 	bl	8004ef4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80064e8:	480f      	ldr	r0, [pc, #60]	@ (8006528 <HAL_UART_MspInit+0xa4>)
 80064ea:	4b10      	ldr	r3, [pc, #64]	@ (800652c <HAL_UART_MspInit+0xa8>)
 80064ec:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80064ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064f2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064f8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064fe:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006500:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006502:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006504:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006506:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006508:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800650a:	f7fe fb6d 	bl	8004be8 <HAL_DMA_Init>
 800650e:	b918      	cbnz	r0, 8006518 <HAL_UART_MspInit+0x94>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <HAL_UART_MspInit+0xa4>)
 8006512:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006514:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8006516:	e7c1      	b.n	800649c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8006518:	f7fe f8c8 	bl	80046ac <Error_Handler>
 800651c:	e7f8      	b.n	8006510 <HAL_UART_MspInit+0x8c>
 800651e:	bf00      	nop
 8006520:	40004400 	.word	0x40004400
 8006524:	40020000 	.word	0x40020000
 8006528:	20000378 	.word	0x20000378
 800652c:	400260a0 	.word	0x400260a0

08006530 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006530:	2800      	cmp	r0, #0
 8006532:	f000 81e0 	beq.w	80068f6 <HAL_RCC_OscConfig+0x3c6>
{
 8006536:	b570      	push	{r4, r5, r6, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653c:	6803      	ldr	r3, [r0, #0]
 800653e:	f013 0f01 	tst.w	r3, #1
 8006542:	d03b      	beq.n	80065bc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006544:	4b9f      	ldr	r3, [pc, #636]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 030c 	and.w	r3, r3, #12
 800654c:	2b04      	cmp	r3, #4
 800654e:	d02c      	beq.n	80065aa <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006550:	4b9c      	ldr	r3, [pc, #624]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006558:	2b08      	cmp	r3, #8
 800655a:	d021      	beq.n	80065a0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800655c:	6863      	ldr	r3, [r4, #4]
 800655e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006562:	d04f      	beq.n	8006604 <HAL_RCC_OscConfig+0xd4>
 8006564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006568:	d052      	beq.n	8006610 <HAL_RCC_OscConfig+0xe0>
 800656a:	4b96      	ldr	r3, [pc, #600]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800657a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d050      	beq.n	8006624 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006582:	f7fe fa31 	bl	80049e8 <HAL_GetTick>
 8006586:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006588:	4b8e      	ldr	r3, [pc, #568]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006590:	d114      	bne.n	80065bc <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006592:	f7fe fa29 	bl	80049e8 <HAL_GetTick>
 8006596:	1b40      	subs	r0, r0, r5
 8006598:	2864      	cmp	r0, #100	@ 0x64
 800659a:	d9f5      	bls.n	8006588 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800659c:	2003      	movs	r0, #3
 800659e:	e1b1      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a0:	4b88      	ldr	r3, [pc, #544]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80065a8:	d0d8      	beq.n	800655c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065aa:	4b86      	ldr	r3, [pc, #536]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80065b2:	d003      	beq.n	80065bc <HAL_RCC_OscConfig+0x8c>
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 819f 	beq.w	80068fa <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	f013 0f02 	tst.w	r3, #2
 80065c2:	d054      	beq.n	800666e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065c4:	4b7f      	ldr	r3, [pc, #508]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f013 0f0c 	tst.w	r3, #12
 80065cc:	d03e      	beq.n	800664c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ce:	4b7d      	ldr	r3, [pc, #500]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d033      	beq.n	8006642 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065da:	68e3      	ldr	r3, [r4, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d068      	beq.n	80066b2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065e0:	4b79      	ldr	r3, [pc, #484]	@ (80067c8 <HAL_RCC_OscConfig+0x298>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fe f9ff 	bl	80049e8 <HAL_GetTick>
 80065ea:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ec:	4b75      	ldr	r3, [pc, #468]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f013 0f02 	tst.w	r3, #2
 80065f4:	d154      	bne.n	80066a0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f6:	f7fe f9f7 	bl	80049e8 <HAL_GetTick>
 80065fa:	1b40      	subs	r0, r0, r5
 80065fc:	2802      	cmp	r0, #2
 80065fe:	d9f5      	bls.n	80065ec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006600:	2003      	movs	r0, #3
 8006602:	e17f      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006604:	4a6f      	ldr	r2, [pc, #444]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e7b5      	b.n	800657c <HAL_RCC_OscConfig+0x4c>
 8006610:	4b6c      	ldr	r3, [pc, #432]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e7ab      	b.n	800657c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006624:	f7fe f9e0 	bl	80049e8 <HAL_GetTick>
 8006628:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662a:	4b66      	ldr	r3, [pc, #408]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006632:	d0c3      	beq.n	80065bc <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006634:	f7fe f9d8 	bl	80049e8 <HAL_GetTick>
 8006638:	1b40      	subs	r0, r0, r5
 800663a:	2864      	cmp	r0, #100	@ 0x64
 800663c:	d9f5      	bls.n	800662a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800663e:	2003      	movs	r0, #3
 8006640:	e160      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006642:	4b60      	ldr	r3, [pc, #384]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800664a:	d1c6      	bne.n	80065da <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664c:	4b5d      	ldr	r3, [pc, #372]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f013 0f02 	tst.w	r3, #2
 8006654:	d003      	beq.n	800665e <HAL_RCC_OscConfig+0x12e>
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	2b01      	cmp	r3, #1
 800665a:	f040 8150 	bne.w	80068fe <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665e:	4a59      	ldr	r2, [pc, #356]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006660:	6813      	ldr	r3, [r2, #0]
 8006662:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006666:	6921      	ldr	r1, [r4, #16]
 8006668:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800666c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	f013 0f08 	tst.w	r3, #8
 8006674:	d042      	beq.n	80066fc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006676:	6963      	ldr	r3, [r4, #20]
 8006678:	b36b      	cbz	r3, 80066d6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800667a:	4b53      	ldr	r3, [pc, #332]	@ (80067c8 <HAL_RCC_OscConfig+0x298>)
 800667c:	2201      	movs	r2, #1
 800667e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fe f9b1 	bl	80049e8 <HAL_GetTick>
 8006686:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006688:	4b4e      	ldr	r3, [pc, #312]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800668a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668c:	f013 0f02 	tst.w	r3, #2
 8006690:	d134      	bne.n	80066fc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006692:	f7fe f9a9 	bl	80049e8 <HAL_GetTick>
 8006696:	1b40      	subs	r0, r0, r5
 8006698:	2802      	cmp	r0, #2
 800669a:	d9f5      	bls.n	8006688 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800669c:	2003      	movs	r0, #3
 800669e:	e131      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4a48      	ldr	r2, [pc, #288]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80066a8:	6921      	ldr	r1, [r4, #16]
 80066aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e7dd      	b.n	800666e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80066b2:	4b45      	ldr	r3, [pc, #276]	@ (80067c8 <HAL_RCC_OscConfig+0x298>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80066b8:	f7fe f996 	bl	80049e8 <HAL_GetTick>
 80066bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066be:	4b41      	ldr	r3, [pc, #260]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f013 0f02 	tst.w	r3, #2
 80066c6:	d0d2      	beq.n	800666e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c8:	f7fe f98e 	bl	80049e8 <HAL_GetTick>
 80066cc:	1b40      	subs	r0, r0, r5
 80066ce:	2802      	cmp	r0, #2
 80066d0:	d9f5      	bls.n	80066be <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80066d2:	2003      	movs	r0, #3
 80066d4:	e116      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d6:	4b3c      	ldr	r3, [pc, #240]	@ (80067c8 <HAL_RCC_OscConfig+0x298>)
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066de:	f7fe f983 	bl	80049e8 <HAL_GetTick>
 80066e2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e4:	4b37      	ldr	r3, [pc, #220]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80066e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e8:	f013 0f02 	tst.w	r3, #2
 80066ec:	d006      	beq.n	80066fc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ee:	f7fe f97b 	bl	80049e8 <HAL_GetTick>
 80066f2:	1b40      	subs	r0, r0, r5
 80066f4:	2802      	cmp	r0, #2
 80066f6:	d9f5      	bls.n	80066e4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80066f8:	2003      	movs	r0, #3
 80066fa:	e103      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	f013 0f04 	tst.w	r3, #4
 8006702:	d077      	beq.n	80067f4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006704:	4b2f      	ldr	r3, [pc, #188]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800670c:	d133      	bne.n	8006776 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	4b2c      	ldr	r3, [pc, #176]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 8006714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006716:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800671a:	641a      	str	r2, [r3, #64]	@ 0x40
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006726:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006728:	4b28      	ldr	r3, [pc, #160]	@ (80067cc <HAL_RCC_OscConfig+0x29c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006730:	d023      	beq.n	800677a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006732:	68a3      	ldr	r3, [r4, #8]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d034      	beq.n	80067a2 <HAL_RCC_OscConfig+0x272>
 8006738:	2b05      	cmp	r3, #5
 800673a:	d038      	beq.n	80067ae <HAL_RCC_OscConfig+0x27e>
 800673c:	4b21      	ldr	r3, [pc, #132]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800673e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	671a      	str	r2, [r3, #112]	@ 0x70
 8006746:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006748:	f022 0204 	bic.w	r2, r2, #4
 800674c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d03d      	beq.n	80067d0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006754:	f7fe f948 	bl	80049e8 <HAL_GetTick>
 8006758:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800675a:	4b1a      	ldr	r3, [pc, #104]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675e:	f013 0f02 	tst.w	r3, #2
 8006762:	d146      	bne.n	80067f2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006764:	f7fe f940 	bl	80049e8 <HAL_GetTick>
 8006768:	1b80      	subs	r0, r0, r6
 800676a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800676e:	4298      	cmp	r0, r3
 8006770:	d9f3      	bls.n	800675a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8006772:	2003      	movs	r0, #3
 8006774:	e0c6      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8006776:	2500      	movs	r5, #0
 8006778:	e7d6      	b.n	8006728 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800677a:	4a14      	ldr	r2, [pc, #80]	@ (80067cc <HAL_RCC_OscConfig+0x29c>)
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006782:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006784:	f7fe f930 	bl	80049e8 <HAL_GetTick>
 8006788:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678a:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <HAL_RCC_OscConfig+0x29c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006792:	d1ce      	bne.n	8006732 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006794:	f7fe f928 	bl	80049e8 <HAL_GetTick>
 8006798:	1b80      	subs	r0, r0, r6
 800679a:	2802      	cmp	r0, #2
 800679c:	d9f5      	bls.n	800678a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800679e:	2003      	movs	r0, #3
 80067a0:	e0b0      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a2:	4a08      	ldr	r2, [pc, #32]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80067a4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ac:	e7cf      	b.n	800674e <HAL_RCC_OscConfig+0x21e>
 80067ae:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_RCC_OscConfig+0x294>)
 80067b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067b2:	f042 0204 	orr.w	r2, r2, #4
 80067b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80067b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	671a      	str	r2, [r3, #112]	@ 0x70
 80067c0:	e7c5      	b.n	800674e <HAL_RCC_OscConfig+0x21e>
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d0:	f7fe f90a 	bl	80049e8 <HAL_GetTick>
 80067d4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d6:	4b52      	ldr	r3, [pc, #328]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	f013 0f02 	tst.w	r3, #2
 80067de:	d008      	beq.n	80067f2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f7fe f902 	bl	80049e8 <HAL_GetTick>
 80067e4:	1b80      	subs	r0, r0, r6
 80067e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067ea:	4298      	cmp	r0, r3
 80067ec:	d9f3      	bls.n	80067d6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80067ee:	2003      	movs	r0, #3
 80067f0:	e088      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067f2:	b9ed      	cbnz	r5, 8006830 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067f4:	69a3      	ldr	r3, [r4, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8083 	beq.w	8006902 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067fc:	4a48      	ldr	r2, [pc, #288]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 80067fe:	6892      	ldr	r2, [r2, #8]
 8006800:	f002 020c 	and.w	r2, r2, #12
 8006804:	2a08      	cmp	r2, #8
 8006806:	d051      	beq.n	80068ac <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006808:	2b02      	cmp	r3, #2
 800680a:	d017      	beq.n	800683c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680c:	4b45      	ldr	r3, [pc, #276]	@ (8006924 <HAL_RCC_OscConfig+0x3f4>)
 800680e:	2200      	movs	r2, #0
 8006810:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006812:	f7fe f8e9 	bl	80049e8 <HAL_GetTick>
 8006816:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006818:	4b41      	ldr	r3, [pc, #260]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006820:	d042      	beq.n	80068a8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006822:	f7fe f8e1 	bl	80049e8 <HAL_GetTick>
 8006826:	1b00      	subs	r0, r0, r4
 8006828:	2802      	cmp	r0, #2
 800682a:	d9f5      	bls.n	8006818 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800682c:	2003      	movs	r0, #3
 800682e:	e069      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006830:	4a3b      	ldr	r2, [pc, #236]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 8006832:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	@ 0x40
 800683a:	e7db      	b.n	80067f4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800683c:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <HAL_RCC_OscConfig+0x3f4>)
 800683e:	2200      	movs	r2, #0
 8006840:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006842:	f7fe f8d1 	bl	80049e8 <HAL_GetTick>
 8006846:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006848:	4b35      	ldr	r3, [pc, #212]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006850:	d006      	beq.n	8006860 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006852:	f7fe f8c9 	bl	80049e8 <HAL_GetTick>
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	2802      	cmp	r0, #2
 800685a:	d9f5      	bls.n	8006848 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800685c:	2003      	movs	r0, #3
 800685e:	e051      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006860:	69e3      	ldr	r3, [r4, #28]
 8006862:	6a22      	ldr	r2, [r4, #32]
 8006864:	4313      	orrs	r3, r2
 8006866:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006868:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800686c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800686e:	0852      	lsrs	r2, r2, #1
 8006870:	3a01      	subs	r2, #1
 8006872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006876:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006878:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800687c:	4a28      	ldr	r2, [pc, #160]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 800687e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006880:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <HAL_RCC_OscConfig+0x3f4>)
 8006882:	2201      	movs	r2, #1
 8006884:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006886:	f7fe f8af 	bl	80049e8 <HAL_GetTick>
 800688a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006894:	d106      	bne.n	80068a4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006896:	f7fe f8a7 	bl	80049e8 <HAL_GetTick>
 800689a:	1b00      	subs	r0, r0, r4
 800689c:	2802      	cmp	r0, #2
 800689e:	d9f5      	bls.n	800688c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80068a0:	2003      	movs	r0, #3
 80068a2:	e02f      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80068a4:	2000      	movs	r0, #0
 80068a6:	e02d      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e02b      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d02b      	beq.n	8006908 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80068b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006920 <HAL_RCC_OscConfig+0x3f0>)
 80068b2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80068b8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ba:	4291      	cmp	r1, r2
 80068bc:	d126      	bne.n	800690c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068c2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c4:	428a      	cmp	r2, r1
 80068c6:	d123      	bne.n	8006910 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ca:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80068ce:	401a      	ands	r2, r3
 80068d0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80068d4:	d11e      	bne.n	8006914 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80068da:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80068dc:	0852      	lsrs	r2, r2, #1
 80068de:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80068e4:	d118      	bne.n	8006918 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068e6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80068ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068ec:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80068f0:	d114      	bne.n	800691c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80068f2:	2000      	movs	r0, #0
 80068f4:	e006      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80068f6:	2001      	movs	r0, #1
}
 80068f8:	4770      	bx	lr
        return HAL_ERROR;
 80068fa:	2001      	movs	r0, #1
 80068fc:	e002      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80068fe:	2001      	movs	r0, #1
 8006900:	e000      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8006902:	2000      	movs	r0, #0
}
 8006904:	b002      	add	sp, #8
 8006906:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006908:	2001      	movs	r0, #1
 800690a:	e7fb      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800690c:	2001      	movs	r0, #1
 800690e:	e7f9      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
 8006910:	2001      	movs	r0, #1
 8006912:	e7f7      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
 8006914:	2001      	movs	r0, #1
 8006916:	e7f5      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
 8006918:	2001      	movs	r0, #1
 800691a:	e7f3      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
 800691c:	2001      	movs	r0, #1
 800691e:	e7f1      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
 8006920:	40023800 	.word	0x40023800
 8006924:	42470000 	.word	0x42470000

08006928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006928:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800692a:	4b33      	ldr	r3, [pc, #204]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b04      	cmp	r3, #4
 8006934:	d05b      	beq.n	80069ee <HAL_RCC_GetSysClockFreq+0xc6>
 8006936:	2b08      	cmp	r3, #8
 8006938:	d15b      	bne.n	80069f2 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800693a:	4b2f      	ldr	r3, [pc, #188]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006948:	d02c      	beq.n	80069a4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800694a:	4b2b      	ldr	r3, [pc, #172]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800694c:	6858      	ldr	r0, [r3, #4]
 800694e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006952:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8006956:	ebbc 0c00 	subs.w	ip, ip, r0
 800695a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800695e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8006962:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8006966:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800696a:	ebb1 010c 	subs.w	r1, r1, ip
 800696e:	eb63 030e 	sbc.w	r3, r3, lr
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006978:	00c9      	lsls	r1, r1, #3
 800697a:	eb11 0c00 	adds.w	ip, r1, r0
 800697e:	f143 0300 	adc.w	r3, r3, #0
 8006982:	0259      	lsls	r1, r3, #9
 8006984:	2300      	movs	r3, #0
 8006986:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800698a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800698e:	f7fa f845 	bl	8000a1c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006992:	4b19      	ldr	r3, [pc, #100]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800699e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80069a2:	e027      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069a4:	4b14      	ldr	r3, [pc, #80]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80069a6:	6858      	ldr	r0, [r3, #4]
 80069a8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80069ac:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80069b0:	ebbc 0c00 	subs.w	ip, ip, r0
 80069b4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80069b8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80069bc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80069c0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80069c4:	ebb1 010c 	subs.w	r1, r1, ip
 80069c8:	eb63 030e 	sbc.w	r3, r3, lr
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069d2:	00c9      	lsls	r1, r1, #3
 80069d4:	eb11 0c00 	adds.w	ip, r1, r0
 80069d8:	f143 0300 	adc.w	r3, r3, #0
 80069dc:	0299      	lsls	r1, r3, #10
 80069de:	2300      	movs	r3, #0
 80069e0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80069e4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80069e8:	f7fa f818 	bl	8000a1c <__aeabi_uldivmod>
 80069ec:	e7d1      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80069ee:	4803      	ldr	r0, [pc, #12]	@ (80069fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80069f0:	e000      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069f2:	4803      	ldr	r0, [pc, #12]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80069f4:	bd08      	pop	{r3, pc}
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800
 80069fc:	007a1200 	.word	0x007a1200
 8006a00:	00f42400 	.word	0x00f42400

08006a04 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f000 809b 	beq.w	8006b40 <HAL_RCC_ClockConfig+0x13c>
{
 8006a0a:	b570      	push	{r4, r5, r6, lr}
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a10:	4b4f      	ldr	r3, [pc, #316]	@ (8006b50 <HAL_RCC_ClockConfig+0x14c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	d208      	bcs.n	8006a2e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1c:	b2cb      	uxtb	r3, r1
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b50 <HAL_RCC_ClockConfig+0x14c>)
 8006a20:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a22:	6813      	ldr	r3, [r2, #0]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	f040 808b 	bne.w	8006b44 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f013 0f02 	tst.w	r3, #2
 8006a34:	d017      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a36:	f013 0f04 	tst.w	r3, #4
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a3c:	4a45      	ldr	r2, [pc, #276]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006a3e:	6893      	ldr	r3, [r2, #8]
 8006a40:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a44:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f013 0f08 	tst.w	r3, #8
 8006a4c:	d004      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a4e:	4a41      	ldr	r2, [pc, #260]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006a50:	6893      	ldr	r3, [r2, #8]
 8006a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a56:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a58:	4a3e      	ldr	r2, [pc, #248]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006a5a:	6893      	ldr	r3, [r2, #8]
 8006a5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a60:	68a1      	ldr	r1, [r4, #8]
 8006a62:	430b      	orrs	r3, r1
 8006a64:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f013 0f01 	tst.w	r3, #1
 8006a6c:	d032      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a6e:	6863      	ldr	r3, [r4, #4]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d021      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a74:	1e9a      	subs	r2, r3, #2
 8006a76:	2a01      	cmp	r2, #1
 8006a78:	d925      	bls.n	8006ac6 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7a:	4a36      	ldr	r2, [pc, #216]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	f012 0f02 	tst.w	r2, #2
 8006a82:	d061      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a84:	4933      	ldr	r1, [pc, #204]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006a86:	688a      	ldr	r2, [r1, #8]
 8006a88:	f022 0203 	bic.w	r2, r2, #3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006a90:	f7fd ffaa 	bl	80049e8 <HAL_GetTick>
 8006a94:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	4b2f      	ldr	r3, [pc, #188]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006aa4:	d016      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa6:	f7fd ff9f 	bl	80049e8 <HAL_GetTick>
 8006aaa:	1b80      	subs	r0, r0, r6
 8006aac:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ab0:	4298      	cmp	r0, r3
 8006ab2:	d9f0      	bls.n	8006a96 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8006ab4:	2003      	movs	r0, #3
 8006ab6:	e042      	b.n	8006b3e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab8:	4a26      	ldr	r2, [pc, #152]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8006ac0:	d1e0      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	e03b      	b.n	8006b3e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ac6:	4a23      	ldr	r2, [pc, #140]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8006ace:	d1d9      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	e034      	b.n	8006b3e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8006b50 <HAL_RCC_ClockConfig+0x14c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	d907      	bls.n	8006af0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae0:	b2ea      	uxtb	r2, r5
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b50 <HAL_RCC_ClockConfig+0x14c>)
 8006ae4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	d12d      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	f013 0f04 	tst.w	r3, #4
 8006af6:	d006      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af8:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006afa:	6893      	ldr	r3, [r2, #8]
 8006afc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8006b00:	68e1      	ldr	r1, [r4, #12]
 8006b02:	430b      	orrs	r3, r1
 8006b04:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	f013 0f08 	tst.w	r3, #8
 8006b0c:	d007      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b0e:	4a11      	ldr	r2, [pc, #68]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006b10:	6893      	ldr	r3, [r2, #8]
 8006b12:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006b16:	6921      	ldr	r1, [r4, #16]
 8006b18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b1c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b1e:	f7ff ff03 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <HAL_RCC_ClockConfig+0x150>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b58 <HAL_RCC_ClockConfig+0x154>)
 8006b2c:	5cd3      	ldrb	r3, [r2, r3]
 8006b2e:	40d8      	lsrs	r0, r3
 8006b30:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <HAL_RCC_ClockConfig+0x158>)
 8006b32:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006b34:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <HAL_RCC_ClockConfig+0x15c>)
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	f7fd ff0a 	bl	8004950 <HAL_InitTick>
  return HAL_OK;
 8006b3c:	2000      	movs	r0, #0
}
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006b40:	2001      	movs	r0, #1
}
 8006b42:	4770      	bx	lr
      return HAL_ERROR;
 8006b44:	2001      	movs	r0, #1
 8006b46:	e7fa      	b.n	8006b3e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8006b48:	2001      	movs	r0, #1
 8006b4a:	e7f8      	b.n	8006b3e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	e7f6      	b.n	8006b3e <HAL_RCC_ClockConfig+0x13a>
 8006b50:	40023c00 	.word	0x40023c00
 8006b54:	40023800 	.word	0x40023800
 8006b58:	08008734 	.word	0x08008734
 8006b5c:	200000ec 	.word	0x200000ec
 8006b60:	200000e8 	.word	0x200000e8

08006b64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006b64:	4b01      	ldr	r3, [pc, #4]	@ (8006b6c <HAL_RCC_GetHCLKFreq+0x8>)
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	200000ec 	.word	0x200000ec

08006b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b72:	f7ff fff7 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8006b76:	4b04      	ldr	r3, [pc, #16]	@ (8006b88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006b7e:	4a03      	ldr	r2, [pc, #12]	@ (8006b8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006b80:	5cd3      	ldrb	r3, [r2, r3]
}
 8006b82:	40d8      	lsrs	r0, r3
 8006b84:	bd08      	pop	{r3, pc}
 8006b86:	bf00      	nop
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	0800872c 	.word	0x0800872c

08006b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b92:	f7ff ffe7 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8006b96:	4b04      	ldr	r3, [pc, #16]	@ (8006ba8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006b9e:	4a03      	ldr	r2, [pc, #12]	@ (8006bac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006ba0:	5cd3      	ldrb	r3, [r2, r3]
}
 8006ba2:	40d8      	lsrs	r0, r3
 8006ba4:	bd08      	pop	{r3, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	0800872c 	.word	0x0800872c

08006bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb4:	6a04      	ldr	r4, [r0, #32]
 8006bb6:	f024 0401 	bic.w	r4, r4, #1
 8006bba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bbe:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bc6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006bca:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bcc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006bce:	6203      	str	r3, [r0, #32]
}
 8006bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bd8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bda:	6a04      	ldr	r4, [r0, #32]
 8006bdc:	f024 0410 	bic.w	r4, r4, #16
 8006be0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be4:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006be8:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006bf6:	6203      	str	r3, [r0, #32]
}
 8006bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bfe:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c04:	430b      	orrs	r3, r1
 8006c06:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c0a:	6083      	str	r3, [r0, #8]
}
 8006c0c:	4770      	bx	lr
	...

08006c10 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006c10:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d12f      	bne.n	8006c7a <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c20:	6802      	ldr	r2, [r0, #0]
 8006c22:	68d3      	ldr	r3, [r2, #12]
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2a:	6803      	ldr	r3, [r0, #0]
 8006c2c:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <HAL_TIM_Base_Start_IT+0x74>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x54>
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c36:	d015      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x54>
 8006c38:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d011      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x54>
 8006c40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00d      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x54>
 8006c48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x54>
 8006c50:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d005      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006c60:	2000      	movs	r0, #0
 8006c62:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6a:	2a06      	cmp	r2, #6
 8006c6c:	d007      	beq.n	8006c7e <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006c76:	2000      	movs	r0, #0
 8006c78:	4770      	bx	lr
    return HAL_ERROR;
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	4770      	bx	lr
  return HAL_OK;
 8006c7e:	2000      	movs	r0, #0
}
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000

08006c88 <HAL_TIM_PeriodElapsedCallback>:
}
 8006c88:	4770      	bx	lr

08006c8a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_IC_CaptureCallback>:
}
 8006c8c:	4770      	bx	lr

08006c8e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIM_TriggerCallback>:
}
 8006c90:	4770      	bx	lr

08006c92 <HAL_TIM_IRQHandler>:
{
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8006c96:	6803      	ldr	r3, [r0, #0]
 8006c98:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c9a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c9c:	f015 0f02 	tst.w	r5, #2
 8006ca0:	d010      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ca2:	f016 0f02 	tst.w	r6, #2
 8006ca6:	d00d      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ca8:	f06f 0202 	mvn.w	r2, #2
 8006cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cb2:	6803      	ldr	r3, [r0, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f013 0f03 	tst.w	r3, #3
 8006cba:	d05e      	beq.n	8006d7a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006cbc:	f7ff ffe6 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cc4:	f015 0f04 	tst.w	r5, #4
 8006cc8:	d012      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cca:	f016 0f04 	tst.w	r6, #4
 8006cce:	d00f      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	f06f 0204 	mvn.w	r2, #4
 8006cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006ce4:	d04f      	beq.n	8006d86 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7ff ffd0 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cec:	2300      	movs	r3, #0
 8006cee:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cf0:	f015 0f08 	tst.w	r5, #8
 8006cf4:	d012      	beq.n	8006d1c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cf6:	f016 0f08 	tst.w	r6, #8
 8006cfa:	d00f      	beq.n	8006d1c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	f06f 0208 	mvn.w	r2, #8
 8006d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d04:	2304      	movs	r3, #4
 8006d06:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f013 0f03 	tst.w	r3, #3
 8006d10:	d040      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	4620      	mov	r0, r4
 8006d14:	f7ff ffba 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d1c:	f015 0f10 	tst.w	r5, #16
 8006d20:	d012      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d22:	f016 0f10 	tst.w	r6, #16
 8006d26:	d00f      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	f06f 0210 	mvn.w	r2, #16
 8006d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d30:	2308      	movs	r3, #8
 8006d32:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006d3c:	d031      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff ffa4 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d44:	2300      	movs	r3, #0
 8006d46:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d48:	f015 0f01 	tst.w	r5, #1
 8006d4c:	d002      	beq.n	8006d54 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d4e:	f016 0f01 	tst.w	r6, #1
 8006d52:	d12d      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d54:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006d58:	d002      	beq.n	8006d60 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d5a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006d5e:	d12f      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d60:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8006d64:	d002      	beq.n	8006d6c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d66:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8006d6a:	d131      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d6c:	f015 0f20 	tst.w	r5, #32
 8006d70:	d002      	beq.n	8006d78 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d72:	f016 0f20 	tst.w	r6, #32
 8006d76:	d133      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x14e>
}
 8006d78:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7a:	f7ff ff86 	bl	8006c8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff ff85 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
 8006d84:	e79c      	b.n	8006cc0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff ff7f 	bl	8006c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7ff ff7e 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
 8006d92:	e7ab      	b.n	8006cec <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7ff ff78 	bl	8006c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff ff77 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
 8006da0:	e7ba      	b.n	8006d18 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff ff71 	bl	8006c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7ff ff70 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
 8006dae:	e7c9      	b.n	8006d44 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	f06f 0201 	mvn.w	r2, #1
 8006db6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006db8:	4620      	mov	r0, r4
 8006dba:	f7ff ff65 	bl	8006c88 <HAL_TIM_PeriodElapsedCallback>
 8006dbe:	e7c9      	b.n	8006d54 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006dc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f95e 	bl	800708a <HAL_TIMEx_BreakCallback>
 8006dce:	e7c7      	b.n	8006d60 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7ff ff59 	bl	8006c90 <HAL_TIM_TriggerCallback>
 8006dde:	e7c5      	b.n	8006d6c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	f06f 0220 	mvn.w	r2, #32
 8006de6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f94d 	bl	8007088 <HAL_TIMEx_CommutCallback>
}
 8006dee:	e7c3      	b.n	8006d78 <HAL_TIM_IRQHandler+0xe6>

08006df0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006df0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df2:	4a29      	ldr	r2, [pc, #164]	@ (8006e98 <TIM_Base_SetConfig+0xa8>)
 8006df4:	4290      	cmp	r0, r2
 8006df6:	d00e      	beq.n	8006e16 <TIM_Base_SetConfig+0x26>
 8006df8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006dfc:	d00b      	beq.n	8006e16 <TIM_Base_SetConfig+0x26>
 8006dfe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006e02:	4290      	cmp	r0, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_Base_SetConfig+0x26>
 8006e06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e0a:	4290      	cmp	r0, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_Base_SetConfig+0x26>
 8006e0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e12:	4290      	cmp	r0, r2
 8006e14:	d103      	bne.n	8006e1e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e1a:	684a      	ldr	r2, [r1, #4]
 8006e1c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e98 <TIM_Base_SetConfig+0xa8>)
 8006e20:	4290      	cmp	r0, r2
 8006e22:	d01a      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e24:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006e28:	d017      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e2a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006e2e:	4290      	cmp	r0, r2
 8006e30:	d013      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e36:	4290      	cmp	r0, r2
 8006e38:	d00f      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e3e:	4290      	cmp	r0, r2
 8006e40:	d00b      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e42:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006e46:	4290      	cmp	r0, r2
 8006e48:	d007      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e4e:	4290      	cmp	r0, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_Base_SetConfig+0x6a>
 8006e52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e56:	4290      	cmp	r0, r2
 8006e58:	d103      	bne.n	8006e62 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5e:	68ca      	ldr	r2, [r1, #12]
 8006e60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e66:	694a      	ldr	r2, [r1, #20]
 8006e68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e6c:	688b      	ldr	r3, [r1, #8]
 8006e6e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e70:	680b      	ldr	r3, [r1, #0]
 8006e72:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e74:	4b08      	ldr	r3, [pc, #32]	@ (8006e98 <TIM_Base_SetConfig+0xa8>)
 8006e76:	4298      	cmp	r0, r3
 8006e78:	d00a      	beq.n	8006e90 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e7e:	6903      	ldr	r3, [r0, #16]
 8006e80:	f013 0f01 	tst.w	r3, #1
 8006e84:	d003      	beq.n	8006e8e <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e86:	6903      	ldr	r3, [r0, #16]
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6103      	str	r3, [r0, #16]
}
 8006e8e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006e90:	690b      	ldr	r3, [r1, #16]
 8006e92:	6303      	str	r3, [r0, #48]	@ 0x30
 8006e94:	e7f1      	b.n	8006e7a <TIM_Base_SetConfig+0x8a>
 8006e96:	bf00      	nop
 8006e98:	40010000 	.word	0x40010000

08006e9c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006e9c:	b340      	cbz	r0, 8006ef0 <HAL_TIM_Base_Init+0x54>
{
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006ea6:	b1f3      	cbz	r3, 8006ee6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eae:	4621      	mov	r1, r4
 8006eb0:	f851 0b04 	ldr.w	r0, [r1], #4
 8006eb4:	f7ff ff9c 	bl	8006df0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ebe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006ec2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006ec6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006eca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006eda:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006ede:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006ee2:	2000      	movs	r0, #0
}
 8006ee4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006ee6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006eea:	f7ff fa91 	bl	8006410 <HAL_TIM_Base_MspInit>
 8006eee:	e7db      	b.n	8006ea8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006ef0:	2001      	movs	r0, #1
}
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ef6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006efc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006f00:	430a      	orrs	r2, r1
 8006f02:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	6082      	str	r2, [r0, #8]
}
 8006f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006f0e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d078      	beq.n	8007008 <HAL_TIM_ConfigClockSource+0xfa>
{
 8006f16:	b510      	push	{r4, lr}
 8006f18:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	2302      	movs	r3, #2
 8006f22:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006f26:	6802      	ldr	r2, [r0, #0]
 8006f28:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006f32:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006f34:	680b      	ldr	r3, [r1, #0]
 8006f36:	2b60      	cmp	r3, #96	@ 0x60
 8006f38:	d04c      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0xc6>
 8006f3a:	d829      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x82>
 8006f3c:	2b40      	cmp	r3, #64	@ 0x40
 8006f3e:	d054      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0xdc>
 8006f40:	d90c      	bls.n	8006f5c <HAL_TIM_ConfigClockSource+0x4e>
 8006f42:	2b50      	cmp	r3, #80	@ 0x50
 8006f44:	d122      	bne.n	8006f8c <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f46:	68ca      	ldr	r2, [r1, #12]
 8006f48:	6849      	ldr	r1, [r1, #4]
 8006f4a:	6800      	ldr	r0, [r0, #0]
 8006f4c:	f7ff fe30 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f50:	2150      	movs	r1, #80	@ 0x50
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	f7ff fe53 	bl	8006bfe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006f58:	2000      	movs	r0, #0
      break;
 8006f5a:	e005      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d00d      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0x6e>
 8006f60:	d909      	bls.n	8006f76 <HAL_TIM_ConfigClockSource+0x68>
 8006f62:	2b30      	cmp	r3, #48	@ 0x30
 8006f64:	d00a      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8006f66:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006f74:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8006f76:	b10b      	cbz	r3, 8006f7c <HAL_TIM_ConfigClockSource+0x6e>
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d105      	bne.n	8006f88 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	f7ff fe3d 	bl	8006bfe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006f84:	2000      	movs	r0, #0
      break;
 8006f86:	e7ef      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8006f88:	2001      	movs	r0, #1
 8006f8a:	e7ed      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	e7eb      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f94:	d034      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0xf2>
 8006f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9a:	d10c      	bne.n	8006fb6 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8006f9c:	68cb      	ldr	r3, [r1, #12]
 8006f9e:	684a      	ldr	r2, [r1, #4]
 8006fa0:	6889      	ldr	r1, [r1, #8]
 8006fa2:	6800      	ldr	r0, [r0, #0]
 8006fa4:	f7ff ffa6 	bl	8006ef4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	6893      	ldr	r3, [r2, #8]
 8006fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fb0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2000      	movs	r0, #0
      break;
 8006fb4:	e7d8      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006fb6:	2b70      	cmp	r3, #112	@ 0x70
 8006fb8:	d124      	bne.n	8007004 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8006fba:	68cb      	ldr	r3, [r1, #12]
 8006fbc:	684a      	ldr	r2, [r1, #4]
 8006fbe:	6889      	ldr	r1, [r1, #8]
 8006fc0:	6800      	ldr	r0, [r0, #0]
 8006fc2:	f7ff ff97 	bl	8006ef4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fc6:	6822      	ldr	r2, [r4, #0]
 8006fc8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006fce:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd0:	2000      	movs	r0, #0
      break;
 8006fd2:	e7c9      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fd4:	68ca      	ldr	r2, [r1, #12]
 8006fd6:	6849      	ldr	r1, [r1, #4]
 8006fd8:	6800      	ldr	r0, [r0, #0]
 8006fda:	f7ff fdfc 	bl	8006bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fde:	2160      	movs	r1, #96	@ 0x60
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	f7ff fe0c 	bl	8006bfe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006fe6:	2000      	movs	r0, #0
      break;
 8006fe8:	e7be      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fea:	68ca      	ldr	r2, [r1, #12]
 8006fec:	6849      	ldr	r1, [r1, #4]
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	f7ff fdde 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff4:	2140      	movs	r1, #64	@ 0x40
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	f7ff fe01 	bl	8006bfe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2000      	movs	r0, #0
      break;
 8006ffe:	e7b3      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007000:	2000      	movs	r0, #0
 8007002:	e7b1      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8007004:	2001      	movs	r0, #1
 8007006:	e7af      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007008:	2002      	movs	r0, #2
}
 800700a:	4770      	bx	lr

0800700c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800700c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007010:	2a01      	cmp	r2, #1
 8007012:	d035      	beq.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8007014:	b410      	push	{r4}
 8007016:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007018:	2201      	movs	r2, #1
 800701a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701e:	2202      	movs	r2, #2
 8007020:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007024:	6802      	ldr	r2, [r0, #0]
 8007026:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007028:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800702a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800702e:	6808      	ldr	r0, [r1, #0]
 8007030:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007034:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4812      	ldr	r0, [pc, #72]	@ (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800703a:	4282      	cmp	r2, r0
 800703c:	d012      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800703e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007042:	d00f      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007044:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8007048:	4282      	cmp	r2, r0
 800704a:	d00b      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800704c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8007050:	4282      	cmp	r2, r0
 8007052:	d007      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007054:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8007058:	4282      	cmp	r2, r0
 800705a:	d003      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800705c:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8007060:	4282      	cmp	r2, r0
 8007062:	d104      	bne.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007064:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007068:	6849      	ldr	r1, [r1, #4]
 800706a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800706c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007074:	2000      	movs	r0, #0
 8007076:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800707a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800707e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007080:	2002      	movs	r0, #2
}
 8007082:	4770      	bx	lr
 8007084:	40010000 	.word	0x40010000

08007088 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	4770      	bx	lr

0800708a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800708a:	4770      	bx	lr

0800708c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	f102 030c 	add.w	r3, r2, #12
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	320c      	adds	r2, #12
 800709c:	e842 3100 	strex	r1, r3, [r2]
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d1f3      	bne.n	800708c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	f102 0314 	add.w	r3, r2, #20
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	3214      	adds	r2, #20
 80070b4:	e842 3100 	strex	r1, r3, [r2]
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d1f3      	bne.n	80070a4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d005      	beq.n	80070ce <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070c2:	2320      	movs	r3, #32
 80070c4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c8:	2300      	movs	r3, #0
 80070ca:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80070cc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	f102 030c 	add.w	r3, r2, #12
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	320c      	adds	r2, #12
 80070de:	e842 3100 	strex	r1, r3, [r2]
 80070e2:	2900      	cmp	r1, #0
 80070e4:	d1f3      	bne.n	80070ce <UART_EndRxTransfer+0x42>
 80070e6:	e7ec      	b.n	80070c2 <UART_EndRxTransfer+0x36>

080070e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e8:	b510      	push	{r4, lr}
 80070ea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ec:	6802      	ldr	r2, [r0, #0]
 80070ee:	6913      	ldr	r3, [r2, #16]
 80070f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80070f4:	68c1      	ldr	r1, [r0, #12]
 80070f6:	430b      	orrs	r3, r1
 80070f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070fa:	6883      	ldr	r3, [r0, #8]
 80070fc:	6902      	ldr	r2, [r0, #16]
 80070fe:	431a      	orrs	r2, r3
 8007100:	6943      	ldr	r3, [r0, #20]
 8007102:	431a      	orrs	r2, r3
 8007104:	69c3      	ldr	r3, [r0, #28]
 8007106:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8007108:	6801      	ldr	r1, [r0, #0]
 800710a:	68cb      	ldr	r3, [r1, #12]
 800710c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007110:	f023 030c 	bic.w	r3, r3, #12
 8007114:	4313      	orrs	r3, r2
 8007116:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007118:	6802      	ldr	r2, [r0, #0]
 800711a:	6953      	ldr	r3, [r2, #20]
 800711c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007120:	6981      	ldr	r1, [r0, #24]
 8007122:	430b      	orrs	r3, r1
 8007124:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007126:	6803      	ldr	r3, [r0, #0]
 8007128:	4a31      	ldr	r2, [pc, #196]	@ (80071f0 <UART_SetConfig+0x108>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d006      	beq.n	800713c <UART_SetConfig+0x54>
 800712e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007132:	4293      	cmp	r3, r2
 8007134:	d002      	beq.n	800713c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007136:	f7ff fd1b 	bl	8006b70 <HAL_RCC_GetPCLK1Freq>
 800713a:	e001      	b.n	8007140 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800713c:	f7ff fd28 	bl	8006b90 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007140:	69e3      	ldr	r3, [r4, #28]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007146:	d029      	beq.n	800719c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007148:	2100      	movs	r1, #0
 800714a:	1803      	adds	r3, r0, r0
 800714c:	4149      	adcs	r1, r1
 800714e:	181b      	adds	r3, r3, r0
 8007150:	f141 0100 	adc.w	r1, r1, #0
 8007154:	00c9      	lsls	r1, r1, #3
 8007156:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	1818      	adds	r0, r3, r0
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007164:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8007168:	f141 0100 	adc.w	r1, r1, #0
 800716c:	f7f9 fc56 	bl	8000a1c <__aeabi_uldivmod>
 8007170:	4a20      	ldr	r2, [pc, #128]	@ (80071f4 <UART_SetConfig+0x10c>)
 8007172:	fba2 3100 	umull	r3, r1, r2, r0
 8007176:	0949      	lsrs	r1, r1, #5
 8007178:	2364      	movs	r3, #100	@ 0x64
 800717a:	fb03 0311 	mls	r3, r3, r1, r0
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	3332      	adds	r3, #50	@ 0x32
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800718c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	6821      	ldr	r1, [r4, #0]
 8007196:	4413      	add	r3, r2
 8007198:	608b      	str	r3, [r1, #8]
  }
}
 800719a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800719c:	2300      	movs	r3, #0
 800719e:	1802      	adds	r2, r0, r0
 80071a0:	eb43 0103 	adc.w	r1, r3, r3
 80071a4:	1812      	adds	r2, r2, r0
 80071a6:	f141 0100 	adc.w	r1, r1, #0
 80071aa:	00c9      	lsls	r1, r1, #3
 80071ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071b0:	00d2      	lsls	r2, r2, #3
 80071b2:	1810      	adds	r0, r2, r0
 80071b4:	f141 0100 	adc.w	r1, r1, #0
 80071b8:	6862      	ldr	r2, [r4, #4]
 80071ba:	1892      	adds	r2, r2, r2
 80071bc:	415b      	adcs	r3, r3
 80071be:	f7f9 fc2d 	bl	8000a1c <__aeabi_uldivmod>
 80071c2:	4a0c      	ldr	r2, [pc, #48]	@ (80071f4 <UART_SetConfig+0x10c>)
 80071c4:	fba2 3100 	umull	r3, r1, r2, r0
 80071c8:	0949      	lsrs	r1, r1, #5
 80071ca:	2364      	movs	r3, #100	@ 0x64
 80071cc:	fb03 0311 	mls	r3, r3, r1, r0
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	3332      	adds	r3, #50	@ 0x32
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	005a      	lsls	r2, r3, #1
 80071dc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80071e0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	4413      	add	r3, r2
 80071ec:	608b      	str	r3, [r1, #8]
 80071ee:	e7d4      	b.n	800719a <UART_SetConfig+0xb2>
 80071f0:	40011000 	.word	0x40011000
 80071f4:	51eb851f 	.word	0x51eb851f

080071f8 <UART_WaitOnFlagUntilTimeout>:
{
 80071f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071fc:	b083      	sub	sp, #12
 80071fe:	4605      	mov	r5, r0
 8007200:	460e      	mov	r6, r1
 8007202:	4617      	mov	r7, r2
 8007204:	4699      	mov	r9, r3
 8007206:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	681c      	ldr	r4, [r3, #0]
 800720e:	ea36 0404 	bics.w	r4, r6, r4
 8007212:	bf0c      	ite	eq
 8007214:	2401      	moveq	r4, #1
 8007216:	2400      	movne	r4, #0
 8007218:	42bc      	cmp	r4, r7
 800721a:	d128      	bne.n	800726e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800721c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007220:	d0f3      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fd fbe1 	bl	80049e8 <HAL_GetTick>
 8007226:	eba0 0009 	sub.w	r0, r0, r9
 800722a:	4540      	cmp	r0, r8
 800722c:	d823      	bhi.n	8007276 <UART_WaitOnFlagUntilTimeout+0x7e>
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	d022      	beq.n	800727a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	f012 0f04 	tst.w	r2, #4
 800723c:	d0e5      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x12>
 800723e:	2e80      	cmp	r6, #128	@ 0x80
 8007240:	d0e3      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x12>
 8007242:	2e40      	cmp	r6, #64	@ 0x40
 8007244:	d0e1      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	f012 0f08 	tst.w	r2, #8
 800724c:	d0dd      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800724e:	2400      	movs	r4, #0
 8007250:	9401      	str	r4, [sp, #4]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800725c:	4628      	mov	r0, r5
 800725e:	f7ff ff15 	bl	800708c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007262:	2308      	movs	r3, #8
 8007264:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8007266:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800726a:	2001      	movs	r0, #1
 800726c:	e000      	b.n	8007270 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800726e:	2000      	movs	r0, #0
}
 8007270:	b003      	add	sp, #12
 8007272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8007276:	2003      	movs	r0, #3
 8007278:	e7fa      	b.n	8007270 <UART_WaitOnFlagUntilTimeout+0x78>
 800727a:	2003      	movs	r0, #3
 800727c:	e7f8      	b.n	8007270 <UART_WaitOnFlagUntilTimeout+0x78>

0800727e <HAL_UART_Init>:
  if (huart == NULL)
 800727e:	b360      	cbz	r0, 80072da <HAL_UART_Init+0x5c>
{
 8007280:	b510      	push	{r4, lr}
 8007282:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007284:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007288:	b313      	cbz	r3, 80072d0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800728a:	2324      	movs	r3, #36	@ 0x24
 800728c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	68d3      	ldr	r3, [r2, #12]
 8007294:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007298:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800729a:	4620      	mov	r0, r4
 800729c:	f7ff ff24 	bl	80070e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	6913      	ldr	r3, [r2, #16]
 80072a4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80072a8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	6953      	ldr	r3, [r2, #20]
 80072ae:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80072b2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	68d3      	ldr	r3, [r2, #12]
 80072b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80072bc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072be:	2000      	movs	r0, #0
 80072c0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072c2:	2320      	movs	r3, #32
 80072c4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072cc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80072ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80072d0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80072d4:	f7ff f8d6 	bl	8006484 <HAL_UART_MspInit>
 80072d8:	e7d7      	b.n	800728a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80072da:	2001      	movs	r0, #1
}
 80072dc:	4770      	bx	lr

080072de <HAL_UART_Transmit>:
{
 80072de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80072e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d156      	bne.n	800739e <HAL_UART_Transmit+0xc0>
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80072f6:	2900      	cmp	r1, #0
 80072f8:	d055      	beq.n	80073a6 <HAL_UART_Transmit+0xc8>
 80072fa:	b90a      	cbnz	r2, 8007300 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80072fc:	2001      	movs	r0, #1
 80072fe:	e04f      	b.n	80073a0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007300:	2300      	movs	r3, #0
 8007302:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007304:	2321      	movs	r3, #33	@ 0x21
 8007306:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800730a:	f7fd fb6d 	bl	80049e8 <HAL_GetTick>
 800730e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8007310:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007314:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800731e:	d002      	beq.n	8007326 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8007320:	f04f 0800 	mov.w	r8, #0
 8007324:	e014      	b.n	8007350 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	b32b      	cbz	r3, 8007376 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	e00f      	b.n	8007350 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8007330:	2320      	movs	r3, #32
 8007332:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8007336:	2003      	movs	r0, #3
 8007338:	e032      	b.n	80073a0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800733a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007344:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007346:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007348:	b292      	uxth	r2, r2
 800734a:	3a01      	subs	r2, #1
 800734c:	b292      	uxth	r2, r2
 800734e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007350:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007352:	b29b      	uxth	r3, r3
 8007354:	b193      	cbz	r3, 800737c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007356:	9600      	str	r6, [sp, #0]
 8007358:	463b      	mov	r3, r7
 800735a:	2200      	movs	r2, #0
 800735c:	2180      	movs	r1, #128	@ 0x80
 800735e:	4620      	mov	r0, r4
 8007360:	f7ff ff4a 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 8007364:	2800      	cmp	r0, #0
 8007366:	d1e3      	bne.n	8007330 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8007368:	2d00      	cmp	r5, #0
 800736a:	d0e6      	beq.n	800733a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800736c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007374:	e7e7      	b.n	8007346 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8007376:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007378:	2500      	movs	r5, #0
 800737a:	e7e9      	b.n	8007350 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800737c:	9600      	str	r6, [sp, #0]
 800737e:	463b      	mov	r3, r7
 8007380:	2200      	movs	r2, #0
 8007382:	2140      	movs	r1, #64	@ 0x40
 8007384:	4620      	mov	r0, r4
 8007386:	f7ff ff37 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 800738a:	b918      	cbnz	r0, 8007394 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800738c:	2320      	movs	r3, #32
 800738e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8007392:	e005      	b.n	80073a0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8007394:	2320      	movs	r3, #32
 8007396:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800739a:	2003      	movs	r0, #3
 800739c:	e000      	b.n	80073a0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800739e:	2002      	movs	r0, #2
}
 80073a0:	b002      	add	sp, #8
 80073a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80073a6:	2001      	movs	r0, #1
 80073a8:	e7fa      	b.n	80073a0 <HAL_UART_Transmit+0xc2>

080073aa <HAL_UART_Receive>:
{
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80073b2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d159      	bne.n	8007470 <HAL_UART_Receive+0xc6>
 80073bc:	4604      	mov	r4, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d058      	beq.n	8007478 <HAL_UART_Receive+0xce>
 80073c6:	b90a      	cbnz	r2, 80073cc <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 80073c8:	2001      	movs	r0, #1
 80073ca:	e052      	b.n	8007472 <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d0:	2222      	movs	r2, #34	@ 0x22
 80073d2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 80073d8:	f7fd fb06 	bl	80049e8 <HAL_GetTick>
 80073dc:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80073de:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80073e2:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ec:	d002      	beq.n	80073f4 <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 80073ee:	f04f 0800 	mov.w	r8, #0
 80073f2:	e01c      	b.n	800742e <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b113      	cbz	r3, 80073fe <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80073f8:	f04f 0800 	mov.w	r8, #0
 80073fc:	e017      	b.n	800742e <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 80073fe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007400:	2500      	movs	r5, #0
 8007402:	e014      	b.n	800742e <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 8007404:	2320      	movs	r3, #32
 8007406:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 800740a:	2003      	movs	r0, #3
 800740c:	e031      	b.n	8007472 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 800741a:	e003      	b.n	8007424 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8007422:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8007424:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8007426:	b292      	uxth	r2, r2
 8007428:	3a01      	subs	r2, #1
 800742a:	b292      	uxth	r2, r2
 800742c:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800742e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8007430:	b29b      	uxth	r3, r3
 8007432:	b1c3      	cbz	r3, 8007466 <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007434:	9600      	str	r6, [sp, #0]
 8007436:	463b      	mov	r3, r7
 8007438:	2200      	movs	r2, #0
 800743a:	2120      	movs	r1, #32
 800743c:	4620      	mov	r0, r4
 800743e:	f7ff fedb 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 8007442:	2800      	cmp	r0, #0
 8007444:	d1de      	bne.n	8007404 <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 8007446:	2d00      	cmp	r5, #0
 8007448:	d0e1      	beq.n	800740e <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007450:	d0e4      	beq.n	800741c <HAL_UART_Receive+0x72>
 8007452:	b913      	cbnz	r3, 800745a <HAL_UART_Receive+0xb0>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0e0      	beq.n	800741c <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007462:	702b      	strb	r3, [r5, #0]
 8007464:	e7dd      	b.n	8007422 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8007466:	2320      	movs	r3, #32
 8007468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 800746c:	2000      	movs	r0, #0
 800746e:	e000      	b.n	8007472 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8007470:	2002      	movs	r0, #2
}
 8007472:	b002      	add	sp, #8
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8007478:	2001      	movs	r0, #1
 800747a:	e7fa      	b.n	8007472 <HAL_UART_Receive+0xc8>

0800747c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800747c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007480:	4905      	ldr	r1, [pc, #20]	@ (8007498 <__NVIC_SystemReset+0x1c>)
 8007482:	68ca      	ldr	r2, [r1, #12]
 8007484:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007488:	4b04      	ldr	r3, [pc, #16]	@ (800749c <__NVIC_SystemReset+0x20>)
 800748a:	4313      	orrs	r3, r2
 800748c:	60cb      	str	r3, [r1, #12]
 800748e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007492:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007494:	e7fd      	b.n	8007492 <__NVIC_SystemReset+0x16>
 8007496:	bf00      	nop
 8007498:	e000ed00 	.word	0xe000ed00
 800749c:	05fa0004 	.word	0x05fa0004

080074a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80074a0:	e7fe      	b.n	80074a0 <NMI_Handler>
	...

080074a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 80074a6:	4c05      	ldr	r4, [pc, #20]	@ (80074bc <HardFault_Handler+0x18>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	2120      	movs	r1, #32
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7fd fe94 	bl	80051da <HAL_GPIO_WritePin>
  GPIOA->ODR = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	6163      	str	r3, [r4, #20]
  NVIC_SystemReset();
 80074b6:	f7ff ffe1 	bl	800747c <__NVIC_SystemReset>
 80074ba:	bf00      	nop
 80074bc:	40020000 	.word	0x40020000

080074c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074c0:	e7fe      	b.n	80074c0 <MemManage_Handler>

080074c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074c2:	e7fe      	b.n	80074c2 <BusFault_Handler>

080074c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074c4:	e7fe      	b.n	80074c4 <UsageFault_Handler>

080074c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074c6:	4770      	bx	lr

080074c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074c8:	4770      	bx	lr

080074ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074ca:	4770      	bx	lr

080074cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074ce:	f7fd fa7f 	bl	80049d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074d2:	bd08      	pop	{r3, pc}

080074d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80074d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_INT_Pin);
 80074d6:	2010      	movs	r0, #16
 80074d8:	f7fd fe90 	bl	80051fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80074dc:	bd08      	pop	{r3, pc}
	...

080074e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80074e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80074e2:	4802      	ldr	r0, [pc, #8]	@ (80074ec <DMA1_Stream0_IRQHandler+0xc>)
 80074e4:	f7fd fc18 	bl	8004d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80074e8:	bd08      	pop	{r3, pc}
 80074ea:	bf00      	nop
 80074ec:	20000514 	.word	0x20000514

080074f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80074f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80074f2:	4802      	ldr	r0, [pc, #8]	@ (80074fc <DMA1_Stream1_IRQHandler+0xc>)
 80074f4:	f7fd fc10 	bl	8004d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80074f8:	bd08      	pop	{r3, pc}
 80074fa:	bf00      	nop
 80074fc:	200004b4 	.word	0x200004b4

08007500 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007500:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007502:	4802      	ldr	r0, [pc, #8]	@ (800750c <DMA1_Stream6_IRQHandler+0xc>)
 8007504:	f7fd fc08 	bl	8004d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007508:	bd08      	pop	{r3, pc}
 800750a:	bf00      	nop
 800750c:	20000378 	.word	0x20000378

08007510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007510:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  clearToSend = 1;
 8007512:	4c09      	ldr	r4, [pc, #36]	@ (8007538 <TIM2_IRQHandler+0x28>)
 8007514:	2301      	movs	r3, #1
 8007516:	7023      	strb	r3, [r4, #0]
  if (clearToSend == 1){
    counter++;
 8007518:	4a08      	ldr	r2, [pc, #32]	@ (800753c <TIM2_IRQHandler+0x2c>)
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	3301      	adds	r3, #1
 800751e:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8007520:	2120      	movs	r1, #32
 8007522:	4807      	ldr	r0, [pc, #28]	@ (8007540 <TIM2_IRQHandler+0x30>)
 8007524:	f7fd fe5f 	bl	80051e6 <HAL_GPIO_TogglePin>
    sendToSimulink();
 8007528:	f7fc ff78 	bl	800441c <sendToSimulink>
    clearToSend = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	7023      	strb	r3, [r4, #0]
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007530:	4804      	ldr	r0, [pc, #16]	@ (8007544 <TIM2_IRQHandler+0x34>)
 8007532:	f7ff fbae 	bl	8006c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007536:	bd10      	pop	{r4, pc}
 8007538:	2000031a 	.word	0x2000031a
 800753c:	20000314 	.word	0x20000314
 8007540:	40020000 	.word	0x40020000
 8007544:	20000468 	.word	0x20000468

08007548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
  clearToGetL1 = 1; 
 800754a:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <TIM3_IRQHandler+0x10>)
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007550:	4802      	ldr	r0, [pc, #8]	@ (800755c <TIM3_IRQHandler+0x14>)
 8007552:	f7ff fb9e 	bl	8006c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007556:	bd08      	pop	{r3, pc}
 8007558:	20000319 	.word	0x20000319
 800755c:	20000420 	.word	0x20000420

08007560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8007562:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007566:	f7fd fe49 	bl	80051fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800756a:	bd08      	pop	{r3, pc}

0800756c <I2C1_MspInit>:
}
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	b088      	sub	sp, #32
 8007572:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007574:	2400      	movs	r4, #0
 8007576:	9401      	str	r4, [sp, #4]
 8007578:	4d30      	ldr	r5, [pc, #192]	@ (800763c <I2C1_MspInit+0xd0>)
 800757a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800757c:	f043 0302 	orr.w	r3, r3, #2
 8007580:	632b      	str	r3, [r5, #48]	@ 0x30
 8007582:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800758c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007590:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007592:	f04f 0a12 	mov.w	sl, #18
 8007596:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800759c:	f04f 0903 	mov.w	r9, #3
 80075a0:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80075a4:	f04f 0804 	mov.w	r8, #4
 80075a8:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80075ac:	4f24      	ldr	r7, [pc, #144]	@ (8007640 <I2C1_MspInit+0xd4>)
 80075ae:	a903      	add	r1, sp, #12
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7fd fc9f 	bl	8004ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80075b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075bc:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075c2:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80075c6:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80075ca:	a903      	add	r1, sp, #12
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7fd fc91 	bl	8004ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80075d2:	9402      	str	r4, [sp, #8]
 80075d4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80075d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075da:	642b      	str	r3, [r5, #64]	@ 0x40
 80075dc:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80075de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral DMA init*/

    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80075e6:	4d17      	ldr	r5, [pc, #92]	@ (8007644 <I2C1_MspInit+0xd8>)
 80075e8:	4b17      	ldr	r3, [pc, #92]	@ (8007648 <I2C1_MspInit+0xdc>)
 80075ea:	602b      	str	r3, [r5, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80075ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075f0:	606b      	str	r3, [r5, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075f2:	60ac      	str	r4, [r5, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075f4:	60ec      	str	r4, [r5, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075f6:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 80075fa:	612f      	str	r7, [r5, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075fc:	616c      	str	r4, [r5, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075fe:	61ac      	str	r4, [r5, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007600:	61ec      	str	r4, [r5, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007602:	622c      	str	r4, [r5, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007604:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_DMA_Init(&hdma_i2c1_rx);
 8007606:	4628      	mov	r0, r5
 8007608:	f7fd faee 	bl	8004be8 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800760c:	63b5      	str	r5, [r6, #56]	@ 0x38
 800760e:	63ae      	str	r6, [r5, #56]	@ 0x38

    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8007610:	4d0e      	ldr	r5, [pc, #56]	@ (800764c <I2C1_MspInit+0xe0>)
 8007612:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <I2C1_MspInit+0xe4>)
 8007614:	602b      	str	r3, [r5, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8007616:	606c      	str	r4, [r5, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007618:	2340      	movs	r3, #64	@ 0x40
 800761a:	60ab      	str	r3, [r5, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800761c:	60ec      	str	r4, [r5, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800761e:	612f      	str	r7, [r5, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007620:	616c      	str	r4, [r5, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007622:	61ac      	str	r4, [r5, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007624:	61ec      	str	r4, [r5, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007626:	622c      	str	r4, [r5, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007628:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_DMA_Init(&hdma_i2c1_tx);
 800762a:	4628      	mov	r0, r5
 800762c:	f7fd fadc 	bl	8004be8 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007630:	6375      	str	r5, [r6, #52]	@ 0x34
 8007632:	63ae      	str	r6, [r5, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8007634:	b008      	add	sp, #32
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	bf00      	nop
 800763c:	40023800 	.word	0x40023800
 8007640:	40020400 	.word	0x40020400
 8007644:	20000514 	.word	0x20000514
 8007648:	40026010 	.word	0x40026010
 800764c:	200004b4 	.word	0x200004b4
 8007650:	40026028 	.word	0x40026028

08007654 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4604      	mov	r4, r0
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007658:	4a0b      	ldr	r2, [pc, #44]	@ (8007688 <I2C1_MspDeInit+0x34>)
 800765a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800765c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007660:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8007662:	4d0a      	ldr	r5, [pc, #40]	@ (800768c <I2C1_MspDeInit+0x38>)
 8007664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007668:	4628      	mov	r0, r5
 800766a:	f7fd fd27 	bl	80050bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800766e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007672:	4628      	mov	r0, r5
 8007674:	f7fd fd22 	bl	80050bc <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8007678:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800767a:	f7fd fb1b 	bl	8004cb4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800767e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007680:	f7fd fb18 	bl	8004cb4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8007684:	bd38      	pop	{r3, r4, r5, pc}
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800
 800768c:	40020400 	.word	0x40020400

08007690 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <BSP_I2C1_DeInit+0x30>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b17b      	cbz	r3, 80076b6 <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 8007696:	3b01      	subs	r3, #1
 8007698:	4a09      	ldr	r2, [pc, #36]	@ (80076c0 <BSP_I2C1_DeInit+0x30>)
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	b10b      	cbz	r3, 80076a2 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 800769e:	2000      	movs	r0, #0
}
 80076a0:	4770      	bx	lr
{
 80076a2:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 80076a4:	4c07      	ldr	r4, [pc, #28]	@ (80076c4 <BSP_I2C1_DeInit+0x34>)
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff ffd4 	bl	8007654 <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7fe fa08 	bl	8005ac2 <HAL_I2C_DeInit>
 80076b2:	b910      	cbnz	r0, 80076ba <BSP_I2C1_DeInit+0x2a>
}
 80076b4:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 80076b6:	2000      	movs	r0, #0
 80076b8:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 80076ba:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80076be:	e7f9      	b.n	80076b4 <BSP_I2C1_DeInit+0x24>
 80076c0:	20000574 	.word	0x20000574
 80076c4:	20000578 	.word	0x20000578

080076c8 <BSP_I2C1_WriteReg>:
{
 80076c8:	b510      	push	{r4, lr}
 80076ca:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80076cc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80076d0:	9402      	str	r4, [sp, #8]
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	9200      	str	r2, [sp, #0]
 80076d6:	2301      	movs	r3, #1
 80076d8:	460a      	mov	r2, r1
 80076da:	4601      	mov	r1, r0
 80076dc:	4808      	ldr	r0, [pc, #32]	@ (8007700 <BSP_I2C1_WriteReg+0x38>)
 80076de:	f7fe fc43 	bl	8005f68 <HAL_I2C_Mem_Write>
 80076e2:	b910      	cbnz	r0, 80076ea <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80076e4:	2000      	movs	r0, #0
}
 80076e6:	b004      	add	sp, #16
 80076e8:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80076ea:	4805      	ldr	r0, [pc, #20]	@ (8007700 <BSP_I2C1_WriteReg+0x38>)
 80076ec:	f7fe fe6d 	bl	80063ca <HAL_I2C_GetError>
 80076f0:	2804      	cmp	r0, #4
 80076f2:	d002      	beq.n	80076fa <BSP_I2C1_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80076f4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80076f8:	e7f5      	b.n	80076e6 <BSP_I2C1_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80076fa:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80076fe:	e7f2      	b.n	80076e6 <BSP_I2C1_WriteReg+0x1e>
 8007700:	20000578 	.word	0x20000578

08007704 <BSP_I2C1_ReadReg>:
{
 8007704:	b510      	push	{r4, lr}
 8007706:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007708:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800770c:	9402      	str	r4, [sp, #8]
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	9200      	str	r2, [sp, #0]
 8007712:	2301      	movs	r3, #1
 8007714:	460a      	mov	r2, r1
 8007716:	4601      	mov	r1, r0
 8007718:	4808      	ldr	r0, [pc, #32]	@ (800773c <BSP_I2C1_ReadReg+0x38>)
 800771a:	f7fe fcd7 	bl	80060cc <HAL_I2C_Mem_Read>
 800771e:	b910      	cbnz	r0, 8007726 <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8007720:	2000      	movs	r0, #0
}
 8007722:	b004      	add	sp, #16
 8007724:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8007726:	4805      	ldr	r0, [pc, #20]	@ (800773c <BSP_I2C1_ReadReg+0x38>)
 8007728:	f7fe fe4f 	bl	80063ca <HAL_I2C_GetError>
 800772c:	2804      	cmp	r0, #4
 800772e:	d002      	beq.n	8007736 <BSP_I2C1_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007730:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007734:	e7f5      	b.n	8007722 <BSP_I2C1_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007736:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 800773a:	e7f2      	b.n	8007722 <BSP_I2C1_ReadReg+0x1e>
 800773c:	20000578 	.word	0x20000578

08007740 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8007740:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8007742:	f7fd f951 	bl	80049e8 <HAL_GetTick>
}
 8007746:	bd08      	pop	{r3, pc}

08007748 <MX_I2C1_Init>:
{
 8007748:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 800774a:	4a09      	ldr	r2, [pc, #36]	@ (8007770 <MX_I2C1_Init+0x28>)
 800774c:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 800774e:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <MX_I2C1_Init+0x2c>)
 8007750:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007752:	2200      	movs	r2, #0
 8007754:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 8007756:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800775c:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800775e:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 8007760:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007762:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007764:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8007766:	f7fe f8cd 	bl	8005904 <HAL_I2C_Init>
 800776a:	b100      	cbz	r0, 800776e <MX_I2C1_Init+0x26>
    ret = HAL_ERROR;
 800776c:	2001      	movs	r0, #1
}
 800776e:	bd08      	pop	{r3, pc}
 8007770:	40005400 	.word	0x40005400
 8007774:	00061a80 	.word	0x00061a80

08007778 <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 8007778:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <BSP_I2C1_Init+0x3c>)
 800777a:	4a0f      	ldr	r2, [pc, #60]	@ (80077b8 <BSP_I2C1_Init+0x40>)
 800777c:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 800777e:	4a0f      	ldr	r2, [pc, #60]	@ (80077bc <BSP_I2C1_Init+0x44>)
 8007780:	6813      	ldr	r3, [r2, #0]
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	b10b      	cbz	r3, 800778c <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8007788:	2000      	movs	r0, #0
}
 800778a:	4770      	bx	lr
{
 800778c:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800778e:	4809      	ldr	r0, [pc, #36]	@ (80077b4 <BSP_I2C1_Init+0x3c>)
 8007790:	f7fe fe18 	bl	80063c4 <HAL_I2C_GetState>
 8007794:	b108      	cbz	r0, 800779a <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8007796:	2000      	movs	r0, #0
}
 8007798:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 800779a:	4c06      	ldr	r4, [pc, #24]	@ (80077b4 <BSP_I2C1_Init+0x3c>)
 800779c:	4620      	mov	r0, r4
 800779e:	f7ff fee5 	bl	800756c <I2C1_MspInit>
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff ffd0 	bl	8007748 <MX_I2C1_Init>
 80077a8:	b908      	cbnz	r0, 80077ae <BSP_I2C1_Init+0x36>
          ret = BSP_ERROR_NONE;
 80077aa:	2000      	movs	r0, #0
  return ret;
 80077ac:	e7f4      	b.n	8007798 <BSP_I2C1_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 80077ae:	f06f 0007 	mvn.w	r0, #7
 80077b2:	e7f1      	b.n	8007798 <BSP_I2C1_Init+0x20>
 80077b4:	20000578 	.word	0x20000578
 80077b8:	40005400 	.word	0x40005400
 80077bc:	20000574 	.word	0x20000574

080077c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077c0:	b510      	push	{r4, lr}
 80077c2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077c4:	4a0c      	ldr	r2, [pc, #48]	@ (80077f8 <_sbrk+0x38>)
 80077c6:	490d      	ldr	r1, [pc, #52]	@ (80077fc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077c8:	480d      	ldr	r0, [pc, #52]	@ (8007800 <_sbrk+0x40>)
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	b140      	cbz	r0, 80077e0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077ce:	480c      	ldr	r0, [pc, #48]	@ (8007800 <_sbrk+0x40>)
 80077d0:	6800      	ldr	r0, [r0, #0]
 80077d2:	4403      	add	r3, r0
 80077d4:	1a52      	subs	r2, r2, r1
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d806      	bhi.n	80077e8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80077da:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <_sbrk+0x40>)
 80077dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80077de:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80077e0:	4807      	ldr	r0, [pc, #28]	@ (8007800 <_sbrk+0x40>)
 80077e2:	4c08      	ldr	r4, [pc, #32]	@ (8007804 <_sbrk+0x44>)
 80077e4:	6004      	str	r4, [r0, #0]
 80077e6:	e7f2      	b.n	80077ce <_sbrk+0xe>
    errno = ENOMEM;
 80077e8:	f000 f90e 	bl	8007a08 <__errno>
 80077ec:	230c      	movs	r3, #12
 80077ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e7f3      	b.n	80077de <_sbrk+0x1e>
 80077f6:	bf00      	nop
 80077f8:	20020000 	.word	0x20020000
 80077fc:	00000400 	.word	0x00000400
 8007800:	200005cc 	.word	0x200005cc
 8007804:	20000818 	.word	0x20000818

08007808 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007808:	4a03      	ldr	r2, [pc, #12]	@ (8007818 <SystemInit+0x10>)
 800780a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800780e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007812:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007816:	4770      	bx	lr
 8007818:	e000ed00 	.word	0xe000ed00

0800781c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800781c:	b500      	push	{lr}
 800781e:	b083      	sub	sp, #12
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007820:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, Dev, pdata, count, i2c_time_out);
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	b293      	uxth	r3, r2
 8007828:	460a      	mov	r2, r1
 800782a:	4601      	mov	r1, r0
 800782c:	4802      	ldr	r0, [pc, #8]	@ (8007838 <_I2CWrite+0x1c>)
 800782e:	f7fe f961 	bl	8005af4 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8007832:	b003      	add	sp, #12
 8007834:	f85d fb04 	ldr.w	pc, [sp], #4
 8007838:	20000194 	.word	0x20000194

0800783c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800783c:	b500      	push	{lr}
 800783e:	b083      	sub	sp, #12
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007840:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, Dev|1, pdata, count, i2c_time_out);
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	b293      	uxth	r3, r2
 8007848:	460a      	mov	r2, r1
 800784a:	f040 0101 	orr.w	r1, r0, #1
 800784e:	4803      	ldr	r0, [pc, #12]	@ (800785c <_I2CRead+0x20>)
 8007850:	f7fe fa0c 	bl	8005c6c <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8007854:	b003      	add	sp, #12
 8007856:	f85d fb04 	ldr.w	pc, [sp], #4
 800785a:	bf00      	nop
 800785c:	20000194 	.word	0x20000194

08007860 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8007860:	b508      	push	{r3, lr}
 8007862:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8007864:	4907      	ldr	r1, [pc, #28]	@ (8007884 <VL53L1_WrByte+0x24>)
 8007866:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800786a:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 800786e:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data;
 8007870:	708a      	strb	r2, [r1, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007872:	2203      	movs	r2, #3
 8007874:	f7ff ffd2 	bl	800781c <_I2CWrite>
    if (status_int != 0) {
 8007878:	b900      	cbnz	r0, 800787c <VL53L1_WrByte+0x1c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 800787a:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800787c:	f06f 000c 	mvn.w	r0, #12
 8007880:	e7fb      	b.n	800787a <VL53L1_WrByte+0x1a>
 8007882:	bf00      	nop
 8007884:	200005d0 	.word	0x200005d0

08007888 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8007888:	b508      	push	{r3, lr}
 800788a:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800788c:	4908      	ldr	r1, [pc, #32]	@ (80078b0 <VL53L1_WrWord+0x28>)
 800788e:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8007892:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 8007896:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data >> 8;
 8007898:	0a13      	lsrs	r3, r2, #8
 800789a:	708b      	strb	r3, [r1, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800789c:	70ca      	strb	r2, [r1, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800789e:	2204      	movs	r2, #4
 80078a0:	f7ff ffbc 	bl	800781c <_I2CWrite>
    if (status_int != 0) {
 80078a4:	b900      	cbnz	r0, 80078a8 <VL53L1_WrWord+0x20>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 80078a6:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80078a8:	f06f 000c 	mvn.w	r0, #12
 80078ac:	e7fb      	b.n	80078a6 <VL53L1_WrWord+0x1e>
 80078ae:	bf00      	nop
 80078b0:	200005d0 	.word	0x200005d0

080078b4 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 80078b4:	b508      	push	{r3, lr}
 80078b6:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 80078b8:	490a      	ldr	r1, [pc, #40]	@ (80078e4 <VL53L1_WrDWord+0x30>)
 80078ba:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80078be:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 80078c2:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 80078c4:	0e13      	lsrs	r3, r2, #24
 80078c6:	708b      	strb	r3, [r1, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 80078c8:	0c13      	lsrs	r3, r2, #16
 80078ca:	70cb      	strb	r3, [r1, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 80078cc:	0a13      	lsrs	r3, r2, #8
 80078ce:	710b      	strb	r3, [r1, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 80078d0:	714a      	strb	r2, [r1, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 80078d2:	2206      	movs	r2, #6
 80078d4:	f7ff ffa2 	bl	800781c <_I2CWrite>
    if (status_int != 0) {
 80078d8:	b900      	cbnz	r0, 80078dc <VL53L1_WrDWord+0x28>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 80078da:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80078dc:	f06f 000c 	mvn.w	r0, #12
 80078e0:	e7fb      	b.n	80078da <VL53L1_WrDWord+0x26>
 80078e2:	bf00      	nop
 80078e4:	200005d0 	.word	0x200005d0

080078e8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4604      	mov	r4, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4615      	mov	r5, r2
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80078f0:	490a      	ldr	r1, [pc, #40]	@ (800791c <VL53L1_RdByte+0x34>)
 80078f2:	0a1a      	lsrs	r2, r3, #8
 80078f4:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
 80078f6:	704b      	strb	r3, [r1, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80078f8:	2202      	movs	r2, #2
 80078fa:	f7ff ff8f 	bl	800781c <_I2CWrite>
    if( status_int ){
 80078fe:	b930      	cbnz	r0, 800790e <VL53L1_RdByte+0x26>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 8007900:	2201      	movs	r2, #1
 8007902:	4629      	mov	r1, r5
 8007904:	4620      	mov	r0, r4
 8007906:	f7ff ff99 	bl	800783c <_I2CRead>
    if (status_int != 0) {
 800790a:	b918      	cbnz	r0, 8007914 <VL53L1_RdByte+0x2c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800790c:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800790e:	f06f 000c 	mvn.w	r0, #12
 8007912:	e7fb      	b.n	800790c <VL53L1_RdByte+0x24>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007914:	f06f 000c 	mvn.w	r0, #12
 8007918:	e7f8      	b.n	800790c <VL53L1_RdByte+0x24>
 800791a:	bf00      	nop
 800791c:	200005d0 	.word	0x200005d0

08007920 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4604      	mov	r4, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4615      	mov	r5, r2
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8007928:	490d      	ldr	r1, [pc, #52]	@ (8007960 <VL53L1_RdWord+0x40>)
 800792a:	0a1a      	lsrs	r2, r3, #8
 800792c:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
 800792e:	704b      	strb	r3, [r1, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007930:	2202      	movs	r2, #2
 8007932:	f7ff ff73 	bl	800781c <_I2CWrite>

    if( status_int ){
 8007936:	b960      	cbnz	r0, 8007952 <VL53L1_RdWord+0x32>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007938:	2202      	movs	r2, #2
 800793a:	4909      	ldr	r1, [pc, #36]	@ (8007960 <VL53L1_RdWord+0x40>)
 800793c:	4620      	mov	r0, r4
 800793e:	f7ff ff7d 	bl	800783c <_I2CRead>
    if (status_int != 0) {
 8007942:	b948      	cbnz	r0, 8007958 <VL53L1_RdWord+0x38>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007944:	4b06      	ldr	r3, [pc, #24]	@ (8007960 <VL53L1_RdWord+0x40>)
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800794e:	802b      	strh	r3, [r5, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8007950:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007952:	f06f 000c 	mvn.w	r0, #12
 8007956:	e7fb      	b.n	8007950 <VL53L1_RdWord+0x30>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007958:	f06f 000c 	mvn.w	r0, #12
 800795c:	e7f8      	b.n	8007950 <VL53L1_RdWord+0x30>
 800795e:	bf00      	nop
 8007960:	200005d0 	.word	0x200005d0

08007964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800799c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007968:	f7ff ff4e 	bl	8007808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800796c:	480c      	ldr	r0, [pc, #48]	@ (80079a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800796e:	490d      	ldr	r1, [pc, #52]	@ (80079a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007970:	4a0d      	ldr	r2, [pc, #52]	@ (80079a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007974:	e002      	b.n	800797c <LoopCopyDataInit>

08007976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800797a:	3304      	adds	r3, #4

0800797c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800797c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800797e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007980:	d3f9      	bcc.n	8007976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007982:	4a0a      	ldr	r2, [pc, #40]	@ (80079ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007984:	4c0a      	ldr	r4, [pc, #40]	@ (80079b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007988:	e001      	b.n	800798e <LoopFillZerobss>

0800798a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800798a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800798c:	3204      	adds	r2, #4

0800798e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800798e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007990:	d3fb      	bcc.n	800798a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007992:	f000 f83f 	bl	8007a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007996:	f7fc ff63 	bl	8004860 <main>
  bx  lr    
 800799a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800799c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80079a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079a4:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 80079a8:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 80079ac:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 80079b0:	20000818 	.word	0x20000818

080079b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079b4:	e7fe      	b.n	80079b4 <ADC_IRQHandler>
	...

080079b8 <siprintf>:
 80079b8:	b40e      	push	{r1, r2, r3}
 80079ba:	b500      	push	{lr}
 80079bc:	b09c      	sub	sp, #112	@ 0x70
 80079be:	ab1d      	add	r3, sp, #116	@ 0x74
 80079c0:	9002      	str	r0, [sp, #8]
 80079c2:	9006      	str	r0, [sp, #24]
 80079c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079c8:	4809      	ldr	r0, [pc, #36]	@ (80079f0 <siprintf+0x38>)
 80079ca:	9107      	str	r1, [sp, #28]
 80079cc:	9104      	str	r1, [sp, #16]
 80079ce:	4909      	ldr	r1, [pc, #36]	@ (80079f4 <siprintf+0x3c>)
 80079d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079d4:	9105      	str	r1, [sp, #20]
 80079d6:	6800      	ldr	r0, [r0, #0]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	a902      	add	r1, sp, #8
 80079dc:	f000 f9a2 	bl	8007d24 <_svfiprintf_r>
 80079e0:	9b02      	ldr	r3, [sp, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	b01c      	add	sp, #112	@ 0x70
 80079e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ec:	b003      	add	sp, #12
 80079ee:	4770      	bx	lr
 80079f0:	200000f0 	.word	0x200000f0
 80079f4:	ffff0208 	.word	0xffff0208

080079f8 <memset>:
 80079f8:	4402      	add	r2, r0
 80079fa:	4603      	mov	r3, r0
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d100      	bne.n	8007a02 <memset+0xa>
 8007a00:	4770      	bx	lr
 8007a02:	f803 1b01 	strb.w	r1, [r3], #1
 8007a06:	e7f9      	b.n	80079fc <memset+0x4>

08007a08 <__errno>:
 8007a08:	4b01      	ldr	r3, [pc, #4]	@ (8007a10 <__errno+0x8>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	200000f0 	.word	0x200000f0

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4d0d      	ldr	r5, [pc, #52]	@ (8007a4c <__libc_init_array+0x38>)
 8007a18:	4c0d      	ldr	r4, [pc, #52]	@ (8007a50 <__libc_init_array+0x3c>)
 8007a1a:	1b64      	subs	r4, r4, r5
 8007a1c:	10a4      	asrs	r4, r4, #2
 8007a1e:	2600      	movs	r6, #0
 8007a20:	42a6      	cmp	r6, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	4d0b      	ldr	r5, [pc, #44]	@ (8007a54 <__libc_init_array+0x40>)
 8007a26:	4c0c      	ldr	r4, [pc, #48]	@ (8007a58 <__libc_init_array+0x44>)
 8007a28:	f000 fdf0 	bl	800860c <_init>
 8007a2c:	1b64      	subs	r4, r4, r5
 8007a2e:	10a4      	asrs	r4, r4, #2
 8007a30:	2600      	movs	r6, #0
 8007a32:	42a6      	cmp	r6, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3c:	4798      	blx	r3
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a46:	4798      	blx	r3
 8007a48:	3601      	adds	r6, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	08008780 	.word	0x08008780
 8007a50:	08008780 	.word	0x08008780
 8007a54:	08008780 	.word	0x08008780
 8007a58:	08008784 	.word	0x08008784

08007a5c <__retarget_lock_acquire_recursive>:
 8007a5c:	4770      	bx	lr

08007a5e <__retarget_lock_release_recursive>:
 8007a5e:	4770      	bx	lr

08007a60 <memcpy>:
 8007a60:	440a      	add	r2, r1
 8007a62:	4291      	cmp	r1, r2
 8007a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a68:	d100      	bne.n	8007a6c <memcpy+0xc>
 8007a6a:	4770      	bx	lr
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a76:	4291      	cmp	r1, r2
 8007a78:	d1f9      	bne.n	8007a6e <memcpy+0xe>
 8007a7a:	bd10      	pop	{r4, pc}

08007a7c <_free_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4605      	mov	r5, r0
 8007a80:	2900      	cmp	r1, #0
 8007a82:	d041      	beq.n	8007b08 <_free_r+0x8c>
 8007a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a88:	1f0c      	subs	r4, r1, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfb8      	it	lt
 8007a8e:	18e4      	addlt	r4, r4, r3
 8007a90:	f000 f8e0 	bl	8007c54 <__malloc_lock>
 8007a94:	4a1d      	ldr	r2, [pc, #116]	@ (8007b0c <_free_r+0x90>)
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	b933      	cbnz	r3, 8007aa8 <_free_r+0x2c>
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	6014      	str	r4, [r2, #0]
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa4:	f000 b8dc 	b.w	8007c60 <__malloc_unlock>
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d908      	bls.n	8007abe <_free_r+0x42>
 8007aac:	6820      	ldr	r0, [r4, #0]
 8007aae:	1821      	adds	r1, r4, r0
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	bf01      	itttt	eq
 8007ab4:	6819      	ldreq	r1, [r3, #0]
 8007ab6:	685b      	ldreq	r3, [r3, #4]
 8007ab8:	1809      	addeq	r1, r1, r0
 8007aba:	6021      	streq	r1, [r4, #0]
 8007abc:	e7ed      	b.n	8007a9a <_free_r+0x1e>
 8007abe:	461a      	mov	r2, r3
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b10b      	cbz	r3, 8007ac8 <_free_r+0x4c>
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	d9fa      	bls.n	8007abe <_free_r+0x42>
 8007ac8:	6811      	ldr	r1, [r2, #0]
 8007aca:	1850      	adds	r0, r2, r1
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d10b      	bne.n	8007ae8 <_free_r+0x6c>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	4401      	add	r1, r0
 8007ad4:	1850      	adds	r0, r2, r1
 8007ad6:	4283      	cmp	r3, r0
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	d1e0      	bne.n	8007a9e <_free_r+0x22>
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	6053      	str	r3, [r2, #4]
 8007ae2:	4408      	add	r0, r1
 8007ae4:	6010      	str	r0, [r2, #0]
 8007ae6:	e7da      	b.n	8007a9e <_free_r+0x22>
 8007ae8:	d902      	bls.n	8007af0 <_free_r+0x74>
 8007aea:	230c      	movs	r3, #12
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	e7d6      	b.n	8007a9e <_free_r+0x22>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	1821      	adds	r1, r4, r0
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf04      	itt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	bf04      	itt	eq
 8007b00:	1809      	addeq	r1, r1, r0
 8007b02:	6021      	streq	r1, [r4, #0]
 8007b04:	6054      	str	r4, [r2, #4]
 8007b06:	e7ca      	b.n	8007a9e <_free_r+0x22>
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000814 	.word	0x20000814

08007b10 <sbrk_aligned>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4e0f      	ldr	r6, [pc, #60]	@ (8007b50 <sbrk_aligned+0x40>)
 8007b14:	460c      	mov	r4, r1
 8007b16:	6831      	ldr	r1, [r6, #0]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	b911      	cbnz	r1, 8007b22 <sbrk_aligned+0x12>
 8007b1c:	f000 fbb2 	bl	8008284 <_sbrk_r>
 8007b20:	6030      	str	r0, [r6, #0]
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 fbad 	bl	8008284 <_sbrk_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	d103      	bne.n	8007b36 <sbrk_aligned+0x26>
 8007b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b32:	4620      	mov	r0, r4
 8007b34:	bd70      	pop	{r4, r5, r6, pc}
 8007b36:	1cc4      	adds	r4, r0, #3
 8007b38:	f024 0403 	bic.w	r4, r4, #3
 8007b3c:	42a0      	cmp	r0, r4
 8007b3e:	d0f8      	beq.n	8007b32 <sbrk_aligned+0x22>
 8007b40:	1a21      	subs	r1, r4, r0
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 fb9e 	bl	8008284 <_sbrk_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d1f2      	bne.n	8007b32 <sbrk_aligned+0x22>
 8007b4c:	e7ef      	b.n	8007b2e <sbrk_aligned+0x1e>
 8007b4e:	bf00      	nop
 8007b50:	20000810 	.word	0x20000810

08007b54 <_malloc_r>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	1ccd      	adds	r5, r1, #3
 8007b5a:	f025 0503 	bic.w	r5, r5, #3
 8007b5e:	3508      	adds	r5, #8
 8007b60:	2d0c      	cmp	r5, #12
 8007b62:	bf38      	it	cc
 8007b64:	250c      	movcc	r5, #12
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	4606      	mov	r6, r0
 8007b6a:	db01      	blt.n	8007b70 <_malloc_r+0x1c>
 8007b6c:	42a9      	cmp	r1, r5
 8007b6e:	d904      	bls.n	8007b7a <_malloc_r+0x26>
 8007b70:	230c      	movs	r3, #12
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	2000      	movs	r0, #0
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c50 <_malloc_r+0xfc>
 8007b7e:	f000 f869 	bl	8007c54 <__malloc_lock>
 8007b82:	f8d8 3000 	ldr.w	r3, [r8]
 8007b86:	461c      	mov	r4, r3
 8007b88:	bb44      	cbnz	r4, 8007bdc <_malloc_r+0x88>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff ffbf 	bl	8007b10 <sbrk_aligned>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	4604      	mov	r4, r0
 8007b96:	d158      	bne.n	8007c4a <_malloc_r+0xf6>
 8007b98:	f8d8 4000 	ldr.w	r4, [r8]
 8007b9c:	4627      	mov	r7, r4
 8007b9e:	2f00      	cmp	r7, #0
 8007ba0:	d143      	bne.n	8007c2a <_malloc_r+0xd6>
 8007ba2:	2c00      	cmp	r4, #0
 8007ba4:	d04b      	beq.n	8007c3e <_malloc_r+0xea>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	4639      	mov	r1, r7
 8007baa:	4630      	mov	r0, r6
 8007bac:	eb04 0903 	add.w	r9, r4, r3
 8007bb0:	f000 fb68 	bl	8008284 <_sbrk_r>
 8007bb4:	4581      	cmp	r9, r0
 8007bb6:	d142      	bne.n	8007c3e <_malloc_r+0xea>
 8007bb8:	6821      	ldr	r1, [r4, #0]
 8007bba:	1a6d      	subs	r5, r5, r1
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ffa6 	bl	8007b10 <sbrk_aligned>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d03a      	beq.n	8007c3e <_malloc_r+0xea>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	442b      	add	r3, r5
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	bb62      	cbnz	r2, 8007c30 <_malloc_r+0xdc>
 8007bd6:	f8c8 7000 	str.w	r7, [r8]
 8007bda:	e00f      	b.n	8007bfc <_malloc_r+0xa8>
 8007bdc:	6822      	ldr	r2, [r4, #0]
 8007bde:	1b52      	subs	r2, r2, r5
 8007be0:	d420      	bmi.n	8007c24 <_malloc_r+0xd0>
 8007be2:	2a0b      	cmp	r2, #11
 8007be4:	d917      	bls.n	8007c16 <_malloc_r+0xc2>
 8007be6:	1961      	adds	r1, r4, r5
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	6025      	str	r5, [r4, #0]
 8007bec:	bf18      	it	ne
 8007bee:	6059      	strne	r1, [r3, #4]
 8007bf0:	6863      	ldr	r3, [r4, #4]
 8007bf2:	bf08      	it	eq
 8007bf4:	f8c8 1000 	streq.w	r1, [r8]
 8007bf8:	5162      	str	r2, [r4, r5]
 8007bfa:	604b      	str	r3, [r1, #4]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f000 f82f 	bl	8007c60 <__malloc_unlock>
 8007c02:	f104 000b 	add.w	r0, r4, #11
 8007c06:	1d23      	adds	r3, r4, #4
 8007c08:	f020 0007 	bic.w	r0, r0, #7
 8007c0c:	1ac2      	subs	r2, r0, r3
 8007c0e:	bf1c      	itt	ne
 8007c10:	1a1b      	subne	r3, r3, r0
 8007c12:	50a3      	strne	r3, [r4, r2]
 8007c14:	e7af      	b.n	8007b76 <_malloc_r+0x22>
 8007c16:	6862      	ldr	r2, [r4, #4]
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	bf0c      	ite	eq
 8007c1c:	f8c8 2000 	streq.w	r2, [r8]
 8007c20:	605a      	strne	r2, [r3, #4]
 8007c22:	e7eb      	b.n	8007bfc <_malloc_r+0xa8>
 8007c24:	4623      	mov	r3, r4
 8007c26:	6864      	ldr	r4, [r4, #4]
 8007c28:	e7ae      	b.n	8007b88 <_malloc_r+0x34>
 8007c2a:	463c      	mov	r4, r7
 8007c2c:	687f      	ldr	r7, [r7, #4]
 8007c2e:	e7b6      	b.n	8007b9e <_malloc_r+0x4a>
 8007c30:	461a      	mov	r2, r3
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d1fb      	bne.n	8007c30 <_malloc_r+0xdc>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6053      	str	r3, [r2, #4]
 8007c3c:	e7de      	b.n	8007bfc <_malloc_r+0xa8>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 f80c 	bl	8007c60 <__malloc_unlock>
 8007c48:	e794      	b.n	8007b74 <_malloc_r+0x20>
 8007c4a:	6005      	str	r5, [r0, #0]
 8007c4c:	e7d6      	b.n	8007bfc <_malloc_r+0xa8>
 8007c4e:	bf00      	nop
 8007c50:	20000814 	.word	0x20000814

08007c54 <__malloc_lock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	@ (8007c5c <__malloc_lock+0x8>)
 8007c56:	f7ff bf01 	b.w	8007a5c <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	2000080c 	.word	0x2000080c

08007c60 <__malloc_unlock>:
 8007c60:	4801      	ldr	r0, [pc, #4]	@ (8007c68 <__malloc_unlock+0x8>)
 8007c62:	f7ff befc 	b.w	8007a5e <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	2000080c 	.word	0x2000080c

08007c6c <__ssputs_r>:
 8007c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	688e      	ldr	r6, [r1, #8]
 8007c72:	461f      	mov	r7, r3
 8007c74:	42be      	cmp	r6, r7
 8007c76:	680b      	ldr	r3, [r1, #0]
 8007c78:	4682      	mov	sl, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	4690      	mov	r8, r2
 8007c7e:	d82d      	bhi.n	8007cdc <__ssputs_r+0x70>
 8007c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c88:	d026      	beq.n	8007cd8 <__ssputs_r+0x6c>
 8007c8a:	6965      	ldr	r5, [r4, #20]
 8007c8c:	6909      	ldr	r1, [r1, #16]
 8007c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c92:	eba3 0901 	sub.w	r9, r3, r1
 8007c96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c9a:	1c7b      	adds	r3, r7, #1
 8007c9c:	444b      	add	r3, r9
 8007c9e:	106d      	asrs	r5, r5, #1
 8007ca0:	429d      	cmp	r5, r3
 8007ca2:	bf38      	it	cc
 8007ca4:	461d      	movcc	r5, r3
 8007ca6:	0553      	lsls	r3, r2, #21
 8007ca8:	d527      	bpl.n	8007cfa <__ssputs_r+0x8e>
 8007caa:	4629      	mov	r1, r5
 8007cac:	f7ff ff52 	bl	8007b54 <_malloc_r>
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	b360      	cbz	r0, 8007d0e <__ssputs_r+0xa2>
 8007cb4:	6921      	ldr	r1, [r4, #16]
 8007cb6:	464a      	mov	r2, r9
 8007cb8:	f7ff fed2 	bl	8007a60 <memcpy>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	6126      	str	r6, [r4, #16]
 8007cca:	6165      	str	r5, [r4, #20]
 8007ccc:	444e      	add	r6, r9
 8007cce:	eba5 0509 	sub.w	r5, r5, r9
 8007cd2:	6026      	str	r6, [r4, #0]
 8007cd4:	60a5      	str	r5, [r4, #8]
 8007cd6:	463e      	mov	r6, r7
 8007cd8:	42be      	cmp	r6, r7
 8007cda:	d900      	bls.n	8007cde <__ssputs_r+0x72>
 8007cdc:	463e      	mov	r6, r7
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	f000 fab4 	bl	8008250 <memmove>
 8007ce8:	68a3      	ldr	r3, [r4, #8]
 8007cea:	1b9b      	subs	r3, r3, r6
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	4433      	add	r3, r6
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	f000 fad2 	bl	80082a4 <_realloc_r>
 8007d00:	4606      	mov	r6, r0
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1e0      	bne.n	8007cc8 <__ssputs_r+0x5c>
 8007d06:	6921      	ldr	r1, [r4, #16]
 8007d08:	4650      	mov	r0, sl
 8007d0a:	f7ff feb7 	bl	8007a7c <_free_r>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	f8ca 3000 	str.w	r3, [sl]
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e7e9      	b.n	8007cf6 <__ssputs_r+0x8a>
	...

08007d24 <_svfiprintf_r>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4698      	mov	r8, r3
 8007d2a:	898b      	ldrh	r3, [r1, #12]
 8007d2c:	061b      	lsls	r3, r3, #24
 8007d2e:	b09d      	sub	sp, #116	@ 0x74
 8007d30:	4607      	mov	r7, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	4614      	mov	r4, r2
 8007d36:	d510      	bpl.n	8007d5a <_svfiprintf_r+0x36>
 8007d38:	690b      	ldr	r3, [r1, #16]
 8007d3a:	b973      	cbnz	r3, 8007d5a <_svfiprintf_r+0x36>
 8007d3c:	2140      	movs	r1, #64	@ 0x40
 8007d3e:	f7ff ff09 	bl	8007b54 <_malloc_r>
 8007d42:	6028      	str	r0, [r5, #0]
 8007d44:	6128      	str	r0, [r5, #16]
 8007d46:	b930      	cbnz	r0, 8007d56 <_svfiprintf_r+0x32>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	b01d      	add	sp, #116	@ 0x74
 8007d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d56:	2340      	movs	r3, #64	@ 0x40
 8007d58:	616b      	str	r3, [r5, #20]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5e:	2320      	movs	r3, #32
 8007d60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d68:	2330      	movs	r3, #48	@ 0x30
 8007d6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f08 <_svfiprintf_r+0x1e4>
 8007d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d72:	f04f 0901 	mov.w	r9, #1
 8007d76:	4623      	mov	r3, r4
 8007d78:	469a      	mov	sl, r3
 8007d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7e:	b10a      	cbz	r2, 8007d84 <_svfiprintf_r+0x60>
 8007d80:	2a25      	cmp	r2, #37	@ 0x25
 8007d82:	d1f9      	bne.n	8007d78 <_svfiprintf_r+0x54>
 8007d84:	ebba 0b04 	subs.w	fp, sl, r4
 8007d88:	d00b      	beq.n	8007da2 <_svfiprintf_r+0x7e>
 8007d8a:	465b      	mov	r3, fp
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4638      	mov	r0, r7
 8007d92:	f7ff ff6b 	bl	8007c6c <__ssputs_r>
 8007d96:	3001      	adds	r0, #1
 8007d98:	f000 80a7 	beq.w	8007eea <_svfiprintf_r+0x1c6>
 8007d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d9e:	445a      	add	r2, fp
 8007da0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007da2:	f89a 3000 	ldrb.w	r3, [sl]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 809f 	beq.w	8007eea <_svfiprintf_r+0x1c6>
 8007dac:	2300      	movs	r3, #0
 8007dae:	f04f 32ff 	mov.w	r2, #4294967295
 8007db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db6:	f10a 0a01 	add.w	sl, sl, #1
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	9307      	str	r3, [sp, #28]
 8007dbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc4:	4654      	mov	r4, sl
 8007dc6:	2205      	movs	r2, #5
 8007dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dcc:	484e      	ldr	r0, [pc, #312]	@ (8007f08 <_svfiprintf_r+0x1e4>)
 8007dce:	f7f8 f9e7 	bl	80001a0 <memchr>
 8007dd2:	9a04      	ldr	r2, [sp, #16]
 8007dd4:	b9d8      	cbnz	r0, 8007e0e <_svfiprintf_r+0xea>
 8007dd6:	06d0      	lsls	r0, r2, #27
 8007dd8:	bf44      	itt	mi
 8007dda:	2320      	movmi	r3, #32
 8007ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de0:	0711      	lsls	r1, r2, #28
 8007de2:	bf44      	itt	mi
 8007de4:	232b      	movmi	r3, #43	@ 0x2b
 8007de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dea:	f89a 3000 	ldrb.w	r3, [sl]
 8007dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007df0:	d015      	beq.n	8007e1e <_svfiprintf_r+0xfa>
 8007df2:	9a07      	ldr	r2, [sp, #28]
 8007df4:	4654      	mov	r4, sl
 8007df6:	2000      	movs	r0, #0
 8007df8:	f04f 0c0a 	mov.w	ip, #10
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e02:	3b30      	subs	r3, #48	@ 0x30
 8007e04:	2b09      	cmp	r3, #9
 8007e06:	d94b      	bls.n	8007ea0 <_svfiprintf_r+0x17c>
 8007e08:	b1b0      	cbz	r0, 8007e38 <_svfiprintf_r+0x114>
 8007e0a:	9207      	str	r2, [sp, #28]
 8007e0c:	e014      	b.n	8007e38 <_svfiprintf_r+0x114>
 8007e0e:	eba0 0308 	sub.w	r3, r0, r8
 8007e12:	fa09 f303 	lsl.w	r3, r9, r3
 8007e16:	4313      	orrs	r3, r2
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	46a2      	mov	sl, r4
 8007e1c:	e7d2      	b.n	8007dc4 <_svfiprintf_r+0xa0>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	1d19      	adds	r1, r3, #4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	9103      	str	r1, [sp, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfbb      	ittet	lt
 8007e2a:	425b      	neglt	r3, r3
 8007e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e30:	9307      	strge	r3, [sp, #28]
 8007e32:	9307      	strlt	r3, [sp, #28]
 8007e34:	bfb8      	it	lt
 8007e36:	9204      	strlt	r2, [sp, #16]
 8007e38:	7823      	ldrb	r3, [r4, #0]
 8007e3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e3c:	d10a      	bne.n	8007e54 <_svfiprintf_r+0x130>
 8007e3e:	7863      	ldrb	r3, [r4, #1]
 8007e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e42:	d132      	bne.n	8007eaa <_svfiprintf_r+0x186>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	1d1a      	adds	r2, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	9203      	str	r2, [sp, #12]
 8007e4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e50:	3402      	adds	r4, #2
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f18 <_svfiprintf_r+0x1f4>
 8007e58:	7821      	ldrb	r1, [r4, #0]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f7f8 f99f 	bl	80001a0 <memchr>
 8007e62:	b138      	cbz	r0, 8007e74 <_svfiprintf_r+0x150>
 8007e64:	9b04      	ldr	r3, [sp, #16]
 8007e66:	eba0 000a 	sub.w	r0, r0, sl
 8007e6a:	2240      	movs	r2, #64	@ 0x40
 8007e6c:	4082      	lsls	r2, r0
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	3401      	adds	r4, #1
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e78:	4824      	ldr	r0, [pc, #144]	@ (8007f0c <_svfiprintf_r+0x1e8>)
 8007e7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e7e:	2206      	movs	r2, #6
 8007e80:	f7f8 f98e 	bl	80001a0 <memchr>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d036      	beq.n	8007ef6 <_svfiprintf_r+0x1d2>
 8007e88:	4b21      	ldr	r3, [pc, #132]	@ (8007f10 <_svfiprintf_r+0x1ec>)
 8007e8a:	bb1b      	cbnz	r3, 8007ed4 <_svfiprintf_r+0x1b0>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	3307      	adds	r3, #7
 8007e90:	f023 0307 	bic.w	r3, r3, #7
 8007e94:	3308      	adds	r3, #8
 8007e96:	9303      	str	r3, [sp, #12]
 8007e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9a:	4433      	add	r3, r6
 8007e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e9e:	e76a      	b.n	8007d76 <_svfiprintf_r+0x52>
 8007ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	e7a8      	b.n	8007dfc <_svfiprintf_r+0xd8>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	3401      	adds	r4, #1
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f04f 0c0a 	mov.w	ip, #10
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebc:	3a30      	subs	r2, #48	@ 0x30
 8007ebe:	2a09      	cmp	r2, #9
 8007ec0:	d903      	bls.n	8007eca <_svfiprintf_r+0x1a6>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0c6      	beq.n	8007e54 <_svfiprintf_r+0x130>
 8007ec6:	9105      	str	r1, [sp, #20]
 8007ec8:	e7c4      	b.n	8007e54 <_svfiprintf_r+0x130>
 8007eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ece:	4604      	mov	r4, r0
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e7f0      	b.n	8007eb6 <_svfiprintf_r+0x192>
 8007ed4:	ab03      	add	r3, sp, #12
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4b0e      	ldr	r3, [pc, #56]	@ (8007f14 <_svfiprintf_r+0x1f0>)
 8007edc:	a904      	add	r1, sp, #16
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f3af 8000 	nop.w
 8007ee4:	1c42      	adds	r2, r0, #1
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	d1d6      	bne.n	8007e98 <_svfiprintf_r+0x174>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	065b      	lsls	r3, r3, #25
 8007eee:	f53f af2d 	bmi.w	8007d4c <_svfiprintf_r+0x28>
 8007ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef4:	e72c      	b.n	8007d50 <_svfiprintf_r+0x2c>
 8007ef6:	ab03      	add	r3, sp, #12
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	462a      	mov	r2, r5
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <_svfiprintf_r+0x1f0>)
 8007efe:	a904      	add	r1, sp, #16
 8007f00:	4638      	mov	r0, r7
 8007f02:	f000 f879 	bl	8007ff8 <_printf_i>
 8007f06:	e7ed      	b.n	8007ee4 <_svfiprintf_r+0x1c0>
 8007f08:	08008744 	.word	0x08008744
 8007f0c:	0800874e 	.word	0x0800874e
 8007f10:	00000000 	.word	0x00000000
 8007f14:	08007c6d 	.word	0x08007c6d
 8007f18:	0800874a 	.word	0x0800874a

08007f1c <_printf_common>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	4616      	mov	r6, r2
 8007f22:	4698      	mov	r8, r3
 8007f24:	688a      	ldr	r2, [r1, #8]
 8007f26:	690b      	ldr	r3, [r1, #16]
 8007f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	bfb8      	it	lt
 8007f30:	4613      	movlt	r3, r2
 8007f32:	6033      	str	r3, [r6, #0]
 8007f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f38:	4607      	mov	r7, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	b10a      	cbz	r2, 8007f42 <_printf_common+0x26>
 8007f3e:	3301      	adds	r3, #1
 8007f40:	6033      	str	r3, [r6, #0]
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	0699      	lsls	r1, r3, #26
 8007f46:	bf42      	ittt	mi
 8007f48:	6833      	ldrmi	r3, [r6, #0]
 8007f4a:	3302      	addmi	r3, #2
 8007f4c:	6033      	strmi	r3, [r6, #0]
 8007f4e:	6825      	ldr	r5, [r4, #0]
 8007f50:	f015 0506 	ands.w	r5, r5, #6
 8007f54:	d106      	bne.n	8007f64 <_printf_common+0x48>
 8007f56:	f104 0a19 	add.w	sl, r4, #25
 8007f5a:	68e3      	ldr	r3, [r4, #12]
 8007f5c:	6832      	ldr	r2, [r6, #0]
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dc26      	bgt.n	8007fb2 <_printf_common+0x96>
 8007f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f68:	6822      	ldr	r2, [r4, #0]
 8007f6a:	3b00      	subs	r3, #0
 8007f6c:	bf18      	it	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	0692      	lsls	r2, r2, #26
 8007f72:	d42b      	bmi.n	8007fcc <_printf_common+0xb0>
 8007f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f78:	4641      	mov	r1, r8
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	47c8      	blx	r9
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d01e      	beq.n	8007fc0 <_printf_common+0xa4>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	6922      	ldr	r2, [r4, #16]
 8007f86:	f003 0306 	and.w	r3, r3, #6
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	bf02      	ittt	eq
 8007f8e:	68e5      	ldreq	r5, [r4, #12]
 8007f90:	6833      	ldreq	r3, [r6, #0]
 8007f92:	1aed      	subeq	r5, r5, r3
 8007f94:	68a3      	ldr	r3, [r4, #8]
 8007f96:	bf0c      	ite	eq
 8007f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f9c:	2500      	movne	r5, #0
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	bfc4      	itt	gt
 8007fa2:	1a9b      	subgt	r3, r3, r2
 8007fa4:	18ed      	addgt	r5, r5, r3
 8007fa6:	2600      	movs	r6, #0
 8007fa8:	341a      	adds	r4, #26
 8007faa:	42b5      	cmp	r5, r6
 8007fac:	d11a      	bne.n	8007fe4 <_printf_common+0xc8>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e008      	b.n	8007fc4 <_printf_common+0xa8>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	4638      	mov	r0, r7
 8007fba:	47c8      	blx	r9
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d103      	bne.n	8007fc8 <_printf_common+0xac>
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	3501      	adds	r5, #1
 8007fca:	e7c6      	b.n	8007f5a <_printf_common+0x3e>
 8007fcc:	18e1      	adds	r1, r4, r3
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	2030      	movs	r0, #48	@ 0x30
 8007fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fd6:	4422      	add	r2, r4
 8007fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	e7c7      	b.n	8007f74 <_printf_common+0x58>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4641      	mov	r1, r8
 8007fea:	4638      	mov	r0, r7
 8007fec:	47c8      	blx	r9
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d0e6      	beq.n	8007fc0 <_printf_common+0xa4>
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	e7d9      	b.n	8007faa <_printf_common+0x8e>
	...

08007ff8 <_printf_i>:
 8007ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	7e0f      	ldrb	r7, [r1, #24]
 8007ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008000:	2f78      	cmp	r7, #120	@ 0x78
 8008002:	4691      	mov	r9, r2
 8008004:	4680      	mov	r8, r0
 8008006:	460c      	mov	r4, r1
 8008008:	469a      	mov	sl, r3
 800800a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800800e:	d807      	bhi.n	8008020 <_printf_i+0x28>
 8008010:	2f62      	cmp	r7, #98	@ 0x62
 8008012:	d80a      	bhi.n	800802a <_printf_i+0x32>
 8008014:	2f00      	cmp	r7, #0
 8008016:	f000 80dd 	beq.w	80081d4 <_printf_i+0x1dc>
 800801a:	2f58      	cmp	r7, #88	@ 0x58
 800801c:	f000 80c3 	beq.w	80081a6 <_printf_i+0x1ae>
 8008020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008028:	e03a      	b.n	80080a0 <_printf_i+0xa8>
 800802a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800802e:	2b15      	cmp	r3, #21
 8008030:	d8f6      	bhi.n	8008020 <_printf_i+0x28>
 8008032:	a101      	add	r1, pc, #4	@ (adr r1, 8008038 <_printf_i+0x40>)
 8008034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008038:	08008091 	.word	0x08008091
 800803c:	080080a5 	.word	0x080080a5
 8008040:	08008021 	.word	0x08008021
 8008044:	08008021 	.word	0x08008021
 8008048:	08008021 	.word	0x08008021
 800804c:	08008021 	.word	0x08008021
 8008050:	080080a5 	.word	0x080080a5
 8008054:	08008021 	.word	0x08008021
 8008058:	08008021 	.word	0x08008021
 800805c:	08008021 	.word	0x08008021
 8008060:	08008021 	.word	0x08008021
 8008064:	080081bb 	.word	0x080081bb
 8008068:	08008133 	.word	0x08008133
 800806c:	08008173 	.word	0x08008173
 8008070:	08008021 	.word	0x08008021
 8008074:	08008021 	.word	0x08008021
 8008078:	080081dd 	.word	0x080081dd
 800807c:	08008021 	.word	0x08008021
 8008080:	08008133 	.word	0x08008133
 8008084:	08008021 	.word	0x08008021
 8008088:	08008021 	.word	0x08008021
 800808c:	0800817b 	.word	0x0800817b
 8008090:	6833      	ldr	r3, [r6, #0]
 8008092:	1d1a      	adds	r2, r3, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6032      	str	r2, [r6, #0]
 8008098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800809c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080a0:	2301      	movs	r3, #1
 80080a2:	e0a8      	b.n	80081f6 <_printf_i+0x1fe>
 80080a4:	6831      	ldr	r1, [r6, #0]
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	1d08      	adds	r0, r1, #4
 80080aa:	6030      	str	r0, [r6, #0]
 80080ac:	061e      	lsls	r6, r3, #24
 80080ae:	d501      	bpl.n	80080b4 <_printf_i+0xbc>
 80080b0:	680d      	ldr	r5, [r1, #0]
 80080b2:	e003      	b.n	80080bc <_printf_i+0xc4>
 80080b4:	065d      	lsls	r5, r3, #25
 80080b6:	d5fb      	bpl.n	80080b0 <_printf_i+0xb8>
 80080b8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	2d00      	cmp	r5, #0
 80080c0:	da78      	bge.n	80081b4 <_printf_i+0x1bc>
 80080c2:	202d      	movs	r0, #45	@ 0x2d
 80080c4:	2900      	cmp	r1, #0
 80080c6:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80080ca:	60a1      	str	r1, [r4, #8]
 80080cc:	da2d      	bge.n	800812a <_printf_i+0x132>
 80080ce:	485e      	ldr	r0, [pc, #376]	@ (8008248 <_printf_i+0x250>)
 80080d0:	426d      	negs	r5, r5
 80080d2:	230a      	movs	r3, #10
 80080d4:	4616      	mov	r6, r2
 80080d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80080da:	fb03 5711 	mls	r7, r3, r1, r5
 80080de:	5dc7      	ldrb	r7, [r0, r7]
 80080e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080e4:	462f      	mov	r7, r5
 80080e6:	42bb      	cmp	r3, r7
 80080e8:	460d      	mov	r5, r1
 80080ea:	d9f4      	bls.n	80080d6 <_printf_i+0xde>
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d10b      	bne.n	8008108 <_printf_i+0x110>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	07df      	lsls	r7, r3, #31
 80080f4:	d508      	bpl.n	8008108 <_printf_i+0x110>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	6861      	ldr	r1, [r4, #4]
 80080fa:	4299      	cmp	r1, r3
 80080fc:	bfde      	ittt	le
 80080fe:	2330      	movle	r3, #48	@ 0x30
 8008100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008104:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008108:	1b92      	subs	r2, r2, r6
 800810a:	6122      	str	r2, [r4, #16]
 800810c:	f8cd a000 	str.w	sl, [sp]
 8008110:	464b      	mov	r3, r9
 8008112:	aa03      	add	r2, sp, #12
 8008114:	4621      	mov	r1, r4
 8008116:	4640      	mov	r0, r8
 8008118:	f7ff ff00 	bl	8007f1c <_printf_common>
 800811c:	3001      	adds	r0, #1
 800811e:	d16f      	bne.n	8008200 <_printf_i+0x208>
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	b004      	add	sp, #16
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	f023 0304 	bic.w	r3, r3, #4
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	e7cd      	b.n	80080ce <_printf_i+0xd6>
 8008132:	6821      	ldr	r1, [r4, #0]
 8008134:	6833      	ldr	r3, [r6, #0]
 8008136:	0608      	lsls	r0, r1, #24
 8008138:	f853 5b04 	ldr.w	r5, [r3], #4
 800813c:	d402      	bmi.n	8008144 <_printf_i+0x14c>
 800813e:	0649      	lsls	r1, r1, #25
 8008140:	bf48      	it	mi
 8008142:	b2ad      	uxthmi	r5, r5
 8008144:	2f6f      	cmp	r7, #111	@ 0x6f
 8008146:	4840      	ldr	r0, [pc, #256]	@ (8008248 <_printf_i+0x250>)
 8008148:	6033      	str	r3, [r6, #0]
 800814a:	bf14      	ite	ne
 800814c:	230a      	movne	r3, #10
 800814e:	2308      	moveq	r3, #8
 8008150:	2100      	movs	r1, #0
 8008152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008156:	6866      	ldr	r6, [r4, #4]
 8008158:	60a6      	str	r6, [r4, #8]
 800815a:	2e00      	cmp	r6, #0
 800815c:	dbba      	blt.n	80080d4 <_printf_i+0xdc>
 800815e:	6821      	ldr	r1, [r4, #0]
 8008160:	f021 0104 	bic.w	r1, r1, #4
 8008164:	6021      	str	r1, [r4, #0]
 8008166:	2d00      	cmp	r5, #0
 8008168:	d1b4      	bne.n	80080d4 <_printf_i+0xdc>
 800816a:	2e00      	cmp	r6, #0
 800816c:	d1b2      	bne.n	80080d4 <_printf_i+0xdc>
 800816e:	4616      	mov	r6, r2
 8008170:	e7bc      	b.n	80080ec <_printf_i+0xf4>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	f043 0320 	orr.w	r3, r3, #32
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	4834      	ldr	r0, [pc, #208]	@ (800824c <_printf_i+0x254>)
 800817c:	2778      	movs	r7, #120	@ 0x78
 800817e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	6831      	ldr	r1, [r6, #0]
 8008186:	061f      	lsls	r7, r3, #24
 8008188:	f851 5b04 	ldr.w	r5, [r1], #4
 800818c:	d402      	bmi.n	8008194 <_printf_i+0x19c>
 800818e:	065f      	lsls	r7, r3, #25
 8008190:	bf48      	it	mi
 8008192:	b2ad      	uxthmi	r5, r5
 8008194:	6031      	str	r1, [r6, #0]
 8008196:	07d9      	lsls	r1, r3, #31
 8008198:	bf44      	itt	mi
 800819a:	f043 0320 	orrmi.w	r3, r3, #32
 800819e:	6023      	strmi	r3, [r4, #0]
 80081a0:	b11d      	cbz	r5, 80081aa <_printf_i+0x1b2>
 80081a2:	2310      	movs	r3, #16
 80081a4:	e7d4      	b.n	8008150 <_printf_i+0x158>
 80081a6:	4828      	ldr	r0, [pc, #160]	@ (8008248 <_printf_i+0x250>)
 80081a8:	e7e9      	b.n	800817e <_printf_i+0x186>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f023 0320 	bic.w	r3, r3, #32
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	e7f6      	b.n	80081a2 <_printf_i+0x1aa>
 80081b4:	4824      	ldr	r0, [pc, #144]	@ (8008248 <_printf_i+0x250>)
 80081b6:	230a      	movs	r3, #10
 80081b8:	e7cd      	b.n	8008156 <_printf_i+0x15e>
 80081ba:	6833      	ldr	r3, [r6, #0]
 80081bc:	6825      	ldr	r5, [r4, #0]
 80081be:	6961      	ldr	r1, [r4, #20]
 80081c0:	1d18      	adds	r0, r3, #4
 80081c2:	6030      	str	r0, [r6, #0]
 80081c4:	062e      	lsls	r6, r5, #24
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	d501      	bpl.n	80081ce <_printf_i+0x1d6>
 80081ca:	6019      	str	r1, [r3, #0]
 80081cc:	e002      	b.n	80081d4 <_printf_i+0x1dc>
 80081ce:	0668      	lsls	r0, r5, #25
 80081d0:	d5fb      	bpl.n	80081ca <_printf_i+0x1d2>
 80081d2:	8019      	strh	r1, [r3, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	4616      	mov	r6, r2
 80081da:	e797      	b.n	800810c <_printf_i+0x114>
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	1d1a      	adds	r2, r3, #4
 80081e0:	6032      	str	r2, [r6, #0]
 80081e2:	681e      	ldr	r6, [r3, #0]
 80081e4:	6862      	ldr	r2, [r4, #4]
 80081e6:	2100      	movs	r1, #0
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7f7 ffd9 	bl	80001a0 <memchr>
 80081ee:	b108      	cbz	r0, 80081f4 <_printf_i+0x1fc>
 80081f0:	1b80      	subs	r0, r0, r6
 80081f2:	6060      	str	r0, [r4, #4]
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	2300      	movs	r3, #0
 80081fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fe:	e785      	b.n	800810c <_printf_i+0x114>
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	4632      	mov	r2, r6
 8008204:	4649      	mov	r1, r9
 8008206:	4640      	mov	r0, r8
 8008208:	47d0      	blx	sl
 800820a:	3001      	adds	r0, #1
 800820c:	d088      	beq.n	8008120 <_printf_i+0x128>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	079b      	lsls	r3, r3, #30
 8008212:	d414      	bmi.n	800823e <_printf_i+0x246>
 8008214:	68e0      	ldr	r0, [r4, #12]
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	4298      	cmp	r0, r3
 800821a:	bfb8      	it	lt
 800821c:	4618      	movlt	r0, r3
 800821e:	e781      	b.n	8008124 <_printf_i+0x12c>
 8008220:	2301      	movs	r3, #1
 8008222:	4632      	mov	r2, r6
 8008224:	4649      	mov	r1, r9
 8008226:	4640      	mov	r0, r8
 8008228:	47d0      	blx	sl
 800822a:	3001      	adds	r0, #1
 800822c:	f43f af78 	beq.w	8008120 <_printf_i+0x128>
 8008230:	3501      	adds	r5, #1
 8008232:	68e3      	ldr	r3, [r4, #12]
 8008234:	9903      	ldr	r1, [sp, #12]
 8008236:	1a5b      	subs	r3, r3, r1
 8008238:	42ab      	cmp	r3, r5
 800823a:	dcf1      	bgt.n	8008220 <_printf_i+0x228>
 800823c:	e7ea      	b.n	8008214 <_printf_i+0x21c>
 800823e:	2500      	movs	r5, #0
 8008240:	f104 0619 	add.w	r6, r4, #25
 8008244:	e7f5      	b.n	8008232 <_printf_i+0x23a>
 8008246:	bf00      	nop
 8008248:	08008755 	.word	0x08008755
 800824c:	08008766 	.word	0x08008766

08008250 <memmove>:
 8008250:	4288      	cmp	r0, r1
 8008252:	b510      	push	{r4, lr}
 8008254:	eb01 0402 	add.w	r4, r1, r2
 8008258:	d902      	bls.n	8008260 <memmove+0x10>
 800825a:	4284      	cmp	r4, r0
 800825c:	4623      	mov	r3, r4
 800825e:	d807      	bhi.n	8008270 <memmove+0x20>
 8008260:	1e43      	subs	r3, r0, #1
 8008262:	42a1      	cmp	r1, r4
 8008264:	d008      	beq.n	8008278 <memmove+0x28>
 8008266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800826a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800826e:	e7f8      	b.n	8008262 <memmove+0x12>
 8008270:	4402      	add	r2, r0
 8008272:	4601      	mov	r1, r0
 8008274:	428a      	cmp	r2, r1
 8008276:	d100      	bne.n	800827a <memmove+0x2a>
 8008278:	bd10      	pop	{r4, pc}
 800827a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800827e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008282:	e7f7      	b.n	8008274 <memmove+0x24>

08008284 <_sbrk_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d06      	ldr	r5, [pc, #24]	@ (80082a0 <_sbrk_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	f7ff fa96 	bl	80077c0 <_sbrk>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_sbrk_r+0x1a>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_sbrk_r+0x1a>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	20000808 	.word	0x20000808

080082a4 <_realloc_r>:
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	4680      	mov	r8, r0
 80082aa:	4615      	mov	r5, r2
 80082ac:	460c      	mov	r4, r1
 80082ae:	b921      	cbnz	r1, 80082ba <_realloc_r+0x16>
 80082b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b4:	4611      	mov	r1, r2
 80082b6:	f7ff bc4d 	b.w	8007b54 <_malloc_r>
 80082ba:	b92a      	cbnz	r2, 80082c8 <_realloc_r+0x24>
 80082bc:	f7ff fbde 	bl	8007a7c <_free_r>
 80082c0:	2400      	movs	r4, #0
 80082c2:	4620      	mov	r0, r4
 80082c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c8:	f000 f81a 	bl	8008300 <_malloc_usable_size_r>
 80082cc:	4285      	cmp	r5, r0
 80082ce:	4606      	mov	r6, r0
 80082d0:	d802      	bhi.n	80082d8 <_realloc_r+0x34>
 80082d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082d6:	d8f4      	bhi.n	80082c2 <_realloc_r+0x1e>
 80082d8:	4629      	mov	r1, r5
 80082da:	4640      	mov	r0, r8
 80082dc:	f7ff fc3a 	bl	8007b54 <_malloc_r>
 80082e0:	4607      	mov	r7, r0
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d0ec      	beq.n	80082c0 <_realloc_r+0x1c>
 80082e6:	42b5      	cmp	r5, r6
 80082e8:	462a      	mov	r2, r5
 80082ea:	4621      	mov	r1, r4
 80082ec:	bf28      	it	cs
 80082ee:	4632      	movcs	r2, r6
 80082f0:	f7ff fbb6 	bl	8007a60 <memcpy>
 80082f4:	4621      	mov	r1, r4
 80082f6:	4640      	mov	r0, r8
 80082f8:	f7ff fbc0 	bl	8007a7c <_free_r>
 80082fc:	463c      	mov	r4, r7
 80082fe:	e7e0      	b.n	80082c2 <_realloc_r+0x1e>

08008300 <_malloc_usable_size_r>:
 8008300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008304:	1f18      	subs	r0, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfbc      	itt	lt
 800830a:	580b      	ldrlt	r3, [r1, r0]
 800830c:	18c0      	addlt	r0, r0, r3
 800830e:	4770      	bx	lr

08008310 <__aeabi_f2ulz>:
 8008310:	b5d0      	push	{r4, r6, r7, lr}
 8008312:	f7f8 f8f9 	bl	8000508 <__aeabi_f2d>
 8008316:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <__aeabi_f2ulz+0x38>)
 8008318:	2200      	movs	r2, #0
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	f7f8 f94b 	bl	80005b8 <__aeabi_dmul>
 8008322:	f7f8 fb5b 	bl	80009dc <__aeabi_d2uiz>
 8008326:	4604      	mov	r4, r0
 8008328:	f7f8 f8cc 	bl	80004c4 <__aeabi_ui2d>
 800832c:	4b07      	ldr	r3, [pc, #28]	@ (800834c <__aeabi_f2ulz+0x3c>)
 800832e:	2200      	movs	r2, #0
 8008330:	f7f8 f942 	bl	80005b8 <__aeabi_dmul>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4630      	mov	r0, r6
 800833a:	4639      	mov	r1, r7
 800833c:	f7f7 ff84 	bl	8000248 <__aeabi_dsub>
 8008340:	f7f8 fb4c 	bl	80009dc <__aeabi_d2uiz>
 8008344:	4621      	mov	r1, r4
 8008346:	bdd0      	pop	{r4, r6, r7, pc}
 8008348:	3df00000 	.word	0x3df00000
 800834c:	41f00000 	.word	0x41f00000

08008350 <__udivmoddi4>:
 8008350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	9d08      	ldr	r5, [sp, #32]
 8008356:	460c      	mov	r4, r1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d14e      	bne.n	80083fa <__udivmoddi4+0xaa>
 800835c:	4694      	mov	ip, r2
 800835e:	458c      	cmp	ip, r1
 8008360:	4686      	mov	lr, r0
 8008362:	fab2 f282 	clz	r2, r2
 8008366:	d962      	bls.n	800842e <__udivmoddi4+0xde>
 8008368:	b14a      	cbz	r2, 800837e <__udivmoddi4+0x2e>
 800836a:	f1c2 0320 	rsb	r3, r2, #32
 800836e:	4091      	lsls	r1, r2
 8008370:	fa20 f303 	lsr.w	r3, r0, r3
 8008374:	fa0c fc02 	lsl.w	ip, ip, r2
 8008378:	4319      	orrs	r1, r3
 800837a:	fa00 fe02 	lsl.w	lr, r0, r2
 800837e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008382:	fa1f f68c 	uxth.w	r6, ip
 8008386:	fbb1 f4f7 	udiv	r4, r1, r7
 800838a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800838e:	fb07 1114 	mls	r1, r7, r4, r1
 8008392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008396:	fb04 f106 	mul.w	r1, r4, r6
 800839a:	4299      	cmp	r1, r3
 800839c:	d90a      	bls.n	80083b4 <__udivmoddi4+0x64>
 800839e:	eb1c 0303 	adds.w	r3, ip, r3
 80083a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80083a6:	f080 8112 	bcs.w	80085ce <__udivmoddi4+0x27e>
 80083aa:	4299      	cmp	r1, r3
 80083ac:	f240 810f 	bls.w	80085ce <__udivmoddi4+0x27e>
 80083b0:	3c02      	subs	r4, #2
 80083b2:	4463      	add	r3, ip
 80083b4:	1a59      	subs	r1, r3, r1
 80083b6:	fa1f f38e 	uxth.w	r3, lr
 80083ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80083be:	fb07 1110 	mls	r1, r7, r0, r1
 80083c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80083c6:	fb00 f606 	mul.w	r6, r0, r6
 80083ca:	429e      	cmp	r6, r3
 80083cc:	d90a      	bls.n	80083e4 <__udivmoddi4+0x94>
 80083ce:	eb1c 0303 	adds.w	r3, ip, r3
 80083d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80083d6:	f080 80fc 	bcs.w	80085d2 <__udivmoddi4+0x282>
 80083da:	429e      	cmp	r6, r3
 80083dc:	f240 80f9 	bls.w	80085d2 <__udivmoddi4+0x282>
 80083e0:	4463      	add	r3, ip
 80083e2:	3802      	subs	r0, #2
 80083e4:	1b9b      	subs	r3, r3, r6
 80083e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80083ea:	2100      	movs	r1, #0
 80083ec:	b11d      	cbz	r5, 80083f6 <__udivmoddi4+0xa6>
 80083ee:	40d3      	lsrs	r3, r2
 80083f0:	2200      	movs	r2, #0
 80083f2:	e9c5 3200 	strd	r3, r2, [r5]
 80083f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fa:	428b      	cmp	r3, r1
 80083fc:	d905      	bls.n	800840a <__udivmoddi4+0xba>
 80083fe:	b10d      	cbz	r5, 8008404 <__udivmoddi4+0xb4>
 8008400:	e9c5 0100 	strd	r0, r1, [r5]
 8008404:	2100      	movs	r1, #0
 8008406:	4608      	mov	r0, r1
 8008408:	e7f5      	b.n	80083f6 <__udivmoddi4+0xa6>
 800840a:	fab3 f183 	clz	r1, r3
 800840e:	2900      	cmp	r1, #0
 8008410:	d146      	bne.n	80084a0 <__udivmoddi4+0x150>
 8008412:	42a3      	cmp	r3, r4
 8008414:	d302      	bcc.n	800841c <__udivmoddi4+0xcc>
 8008416:	4290      	cmp	r0, r2
 8008418:	f0c0 80f0 	bcc.w	80085fc <__udivmoddi4+0x2ac>
 800841c:	1a86      	subs	r6, r0, r2
 800841e:	eb64 0303 	sbc.w	r3, r4, r3
 8008422:	2001      	movs	r0, #1
 8008424:	2d00      	cmp	r5, #0
 8008426:	d0e6      	beq.n	80083f6 <__udivmoddi4+0xa6>
 8008428:	e9c5 6300 	strd	r6, r3, [r5]
 800842c:	e7e3      	b.n	80083f6 <__udivmoddi4+0xa6>
 800842e:	2a00      	cmp	r2, #0
 8008430:	f040 8090 	bne.w	8008554 <__udivmoddi4+0x204>
 8008434:	eba1 040c 	sub.w	r4, r1, ip
 8008438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800843c:	fa1f f78c 	uxth.w	r7, ip
 8008440:	2101      	movs	r1, #1
 8008442:	fbb4 f6f8 	udiv	r6, r4, r8
 8008446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800844a:	fb08 4416 	mls	r4, r8, r6, r4
 800844e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008452:	fb07 f006 	mul.w	r0, r7, r6
 8008456:	4298      	cmp	r0, r3
 8008458:	d908      	bls.n	800846c <__udivmoddi4+0x11c>
 800845a:	eb1c 0303 	adds.w	r3, ip, r3
 800845e:	f106 34ff 	add.w	r4, r6, #4294967295
 8008462:	d202      	bcs.n	800846a <__udivmoddi4+0x11a>
 8008464:	4298      	cmp	r0, r3
 8008466:	f200 80cd 	bhi.w	8008604 <__udivmoddi4+0x2b4>
 800846a:	4626      	mov	r6, r4
 800846c:	1a1c      	subs	r4, r3, r0
 800846e:	fa1f f38e 	uxth.w	r3, lr
 8008472:	fbb4 f0f8 	udiv	r0, r4, r8
 8008476:	fb08 4410 	mls	r4, r8, r0, r4
 800847a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800847e:	fb00 f707 	mul.w	r7, r0, r7
 8008482:	429f      	cmp	r7, r3
 8008484:	d908      	bls.n	8008498 <__udivmoddi4+0x148>
 8008486:	eb1c 0303 	adds.w	r3, ip, r3
 800848a:	f100 34ff 	add.w	r4, r0, #4294967295
 800848e:	d202      	bcs.n	8008496 <__udivmoddi4+0x146>
 8008490:	429f      	cmp	r7, r3
 8008492:	f200 80b0 	bhi.w	80085f6 <__udivmoddi4+0x2a6>
 8008496:	4620      	mov	r0, r4
 8008498:	1bdb      	subs	r3, r3, r7
 800849a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800849e:	e7a5      	b.n	80083ec <__udivmoddi4+0x9c>
 80084a0:	f1c1 0620 	rsb	r6, r1, #32
 80084a4:	408b      	lsls	r3, r1
 80084a6:	fa22 f706 	lsr.w	r7, r2, r6
 80084aa:	431f      	orrs	r7, r3
 80084ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80084b0:	fa04 f301 	lsl.w	r3, r4, r1
 80084b4:	ea43 030c 	orr.w	r3, r3, ip
 80084b8:	40f4      	lsrs	r4, r6
 80084ba:	fa00 f801 	lsl.w	r8, r0, r1
 80084be:	0c38      	lsrs	r0, r7, #16
 80084c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80084c4:	fbb4 fef0 	udiv	lr, r4, r0
 80084c8:	fa1f fc87 	uxth.w	ip, r7
 80084cc:	fb00 441e 	mls	r4, r0, lr, r4
 80084d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80084d4:	fb0e f90c 	mul.w	r9, lr, ip
 80084d8:	45a1      	cmp	r9, r4
 80084da:	fa02 f201 	lsl.w	r2, r2, r1
 80084de:	d90a      	bls.n	80084f6 <__udivmoddi4+0x1a6>
 80084e0:	193c      	adds	r4, r7, r4
 80084e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80084e6:	f080 8084 	bcs.w	80085f2 <__udivmoddi4+0x2a2>
 80084ea:	45a1      	cmp	r9, r4
 80084ec:	f240 8081 	bls.w	80085f2 <__udivmoddi4+0x2a2>
 80084f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80084f4:	443c      	add	r4, r7
 80084f6:	eba4 0409 	sub.w	r4, r4, r9
 80084fa:	fa1f f983 	uxth.w	r9, r3
 80084fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8008502:	fb00 4413 	mls	r4, r0, r3, r4
 8008506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800850a:	fb03 fc0c 	mul.w	ip, r3, ip
 800850e:	45a4      	cmp	ip, r4
 8008510:	d907      	bls.n	8008522 <__udivmoddi4+0x1d2>
 8008512:	193c      	adds	r4, r7, r4
 8008514:	f103 30ff 	add.w	r0, r3, #4294967295
 8008518:	d267      	bcs.n	80085ea <__udivmoddi4+0x29a>
 800851a:	45a4      	cmp	ip, r4
 800851c:	d965      	bls.n	80085ea <__udivmoddi4+0x29a>
 800851e:	3b02      	subs	r3, #2
 8008520:	443c      	add	r4, r7
 8008522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008526:	fba0 9302 	umull	r9, r3, r0, r2
 800852a:	eba4 040c 	sub.w	r4, r4, ip
 800852e:	429c      	cmp	r4, r3
 8008530:	46ce      	mov	lr, r9
 8008532:	469c      	mov	ip, r3
 8008534:	d351      	bcc.n	80085da <__udivmoddi4+0x28a>
 8008536:	d04e      	beq.n	80085d6 <__udivmoddi4+0x286>
 8008538:	b155      	cbz	r5, 8008550 <__udivmoddi4+0x200>
 800853a:	ebb8 030e 	subs.w	r3, r8, lr
 800853e:	eb64 040c 	sbc.w	r4, r4, ip
 8008542:	fa04 f606 	lsl.w	r6, r4, r6
 8008546:	40cb      	lsrs	r3, r1
 8008548:	431e      	orrs	r6, r3
 800854a:	40cc      	lsrs	r4, r1
 800854c:	e9c5 6400 	strd	r6, r4, [r5]
 8008550:	2100      	movs	r1, #0
 8008552:	e750      	b.n	80083f6 <__udivmoddi4+0xa6>
 8008554:	f1c2 0320 	rsb	r3, r2, #32
 8008558:	fa20 f103 	lsr.w	r1, r0, r3
 800855c:	fa0c fc02 	lsl.w	ip, ip, r2
 8008560:	fa24 f303 	lsr.w	r3, r4, r3
 8008564:	4094      	lsls	r4, r2
 8008566:	430c      	orrs	r4, r1
 8008568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800856c:	fa00 fe02 	lsl.w	lr, r0, r2
 8008570:	fa1f f78c 	uxth.w	r7, ip
 8008574:	fbb3 f0f8 	udiv	r0, r3, r8
 8008578:	fb08 3110 	mls	r1, r8, r0, r3
 800857c:	0c23      	lsrs	r3, r4, #16
 800857e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008582:	fb00 f107 	mul.w	r1, r0, r7
 8008586:	4299      	cmp	r1, r3
 8008588:	d908      	bls.n	800859c <__udivmoddi4+0x24c>
 800858a:	eb1c 0303 	adds.w	r3, ip, r3
 800858e:	f100 36ff 	add.w	r6, r0, #4294967295
 8008592:	d22c      	bcs.n	80085ee <__udivmoddi4+0x29e>
 8008594:	4299      	cmp	r1, r3
 8008596:	d92a      	bls.n	80085ee <__udivmoddi4+0x29e>
 8008598:	3802      	subs	r0, #2
 800859a:	4463      	add	r3, ip
 800859c:	1a5b      	subs	r3, r3, r1
 800859e:	b2a4      	uxth	r4, r4
 80085a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80085a4:	fb08 3311 	mls	r3, r8, r1, r3
 80085a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80085ac:	fb01 f307 	mul.w	r3, r1, r7
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d908      	bls.n	80085c6 <__udivmoddi4+0x276>
 80085b4:	eb1c 0404 	adds.w	r4, ip, r4
 80085b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80085bc:	d213      	bcs.n	80085e6 <__udivmoddi4+0x296>
 80085be:	42a3      	cmp	r3, r4
 80085c0:	d911      	bls.n	80085e6 <__udivmoddi4+0x296>
 80085c2:	3902      	subs	r1, #2
 80085c4:	4464      	add	r4, ip
 80085c6:	1ae4      	subs	r4, r4, r3
 80085c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085cc:	e739      	b.n	8008442 <__udivmoddi4+0xf2>
 80085ce:	4604      	mov	r4, r0
 80085d0:	e6f0      	b.n	80083b4 <__udivmoddi4+0x64>
 80085d2:	4608      	mov	r0, r1
 80085d4:	e706      	b.n	80083e4 <__udivmoddi4+0x94>
 80085d6:	45c8      	cmp	r8, r9
 80085d8:	d2ae      	bcs.n	8008538 <__udivmoddi4+0x1e8>
 80085da:	ebb9 0e02 	subs.w	lr, r9, r2
 80085de:	eb63 0c07 	sbc.w	ip, r3, r7
 80085e2:	3801      	subs	r0, #1
 80085e4:	e7a8      	b.n	8008538 <__udivmoddi4+0x1e8>
 80085e6:	4631      	mov	r1, r6
 80085e8:	e7ed      	b.n	80085c6 <__udivmoddi4+0x276>
 80085ea:	4603      	mov	r3, r0
 80085ec:	e799      	b.n	8008522 <__udivmoddi4+0x1d2>
 80085ee:	4630      	mov	r0, r6
 80085f0:	e7d4      	b.n	800859c <__udivmoddi4+0x24c>
 80085f2:	46d6      	mov	lr, sl
 80085f4:	e77f      	b.n	80084f6 <__udivmoddi4+0x1a6>
 80085f6:	4463      	add	r3, ip
 80085f8:	3802      	subs	r0, #2
 80085fa:	e74d      	b.n	8008498 <__udivmoddi4+0x148>
 80085fc:	4606      	mov	r6, r0
 80085fe:	4623      	mov	r3, r4
 8008600:	4608      	mov	r0, r1
 8008602:	e70f      	b.n	8008424 <__udivmoddi4+0xd4>
 8008604:	3e02      	subs	r6, #2
 8008606:	4463      	add	r3, ip
 8008608:	e730      	b.n	800846c <__udivmoddi4+0x11c>
 800860a:	bf00      	nop

0800860c <_init>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr

08008618 <_fini>:
 8008618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861a:	bf00      	nop
 800861c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861e:	bc08      	pop	{r3}
 8008620:	469e      	mov	lr, r3
 8008622:	4770      	bx	lr
