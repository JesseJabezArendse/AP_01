
build/debug/IKS02A1_LP_Accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007788  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800791c  0800791c  0000891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  08007980  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000090d4  2**0
                  CONTENTS
  7 .bss          000005f4  200000d4  200000d4  000090d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006c8  200006c8  000090d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY
 10 .comment      00000039  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004510b  00000000  00000000  0000913d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004d0a  00000000  00000000  0004e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0001bb03  00000000  00000000  00052f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028f8  00000000  00000000  0006ea58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020f2  00000000  00000000  00071350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c4a0  00000000  00000000  00073442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0001067e  00000000  00000000  0009f8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008810  00000000  00000000  000aff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  000b8770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000d4 	.word	0x200000d4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007904 	.word	0x08007904

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d8 	.word	0x200000d8
 80001d0:	08007904 	.word	0x08007904

080001d4 <getTemperature>:
float_t temperature;

// Functions /////////////////////////////////////////////


void getTemperature(){
 80001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001d6:	b085      	sub	sp, #20
    HAL_I2C_Mem_Read(&hi2c1 , IIS2DLPC_I2C_ADD_H , IIS2DLPC_OUT_T_L , 1 , &temperature_raw_l , 1 , HAL_MAX_DELAY);
 80001d8:	4f11      	ldr	r7, [pc, #68]	@ (8000220 <getTemperature+0x4c>)
 80001da:	f04f 36ff 	mov.w	r6, #4294967295
 80001de:	9602      	str	r6, [sp, #8]
 80001e0:	2401      	movs	r4, #1
 80001e2:	9401      	str	r4, [sp, #4]
 80001e4:	4d0f      	ldr	r5, [pc, #60]	@ (8000224 <getTemperature+0x50>)
 80001e6:	9500      	str	r5, [sp, #0]
 80001e8:	4623      	mov	r3, r4
 80001ea:	220d      	movs	r2, #13
 80001ec:	2133      	movs	r1, #51	@ 0x33
 80001ee:	4638      	mov	r0, r7
 80001f0:	f003 fea0 	bl	8003f34 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1 , IIS2DLPC_I2C_ADD_H , IIS2DLPC_OUT_T_H , 1 , &temperature_raw_h , 1 , HAL_MAX_DELAY);
 80001f4:	9602      	str	r6, [sp, #8]
 80001f6:	9401      	str	r4, [sp, #4]
 80001f8:	4e0b      	ldr	r6, [pc, #44]	@ (8000228 <getTemperature+0x54>)
 80001fa:	9600      	str	r6, [sp, #0]
 80001fc:	4623      	mov	r3, r4
 80001fe:	220e      	movs	r2, #14
 8000200:	2133      	movs	r1, #51	@ 0x33
 8000202:	4638      	mov	r0, r7
 8000204:	f003 fe96 	bl	8003f34 <HAL_I2C_Mem_Read>
    int16_t rawTemp = (int16_t)((temperature_raw_h << 8) | temperature_raw_l); // Combine low and high bytes
 8000208:	7833      	ldrb	r3, [r6, #0]
 800020a:	021b      	lsls	r3, r3, #8
 800020c:	b21b      	sxth	r3, r3
 800020e:	7828      	ldrb	r0, [r5, #0]
    temperature = iis2dlpc_from_lsb_to_celsius(rawTemp);
 8000210:	4318      	orrs	r0, r3
 8000212:	f000 fcf5 	bl	8000c00 <iis2dlpc_from_lsb_to_celsius>
 8000216:	4b05      	ldr	r3, [pc, #20]	@ (800022c <getTemperature+0x58>)
 8000218:	ed83 0a00 	vstr	s0, [r3]
}
 800021c:	b005      	add	sp, #20
 800021e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000220:	20000674 	.word	0x20000674
 8000224:	200000f5 	.word	0x200000f5
 8000228:	200000f4 	.word	0x200000f4
 800022c:	200000f0 	.word	0x200000f0

08000230 <bytesToFloat>:

float bytesToFloat(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4) {
 8000230:	b082      	sub	sp, #8
    float result;
    uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 8000232:	f88d 0004 	strb.w	r0, [sp, #4]
 8000236:	f88d 1005 	strb.w	r1, [sp, #5]
 800023a:	f88d 2006 	strb.w	r2, [sp, #6]
 800023e:	f88d 3007 	strb.w	r3, [sp, #7]

    // Use memcpy to copy the 4 bytes into a float (this preserves the binary representation)
    memcpy(&result, bytes, sizeof(float));

    return result;
}
 8000242:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000246:	b002      	add	sp, #8
 8000248:	4770      	bx	lr

0800024a <bytesToInt32>:

int32_t bytesToInt32(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4)  {
 800024a:	b082      	sub	sp, #8
    int32_t result;
    uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 800024c:	f88d 0004 	strb.w	r0, [sp, #4]
 8000250:	f88d 1005 	strb.w	r1, [sp, #5]
 8000254:	f88d 2006 	strb.w	r2, [sp, #6]
 8000258:	f88d 3007 	strb.w	r3, [sp, #7]

    // Use memcpy to copy the 4 bytes into a int32_t (this preserves the binary representation)
    memcpy(&result, bytes, sizeof(int32_t));

    return result;
}
 800025c:	9801      	ldr	r0, [sp, #4]
 800025e:	b002      	add	sp, #8
 8000260:	4770      	bx	lr

08000262 <initIKS02A1>:

void initIKS02A1(){
 8000262:	b508      	push	{r3, lr}

//   IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8000264:	2102      	movs	r1, #2
 8000266:	2001      	movs	r0, #1
 8000268:	f001 fab4 	bl	80017d4 <IKS02A1_MOTION_SENSOR_Init>
  
//   IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);

}
 800026c:	bd08      	pop	{r3, pc}
	...

08000270 <getIKS02A1>:

void getIKS02A1(){
 8000270:	b508      	push	{r3, lr}
    // while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO , &accel1_axis) != BSP_ERROR_NONE){}
    // while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_ISM330DHCX_0, MOTION_GYRO     , &gyro_axis  ) != BSP_ERROR_NONE){}
    while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_IIS2DLPC_0,   MOTION_ACCELERO , &accel2_axis) != BSP_ERROR_NONE){}
 8000272:	4a05      	ldr	r2, [pc, #20]	@ (8000288 <getIKS02A1+0x18>)
 8000274:	2102      	movs	r1, #2
 8000276:	2001      	movs	r0, #1
 8000278:	f001 fb6c 	bl	8001954 <IKS02A1_MOTION_SENSOR_GetAxes>
 800027c:	2800      	cmp	r0, #0
 800027e:	d1f8      	bne.n	8000272 <getIKS02A1+0x2>
    // while (IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_IIS2MDC_0,    MOTION_MAGNETO  , &mag_axis   ) != BSP_ERROR_NONE){}

    getTemperature();
 8000280:	f7ff ffa8 	bl	80001d4 <getTemperature>
}
 8000284:	bd08      	pop	{r3, pc}
 8000286:	bf00      	nop
 8000288:	20000208 	.word	0x20000208

0800028c <receivedFromSimulink>:

void receivedFromSimulink(uint8_t* bigBuffer){
 800028c:	b538      	push	{r3, r4, r5, lr}
 800028e:	4604      	mov	r4, r0
    accel2_fsr = bytesToInt32(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuffer[3  + 3] );
 8000290:	7983      	ldrb	r3, [r0, #6]
 8000292:	7942      	ldrb	r2, [r0, #5]
 8000294:	7901      	ldrb	r1, [r0, #4]
 8000296:	78c0      	ldrb	r0, [r0, #3]
 8000298:	f7ff ffd7 	bl	800024a <bytesToInt32>
 800029c:	4605      	mov	r5, r0
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <receivedFromSimulink+0x40>)
 80002a0:	6018      	str	r0, [r3, #0]
    accel2_odr = bytesToFloat(bigBuffer[7  + 0] , bigBuffer[7  + 1] , bigBuffer[7  + 2] ,  bigBuffer[7  + 3] );
 80002a2:	7aa3      	ldrb	r3, [r4, #10]
 80002a4:	7a62      	ldrb	r2, [r4, #9]
 80002a6:	7a21      	ldrb	r1, [r4, #8]
 80002a8:	79e0      	ldrb	r0, [r4, #7]
 80002aa:	f7ff ffc1 	bl	8000230 <bytesToFloat>
 80002ae:	4c08      	ldr	r4, [pc, #32]	@ (80002d0 <receivedFromSimulink+0x44>)
 80002b0:	ed84 0a00 	vstr	s0, [r4]

    // Accel2
    int32_t ret;
    ret = IKS02A1_MOTION_SENSOR_SetFullScale      (INSTANCE_IIS2DLPC,MOTION_ACCELERO,accel2_fsr);
 80002b4:	462a      	mov	r2, r5
 80002b6:	2102      	movs	r1, #2
 80002b8:	2001      	movs	r0, #1
 80002ba:	f001 fba1 	bl	8001a00 <IKS02A1_MOTION_SENSOR_SetFullScale>
    ret = IKS02A1_MOTION_SENSOR_SetOutputDataRate (INSTANCE_IIS2DLPC,MOTION_ACCELERO,accel2_odr);
 80002be:	ed94 0a00 	vldr	s0, [r4]
 80002c2:	2102      	movs	r1, #2
 80002c4:	2001      	movs	r0, #1
 80002c6:	f001 fb71 	bl	80019ac <IKS02A1_MOTION_SENSOR_SetOutputDataRate>
}
 80002ca:	bd38      	pop	{r3, r4, r5, pc}
 80002cc:	200000fc 	.word	0x200000fc
 80002d0:	200000f8 	.word	0x200000f8

080002d4 <sendToSimulink>:

void sendToSimulink(){
 80002d4:	b538      	push	{r3, r4, r5, lr}

    HAL_UART_Transmit(&huart3, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 80002d6:	4c1a      	ldr	r4, [pc, #104]	@ (8000340 <sendToSimulink+0x6c>)
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	2203      	movs	r2, #3
 80002de:	4919      	ldr	r1, [pc, #100]	@ (8000344 <sendToSimulink+0x70>)
 80002e0:	4620      	mov	r0, r4
 80002e2:	f006 fb87 	bl	80069f4 <HAL_UART_Transmit>
    // HAL_UART_Transmit(&huart3, (int32_t *) &accel1_axis.y    ,4 , HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (int32_t *) &accel1_axis.z    ,4 , HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (int32_t *) &gyro_axis.x      ,4 , HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (int32_t *) &gyro_axis.y      ,4 , HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (int32_t *) &gyro_axis.z      ,4 , HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, (int32_t *) &accel2_axis.x    ,4 , HAL_MAX_DELAY);
 80002e6:	4d18      	ldr	r5, [pc, #96]	@ (8000348 <sendToSimulink+0x74>)
 80002e8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ec:	2204      	movs	r2, #4
 80002ee:	4629      	mov	r1, r5
 80002f0:	4620      	mov	r0, r4
 80002f2:	f006 fb7f 	bl	80069f4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (int32_t *) &accel2_axis.y    ,4 , HAL_MAX_DELAY);
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
 80002fa:	2204      	movs	r2, #4
 80002fc:	18a9      	adds	r1, r5, r2
 80002fe:	4620      	mov	r0, r4
 8000300:	f006 fb78 	bl	80069f4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (int32_t *) &accel2_axis.z    ,4 , HAL_MAX_DELAY);
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	2204      	movs	r2, #4
 800030a:	f105 0108 	add.w	r1, r5, #8
 800030e:	4620      	mov	r0, r4
 8000310:	f006 fb70 	bl	80069f4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (float_t *) &temperature      ,4 , HAL_MAX_DELAY);
 8000314:	f04f 33ff 	mov.w	r3, #4294967295
 8000318:	2204      	movs	r2, #4
 800031a:	490c      	ldr	r1, [pc, #48]	@ (800034c <sendToSimulink+0x78>)
 800031c:	4620      	mov	r0, r4
 800031e:	f006 fb69 	bl	80069f4 <HAL_UART_Transmit>
    // HAL_UART_Transmit(&huart3, (int32_t *) &mag_axis.x       ,4 , HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (int32_t *) &mag_axis.y       ,4 , HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (int32_t *) &mag_axis.z       ,4 , HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, (int32_t *) &counter          ,4 , HAL_MAX_DELAY);
 8000322:	f04f 33ff 	mov.w	r3, #4294967295
 8000326:	2204      	movs	r2, #4
 8000328:	4909      	ldr	r1, [pc, #36]	@ (8000350 <sendToSimulink+0x7c>)
 800032a:	4620      	mov	r0, r4
 800032c:	f006 fb62 	bl	80069f4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 8000330:	f04f 33ff 	mov.w	r3, #4294967295
 8000334:	2203      	movs	r2, #3
 8000336:	4907      	ldr	r1, [pc, #28]	@ (8000354 <sendToSimulink+0x80>)
 8000338:	4620      	mov	r0, r4
 800033a:	f006 fb5b 	bl	80069f4 <HAL_UART_Transmit>
}
 800033e:	bd38      	pop	{r3, r4, r5, pc}
 8000340:	2000052c 	.word	0x2000052c
 8000344:	20000004 	.word	0x20000004
 8000348:	20000208 	.word	0x20000208
 800034c:	200000f0 	.word	0x200000f0
 8000350:	200001f0 	.word	0x200001f0
 8000354:	20000000 	.word	0x20000000

08000358 <IIS2DLPC_GetCapabilities>:
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000358:	2301      	movs	r3, #1
 800035a:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 800035c:	2000      	movs	r0, #0
 800035e:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8000360:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8000362:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8000364:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8000366:	2310      	movs	r3, #16
 8000368:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800036a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800036c:	2300      	movs	r3, #0
 800036e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8000370:	4a01      	ldr	r2, [pc, #4]	@ (8000378 <IIS2DLPC_GetCapabilities+0x20>)
 8000372:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8000374:	618b      	str	r3, [r1, #24]
  return IIS2DLPC_OK;
}
 8000376:	4770      	bx	lr
 8000378:	44c80000 	.word	0x44c80000

0800037c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                            IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800037c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8000380:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8000384:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8000420 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8000388:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000390:	d933      	bls.n	80003fa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7e>
                  : (Odr <=   25.0f) ?   25.0f
 8000392:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8000396:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800039a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800039e:	d930      	bls.n	8000402 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x86>
                  : (Odr <=   50.0f) ?   50.0f
 80003a0:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80003a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80003a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ac:	d92b      	bls.n	8000406 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x8a>
                  : (Odr <=  100.0f) ?  100.0f
 80003ae:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8000424 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80003b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80003b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ba:	d926      	bls.n	800040a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x8e>
                  : (Odr <=  200.0f) ?  200.0f
 80003bc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8000428 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xac>
 80003c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80003c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c8:	d921      	bls.n	800040e <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
                  : (Odr <=  400.0f) ?  400.0f
 80003ca:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800042c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80003ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80003d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d6:	d91c      	bls.n	8000412 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x96>
                  : (Odr <=  800.0f) ?  800.0f
 80003d8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8000430 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xb4>
 80003dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80003e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e4:	d917      	bls.n	8000416 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x9a>
                  :                    1600.0f;
 80003e6:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8000434 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xb8>
 80003ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80003ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f2:	d812      	bhi.n	800041a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x9e>
 80003f4:	ee17 3a90 	vmov	r3, s15
 80003f8:	e000      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   12.5f) ?   12.5f
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80003fc:	6343      	str	r3, [r0, #52]	@ 0x34

  return IIS2DLPC_OK;
}
 80003fe:	2000      	movs	r0, #0
 8000400:	4770      	bx	lr
                  : (Odr <=   25.0f) ?   25.0f
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8000404:	e7fa      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   50.0f) ?   50.0f
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8000408:	e7f8      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  100.0f) ?  100.0f
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 800040c:	e7f6      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  200.0f) ?  200.0f
 800040e:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8000410:	e7f4      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  400.0f) ?  400.0f
 8000412:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8000414:	e7f2      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  800.0f) ?  800.0f
 8000416:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8000418:	e7f0      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
                  :                    1600.0f;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 800041c:	e7ee      	b.n	80003fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x80>
 800041e:	bf00      	nop
 8000420:	3fcccccd 	.word	0x3fcccccd
 8000424:	42480000 	.word	0x42480000
 8000428:	42c80000 	.word	0x42c80000
 800042c:	43480000 	.word	0x43480000
 8000430:	43c80000 	.word	0x43c80000
 8000434:	44480000 	.word	0x44480000
 8000438:	3fcccccd 	.word	0x3fcccccd
 800043c:	41480000 	.word	0x41480000
 8000440:	41c80000 	.word	0x41c80000
 8000444:	42480000 	.word	0x42480000
 8000448:	42c80000 	.word	0x42c80000
 800044c:	43480000 	.word	0x43480000
 8000450:	43c80000 	.word	0x43c80000
 8000454:	44c80000 	.word	0x44c80000

08000458 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000458:	b510      	push	{r4, lr}
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800045a:	6944      	ldr	r4, [r0, #20]
 800045c:	7b00      	ldrb	r0, [r0, #12]
 800045e:	47a0      	blx	r4
}
 8000460:	bd10      	pop	{r4, pc}

08000462 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000462:	b510      	push	{r4, lr}
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000464:	6904      	ldr	r4, [r0, #16]
 8000466:	7b00      	ldrb	r0, [r0, #12]
 8000468:	47a0      	blx	r4
}
 800046a:	bd10      	pop	{r4, pc}

0800046c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
{
 800046c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000470:	ed2d 8b02 	vpush	{d8}
 8000474:	4604      	mov	r4, r0
 8000476:	eeb0 8a40 	vmov.f32	s16, s0
 800047a:	460d      	mov	r5, r1
 800047c:	4616      	mov	r6, r2
  switch (Mode)
 800047e:	1e4b      	subs	r3, r1, #1
 8000480:	2b03      	cmp	r3, #3
 8000482:	d803      	bhi.n	800048c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x20>
 8000484:	e8df f003 	tbb	[pc, r3]
 8000488:	7c6b5b13 	.word	0x7c6b5b13
      switch (Noise)
 800048c:	2e01      	cmp	r6, #1
 800048e:	d00b      	beq.n	80004a8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x3c>
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 8000490:	f04f 0804 	mov.w	r8, #4
      if (Odr < 12.5f)
 8000494:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8000498:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800049c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a0:	d510      	bpl.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 12.5f;
 80004a2:	eeb2 8a09 	vmov.f32	s16, #41	@ 0x41480000  12.5
 80004a6:	e00d      	b.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 80004a8:	f04f 0814 	mov.w	r8, #20
 80004ac:	e7f2      	b.n	8000494 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x28>
      switch (Noise)
 80004ae:	2e01      	cmp	r6, #1
 80004b0:	d042      	beq.n	8000538 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xcc>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 80004b2:	f04f 0803 	mov.w	r8, #3
      if (Odr > 200.0f)
 80004b6:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 80004ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80004be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004c2:	dc6e      	bgt.n	80005a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x136>
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 80004c4:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8000600 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 80004c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80004cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d0:	d96a      	bls.n	80005a8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80004d2:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 80004d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80004da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004de:	d979      	bls.n	80005d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 80004e0:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80004e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80004e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ec:	d974      	bls.n	80005d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x16c>
 80004ee:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8000604 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x198>
 80004f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80004f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004fa:	d96f      	bls.n	80005dc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x170>
 80004fc:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8000608 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x19c>
 8000500:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000508:	d96a      	bls.n	80005e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x174>
 800050a:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800050e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000516:	d965      	bls.n	80005e4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x178>
 8000518:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 800060c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 800051c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000524:	d960      	bls.n	80005e8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17c>
 8000526:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8000610 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1a4>
 800052a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000532:	d85b      	bhi.n	80005ec <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x180>
 8000534:	2108      	movs	r1, #8
 8000536:	e038      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8000538:	f04f 0813 	mov.w	r8, #19
 800053c:	e7bb      	b.n	80004b6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x4a>
      switch (Noise)
 800053e:	2e01      	cmp	r6, #1
 8000540:	d00a      	beq.n	8000558 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xec>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 8000542:	4688      	mov	r8, r1
      if (Odr > 200.0f)
 8000544:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 8000548:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800054c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000550:	ddb8      	ble.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8000552:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 8000556:	e7b5      	b.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8000558:	f04f 0812 	mov.w	r8, #18
 800055c:	e7f2      	b.n	8000544 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xd8>
      switch (Noise)
 800055e:	2e01      	cmp	r6, #1
 8000560:	d00b      	beq.n	800057a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8000562:	f04f 0801 	mov.w	r8, #1
      if (Odr > 200.0f)
 8000566:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800056a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000572:	dda7      	ble.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8000574:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 8000578:	e7a4      	b.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 800057a:	f04f 0811 	mov.w	r8, #17
 800057e:	e7f2      	b.n	8000566 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xfa>
      switch (Noise)
 8000580:	2e01      	cmp	r6, #1
 8000582:	d00b      	beq.n	800059c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x130>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 8000584:	f04f 0800 	mov.w	r8, #0
      if (Odr > 200.0f)
 8000588:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800058c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000594:	dd96      	ble.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8000596:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 800059a:	e793      	b.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 800059c:	f04f 0810 	mov.w	r8, #16
 80005a0:	e7f2      	b.n	8000588 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x11c>
        Odr = 200.0f;
 80005a2:	ed9f 8a16 	vldr	s16, [pc, #88]	@ 80005fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x190>
 80005a6:	e78d      	b.n	80004c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x58>
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 80005a8:	2101      	movs	r1, #1
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 80005aa:	f104 0720 	add.w	r7, r4, #32
 80005ae:	4638      	mov	r0, r7
 80005b0:	f000 fbdd 	bl	8000d6e <iis2dlpc_data_rate_set>
 80005b4:	b9e0      	cbnz	r0, 80005f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x184>
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 80005b6:	4641      	mov	r1, r8
 80005b8:	4638      	mov	r0, r7
 80005ba:	f000 fb31 	bl	8000c20 <iis2dlpc_power_mode_set>
 80005be:	b9d0      	cbnz	r0, 80005f6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x18a>
  pObj->acc_odr = Odr;
 80005c0:	ed84 8a0d 	vstr	s16, [r4, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 80005c4:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80005c8:	f884 6039 	strb.w	r6, [r4, #57]	@ 0x39
}
 80005cc:	ecbd 8b02 	vpop	{d8}
 80005d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 80005d4:	2102      	movs	r1, #2
 80005d6:	e7e8      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80005d8:	2103      	movs	r1, #3
 80005da:	e7e6      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80005dc:	2104      	movs	r1, #4
 80005de:	e7e4      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80005e0:	2105      	movs	r1, #5
 80005e2:	e7e2      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80005e4:	2106      	movs	r1, #6
 80005e6:	e7e0      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80005e8:	2107      	movs	r1, #7
 80005ea:	e7de      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
 80005ec:	2109      	movs	r1, #9
 80005ee:	e7dc      	b.n	80005aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13e>
    return IIS2DLPC_ERROR;
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
 80005f4:	e7ea      	b.n	80005cc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x160>
    return IIS2DLPC_ERROR;
 80005f6:	f04f 30ff 	mov.w	r0, #4294967295
 80005fa:	e7e7      	b.n	80005cc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x160>
 80005fc:	43480000 	.word	0x43480000
 8000600:	3fcccccd 	.word	0x3fcccccd
 8000604:	42480000 	.word	0x42480000
 8000608:	42c80000 	.word	0x42c80000
 800060c:	43c80000 	.word	0x43c80000
 8000610:	44480000 	.word	0x44480000

08000614 <IIS2DLPC_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8000614:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8000618:	2b01      	cmp	r3, #1
 800061a:	d00e      	beq.n	800063a <IIS2DLPC_ACC_Enable+0x26>
{
 800061c:	b510      	push	{r4, lr}
 800061e:	4604      	mov	r4, r0
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8000620:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8000624:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8000628:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 800062c:	f7ff ff1e 	bl	800046c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8000630:	b928      	cbnz	r0, 800063e <IIS2DLPC_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 8000638:	bd10      	pop	{r4, pc}
    return IIS2DLPC_OK;
 800063a:	2000      	movs	r0, #0
}
 800063c:	4770      	bx	lr
    return IIS2DLPC_ERROR;
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	e7f9      	b.n	8000638 <IIS2DLPC_ACC_Enable+0x24>

08000644 <IIS2DLPC_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8000644:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8000648:	b90b      	cbnz	r3, 800064e <IIS2DLPC_ACC_Disable+0xa>
    return IIS2DLPC_OK;
 800064a:	2000      	movs	r0, #0
}
 800064c:	4770      	bx	lr
{
 800064e:	b510      	push	{r4, lr}
 8000650:	4604      	mov	r4, r0
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	3020      	adds	r0, #32
 8000656:	f000 fb8a 	bl	8000d6e <iis2dlpc_data_rate_set>
 800065a:	b910      	cbnz	r0, 8000662 <IIS2DLPC_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 800065c:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
}
 8000660:	bd10      	pop	{r4, pc}
    return IIS2DLPC_ERROR;
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	e7fb      	b.n	8000660 <IIS2DLPC_ACC_Disable+0x1c>

08000668 <IIS2DLPC_DeInit>:
{
 8000668:	b510      	push	{r4, lr}
 800066a:	4604      	mov	r4, r0
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 800066c:	f7ff ffea 	bl	8000644 <IIS2DLPC_ACC_Disable>
 8000670:	b948      	cbnz	r0, 8000686 <IIS2DLPC_DeInit+0x1e>
  pObj->acc_odr = 0.0f;
 8000672:	2300      	movs	r3, #0
 8000674:	6363      	str	r3, [r4, #52]	@ 0x34
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8000676:	2300      	movs	r3, #0
 8000678:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 800067c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  pObj->is_initialized = 0;
 8000680:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8000684:	bd10      	pop	{r4, pc}
    return IIS2DLPC_ERROR;
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	e7fb      	b.n	8000684 <IIS2DLPC_DeInit+0x1c>

0800068c <IIS2DLPC_Init>:
{
 800068c:	b538      	push	{r3, r4, r5, lr}
 800068e:	4604      	mov	r4, r0
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8000690:	f100 0520 	add.w	r5, r0, #32
 8000694:	2101      	movs	r1, #1
 8000696:	4628      	mov	r0, r5
 8000698:	f000 fc74 	bl	8000f84 <iis2dlpc_auto_increment_set>
 800069c:	bb10      	cbnz	r0, 80006e4 <IIS2DLPC_Init+0x58>
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 800069e:	2101      	movs	r1, #1
 80006a0:	4628      	mov	r0, r5
 80006a2:	f000 fbf2 	bl	8000e8a <iis2dlpc_block_data_update_set>
 80006a6:	bb00      	cbnz	r0, 80006ea <IIS2DLPC_Init+0x5e>
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4628      	mov	r0, r5
 80006ac:	f000 fc83 	bl	8000fb6 <iis2dlpc_fifo_mode_set>
 80006b0:	b9f0      	cbnz	r0, 80006f0 <IIS2DLPC_Init+0x64>
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 80006b2:	2104      	movs	r1, #4
 80006b4:	4628      	mov	r0, r5
 80006b6:	f000 fab3 	bl	8000c20 <iis2dlpc_power_mode_set>
 80006ba:	b9e0      	cbnz	r0, 80006f6 <IIS2DLPC_Init+0x6a>
  pObj->acc_odr = 100.0f;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <IIS2DLPC_Init+0x7c>)
 80006be:	6363      	str	r3, [r4, #52]	@ 0x34
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 80006c0:	2100      	movs	r1, #0
 80006c2:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 80006c6:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 80006ca:	4628      	mov	r0, r5
 80006cc:	f000 fb4f 	bl	8000d6e <iis2dlpc_data_rate_set>
 80006d0:	b9a0      	cbnz	r0, 80006fc <IIS2DLPC_Init+0x70>
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4628      	mov	r0, r5
 80006d6:	f000 fbf1 	bl	8000ebc <iis2dlpc_full_scale_set>
 80006da:	b990      	cbnz	r0, 8000702 <IIS2DLPC_Init+0x76>
  pObj->is_initialized = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2DLPC_ERROR;
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	e7fb      	b.n	80006e2 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 80006ea:	f04f 30ff 	mov.w	r0, #4294967295
 80006ee:	e7f8      	b.n	80006e2 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	e7f5      	b.n	80006e2 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 80006f6:	f04f 30ff 	mov.w	r0, #4294967295
 80006fa:	e7f2      	b.n	80006e2 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	e7ef      	b.n	80006e2 <IIS2DLPC_Init+0x56>
    return IIS2DLPC_ERROR;
 8000702:	f04f 30ff 	mov.w	r0, #4294967295
 8000706:	e7ec      	b.n	80006e2 <IIS2DLPC_Init+0x56>
 8000708:	42c80000 	.word	0x42c80000

0800070c <IIS2DLPC_ACC_SetFullScale>:
{
 800070c:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? IIS2DLPC_4g
 800070e:	2902      	cmp	r1, #2
 8000710:	dd05      	ble.n	800071e <IIS2DLPC_ACC_SetFullScale+0x12>
 8000712:	2904      	cmp	r1, #4
 8000714:	dd09      	ble.n	800072a <IIS2DLPC_ACC_SetFullScale+0x1e>
 8000716:	2908      	cmp	r1, #8
 8000718:	dc09      	bgt.n	800072e <IIS2DLPC_ACC_SetFullScale+0x22>
 800071a:	2102      	movs	r1, #2
 800071c:	e000      	b.n	8000720 <IIS2DLPC_ACC_SetFullScale+0x14>
 800071e:	2100      	movs	r1, #0
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 8000720:	3020      	adds	r0, #32
 8000722:	f000 fbcb 	bl	8000ebc <iis2dlpc_full_scale_set>
 8000726:	b920      	cbnz	r0, 8000732 <IIS2DLPC_ACC_SetFullScale+0x26>
}
 8000728:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? IIS2DLPC_4g
 800072a:	2101      	movs	r1, #1
 800072c:	e7f8      	b.n	8000720 <IIS2DLPC_ACC_SetFullScale+0x14>
 800072e:	2103      	movs	r1, #3
 8000730:	e7f6      	b.n	8000720 <IIS2DLPC_ACC_SetFullScale+0x14>
    return IIS2DLPC_ERROR;
 8000732:	f04f 30ff 	mov.w	r0, #4294967295
 8000736:	e7f7      	b.n	8000728 <IIS2DLPC_ACC_SetFullScale+0x1c>

08000738 <IIS2DLPC_ReadID>:
{
 8000738:	b508      	push	{r3, lr}
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 800073a:	3020      	adds	r0, #32
 800073c:	f000 fc1b 	bl	8000f76 <iis2dlpc_device_id_get>
 8000740:	b900      	cbnz	r0, 8000744 <IIS2DLPC_ReadID+0xc>
}
 8000742:	bd08      	pop	{r3, pc}
    return IIS2DLPC_ERROR;
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	e7fb      	b.n	8000742 <IIS2DLPC_ReadID+0xa>

0800074a <IIS2DLPC_ACC_GetFullScale>:
{
 800074a:	b510      	push	{r4, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	460c      	mov	r4, r1
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 8000750:	f10d 0107 	add.w	r1, sp, #7
 8000754:	3020      	adds	r0, #32
 8000756:	f000 fbca 	bl	8000eee <iis2dlpc_full_scale_get>
 800075a:	b9c0      	cbnz	r0, 800078e <IIS2DLPC_ACC_GetFullScale+0x44>
  switch (fs_low_level)
 800075c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d810      	bhi.n	8000786 <IIS2DLPC_ACC_GetFullScale+0x3c>
 8000764:	e8df f003 	tbb	[pc, r3]
 8000768:	0c090602 	.word	0x0c090602
      *FullScale =  2;
 800076c:	2302      	movs	r3, #2
 800076e:	6023      	str	r3, [r4, #0]
}
 8000770:	b002      	add	sp, #8
 8000772:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8000774:	2304      	movs	r3, #4
 8000776:	6023      	str	r3, [r4, #0]
      break;
 8000778:	e7fa      	b.n	8000770 <IIS2DLPC_ACC_GetFullScale+0x26>
      *FullScale =  8;
 800077a:	2308      	movs	r3, #8
 800077c:	6023      	str	r3, [r4, #0]
      break;
 800077e:	e7f7      	b.n	8000770 <IIS2DLPC_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8000780:	2310      	movs	r3, #16
 8000782:	6023      	str	r3, [r4, #0]
      break;
 8000784:	e7f4      	b.n	8000770 <IIS2DLPC_ACC_GetFullScale+0x26>
      *FullScale = -1;
 8000786:	f04f 30ff 	mov.w	r0, #4294967295
 800078a:	6020      	str	r0, [r4, #0]
      break;
 800078c:	e7f0      	b.n	8000770 <IIS2DLPC_ACC_GetFullScale+0x26>
    return IIS2DLPC_ERROR;
 800078e:	f04f 30ff 	mov.w	r0, #4294967295
 8000792:	e7ed      	b.n	8000770 <IIS2DLPC_ACC_GetFullScale+0x26>

08000794 <IIS2DLPC_ACC_GetSensitivity>:
{
 8000794:	b530      	push	{r4, r5, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	460d      	mov	r5, r1
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 800079a:	f100 0420 	add.w	r4, r0, #32
 800079e:	f10d 0107 	add.w	r1, sp, #7
 80007a2:	4620      	mov	r0, r4
 80007a4:	f000 fba3 	bl	8000eee <iis2dlpc_full_scale_get>
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d14c      	bne.n	8000846 <IIS2DLPC_ACC_GetSensitivity+0xb2>
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80007ac:	f10d 0106 	add.w	r1, sp, #6
 80007b0:	4620      	mov	r0, r4
 80007b2:	f000 fa72 	bl	8000c9a <iis2dlpc_power_mode_get>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d148      	bne.n	800084c <IIS2DLPC_ACC_GetSensitivity+0xb8>
  switch (mode)
 80007ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80007be:	2a1b      	cmp	r2, #27
 80007c0:	d809      	bhi.n	80007d6 <IIS2DLPC_ACC_GetSensitivity+0x42>
 80007c2:	2301      	movs	r3, #1
 80007c4:	4093      	lsls	r3, r2
 80007c6:	f003 321e 	and.w	r2, r3, #505290270	@ 0x1e1e1e1e
 80007ca:	f022 2210 	bic.w	r2, r2, #268439552	@ 0x10001000
 80007ce:	bb0a      	cbnz	r2, 8000814 <IIS2DLPC_ACC_GetSensitivity+0x80>
 80007d0:	f013 3f01 	tst.w	r3, #16843009	@ 0x1010101
 80007d4:	d105      	bne.n	80007e2 <IIS2DLPC_ACC_GetSensitivity+0x4e>
      *Sensitivity = -1.0f;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <IIS2DLPC_ACC_GetSensitivity+0xc0>)
 80007d8:	602b      	str	r3, [r5, #0]
      ret = IIS2DLPC_ERROR;
 80007da:	f04f 30ff 	mov.w	r0, #4294967295
}
 80007de:	b003      	add	sp, #12
 80007e0:	bd30      	pop	{r4, r5, pc}
      switch (full_scale)
 80007e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d80f      	bhi.n	800080a <IIS2DLPC_ACC_GetSensitivity+0x76>
 80007ea:	e8df f003 	tbb	[pc, r3]
 80007ee:	0502      	.short	0x0502
 80007f0:	0b08      	.short	0x0b08
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <IIS2DLPC_ACC_GetSensitivity+0xc4>)
 80007f4:	602b      	str	r3, [r5, #0]
          break;
 80007f6:	e7f2      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <IIS2DLPC_ACC_GetSensitivity+0xc8>)
 80007fa:	602b      	str	r3, [r5, #0]
          break;
 80007fc:	e7ef      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <IIS2DLPC_ACC_GetSensitivity+0xcc>)
 8000800:	602b      	str	r3, [r5, #0]
          break;
 8000802:	e7ec      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8000804:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8000806:	602b      	str	r3, [r5, #0]
          break;
 8000808:	e7e9      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = -1.0f;
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <IIS2DLPC_ACC_GetSensitivity+0xc0>)
 800080c:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 800080e:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8000812:	e7e4      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
      switch (full_scale)
 8000814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d80f      	bhi.n	800083c <IIS2DLPC_ACC_GetSensitivity+0xa8>
 800081c:	e8df f003 	tbb	[pc, r3]
 8000820:	0b080502 	.word	0x0b080502
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <IIS2DLPC_ACC_GetSensitivity+0xd4>)
 8000826:	602b      	str	r3, [r5, #0]
          break;
 8000828:	e7d9      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <IIS2DLPC_ACC_GetSensitivity+0xd8>)
 800082c:	602b      	str	r3, [r5, #0]
          break;
 800082e:	e7d6      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <IIS2DLPC_ACC_GetSensitivity+0xc4>)
 8000832:	602b      	str	r3, [r5, #0]
          break;
 8000834:	e7d3      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <IIS2DLPC_ACC_GetSensitivity+0xc8>)
 8000838:	602b      	str	r3, [r5, #0]
          break;
 800083a:	e7d0      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
          *Sensitivity = -1.0f;
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <IIS2DLPC_ACC_GetSensitivity+0xc0>)
 800083e:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8000844:	e7cb      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
    return IIS2DLPC_ERROR;
 8000846:	f04f 30ff 	mov.w	r0, #4294967295
 800084a:	e7c8      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
    return IIS2DLPC_ERROR;
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	e7c5      	b.n	80007de <IIS2DLPC_ACC_GetSensitivity+0x4a>
 8000852:	bf00      	nop
 8000854:	bf800000 	.word	0xbf800000
 8000858:	3f79db23 	.word	0x3f79db23
 800085c:	3ff9db23 	.word	0x3ff9db23
 8000860:	4079db23 	.word	0x4079db23
 8000864:	40f9db23 	.word	0x40f9db23
 8000868:	3e79db23 	.word	0x3e79db23
 800086c:	3ef9db23 	.word	0x3ef9db23

08000870 <IIS2DLPC_ACC_GetOutputDataRate>:
{
 8000870:	b530      	push	{r4, r5, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	460d      	mov	r5, r1
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 8000876:	f100 0420 	add.w	r4, r0, #32
 800087a:	f10d 0107 	add.w	r1, sp, #7
 800087e:	4620      	mov	r0, r4
 8000880:	f000 faab 	bl	8000dda <iis2dlpc_data_rate_get>
 8000884:	2800      	cmp	r0, #0
 8000886:	f040 8095 	bne.w	80009b4 <IIS2DLPC_ACC_GetOutputDataRate+0x144>
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 800088a:	f10d 0106 	add.w	r1, sp, #6
 800088e:	4620      	mov	r0, r4
 8000890:	f000 fa03 	bl	8000c9a <iis2dlpc_power_mode_get>
 8000894:	2800      	cmp	r0, #0
 8000896:	f040 8090 	bne.w	80009ba <IIS2DLPC_ACC_GetOutputDataRate+0x14a>
  switch (odr_low_level)
 800089a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800089e:	2b22      	cmp	r3, #34	@ 0x22
 80008a0:	f200 8083 	bhi.w	80009aa <IIS2DLPC_ACC_GetOutputDataRate+0x13a>
 80008a4:	e8df f003 	tbb	[pc, r3]
 80008a8:	302d1612 	.word	0x302d1612
 80008ac:	3c393633 	.word	0x3c393633
 80008b0:	81816a53 	.word	0x81816a53
 80008b4:	81818181 	.word	0x81818181
 80008b8:	81128181 	.word	0x81128181
 80008bc:	81818181 	.word	0x81818181
 80008c0:	81818181 	.word	0x81818181
 80008c4:	81818181 	.word	0x81818181
 80008c8:	8181      	.short	0x8181
 80008ca:	12          	.byte	0x12
 80008cb:	00          	.byte	0x00
      *Odr = 0.0f;
 80008cc:	2300      	movs	r3, #0
 80008ce:	602b      	str	r3, [r5, #0]
}
 80008d0:	b003      	add	sp, #12
 80008d2:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 80008d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80008d8:	2a1b      	cmp	r2, #27
 80008da:	d80a      	bhi.n	80008f2 <IIS2DLPC_ACC_GetOutputDataRate+0x82>
 80008dc:	2301      	movs	r3, #1
 80008de:	4093      	lsls	r3, r2
 80008e0:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 80008e4:	d002      	beq.n	80008ec <IIS2DLPC_ACC_GetOutputDataRate+0x7c>
          *Odr = 1.6f;
 80008e6:	4b36      	ldr	r3, [pc, #216]	@ (80009c0 <IIS2DLPC_ACC_GetOutputDataRate+0x150>)
 80008e8:	602b      	str	r3, [r5, #0]
          break;
 80008ea:	e7f1      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 80008ec:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 80008f0:	d104      	bne.n	80008fc <IIS2DLPC_ACC_GetOutputDataRate+0x8c>
          *Odr = -1.0f;
 80008f2:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 80008f4:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 80008f6:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 80008fa:	e7e9      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 12.5f;
 80008fc:	4b32      	ldr	r3, [pc, #200]	@ (80009c8 <IIS2DLPC_ACC_GetOutputDataRate+0x158>)
 80008fe:	602b      	str	r3, [r5, #0]
          break;
 8000900:	e7e6      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 12.5f;
 8000902:	4b31      	ldr	r3, [pc, #196]	@ (80009c8 <IIS2DLPC_ACC_GetOutputDataRate+0x158>)
 8000904:	602b      	str	r3, [r5, #0]
      break;
 8000906:	e7e3      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 25.0f;
 8000908:	4b30      	ldr	r3, [pc, #192]	@ (80009cc <IIS2DLPC_ACC_GetOutputDataRate+0x15c>)
 800090a:	602b      	str	r3, [r5, #0]
      break;
 800090c:	e7e0      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 50.0f;
 800090e:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <IIS2DLPC_ACC_GetOutputDataRate+0x160>)
 8000910:	602b      	str	r3, [r5, #0]
      break;
 8000912:	e7dd      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 100.0f;
 8000914:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <IIS2DLPC_ACC_GetOutputDataRate+0x164>)
 8000916:	602b      	str	r3, [r5, #0]
      break;
 8000918:	e7da      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = 200.0f;
 800091a:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 800091c:	602b      	str	r3, [r5, #0]
      break;
 800091e:	e7d7      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      switch (mode)
 8000920:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000924:	2a1b      	cmp	r2, #27
 8000926:	d80a      	bhi.n	800093e <IIS2DLPC_ACC_GetOutputDataRate+0xce>
 8000928:	2301      	movs	r3, #1
 800092a:	4093      	lsls	r3, r2
 800092c:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 8000930:	d002      	beq.n	8000938 <IIS2DLPC_ACC_GetOutputDataRate+0xc8>
          *Odr = 200.0f;
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8000934:	602b      	str	r3, [r5, #0]
          break;
 8000936:	e7cb      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8000938:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 800093c:	d104      	bne.n	8000948 <IIS2DLPC_ACC_GetOutputDataRate+0xd8>
          *Odr = -1.0f;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 8000940:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8000942:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8000946:	e7c3      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 400.0f;
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <IIS2DLPC_ACC_GetOutputDataRate+0x16c>)
 800094a:	602b      	str	r3, [r5, #0]
          break;
 800094c:	e7c0      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      switch (mode)
 800094e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000952:	2a1b      	cmp	r2, #27
 8000954:	d80a      	bhi.n	800096c <IIS2DLPC_ACC_GetOutputDataRate+0xfc>
 8000956:	2301      	movs	r3, #1
 8000958:	4093      	lsls	r3, r2
 800095a:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 800095e:	d002      	beq.n	8000966 <IIS2DLPC_ACC_GetOutputDataRate+0xf6>
          *Odr = 200.0f;
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8000962:	602b      	str	r3, [r5, #0]
          break;
 8000964:	e7b4      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8000966:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 800096a:	d104      	bne.n	8000976 <IIS2DLPC_ACC_GetOutputDataRate+0x106>
          *Odr = -1.0f;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 800096e:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8000974:	e7ac      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 800.0f;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <IIS2DLPC_ACC_GetOutputDataRate+0x170>)
 8000978:	602b      	str	r3, [r5, #0]
          break;
 800097a:	e7a9      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      switch (mode)
 800097c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000980:	2a1b      	cmp	r2, #27
 8000982:	d80a      	bhi.n	800099a <IIS2DLPC_ACC_GetOutputDataRate+0x12a>
 8000984:	2301      	movs	r3, #1
 8000986:	4093      	lsls	r3, r2
 8000988:	f013 3f0f 	tst.w	r3, #252645135	@ 0xf0f0f0f
 800098c:	d002      	beq.n	8000994 <IIS2DLPC_ACC_GetOutputDataRate+0x124>
          *Odr = 200.0f;
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <IIS2DLPC_ACC_GetOutputDataRate+0x168>)
 8000990:	602b      	str	r3, [r5, #0]
          break;
 8000992:	e79d      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 8000994:	f013 1f10 	tst.w	r3, #1048592	@ 0x100010
 8000998:	d104      	bne.n	80009a4 <IIS2DLPC_ACC_GetOutputDataRate+0x134>
          *Odr = -1.0f;
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 800099c:	602b      	str	r3, [r5, #0]
          ret = IIS2DLPC_ERROR;
 800099e:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 80009a2:	e795      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
          *Odr = 1600.0f;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <IIS2DLPC_ACC_GetOutputDataRate+0x174>)
 80009a6:	602b      	str	r3, [r5, #0]
          break;
 80009a8:	e792      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
      *Odr = -1.0f;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <IIS2DLPC_ACC_GetOutputDataRate+0x154>)
 80009ac:	602b      	str	r3, [r5, #0]
      ret = IIS2DLPC_ERROR;
 80009ae:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 80009b2:	e78d      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
    return IIS2DLPC_ERROR;
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	e78a      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
    return IIS2DLPC_ERROR;
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	e787      	b.n	80008d0 <IIS2DLPC_ACC_GetOutputDataRate+0x60>
 80009c0:	3fcccccd 	.word	0x3fcccccd
 80009c4:	bf800000 	.word	0xbf800000
 80009c8:	41480000 	.word	0x41480000
 80009cc:	41c80000 	.word	0x41c80000
 80009d0:	42480000 	.word	0x42480000
 80009d4:	42c80000 	.word	0x42c80000
 80009d8:	43480000 	.word	0x43480000
 80009dc:	43c80000 	.word	0x43c80000
 80009e0:	44480000 	.word	0x44480000
 80009e4:	44c80000 	.word	0x44c80000

080009e8 <IIS2DLPC_ACC_GetAxesRaw>:
{
 80009e8:	b530      	push	{r4, r5, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	460d      	mov	r5, r1
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80009ee:	f100 0420 	add.w	r4, r0, #32
 80009f2:	f10d 0107 	add.w	r1, sp, #7
 80009f6:	4620      	mov	r0, r4
 80009f8:	f000 f94f 	bl	8000c9a <iis2dlpc_power_mode_get>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d149      	bne.n	8000a94 <IIS2DLPC_ACC_GetAxesRaw+0xac>
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 8000a00:	a902      	add	r1, sp, #8
 8000a02:	4620      	mov	r0, r4
 8000a04:	f000 fa95 	bl	8000f32 <iis2dlpc_acceleration_raw_get>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d146      	bne.n	8000a9a <IIS2DLPC_ACC_GetAxesRaw+0xb2>
  switch (mode)
 8000a0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000a10:	2a1b      	cmp	r2, #27
 8000a12:	d845      	bhi.n	8000aa0 <IIS2DLPC_ACC_GetAxesRaw+0xb8>
 8000a14:	2301      	movs	r3, #1
 8000a16:	4093      	lsls	r3, r2
 8000a18:	f003 321e 	and.w	r2, r3, #505290270	@ 0x1e1e1e1e
 8000a1c:	f022 2210 	bic.w	r2, r2, #268439552	@ 0x10001000
 8000a20:	b9fa      	cbnz	r2, 8000a62 <IIS2DLPC_ACC_GetAxesRaw+0x7a>
 8000a22:	f013 3f01 	tst.w	r3, #16843009	@ 0x1010101
 8000a26:	d102      	bne.n	8000a2e <IIS2DLPC_ACC_GetAxesRaw+0x46>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	e011      	b.n	8000a52 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
      Value->x = (data_raw.i16bit[0] / 16);
 8000a2e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0f      	blt.n	8000a56 <IIS2DLPC_ACC_GetAxesRaw+0x6e>
 8000a36:	111b      	asrs	r3, r3, #4
 8000a38:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8000a3a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <IIS2DLPC_ACC_GetAxesRaw+0x72>
 8000a42:	111b      	asrs	r3, r3, #4
 8000a44:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8000a46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db07      	blt.n	8000a5e <IIS2DLPC_ACC_GetAxesRaw+0x76>
 8000a4e:	111b      	asrs	r3, r3, #4
 8000a50:	80ab      	strh	r3, [r5, #4]
}
 8000a52:	b005      	add	sp, #20
 8000a54:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 8000a56:	330f      	adds	r3, #15
 8000a58:	e7ed      	b.n	8000a36 <IIS2DLPC_ACC_GetAxesRaw+0x4e>
      Value->y = (data_raw.i16bit[1] / 16);
 8000a5a:	330f      	adds	r3, #15
 8000a5c:	e7f1      	b.n	8000a42 <IIS2DLPC_ACC_GetAxesRaw+0x5a>
      Value->z = (data_raw.i16bit[2] / 16);
 8000a5e:	330f      	adds	r3, #15
 8000a60:	e7f5      	b.n	8000a4e <IIS2DLPC_ACC_GetAxesRaw+0x66>
      Value->x = (data_raw.i16bit[0] / 4);
 8000a62:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0e      	blt.n	8000a88 <IIS2DLPC_ACC_GetAxesRaw+0xa0>
 8000a6a:	109b      	asrs	r3, r3, #2
 8000a6c:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8000a6e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0a      	blt.n	8000a8c <IIS2DLPC_ACC_GetAxesRaw+0xa4>
 8000a76:	109b      	asrs	r3, r3, #2
 8000a78:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8000a7a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db06      	blt.n	8000a90 <IIS2DLPC_ACC_GetAxesRaw+0xa8>
 8000a82:	109b      	asrs	r3, r3, #2
 8000a84:	80ab      	strh	r3, [r5, #4]
      break;
 8000a86:	e7e4      	b.n	8000a52 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
      Value->x = (data_raw.i16bit[0] / 4);
 8000a88:	3303      	adds	r3, #3
 8000a8a:	e7ee      	b.n	8000a6a <IIS2DLPC_ACC_GetAxesRaw+0x82>
      Value->y = (data_raw.i16bit[1] / 4);
 8000a8c:	3303      	adds	r3, #3
 8000a8e:	e7f2      	b.n	8000a76 <IIS2DLPC_ACC_GetAxesRaw+0x8e>
      Value->z = (data_raw.i16bit[2] / 4);
 8000a90:	3303      	adds	r3, #3
 8000a92:	e7f6      	b.n	8000a82 <IIS2DLPC_ACC_GetAxesRaw+0x9a>
    return IIS2DLPC_ERROR;
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	e7db      	b.n	8000a52 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
    return IIS2DLPC_ERROR;
 8000a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9e:	e7d8      	b.n	8000a52 <IIS2DLPC_ACC_GetAxesRaw+0x6a>
  switch (mode)
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	e7d5      	b.n	8000a52 <IIS2DLPC_ACC_GetAxesRaw+0x6a>

08000aa6 <IIS2DLPC_ACC_GetAxes>:
{
 8000aa6:	b530      	push	{r4, r5, lr}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	4605      	mov	r5, r0
 8000aac:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9301      	str	r3, [sp, #4]
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 8000ab2:	a902      	add	r1, sp, #8
 8000ab4:	f7ff ff98 	bl	80009e8 <IIS2DLPC_ACC_GetAxesRaw>
 8000ab8:	bb60      	cbnz	r0, 8000b14 <IIS2DLPC_ACC_GetAxes+0x6e>
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8000aba:	a901      	add	r1, sp, #4
 8000abc:	4628      	mov	r0, r5
 8000abe:	f7ff fe69 	bl	8000794 <IIS2DLPC_ACC_GetSensitivity>
 8000ac2:	bb50      	cbnz	r0, 8000b1a <IIS2DLPC_ACC_GetAxes+0x74>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8000ac4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8000ac8:	ee07 3a10 	vmov	s14, r3
 8000acc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ad0:	eddd 7a01 	vldr	s15, [sp, #4]
 8000ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ad8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000adc:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8000ae0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8000ae4:	ee07 3a10 	vmov	s14, r3
 8000ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000af0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000af4:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8000af8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000afc:	ee07 3a10 	vmov	s14, r3
 8000b00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0c:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8000b10:	b005      	add	sp, #20
 8000b12:	bd30      	pop	{r4, r5, pc}
    return IIS2DLPC_ERROR;
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	e7fa      	b.n	8000b10 <IIS2DLPC_ACC_GetAxes+0x6a>
    return IIS2DLPC_ERROR;
 8000b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1e:	e7f7      	b.n	8000b10 <IIS2DLPC_ACC_GetAxes+0x6a>

08000b20 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
{
 8000b20:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8000b22:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d002      	beq.n	8000b30 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x10>
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8000b2a:	f7ff fc27 	bl	800037c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
}
 8000b2e:	bd08      	pop	{r3, pc}
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8000b30:	f7ff fc9c 	bl	800046c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8000b34:	e7fb      	b.n	8000b2e <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0xe>

08000b36 <IIS2DLPC_ACC_SetOutputDataRate>:
{
 8000b36:	b508      	push	{r3, lr}
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	f7ff fff0 	bl	8000b20 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
}
 8000b40:	bd08      	pop	{r3, pc}

08000b42 <IIS2DLPC_Write_Reg>:
{
 8000b42:	b500      	push	{lr}
 8000b44:	b083      	sub	sp, #12
 8000b46:	f88d 2007 	strb.w	r2, [sp, #7]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f10d 0207 	add.w	r2, sp, #7
 8000b50:	3020      	adds	r0, #32
 8000b52:	f000 f84c 	bl	8000bee <iis2dlpc_write_reg>
 8000b56:	b910      	cbnz	r0, 8000b5e <IIS2DLPC_Write_Reg+0x1c>
}
 8000b58:	b003      	add	sp, #12
 8000b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    return IIS2DLPC_ERROR;
 8000b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b62:	e7f9      	b.n	8000b58 <IIS2DLPC_Write_Reg+0x16>

08000b64 <IIS2DLPC_RegisterBusIO>:
  if (pObj == NULL)
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d02b      	beq.n	8000bc0 <IIS2DLPC_RegisterBusIO+0x5c>
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8000b6c:	680b      	ldr	r3, [r1, #0]
 8000b6e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000b70:	684a      	ldr	r2, [r1, #4]
 8000b72:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000b74:	688a      	ldr	r2, [r1, #8]
 8000b76:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8000b78:	7b0a      	ldrb	r2, [r1, #12]
 8000b7a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000b7c:	690a      	ldr	r2, [r1, #16]
 8000b7e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000b80:	694a      	ldr	r2, [r1, #20]
 8000b82:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000b84:	698a      	ldr	r2, [r1, #24]
 8000b86:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8000b88:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <IIS2DLPC_RegisterBusIO+0x70>)
 8000b8a:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000b8c:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <IIS2DLPC_RegisterBusIO+0x74>)
 8000b8e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000b90:	69ca      	ldr	r2, [r1, #28]
 8000b92:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8000b94:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 8000b96:	b1b3      	cbz	r3, 8000bc6 <IIS2DLPC_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 8000b98:	4798      	blx	r3
 8000b9a:	b9b8      	cbnz	r0, 8000bcc <IIS2DLPC_RegisterBusIO+0x68>
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000b9c:	68a3      	ldr	r3, [r4, #8]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d000      	beq.n	8000ba4 <IIS2DLPC_RegisterBusIO+0x40>
}
 8000ba2:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8000ba4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1fa      	bne.n	8000ba2 <IIS2DLPC_RegisterBusIO+0x3e>
          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 8000bac:	2205      	movs	r2, #5
 8000bae:	2121      	movs	r1, #33	@ 0x21
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f7ff ffc6 	bl	8000b42 <IIS2DLPC_Write_Reg>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d0f3      	beq.n	8000ba2 <IIS2DLPC_RegisterBusIO+0x3e>
            ret = IIS2DLPC_ERROR;
 8000bba:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000bbe:	e7f0      	b.n	8000ba2 <IIS2DLPC_RegisterBusIO+0x3e>
    ret = IIS2DLPC_ERROR;
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000bc4:	4770      	bx	lr
      ret = IIS2DLPC_ERROR;
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bca:	e7ea      	b.n	8000ba2 <IIS2DLPC_RegisterBusIO+0x3e>
      ret = IIS2DLPC_ERROR;
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	e7e7      	b.n	8000ba2 <IIS2DLPC_RegisterBusIO+0x3e>
 8000bd2:	bf00      	nop
 8000bd4:	08000459 	.word	0x08000459
 8000bd8:	08000463 	.word	0x08000463

08000bdc <iis2dlpc_read_reg>:
                                 uint8_t *data,
                                 uint16_t len)
{
  int32_t ret;

  if (ctx == NULL) return -1;
 8000bdc:	b120      	cbz	r0, 8000be8 <iis2dlpc_read_reg+0xc>
{
 8000bde:	b510      	push	{r4, lr}

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000be0:	6844      	ldr	r4, [r0, #4]
 8000be2:	68c0      	ldr	r0, [r0, #12]
 8000be4:	47a0      	blx	r4

  return ret;
}
 8000be6:	bd10      	pop	{r4, pc}
  if (ctx == NULL) return -1;
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000bec:	4770      	bx	lr

08000bee <iis2dlpc_write_reg>:
                                  uint8_t *data,
                                  uint16_t len)
{
  int32_t ret;

  if (ctx == NULL) return -1;
 8000bee:	b120      	cbz	r0, 8000bfa <iis2dlpc_write_reg+0xc>
{
 8000bf0:	b510      	push	{r4, lr}

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000bf2:	6804      	ldr	r4, [r0, #0]
 8000bf4:	68c0      	ldr	r0, [r0, #12]
 8000bf6:	47a0      	blx	r4

  return ret;
}
 8000bf8:	bd10      	pop	{r4, pc}
  if (ctx == NULL) return -1;
 8000bfa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000bfe:	4770      	bx	lr

08000c00 <iis2dlpc_from_lsb_to_celsius>:
{
  return ((float_t)lsb) * 0.488f;
}

float_t iis2dlpc_from_lsb_to_celsius(int16_t lsb)
{
 8000c00:	ee07 0a90 	vmov	s15, r0
  return (((float_t)lsb / 256.0f) + 25.0f);
 8000c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c08:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000c1c <iis2dlpc_from_lsb_to_celsius+0x1c>
 8000c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000c10:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8000c14:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	3b800000 	.word	0x3b800000

08000c20 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(const stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8000c20:	b530      	push	{r4, r5, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	4605      	mov	r5, r0
 8000c26:	460c      	mov	r4, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000c28:	2301      	movs	r3, #1
 8000c2a:	aa01      	add	r2, sp, #4
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	f7ff ffd5 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000c32:	4603      	mov	r3, r0
 8000c34:	b118      	cbz	r0, 8000c3e <iis2dlpc_power_mode_set+0x1e>
  if (ret == 0)
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  if (ret == 0)
 8000c36:	b303      	cbz	r3, 8000c7a <iis2dlpc_power_mode_set+0x5a>
  {
    ret = ret;
  }

  return ret;
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	b003      	add	sp, #12
 8000c3c:	bd30      	pop	{r4, r5, pc}
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8000c3e:	f3c4 0381 	ubfx	r3, r4, #2, #2
 8000c42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000c46:	f363 0283 	bfi	r2, r3, #2, #2
 8000c4a:	f88d 2004 	strb.w	r2, [sp, #4]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000c4e:	b2d3      	uxtb	r3, r2
 8000c50:	f364 0301 	bfi	r3, r4, #0, #2
 8000c54:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000c58:	2301      	movs	r3, #1
 8000c5a:	aa01      	add	r2, sp, #4
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f7ff ffc5 	bl	8000bee <iis2dlpc_write_reg>
  if (ret == 0)
 8000c64:	4603      	mov	r3, r0
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d1e6      	bne.n	8000c38 <iis2dlpc_power_mode_set+0x18>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	466a      	mov	r2, sp
 8000c6e:	2125      	movs	r1, #37	@ 0x25
 8000c70:	4628      	mov	r0, r5
 8000c72:	f7ff ffb3 	bl	8000bdc <iis2dlpc_read_reg>
 8000c76:	4603      	mov	r3, r0
 8000c78:	e7dd      	b.n	8000c36 <iis2dlpc_power_mode_set+0x16>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8000c7a:	f3c4 1100 	ubfx	r1, r4, #4, #1
 8000c7e:	f89d 3000 	ldrb.w	r3, [sp]
 8000c82:	f361 0382 	bfi	r3, r1, #2, #1
 8000c86:	f88d 3000 	strb.w	r3, [sp]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	466a      	mov	r2, sp
 8000c8e:	2125      	movs	r1, #37	@ 0x25
 8000c90:	4628      	mov	r0, r5
 8000c92:	f7ff ffac 	bl	8000bee <iis2dlpc_write_reg>
 8000c96:	4603      	mov	r3, r0
  return ret;
 8000c98:	e7ce      	b.n	8000c38 <iis2dlpc_power_mode_set+0x18>

08000c9a <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(const stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 8000c9a:	b530      	push	{r4, r5, lr}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	aa01      	add	r2, sp, #4
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	f7ff ff98 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000cac:	b108      	cbz	r0, 8000cb2 <iis2dlpc_power_mode_get+0x18>
        break;
    }
  }

  return ret;
}
 8000cae:	b003      	add	sp, #12
 8000cb0:	bd30      	pop	{r4, r5, pc}
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	466a      	mov	r2, sp
 8000cb6:	2125      	movs	r1, #37	@ 0x25
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f7ff ff8f 	bl	8000bdc <iis2dlpc_read_reg>
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8000cbe:	f89d 1000 	ldrb.w	r1, [sp]
 8000cc2:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8000cc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000cca:	f002 030c 	and.w	r3, r2, #12
 8000cce:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode))
 8000cd2:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2b1b      	cmp	r3, #27
 8000cda:	d845      	bhi.n	8000d68 <iis2dlpc_power_mode_get+0xce>
 8000cdc:	e8df f003 	tbb	[pc, r3]
 8000ce0:	1114171a 	.word	0x1114171a
 8000ce4:	4444440e 	.word	0x4444440e
 8000ce8:	1d202326 	.word	0x1d202326
 8000cec:	44444444 	.word	0x44444444
 8000cf0:	2c2f3235 	.word	0x2c2f3235
 8000cf4:	44444429 	.word	0x44444429
 8000cf8:	383b3e41 	.word	0x383b3e41
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	702b      	strb	r3, [r5, #0]
        break;
 8000d00:	e7d5      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 8000d02:	2303      	movs	r3, #3
 8000d04:	702b      	strb	r3, [r5, #0]
        break;
 8000d06:	e7d2      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	702b      	strb	r3, [r5, #0]
        break;
 8000d0c:	e7cf      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	702b      	strb	r3, [r5, #0]
        break;
 8000d12:	e7cc      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 8000d14:	2300      	movs	r3, #0
 8000d16:	702b      	strb	r3, [r5, #0]
        break;
 8000d18:	e7c9      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	702b      	strb	r3, [r5, #0]
        break;
 8000d1e:	e7c6      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 8000d20:	230a      	movs	r3, #10
 8000d22:	702b      	strb	r3, [r5, #0]
        break;
 8000d24:	e7c3      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 8000d26:	2309      	movs	r3, #9
 8000d28:	702b      	strb	r3, [r5, #0]
        break;
 8000d2a:	e7c0      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	702b      	strb	r3, [r5, #0]
        break;
 8000d30:	e7bd      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8000d32:	2314      	movs	r3, #20
 8000d34:	702b      	strb	r3, [r5, #0]
        break;
 8000d36:	e7ba      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8000d38:	2313      	movs	r3, #19
 8000d3a:	702b      	strb	r3, [r5, #0]
        break;
 8000d3c:	e7b7      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8000d3e:	2312      	movs	r3, #18
 8000d40:	702b      	strb	r3, [r5, #0]
        break;
 8000d42:	e7b4      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8000d44:	2311      	movs	r3, #17
 8000d46:	702b      	strb	r3, [r5, #0]
        break;
 8000d48:	e7b1      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	702b      	strb	r3, [r5, #0]
        break;
 8000d4e:	e7ae      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8000d50:	231b      	movs	r3, #27
 8000d52:	702b      	strb	r3, [r5, #0]
        break;
 8000d54:	e7ab      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8000d56:	231a      	movs	r3, #26
 8000d58:	702b      	strb	r3, [r5, #0]
        break;
 8000d5a:	e7a8      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 8000d5c:	2319      	movs	r3, #25
 8000d5e:	702b      	strb	r3, [r5, #0]
        break;
 8000d60:	e7a5      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8000d62:	2318      	movs	r3, #24
 8000d64:	702b      	strb	r3, [r5, #0]
        break;
 8000d66:	e7a2      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	702b      	strb	r3, [r5, #0]
  return ret;
 8000d6c:	e79f      	b.n	8000cae <iis2dlpc_power_mode_get+0x14>

08000d6e <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(const stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8000d6e:	b530      	push	{r4, r5, lr}
 8000d70:	b083      	sub	sp, #12
 8000d72:	4605      	mov	r5, r0
 8000d74:	460c      	mov	r4, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000d76:	2301      	movs	r3, #1
 8000d78:	aa01      	add	r2, sp, #4
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	f7ff ff2e 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000d80:	4603      	mov	r3, r0
 8000d82:	b118      	cbz	r0, 8000d8c <iis2dlpc_data_rate_set+0x1e>
  if (ret == 0)
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  if (ret == 0)
 8000d84:	b1cb      	cbz	r3, 8000dba <iis2dlpc_data_rate_set+0x4c>
  {
    ret = ret;
  }

  return ret;
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	b003      	add	sp, #12
 8000d8a:	bd30      	pop	{r4, r5, pc}
    ctrl1.odr = (uint8_t) val;
 8000d8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d90:	f364 1307 	bfi	r3, r4, #4, #4
 8000d94:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000d98:	2301      	movs	r3, #1
 8000d9a:	aa01      	add	r2, sp, #4
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f7ff ff25 	bl	8000bee <iis2dlpc_write_reg>
  if (ret == 0)
 8000da4:	4603      	mov	r3, r0
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d1ed      	bne.n	8000d86 <iis2dlpc_data_rate_set+0x18>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8000daa:	2301      	movs	r3, #1
 8000dac:	466a      	mov	r2, sp
 8000dae:	2122      	movs	r1, #34	@ 0x22
 8000db0:	4628      	mov	r0, r5
 8000db2:	f7ff ff13 	bl	8000bdc <iis2dlpc_read_reg>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e7e4      	b.n	8000d84 <iis2dlpc_data_rate_set+0x16>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8000dba:	f3c4 1101 	ubfx	r1, r4, #4, #2
 8000dbe:	f89d 3000 	ldrb.w	r3, [sp]
 8000dc2:	f361 0301 	bfi	r3, r1, #0, #2
 8000dc6:	f88d 3000 	strb.w	r3, [sp]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	466a      	mov	r2, sp
 8000dce:	2122      	movs	r1, #34	@ 0x22
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f7ff ff0c 	bl	8000bee <iis2dlpc_write_reg>
 8000dd6:	4603      	mov	r3, r0
  return ret;
 8000dd8:	e7d5      	b.n	8000d86 <iis2dlpc_data_rate_set+0x18>

08000dda <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(const stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 8000dda:	b530      	push	{r4, r5, lr}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	4604      	mov	r4, r0
 8000de0:	460d      	mov	r5, r1
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000de2:	2301      	movs	r3, #1
 8000de4:	aa01      	add	r2, sp, #4
 8000de6:	2120      	movs	r1, #32
 8000de8:	f7ff fef8 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000dec:	b108      	cbz	r0, 8000df2 <iis2dlpc_data_rate_get+0x18>
        break;
    }
  }

  return ret;
}
 8000dee:	b003      	add	sp, #12
 8000df0:	bd30      	pop	{r4, r5, pc}
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8000df2:	2301      	movs	r3, #1
 8000df4:	466a      	mov	r2, sp
 8000df6:	2122      	movs	r1, #34	@ 0x22
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff feef 	bl	8000bdc <iis2dlpc_read_reg>
    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8000dfe:	f89d 2000 	ldrb.w	r2, [sp]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000e10:	2b22      	cmp	r3, #34	@ 0x22
 8000e12:	d837      	bhi.n	8000e84 <iis2dlpc_data_rate_get+0xaa>
 8000e14:	e8df f003 	tbb	[pc, r3]
 8000e18:	1b181512 	.word	0x1b181512
 8000e1c:	2724211e 	.word	0x2724211e
 8000e20:	36362d2a 	.word	0x36362d2a
 8000e24:	36363636 	.word	0x36363636
 8000e28:	36303636 	.word	0x36303636
 8000e2c:	36363636 	.word	0x36363636
 8000e30:	36363636 	.word	0x36363636
 8000e34:	36363636 	.word	0x36363636
 8000e38:	3636      	.short	0x3636
 8000e3a:	33          	.byte	0x33
 8000e3b:	00          	.byte	0x00
        *val = IIS2DLPC_XL_ODR_OFF;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	702b      	strb	r3, [r5, #0]
        break;
 8000e40:	e7d5      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8000e42:	2301      	movs	r3, #1
 8000e44:	702b      	strb	r3, [r5, #0]
        break;
 8000e46:	e7d2      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_12Hz5;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	702b      	strb	r3, [r5, #0]
        break;
 8000e4c:	e7cf      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_25Hz;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	702b      	strb	r3, [r5, #0]
        break;
 8000e52:	e7cc      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_50Hz;
 8000e54:	2304      	movs	r3, #4
 8000e56:	702b      	strb	r3, [r5, #0]
        break;
 8000e58:	e7c9      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_100Hz;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	702b      	strb	r3, [r5, #0]
        break;
 8000e5e:	e7c6      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_200Hz;
 8000e60:	2306      	movs	r3, #6
 8000e62:	702b      	strb	r3, [r5, #0]
        break;
 8000e64:	e7c3      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_400Hz;
 8000e66:	2307      	movs	r3, #7
 8000e68:	702b      	strb	r3, [r5, #0]
        break;
 8000e6a:	e7c0      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_800Hz;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	702b      	strb	r3, [r5, #0]
        break;
 8000e70:	e7bd      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8000e72:	2309      	movs	r3, #9
 8000e74:	702b      	strb	r3, [r5, #0]
        break;
 8000e76:	e7ba      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 8000e78:	2312      	movs	r3, #18
 8000e7a:	702b      	strb	r3, [r5, #0]
        break;
 8000e7c:	e7b7      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8000e7e:	2322      	movs	r3, #34	@ 0x22
 8000e80:	702b      	strb	r3, [r5, #0]
        break;
 8000e82:	e7b4      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>
        *val = IIS2DLPC_XL_ODR_OFF;
 8000e84:	2300      	movs	r3, #0
 8000e86:	702b      	strb	r3, [r5, #0]
  return ret;
 8000e88:	e7b1      	b.n	8000dee <iis2dlpc_data_rate_get+0x14>

08000e8a <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000e8a:	b530      	push	{r4, r5, lr}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	4604      	mov	r4, r0
 8000e90:	460d      	mov	r5, r1
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8000e92:	2301      	movs	r3, #1
 8000e94:	aa01      	add	r2, sp, #4
 8000e96:	2121      	movs	r1, #33	@ 0x21
 8000e98:	f7ff fea0 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000e9c:	b108      	cbz	r0, 8000ea2 <iis2dlpc_block_data_update_set+0x18>
    reg.bdu = val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8000e9e:	b003      	add	sp, #12
 8000ea0:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8000ea2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ea6:	f365 03c3 	bfi	r3, r5, #3, #1
 8000eaa:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	aa01      	add	r2, sp, #4
 8000eb2:	2121      	movs	r1, #33	@ 0x21
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff fe9a 	bl	8000bee <iis2dlpc_write_reg>
  return ret;
 8000eba:	e7f0      	b.n	8000e9e <iis2dlpc_block_data_update_set+0x14>

08000ebc <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(const stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8000ebc:	b530      	push	{r4, r5, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	460d      	mov	r5, r1
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	aa01      	add	r2, sp, #4
 8000ec8:	2125      	movs	r1, #37	@ 0x25
 8000eca:	f7ff fe87 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000ece:	b108      	cbz	r0, 8000ed4 <iis2dlpc_full_scale_set+0x18>
    reg.fs = (uint8_t) val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd30      	pop	{r4, r5, pc}
    reg.fs = (uint8_t) val;
 8000ed4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ed8:	f365 1305 	bfi	r3, r5, #4, #2
 8000edc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	aa01      	add	r2, sp, #4
 8000ee4:	2125      	movs	r1, #37	@ 0x25
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f7ff fe81 	bl	8000bee <iis2dlpc_write_reg>
  return ret;
 8000eec:	e7f0      	b.n	8000ed0 <iis2dlpc_full_scale_set+0x14>

08000eee <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(const stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8000eee:	b510      	push	{r4, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	460c      	mov	r4, r1
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	aa01      	add	r2, sp, #4
 8000ef8:	2125      	movs	r1, #37	@ 0x25
 8000efa:	f7ff fe6f 	bl	8000bdc <iis2dlpc_read_reg>

  switch (reg.fs)
 8000efe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f02:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d810      	bhi.n	8000f2c <iis2dlpc_full_scale_get+0x3e>
 8000f0a:	e8df f003 	tbb	[pc, r3]
 8000f0e:	0602      	.short	0x0602
 8000f10:	0c09      	.short	0x0c09
  {
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 8000f12:	2300      	movs	r3, #0
 8000f14:	7023      	strb	r3, [r4, #0]
      *val = IIS2DLPC_2g;
      break;
  }

  return ret;
}
 8000f16:	b002      	add	sp, #8
 8000f18:	bd10      	pop	{r4, pc}
      *val = IIS2DLPC_4g;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	7023      	strb	r3, [r4, #0]
      break;
 8000f1e:	e7fa      	b.n	8000f16 <iis2dlpc_full_scale_get+0x28>
      *val = IIS2DLPC_8g;
 8000f20:	2302      	movs	r3, #2
 8000f22:	7023      	strb	r3, [r4, #0]
      break;
 8000f24:	e7f7      	b.n	8000f16 <iis2dlpc_full_scale_get+0x28>
      *val = IIS2DLPC_16g;
 8000f26:	2303      	movs	r3, #3
 8000f28:	7023      	strb	r3, [r4, #0]
      break;
 8000f2a:	e7f4      	b.n	8000f16 <iis2dlpc_full_scale_get+0x28>
      *val = IIS2DLPC_2g;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	7023      	strb	r3, [r4, #0]
  return ret;
 8000f30:	e7f1      	b.n	8000f16 <iis2dlpc_full_scale_get+0x28>

08000f32 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000f32:	b510      	push	{r4, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 8000f38:	2306      	movs	r3, #6
 8000f3a:	466a      	mov	r2, sp
 8000f3c:	2128      	movs	r1, #40	@ 0x28
 8000f3e:	f7ff fe4d 	bl	8000bdc <iis2dlpc_read_reg>
  val[0] = (int16_t)buff[1];
 8000f42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000f46:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000f48:	f89d 3000 	ldrb.w	r3, [sp]
 8000f4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000f50:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8000f52:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000f56:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000f58:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000f5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000f60:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8000f62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f66:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000f68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000f70:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8000f72:	b002      	add	sp, #8
 8000f74:	bd10      	pop	{r4, pc}

08000f76 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000f76:	b508      	push	{r3, lr}
 8000f78:	460a      	mov	r2, r1
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	f7ff fe2d 	bl	8000bdc <iis2dlpc_read_reg>

  return ret;
}
 8000f82:	bd08      	pop	{r3, pc}

08000f84 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000f84:	b530      	push	{r4, r5, lr}
 8000f86:	b083      	sub	sp, #12
 8000f88:	4604      	mov	r4, r0
 8000f8a:	460d      	mov	r5, r1
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	aa01      	add	r2, sp, #4
 8000f90:	2121      	movs	r1, #33	@ 0x21
 8000f92:	f7ff fe23 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000f96:	b108      	cbz	r0, 8000f9c <iis2dlpc_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8000f98:	b003      	add	sp, #12
 8000f9a:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 8000f9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000fa0:	f365 0382 	bfi	r3, r5, #2, #1
 8000fa4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8000fa8:	2301      	movs	r3, #1
 8000faa:	aa01      	add	r2, sp, #4
 8000fac:	2121      	movs	r1, #33	@ 0x21
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff fe1d 	bl	8000bee <iis2dlpc_write_reg>
  return ret;
 8000fb4:	e7f0      	b.n	8000f98 <iis2dlpc_auto_increment_set+0x14>

08000fb6 <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(const stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 8000fb6:	b530      	push	{r4, r5, lr}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	aa01      	add	r2, sp, #4
 8000fc2:	212e      	movs	r1, #46	@ 0x2e
 8000fc4:	f7ff fe0a 	bl	8000bdc <iis2dlpc_read_reg>

  if (ret == 0)
 8000fc8:	b108      	cbz	r0, 8000fce <iis2dlpc_fifo_mode_set+0x18>
    reg.fmode = (uint8_t) val;
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8000fca:	b003      	add	sp, #12
 8000fcc:	bd30      	pop	{r4, r5, pc}
    reg.fmode = (uint8_t) val;
 8000fce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000fd2:	f365 1347 	bfi	r3, r5, #5, #3
 8000fd6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8000fda:	2301      	movs	r3, #1
 8000fdc:	aa01      	add	r2, sp, #4
 8000fde:	212e      	movs	r1, #46	@ 0x2e
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fe04 	bl	8000bee <iis2dlpc_write_reg>
  return ret;
 8000fe6:	e7f0      	b.n	8000fca <iis2dlpc_fifo_mode_set+0x14>

08000fe8 <IIS2MDC_GetCapabilities>:
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8000fe8:	2000      	movs	r0, #0
 8000fea:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 8000fec:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 8000ff2:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8000ff4:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 8000ff6:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 8000ff8:	2332      	movs	r3, #50	@ 0x32
 8000ffa:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8001000:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8001002:	4b01      	ldr	r3, [pc, #4]	@ (8001008 <IIS2MDC_GetCapabilities+0x20>)
 8001004:	618b      	str	r3, [r1, #24]
  return IIS2MDC_OK;
}
 8001006:	4770      	bx	lr
 8001008:	42c80000 	.word	0x42c80000

0800100c <IIS2MDC_MAG_GetSensitivity>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float_t *Sensitivity)
{
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 800100c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001010:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8001012:	2000      	movs	r0, #0
 8001014:	4770      	bx	lr

08001016 <IIS2MDC_MAG_GetFullScale>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
  UNUSED(pObj);
  *FullScale = 50;
 8001016:	2332      	movs	r3, #50	@ 0x32
 8001018:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 800101a:	2000      	movs	r0, #0
 800101c:	4770      	bx	lr

0800101e <IIS2MDC_MAG_SetFullScale>:
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
}
 800101e:	2000      	movs	r0, #0
 8001020:	4770      	bx	lr

08001022 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001022:	b510      	push	{r4, lr}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8001024:	6884      	ldr	r4, [r0, #8]
 8001026:	b92c      	cbnz	r4, 8001034 <ReadMagRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001028:	6944      	ldr	r4, [r0, #20]
 800102a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800102e:	7b00      	ldrb	r0, [r0, #12]
 8001030:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001032:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001034:	6944      	ldr	r4, [r0, #20]
 8001036:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800103a:	7b00      	ldrb	r0, [r0, #12]
 800103c:	47a0      	blx	r4
 800103e:	e7f8      	b.n	8001032 <ReadMagRegWrap+0x10>

08001040 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001040:	b510      	push	{r4, lr}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8001042:	6884      	ldr	r4, [r0, #8]
 8001044:	b92c      	cbnz	r4, 8001052 <WriteMagRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001046:	6904      	ldr	r4, [r0, #16]
 8001048:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800104c:	7b00      	ldrb	r0, [r0, #12]
 800104e:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001050:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001052:	6904      	ldr	r4, [r0, #16]
 8001054:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8001058:	7b00      	ldrb	r0, [r0, #12]
 800105a:	47a0      	blx	r4
 800105c:	e7f8      	b.n	8001050 <WriteMagRegWrap+0x10>

0800105e <IIS2MDC_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 800105e:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001062:	2b01      	cmp	r3, #1
 8001064:	d00a      	beq.n	800107c <IIS2MDC_MAG_Enable+0x1e>
{
 8001066:	b510      	push	{r4, lr}
 8001068:	4604      	mov	r4, r0
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	3020      	adds	r0, #32
 800106e:	f000 f94b 	bl	8001308 <iis2mdc_operating_mode_set>
 8001072:	b928      	cbnz	r0, 8001080 <IIS2MDC_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 800107a:	bd10      	pop	{r4, pc}
    return IIS2MDC_OK;
 800107c:	2000      	movs	r0, #0
}
 800107e:	4770      	bx	lr
    return IIS2MDC_ERROR;
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	e7f9      	b.n	800107a <IIS2MDC_MAG_Enable+0x1c>

08001086 <IIS2MDC_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8001086:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 800108a:	b90b      	cbnz	r3, 8001090 <IIS2MDC_MAG_Disable+0xa>
    return IIS2MDC_OK;
 800108c:	2000      	movs	r0, #0
}
 800108e:	4770      	bx	lr
{
 8001090:	b510      	push	{r4, lr}
 8001092:	4604      	mov	r4, r0
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8001094:	2102      	movs	r1, #2
 8001096:	3020      	adds	r0, #32
 8001098:	f000 f936 	bl	8001308 <iis2mdc_operating_mode_set>
 800109c:	b910      	cbnz	r0, 80010a4 <IIS2MDC_MAG_Disable+0x1e>
  pObj->mag_is_enabled = 0;
 800109e:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
}
 80010a2:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	e7fb      	b.n	80010a2 <IIS2MDC_MAG_Disable+0x1c>

080010aa <IIS2MDC_DeInit>:
{
 80010aa:	b510      	push	{r4, lr}
 80010ac:	4604      	mov	r4, r0
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 80010ae:	f7ff ffea 	bl	8001086 <IIS2MDC_MAG_Disable>
 80010b2:	b910      	cbnz	r0, 80010ba <IIS2MDC_DeInit+0x10>
  pObj->is_initialized = 0;
 80010b4:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
}
 80010b8:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	e7fb      	b.n	80010b8 <IIS2MDC_DeInit+0xe>

080010c0 <IIS2MDC_MAG_SetOutputDataRate>:
{
 80010c0:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80010c2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80010c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	d90f      	bls.n	80010f0 <IIS2MDC_MAG_SetOutputDataRate+0x30>
 80010d0:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80010d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d90e      	bls.n	80010fc <IIS2MDC_MAG_SetOutputDataRate+0x3c>
 80010de:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800110c <IIS2MDC_MAG_SetOutputDataRate+0x4c>
 80010e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d809      	bhi.n	8001100 <IIS2MDC_MAG_SetOutputDataRate+0x40>
 80010ec:	2102      	movs	r1, #2
 80010ee:	e000      	b.n	80010f2 <IIS2MDC_MAG_SetOutputDataRate+0x32>
 80010f0:	2100      	movs	r1, #0
  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80010f2:	3020      	adds	r0, #32
 80010f4:	f000 f921 	bl	800133a <iis2mdc_data_rate_set>
 80010f8:	b920      	cbnz	r0, 8001104 <IIS2MDC_MAG_SetOutputDataRate+0x44>
}
 80010fa:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80010fc:	2101      	movs	r1, #1
 80010fe:	e7f8      	b.n	80010f2 <IIS2MDC_MAG_SetOutputDataRate+0x32>
 8001100:	2103      	movs	r1, #3
 8001102:	e7f6      	b.n	80010f2 <IIS2MDC_MAG_SetOutputDataRate+0x32>
    return IIS2MDC_ERROR;
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	e7f7      	b.n	80010fa <IIS2MDC_MAG_SetOutputDataRate+0x3a>
 800110a:	bf00      	nop
 800110c:	42480000 	.word	0x42480000

08001110 <IIS2MDC_Init>:
{
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4604      	mov	r4, r0
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8001114:	f100 0520 	add.w	r5, r0, #32
 8001118:	2101      	movs	r1, #1
 800111a:	4628      	mov	r0, r5
 800111c:	f000 f948 	bl	80013b0 <iis2mdc_block_data_update_set>
 8001120:	b990      	cbnz	r0, 8001148 <IIS2MDC_Init+0x38>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8001122:	2102      	movs	r1, #2
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f8ef 	bl	8001308 <iis2mdc_operating_mode_set>
 800112a:	b980      	cbnz	r0, 800114e <IIS2MDC_Init+0x3e>
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 800112c:	2103      	movs	r1, #3
 800112e:	4628      	mov	r0, r5
 8001130:	f000 f903 	bl	800133a <iis2mdc_data_rate_set>
 8001134:	b970      	cbnz	r0, 8001154 <IIS2MDC_Init+0x44>
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f97b 	bl	8001434 <iis2mdc_self_test_set>
 800113e:	b960      	cbnz	r0, 800115a <IIS2MDC_Init+0x4a>
  pObj->is_initialized = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8001146:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2MDC_ERROR;
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	e7fb      	b.n	8001146 <IIS2MDC_Init+0x36>
    return IIS2MDC_ERROR;
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	e7f8      	b.n	8001146 <IIS2MDC_Init+0x36>
    return IIS2MDC_ERROR;
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	e7f5      	b.n	8001146 <IIS2MDC_Init+0x36>
    return IIS2MDC_ERROR;
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	e7f2      	b.n	8001146 <IIS2MDC_Init+0x36>

08001160 <IIS2MDC_ReadID>:
{
 8001160:	b508      	push	{r3, lr}
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8001162:	3020      	adds	r0, #32
 8001164:	f000 f95f 	bl	8001426 <iis2mdc_device_id_get>
 8001168:	b900      	cbnz	r0, 800116c <IIS2MDC_ReadID+0xc>
}
 800116a:	bd08      	pop	{r3, pc}
    return IIS2MDC_ERROR;
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	e7fb      	b.n	800116a <IIS2MDC_ReadID+0xa>
	...

08001174 <IIS2MDC_MAG_GetOutputDataRate>:
{
 8001174:	b510      	push	{r4, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	460c      	mov	r4, r1
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800117a:	f10d 0107 	add.w	r1, sp, #7
 800117e:	3020      	adds	r0, #32
 8001180:	f000 f8f4 	bl	800136c <iis2mdc_data_rate_get>
 8001184:	b9a0      	cbnz	r0, 80011b0 <IIS2MDC_MAG_GetOutputDataRate+0x3c>
  switch (odr_low_level)
 8001186:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d813      	bhi.n	80011b6 <IIS2MDC_MAG_GetOutputDataRate+0x42>
 800118e:	e8df f003 	tbb	[pc, r3]
 8001192:	0602      	.short	0x0602
 8001194:	0c09      	.short	0x0c09
      *Odr = 10.0f;
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <IIS2MDC_MAG_GetOutputDataRate+0x48>)
 8001198:	6023      	str	r3, [r4, #0]
}
 800119a:	b002      	add	sp, #8
 800119c:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <IIS2MDC_MAG_GetOutputDataRate+0x4c>)
 80011a0:	6023      	str	r3, [r4, #0]
      break;
 80011a2:	e7fa      	b.n	800119a <IIS2MDC_MAG_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <IIS2MDC_MAG_GetOutputDataRate+0x50>)
 80011a6:	6023      	str	r3, [r4, #0]
      break;
 80011a8:	e7f7      	b.n	800119a <IIS2MDC_MAG_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <IIS2MDC_MAG_GetOutputDataRate+0x54>)
 80011ac:	6023      	str	r3, [r4, #0]
      break;
 80011ae:	e7f4      	b.n	800119a <IIS2MDC_MAG_GetOutputDataRate+0x26>
    return IIS2MDC_ERROR;
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	e7f1      	b.n	800119a <IIS2MDC_MAG_GetOutputDataRate+0x26>
  switch (odr_low_level)
 80011b6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ba:	e7ee      	b.n	800119a <IIS2MDC_MAG_GetOutputDataRate+0x26>
 80011bc:	41200000 	.word	0x41200000
 80011c0:	41a00000 	.word	0x41a00000
 80011c4:	42480000 	.word	0x42480000
 80011c8:	42c80000 	.word	0x42c80000

080011cc <IIS2MDC_MAG_GetAxesRaw>:
{
 80011cc:	b510      	push	{r4, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	460c      	mov	r4, r1
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80011d2:	4669      	mov	r1, sp
 80011d4:	3020      	adds	r0, #32
 80011d6:	f000 f904 	bl	80013e2 <iis2mdc_magnetic_raw_get>
 80011da:	b950      	cbnz	r0, 80011f2 <IIS2MDC_MAG_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80011dc:	f9bd 3000 	ldrsh.w	r3, [sp]
 80011e0:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80011e2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80011e6:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80011e8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80011ec:	80a3      	strh	r3, [r4, #4]
}
 80011ee:	b002      	add	sp, #8
 80011f0:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295
 80011f6:	e7fa      	b.n	80011ee <IIS2MDC_MAG_GetAxesRaw+0x22>

080011f8 <IIS2MDC_MAG_GetAxes>:
{
 80011f8:	b570      	push	{r4, r5, r6, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	4605      	mov	r5, r0
 80011fe:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 8001200:	2300      	movs	r3, #0
 8001202:	9301      	str	r3, [sp, #4]
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8001204:	a902      	add	r1, sp, #8
 8001206:	3020      	adds	r0, #32
 8001208:	f000 f8eb 	bl	80013e2 <iis2mdc_magnetic_raw_get>
 800120c:	bb68      	cbnz	r0, 800126a <IIS2MDC_MAG_GetAxes+0x72>
 800120e:	4606      	mov	r6, r0
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8001210:	a901      	add	r1, sp, #4
 8001212:	4628      	mov	r0, r5
 8001214:	f7ff fefa 	bl	800100c <IIS2MDC_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001218:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800121c:	ee07 3a10 	vmov	s14, r3
 8001220:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001224:	eddd 7a01 	vldr	s15, [sp, #4]
 8001228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001230:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001234:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001238:	ee07 3a10 	vmov	s14, r3
 800123c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001248:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800124c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001250:	ee07 3a10 	vmov	s14, r3
 8001254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001264:	4630      	mov	r0, r6
 8001266:	b004      	add	sp, #16
 8001268:	bd70      	pop	{r4, r5, r6, pc}
    return IIS2MDC_ERROR;
 800126a:	f04f 36ff 	mov.w	r6, #4294967295
 800126e:	e7f9      	b.n	8001264 <IIS2MDC_MAG_GetAxes+0x6c>

08001270 <IIS2MDC_RegisterBusIO>:
  if (pObj == NULL)
 8001270:	2800      	cmp	r0, #0
 8001272:	d029      	beq.n	80012c8 <IIS2MDC_RegisterBusIO+0x58>
{
 8001274:	b510      	push	{r4, lr}
 8001276:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8001278:	680b      	ldr	r3, [r1, #0]
 800127a:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800127c:	684a      	ldr	r2, [r1, #4]
 800127e:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001280:	688a      	ldr	r2, [r1, #8]
 8001282:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8001284:	7b0a      	ldrb	r2, [r1, #12]
 8001286:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001288:	690a      	ldr	r2, [r1, #16]
 800128a:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800128c:	694a      	ldr	r2, [r1, #20]
 800128e:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001290:	698a      	ldr	r2, [r1, #24]
 8001292:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001294:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <IIS2MDC_RegisterBusIO+0x6c>)
 8001296:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001298:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <IIS2MDC_RegisterBusIO+0x70>)
 800129a:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800129c:	69ca      	ldr	r2, [r1, #28]
 800129e:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80012a0:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 80012a2:	b1a3      	cbz	r3, 80012ce <IIS2MDC_RegisterBusIO+0x5e>
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80012a4:	4798      	blx	r3
 80012a6:	b9a8      	cbnz	r0, 80012d4 <IIS2MDC_RegisterBusIO+0x64>
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80012a8:	68a3      	ldr	r3, [r4, #8]
 80012aa:	b113      	cbz	r3, 80012b2 <IIS2MDC_RegisterBusIO+0x42>
        if (pObj->is_initialized == 0U)
 80012ac:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80012b0:	b103      	cbz	r3, 80012b4 <IIS2MDC_RegisterBusIO+0x44>
}
 80012b2:	bd10      	pop	{r4, pc}
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 80012b4:	2101      	movs	r1, #1
 80012b6:	f104 0020 	add.w	r0, r4, #32
 80012ba:	f000 f8d4 	bl	8001466 <iis2mdc_i2c_interface_set>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d0f7      	beq.n	80012b2 <IIS2MDC_RegisterBusIO+0x42>
            ret = IIS2MDC_ERROR;
 80012c2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80012c6:	e7f4      	b.n	80012b2 <IIS2MDC_RegisterBusIO+0x42>
    ret = IIS2MDC_ERROR;
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012cc:	4770      	bx	lr
      ret = IIS2MDC_ERROR;
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295
 80012d2:	e7ee      	b.n	80012b2 <IIS2MDC_RegisterBusIO+0x42>
      ret = IIS2MDC_ERROR;
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	e7eb      	b.n	80012b2 <IIS2MDC_RegisterBusIO+0x42>
 80012da:	bf00      	nop
 80012dc:	08001023 	.word	0x08001023
 80012e0:	08001041 	.word	0x08001041

080012e4 <iis2mdc_read_reg>:
                                uint8_t *data,
                                uint16_t len)
{
  int32_t ret;

  if (ctx == NULL) return -1;
 80012e4:	b120      	cbz	r0, 80012f0 <iis2mdc_read_reg+0xc>
{
 80012e6:	b510      	push	{r4, lr}

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012e8:	6844      	ldr	r4, [r0, #4]
 80012ea:	68c0      	ldr	r0, [r0, #12]
 80012ec:	47a0      	blx	r4

  return ret;
}
 80012ee:	bd10      	pop	{r4, pc}
  if (ctx == NULL) return -1;
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012f4:	4770      	bx	lr

080012f6 <iis2mdc_write_reg>:
                                 uint8_t *data,
                                 uint16_t len)
{
  int32_t ret;

  if (ctx == NULL) return -1;
 80012f6:	b120      	cbz	r0, 8001302 <iis2mdc_write_reg+0xc>
{
 80012f8:	b510      	push	{r4, lr}

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012fa:	6804      	ldr	r4, [r0, #0]
 80012fc:	68c0      	ldr	r0, [r0, #12]
 80012fe:	47a0      	blx	r4

  return ret;
}
 8001300:	bd10      	pop	{r4, pc}
  if (ctx == NULL) return -1;
 8001302:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001306:	4770      	bx	lr

08001308 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(const stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8001308:	b530      	push	{r4, r5, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	4604      	mov	r4, r0
 800130e:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8001310:	2301      	movs	r3, #1
 8001312:	aa01      	add	r2, sp, #4
 8001314:	2160      	movs	r1, #96	@ 0x60
 8001316:	f7ff ffe5 	bl	80012e4 <iis2mdc_read_reg>

  if (ret == 0)
 800131a:	b108      	cbz	r0, 8001320 <iis2mdc_operating_mode_set+0x18>
    reg.md = (uint8_t)val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800131c:	b003      	add	sp, #12
 800131e:	bd30      	pop	{r4, r5, pc}
    reg.md = (uint8_t)val;
 8001320:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001324:	f365 0301 	bfi	r3, r5, #0, #2
 8001328:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800132c:	2301      	movs	r3, #1
 800132e:	aa01      	add	r2, sp, #4
 8001330:	2160      	movs	r1, #96	@ 0x60
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff ffdf 	bl	80012f6 <iis2mdc_write_reg>
  return ret;
 8001338:	e7f0      	b.n	800131c <iis2mdc_operating_mode_set+0x14>

0800133a <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(const stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 800133a:	b530      	push	{r4, r5, lr}
 800133c:	b083      	sub	sp, #12
 800133e:	4604      	mov	r4, r0
 8001340:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8001342:	2301      	movs	r3, #1
 8001344:	aa01      	add	r2, sp, #4
 8001346:	2160      	movs	r1, #96	@ 0x60
 8001348:	f7ff ffcc 	bl	80012e4 <iis2mdc_read_reg>

  if (ret == 0)
 800134c:	b108      	cbz	r0, 8001352 <iis2mdc_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800134e:	b003      	add	sp, #12
 8001350:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 8001352:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001356:	f365 0383 	bfi	r3, r5, #2, #2
 800135a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800135e:	2301      	movs	r3, #1
 8001360:	aa01      	add	r2, sp, #4
 8001362:	2160      	movs	r1, #96	@ 0x60
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff ffc6 	bl	80012f6 <iis2mdc_write_reg>
  return ret;
 800136a:	e7f0      	b.n	800134e <iis2mdc_data_rate_set+0x14>

0800136c <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(const stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 800136c:	b510      	push	{r4, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	460c      	mov	r4, r1
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8001372:	2301      	movs	r3, #1
 8001374:	aa01      	add	r2, sp, #4
 8001376:	2160      	movs	r1, #96	@ 0x60
 8001378:	f7ff ffb4 	bl	80012e4 <iis2mdc_read_reg>

  switch (reg.odr)
 800137c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001380:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001384:	2b03      	cmp	r3, #3
 8001386:	d810      	bhi.n	80013aa <iis2mdc_data_rate_get+0x3e>
 8001388:	e8df f003 	tbb	[pc, r3]
 800138c:	0c090602 	.word	0x0c090602
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8001390:	2300      	movs	r3, #0
 8001392:	7023      	strb	r3, [r4, #0]
      *val = IIS2MDC_ODR_10Hz;
      break;
  }

  return ret;
}
 8001394:	b002      	add	sp, #8
 8001396:	bd10      	pop	{r4, pc}
      *val = IIS2MDC_ODR_20Hz;
 8001398:	2301      	movs	r3, #1
 800139a:	7023      	strb	r3, [r4, #0]
      break;
 800139c:	e7fa      	b.n	8001394 <iis2mdc_data_rate_get+0x28>
      *val = IIS2MDC_ODR_50Hz;
 800139e:	2302      	movs	r3, #2
 80013a0:	7023      	strb	r3, [r4, #0]
      break;
 80013a2:	e7f7      	b.n	8001394 <iis2mdc_data_rate_get+0x28>
      *val = IIS2MDC_ODR_100Hz;
 80013a4:	2303      	movs	r3, #3
 80013a6:	7023      	strb	r3, [r4, #0]
      break;
 80013a8:	e7f4      	b.n	8001394 <iis2mdc_data_rate_get+0x28>
      *val = IIS2MDC_ODR_10Hz;
 80013aa:	2300      	movs	r3, #0
 80013ac:	7023      	strb	r3, [r4, #0]
  return ret;
 80013ae:	e7f1      	b.n	8001394 <iis2mdc_data_rate_get+0x28>

080013b0 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80013b0:	b530      	push	{r4, r5, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80013b8:	2301      	movs	r3, #1
 80013ba:	aa01      	add	r2, sp, #4
 80013bc:	2162      	movs	r1, #98	@ 0x62
 80013be:	f7ff ff91 	bl	80012e4 <iis2mdc_read_reg>

  if (ret == 0)
 80013c2:	b108      	cbz	r0, 80013c8 <iis2mdc_block_data_update_set+0x18>
    reg.bdu = val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80013c4:	b003      	add	sp, #12
 80013c6:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80013c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013cc:	f365 1304 	bfi	r3, r5, #4, #1
 80013d0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80013d4:	2301      	movs	r3, #1
 80013d6:	aa01      	add	r2, sp, #4
 80013d8:	2162      	movs	r1, #98	@ 0x62
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff ff8b 	bl	80012f6 <iis2mdc_write_reg>
  return ret;
 80013e0:	e7f0      	b.n	80013c4 <iis2mdc_block_data_update_set+0x14>

080013e2 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80013e2:	b510      	push	{r4, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80013e8:	2306      	movs	r3, #6
 80013ea:	466a      	mov	r2, sp
 80013ec:	2168      	movs	r1, #104	@ 0x68
 80013ee:	f7ff ff79 	bl	80012e4 <iis2mdc_read_reg>
  val[0] = (int16_t)buff[1];
 80013f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80013f6:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80013f8:	f89d 3000 	ldrb.w	r3, [sp]
 80013fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001400:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8001402:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001406:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001408:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800140c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001410:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8001412:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001416:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800141c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001420:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8001422:	b002      	add	sp, #8
 8001424:	bd10      	pop	{r4, pc}

08001426 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001426:	b508      	push	{r3, lr}
 8001428:	460a      	mov	r2, r1
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 800142a:	2301      	movs	r3, #1
 800142c:	214f      	movs	r1, #79	@ 0x4f
 800142e:	f7ff ff59 	bl	80012e4 <iis2mdc_read_reg>

  return ret;
}
 8001432:	bd08      	pop	{r3, pc}

08001434 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001434:	b530      	push	{r4, r5, lr}
 8001436:	b083      	sub	sp, #12
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800143c:	2301      	movs	r3, #1
 800143e:	aa01      	add	r2, sp, #4
 8001440:	2162      	movs	r1, #98	@ 0x62
 8001442:	f7ff ff4f 	bl	80012e4 <iis2mdc_read_reg>

  if (ret == 0)
 8001446:	b108      	cbz	r0, 800144c <iis2mdc_self_test_set+0x18>
    reg.self_test = val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001448:	b003      	add	sp, #12
 800144a:	bd30      	pop	{r4, r5, pc}
    reg.self_test = val;
 800144c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001450:	f365 0341 	bfi	r3, r5, #1, #1
 8001454:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8001458:	2301      	movs	r3, #1
 800145a:	aa01      	add	r2, sp, #4
 800145c:	2162      	movs	r1, #98	@ 0x62
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff ff49 	bl	80012f6 <iis2mdc_write_reg>
  return ret;
 8001464:	e7f0      	b.n	8001448 <iis2mdc_self_test_set+0x14>

08001466 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8001466:	b530      	push	{r4, r5, lr}
 8001468:	b083      	sub	sp, #12
 800146a:	4604      	mov	r4, r0
 800146c:	460d      	mov	r5, r1
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800146e:	2301      	movs	r3, #1
 8001470:	aa01      	add	r2, sp, #4
 8001472:	2162      	movs	r1, #98	@ 0x62
 8001474:	f7ff ff36 	bl	80012e4 <iis2mdc_read_reg>

  if (ret == 0)
 8001478:	b108      	cbz	r0, 800147e <iis2mdc_i2c_interface_set+0x18>
    reg.i2c_dis = (uint8_t)val;
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800147a:	b003      	add	sp, #12
 800147c:	bd30      	pop	{r4, r5, pc}
    reg.i2c_dis = (uint8_t)val;
 800147e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001482:	f365 1345 	bfi	r3, r5, #5, #1
 8001486:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800148a:	2301      	movs	r3, #1
 800148c:	aa01      	add	r2, sp, #4
 800148e:	2162      	movs	r1, #98	@ 0x62
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff ff30 	bl	80012f6 <iis2mdc_write_reg>
  return ret;
 8001496:	e7f0      	b.n	800147a <iis2mdc_i2c_interface_set+0x14>

08001498 <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	b090      	sub	sp, #64	@ 0x40
 800149c:	4604      	mov	r4, r0
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 800149e:	2300      	movs	r3, #0
 80014a0:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 80014a2:	23d7      	movs	r3, #215	@ 0xd7
 80014a4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS02A1_I2C_INIT;
 80014a8:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <ISM330DHCX_0_Probe+0xf8>)
 80014aa:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DEINIT;
 80014ac:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <ISM330DHCX_0_Probe+0xfc>)
 80014ae:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_READ_REG;
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <ISM330DHCX_0_Probe+0x100>)
 80014b2:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WRITE_REG;
 80014b4:	4b39      	ldr	r3, [pc, #228]	@ (800159c <ISM330DHCX_0_Probe+0x104>)
 80014b6:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS02A1_GET_TICK;
 80014b8:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <ISM330DHCX_0_Probe+0x108>)
 80014ba:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS02A1_DELAY;
 80014bc:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <ISM330DHCX_0_Probe+0x10c>)
 80014be:	930f      	str	r3, [sp, #60]	@ 0x3c

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80014c0:	a908      	add	r1, sp, #32
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <ISM330DHCX_0_Probe+0x110>)
 80014c4:	f000 ff76 	bl	80023b4 <ISM330DHCX_RegisterBusIO>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d152      	bne.n	8001572 <ISM330DHCX_0_Probe+0xda>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (ISM330DHCX_Set_Mem_Bank(&ism330dhcx_obj_0, ISM330DHCX_USER_BANK) != ISM330DHCX_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	4836      	ldr	r0, [pc, #216]	@ (80015a8 <ISM330DHCX_0_Probe+0x110>)
 80014d0:	f000 ffac 	bl	800242c <ISM330DHCX_Set_Mem_Bank>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d14f      	bne.n	8001578 <ISM330DHCX_0_Probe+0xe0>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80014d8:	f10d 011f 	add.w	r1, sp, #31
 80014dc:	4832      	ldr	r0, [pc, #200]	@ (80015a8 <ISM330DHCX_0_Probe+0x110>)
 80014de:	f000 fced 	bl	8001ebc <ISM330DHCX_ReadID>
 80014e2:	4606      	mov	r6, r0
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d14a      	bne.n	800157e <ISM330DHCX_0_Probe+0xe6>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != ISM330DHCX_ID)
 80014e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80014ec:	2b6b      	cmp	r3, #107	@ 0x6b
 80014ee:	d149      	bne.n	8001584 <ISM330DHCX_0_Probe+0xec>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80014f0:	4d2d      	ldr	r5, [pc, #180]	@ (80015a8 <ISM330DHCX_0_Probe+0x110>)
 80014f2:	4669      	mov	r1, sp
 80014f4:	4628      	mov	r0, r5
 80014f6:	f000 faaf 	bl	8001a58 <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80014fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80014fe:	f89d 3000 	ldrb.w	r3, [sp]
 8001502:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8001506:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800150a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800150e:	4927      	ldr	r1, [pc, #156]	@ (80015ac <ISM330DHCX_0_Probe+0x114>)
 8001510:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 8001512:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <ISM330DHCX_0_Probe+0x118>)
 8001514:	601d      	str	r5, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8001516:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <ISM330DHCX_0_Probe+0x11c>)
 8001518:	4927      	ldr	r1, [pc, #156]	@ (80015b8 <ISM330DHCX_0_Probe+0x120>)
 800151a:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800151c:	f014 0f01 	tst.w	r4, #1
 8001520:	d001      	beq.n	8001526 <ISM330DHCX_0_Probe+0x8e>
 8001522:	2a01      	cmp	r2, #1
 8001524:	d00c      	beq.n	8001540 <ISM330DHCX_0_Probe+0xa8>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8001526:	f014 0f02 	tst.w	r4, #2
 800152a:	d003      	beq.n	8001534 <ISM330DHCX_0_Probe+0x9c>
 800152c:	f89d 3000 	ldrb.w	r3, [sp]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d010      	beq.n	8001556 <ISM330DHCX_0_Probe+0xbe>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8001534:	f014 0f04 	tst.w	r4, #4
 8001538:	d127      	bne.n	800158a <ISM330DHCX_0_Probe+0xf2>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 800153a:	4630      	mov	r0, r6
 800153c:	b010      	add	sp, #64	@ 0x40
 800153e:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <ISM330DHCX_0_Probe+0x124>)
 8001542:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <ISM330DHCX_0_Probe+0x128>)
 8001544:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8001546:	680b      	ldr	r3, [r1, #0]
 8001548:	4628      	mov	r0, r5
 800154a:	4798      	blx	r3
 800154c:	2800      	cmp	r0, #0
 800154e:	d0ea      	beq.n	8001526 <ISM330DHCX_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001550:	f06f 0604 	mvn.w	r6, #4
 8001554:	e7f1      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <ISM330DHCX_0_Probe+0x124>)
 8001558:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <ISM330DHCX_0_Probe+0x12c>)
 800155a:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <ISM330DHCX_0_Probe+0x11c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <ISM330DHCX_0_Probe+0x118>)
 8001564:	6810      	ldr	r0, [r2, #0]
 8001566:	4798      	blx	r3
 8001568:	2800      	cmp	r0, #0
 800156a:	d0e3      	beq.n	8001534 <ISM330DHCX_0_Probe+0x9c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800156c:	f06f 0604 	mvn.w	r6, #4
 8001570:	e7e3      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001572:	f06f 0606 	mvn.w	r6, #6
 8001576:	e7e0      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001578:	f06f 0606 	mvn.w	r6, #6
 800157c:	e7dd      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800157e:	f06f 0606 	mvn.w	r6, #6
 8001582:	e7da      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001584:	f06f 0606 	mvn.w	r6, #6
 8001588:	e7d7      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800158a:	f06f 0604 	mvn.w	r6, #4
  return ret;
 800158e:	e7d4      	b.n	800153a <ISM330DHCX_0_Probe+0xa2>
 8001590:	080077ed 	.word	0x080077ed
 8001594:	080076e9 	.word	0x080076e9
 8001598:	0800775d 	.word	0x0800775d
 800159c:	08007721 	.word	0x08007721
 80015a0:	08007799 	.word	0x08007799
 80015a4:	080032f5 	.word	0x080032f5
 80015a8:	20000170 	.word	0x20000170
 80015ac:	200001a8 	.word	0x200001a8
 80015b0:	200001e4 	.word	0x200001e4
 80015b4:	200001b4 	.word	0x200001b4
 80015b8:	200000b8 	.word	0x200000b8
 80015bc:	200001c0 	.word	0x200001c0
 80015c0:	20000070 	.word	0x20000070
 80015c4:	20000094 	.word	0x20000094

080015c8 <IIS2DLPC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	b090      	sub	sp, #64	@ 0x40
 80015cc:	4604      	mov	r4, r0
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 80015ce:	2300      	movs	r3, #0
 80015d0:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 80015d2:	2333      	movs	r3, #51	@ 0x33
 80015d4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS02A1_I2C_INIT;
 80015d8:	4b30      	ldr	r3, [pc, #192]	@ (800169c <IIS2DLPC_0_Probe+0xd4>)
 80015da:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DEINIT;
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <IIS2DLPC_0_Probe+0xd8>)
 80015de:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_READ_REG;
 80015e0:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <IIS2DLPC_0_Probe+0xdc>)
 80015e2:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WRITE_REG;
 80015e4:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <IIS2DLPC_0_Probe+0xe0>)
 80015e6:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS02A1_GET_TICK;
 80015e8:	4b30      	ldr	r3, [pc, #192]	@ (80016ac <IIS2DLPC_0_Probe+0xe4>)
 80015ea:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS02A1_DELAY;
 80015ec:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <IIS2DLPC_0_Probe+0xe8>)
 80015ee:	930f      	str	r3, [sp, #60]	@ 0x3c

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 80015f0:	a908      	add	r1, sp, #32
 80015f2:	4830      	ldr	r0, [pc, #192]	@ (80016b4 <IIS2DLPC_0_Probe+0xec>)
 80015f4:	f7ff fab6 	bl	8000b64 <IIS2DLPC_RegisterBusIO>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d142      	bne.n	8001682 <IIS2DLPC_0_Probe+0xba>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 80015fc:	f10d 011f 	add.w	r1, sp, #31
 8001600:	482c      	ldr	r0, [pc, #176]	@ (80016b4 <IIS2DLPC_0_Probe+0xec>)
 8001602:	f7ff f899 	bl	8000738 <IIS2DLPC_ReadID>
 8001606:	4605      	mov	r5, r0
 8001608:	2800      	cmp	r0, #0
 800160a:	d13d      	bne.n	8001688 <IIS2DLPC_0_Probe+0xc0>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != IIS2DLPC_ID)
 800160c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001610:	2b44      	cmp	r3, #68	@ 0x44
 8001612:	d13c      	bne.n	800168e <IIS2DLPC_0_Probe+0xc6>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 8001614:	4e27      	ldr	r6, [pc, #156]	@ (80016b4 <IIS2DLPC_0_Probe+0xec>)
 8001616:	4669      	mov	r1, sp
 8001618:	4630      	mov	r0, r6
 800161a:	f7fe fe9d 	bl	8000358 <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800161e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001622:	f89d 1000 	ldrb.w	r1, [sp]
 8001626:	ea42 0341 	orr.w	r3, r2, r1, lsl #1
 800162a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800162e:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8001632:	4821      	ldr	r0, [pc, #132]	@ (80016b8 <IIS2DLPC_0_Probe+0xf0>)
 8001634:	6043      	str	r3, [r0, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <IIS2DLPC_0_Probe+0xf4>)
 8001638:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <IIS2DLPC_0_Probe+0xf8>)
 800163c:	4821      	ldr	r0, [pc, #132]	@ (80016c4 <IIS2DLPC_0_Probe+0xfc>)
 800163e:	6058      	str	r0, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8001640:	f014 0f01 	tst.w	r4, #1
 8001644:	d001      	beq.n	800164a <IIS2DLPC_0_Probe+0x82>
 8001646:	2a01      	cmp	r2, #1
 8001648:	d018      	beq.n	800167c <IIS2DLPC_0_Probe+0xb4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800164a:	f014 0f02 	tst.w	r4, #2
 800164e:	d001      	beq.n	8001654 <IIS2DLPC_0_Probe+0x8c>
 8001650:	2901      	cmp	r1, #1
 8001652:	d006      	beq.n	8001662 <IIS2DLPC_0_Probe+0x9a>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8001654:	b915      	cbnz	r5, 800165c <IIS2DLPC_0_Probe+0x94>
 8001656:	f014 0f04 	tst.w	r4, #4
 800165a:	d11b      	bne.n	8001694 <IIS2DLPC_0_Probe+0xcc>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 800165c:	4628      	mov	r0, r5
 800165e:	b010      	add	sp, #64	@ 0x40
 8001660:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <IIS2DLPC_0_Probe+0x100>)
 8001664:	4a19      	ldr	r2, [pc, #100]	@ (80016cc <IIS2DLPC_0_Probe+0x104>)
 8001666:	611a      	str	r2, [r3, #16]
      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <IIS2DLPC_0_Probe+0xfc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <IIS2DLPC_0_Probe+0xec>)
 800166e:	4798      	blx	r3
 8001670:	4605      	mov	r5, r0
 8001672:	2800      	cmp	r0, #0
 8001674:	d0ef      	beq.n	8001656 <IIS2DLPC_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001676:	f06f 0504 	mvn.w	r5, #4
 800167a:	e7ef      	b.n	800165c <IIS2DLPC_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800167c:	f06f 0504 	mvn.w	r5, #4
 8001680:	e7e8      	b.n	8001654 <IIS2DLPC_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001682:	f06f 0506 	mvn.w	r5, #6
 8001686:	e7e9      	b.n	800165c <IIS2DLPC_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001688:	f06f 0506 	mvn.w	r5, #6
 800168c:	e7e6      	b.n	800165c <IIS2DLPC_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800168e:	f06f 0506 	mvn.w	r5, #6
 8001692:	e7e3      	b.n	800165c <IIS2DLPC_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001694:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8001698:	e7e0      	b.n	800165c <IIS2DLPC_0_Probe+0x94>
 800169a:	bf00      	nop
 800169c:	080077ed 	.word	0x080077ed
 80016a0:	080076e9 	.word	0x080076e9
 80016a4:	0800775d 	.word	0x0800775d
 80016a8:	08007721 	.word	0x08007721
 80016ac:	08007799 	.word	0x08007799
 80016b0:	080032f5 	.word	0x080032f5
 80016b4:	20000134 	.word	0x20000134
 80016b8:	200001a8 	.word	0x200001a8
 80016bc:	200001e4 	.word	0x200001e4
 80016c0:	200001b4 	.word	0x200001b4
 80016c4:	2000002c 	.word	0x2000002c
 80016c8:	200001c0 	.word	0x200001c0
 80016cc:	20000008 	.word	0x20000008

080016d0 <IIS2MDC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	b090      	sub	sp, #64	@ 0x40
 80016d4:	4604      	mov	r4, r0
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 80016d6:	2300      	movs	r3, #0
 80016d8:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 80016da:	233d      	movs	r3, #61	@ 0x3d
 80016dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS02A1_I2C_INIT;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <IIS2MDC_0_Probe+0xd0>)
 80016e2:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DEINIT;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <IIS2MDC_0_Probe+0xd4>)
 80016e6:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_READ_REG;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <IIS2MDC_0_Probe+0xd8>)
 80016ea:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WRITE_REG;
 80016ec:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <IIS2MDC_0_Probe+0xdc>)
 80016ee:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS02A1_GET_TICK;
 80016f0:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <IIS2MDC_0_Probe+0xe0>)
 80016f2:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS02A1_DELAY;
 80016f4:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <IIS2MDC_0_Probe+0xe4>)
 80016f6:	930f      	str	r3, [sp, #60]	@ 0x3c

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 80016f8:	a908      	add	r1, sp, #32
 80016fa:	482f      	ldr	r0, [pc, #188]	@ (80017b8 <IIS2MDC_0_Probe+0xe8>)
 80016fc:	f7ff fdb8 	bl	8001270 <IIS2MDC_RegisterBusIO>
 8001700:	2800      	cmp	r0, #0
 8001702:	d141      	bne.n	8001788 <IIS2MDC_0_Probe+0xb8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8001704:	f10d 011f 	add.w	r1, sp, #31
 8001708:	482b      	ldr	r0, [pc, #172]	@ (80017b8 <IIS2MDC_0_Probe+0xe8>)
 800170a:	f7ff fd29 	bl	8001160 <IIS2MDC_ReadID>
 800170e:	4605      	mov	r5, r0
 8001710:	2800      	cmp	r0, #0
 8001712:	d13c      	bne.n	800178e <IIS2MDC_0_Probe+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != IIS2MDC_ID)
 8001714:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001718:	2b40      	cmp	r3, #64	@ 0x40
 800171a:	d13b      	bne.n	8001794 <IIS2MDC_0_Probe+0xc4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 800171c:	4e26      	ldr	r6, [pc, #152]	@ (80017b8 <IIS2MDC_0_Probe+0xe8>)
 800171e:	4669      	mov	r1, sp
 8001720:	4630      	mov	r0, r6
 8001722:	f7ff fc61 	bl	8000fe8 <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8001726:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800172a:	f89d 1000 	ldrb.w	r1, [sp]
 800172e:	ea42 0341 	orr.w	r3, r2, r1, lsl #1
 8001732:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8001736:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800173a:	4820      	ldr	r0, [pc, #128]	@ (80017bc <IIS2MDC_0_Probe+0xec>)
 800173c:	6083      	str	r3, [r0, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <IIS2MDC_0_Probe+0xf0>)
 8001740:	609e      	str	r6, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <IIS2MDC_0_Probe+0xf4>)
 8001744:	4820      	ldr	r0, [pc, #128]	@ (80017c8 <IIS2MDC_0_Probe+0xf8>)
 8001746:	6098      	str	r0, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8001748:	f014 0f01 	tst.w	r4, #1
 800174c:	d001      	beq.n	8001752 <IIS2MDC_0_Probe+0x82>
 800174e:	2a01      	cmp	r2, #1
 8001750:	d014      	beq.n	800177c <IIS2MDC_0_Probe+0xac>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8001752:	f014 0f02 	tst.w	r4, #2
 8001756:	d001      	beq.n	800175c <IIS2MDC_0_Probe+0x8c>
 8001758:	2901      	cmp	r1, #1
 800175a:	d01e      	beq.n	800179a <IIS2MDC_0_Probe+0xca>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800175c:	b95d      	cbnz	r5, 8001776 <IIS2MDC_0_Probe+0xa6>
 800175e:	f014 0f04 	tst.w	r4, #4
 8001762:	d008      	beq.n	8001776 <IIS2MDC_0_Probe+0xa6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <IIS2MDC_0_Probe+0xfc>)
 8001766:	4a1a      	ldr	r2, [pc, #104]	@ (80017d0 <IIS2MDC_0_Probe+0x100>)
 8001768:	621a      	str	r2, [r3, #32]
                                                                          void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <IIS2MDC_0_Probe+0xf8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4812      	ldr	r0, [pc, #72]	@ (80017b8 <IIS2MDC_0_Probe+0xe8>)
 8001770:	4798      	blx	r3
 8001772:	4605      	mov	r5, r0
 8001774:	b928      	cbnz	r0, 8001782 <IIS2MDC_0_Probe+0xb2>
        ret = BSP_ERROR_NONE;
      }
    }
  }
  return ret;
}
 8001776:	4628      	mov	r0, r5
 8001778:	b010      	add	sp, #64	@ 0x40
 800177a:	bd70      	pop	{r4, r5, r6, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800177c:	f06f 0504 	mvn.w	r5, #4
 8001780:	e7ec      	b.n	800175c <IIS2MDC_0_Probe+0x8c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001782:	f06f 0504 	mvn.w	r5, #4
 8001786:	e7f6      	b.n	8001776 <IIS2MDC_0_Probe+0xa6>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001788:	f06f 0506 	mvn.w	r5, #6
 800178c:	e7f3      	b.n	8001776 <IIS2MDC_0_Probe+0xa6>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800178e:	f06f 0506 	mvn.w	r5, #6
 8001792:	e7f0      	b.n	8001776 <IIS2MDC_0_Probe+0xa6>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001794:	f06f 0506 	mvn.w	r5, #6
 8001798:	e7ed      	b.n	8001776 <IIS2MDC_0_Probe+0xa6>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800179a:	f06f 0504 	mvn.w	r5, #4
  return ret;
 800179e:	e7ea      	b.n	8001776 <IIS2MDC_0_Probe+0xa6>
 80017a0:	080077ed 	.word	0x080077ed
 80017a4:	080076e9 	.word	0x080076e9
 80017a8:	0800775d 	.word	0x0800775d
 80017ac:	08007721 	.word	0x08007721
 80017b0:	08007799 	.word	0x08007799
 80017b4:	080032f5 	.word	0x080032f5
 80017b8:	20000100 	.word	0x20000100
 80017bc:	200001a8 	.word	0x200001a8
 80017c0:	200001e4 	.word	0x200001e4
 80017c4:	200001b4 	.word	0x200001b4
 80017c8:	20000060 	.word	0x20000060
 80017cc:	200001c0 	.word	0x200001c0
 80017d0:	2000003c 	.word	0x2000003c

080017d4 <IKS02A1_MOTION_SENSOR_Init>:
{
 80017d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d8:	b088      	sub	sp, #32
 80017da:	4604      	mov	r4, r0
 80017dc:	460f      	mov	r7, r1
  switch (Instance)
 80017de:	2801      	cmp	r0, #1
 80017e0:	d030      	beq.n	8001844 <IKS02A1_MOTION_SENSOR_Init+0x70>
 80017e2:	2802      	cmp	r0, #2
 80017e4:	d055      	beq.n	8001892 <IKS02A1_MOTION_SENSOR_Init+0xbe>
 80017e6:	b110      	cbz	r0, 80017ee <IKS02A1_MOTION_SENSOR_Init+0x1a>
 80017e8:	f06f 0001 	mvn.w	r0, #1
 80017ec:	e095      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 80017ee:	4608      	mov	r0, r1
 80017f0:	f7ff fe52 	bl	8001498 <ISM330DHCX_0_Probe>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	f040 8093 	bne.w	8001920 <IKS02A1_MOTION_SENSOR_Init+0x14c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80017fa:	4b52      	ldr	r3, [pc, #328]	@ (8001944 <IKS02A1_MOTION_SENSOR_Init+0x170>)
 80017fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	a901      	add	r1, sp, #4
 8001804:	4a50      	ldr	r2, [pc, #320]	@ (8001948 <IKS02A1_MOTION_SENSOR_Init+0x174>)
 8001806:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800180a:	4798      	blx	r3
 800180c:	2800      	cmp	r0, #0
 800180e:	f040 808a 	bne.w	8001926 <IKS02A1_MOTION_SENSOR_Init+0x152>
      if (cap.Acc == 1U)
 8001812:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d00b      	beq.n	8001832 <IKS02A1_MOTION_SENSOR_Init+0x5e>
  uint32_t component_functions = 0;
 800181a:	46a0      	mov	r8, r4
      if (cap.Gyro == 1U)
 800181c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d009      	beq.n	8001838 <IKS02A1_MOTION_SENSOR_Init+0x64>
      if (cap.Magneto == 1U)
 8001824:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d008      	beq.n	800183e <IKS02A1_MOTION_SENSOR_Init+0x6a>
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 800182c:	2600      	movs	r6, #0
  uint32_t function = MOTION_GYRO;
 800182e:	2501      	movs	r5, #1
 8001830:	e057      	b.n	80018e2 <IKS02A1_MOTION_SENSOR_Init+0x10e>
        component_functions |= MOTION_ACCELERO;
 8001832:	f04f 0802 	mov.w	r8, #2
 8001836:	e7f1      	b.n	800181c <IKS02A1_MOTION_SENSOR_Init+0x48>
        component_functions |= MOTION_GYRO;
 8001838:	f048 0801 	orr.w	r8, r8, #1
 800183c:	e7f2      	b.n	8001824 <IKS02A1_MOTION_SENSOR_Init+0x50>
        component_functions |= MOTION_MAGNETO;
 800183e:	f048 0804 	orr.w	r8, r8, #4
 8001842:	e7f3      	b.n	800182c <IKS02A1_MOTION_SENSOR_Init+0x58>
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 8001844:	4608      	mov	r0, r1
 8001846:	f7ff febf 	bl	80015c8 <IIS2DLPC_0_Probe>
 800184a:	2800      	cmp	r0, #0
 800184c:	d16e      	bne.n	800192c <IKS02A1_MOTION_SENSOR_Init+0x158>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800184e:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <IKS02A1_MOTION_SENSOR_Init+0x170>)
 8001850:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	a901      	add	r1, sp, #4
 8001858:	4a3b      	ldr	r2, [pc, #236]	@ (8001948 <IKS02A1_MOTION_SENSOR_Init+0x174>)
 800185a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800185e:	4798      	blx	r3
 8001860:	2800      	cmp	r0, #0
 8001862:	d166      	bne.n	8001932 <IKS02A1_MOTION_SENSOR_Init+0x15e>
      if (cap.Acc == 1U)
 8001864:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00c      	beq.n	8001886 <IKS02A1_MOTION_SENSOR_Init+0xb2>
  uint32_t component_functions = 0;
 800186c:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8001870:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d009      	beq.n	800188c <IKS02A1_MOTION_SENSOR_Init+0xb8>
      if (cap.Magneto == 1U)
 8001878:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d1d5      	bne.n	800182c <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 8001880:	f048 0804 	orr.w	r8, r8, #4
 8001884:	e7d2      	b.n	800182c <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 8001886:	f04f 0802 	mov.w	r8, #2
 800188a:	e7f1      	b.n	8001870 <IKS02A1_MOTION_SENSOR_Init+0x9c>
        component_functions |= MOTION_GYRO;
 800188c:	f048 0801 	orr.w	r8, r8, #1
 8001890:	e7f2      	b.n	8001878 <IKS02A1_MOTION_SENSOR_Init+0xa4>
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8001892:	4608      	mov	r0, r1
 8001894:	f7ff ff1c 	bl	80016d0 <IIS2MDC_0_Probe>
 8001898:	2800      	cmp	r0, #0
 800189a:	d14d      	bne.n	8001938 <IKS02A1_MOTION_SENSOR_Init+0x164>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800189c:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <IKS02A1_MOTION_SENSOR_Init+0x170>)
 800189e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	a901      	add	r1, sp, #4
 80018a6:	4a28      	ldr	r2, [pc, #160]	@ (8001948 <IKS02A1_MOTION_SENSOR_Init+0x174>)
 80018a8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80018ac:	4798      	blx	r3
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d145      	bne.n	800193e <IKS02A1_MOTION_SENSOR_Init+0x16a>
      if (cap.Acc == 1U)
 80018b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d00c      	beq.n	80018d4 <IKS02A1_MOTION_SENSOR_Init+0x100>
  uint32_t component_functions = 0;
 80018ba:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 80018be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d008      	beq.n	80018d8 <IKS02A1_MOTION_SENSOR_Init+0x104>
      if (cap.Magneto == 1U)
 80018c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d1ae      	bne.n	800182c <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 80018ce:	f048 0804 	orr.w	r8, r8, #4
 80018d2:	e7ab      	b.n	800182c <IKS02A1_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 80018d4:	46a0      	mov	r8, r4
 80018d6:	e7f2      	b.n	80018be <IKS02A1_MOTION_SENSOR_Init+0xea>
        component_functions |= MOTION_GYRO;
 80018d8:	f048 0801 	orr.w	r8, r8, #1
 80018dc:	e7f3      	b.n	80018c6 <IKS02A1_MOTION_SENSOR_Init+0xf2>
    function = function << 1;
 80018de:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 80018e0:	3601      	adds	r6, #1
 80018e2:	2e02      	cmp	r6, #2
 80018e4:	d818      	bhi.n	8001918 <IKS02A1_MOTION_SENSOR_Init+0x144>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80018e6:	ea35 0307 	bics.w	r3, r5, r7
 80018ea:	d1f8      	bne.n	80018de <IKS02A1_MOTION_SENSOR_Init+0x10a>
 80018ec:	ea35 0308 	bics.w	r3, r5, r8
 80018f0:	d1f5      	bne.n	80018de <IKS02A1_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <IKS02A1_MOTION_SENSOR_Init+0x178>)
 80018f4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80018f8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80018fc:	4413      	add	r3, r2
 80018fe:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <IKS02A1_MOTION_SENSOR_Init+0x17c>)
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <IKS02A1_MOTION_SENSOR_Init+0x174>)
 8001908:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800190c:	4798      	blx	r3
 800190e:	2800      	cmp	r0, #0
 8001910:	d0e5      	beq.n	80018de <IKS02A1_MOTION_SENSOR_Init+0x10a>
        return BSP_ERROR_COMPONENT_FAILURE;
 8001912:	f06f 0004 	mvn.w	r0, #4
 8001916:	e000      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
 8001918:	2000      	movs	r0, #0
}
 800191a:	b008      	add	sp, #32
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	e7f9      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8001926:	f06f 0006 	mvn.w	r0, #6
 800192a:	e7f6      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	e7f3      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8001932:	f06f 0006 	mvn.w	r0, #6
 8001936:	e7f0      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	e7ed      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800193e:	f06f 0006 	mvn.w	r0, #6
 8001942:	e7ea      	b.n	800191a <IKS02A1_MOTION_SENSOR_Init+0x146>
 8001944:	200001b4 	.word	0x200001b4
 8001948:	200001e4 	.word	0x200001e4
 800194c:	0800791c 	.word	0x0800791c
 8001950:	200001c0 	.word	0x200001c0

08001954 <IKS02A1_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8001954:	2802      	cmp	r0, #2
 8001956:	d81b      	bhi.n	8001990 <IKS02A1_MOTION_SENSOR_GetAxes+0x3c>
{
 8001958:	b508      	push	{r3, lr}
 800195a:	460b      	mov	r3, r1
 800195c:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800195e:	4a0f      	ldr	r2, [pc, #60]	@ (800199c <IKS02A1_MOTION_SENSOR_GetAxes+0x48>)
 8001960:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001964:	ea33 0202 	bics.w	r2, r3, r2
 8001968:	d115      	bne.n	8001996 <IKS02A1_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800196a:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <IKS02A1_MOTION_SENSOR_GetAxes+0x4c>)
 800196c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001970:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001974:	4413      	add	r3, r2
 8001976:	4a0b      	ldr	r2, [pc, #44]	@ (80019a4 <IKS02A1_MOTION_SENSOR_GetAxes+0x50>)
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <IKS02A1_MOTION_SENSOR_GetAxes+0x54>)
 8001980:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001984:	4798      	blx	r3
 8001986:	b900      	cbnz	r0, 800198a <IKS02A1_MOTION_SENSOR_GetAxes+0x36>
}
 8001988:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800198a:	f06f 0004 	mvn.w	r0, #4
 800198e:	e7fb      	b.n	8001988 <IKS02A1_MOTION_SENSOR_GetAxes+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8001990:	f06f 0001 	mvn.w	r0, #1
}
 8001994:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8001996:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800199a:	e7f5      	b.n	8001988 <IKS02A1_MOTION_SENSOR_GetAxes+0x34>
 800199c:	200001a8 	.word	0x200001a8
 80019a0:	0800791c 	.word	0x0800791c
 80019a4:	200001c0 	.word	0x200001c0
 80019a8:	200001e4 	.word	0x200001e4

080019ac <IKS02A1_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d819      	bhi.n	80019e4 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x38>
{
 80019b0:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x44>)
 80019b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80019b8:	ea31 0303 	bics.w	r3, r1, r3
 80019bc:	d115      	bne.n	80019ea <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x48>)
 80019c0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80019c4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80019c8:	4413      	add	r3, r2
 80019ca:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x50>)
 80019d4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80019d8:	4798      	blx	r3
 80019da:	b900      	cbnz	r0, 80019de <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x32>
}
 80019dc:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80019de:	f06f 0004 	mvn.w	r0, #4
 80019e2:	e7fb      	b.n	80019dc <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80019e4:	f06f 0001 	mvn.w	r0, #1
}
 80019e8:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 80019ea:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80019ee:	e7f5      	b.n	80019dc <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x30>
 80019f0:	200001a8 	.word	0x200001a8
 80019f4:	0800791c 	.word	0x0800791c
 80019f8:	200001c0 	.word	0x200001c0
 80019fc:	200001e4 	.word	0x200001e4

08001a00 <IKS02A1_MOTION_SENSOR_SetFullScale>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8001a00:	2802      	cmp	r0, #2
 8001a02:	d81b      	bhi.n	8001a3c <IKS02A1_MOTION_SENSOR_SetFullScale+0x3c>
{
 8001a04:	b508      	push	{r3, lr}
 8001a06:	460b      	mov	r3, r1
 8001a08:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <IKS02A1_MOTION_SENSOR_SetFullScale+0x48>)
 8001a0c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001a10:	ea33 0202 	bics.w	r2, r3, r2
 8001a14:	d115      	bne.n	8001a42 <IKS02A1_MOTION_SENSOR_SetFullScale+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8001a16:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <IKS02A1_MOTION_SENSOR_SetFullScale+0x4c>)
 8001a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a1c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001a20:	4413      	add	r3, r2
 8001a22:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <IKS02A1_MOTION_SENSOR_SetFullScale+0x50>)
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <IKS02A1_MOTION_SENSOR_SetFullScale+0x54>)
 8001a2c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001a30:	4798      	blx	r3
 8001a32:	b900      	cbnz	r0, 8001a36 <IKS02A1_MOTION_SENSOR_SetFullScale+0x36>
}
 8001a34:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a36:	f06f 0004 	mvn.w	r0, #4
 8001a3a:	e7fb      	b.n	8001a34 <IKS02A1_MOTION_SENSOR_SetFullScale+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8001a3c:	f06f 0001 	mvn.w	r0, #1
}
 8001a40:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8001a42:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8001a46:	e7f5      	b.n	8001a34 <IKS02A1_MOTION_SENSOR_SetFullScale+0x34>
 8001a48:	200001a8 	.word	0x200001a8
 8001a4c:	0800791c 	.word	0x0800791c
 8001a50:	200001c0 	.word	0x200001c0
 8001a54:	200001e4 	.word	0x200001e4

08001a58 <ISM330DHCX_GetCapabilities>:
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8001a5c:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8001a62:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 4000;
 8001a64:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001a68:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8001a6e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8001a70:	4b02      	ldr	r3, [pc, #8]	@ (8001a7c <ISM330DHCX_GetCapabilities+0x24>)
 8001a72:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8001a74:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001a76:	2300      	movs	r3, #0
 8001a78:	618b      	str	r3, [r1, #24]
  return ISM330DHCX_OK;
}
 8001a7a:	4770      	bx	lr
 8001a7c:	45d05800 	.word	0x45d05800

08001a80 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001a80:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8001a84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	d939      	bls.n	8001b02 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x82>
 8001a8e:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8001a92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	d937      	bls.n	8001b0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x8c>
 8001a9c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8001b2c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xac>
 8001aa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d932      	bls.n	8001b10 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001aaa:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8001b30 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8001aae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d92d      	bls.n	8001b14 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x94>
 8001ab8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001b34 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb4>
 8001abc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	d928      	bls.n	8001b18 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x98>
 8001ac6:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8001b38 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8001aca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d923      	bls.n	8001b1c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x9c>
 8001ad4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8001b3c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001ad8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d91e      	bls.n	8001b20 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa0>
 8001ae2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8001ae6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	d919      	bls.n	8001b24 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8001af0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8001b44 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8001af4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	d814      	bhi.n	8001b28 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e000      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b02:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8001b04:	f880 3033 	strb.w	r3, [r0, #51]	@ 0x33
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
}
 8001b08:	2000      	movs	r0, #0
 8001b0a:	4770      	bx	lr
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e7f9      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e7f7      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e7f5      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e7f3      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	e7f1      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b20:	2307      	movs	r3, #7
 8001b22:	e7ef      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b24:	2308      	movs	r3, #8
 8001b26:	e7ed      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b28:	230a      	movs	r3, #10
 8001b2a:	e7eb      	b.n	8001b04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x84>
 8001b2c:	42500000 	.word	0x42500000
 8001b30:	42d00000 	.word	0x42d00000
 8001b34:	43500000 	.word	0x43500000
 8001b38:	43d00000 	.word	0x43d00000
 8001b3c:	44504000 	.word	0x44504000
 8001b40:	44d04000 	.word	0x44d04000
 8001b44:	45504000 	.word	0x45504000

08001b48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8001b48:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8001b4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d939      	bls.n	8001bca <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x82>
 8001b56:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8001b5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	d937      	bls.n	8001bd4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x8c>
 8001b64:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8001bf4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8001b68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d932      	bls.n	8001bd8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8001b72:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8001bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8001b76:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d92d      	bls.n	8001bdc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x94>
 8001b80:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001bfc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 8001b84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	d928      	bls.n	8001be0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x98>
 8001b8e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8001c00 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 8001b92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d923      	bls.n	8001be4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8001b9c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8001c04 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8001ba0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d91e      	bls.n	8001be8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 8001baa:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8001c08 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 8001bae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	d919      	bls.n	8001bec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8001bb8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8001c0c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 8001bbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d814      	bhi.n	8001bf0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	e000      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001bca:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8001bcc:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
}
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	4770      	bx	lr
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e7f9      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e7f7      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e7f5      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001be0:	2305      	movs	r3, #5
 8001be2:	e7f3      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001be4:	2306      	movs	r3, #6
 8001be6:	e7f1      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001be8:	2307      	movs	r3, #7
 8001bea:	e7ef      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001bec:	2308      	movs	r3, #8
 8001bee:	e7ed      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	e7eb      	b.n	8001bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8001bf4:	42500000 	.word	0x42500000
 8001bf8:	42d00000 	.word	0x42d00000
 8001bfc:	43500000 	.word	0x43500000
 8001c00:	43d00000 	.word	0x43d00000
 8001c04:	44504000 	.word	0x44504000
 8001c08:	44d04000 	.word	0x44d04000
 8001c0c:	45504000 	.word	0x45504000

08001c10 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c10:	b510      	push	{r4, lr}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c12:	6944      	ldr	r4, [r0, #20]
 8001c14:	7b00      	ldrb	r0, [r0, #12]
 8001c16:	47a0      	blx	r4
}
 8001c18:	bd10      	pop	{r4, pc}

08001c1a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c1a:	b510      	push	{r4, lr}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001c1c:	6904      	ldr	r4, [r0, #16]
 8001c1e:	7b00      	ldrb	r0, [r0, #12]
 8001c20:	47a0      	blx	r4
}
 8001c22:	bd10      	pop	{r4, pc}

08001c24 <ISM330DHCX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8001c24:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d00b      	beq.n	8001c44 <ISM330DHCX_ACC_Enable+0x20>
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8001c30:	f890 1033 	ldrb.w	r1, [r0, #51]	@ 0x33
 8001c34:	3020      	adds	r0, #32
 8001c36:	f000 fef4 	bl	8002a22 <ism330dhcx_xl_data_rate_set>
 8001c3a:	b928      	cbnz	r0, 8001c48 <ISM330DHCX_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 8001c42:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 8001c44:	2000      	movs	r0, #0
}
 8001c46:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	e7f9      	b.n	8001c42 <ISM330DHCX_ACC_Enable+0x1e>
	...

08001c50 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
{
 8001c50:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001c52:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8001c56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	d939      	bls.n	8001cd4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x84>
 8001c60:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8001c64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d938      	bls.n	8001ce0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8001c6e:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8001d08 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8001c72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	d933      	bls.n	8001ce4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x94>
 8001c7c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8001d0c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001c80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	d92e      	bls.n	8001ce8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x98>
 8001c8a:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8001d10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8001c8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	d929      	bls.n	8001cec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x9c>
 8001c98:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001d14 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xc4>
 8001c9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	d924      	bls.n	8001cf0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa0>
 8001ca6:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8001d18 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xc8>
 8001caa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	d91f      	bls.n	8001cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa4>
 8001cb4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8001d1c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xcc>
 8001cb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d91a      	bls.n	8001cf8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa8>
 8001cc2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8001d20 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8001cc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d815      	bhi.n	8001cfc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xac>
 8001cd0:	2109      	movs	r1, #9
 8001cd2:	e000      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001cd4:	2101      	movs	r1, #1
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8001cd6:	3020      	adds	r0, #32
 8001cd8:	f000 fea3 	bl	8002a22 <ism330dhcx_xl_data_rate_set>
 8001cdc:	b980      	cbnz	r0, 8001d00 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb0>
}
 8001cde:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	e7f8      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	e7f6      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001ce8:	2104      	movs	r1, #4
 8001cea:	e7f4      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001cec:	2105      	movs	r1, #5
 8001cee:	e7f2      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001cf0:	2106      	movs	r1, #6
 8001cf2:	e7f0      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001cf4:	2107      	movs	r1, #7
 8001cf6:	e7ee      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	e7ec      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8001cfc:	210a      	movs	r1, #10
 8001cfe:	e7ea      	b.n	8001cd6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
    return ISM330DHCX_ERROR;
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	e7eb      	b.n	8001cde <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x8e>
 8001d06:	bf00      	nop
 8001d08:	42500000 	.word	0x42500000
 8001d0c:	42d00000 	.word	0x42d00000
 8001d10:	43500000 	.word	0x43500000
 8001d14:	43d00000 	.word	0x43d00000
 8001d18:	44504000 	.word	0x44504000
 8001d1c:	44d04000 	.word	0x44d04000
 8001d20:	45504000 	.word	0x45504000

08001d24 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 8001d24:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8001d26:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <ISM330DHCX_ACC_SetOutputDataRate+0x10>
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001d2e:	f7ff fea7 	bl	8001a80 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
}
 8001d32:	bd08      	pop	{r3, pc}
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001d34:	f7ff ff8c 	bl	8001c50 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8001d38:	e7fb      	b.n	8001d32 <ISM330DHCX_ACC_SetOutputDataRate+0xe>

08001d3a <ISM330DHCX_ACC_SetFullScale>:
{
 8001d3a:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 8001d3c:	2902      	cmp	r1, #2
 8001d3e:	dd05      	ble.n	8001d4c <ISM330DHCX_ACC_SetFullScale+0x12>
 8001d40:	2904      	cmp	r1, #4
 8001d42:	dd09      	ble.n	8001d58 <ISM330DHCX_ACC_SetFullScale+0x1e>
 8001d44:	2908      	cmp	r1, #8
 8001d46:	dc09      	bgt.n	8001d5c <ISM330DHCX_ACC_SetFullScale+0x22>
 8001d48:	2103      	movs	r1, #3
 8001d4a:	e000      	b.n	8001d4e <ISM330DHCX_ACC_SetFullScale+0x14>
 8001d4c:	2100      	movs	r1, #0
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8001d4e:	3020      	adds	r0, #32
 8001d50:	f000 fbf2 	bl	8002538 <ism330dhcx_xl_full_scale_set>
 8001d54:	b920      	cbnz	r0, 8001d60 <ISM330DHCX_ACC_SetFullScale+0x26>
}
 8001d56:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 8001d58:	2102      	movs	r1, #2
 8001d5a:	e7f8      	b.n	8001d4e <ISM330DHCX_ACC_SetFullScale+0x14>
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	e7f6      	b.n	8001d4e <ISM330DHCX_ACC_SetFullScale+0x14>
    return ISM330DHCX_ERROR;
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	e7f7      	b.n	8001d56 <ISM330DHCX_ACC_SetFullScale+0x1c>

08001d66 <ISM330DHCX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8001d66:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d00b      	beq.n	8001d86 <ISM330DHCX_GYRO_Enable+0x20>
{
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8001d72:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001d76:	3020      	adds	r0, #32
 8001d78:	f000 ff3a 	bl	8002bf0 <ism330dhcx_gy_data_rate_set>
 8001d7c:	b928      	cbnz	r0, 8001d8a <ISM330DHCX_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
}
 8001d84:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 8001d86:	2000      	movs	r0, #0
}
 8001d88:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8001d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8e:	e7f9      	b.n	8001d84 <ISM330DHCX_GYRO_Enable+0x1e>

08001d90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
{
 8001d90:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8001d92:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
 8001d96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d939      	bls.n	8001e14 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x84>
 8001da0:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8001da4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d938      	bls.n	8001e20 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8001dae:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8001e48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb8>
 8001db2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d933      	bls.n	8001e24 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8001dbc:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8001e4c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8001dc0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d92e      	bls.n	8001e28 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x98>
 8001dca:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8001e50 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8001dce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d929      	bls.n	8001e2c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8001dd8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001e54 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 8001ddc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d924      	bls.n	8001e30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 8001de6:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8001e58 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 8001dea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d91f      	bls.n	8001e34 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8001df4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8001e5c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 8001df8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d91a      	bls.n	8001e38 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8001e02:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8001e60 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 8001e06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d815      	bhi.n	8001e3c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8001e10:	2109      	movs	r1, #9
 8001e12:	e000      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e14:	2101      	movs	r1, #1
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8001e16:	3020      	adds	r0, #32
 8001e18:	f000 feea 	bl	8002bf0 <ism330dhcx_gy_data_rate_set>
 8001e1c:	b980      	cbnz	r0, 8001e40 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb0>
}
 8001e1e:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8001e20:	2102      	movs	r1, #2
 8001e22:	e7f8      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e24:	2103      	movs	r1, #3
 8001e26:	e7f6      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e28:	2104      	movs	r1, #4
 8001e2a:	e7f4      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	e7f2      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e30:	2106      	movs	r1, #6
 8001e32:	e7f0      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e34:	2107      	movs	r1, #7
 8001e36:	e7ee      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e38:	2108      	movs	r1, #8
 8001e3a:	e7ec      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8001e3c:	210a      	movs	r1, #10
 8001e3e:	e7ea      	b.n	8001e16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return ISM330DHCX_ERROR;
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	e7eb      	b.n	8001e1e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 8001e46:	bf00      	nop
 8001e48:	42500000 	.word	0x42500000
 8001e4c:	42d00000 	.word	0x42d00000
 8001e50:	43500000 	.word	0x43500000
 8001e54:	43d00000 	.word	0x43d00000
 8001e58:	44504000 	.word	0x44504000
 8001e5c:	44d04000 	.word	0x44d04000
 8001e60:	45504000 	.word	0x45504000

08001e64 <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 8001e64:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 8001e66:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d002      	beq.n	8001e74 <ISM330DHCX_GYRO_SetOutputDataRate+0x10>
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e6e:	f7ff fe6b 	bl	8001b48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
}
 8001e72:	bd08      	pop	{r3, pc}
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e74:	f7ff ff8c 	bl	8001d90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8001e78:	e7fb      	b.n	8001e72 <ISM330DHCX_GYRO_SetOutputDataRate+0xe>

08001e7a <ISM330DHCX_GYRO_SetFullScale>:
{
 8001e7a:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8001e7c:	297d      	cmp	r1, #125	@ 0x7d
 8001e7e:	dd0c      	ble.n	8001e9a <ISM330DHCX_GYRO_SetFullScale+0x20>
 8001e80:	29fa      	cmp	r1, #250	@ 0xfa
 8001e82:	dd10      	ble.n	8001ea6 <ISM330DHCX_GYRO_SetFullScale+0x2c>
 8001e84:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 8001e88:	dd0f      	ble.n	8001eaa <ISM330DHCX_GYRO_SetFullScale+0x30>
 8001e8a:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8001e8e:	dd0e      	ble.n	8001eae <ISM330DHCX_GYRO_SetFullScale+0x34>
 8001e90:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 8001e94:	dc0d      	bgt.n	8001eb2 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8001e96:	210c      	movs	r1, #12
 8001e98:	e000      	b.n	8001e9c <ISM330DHCX_GYRO_SetFullScale+0x22>
 8001e9a:	2102      	movs	r1, #2
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8001e9c:	3020      	adds	r0, #32
 8001e9e:	f000 fbc3 	bl	8002628 <ism330dhcx_gy_full_scale_set>
 8001ea2:	b940      	cbnz	r0, 8001eb6 <ISM330DHCX_GYRO_SetFullScale+0x3c>
}
 8001ea4:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	e7f8      	b.n	8001e9c <ISM330DHCX_GYRO_SetFullScale+0x22>
 8001eaa:	2104      	movs	r1, #4
 8001eac:	e7f6      	b.n	8001e9c <ISM330DHCX_GYRO_SetFullScale+0x22>
 8001eae:	2108      	movs	r1, #8
 8001eb0:	e7f4      	b.n	8001e9c <ISM330DHCX_GYRO_SetFullScale+0x22>
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	e7f2      	b.n	8001e9c <ISM330DHCX_GYRO_SetFullScale+0x22>
    return ISM330DHCX_ERROR;
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	e7f3      	b.n	8001ea4 <ISM330DHCX_GYRO_SetFullScale+0x2a>

08001ebc <ISM330DHCX_ReadID>:
{
 8001ebc:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8001ebe:	3020      	adds	r0, #32
 8001ec0:	f000 fcc1 	bl	8002846 <ism330dhcx_device_id_get>
 8001ec4:	b900      	cbnz	r0, 8001ec8 <ISM330DHCX_ReadID+0xc>
}
 8001ec6:	bd08      	pop	{r3, pc}
    return ISM330DHCX_ERROR;
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	e7fb      	b.n	8001ec6 <ISM330DHCX_ReadID+0xa>

08001ece <ISM330DHCX_ACC_Disable>:
{
 8001ece:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8001ed0:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001ed4:	b90b      	cbnz	r3, 8001eda <ISM330DHCX_ACC_Disable+0xc>
    return ISM330DHCX_OK;
 8001ed6:	2000      	movs	r0, #0
}
 8001ed8:	bd38      	pop	{r3, r4, r5, pc}
 8001eda:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8001edc:	f100 0520 	add.w	r5, r0, #32
 8001ee0:	f100 0133 	add.w	r1, r0, #51	@ 0x33
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f000 fb62 	bl	80025ae <ism330dhcx_xl_data_rate_get>
 8001eea:	b938      	cbnz	r0, 8001efc <ISM330DHCX_ACC_Disable+0x2e>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	4628      	mov	r0, r5
 8001ef0:	f000 fd97 	bl	8002a22 <ism330dhcx_xl_data_rate_set>
 8001ef4:	b928      	cbnz	r0, 8001f02 <ISM330DHCX_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8001ef6:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
  return ISM330DHCX_OK;
 8001efa:	e7ed      	b.n	8001ed8 <ISM330DHCX_ACC_Disable+0xa>
    return ISM330DHCX_ERROR;
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	e7ea      	b.n	8001ed8 <ISM330DHCX_ACC_Disable+0xa>
    return ISM330DHCX_ERROR;
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	e7e7      	b.n	8001ed8 <ISM330DHCX_ACC_Disable+0xa>

08001f08 <ISM330DHCX_ACC_GetOutputDataRate>:
{
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8001f0e:	f10d 0107 	add.w	r1, sp, #7
 8001f12:	3020      	adds	r0, #32
 8001f14:	f000 fb4b 	bl	80025ae <ism330dhcx_xl_data_rate_get>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d130      	bne.n	8001f7e <ISM330DHCX_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 8001f1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f20:	2b0b      	cmp	r3, #11
 8001f22:	d82f      	bhi.n	8001f84 <ISM330DHCX_ACC_GetOutputDataRate+0x7c>
 8001f24:	e8df f003 	tbb	[pc, r3]
 8001f28:	100d0a06 	.word	0x100d0a06
 8001f2c:	1c191613 	.word	0x1c191613
 8001f30:	2825221f 	.word	0x2825221f
      *Odr = 0.0f;
 8001f34:	2300      	movs	r3, #0
 8001f36:	6023      	str	r3, [r4, #0]
}
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 8001f3e:	6023      	str	r3, [r4, #0]
      break;
 8001f40:	e7fa      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <ISM330DHCX_ACC_GetOutputDataRate+0x88>)
 8001f44:	6023      	str	r3, [r4, #0]
      break;
 8001f46:	e7f7      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <ISM330DHCX_ACC_GetOutputDataRate+0x8c>)
 8001f4a:	6023      	str	r3, [r4, #0]
      break;
 8001f4c:	e7f4      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <ISM330DHCX_ACC_GetOutputDataRate+0x90>)
 8001f50:	6023      	str	r3, [r4, #0]
      break;
 8001f52:	e7f1      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <ISM330DHCX_ACC_GetOutputDataRate+0x94>)
 8001f56:	6023      	str	r3, [r4, #0]
      break;
 8001f58:	e7ee      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 416.0f;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <ISM330DHCX_ACC_GetOutputDataRate+0x98>)
 8001f5c:	6023      	str	r3, [r4, #0]
      break;
 8001f5e:	e7eb      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8001f60:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <ISM330DHCX_ACC_GetOutputDataRate+0x9c>)
 8001f62:	6023      	str	r3, [r4, #0]
      break;
 8001f64:	e7e8      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 1666.0f;
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <ISM330DHCX_ACC_GetOutputDataRate+0xa0>)
 8001f68:	6023      	str	r3, [r4, #0]
      break;
 8001f6a:	e7e5      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 3332.0f;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <ISM330DHCX_ACC_GetOutputDataRate+0xa4>)
 8001f6e:	6023      	str	r3, [r4, #0]
      break;
 8001f70:	e7e2      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <ISM330DHCX_ACC_GetOutputDataRate+0xa8>)
 8001f74:	6023      	str	r3, [r4, #0]
      break;
 8001f76:	e7df      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 1.6f;
 8001f78:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <ISM330DHCX_ACC_GetOutputDataRate+0xac>)
 8001f7a:	6023      	str	r3, [r4, #0]
      break;
 8001f7c:	e7dc      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
    return ISM330DHCX_ERROR;
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f82:	e7d9      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	e7d6      	b.n	8001f38 <ISM330DHCX_ACC_GetOutputDataRate+0x30>
 8001f8a:	bf00      	nop
 8001f8c:	41480000 	.word	0x41480000
 8001f90:	41d00000 	.word	0x41d00000
 8001f94:	42500000 	.word	0x42500000
 8001f98:	42d00000 	.word	0x42d00000
 8001f9c:	43500000 	.word	0x43500000
 8001fa0:	43d00000 	.word	0x43d00000
 8001fa4:	44504000 	.word	0x44504000
 8001fa8:	44d04000 	.word	0x44d04000
 8001fac:	45504000 	.word	0x45504000
 8001fb0:	45d05800 	.word	0x45d05800
 8001fb4:	3fcccccd 	.word	0x3fcccccd

08001fb8 <ISM330DHCX_ACC_GetSensitivity>:
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8001fbe:	f10d 0107 	add.w	r1, sp, #7
 8001fc2:	3020      	adds	r0, #32
 8001fc4:	f000 fad1 	bl	800256a <ism330dhcx_xl_full_scale_get>
 8001fc8:	b9a0      	cbnz	r0, 8001ff4 <ISM330DHCX_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 8001fca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d813      	bhi.n	8001ffa <ISM330DHCX_ACC_GetSensitivity+0x42>
 8001fd2:	e8df f003 	tbb	[pc, r3]
 8001fd6:	0c02      	.short	0x0c02
 8001fd8:	0906      	.short	0x0906
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <ISM330DHCX_ACC_GetSensitivity+0x48>)
 8001fdc:	6023      	str	r3, [r4, #0]
}
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <ISM330DHCX_ACC_GetSensitivity+0x4c>)
 8001fe4:	6023      	str	r3, [r4, #0]
      break;
 8001fe6:	e7fa      	b.n	8001fde <ISM330DHCX_ACC_GetSensitivity+0x26>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <ISM330DHCX_ACC_GetSensitivity+0x50>)
 8001fea:	6023      	str	r3, [r4, #0]
      break;
 8001fec:	e7f7      	b.n	8001fde <ISM330DHCX_ACC_GetSensitivity+0x26>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <ISM330DHCX_ACC_GetSensitivity+0x54>)
 8001ff0:	6023      	str	r3, [r4, #0]
      break;
 8001ff2:	e7f4      	b.n	8001fde <ISM330DHCX_ACC_GetSensitivity+0x26>
    return ISM330DHCX_ERROR;
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	e7f1      	b.n	8001fde <ISM330DHCX_ACC_GetSensitivity+0x26>
  switch (full_scale)
 8001ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffe:	e7ee      	b.n	8001fde <ISM330DHCX_ACC_GetSensitivity+0x26>
 8002000:	3d79db23 	.word	0x3d79db23
 8002004:	3df9db23 	.word	0x3df9db23
 8002008:	3e79db23 	.word	0x3e79db23
 800200c:	3ef9db23 	.word	0x3ef9db23

08002010 <ISM330DHCX_ACC_GetFullScale>:
{
 8002010:	b510      	push	{r4, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002016:	f10d 0107 	add.w	r1, sp, #7
 800201a:	3020      	adds	r0, #32
 800201c:	f000 faa5 	bl	800256a <ism330dhcx_xl_full_scale_get>
 8002020:	b9a0      	cbnz	r0, 800204c <ISM330DHCX_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 8002022:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d813      	bhi.n	8002052 <ISM330DHCX_ACC_GetFullScale+0x42>
 800202a:	e8df f003 	tbb	[pc, r3]
 800202e:	0c02      	.short	0x0c02
 8002030:	0906      	.short	0x0906
      *FullScale =  2;
 8002032:	2302      	movs	r3, #2
 8002034:	6023      	str	r3, [r4, #0]
}
 8002036:	b002      	add	sp, #8
 8002038:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 800203a:	2304      	movs	r3, #4
 800203c:	6023      	str	r3, [r4, #0]
      break;
 800203e:	e7fa      	b.n	8002036 <ISM330DHCX_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8002040:	2308      	movs	r3, #8
 8002042:	6023      	str	r3, [r4, #0]
      break;
 8002044:	e7f7      	b.n	8002036 <ISM330DHCX_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8002046:	2310      	movs	r3, #16
 8002048:	6023      	str	r3, [r4, #0]
      break;
 800204a:	e7f4      	b.n	8002036 <ISM330DHCX_ACC_GetFullScale+0x26>
    return ISM330DHCX_ERROR;
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	e7f1      	b.n	8002036 <ISM330DHCX_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 8002052:	f04f 30ff 	mov.w	r0, #4294967295
 8002056:	e7ee      	b.n	8002036 <ISM330DHCX_ACC_GetFullScale+0x26>

08002058 <ISM330DHCX_ACC_GetAxesRaw>:
{
 8002058:	b510      	push	{r4, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800205e:	4669      	mov	r1, sp
 8002060:	3020      	adds	r0, #32
 8002062:	f000 fb9c 	bl	800279e <ism330dhcx_acceleration_raw_get>
 8002066:	b950      	cbnz	r0, 800207e <ISM330DHCX_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8002068:	f9bd 3000 	ldrsh.w	r3, [sp]
 800206c:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 800206e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002072:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002074:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002078:	80a3      	strh	r3, [r4, #4]
}
 800207a:	b002      	add	sp, #8
 800207c:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
 8002082:	e7fa      	b.n	800207a <ISM330DHCX_ACC_GetAxesRaw+0x22>

08002084 <ISM330DHCX_ACC_GetAxes>:
{
 8002084:	b530      	push	{r4, r5, lr}
 8002086:	b085      	sub	sp, #20
 8002088:	4605      	mov	r5, r0
 800208a:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002090:	a902      	add	r1, sp, #8
 8002092:	3020      	adds	r0, #32
 8002094:	f000 fb83 	bl	800279e <ism330dhcx_acceleration_raw_get>
 8002098:	bb60      	cbnz	r0, 80020f4 <ISM330DHCX_ACC_GetAxes+0x70>
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800209a:	a901      	add	r1, sp, #4
 800209c:	4628      	mov	r0, r5
 800209e:	f7ff ff8b 	bl	8001fb8 <ISM330DHCX_ACC_GetSensitivity>
 80020a2:	bb50      	cbnz	r0, 80020fa <ISM330DHCX_ACC_GetAxes+0x76>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80020a4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80020a8:	ee07 3a10 	vmov	s14, r3
 80020ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020b0:	eddd 7a01 	vldr	s15, [sp, #4]
 80020b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80020bc:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80020c0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80020c4:	ee07 3a10 	vmov	s14, r3
 80020c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80020d4:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80020d8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80020dc:	ee07 3a10 	vmov	s14, r3
 80020e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ec:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80020f0:	b005      	add	sp, #20
 80020f2:	bd30      	pop	{r4, r5, pc}
    return ISM330DHCX_ERROR;
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	e7fa      	b.n	80020f0 <ISM330DHCX_ACC_GetAxes+0x6c>
    return ISM330DHCX_ERROR;
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295
 80020fe:	e7f7      	b.n	80020f0 <ISM330DHCX_ACC_GetAxes+0x6c>

08002100 <ISM330DHCX_GYRO_Disable>:
{
 8002100:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8002102:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8002106:	b90b      	cbnz	r3, 800210c <ISM330DHCX_GYRO_Disable+0xc>
    return ISM330DHCX_OK;
 8002108:	2000      	movs	r0, #0
}
 800210a:	bd38      	pop	{r3, r4, r5, pc}
 800210c:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 800210e:	f100 0520 	add.w	r5, r0, #32
 8002112:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8002116:	4628      	mov	r0, r5
 8002118:	f000 facc 	bl	80026b4 <ism330dhcx_gy_data_rate_get>
 800211c:	b938      	cbnz	r0, 800212e <ISM330DHCX_GYRO_Disable+0x2e>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800211e:	2100      	movs	r1, #0
 8002120:	4628      	mov	r0, r5
 8002122:	f000 fd65 	bl	8002bf0 <ism330dhcx_gy_data_rate_set>
 8002126:	b928      	cbnz	r0, 8002134 <ISM330DHCX_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 8002128:	f884 0032 	strb.w	r0, [r4, #50]	@ 0x32
  return ISM330DHCX_OK;
 800212c:	e7ed      	b.n	800210a <ISM330DHCX_GYRO_Disable+0xa>
    return ISM330DHCX_ERROR;
 800212e:	f04f 30ff 	mov.w	r0, #4294967295
 8002132:	e7ea      	b.n	800210a <ISM330DHCX_GYRO_Disable+0xa>
    return ISM330DHCX_ERROR;
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	e7e7      	b.n	800210a <ISM330DHCX_GYRO_Disable+0xa>

0800213a <ISM330DHCX_DeInit>:
{
 800213a:	b510      	push	{r4, lr}
 800213c:	4604      	mov	r4, r0
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 800213e:	f7ff fec6 	bl	8001ece <ISM330DHCX_ACC_Disable>
 8002142:	b950      	cbnz	r0, 800215a <ISM330DHCX_DeInit+0x20>
  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ffdb 	bl	8002100 <ISM330DHCX_GYRO_Disable>
 800214a:	b948      	cbnz	r0, 8002160 <ISM330DHCX_DeInit+0x26>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800214c:	f884 0033 	strb.w	r0, [r4, #51]	@ 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8002150:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  pObj->is_initialized = 0;
 8002154:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
}
 8002158:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 800215a:	f04f 30ff 	mov.w	r0, #4294967295
 800215e:	e7fb      	b.n	8002158 <ISM330DHCX_DeInit+0x1e>
    return ISM330DHCX_ERROR;
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	e7f8      	b.n	8002158 <ISM330DHCX_DeInit+0x1e>
	...

08002168 <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 8002168:	b510      	push	{r4, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800216e:	f10d 0107 	add.w	r1, sp, #7
 8002172:	3020      	adds	r0, #32
 8002174:	f000 fa9e 	bl	80026b4 <ism330dhcx_gy_data_rate_get>
 8002178:	2800      	cmp	r0, #0
 800217a:	d12d      	bne.n	80021d8 <ISM330DHCX_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 800217c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002180:	2b0a      	cmp	r3, #10
 8002182:	d82c      	bhi.n	80021de <ISM330DHCX_GYRO_GetOutputDataRate+0x76>
 8002184:	e8df f003 	tbb	[pc, r3]
 8002188:	100d0a06 	.word	0x100d0a06
 800218c:	1c191613 	.word	0x1c191613
 8002190:	221f      	.short	0x221f
 8002192:	25          	.byte	0x25
 8002193:	00          	.byte	0x00
      *Odr = 0.0f;
 8002194:	2300      	movs	r3, #0
 8002196:	6023      	str	r3, [r4, #0]
}
 8002198:	b002      	add	sp, #8
 800219a:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 800219e:	6023      	str	r3, [r4, #0]
      break;
 80021a0:	e7fa      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 80021a4:	6023      	str	r3, [r4, #0]
      break;
 80021a6:	e7f7      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 80021aa:	6023      	str	r3, [r4, #0]
      break;
 80021ac:	e7f4      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <ISM330DHCX_GYRO_GetOutputDataRate+0x88>)
 80021b0:	6023      	str	r3, [r4, #0]
      break;
 80021b2:	e7f1      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <ISM330DHCX_GYRO_GetOutputDataRate+0x8c>)
 80021b6:	6023      	str	r3, [r4, #0]
      break;
 80021b8:	e7ee      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 416.0f;
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <ISM330DHCX_GYRO_GetOutputDataRate+0x90>)
 80021bc:	6023      	str	r3, [r4, #0]
      break;
 80021be:	e7eb      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <ISM330DHCX_GYRO_GetOutputDataRate+0x94>)
 80021c2:	6023      	str	r3, [r4, #0]
      break;
 80021c4:	e7e8      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  1666.0f;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <ISM330DHCX_GYRO_GetOutputDataRate+0x98>)
 80021c8:	6023      	str	r3, [r4, #0]
      break;
 80021ca:	e7e5      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  3332.0f;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <ISM330DHCX_GYRO_GetOutputDataRate+0x9c>)
 80021ce:	6023      	str	r3, [r4, #0]
      break;
 80021d0:	e7e2      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  6667.0f;
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <ISM330DHCX_GYRO_GetOutputDataRate+0xa0>)
 80021d4:	6023      	str	r3, [r4, #0]
      break;
 80021d6:	e7df      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
    return ISM330DHCX_ERROR;
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	e7dc      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 80021de:	f04f 30ff 	mov.w	r0, #4294967295
 80021e2:	e7d9      	b.n	8002198 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
 80021e4:	41480000 	.word	0x41480000
 80021e8:	41d00000 	.word	0x41d00000
 80021ec:	42500000 	.word	0x42500000
 80021f0:	42d00000 	.word	0x42d00000
 80021f4:	43500000 	.word	0x43500000
 80021f8:	43d00000 	.word	0x43d00000
 80021fc:	44504000 	.word	0x44504000
 8002200:	44d04000 	.word	0x44d04000
 8002204:	45504000 	.word	0x45504000
 8002208:	45d05800 	.word	0x45d05800

0800220c <ISM330DHCX_GYRO_GetSensitivity>:
{
 800220c:	b510      	push	{r4, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002212:	f10d 0107 	add.w	r1, sp, #7
 8002216:	3020      	adds	r0, #32
 8002218:	f000 fa1f 	bl	800265a <ism330dhcx_gy_full_scale_get>
 800221c:	b9f0      	cbnz	r0, 800225c <ISM330DHCX_GYRO_GetSensitivity+0x50>
  switch (full_scale)
 800221e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d81d      	bhi.n	8002262 <ISM330DHCX_GYRO_GetSensitivity+0x56>
 8002226:	e8df f003 	tbb	[pc, r3]
 800222a:	160a      	.short	0x160a
 800222c:	1c0d1c07 	.word	0x1c0d1c07
 8002230:	1c101c1c 	.word	0x1c101c1c
 8002234:	1c1c      	.short	0x1c1c
 8002236:	13          	.byte	0x13
 8002237:	00          	.byte	0x00
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <ISM330DHCX_GYRO_GetSensitivity+0x60>)
 800223a:	6023      	str	r3, [r4, #0]
      break;
 800223c:	e013      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <ISM330DHCX_GYRO_GetSensitivity+0x64>)
 8002240:	6023      	str	r3, [r4, #0]
      break;
 8002242:	e010      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <ISM330DHCX_GYRO_GetSensitivity+0x68>)
 8002246:	6023      	str	r3, [r4, #0]
      break;
 8002248:	e00d      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 800224a:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <ISM330DHCX_GYRO_GetSensitivity+0x6c>)
 800224c:	6023      	str	r3, [r4, #0]
      break;
 800224e:	e00a      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <ISM330DHCX_GYRO_GetSensitivity+0x70>)
 8002252:	6023      	str	r3, [r4, #0]
      break;
 8002254:	e007      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <ISM330DHCX_GYRO_GetSensitivity+0x74>)
 8002258:	6023      	str	r3, [r4, #0]
      break;
 800225a:	e004      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
    return ISM330DHCX_ERROR;
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	e001      	b.n	8002266 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
  switch (full_scale)
 8002262:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002266:	b002      	add	sp, #8
 8002268:	bd10      	pop	{r4, pc}
 800226a:	bf00      	nop
 800226c:	408c0000 	.word	0x408c0000
 8002270:	410c0000 	.word	0x410c0000
 8002274:	418c0000 	.word	0x418c0000
 8002278:	420c0000 	.word	0x420c0000
 800227c:	428c0000 	.word	0x428c0000
 8002280:	430c0000 	.word	0x430c0000

08002284 <ISM330DHCX_GYRO_GetFullScale>:
{
 8002284:	b510      	push	{r4, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800228a:	f10d 0107 	add.w	r1, sp, #7
 800228e:	3020      	adds	r0, #32
 8002290:	f000 f9e3 	bl	800265a <ism330dhcx_gy_full_scale_get>
 8002294:	bb10      	cbnz	r0, 80022dc <ISM330DHCX_GYRO_GetFullScale+0x58>
  switch (fs_low_level)
 8002296:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d821      	bhi.n	80022e2 <ISM330DHCX_GYRO_GetFullScale+0x5e>
 800229e:	e8df f003 	tbb	[pc, r3]
 80022a2:	190a      	.short	0x190a
 80022a4:	200d2007 	.word	0x200d2007
 80022a8:	20112020 	.word	0x20112020
 80022ac:	2020      	.short	0x2020
 80022ae:	15          	.byte	0x15
 80022af:	00          	.byte	0x00
      *FullScale =  125;
 80022b0:	237d      	movs	r3, #125	@ 0x7d
 80022b2:	6023      	str	r3, [r4, #0]
      break;
 80022b4:	e017      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale =  250;
 80022b6:	23fa      	movs	r3, #250	@ 0xfa
 80022b8:	6023      	str	r3, [r4, #0]
      break;
 80022ba:	e014      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale =  500;
 80022bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022c0:	6023      	str	r3, [r4, #0]
      break;
 80022c2:	e010      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 1000;
 80022c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c8:	6023      	str	r3, [r4, #0]
      break;
 80022ca:	e00c      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 2000;
 80022cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80022d0:	6023      	str	r3, [r4, #0]
      break;
 80022d2:	e008      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 4000;
 80022d4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022d8:	6023      	str	r3, [r4, #0]
      break;
 80022da:	e004      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
    return ISM330DHCX_ERROR;
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	e001      	b.n	80022e6 <ISM330DHCX_GYRO_GetFullScale+0x62>
  switch (fs_low_level)
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80022e6:	b002      	add	sp, #8
 80022e8:	bd10      	pop	{r4, pc}

080022ea <ISM330DHCX_GYRO_GetAxesRaw>:
{
 80022ea:	b510      	push	{r4, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80022f0:	4669      	mov	r1, sp
 80022f2:	3020      	adds	r0, #32
 80022f4:	f000 fa31 	bl	800275a <ism330dhcx_angular_rate_raw_get>
 80022f8:	b950      	cbnz	r0, 8002310 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80022fa:	f9bd 3000 	ldrsh.w	r3, [sp]
 80022fe:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8002300:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002304:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002306:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800230a:	80a3      	strh	r3, [r4, #4]
}
 800230c:	b002      	add	sp, #8
 800230e:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	e7fa      	b.n	800230c <ISM330DHCX_GYRO_GetAxesRaw+0x22>

08002316 <ISM330DHCX_GYRO_GetAxes>:
{
 8002316:	b530      	push	{r4, r5, lr}
 8002318:	b085      	sub	sp, #20
 800231a:	4605      	mov	r5, r0
 800231c:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 800231e:	2300      	movs	r3, #0
 8002320:	9301      	str	r3, [sp, #4]
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002322:	a902      	add	r1, sp, #8
 8002324:	3020      	adds	r0, #32
 8002326:	f000 fa18 	bl	800275a <ism330dhcx_angular_rate_raw_get>
 800232a:	bb60      	cbnz	r0, 8002386 <ISM330DHCX_GYRO_GetAxes+0x70>
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800232c:	a901      	add	r1, sp, #4
 800232e:	4628      	mov	r0, r5
 8002330:	f7ff ff6c 	bl	800220c <ISM330DHCX_GYRO_GetSensitivity>
 8002334:	bb50      	cbnz	r0, 800238c <ISM330DHCX_GYRO_GetAxes+0x76>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002336:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800233a:	ee07 3a10 	vmov	s14, r3
 800233e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002342:	eddd 7a01 	vldr	s15, [sp, #4]
 8002346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800234e:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002352:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002356:	ee07 3a10 	vmov	s14, r3
 800235a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800235e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002362:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002366:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800236a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800236e:	ee07 3a10 	vmov	s14, r3
 8002372:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002382:	b005      	add	sp, #20
 8002384:	bd30      	pop	{r4, r5, pc}
    return ISM330DHCX_ERROR;
 8002386:	f04f 30ff 	mov.w	r0, #4294967295
 800238a:	e7fa      	b.n	8002382 <ISM330DHCX_GYRO_GetAxes+0x6c>
    return ISM330DHCX_ERROR;
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	e7f7      	b.n	8002382 <ISM330DHCX_GYRO_GetAxes+0x6c>

08002392 <ISM330DHCX_Write_Reg>:
{
 8002392:	b500      	push	{lr}
 8002394:	b083      	sub	sp, #12
 8002396:	f88d 2007 	strb.w	r2, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800239a:	2301      	movs	r3, #1
 800239c:	f10d 0207 	add.w	r2, sp, #7
 80023a0:	3020      	adds	r0, #32
 80023a2:	f000 f8c0 	bl	8002526 <ism330dhcx_write_reg>
 80023a6:	b910      	cbnz	r0, 80023ae <ISM330DHCX_Write_Reg+0x1c>
}
 80023a8:	b003      	add	sp, #12
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
    return ISM330DHCX_ERROR;
 80023ae:	f04f 30ff 	mov.w	r0, #4294967295
 80023b2:	e7f9      	b.n	80023a8 <ISM330DHCX_Write_Reg+0x16>

080023b4 <ISM330DHCX_RegisterBusIO>:
  if (pObj == NULL)
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d02b      	beq.n	8002410 <ISM330DHCX_RegisterBusIO+0x5c>
{
 80023b8:	b510      	push	{r4, lr}
 80023ba:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80023bc:	680b      	ldr	r3, [r1, #0]
 80023be:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80023c0:	684a      	ldr	r2, [r1, #4]
 80023c2:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80023c4:	688a      	ldr	r2, [r1, #8]
 80023c6:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80023c8:	7b0a      	ldrb	r2, [r1, #12]
 80023ca:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80023cc:	690a      	ldr	r2, [r1, #16]
 80023ce:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80023d0:	694a      	ldr	r2, [r1, #20]
 80023d2:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80023d4:	698a      	ldr	r2, [r1, #24]
 80023d6:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <ISM330DHCX_RegisterBusIO+0x70>)
 80023da:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80023dc:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <ISM330DHCX_RegisterBusIO+0x74>)
 80023de:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80023e0:	69ca      	ldr	r2, [r1, #28]
 80023e2:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80023e4:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 80023e6:	b1b3      	cbz	r3, 8002416 <ISM330DHCX_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80023e8:	4798      	blx	r3
 80023ea:	b9b8      	cbnz	r0, 800241c <ISM330DHCX_RegisterBusIO+0x68>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80023ec:	68a3      	ldr	r3, [r4, #8]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d000      	beq.n	80023f4 <ISM330DHCX_RegisterBusIO+0x40>
}
 80023f2:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80023f4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1fa      	bne.n	80023f2 <ISM330DHCX_RegisterBusIO+0x3e>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80023fc:	220c      	movs	r2, #12
 80023fe:	2112      	movs	r1, #18
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff ffc6 	bl	8002392 <ISM330DHCX_Write_Reg>
 8002406:	2800      	cmp	r0, #0
 8002408:	d0f3      	beq.n	80023f2 <ISM330DHCX_RegisterBusIO+0x3e>
            ret = ISM330DHCX_ERROR;
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800240e:	e7f0      	b.n	80023f2 <ISM330DHCX_RegisterBusIO+0x3e>
    ret = ISM330DHCX_ERROR;
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002414:	4770      	bx	lr
      ret = ISM330DHCX_ERROR;
 8002416:	f04f 30ff 	mov.w	r0, #4294967295
 800241a:	e7ea      	b.n	80023f2 <ISM330DHCX_RegisterBusIO+0x3e>
      ret = ISM330DHCX_ERROR;
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	e7e7      	b.n	80023f2 <ISM330DHCX_RegisterBusIO+0x3e>
 8002422:	bf00      	nop
 8002424:	08001c11 	.word	0x08001c11
 8002428:	08001c1b 	.word	0x08001c1b

0800242c <ISM330DHCX_Set_Mem_Bank>:
{
 800242c:	b508      	push	{r3, lr}
        : (Val == 2U) ? ISM330DHCX_EMBEDDED_FUNC_BANK
 800242e:	2901      	cmp	r1, #1
 8002430:	d002      	beq.n	8002438 <ISM330DHCX_Set_Mem_Bank+0xc>
 8002432:	2902      	cmp	r1, #2
 8002434:	d000      	beq.n	8002438 <ISM330DHCX_Set_Mem_Bank+0xc>
 8002436:	2100      	movs	r1, #0
  if (ism330dhcx_mem_bank_set(&(pObj->Ctx), reg) != ISM330DHCX_OK)
 8002438:	3020      	adds	r0, #32
 800243a:	f000 f9eb 	bl	8002814 <ism330dhcx_mem_bank_set>
 800243e:	b900      	cbnz	r0, 8002442 <ISM330DHCX_Set_Mem_Bank+0x16>
}
 8002440:	bd08      	pop	{r3, pc}
    ret = ISM330DHCX_ERROR;
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002446:	e7fb      	b.n	8002440 <ISM330DHCX_Set_Mem_Bank+0x14>

08002448 <ISM330DHCX_Init>:
{
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	4605      	mov	r5, r0
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800244c:	f100 0420 	add.w	r4, r0, #32
 8002450:	2101      	movs	r1, #1
 8002452:	4620      	mov	r0, r4
 8002454:	f000 f9c5 	bl	80027e2 <ism330dhcx_device_conf_set>
 8002458:	bbd8      	cbnz	r0, 80024d2 <ISM330DHCX_Init+0x8a>
  if (ISM330DHCX_Set_Mem_Bank(pObj, (uint8_t)ISM330DHCX_USER_BANK) != ISM330DHCX_OK)
 800245a:	2100      	movs	r1, #0
 800245c:	4628      	mov	r0, r5
 800245e:	f7ff ffe5 	bl	800242c <ISM330DHCX_Set_Mem_Bank>
 8002462:	bbc8      	cbnz	r0, 80024d8 <ISM330DHCX_Init+0x90>
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002464:	2101      	movs	r1, #1
 8002466:	4620      	mov	r0, r4
 8002468:	f000 fa0d 	bl	8002886 <ism330dhcx_auto_increment_set>
 800246c:	bbb8      	cbnz	r0, 80024de <ISM330DHCX_Init+0x96>
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800246e:	2101      	movs	r1, #1
 8002470:	4620      	mov	r0, r4
 8002472:	f000 f9ef 	bl	8002854 <ism330dhcx_reset_set>
 8002476:	bba8      	cbnz	r0, 80024e4 <ISM330DHCX_Init+0x9c>
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002478:	2101      	movs	r1, #1
 800247a:	4620      	mov	r0, r4
 800247c:	f000 fa03 	bl	8002886 <ism330dhcx_auto_increment_set>
 8002480:	bb98      	cbnz	r0, 80024ea <ISM330DHCX_Init+0xa2>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002482:	2101      	movs	r1, #1
 8002484:	4620      	mov	r0, r4
 8002486:	f000 f94f 	bl	8002728 <ism330dhcx_block_data_update_set>
 800248a:	bb88      	cbnz	r0, 80024f0 <ISM330DHCX_Init+0xa8>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 800248c:	2100      	movs	r1, #0
 800248e:	4620      	mov	r0, r4
 8002490:	f000 fa12 	bl	80028b8 <ism330dhcx_fifo_mode_set>
 8002494:	bb78      	cbnz	r0, 80024f6 <ISM330DHCX_Init+0xae>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8002496:	2304      	movs	r3, #4
 8002498:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800249c:	2100      	movs	r1, #0
 800249e:	4620      	mov	r0, r4
 80024a0:	f000 fabf 	bl	8002a22 <ism330dhcx_xl_data_rate_set>
 80024a4:	bb50      	cbnz	r0, 80024fc <ISM330DHCX_Init+0xb4>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80024a6:	2100      	movs	r1, #0
 80024a8:	4620      	mov	r0, r4
 80024aa:	f000 f845 	bl	8002538 <ism330dhcx_xl_full_scale_set>
 80024ae:	bb40      	cbnz	r0, 8002502 <ISM330DHCX_Init+0xba>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80024b0:	2304      	movs	r3, #4
 80024b2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80024b6:	2100      	movs	r1, #0
 80024b8:	4620      	mov	r0, r4
 80024ba:	f000 fb99 	bl	8002bf0 <ism330dhcx_gy_data_rate_set>
 80024be:	bb18      	cbnz	r0, 8002508 <ISM330DHCX_Init+0xc0>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80024c0:	210c      	movs	r1, #12
 80024c2:	4620      	mov	r0, r4
 80024c4:	f000 f8b0 	bl	8002628 <ism330dhcx_gy_full_scale_set>
 80024c8:	bb08      	cbnz	r0, 800250e <ISM330DHCX_Init+0xc6>
  pObj->is_initialized = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
}
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
    return ISM330DHCX_ERROR;
 80024d2:	f04f 30ff 	mov.w	r0, #4294967295
 80024d6:	e7fb      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	e7f8      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
 80024e2:	e7f5      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	e7f2      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024ea:	f04f 30ff 	mov.w	r0, #4294967295
 80024ee:	e7ef      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	e7ec      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024f6:	f04f 30ff 	mov.w	r0, #4294967295
 80024fa:	e7e9      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	e7e6      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 8002502:	f04f 30ff 	mov.w	r0, #4294967295
 8002506:	e7e3      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	e7e0      	b.n	80024d0 <ISM330DHCX_Init+0x88>
    return ISM330DHCX_ERROR;
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	e7dd      	b.n	80024d0 <ISM330DHCX_Init+0x88>

08002514 <ism330dhcx_read_reg>:
                                   uint8_t *data,
                                   uint16_t len)
{
  int32_t ret;

  if (ctx == NULL)
 8002514:	b120      	cbz	r0, 8002520 <ism330dhcx_read_reg+0xc>
{
 8002516:	b510      	push	{r4, lr}
  {
    return -1;
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002518:	6844      	ldr	r4, [r0, #4]
 800251a:	68c0      	ldr	r0, [r0, #12]
 800251c:	47a0      	blx	r4

  return ret;
}
 800251e:	bd10      	pop	{r4, pc}
    return -1;
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002524:	4770      	bx	lr

08002526 <ism330dhcx_write_reg>:
                                    uint8_t *data,
                                    uint16_t len)
{
  int32_t ret;

  if (ctx == NULL)
 8002526:	b120      	cbz	r0, 8002532 <ism330dhcx_write_reg+0xc>
{
 8002528:	b510      	push	{r4, lr}
  {
    return -1;
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800252a:	6804      	ldr	r4, [r0, #0]
 800252c:	68c0      	ldr	r0, [r0, #12]
 800252e:	47a0      	blx	r4

  return ret;
}
 8002530:	bd10      	pop	{r4, pc}
    return -1;
 8002532:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002536:	4770      	bx	lr

08002538 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8002538:	b530      	push	{r4, r5, lr}
 800253a:	b083      	sub	sp, #12
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002540:	2301      	movs	r3, #1
 8002542:	aa01      	add	r2, sp, #4
 8002544:	2110      	movs	r1, #16
 8002546:	f7ff ffe5 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800254a:	b108      	cbz	r0, 8002550 <ism330dhcx_xl_full_scale_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 800254c:	b003      	add	sp, #12
 800254e:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002550:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002554:	f365 0383 	bfi	r3, r5, #2, #2
 8002558:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800255c:	2301      	movs	r3, #1
 800255e:	aa01      	add	r2, sp, #4
 8002560:	2110      	movs	r1, #16
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ffdf 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 8002568:	e7f0      	b.n	800254c <ism330dhcx_xl_full_scale_set+0x14>

0800256a <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800256a:	b510      	push	{r4, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	460c      	mov	r4, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002570:	2301      	movs	r3, #1
 8002572:	aa01      	add	r2, sp, #4
 8002574:	2110      	movs	r1, #16
 8002576:	f7ff ffcd 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 800257a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800257e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002582:	2b03      	cmp	r3, #3
 8002584:	d810      	bhi.n	80025a8 <ism330dhcx_xl_full_scale_get+0x3e>
 8002586:	e8df f003 	tbb	[pc, r3]
 800258a:	0602      	.short	0x0602
 800258c:	0c09      	.short	0x0c09
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 800258e:	2300      	movs	r3, #0
 8002590:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_2g;
      break;
  }

  return ret;
}
 8002592:	b002      	add	sp, #8
 8002594:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_16g;
 8002596:	2301      	movs	r3, #1
 8002598:	7023      	strb	r3, [r4, #0]
      break;
 800259a:	e7fa      	b.n	8002592 <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_4g;
 800259c:	2302      	movs	r3, #2
 800259e:	7023      	strb	r3, [r4, #0]
      break;
 80025a0:	e7f7      	b.n	8002592 <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_8g;
 80025a2:	2303      	movs	r3, #3
 80025a4:	7023      	strb	r3, [r4, #0]
      break;
 80025a6:	e7f4      	b.n	8002592 <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_2g;
 80025a8:	2300      	movs	r3, #0
 80025aa:	7023      	strb	r3, [r4, #0]
  return ret;
 80025ac:	e7f1      	b.n	8002592 <ism330dhcx_xl_full_scale_get+0x28>

080025ae <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 80025ae:	b510      	push	{r4, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	460c      	mov	r4, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80025b4:	2301      	movs	r3, #1
 80025b6:	aa01      	add	r2, sp, #4
 80025b8:	2110      	movs	r1, #16
 80025ba:	f7ff ffab 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 80025be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	2b0b      	cmp	r3, #11
 80025c6:	d82c      	bhi.n	8002622 <ism330dhcx_xl_data_rate_get+0x74>
 80025c8:	e8df f003 	tbb	[pc, r3]
 80025cc:	100d0a06 	.word	0x100d0a06
 80025d0:	1c191613 	.word	0x1c191613
 80025d4:	2825221f 	.word	0x2825221f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 80025d8:	2300      	movs	r3, #0
 80025da:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_XL_ODR_OFF;
      break;
  }

  return ret;
}
 80025dc:	b002      	add	sp, #8
 80025de:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_XL_ODR_12Hz5;
 80025e0:	2301      	movs	r3, #1
 80025e2:	7023      	strb	r3, [r4, #0]
      break;
 80025e4:	e7fa      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_26Hz;
 80025e6:	2302      	movs	r3, #2
 80025e8:	7023      	strb	r3, [r4, #0]
      break;
 80025ea:	e7f7      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_52Hz;
 80025ec:	2303      	movs	r3, #3
 80025ee:	7023      	strb	r3, [r4, #0]
      break;
 80025f0:	e7f4      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_104Hz;
 80025f2:	2304      	movs	r3, #4
 80025f4:	7023      	strb	r3, [r4, #0]
      break;
 80025f6:	e7f1      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_208Hz;
 80025f8:	2305      	movs	r3, #5
 80025fa:	7023      	strb	r3, [r4, #0]
      break;
 80025fc:	e7ee      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_416Hz;
 80025fe:	2306      	movs	r3, #6
 8002600:	7023      	strb	r3, [r4, #0]
      break;
 8002602:	e7eb      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_833Hz;
 8002604:	2307      	movs	r3, #7
 8002606:	7023      	strb	r3, [r4, #0]
      break;
 8002608:	e7e8      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_1666Hz;
 800260a:	2308      	movs	r3, #8
 800260c:	7023      	strb	r3, [r4, #0]
      break;
 800260e:	e7e5      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8002610:	2309      	movs	r3, #9
 8002612:	7023      	strb	r3, [r4, #0]
      break;
 8002614:	e7e2      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8002616:	230a      	movs	r3, #10
 8002618:	7023      	strb	r3, [r4, #0]
      break;
 800261a:	e7df      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_1Hz6;
 800261c:	230b      	movs	r3, #11
 800261e:	7023      	strb	r3, [r4, #0]
      break;
 8002620:	e7dc      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_OFF;
 8002622:	2300      	movs	r3, #0
 8002624:	7023      	strb	r3, [r4, #0]
  return ret;
 8002626:	e7d9      	b.n	80025dc <ism330dhcx_xl_data_rate_get+0x2e>

08002628 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8002628:	b530      	push	{r4, r5, lr}
 800262a:	b083      	sub	sp, #12
 800262c:	4604      	mov	r4, r0
 800262e:	460d      	mov	r5, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8002630:	2301      	movs	r3, #1
 8002632:	aa01      	add	r2, sp, #4
 8002634:	2111      	movs	r1, #17
 8002636:	f7ff ff6d 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 800263a:	b108      	cbz	r0, 8002640 <ism330dhcx_gy_full_scale_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 800263c:	b003      	add	sp, #12
 800263e:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t)val;
 8002640:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002644:	f365 0303 	bfi	r3, r5, #0, #4
 8002648:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800264c:	2301      	movs	r3, #1
 800264e:	aa01      	add	r2, sp, #4
 8002650:	2111      	movs	r1, #17
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ff67 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 8002658:	e7f0      	b.n	800263c <ism330dhcx_gy_full_scale_set+0x14>

0800265a <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 800265a:	b510      	push	{r4, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	460c      	mov	r4, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8002660:	2301      	movs	r3, #1
 8002662:	aa01      	add	r2, sp, #4
 8002664:	2111      	movs	r1, #17
 8002666:	f7ff ff55 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 800266a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d81b      	bhi.n	80026ae <ism330dhcx_gy_full_scale_get+0x54>
 8002676:	e8df f003 	tbb	[pc, r3]
 800267a:	170b      	.short	0x170b
 800267c:	1a0e1a07 	.word	0x1a0e1a07
 8002680:	1a111a1a 	.word	0x1a111a1a
 8002684:	1a1a      	.short	0x1a1a
 8002686:	14          	.byte	0x14
 8002687:	00          	.byte	0x00
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8002688:	2302      	movs	r3, #2
 800268a:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_125dps;
      break;
  }

  return ret;
}
 800268c:	b002      	add	sp, #8
 800268e:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_250dps;
 8002690:	2300      	movs	r3, #0
 8002692:	7023      	strb	r3, [r4, #0]
      break;
 8002694:	e7fa      	b.n	800268c <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_500dps;
 8002696:	2304      	movs	r3, #4
 8002698:	7023      	strb	r3, [r4, #0]
      break;
 800269a:	e7f7      	b.n	800268c <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_1000dps;
 800269c:	2308      	movs	r3, #8
 800269e:	7023      	strb	r3, [r4, #0]
      break;
 80026a0:	e7f4      	b.n	800268c <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_2000dps;
 80026a2:	230c      	movs	r3, #12
 80026a4:	7023      	strb	r3, [r4, #0]
      break;
 80026a6:	e7f1      	b.n	800268c <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_4000dps;
 80026a8:	2301      	movs	r3, #1
 80026aa:	7023      	strb	r3, [r4, #0]
      break;
 80026ac:	e7ee      	b.n	800268c <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_125dps;
 80026ae:	2302      	movs	r3, #2
 80026b0:	7023      	strb	r3, [r4, #0]
  return ret;
 80026b2:	e7eb      	b.n	800268c <ism330dhcx_gy_full_scale_get+0x32>

080026b4 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	460c      	mov	r4, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80026ba:	2301      	movs	r3, #1
 80026bc:	aa01      	add	r2, sp, #4
 80026be:	2111      	movs	r1, #17
 80026c0:	f7ff ff28 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 80026c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	2b0a      	cmp	r3, #10
 80026cc:	d829      	bhi.n	8002722 <ism330dhcx_gy_data_rate_get+0x6e>
 80026ce:	e8df f003 	tbb	[pc, r3]
 80026d2:	0a06      	.short	0x0a06
 80026d4:	1613100d 	.word	0x1613100d
 80026d8:	221f1c19 	.word	0x221f1c19
 80026dc:	25          	.byte	0x25
 80026dd:	00          	.byte	0x00
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 80026de:	2300      	movs	r3, #0
 80026e0:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_GY_ODR_OFF;
      break;
  }

  return ret;
}
 80026e2:	b002      	add	sp, #8
 80026e4:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_GY_ODR_12Hz5;
 80026e6:	2301      	movs	r3, #1
 80026e8:	7023      	strb	r3, [r4, #0]
      break;
 80026ea:	e7fa      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_26Hz;
 80026ec:	2302      	movs	r3, #2
 80026ee:	7023      	strb	r3, [r4, #0]
      break;
 80026f0:	e7f7      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_52Hz;
 80026f2:	2303      	movs	r3, #3
 80026f4:	7023      	strb	r3, [r4, #0]
      break;
 80026f6:	e7f4      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_104Hz;
 80026f8:	2304      	movs	r3, #4
 80026fa:	7023      	strb	r3, [r4, #0]
      break;
 80026fc:	e7f1      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_208Hz;
 80026fe:	2305      	movs	r3, #5
 8002700:	7023      	strb	r3, [r4, #0]
      break;
 8002702:	e7ee      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_416Hz;
 8002704:	2306      	movs	r3, #6
 8002706:	7023      	strb	r3, [r4, #0]
      break;
 8002708:	e7eb      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_833Hz;
 800270a:	2307      	movs	r3, #7
 800270c:	7023      	strb	r3, [r4, #0]
      break;
 800270e:	e7e8      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8002710:	2308      	movs	r3, #8
 8002712:	7023      	strb	r3, [r4, #0]
      break;
 8002714:	e7e5      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8002716:	2309      	movs	r3, #9
 8002718:	7023      	strb	r3, [r4, #0]
      break;
 800271a:	e7e2      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_6667Hz;
 800271c:	230a      	movs	r3, #10
 800271e:	7023      	strb	r3, [r4, #0]
      break;
 8002720:	e7df      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_OFF;
 8002722:	2300      	movs	r3, #0
 8002724:	7023      	strb	r3, [r4, #0]
  return ret;
 8002726:	e7dc      	b.n	80026e2 <ism330dhcx_gy_data_rate_get+0x2e>

08002728 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(const stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8002728:	b530      	push	{r4, r5, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	4604      	mov	r4, r0
 800272e:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002730:	2301      	movs	r3, #1
 8002732:	aa01      	add	r2, sp, #4
 8002734:	2112      	movs	r1, #18
 8002736:	f7ff feed 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800273a:	b108      	cbz	r0, 8002740 <ism330dhcx_block_data_update_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 800273c:	b003      	add	sp, #12
 800273e:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = (uint8_t)val;
 8002740:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002744:	f365 1386 	bfi	r3, r5, #6, #1
 8002748:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800274c:	2301      	movs	r3, #1
 800274e:	aa01      	add	r2, sp, #4
 8002750:	2112      	movs	r1, #18
 8002752:	4620      	mov	r0, r4
 8002754:	f7ff fee7 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 8002758:	e7f0      	b.n	800273c <ism330dhcx_block_data_update_set+0x14>

0800275a <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800275a:	b510      	push	{r4, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8002760:	2306      	movs	r3, #6
 8002762:	466a      	mov	r2, sp
 8002764:	2122      	movs	r1, #34	@ 0x22
 8002766:	f7ff fed5 	bl	8002514 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
 800276a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800276e:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002770:	f89d 3000 	ldrb.w	r3, [sp]
 8002774:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002778:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 800277a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800277e:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002780:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002784:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002788:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 800278a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800278e:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002790:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002794:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002798:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 800279a:	b002      	add	sp, #8
 800279c:	bd10      	pop	{r4, pc}

0800279e <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800279e:	b510      	push	{r4, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80027a4:	2306      	movs	r3, #6
 80027a6:	466a      	mov	r2, sp
 80027a8:	2128      	movs	r1, #40	@ 0x28
 80027aa:	f7ff feb3 	bl	8002514 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
 80027ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80027b2:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027b4:	f89d 3000 	ldrb.w	r3, [sp]
 80027b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027bc:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 80027be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80027c2:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80027c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027cc:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 80027ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80027d2:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027dc:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80027de:	b002      	add	sp, #8
 80027e0:	bd10      	pop	{r4, pc}

080027e2 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80027e2:	b530      	push	{r4, r5, lr}
 80027e4:	b083      	sub	sp, #12
 80027e6:	4604      	mov	r4, r0
 80027e8:	460d      	mov	r5, r1
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80027ea:	2301      	movs	r3, #1
 80027ec:	aa01      	add	r2, sp, #4
 80027ee:	2118      	movs	r1, #24
 80027f0:	f7ff fe90 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 80027f4:	b108      	cbz	r0, 80027fa <ism330dhcx_device_conf_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
}
 80027f6:	b003      	add	sp, #12
 80027f8:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.device_conf = (uint8_t)val;
 80027fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027fe:	f365 0341 	bfi	r3, r5, #1, #1
 8002802:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8002806:	2301      	movs	r3, #1
 8002808:	aa01      	add	r2, sp, #4
 800280a:	2118      	movs	r1, #24
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff fe8a 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 8002812:	e7f0      	b.n	80027f6 <ism330dhcx_device_conf_set+0x14>

08002814 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(const stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8002814:	b530      	push	{r4, r5, lr}
 8002816:	b083      	sub	sp, #12
 8002818:	4604      	mov	r4, r0
 800281a:	460d      	mov	r5, r1
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800281c:	2301      	movs	r3, #1
 800281e:	aa01      	add	r2, sp, #4
 8002820:	4619      	mov	r1, r3
 8002822:	f7ff fe77 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8002826:	b108      	cbz	r0, 800282c <ism330dhcx_mem_bank_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 8002828:	b003      	add	sp, #12
 800282a:	bd30      	pop	{r4, r5, pc}
    func_cfg_access.reg_access = (uint8_t)val;
 800282c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002830:	f365 1387 	bfi	r3, r5, #6, #2
 8002834:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002838:	2301      	movs	r3, #1
 800283a:	aa01      	add	r2, sp, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff fe71 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 8002844:	e7f0      	b.n	8002828 <ism330dhcx_mem_bank_set+0x14>

08002846 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002846:	b508      	push	{r3, lr}
 8002848:	460a      	mov	r2, r1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800284a:	2301      	movs	r3, #1
 800284c:	210f      	movs	r1, #15
 800284e:	f7ff fe61 	bl	8002514 <ism330dhcx_read_reg>

  return ret;
}
 8002852:	bd08      	pop	{r3, pc}

08002854 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002854:	b530      	push	{r4, r5, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800285c:	2301      	movs	r3, #1
 800285e:	aa01      	add	r2, sp, #4
 8002860:	2112      	movs	r1, #18
 8002862:	f7ff fe57 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8002866:	b108      	cbz	r0, 800286c <ism330dhcx_reset_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8002868:	b003      	add	sp, #12
 800286a:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sw_reset = (uint8_t)val;
 800286c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002870:	f365 0300 	bfi	r3, r5, #0, #1
 8002874:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8002878:	2301      	movs	r3, #1
 800287a:	aa01      	add	r2, sp, #4
 800287c:	2112      	movs	r1, #18
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fe51 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 8002884:	e7f0      	b.n	8002868 <ism330dhcx_reset_set+0x14>

08002886 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002886:	b530      	push	{r4, r5, lr}
 8002888:	b083      	sub	sp, #12
 800288a:	4604      	mov	r4, r0
 800288c:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800288e:	2301      	movs	r3, #1
 8002890:	aa01      	add	r2, sp, #4
 8002892:	2112      	movs	r1, #18
 8002894:	f7ff fe3e 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8002898:	b108      	cbz	r0, 800289e <ism330dhcx_auto_increment_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 800289a:	b003      	add	sp, #12
 800289c:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = (uint8_t)val;
 800289e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028a2:	f365 0382 	bfi	r3, r5, #2, #1
 80028a6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80028aa:	2301      	movs	r3, #1
 80028ac:	aa01      	add	r2, sp, #4
 80028ae:	2112      	movs	r1, #18
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff fe38 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 80028b6:	e7f0      	b.n	800289a <ism330dhcx_auto_increment_set+0x14>

080028b8 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(const stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80028b8:	b530      	push	{r4, r5, lr}
 80028ba:	b083      	sub	sp, #12
 80028bc:	4604      	mov	r4, r0
 80028be:	460d      	mov	r5, r1
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80028c0:	2301      	movs	r3, #1
 80028c2:	aa01      	add	r2, sp, #4
 80028c4:	210a      	movs	r1, #10
 80028c6:	f7ff fe25 	bl	8002514 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 80028ca:	b108      	cbz	r0, 80028d0 <ism330dhcx_fifo_mode_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 80028cc:	b003      	add	sp, #12
 80028ce:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80028d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028d4:	f365 0302 	bfi	r3, r5, #0, #3
 80028d8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80028dc:	2301      	movs	r3, #1
 80028de:	aa01      	add	r2, sp, #4
 80028e0:	210a      	movs	r1, #10
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fe1f 	bl	8002526 <ism330dhcx_write_reg>
  return ret;
 80028e8:	e7f0      	b.n	80028cc <ism330dhcx_fifo_mode_set+0x14>

080028ea <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(const stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80028ea:	b538      	push	{r3, r4, r5, lr}
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80028f0:	2102      	movs	r1, #2
 80028f2:	f7ff ff8f 	bl	8002814 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 80028f6:	4603      	mov	r3, r0
 80028f8:	b110      	cbz	r0, 8002900 <ism330dhcx_fsm_enable_get+0x16>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
  }

  if (ret == 0)
 80028fa:	b193      	cbz	r3, 8002922 <ism330dhcx_fsm_enable_get+0x38>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8002900:	2301      	movs	r3, #1
 8002902:	462a      	mov	r2, r5
 8002904:	2146      	movs	r1, #70	@ 0x46
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fe04 	bl	8002514 <ism330dhcx_read_reg>
  if (ret == 0)
 800290c:	4603      	mov	r3, r0
 800290e:	2800      	cmp	r0, #0
 8002910:	d1f4      	bne.n	80028fc <ism330dhcx_fsm_enable_get+0x12>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8002912:	2301      	movs	r3, #1
 8002914:	18ea      	adds	r2, r5, r3
 8002916:	2147      	movs	r1, #71	@ 0x47
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff fdfb 	bl	8002514 <ism330dhcx_read_reg>
 800291e:	4603      	mov	r3, r0
 8002920:	e7eb      	b.n	80028fa <ism330dhcx_fsm_enable_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002922:	2100      	movs	r1, #0
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff ff75 	bl	8002814 <ism330dhcx_mem_bank_set>
 800292a:	4603      	mov	r3, r0
  return ret;
 800292c:	e7e6      	b.n	80028fc <ism330dhcx_fsm_enable_get+0x12>

0800292e <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800292e:	b530      	push	{r4, r5, lr}
 8002930:	b083      	sub	sp, #12
 8002932:	4604      	mov	r4, r0
 8002934:	460d      	mov	r5, r1
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002936:	2102      	movs	r1, #2
 8002938:	f7ff ff6c 	bl	8002814 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 800293c:	b148      	cbz	r0, 8002952 <ism330dhcx_fsm_data_rate_get+0x24>
  if (ret == 0)
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800293e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002942:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002946:	2b03      	cmp	r3, #3
 8002948:	d81d      	bhi.n	8002986 <ism330dhcx_fsm_data_rate_get+0x58>
 800294a:	e8df f003 	tbb	[pc, r3]
 800294e:	130f      	.short	0x130f
 8002950:	1916      	.short	0x1916
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8002952:	2301      	movs	r3, #1
 8002954:	aa01      	add	r2, sp, #4
 8002956:	215f      	movs	r1, #95	@ 0x5f
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff fddb 	bl	8002514 <ism330dhcx_read_reg>
  if (ret == 0)
 800295e:	2800      	cmp	r0, #0
 8002960:	d1ed      	bne.n	800293e <ism330dhcx_fsm_data_rate_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002962:	2100      	movs	r1, #0
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff ff55 	bl	8002814 <ism330dhcx_mem_bank_set>
 800296a:	e7e8      	b.n	800293e <ism330dhcx_fsm_data_rate_get+0x10>
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800296c:	2300      	movs	r3, #0
 800296e:	702b      	strb	r3, [r5, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 8002970:	b003      	add	sp, #12
 8002972:	bd30      	pop	{r4, r5, pc}
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8002974:	2301      	movs	r3, #1
 8002976:	702b      	strb	r3, [r5, #0]
      break;
 8002978:	e7fa      	b.n	8002970 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800297a:	2302      	movs	r3, #2
 800297c:	702b      	strb	r3, [r5, #0]
      break;
 800297e:	e7f7      	b.n	8002970 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8002980:	2303      	movs	r3, #3
 8002982:	702b      	strb	r3, [r5, #0]
      break;
 8002984:	e7f4      	b.n	8002970 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002986:	2300      	movs	r3, #0
 8002988:	702b      	strb	r3, [r5, #0]
  return ret;
 800298a:	e7f1      	b.n	8002970 <ism330dhcx_fsm_data_rate_get+0x42>

0800298c <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800298c:	b530      	push	{r4, r5, lr}
 800298e:	b083      	sub	sp, #12
 8002990:	4604      	mov	r4, r0
 8002992:	460d      	mov	r5, r1
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002994:	2102      	movs	r1, #2
 8002996:	f7ff ff3d 	bl	8002814 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 800299a:	b108      	cbz	r0, 80029a0 <ism330dhcx_mlc_get+0x14>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    *val  = reg.mlc_en;
  }

  return ret;
}
 800299c:	b003      	add	sp, #12
 800299e:	bd30      	pop	{r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80029a0:	2301      	movs	r3, #1
 80029a2:	aa01      	add	r2, sp, #4
 80029a4:	2105      	movs	r1, #5
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff fdb4 	bl	8002514 <ism330dhcx_read_reg>
  if (ret == 0)
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d1f5      	bne.n	800299c <ism330dhcx_mlc_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80029b0:	2100      	movs	r1, #0
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff ff2e 	bl	8002814 <ism330dhcx_mem_bank_set>
    *val  = reg.mlc_en;
 80029b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80029c0:	702b      	strb	r3, [r5, #0]
  return ret;
 80029c2:	e7eb      	b.n	800299c <ism330dhcx_mlc_get+0x10>

080029c4 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80029c4:	b530      	push	{r4, r5, lr}
 80029c6:	b083      	sub	sp, #12
 80029c8:	4605      	mov	r5, r0
 80029ca:	460c      	mov	r4, r1
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80029cc:	2102      	movs	r1, #2
 80029ce:	f7ff ff21 	bl	8002814 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 80029d2:	b108      	cbz	r0, 80029d8 <ism330dhcx_mlc_data_rate_get+0x14>

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 80029d4:	b003      	add	sp, #12
 80029d6:	bd30      	pop	{r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80029d8:	2301      	movs	r3, #1
 80029da:	aa01      	add	r2, sp, #4
 80029dc:	2160      	movs	r1, #96	@ 0x60
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff fd98 	bl	8002514 <ism330dhcx_read_reg>
  if (ret == 0)
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d1f5      	bne.n	80029d4 <ism330dhcx_mlc_data_rate_get+0x10>
    switch (reg.mlc_odr)
 80029e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029ec:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d813      	bhi.n	8002a1c <ism330dhcx_mlc_data_rate_get+0x58>
 80029f4:	e8df f003 	tbb	[pc, r3]
 80029f8:	0f0c0902 	.word	0x0f0c0902
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80029fc:	2300      	movs	r3, #0
 80029fe:	7023      	strb	r3, [r4, #0]
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002a00:	2100      	movs	r1, #0
 8002a02:	4628      	mov	r0, r5
 8002a04:	f7ff ff06 	bl	8002814 <ism330dhcx_mem_bank_set>
  return ret;
 8002a08:	e7e4      	b.n	80029d4 <ism330dhcx_mlc_data_rate_get+0x10>
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	7023      	strb	r3, [r4, #0]
        break;
 8002a0e:	e7f7      	b.n	8002a00 <ism330dhcx_mlc_data_rate_get+0x3c>
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8002a10:	2302      	movs	r3, #2
 8002a12:	7023      	strb	r3, [r4, #0]
        break;
 8002a14:	e7f4      	b.n	8002a00 <ism330dhcx_mlc_data_rate_get+0x3c>
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8002a16:	2303      	movs	r3, #3
 8002a18:	7023      	strb	r3, [r4, #0]
        break;
 8002a1a:	e7f1      	b.n	8002a00 <ism330dhcx_mlc_data_rate_get+0x3c>
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	7023      	strb	r3, [r4, #0]
        break;
 8002a20:	e7ee      	b.n	8002a00 <ism330dhcx_mlc_data_rate_get+0x3c>

08002a22 <ism330dhcx_xl_data_rate_set>:
{
 8002a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a24:	b083      	sub	sp, #12
 8002a26:	4605      	mov	r5, r0
 8002a28:	460c      	mov	r4, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8002a2a:	a901      	add	r1, sp, #4
 8002a2c:	f7ff ff5d 	bl	80028ea <ism330dhcx_fsm_enable_get>
  if (ret == 0)
 8002a30:	4602      	mov	r2, r0
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d160      	bne.n	8002af8 <ism330dhcx_xl_data_rate_set+0xd6>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002a36:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002a3a:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002a3e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002a42:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002a44:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002a48:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002a4a:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002a4e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002a50:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002a54:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002a56:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002a5a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002a5c:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002a60:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002a62:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002a66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002a6a:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002a6e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 8002a70:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002a74:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 8002a76:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8002a7a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 8002a7c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8002a80:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 8002a82:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8002a86:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 8002a88:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8002a8c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 8002a8e:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8002a92:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002a94:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 8002a98:	d101      	bne.n	8002a9e <ism330dhcx_xl_data_rate_set+0x7c>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8002a9a:	4626      	mov	r6, r4
 8002a9c:	e02d      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8002a9e:	f10d 0103 	add.w	r1, sp, #3
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f7ff ff43 	bl	800292e <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	bb78      	cbnz	r0, 8002b0c <ism330dhcx_xl_data_rate_set+0xea>
        switch (fsm_odr)
 8002aac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d82d      	bhi.n	8002b10 <ism330dhcx_xl_data_rate_set+0xee>
 8002ab4:	e8df f003 	tbb	[pc, r3]
 8002ab8:	150c0502 	.word	0x150c0502
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002abc:	bb54      	cbnz	r4, 8002b14 <ism330dhcx_xl_data_rate_set+0xf2>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8002abe:	2601      	movs	r6, #1
 8002ac0:	e01b      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002ac2:	b34c      	cbz	r4, 8002b18 <ism330dhcx_xl_data_rate_set+0xf6>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002ac4:	2c01      	cmp	r4, #1
 8002ac6:	d001      	beq.n	8002acc <ism330dhcx_xl_data_rate_set+0xaa>
              odr_xl = val;
 8002ac8:	4626      	mov	r6, r4
 8002aca:	e016      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002acc:	2602      	movs	r6, #2
 8002ace:	e014      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002ad0:	b324      	cbz	r4, 8002b1c <ism330dhcx_xl_data_rate_set+0xfa>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002ad2:	2c01      	cmp	r4, #1
 8002ad4:	d024      	beq.n	8002b20 <ism330dhcx_xl_data_rate_set+0xfe>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8002ad6:	2c02      	cmp	r4, #2
 8002ad8:	d001      	beq.n	8002ade <ism330dhcx_xl_data_rate_set+0xbc>
              odr_xl = val;
 8002ada:	4626      	mov	r6, r4
 8002adc:	e00d      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002ade:	2603      	movs	r6, #3
 8002ae0:	e00b      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002ae2:	b1fc      	cbz	r4, 8002b24 <ism330dhcx_xl_data_rate_set+0x102>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002ae4:	2c02      	cmp	r4, #2
 8002ae6:	d01f      	beq.n	8002b28 <ism330dhcx_xl_data_rate_set+0x106>
 8002ae8:	2c03      	cmp	r4, #3
 8002aea:	d01f      	beq.n	8002b2c <ism330dhcx_xl_data_rate_set+0x10a>
 8002aec:	2c01      	cmp	r4, #1
 8002aee:	d001      	beq.n	8002af4 <ism330dhcx_xl_data_rate_set+0xd2>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002af0:	4626      	mov	r6, r4
 8002af2:	e002      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
 8002af4:	2604      	movs	r6, #4
 8002af6:	e000      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8002af8:	4626      	mov	r6, r4
  mlc_enable = PROPERTY_DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0)
 8002b00:	b1b2      	cbz	r2, 8002b30 <ism330dhcx_xl_data_rate_set+0x10e>
  if (ret == 0)
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	d066      	beq.n	8002bd4 <ism330dhcx_xl_data_rate_set+0x1b2>
}
 8002b06:	4610      	mov	r0, r2
 8002b08:	b003      	add	sp, #12
 8002b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ism330dhcx_odr_xl_t odr_xl =  val;
 8002b0c:	4626      	mov	r6, r4
 8002b0e:	e7f4      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
        switch (fsm_odr)
 8002b10:	4626      	mov	r6, r4
 8002b12:	e7f2      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = val;
 8002b14:	4626      	mov	r6, r4
 8002b16:	e7f0      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002b18:	2602      	movs	r6, #2
 8002b1a:	e7ee      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002b1c:	2603      	movs	r6, #3
 8002b1e:	e7ec      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002b20:	2603      	movs	r6, #3
 8002b22:	e7ea      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002b24:	2604      	movs	r6, #4
 8002b26:	e7e8      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002b28:	2604      	movs	r6, #4
 8002b2a:	e7e6      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
 8002b2c:	2604      	movs	r6, #4
 8002b2e:	e7e4      	b.n	8002afa <ism330dhcx_xl_data_rate_set+0xd8>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8002b30:	f10d 0102 	add.w	r1, sp, #2
 8002b34:	4628      	mov	r0, r5
 8002b36:	f7ff ff29 	bl	800298c <ism330dhcx_mlc_get>
 8002b3a:	4602      	mov	r2, r0
    if (mlc_enable == PROPERTY_ENABLE)
 8002b3c:	f89d 7002 	ldrb.w	r7, [sp, #2]
 8002b40:	2f01      	cmp	r7, #1
 8002b42:	d009      	beq.n	8002b58 <ism330dhcx_xl_data_rate_set+0x136>
  if (ret == 0)
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d1de      	bne.n	8002b06 <ism330dhcx_xl_data_rate_set+0xe4>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002b48:	2301      	movs	r3, #1
 8002b4a:	466a      	mov	r2, sp
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	4628      	mov	r0, r5
 8002b50:	f7ff fce0 	bl	8002514 <ism330dhcx_read_reg>
 8002b54:	4602      	mov	r2, r0
 8002b56:	e7d4      	b.n	8002b02 <ism330dhcx_xl_data_rate_set+0xe0>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8002b58:	f10d 0101 	add.w	r1, sp, #1
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f7ff ff31 	bl	80029c4 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
 8002b62:	4602      	mov	r2, r0
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d1ce      	bne.n	8002b06 <ism330dhcx_xl_data_rate_set+0xe4>
        switch (mlc_odr)
 8002b68:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d821      	bhi.n	8002bb4 <ism330dhcx_xl_data_rate_set+0x192>
 8002b70:	e8df f003 	tbb	[pc, r3]
 8002b74:	150c0502 	.word	0x150c0502
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002b78:	b9f4      	cbnz	r4, 8002bb8 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8002b7a:	463e      	mov	r6, r7
 8002b7c:	e7e2      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002b7e:	b1ec      	cbz	r4, 8002bbc <ism330dhcx_xl_data_rate_set+0x19a>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002b80:	2c01      	cmp	r4, #1
 8002b82:	d001      	beq.n	8002b88 <ism330dhcx_xl_data_rate_set+0x166>
              odr_xl = val;
 8002b84:	4626      	mov	r6, r4
 8002b86:	e7dd      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002b88:	2602      	movs	r6, #2
 8002b8a:	e7db      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002b8c:	b1c4      	cbz	r4, 8002bc0 <ism330dhcx_xl_data_rate_set+0x19e>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002b8e:	2c01      	cmp	r4, #1
 8002b90:	d018      	beq.n	8002bc4 <ism330dhcx_xl_data_rate_set+0x1a2>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8002b92:	2c02      	cmp	r4, #2
 8002b94:	d001      	beq.n	8002b9a <ism330dhcx_xl_data_rate_set+0x178>
              odr_xl = val;
 8002b96:	4626      	mov	r6, r4
 8002b98:	e7d4      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002b9a:	2603      	movs	r6, #3
 8002b9c:	e7d2      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002b9e:	b19c      	cbz	r4, 8002bc8 <ism330dhcx_xl_data_rate_set+0x1a6>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002ba0:	2c02      	cmp	r4, #2
 8002ba2:	d013      	beq.n	8002bcc <ism330dhcx_xl_data_rate_set+0x1aa>
 8002ba4:	2c03      	cmp	r4, #3
 8002ba6:	d013      	beq.n	8002bd0 <ism330dhcx_xl_data_rate_set+0x1ae>
 8002ba8:	2c01      	cmp	r4, #1
 8002baa:	d001      	beq.n	8002bb0 <ism330dhcx_xl_data_rate_set+0x18e>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002bac:	4626      	mov	r6, r4
 8002bae:	e7c9      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
 8002bb0:	2604      	movs	r6, #4
 8002bb2:	e7c7      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
        switch (mlc_odr)
 8002bb4:	4626      	mov	r6, r4
 8002bb6:	e7c5      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = val;
 8002bb8:	4626      	mov	r6, r4
 8002bba:	e7c3      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002bbc:	2602      	movs	r6, #2
 8002bbe:	e7c1      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002bc0:	2603      	movs	r6, #3
 8002bc2:	e7bf      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002bc4:	2603      	movs	r6, #3
 8002bc6:	e7bd      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002bc8:	2604      	movs	r6, #4
 8002bca:	e7bb      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002bcc:	2604      	movs	r6, #4
 8002bce:	e7b9      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
 8002bd0:	2604      	movs	r6, #4
 8002bd2:	e7b7      	b.n	8002b44 <ism330dhcx_xl_data_rate_set+0x122>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8002bd4:	f89d 3000 	ldrb.w	r3, [sp]
 8002bd8:	f366 1307 	bfi	r3, r6, #4, #4
 8002bdc:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002be0:	2301      	movs	r3, #1
 8002be2:	466a      	mov	r2, sp
 8002be4:	2110      	movs	r1, #16
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7ff fc9d 	bl	8002526 <ism330dhcx_write_reg>
 8002bec:	4602      	mov	r2, r0
  return ret;
 8002bee:	e78a      	b.n	8002b06 <ism330dhcx_xl_data_rate_set+0xe4>

08002bf0 <ism330dhcx_gy_data_rate_set>:
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	460c      	mov	r4, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8002bf8:	a901      	add	r1, sp, #4
 8002bfa:	f7ff fe76 	bl	80028ea <ism330dhcx_fsm_enable_get>
  if (ret == 0)
 8002bfe:	4602      	mov	r2, r0
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d160      	bne.n	8002cc6 <ism330dhcx_gy_data_rate_set+0xd6>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c04:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002c08:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002c0c:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c10:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002c12:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002c16:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002c18:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002c1c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002c1e:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002c22:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002c24:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002c28:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002c2a:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002c2e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002c30:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002c34:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002c38:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002c3c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 8002c3e:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002c42:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 8002c44:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8002c48:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 8002c4a:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8002c4e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 8002c50:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8002c54:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 8002c56:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8002c5a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 8002c5c:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8002c60:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c62:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 8002c66:	d101      	bne.n	8002c6c <ism330dhcx_gy_data_rate_set+0x7c>
  ism330dhcx_odr_g_t odr_gy =  val;
 8002c68:	4626      	mov	r6, r4
 8002c6a:	e02d      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8002c6c:	f10d 0103 	add.w	r1, sp, #3
 8002c70:	4628      	mov	r0, r5
 8002c72:	f7ff fe5c 	bl	800292e <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
 8002c76:	4602      	mov	r2, r0
 8002c78:	bb78      	cbnz	r0, 8002cda <ism330dhcx_gy_data_rate_set+0xea>
        switch (fsm_odr)
 8002c7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d82d      	bhi.n	8002cde <ism330dhcx_gy_data_rate_set+0xee>
 8002c82:	e8df f003 	tbb	[pc, r3]
 8002c86:	0502      	.short	0x0502
 8002c88:	150c      	.short	0x150c
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002c8a:	bb54      	cbnz	r4, 8002ce2 <ism330dhcx_gy_data_rate_set+0xf2>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8002c8c:	2601      	movs	r6, #1
 8002c8e:	e01b      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002c90:	b34c      	cbz	r4, 8002ce6 <ism330dhcx_gy_data_rate_set+0xf6>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002c92:	2c01      	cmp	r4, #1
 8002c94:	d001      	beq.n	8002c9a <ism330dhcx_gy_data_rate_set+0xaa>
              odr_gy = val;
 8002c96:	4626      	mov	r6, r4
 8002c98:	e016      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002c9a:	2602      	movs	r6, #2
 8002c9c:	e014      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002c9e:	b324      	cbz	r4, 8002cea <ism330dhcx_gy_data_rate_set+0xfa>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002ca0:	2c01      	cmp	r4, #1
 8002ca2:	d024      	beq.n	8002cee <ism330dhcx_gy_data_rate_set+0xfe>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8002ca4:	2c02      	cmp	r4, #2
 8002ca6:	d001      	beq.n	8002cac <ism330dhcx_gy_data_rate_set+0xbc>
              odr_gy = val;
 8002ca8:	4626      	mov	r6, r4
 8002caa:	e00d      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002cac:	2603      	movs	r6, #3
 8002cae:	e00b      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002cb0:	b1fc      	cbz	r4, 8002cf2 <ism330dhcx_gy_data_rate_set+0x102>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002cb2:	2c02      	cmp	r4, #2
 8002cb4:	d01f      	beq.n	8002cf6 <ism330dhcx_gy_data_rate_set+0x106>
 8002cb6:	2c03      	cmp	r4, #3
 8002cb8:	d01f      	beq.n	8002cfa <ism330dhcx_gy_data_rate_set+0x10a>
 8002cba:	2c01      	cmp	r4, #1
 8002cbc:	d001      	beq.n	8002cc2 <ism330dhcx_gy_data_rate_set+0xd2>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002cbe:	4626      	mov	r6, r4
 8002cc0:	e002      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
 8002cc2:	2604      	movs	r6, #4
 8002cc4:	e000      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
  ism330dhcx_odr_g_t odr_gy =  val;
 8002cc6:	4626      	mov	r6, r4
  mlc_enable = PROPERTY_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0)
 8002cce:	b1b2      	cbz	r2, 8002cfe <ism330dhcx_gy_data_rate_set+0x10e>
  if (ret == 0)
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d066      	beq.n	8002da2 <ism330dhcx_gy_data_rate_set+0x1b2>
}
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	b003      	add	sp, #12
 8002cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ism330dhcx_odr_g_t odr_gy =  val;
 8002cda:	4626      	mov	r6, r4
 8002cdc:	e7f4      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
        switch (fsm_odr)
 8002cde:	4626      	mov	r6, r4
 8002ce0:	e7f2      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = val;
 8002ce2:	4626      	mov	r6, r4
 8002ce4:	e7f0      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002ce6:	2602      	movs	r6, #2
 8002ce8:	e7ee      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002cea:	2603      	movs	r6, #3
 8002cec:	e7ec      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002cee:	2603      	movs	r6, #3
 8002cf0:	e7ea      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002cf2:	2604      	movs	r6, #4
 8002cf4:	e7e8      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002cf6:	2604      	movs	r6, #4
 8002cf8:	e7e6      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
 8002cfa:	2604      	movs	r6, #4
 8002cfc:	e7e4      	b.n	8002cc8 <ism330dhcx_gy_data_rate_set+0xd8>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8002cfe:	f10d 0102 	add.w	r1, sp, #2
 8002d02:	4628      	mov	r0, r5
 8002d04:	f7ff fe42 	bl	800298c <ism330dhcx_mlc_get>
 8002d08:	4602      	mov	r2, r0
    if (mlc_enable == PROPERTY_ENABLE)
 8002d0a:	f89d 7002 	ldrb.w	r7, [sp, #2]
 8002d0e:	2f01      	cmp	r7, #1
 8002d10:	d009      	beq.n	8002d26 <ism330dhcx_gy_data_rate_set+0x136>
  if (ret == 0)
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	d1de      	bne.n	8002cd4 <ism330dhcx_gy_data_rate_set+0xe4>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8002d16:	2301      	movs	r3, #1
 8002d18:	466a      	mov	r2, sp
 8002d1a:	2111      	movs	r1, #17
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f7ff fbf9 	bl	8002514 <ism330dhcx_read_reg>
 8002d22:	4602      	mov	r2, r0
 8002d24:	e7d4      	b.n	8002cd0 <ism330dhcx_gy_data_rate_set+0xe0>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8002d26:	f10d 0101 	add.w	r1, sp, #1
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f7ff fe4a 	bl	80029c4 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
 8002d30:	4602      	mov	r2, r0
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d1ce      	bne.n	8002cd4 <ism330dhcx_gy_data_rate_set+0xe4>
        switch (mlc_odr)
 8002d36:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d821      	bhi.n	8002d82 <ism330dhcx_gy_data_rate_set+0x192>
 8002d3e:	e8df f003 	tbb	[pc, r3]
 8002d42:	0502      	.short	0x0502
 8002d44:	150c      	.short	0x150c
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002d46:	b9f4      	cbnz	r4, 8002d86 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8002d48:	463e      	mov	r6, r7
 8002d4a:	e7e2      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002d4c:	b1ec      	cbz	r4, 8002d8a <ism330dhcx_gy_data_rate_set+0x19a>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002d4e:	2c01      	cmp	r4, #1
 8002d50:	d001      	beq.n	8002d56 <ism330dhcx_gy_data_rate_set+0x166>
              odr_gy = val;
 8002d52:	4626      	mov	r6, r4
 8002d54:	e7dd      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002d56:	2602      	movs	r6, #2
 8002d58:	e7db      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002d5a:	b1c4      	cbz	r4, 8002d8e <ism330dhcx_gy_data_rate_set+0x19e>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002d5c:	2c01      	cmp	r4, #1
 8002d5e:	d018      	beq.n	8002d92 <ism330dhcx_gy_data_rate_set+0x1a2>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8002d60:	2c02      	cmp	r4, #2
 8002d62:	d001      	beq.n	8002d68 <ism330dhcx_gy_data_rate_set+0x178>
              odr_gy = val;
 8002d64:	4626      	mov	r6, r4
 8002d66:	e7d4      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002d68:	2603      	movs	r6, #3
 8002d6a:	e7d2      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002d6c:	b19c      	cbz	r4, 8002d96 <ism330dhcx_gy_data_rate_set+0x1a6>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002d6e:	2c02      	cmp	r4, #2
 8002d70:	d013      	beq.n	8002d9a <ism330dhcx_gy_data_rate_set+0x1aa>
 8002d72:	2c03      	cmp	r4, #3
 8002d74:	d013      	beq.n	8002d9e <ism330dhcx_gy_data_rate_set+0x1ae>
 8002d76:	2c01      	cmp	r4, #1
 8002d78:	d001      	beq.n	8002d7e <ism330dhcx_gy_data_rate_set+0x18e>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002d7a:	4626      	mov	r6, r4
 8002d7c:	e7c9      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
 8002d7e:	2604      	movs	r6, #4
 8002d80:	e7c7      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
        switch (mlc_odr)
 8002d82:	4626      	mov	r6, r4
 8002d84:	e7c5      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = val;
 8002d86:	4626      	mov	r6, r4
 8002d88:	e7c3      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002d8a:	2602      	movs	r6, #2
 8002d8c:	e7c1      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002d8e:	2603      	movs	r6, #3
 8002d90:	e7bf      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002d92:	2603      	movs	r6, #3
 8002d94:	e7bd      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002d96:	2604      	movs	r6, #4
 8002d98:	e7bb      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002d9a:	2604      	movs	r6, #4
 8002d9c:	e7b9      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
 8002d9e:	2604      	movs	r6, #4
 8002da0:	e7b7      	b.n	8002d12 <ism330dhcx_gy_data_rate_set+0x122>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8002da2:	f89d 3000 	ldrb.w	r3, [sp]
 8002da6:	f366 1307 	bfi	r3, r6, #4, #4
 8002daa:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8002dae:	2301      	movs	r3, #1
 8002db0:	466a      	mov	r2, sp
 8002db2:	2111      	movs	r1, #17
 8002db4:	4628      	mov	r0, r5
 8002db6:	f7ff fbb6 	bl	8002526 <ism330dhcx_write_reg>
 8002dba:	4602      	mov	r2, r0
  return ret;
 8002dbc:	e78a      	b.n	8002cd4 <ism330dhcx_gy_data_rate_set+0xe4>
	...

08002dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc4:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	9409      	str	r4, [sp, #36]	@ 0x24
 8002dca:	940a      	str	r4, [sp, #40]	@ 0x28
 8002dcc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002dce:	940c      	str	r4, [sp, #48]	@ 0x30
 8002dd0:	940d      	str	r4, [sp, #52]	@ 0x34
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd2:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <MX_GPIO_Init+0x1b0>)
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002de2:	9201      	str	r2, [sp, #4]
 8002de4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002dec:	615a      	str	r2, [r3, #20]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8002df4:	9202      	str	r2, [sp, #8]
 8002df6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002dfe:	615a      	str	r2, [r3, #20]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002e06:	9203      	str	r2, [sp, #12]
 8002e08:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002e10:	615a      	str	r2, [r3, #20]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8002e18:	9204      	str	r2, [sp, #16]
 8002e1a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002e22:	615a      	str	r2, [r3, #20]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002e2a:	9205      	str	r2, [sp, #20]
 8002e2c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e34:	615a      	str	r2, [r3, #20]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002e3c:	9206      	str	r2, [sp, #24]
 8002e3e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002e46:	615a      	str	r2, [r3, #20]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8002e4e:	9207      	str	r2, [sp, #28]
 8002e50:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e58:	615a      	str	r2, [r3, #20]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e60:	9308      	str	r3, [sp, #32]
 8002e62:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002e64:	4f43      	ldr	r7, [pc, #268]	@ (8002f74 <MX_GPIO_Init+0x1b4>)
 8002e66:	4622      	mov	r2, r4
 8002e68:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	f000 fd2f 	bl	80038d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002e72:	4e41      	ldr	r6, [pc, #260]	@ (8002f78 <MX_GPIO_Init+0x1b8>)
 8002e74:	4622      	mov	r2, r4
 8002e76:	2140      	movs	r1, #64	@ 0x40
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 fd29 	bl	80038d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e82:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e84:	2503      	movs	r5, #3
 8002e86:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e8a:	a909      	add	r1, sp, #36	@ 0x24
 8002e8c:	483b      	ldr	r0, [pc, #236]	@ (8002f7c <MX_GPIO_Init+0x1bc>)
 8002e8e:	f000 fb9b 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e96:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e9c:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8002f8c <MX_GPIO_Init+0x1cc>
 8002ea4:	a909      	add	r1, sp, #36	@ 0x24
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	f000 fb8e 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002eac:	2307      	movs	r3, #7
 8002eae:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb0:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002eb4:	a909      	add	r1, sp, #36	@ 0x24
 8002eb6:	4832      	ldr	r0, [pc, #200]	@ (8002f80 <MX_GPIO_Init+0x1c0>)
 8002eb8:	f000 fb86 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 PF5
                           PF6 PF7 PF8 PF9
                           PF10 PF1 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002ebc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002ec0:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec2:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec6:	a909      	add	r1, sp, #36	@ 0x24
 8002ec8:	482e      	ldr	r0, [pc, #184]	@ (8002f84 <MX_GPIO_Init+0x1c4>)
 8002eca:	f000 fb7d 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ece:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8002ed2:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed4:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed8:	a909      	add	r1, sp, #36	@ 0x24
 8002eda:	4640      	mov	r0, r8
 8002edc:	f000 fb74 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ee0:	f248 73ff 	movw	r3, #34815	@ 0x87ff
 8002ee4:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee6:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	a909      	add	r1, sp, #36	@ 0x24
 8002eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef0:	f000 fb6a 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|LD3_Pin|LD2_Pin;
 8002ef4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002ef8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	f04f 0801 	mov.w	r8, #1
 8002efe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	a909      	add	r1, sp, #36	@ 0x24
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f000 fb5d 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8002f0e:	f64b 4376 	movw	r3, #48246	@ 0xbc76
 8002f12:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f14:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f18:	a909      	add	r1, sp, #36	@ 0x24
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f000 fb54 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002f20:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8002f24:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f26:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f2a:	a909      	add	r1, sp, #36	@ 0x24
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	f000 fb4b 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002f32:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 8002f36:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f38:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3c:	a909      	add	r1, sp, #36	@ 0x24
 8002f3e:	4812      	ldr	r0, [pc, #72]	@ (8002f88 <MX_GPIO_Init+0x1c8>)
 8002f40:	f000 fb42 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002f44:	2340      	movs	r3, #64	@ 0x40
 8002f46:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f50:	a909      	add	r1, sp, #36	@ 0x24
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 fb38 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f5c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f60:	a909      	add	r1, sp, #36	@ 0x24
 8002f62:	4630      	mov	r0, r6
 8002f64:	f000 fb30 	bl	80035c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f68:	b00e      	add	sp, #56	@ 0x38
 8002f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	48000400 	.word	0x48000400
 8002f78:	48001800 	.word	0x48001800
 8002f7c:	48001000 	.word	0x48001000
 8002f80:	48001c00 	.word	0x48001c00
 8002f84:	48001400 	.word	0x48001400
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48000800 	.word	0x48000800

08002f90 <MX_DMA_Init>:
{
 8002f90:	b500      	push	{lr}
 8002f92:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <MX_DMA_Init+0x30>)
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4611      	mov	r1, r2
 8002fac:	200d      	movs	r0, #13
 8002fae:	f000 f9fb 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fb2:	200d      	movs	r0, #13
 8002fb4:	f000 fa08 	bl	80033c8 <HAL_NVIC_EnableIRQ>
}
 8002fb8:	b003      	add	sp, #12
 8002fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <configureTimer>:
    float timer_period = clock_frequency / desired_frequency;
 8002fc4:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8003014 <configureTimer+0x50>
 8002fc8:	eec7 6a80 	vdiv.f32	s13, s15, s0
    uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 8002fcc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003018 <configureTimer+0x54>
 8002fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd8:	ee17 3a90 	vmov	r3, s15
    if (prescaler > 65535) {
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d301      	bcc.n	8002fe6 <configureTimer+0x22>
        prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 8002fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	ee07 2a10 	vmov	s14, r2
 8002fec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff8:	ee17 2a90 	vmov	r2, s15
    if (arr > 65535) {
 8002ffc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003000:	d301      	bcc.n	8003006 <configureTimer+0x42>
        arr = 65535; // Cap ARR if it exceeds 16-bit value
 8003002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
    TIM2->PSC = prescaler;   // Set the prescaler
 8003006:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800300a:	628b      	str	r3, [r1, #40]	@ 0x28
    TIM2->ARR = arr;         // Set the auto-reload register
 800300c:	62ca      	str	r2, [r1, #44]	@ 0x2c
    TIM2->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 800300e:	2301      	movs	r3, #1
 8003010:	614b      	str	r3, [r1, #20]
}
 8003012:	4770      	bx	lr
 8003014:	4cbebc20 	.word	0x4cbebc20
 8003018:	37800000 	.word	0x37800000

0800301c <initialCalibration>:
void initialCalibration(){
 800301c:	b510      	push	{r4, lr}
  HAL_UART_Receive(&huart3,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),HAL_MAX_DELAY);
 800301e:	4c19      	ldr	r4, [pc, #100]	@ (8003084 <initialCalibration+0x68>)
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	220e      	movs	r2, #14
 8003026:	4621      	mov	r1, r4
 8003028:	4817      	ldr	r0, [pc, #92]	@ (8003088 <initialCalibration+0x6c>)
 800302a:	f003 fd47 	bl	8006abc <HAL_UART_Receive>
  if (bigBuffer[0] == expectedHeader[0] &&
 800302e:	7823      	ldrb	r3, [r4, #0]
 8003030:	2b4a      	cmp	r3, #74	@ 0x4a
 8003032:	d000      	beq.n	8003036 <initialCalibration+0x1a>
}
 8003034:	bd10      	pop	{r4, pc}
      bigBuffer[1] == expectedHeader[1] &&
 8003036:	7863      	ldrb	r3, [r4, #1]
  if (bigBuffer[0] == expectedHeader[0] &&
 8003038:	2b5f      	cmp	r3, #95	@ 0x5f
 800303a:	d1fb      	bne.n	8003034 <initialCalibration+0x18>
      bigBuffer[2] == expectedHeader[2] &&
 800303c:	78a3      	ldrb	r3, [r4, #2]
      bigBuffer[1] == expectedHeader[1] &&
 800303e:	2b41      	cmp	r3, #65	@ 0x41
 8003040:	d1f8      	bne.n	8003034 <initialCalibration+0x18>
      bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 8003042:	7ae3      	ldrb	r3, [r4, #11]
      bigBuffer[2] == expectedHeader[2] &&
 8003044:	2b41      	cmp	r3, #65	@ 0x41
 8003046:	d1f5      	bne.n	8003034 <initialCalibration+0x18>
      bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 8003048:	7b23      	ldrb	r3, [r4, #12]
      bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 800304a:	2b5f      	cmp	r3, #95	@ 0x5f
 800304c:	d1f2      	bne.n	8003034 <initialCalibration+0x18>
      bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 800304e:	7b63      	ldrb	r3, [r4, #13]
      bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 8003050:	2b4a      	cmp	r3, #74	@ 0x4a
 8003052:	d1ef      	bne.n	8003034 <initialCalibration+0x18>
        if (calibrated == 0){
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <initialCalibration+0x70>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1eb      	bne.n	8003034 <initialCalibration+0x18>
          receivedFromSimulink(&bigBuffer);
 800305c:	4620      	mov	r0, r4
 800305e:	f7fd f915 	bl	800028c <receivedFromSimulink>
          HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 8003062:	2201      	movs	r2, #1
 8003064:	4611      	mov	r1, r2
 8003066:	480a      	ldr	r0, [pc, #40]	@ (8003090 <initialCalibration+0x74>)
 8003068:	f000 fc32 	bl	80038d0 <HAL_GPIO_WritePin>
          calibrated = 1;
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <initialCalibration+0x70>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
          configureTimer(accel2_odr);
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <initialCalibration+0x78>)
 8003074:	ed93 0a00 	vldr	s0, [r3]
 8003078:	f7ff ffa4 	bl	8002fc4 <configureTimer>
          HAL_TIM_Base_Start_IT(&htim2);
 800307c:	4806      	ldr	r0, [pc, #24]	@ (8003098 <initialCalibration+0x7c>)
 800307e:	f002 fe4d 	bl	8005d1c <HAL_TIM_Base_Start_IT>
}
 8003082:	e7d7      	b.n	8003034 <initialCalibration+0x18>
 8003084:	200001f8 	.word	0x200001f8
 8003088:	2000052c 	.word	0x2000052c
 800308c:	200001f4 	.word	0x200001f4
 8003090:	48000400 	.word	0x48000400
 8003094:	200000f8 	.word	0x200000f8
 8003098:	200005b4 	.word	0x200005b4

0800309c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800309e:	6802      	ldr	r2, [r0, #0]
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d000      	beq.n	80030a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030a6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80030a8:	f000 f912 	bl	80032d0 <HAL_IncTick>
}
 80030ac:	e7fb      	b.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00

080030b4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <Error_Handler+0x2>

080030b8 <MX_RTC_Init>:
{
 80030b8:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80030ba:	4809      	ldr	r0, [pc, #36]	@ (80030e0 <MX_RTC_Init+0x28>)
 80030bc:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <MX_RTC_Init+0x2c>)
 80030be:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030c0:	2300      	movs	r3, #0
 80030c2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030c4:	227f      	movs	r2, #127	@ 0x7f
 80030c6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80030c8:	22ff      	movs	r2, #255	@ 0xff
 80030ca:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030cc:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030ce:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030d0:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030d2:	f002 fda5 	bl	8005c20 <HAL_RTC_Init>
 80030d6:	b900      	cbnz	r0, 80030da <MX_RTC_Init+0x22>
}
 80030d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80030da:	f7ff ffeb 	bl	80030b4 <Error_Handler>
 80030de:	bf00      	nop
 80030e0:	20000600 	.word	0x20000600
 80030e4:	40002800 	.word	0x40002800

080030e8 <MX_USART3_UART_Init>:
{
 80030e8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80030ea:	480e      	ldr	r0, [pc, #56]	@ (8003124 <MX_USART3_UART_Init+0x3c>)
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <MX_USART3_UART_Init+0x40>)
 80030ee:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 1843200;
 80030f0:	f44f 13e1 	mov.w	r3, #1843200	@ 0x1c2000
 80030f4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80030f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030fa:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 80030fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003100:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8003102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003106:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003108:	230c      	movs	r3, #12
 800310a:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310c:	2300      	movs	r3, #0
 800310e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003110:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003112:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003114:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003116:	f003 fdc0 	bl	8006c9a <HAL_UART_Init>
 800311a:	b900      	cbnz	r0, 800311e <MX_USART3_UART_Init+0x36>
}
 800311c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800311e:	f7ff ffc9 	bl	80030b4 <Error_Handler>
 8003122:	bf00      	nop
 8003124:	2000052c 	.word	0x2000052c
 8003128:	40004800 	.word	0x40004800

0800312c <MX_USB_PCD_Init>:
{
 800312c:	b508      	push	{r3, lr}
  hpcd_USB_FS.Instance = USB;
 800312e:	4809      	ldr	r0, [pc, #36]	@ (8003154 <MX_USB_PCD_Init+0x28>)
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <MX_USB_PCD_Init+0x2c>)
 8003132:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003134:	2308      	movs	r3, #8
 8003136:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003138:	2302      	movs	r3, #2
 800313a:	7143      	strb	r3, [r0, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800313c:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800313e:	2300      	movs	r3, #0
 8003140:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003142:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003144:	72c3      	strb	r3, [r0, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003146:	f001 f97d 	bl	8004444 <HAL_PCD_Init>
 800314a:	b900      	cbnz	r0, 800314e <MX_USB_PCD_Init+0x22>
}
 800314c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800314e:	f7ff ffb1 	bl	80030b4 <Error_Handler>
 8003152:	bf00      	nop
 8003154:	20000214 	.word	0x20000214
 8003158:	40005c00 	.word	0x40005c00

0800315c <MX_TIM2_Init>:
{
 800315c:	b500      	push	{lr}
 800315e:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003160:	2300      	movs	r3, #0
 8003162:	9304      	str	r3, [sp, #16]
 8003164:	9305      	str	r3, [sp, #20]
 8003166:	9306      	str	r3, [sp, #24]
 8003168:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	9302      	str	r3, [sp, #8]
 800316e:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 8003170:	4813      	ldr	r0, [pc, #76]	@ (80031c0 <MX_TIM2_Init+0x64>)
 8003172:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003176:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 100-1;
 8003178:	2263      	movs	r2, #99	@ 0x63
 800317a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100-1;
 800317e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003180:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003186:	f002 ff41 	bl	800600c <HAL_TIM_Base_Init>
 800318a:	b990      	cbnz	r0, 80031b2 <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800318c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003190:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003192:	a904      	add	r1, sp, #16
 8003194:	480a      	ldr	r0, [pc, #40]	@ (80031c0 <MX_TIM2_Init+0x64>)
 8003196:	f002 ff77 	bl	8006088 <HAL_TIM_ConfigClockSource>
 800319a:	b960      	cbnz	r0, 80031b6 <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031a2:	a901      	add	r1, sp, #4
 80031a4:	4806      	ldr	r0, [pc, #24]	@ (80031c0 <MX_TIM2_Init+0x64>)
 80031a6:	f002 ffef 	bl	8006188 <HAL_TIMEx_MasterConfigSynchronization>
 80031aa:	b930      	cbnz	r0, 80031ba <MX_TIM2_Init+0x5e>
}
 80031ac:	b009      	add	sp, #36	@ 0x24
 80031ae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80031b2:	f7ff ff7f 	bl	80030b4 <Error_Handler>
    Error_Handler();
 80031b6:	f7ff ff7d 	bl	80030b4 <Error_Handler>
    Error_Handler();
 80031ba:	f7ff ff7b 	bl	80030b4 <Error_Handler>
 80031be:	bf00      	nop
 80031c0:	200005b4 	.word	0x200005b4

080031c4 <SystemClock_Config>:
{
 80031c4:	b500      	push	{lr}
 80031c6:	b0a7      	sub	sp, #156	@ 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031c8:	2228      	movs	r2, #40	@ 0x28
 80031ca:	2100      	movs	r1, #0
 80031cc:	a81c      	add	r0, sp, #112	@ 0x70
 80031ce:	f004 fb6c 	bl	80078aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031d2:	2100      	movs	r1, #0
 80031d4:	9117      	str	r1, [sp, #92]	@ 0x5c
 80031d6:	9118      	str	r1, [sp, #96]	@ 0x60
 80031d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80031da:	911a      	str	r1, [sp, #104]	@ 0x68
 80031dc:	911b      	str	r1, [sp, #108]	@ 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031de:	2258      	movs	r2, #88	@ 0x58
 80031e0:	a801      	add	r0, sp, #4
 80031e2:	f004 fb62 	bl	80078aa <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80031e6:	230b      	movs	r3, #11
 80031e8:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031ea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80031ee:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031f0:	2301      	movs	r3, #1
 80031f2:	931f      	str	r3, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031f4:	2210      	movs	r2, #16
 80031f6:	9220      	str	r2, [sp, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031f8:	9321      	str	r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031fa:	2302      	movs	r3, #2
 80031fc:	9322      	str	r3, [sp, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003202:	9323      	str	r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003204:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003208:	9324      	str	r3, [sp, #144]	@ 0x90
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320a:	a81c      	add	r0, sp, #112	@ 0x70
 800320c:	f001 fec6 	bl	8004f9c <HAL_RCC_OscConfig>
 8003210:	b9f0      	cbnz	r0, 8003250 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003212:	230f      	movs	r3, #15
 8003214:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003216:	2102      	movs	r1, #2
 8003218:	9118      	str	r1, [sp, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800321a:	2300      	movs	r3, #0
 800321c:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800321e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003222:	921a      	str	r2, [sp, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003224:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003226:	a817      	add	r0, sp, #92	@ 0x5c
 8003228:	f002 fa04 	bl	8005634 <HAL_RCC_ClockConfig>
 800322c:	b990      	cbnz	r0, 8003254 <SystemClock_Config+0x90>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <SystemClock_Config+0x98>)
 8003230:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003232:	2300      	movs	r3, #0
 8003234:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003236:	9308      	str	r3, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800323c:	9202      	str	r2, [sp, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800323e:	9316      	str	r3, [sp, #88]	@ 0x58
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003240:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003242:	a801      	add	r0, sp, #4
 8003244:	f002 fb1a 	bl	800587c <HAL_RCCEx_PeriphCLKConfig>
 8003248:	b930      	cbnz	r0, 8003258 <SystemClock_Config+0x94>
}
 800324a:	b027      	add	sp, #156	@ 0x9c
 800324c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003250:	f7ff ff30 	bl	80030b4 <Error_Handler>
    Error_Handler();
 8003254:	f7ff ff2e 	bl	80030b4 <Error_Handler>
    Error_Handler();
 8003258:	f7ff ff2c 	bl	80030b4 <Error_Handler>
 800325c:	00130024 	.word	0x00130024

08003260 <main>:
{
 8003260:	b508      	push	{r3, lr}
  HAL_Init();
 8003262:	f000 f823 	bl	80032ac <HAL_Init>
  SystemClock_Config();
 8003266:	f7ff ffad 	bl	80031c4 <SystemClock_Config>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,0);
 800326a:	2200      	movs	r2, #0
 800326c:	2101      	movs	r1, #1
 800326e:	480d      	ldr	r0, [pc, #52]	@ (80032a4 <main+0x44>)
 8003270:	f000 fb2e 	bl	80038d0 <HAL_GPIO_WritePin>
  MX_GPIO_Init();
 8003274:	f7ff fda4 	bl	8002dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003278:	f7ff fe8a 	bl	8002f90 <MX_DMA_Init>
  MX_RTC_Init();
 800327c:	f7ff ff1c 	bl	80030b8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8003280:	f7ff ff32 	bl	80030e8 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8003284:	f7ff ff52 	bl	800312c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8003288:	f7ff ff68 	bl	800315c <MX_TIM2_Init>
  initIKS02A1();
 800328c:	f7fc ffe9 	bl	8000262 <initIKS02A1>
  while (calibrated != 1){
 8003290:	e001      	b.n	8003296 <main+0x36>
    initialCalibration();
 8003292:	f7ff fec3 	bl	800301c <initialCalibration>
  while (calibrated != 1){
 8003296:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <main+0x48>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d1f9      	bne.n	8003292 <main+0x32>
    getIKS02A1();
 800329e:	f7fc ffe7 	bl	8000270 <getIKS02A1>
  while (1)
 80032a2:	e7fc      	b.n	800329e <main+0x3e>
 80032a4:	48000400 	.word	0x48000400
 80032a8:	200001f4 	.word	0x200001f4

080032ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ac:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ae:	4a07      	ldr	r2, [pc, #28]	@ (80032cc <HAL_Init+0x20>)
 80032b0:	6813      	ldr	r3, [r2, #0]
 80032b2:	f043 0310 	orr.w	r3, r3, #16
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b8:	2003      	movs	r0, #3
 80032ba:	f000 f863 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032be:	200f      	movs	r0, #15
 80032c0:	f002 ffb6 	bl	8006230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c4:	f000 ff6e 	bl	80041a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80032c8:	2000      	movs	r0, #0
 80032ca:	bd08      	pop	{r3, pc}
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80032d0:	4a03      	ldr	r2, [pc, #12]	@ (80032e0 <HAL_IncTick+0x10>)
 80032d2:	6811      	ldr	r1, [r2, #0]
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <HAL_IncTick+0x14>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	440b      	add	r3, r1
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000620 	.word	0x20000620
 80032e4:	200000c8 	.word	0x200000c8

080032e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80032e8:	4b01      	ldr	r3, [pc, #4]	@ (80032f0 <HAL_GetTick+0x8>)
 80032ea:	6818      	ldr	r0, [r3, #0]
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000620 	.word	0x20000620

080032f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff fff6 	bl	80032e8 <HAL_GetTick>
 80032fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003302:	d002      	beq.n	800330a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <HAL_Delay+0x24>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800330a:	f7ff ffed 	bl	80032e8 <HAL_GetTick>
 800330e:	1b40      	subs	r0, r0, r5
 8003310:	42a0      	cmp	r0, r4
 8003312:	d3fa      	bcc.n	800330a <HAL_Delay+0x16>
  {
  }
}
 8003314:	bd38      	pop	{r3, r4, r5, pc}
 8003316:	bf00      	nop
 8003318:	200000c8 	.word	0x200000c8

0800331c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800331c:	2800      	cmp	r0, #0
 800331e:	db08      	blt.n	8003332 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	0109      	lsls	r1, r1, #4
 8003322:	b2c9      	uxtb	r1, r1
 8003324:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003328:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800332c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003330:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003332:	f000 000f 	and.w	r0, r0, #15
 8003336:	0109      	lsls	r1, r1, #4
 8003338:	b2c9      	uxtb	r1, r1
 800333a:	4b01      	ldr	r3, [pc, #4]	@ (8003340 <__NVIC_SetPriority+0x24>)
 800333c:	5419      	strb	r1, [r3, r0]
  }
}
 800333e:	4770      	bx	lr
 8003340:	e000ed14 	.word	0xe000ed14

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003346:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800334a:	f1c0 0c07 	rsb	ip, r0, #7
 800334e:	f1bc 0f04 	cmp.w	ip, #4
 8003352:	bf28      	it	cs
 8003354:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003358:	1d03      	adds	r3, r0, #4
 800335a:	2b06      	cmp	r3, #6
 800335c:	d90f      	bls.n	800337e <NVIC_EncodePriority+0x3a>
 800335e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 3eff 	mov.w	lr, #4294967295
 8003364:	fa0e f00c 	lsl.w	r0, lr, ip
 8003368:	ea21 0100 	bic.w	r1, r1, r0
 800336c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003372:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003376:	ea41 0002 	orr.w	r0, r1, r2
 800337a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337e:	2300      	movs	r3, #0
 8003380:	e7ee      	b.n	8003360 <NVIC_EncodePriority+0x1c>
	...

08003384 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4a07      	ldr	r2, [pc, #28]	@ (80033a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003386:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003388:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	0200      	lsls	r0, r0, #8
 8003392:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003396:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80033a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_NVIC_SetPriority+0x1c>)
 80033ae:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80033b4:	f7ff ffc6 	bl	8003344 <NVIC_EncodePriority>
 80033b8:	4601      	mov	r1, r0
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff ffae 	bl	800331c <__NVIC_SetPriority>
}
 80033c0:	bd10      	pop	{r4, pc}
 80033c2:	bf00      	nop
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033c8:	2800      	cmp	r0, #0
 80033ca:	db07      	blt.n	80033dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033cc:	f000 021f 	and.w	r2, r0, #31
 80033d0:	0940      	lsrs	r0, r0, #5
 80033d2:	2301      	movs	r3, #1
 80033d4:	4093      	lsls	r3, r2
 80033d6:	4a02      	ldr	r2, [pc, #8]	@ (80033e0 <HAL_NVIC_EnableIRQ+0x18>)
 80033d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033e4:	6802      	ldr	r2, [r0, #0]
 80033e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <DMA_CalcBaseAndBitshift+0x34>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d80a      	bhi.n	8003402 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <DMA_CalcBaseAndBitshift+0x38>)
 80033ee:	4413      	add	r3, r2
 80033f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003420 <DMA_CalcBaseAndBitshift+0x3c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	6403      	str	r3, [r0, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <DMA_CalcBaseAndBitshift+0x40>)
 80033fe:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8003400:	4770      	bx	lr
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <DMA_CalcBaseAndBitshift+0x44>)
 8003404:	4413      	add	r3, r2
 8003406:	4a06      	ldr	r2, [pc, #24]	@ (8003420 <DMA_CalcBaseAndBitshift+0x3c>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	6403      	str	r3, [r0, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <DMA_CalcBaseAndBitshift+0x48>)
 8003414:	63c3      	str	r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003416:	4770      	bx	lr
 8003418:	40020407 	.word	0x40020407
 800341c:	bffdfff8 	.word	0xbffdfff8
 8003420:	cccccccd 	.word	0xcccccccd
 8003424:	40020000 	.word	0x40020000
 8003428:	bffdfbf8 	.word	0xbffdfbf8
 800342c:	40020400 	.word	0x40020400

08003430 <HAL_DMA_Init>:
  if(NULL == hdma)
 8003430:	b320      	cbz	r0, 800347c <HAL_DMA_Init+0x4c>
{
 8003432:	b510      	push	{r4, lr}
 8003434:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 800343c:	6801      	ldr	r1, [r0, #0]
 800343e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003440:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8003444:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
  tmp |=  hdma->Init.Direction        |
 8003448:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 800344c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344e:	68e0      	ldr	r0, [r4, #12]
 8003450:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003454:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	6960      	ldr	r0, [r4, #20]
 8003458:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800345a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800345e:	69e0      	ldr	r0, [r4, #28]
 8003460:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8003462:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003464:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003466:	4620      	mov	r0, r4
 8003468:	f7ff ffbc 	bl	80033e4 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346c:	2000      	movs	r0, #0
 800346e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003470:	2301      	movs	r3, #1
 8003472:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8003476:	f884 0020 	strb.w	r0, [r4, #32]
}
 800347a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
}
 800347e:	4770      	bx	lr

08003480 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8003480:	4603      	mov	r3, r0
 8003482:	b300      	cbz	r0, 80034c6 <HAL_DMA_Abort+0x46>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003484:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8003488:	2a02      	cmp	r2, #2
 800348a:	d006      	beq.n	800349a <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	2204      	movs	r2, #4
 800348e:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8003490:	2200      	movs	r2, #0
 8003492:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8003496:	2001      	movs	r0, #1
 8003498:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800349a:	6801      	ldr	r1, [r0, #0]
 800349c:	680a      	ldr	r2, [r1, #0]
 800349e:	f022 020e 	bic.w	r2, r2, #14
 80034a2:	600a      	str	r2, [r1, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034a4:	6801      	ldr	r1, [r0, #0]
 80034a6:	680a      	ldr	r2, [r1, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80034b0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80034ba:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);
 80034be:	2000      	movs	r0, #0
 80034c0:	f883 0020 	strb.w	r0, [r3, #32]
  return HAL_OK;
 80034c4:	4770      	bx	lr
    return HAL_ERROR;
 80034c6:	2001      	movs	r0, #1
}
 80034c8:	4770      	bx	lr

080034ca <HAL_DMA_Abort_IT>:
{
 80034ca:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034cc:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d4:	2304      	movs	r3, #4
 80034d6:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
}
 80034da:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034dc:	6802      	ldr	r2, [r0, #0]
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	f023 030e 	bic.w	r3, r3, #14
 80034e4:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034e6:	6802      	ldr	r2, [r0, #0]
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034f0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80034f2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80034f4:	2201      	movs	r2, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034fc:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003500:	2300      	movs	r3, #0
 8003502:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003506:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003508:	b113      	cbz	r3, 8003510 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800350a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2000      	movs	r0, #0
 800350e:	e7e4      	b.n	80034da <HAL_DMA_Abort_IT+0x10>
 8003510:	2000      	movs	r0, #0
 8003512:	e7e2      	b.n	80034da <HAL_DMA_Abort_IT+0x10>

08003514 <HAL_DMA_IRQHandler>:
{
 8003514:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003516:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003518:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800351a:	6804      	ldr	r4, [r0, #0]
 800351c:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800351e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003520:	2304      	movs	r3, #4
 8003522:	408b      	lsls	r3, r1
 8003524:	4213      	tst	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_DMA_IRQHandler+0x3c>
 8003528:	f015 0f04 	tst.w	r5, #4
 800352c:	d010      	beq.n	8003550 <HAL_DMA_IRQHandler+0x3c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	f013 0f20 	tst.w	r3, #32
 8003534:	d103      	bne.n	800353e <HAL_DMA_IRQHandler+0x2a>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800353e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003542:	2304      	movs	r3, #4
 8003544:	408b      	lsls	r3, r1
 8003546:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003548:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800354a:	b103      	cbz	r3, 800354e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferHalfCpltCallback(hdma);
 800354c:	4798      	blx	r3
}
 800354e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003550:	2302      	movs	r3, #2
 8003552:	408b      	lsls	r3, r1
 8003554:	4213      	tst	r3, r2
 8003556:	d01a      	beq.n	800358e <HAL_DMA_IRQHandler+0x7a>
 8003558:	f015 0f02 	tst.w	r5, #2
 800355c:	d017      	beq.n	800358e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f013 0f20 	tst.w	r3, #32
 8003564:	d106      	bne.n	8003574 <HAL_DMA_IRQHandler+0x60>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	f023 030a 	bic.w	r3, r3, #10
 800356c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800356e:	2301      	movs	r3, #1
 8003570:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003574:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003576:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003578:	2302      	movs	r3, #2
 800357a:	408b      	lsls	r3, r1
 800357c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800357e:	2300      	movs	r3, #0
 8003580:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003584:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0e1      	beq.n	800354e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferCpltCallback(hdma);
 800358a:	4798      	blx	r3
 800358c:	e7df      	b.n	800354e <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800358e:	2308      	movs	r3, #8
 8003590:	408b      	lsls	r3, r1
 8003592:	4213      	tst	r3, r2
 8003594:	d0db      	beq.n	800354e <HAL_DMA_IRQHandler+0x3a>
 8003596:	f015 0f08 	tst.w	r5, #8
 800359a:	d0d8      	beq.n	800354e <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	f023 030e 	bic.w	r3, r3, #14
 80035a2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035a4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80035a6:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80035a8:	2301      	movs	r3, #1
 80035aa:	fa03 f202 	lsl.w	r2, r3, r2
 80035ae:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035b0:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80035b6:	2300      	movs	r3, #0
 80035b8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80035bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0c5      	beq.n	800354e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80035c2:	4798      	blx	r3
}
 80035c4:	e7c3      	b.n	800354e <HAL_DMA_IRQHandler+0x3a>
	...

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80035cc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ce:	e062      	b.n	8003696 <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035d2:	005e      	lsls	r6, r3, #1
 80035d4:	2403      	movs	r4, #3
 80035d6:	40b4      	lsls	r4, r6
 80035d8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035dc:	68cc      	ldr	r4, [r1, #12]
 80035de:	40b4      	lsls	r4, r6
 80035e0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80035e2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ea:	684c      	ldr	r4, [r1, #4]
 80035ec:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80035f0:	409c      	lsls	r4, r3
 80035f2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80035f4:	6044      	str	r4, [r0, #4]
 80035f6:	e05f      	b.n	80036b8 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f8:	08dd      	lsrs	r5, r3, #3
 80035fa:	3508      	adds	r5, #8
 80035fc:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003600:	f003 0c07 	and.w	ip, r3, #7
 8003604:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003608:	f04f 0e0f 	mov.w	lr, #15
 800360c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003610:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003614:	690c      	ldr	r4, [r1, #16]
 8003616:	fa04 f40c 	lsl.w	r4, r4, ip
 800361a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800361e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003622:	e060      	b.n	80036e6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003624:	2406      	movs	r4, #6
 8003626:	e000      	b.n	800362a <HAL_GPIO_Init+0x62>
 8003628:	2400      	movs	r4, #0
 800362a:	fa04 f40e 	lsl.w	r4, r4, lr
 800362e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003630:	f10c 0c02 	add.w	ip, ip, #2
 8003634:	4d58      	ldr	r5, [pc, #352]	@ (8003798 <HAL_GPIO_Init+0x1d0>)
 8003636:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363a:	4c58      	ldr	r4, [pc, #352]	@ (800379c <HAL_GPIO_Init+0x1d4>)
 800363c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800363e:	43d4      	mvns	r4, r2
 8003640:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003644:	684f      	ldr	r7, [r1, #4]
 8003646:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800364a:	d001      	beq.n	8003650 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800364c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8003650:	4d52      	ldr	r5, [pc, #328]	@ (800379c <HAL_GPIO_Init+0x1d4>)
 8003652:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003654:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003656:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800365a:	684f      	ldr	r7, [r1, #4]
 800365c:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8003660:	d001      	beq.n	8003666 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003662:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 8003666:	4d4d      	ldr	r5, [pc, #308]	@ (800379c <HAL_GPIO_Init+0x1d4>)
 8003668:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 800366a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800366c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003670:	684f      	ldr	r7, [r1, #4]
 8003672:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8003676:	d001      	beq.n	800367c <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003678:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800367c:	4d47      	ldr	r5, [pc, #284]	@ (800379c <HAL_GPIO_Init+0x1d4>)
 800367e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003680:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003682:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003684:	684e      	ldr	r6, [r1, #4]
 8003686:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800368a:	d001      	beq.n	8003690 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800368c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8003690:	4a42      	ldr	r2, [pc, #264]	@ (800379c <HAL_GPIO_Init+0x1d4>)
 8003692:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8003694:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003696:	680a      	ldr	r2, [r1, #0]
 8003698:	fa32 f403 	lsrs.w	r4, r2, r3
 800369c:	d07a      	beq.n	8003794 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800369e:	f04f 0c01 	mov.w	ip, #1
 80036a2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80036a6:	ea1c 0202 	ands.w	r2, ip, r2
 80036aa:	d0f3      	beq.n	8003694 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ac:	684c      	ldr	r4, [r1, #4]
 80036ae:	f004 0403 	and.w	r4, r4, #3
 80036b2:	3c01      	subs	r4, #1
 80036b4:	2c01      	cmp	r4, #1
 80036b6:	d98b      	bls.n	80035d0 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b8:	684c      	ldr	r4, [r1, #4]
 80036ba:	f004 0403 	and.w	r4, r4, #3
 80036be:	2c03      	cmp	r4, #3
 80036c0:	d00c      	beq.n	80036dc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80036c2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80036c4:	005d      	lsls	r5, r3, #1
 80036c6:	f04f 0c03 	mov.w	ip, #3
 80036ca:	fa0c fc05 	lsl.w	ip, ip, r5
 80036ce:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036d2:	688c      	ldr	r4, [r1, #8]
 80036d4:	40ac      	lsls	r4, r5
 80036d6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80036da:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036dc:	684c      	ldr	r4, [r1, #4]
 80036de:	f004 0403 	and.w	r4, r4, #3
 80036e2:	2c02      	cmp	r4, #2
 80036e4:	d088      	beq.n	80035f8 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80036e6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80036ec:	f04f 0c03 	mov.w	ip, #3
 80036f0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80036f4:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036f8:	684c      	ldr	r4, [r1, #4]
 80036fa:	f004 0403 	and.w	r4, r4, #3
 80036fe:	fa04 f40e 	lsl.w	r4, r4, lr
 8003702:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003706:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003708:	684c      	ldr	r4, [r1, #4]
 800370a:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800370e:	d0c1      	beq.n	8003694 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003710:	4c23      	ldr	r4, [pc, #140]	@ (80037a0 <HAL_GPIO_Init+0x1d8>)
 8003712:	69a5      	ldr	r5, [r4, #24]
 8003714:	f045 0501 	orr.w	r5, r5, #1
 8003718:	61a5      	str	r5, [r4, #24]
 800371a:	69a4      	ldr	r4, [r4, #24]
 800371c:	f004 0401 	and.w	r4, r4, #1
 8003720:	9401      	str	r4, [sp, #4]
 8003722:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003724:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003728:	f10c 0502 	add.w	r5, ip, #2
 800372c:	4c1a      	ldr	r4, [pc, #104]	@ (8003798 <HAL_GPIO_Init+0x1d0>)
 800372e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003732:	f003 0e03 	and.w	lr, r3, #3
 8003736:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800373a:	240f      	movs	r4, #15
 800373c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003740:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003744:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003748:	f43f af6e 	beq.w	8003628 <HAL_GPIO_Init+0x60>
 800374c:	4c15      	ldr	r4, [pc, #84]	@ (80037a4 <HAL_GPIO_Init+0x1dc>)
 800374e:	42a0      	cmp	r0, r4
 8003750:	d016      	beq.n	8003780 <HAL_GPIO_Init+0x1b8>
 8003752:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003756:	42a0      	cmp	r0, r4
 8003758:	d014      	beq.n	8003784 <HAL_GPIO_Init+0x1bc>
 800375a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800375e:	42a0      	cmp	r0, r4
 8003760:	d012      	beq.n	8003788 <HAL_GPIO_Init+0x1c0>
 8003762:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003766:	42a0      	cmp	r0, r4
 8003768:	d010      	beq.n	800378c <HAL_GPIO_Init+0x1c4>
 800376a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800376e:	42a0      	cmp	r0, r4
 8003770:	d00e      	beq.n	8003790 <HAL_GPIO_Init+0x1c8>
 8003772:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003776:	42a0      	cmp	r0, r4
 8003778:	f43f af54 	beq.w	8003624 <HAL_GPIO_Init+0x5c>
 800377c:	2407      	movs	r4, #7
 800377e:	e754      	b.n	800362a <HAL_GPIO_Init+0x62>
 8003780:	2401      	movs	r4, #1
 8003782:	e752      	b.n	800362a <HAL_GPIO_Init+0x62>
 8003784:	2402      	movs	r4, #2
 8003786:	e750      	b.n	800362a <HAL_GPIO_Init+0x62>
 8003788:	2403      	movs	r4, #3
 800378a:	e74e      	b.n	800362a <HAL_GPIO_Init+0x62>
 800378c:	2404      	movs	r4, #4
 800378e:	e74c      	b.n	800362a <HAL_GPIO_Init+0x62>
 8003790:	2405      	movs	r4, #5
 8003792:	e74a      	b.n	800362a <HAL_GPIO_Init+0x62>
  }
}
 8003794:	b003      	add	sp, #12
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003798:	40010000 	.word	0x40010000
 800379c:	40010400 	.word	0x40010400
 80037a0:	40021000 	.word	0x40021000
 80037a4:	48000400 	.word	0x48000400

080037a8 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80037a8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80037aa:	fa31 f203 	lsrs.w	r2, r1, r3
 80037ae:	f000 8087 	beq.w	80038c0 <HAL_GPIO_DeInit+0x118>
{
 80037b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b4:	e02e      	b.n	8003814 <HAL_GPIO_DeInit+0x6c>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80037b6:	2506      	movs	r5, #6
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
 80037ba:	2500      	movs	r5, #0
 80037bc:	fa05 f50c 	lsl.w	r5, r5, ip
 80037c0:	42a5      	cmp	r5, r4
 80037c2:	d061      	beq.n	8003888 <HAL_GPIO_DeInit+0xe0>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037c4:	6804      	ldr	r4, [r0, #0]
 80037c6:	005d      	lsls	r5, r3, #1
 80037c8:	f04f 0c03 	mov.w	ip, #3
 80037cc:	fa0c fc05 	lsl.w	ip, ip, r5
 80037d0:	ea24 040c 	bic.w	r4, r4, ip
 80037d4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80037d6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80037da:	f10e 0e08 	add.w	lr, lr, #8
 80037de:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80037e2:	f003 0607 	and.w	r6, r3, #7
 80037e6:	00b6      	lsls	r6, r6, #2
 80037e8:	250f      	movs	r5, #15
 80037ea:	40b5      	lsls	r5, r6
 80037ec:	ea24 0405 	bic.w	r4, r4, r5
 80037f0:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037f4:	68c4      	ldr	r4, [r0, #12]
 80037f6:	ea24 040c 	bic.w	r4, r4, ip
 80037fa:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037fc:	6844      	ldr	r4, [r0, #4]
 80037fe:	ea24 0202 	bic.w	r2, r4, r2
 8003802:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003804:	6882      	ldr	r2, [r0, #8]
 8003806:	ea22 020c 	bic.w	r2, r2, ip
 800380a:	6082      	str	r2, [r0, #8]
    }

    position++;
 800380c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800380e:	fa31 f203 	lsrs.w	r2, r1, r3
 8003812:	d054      	beq.n	80038be <HAL_GPIO_DeInit+0x116>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003818:	ea12 0701 	ands.w	r7, r2, r1
 800381c:	d0f6      	beq.n	800380c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800381e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8003822:	f10e 0502 	add.w	r5, lr, #2
 8003826:	4c27      	ldr	r4, [pc, #156]	@ (80038c4 <HAL_GPIO_DeInit+0x11c>)
 8003828:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800382c:	f003 0c03 	and.w	ip, r3, #3
 8003830:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003834:	250f      	movs	r5, #15
 8003836:	fa05 f60c 	lsl.w	r6, r5, ip
 800383a:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800383c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003840:	d0bb      	beq.n	80037ba <HAL_GPIO_DeInit+0x12>
 8003842:	4d21      	ldr	r5, [pc, #132]	@ (80038c8 <HAL_GPIO_DeInit+0x120>)
 8003844:	42a8      	cmp	r0, r5
 8003846:	d015      	beq.n	8003874 <HAL_GPIO_DeInit+0xcc>
 8003848:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800384c:	42a8      	cmp	r0, r5
 800384e:	d013      	beq.n	8003878 <HAL_GPIO_DeInit+0xd0>
 8003850:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003854:	42a8      	cmp	r0, r5
 8003856:	d011      	beq.n	800387c <HAL_GPIO_DeInit+0xd4>
 8003858:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800385c:	42a8      	cmp	r0, r5
 800385e:	d00f      	beq.n	8003880 <HAL_GPIO_DeInit+0xd8>
 8003860:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003864:	42a8      	cmp	r0, r5
 8003866:	d00d      	beq.n	8003884 <HAL_GPIO_DeInit+0xdc>
 8003868:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800386c:	42a8      	cmp	r0, r5
 800386e:	d0a2      	beq.n	80037b6 <HAL_GPIO_DeInit+0xe>
 8003870:	2507      	movs	r5, #7
 8003872:	e7a3      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
 8003874:	2501      	movs	r5, #1
 8003876:	e7a1      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
 8003878:	2502      	movs	r5, #2
 800387a:	e79f      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
 800387c:	2503      	movs	r5, #3
 800387e:	e79d      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
 8003880:	2504      	movs	r5, #4
 8003882:	e79b      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
 8003884:	2505      	movs	r5, #5
 8003886:	e799      	b.n	80037bc <HAL_GPIO_DeInit+0x14>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003888:	4c10      	ldr	r4, [pc, #64]	@ (80038cc <HAL_GPIO_DeInit+0x124>)
 800388a:	6825      	ldr	r5, [r4, #0]
 800388c:	ea25 0507 	bic.w	r5, r5, r7
 8003890:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003892:	6865      	ldr	r5, [r4, #4]
 8003894:	ea25 0507 	bic.w	r5, r5, r7
 8003898:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800389a:	68e5      	ldr	r5, [r4, #12]
 800389c:	ea25 0507 	bic.w	r5, r5, r7
 80038a0:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038a2:	68a5      	ldr	r5, [r4, #8]
 80038a4:	ea25 0507 	bic.w	r5, r5, r7
 80038a8:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038aa:	4f06      	ldr	r7, [pc, #24]	@ (80038c4 <HAL_GPIO_DeInit+0x11c>)
 80038ac:	f10e 0402 	add.w	r4, lr, #2
 80038b0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80038b4:	ea25 0506 	bic.w	r5, r5, r6
 80038b8:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80038bc:	e782      	b.n	80037c4 <HAL_GPIO_DeInit+0x1c>
  }
}
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	48000400 	.word	0x48000400
 80038cc:	40010400 	.word	0x40010400

080038d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d0:	b10a      	cbz	r2, 80038d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038d2:	6181      	str	r1, [r0, #24]
 80038d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038d6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80038d8:	4770      	bx	lr

080038da <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038da:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038dc:	ea01 0203 	and.w	r2, r1, r3
 80038e0:	ea21 0103 	bic.w	r1, r1, r3
 80038e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80038e8:	6181      	str	r1, [r0, #24]
}
 80038ea:	4770      	bx	lr

080038ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ec:	6803      	ldr	r3, [r0, #0]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	f012 0f02 	tst.w	r2, #2
 80038f4:	d001      	beq.n	80038fa <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038f6:	2200      	movs	r2, #0
 80038f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fa:	6803      	ldr	r3, [r0, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	f012 0f01 	tst.w	r2, #1
 8003902:	d103      	bne.n	800390c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	619a      	str	r2, [r3, #24]
  }
}
 800390c:	4770      	bx	lr

0800390e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800390e:	b410      	push	{r4}
 8003910:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003912:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003916:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800391a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800391c:	4321      	orrs	r1, r4
 800391e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003922:	6802      	ldr	r2, [r0, #0]
 8003924:	6853      	ldr	r3, [r2, #4]
 8003926:	0d64      	lsrs	r4, r4, #21
 8003928:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800392c:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8003930:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8003934:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8003938:	f044 0403 	orr.w	r4, r4, #3
 800393c:	ea23 0304 	bic.w	r3, r3, r4
 8003940:	430b      	orrs	r3, r1
 8003942:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003948:	4770      	bx	lr

0800394a <I2C_IsErrorOccurred>:
{
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8003950:	6803      	ldr	r3, [r0, #0]
 8003952:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003954:	f016 0610 	ands.w	r6, r6, #16
 8003958:	d07c      	beq.n	8003a54 <I2C_IsErrorOccurred+0x10a>
 800395a:	460d      	mov	r5, r1
 800395c:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	2210      	movs	r2, #16
 8003960:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8003962:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	6998      	ldr	r0, [r3, #24]
 800396a:	f010 0f20 	tst.w	r0, #32
 800396e:	d130      	bne.n	80039d2 <I2C_IsErrorOccurred+0x88>
 8003970:	bb7f      	cbnz	r7, 80039d2 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8003972:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003976:	d0f6      	beq.n	8003966 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003978:	f7ff fcb6 	bl	80032e8 <HAL_GetTick>
 800397c:	eba0 0008 	sub.w	r0, r0, r8
 8003980:	42a8      	cmp	r0, r5
 8003982:	d801      	bhi.n	8003988 <I2C_IsErrorOccurred+0x3e>
 8003984:	2d00      	cmp	r5, #0
 8003986:	d1ee      	bne.n	8003966 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003988:	6821      	ldr	r1, [r4, #0]
 800398a:	684b      	ldr	r3, [r1, #4]
 800398c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8003990:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8003994:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003996:	6988      	ldr	r0, [r1, #24]
 8003998:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800399c:	d002      	beq.n	80039a4 <I2C_IsErrorOccurred+0x5a>
 800399e:	b90b      	cbnz	r3, 80039a4 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80039a0:	2a20      	cmp	r2, #32
 80039a2:	d10e      	bne.n	80039c2 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f013 0f20 	tst.w	r3, #32
 80039ac:	d1db      	bne.n	8003966 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039ae:	f7ff fc9b 	bl	80032e8 <HAL_GetTick>
 80039b2:	eba0 0008 	sub.w	r0, r0, r8
 80039b6:	2819      	cmp	r0, #25
 80039b8:	d9f4      	bls.n	80039a4 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80039be:	2701      	movs	r7, #1
              break;
 80039c0:	e7d1      	b.n	8003966 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039c2:	684b      	ldr	r3, [r1, #4]
 80039c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c8:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80039ca:	f7ff fc8d 	bl	80032e8 <HAL_GetTick>
 80039ce:	4680      	mov	r8, r0
 80039d0:	e7e8      	b.n	80039a4 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80039d2:	b90f      	cbnz	r7, 80039d8 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	2220      	movs	r2, #32
 80039d6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80039d8:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80039dc:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80039de:	6822      	ldr	r2, [r4, #0]
 80039e0:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039e2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80039e6:	d005      	beq.n	80039f4 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 80039e8:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039f0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80039f2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039f4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80039f8:	d006      	beq.n	8003a08 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80039fa:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a04:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003a06:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a08:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003a0c:	d024      	beq.n	8003a58 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a0e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a18:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8003a1a:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7ff ff65 	bl	80038ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	6853      	ldr	r3, [r2, #4]
 8003a26:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003a2a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8003a2e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003a38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a3a:	4333      	orrs	r3, r6
 8003a3c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	2320      	movs	r3, #32
 8003a40:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003a4a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003a4e:	4628      	mov	r0, r5
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2500      	movs	r5, #0
 8003a56:	e7c2      	b.n	80039de <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	d0f8      	beq.n	8003a4e <I2C_IsErrorOccurred+0x104>
 8003a5c:	e7de      	b.n	8003a1c <I2C_IsErrorOccurred+0xd2>

08003a5e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003a5e:	b570      	push	{r4, r5, r6, lr}
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f013 0f02 	tst.w	r3, #2
 8003a6e:	d122      	bne.n	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a70:	4632      	mov	r2, r6
 8003a72:	4629      	mov	r1, r5
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff ff68 	bl	800394a <I2C_IsErrorOccurred>
 8003a7a:	b9f0      	cbnz	r0, 8003aba <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a80:	d0f1      	beq.n	8003a66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a82:	f7ff fc31 	bl	80032e8 <HAL_GetTick>
 8003a86:	1b80      	subs	r0, r0, r6
 8003a88:	42a8      	cmp	r0, r5
 8003a8a:	d801      	bhi.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	d1ea      	bne.n	8003a66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f013 0f02 	tst.w	r3, #2
 8003a98:	d1e5      	bne.n	8003a66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003aae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	e000      	b.n	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8003ab6:	2000      	movs	r0, #0
}
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003aba:	2001      	movs	r0, #1
 8003abc:	e7fc      	b.n	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08003abe <I2C_WaitOnFlagUntilTimeout>:
{
 8003abe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	4688      	mov	r8, r1
 8003ac6:	4617      	mov	r7, r2
 8003ac8:	461e      	mov	r6, r3
 8003aca:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	699c      	ldr	r4, [r3, #24]
 8003ad2:	ea38 0404 	bics.w	r4, r8, r4
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	42bb      	cmp	r3, r7
 8003ade:	d127      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae0:	464a      	mov	r2, r9
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f7ff ff30 	bl	800394a <I2C_IsErrorOccurred>
 8003aea:	bb20      	cbnz	r0, 8003b36 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003af0:	d0ed      	beq.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7ff fbf9 	bl	80032e8 <HAL_GetTick>
 8003af6:	eba0 0009 	sub.w	r0, r0, r9
 8003afa:	42b0      	cmp	r0, r6
 8003afc:	d801      	bhi.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003afe:	2e00      	cmp	r6, #0
 8003b00:	d1e5      	bne.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	ea38 0303 	bics.w	r3, r8, r3
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	42bb      	cmp	r3, r7
 8003b12:	d1dc      	bne.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003b16:	f043 0320 	orr.w	r3, r3, #32
 8003b1a:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003b28:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	e000      	b.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 8003b30:	2000      	movs	r0, #0
}
 8003b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8003b36:	2001      	movs	r0, #1
 8003b38:	e7fb      	b.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x74>
	...

08003b3c <I2C_RequestMemoryWrite>:
{
 8003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	4604      	mov	r4, r0
 8003b44:	4690      	mov	r8, r2
 8003b46:	461d      	mov	r5, r3
 8003b48:	9e08      	ldr	r6, [sp, #32]
 8003b4a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <I2C_RequestMemoryWrite+0x78>)
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b54:	b2ea      	uxtb	r2, r5
 8003b56:	f7ff feda 	bl	800390e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	463a      	mov	r2, r7
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff ff7d 	bl	8003a5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b64:	b9f8      	cbnz	r0, 8003ba6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b66:	2d01      	cmp	r5, #1
 8003b68:	d10e      	bne.n	8003b88 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	fa5f f288 	uxtb.w	r2, r8
 8003b70:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b72:	9700      	str	r7, [sp, #0]
 8003b74:	4633      	mov	r3, r6
 8003b76:	2200      	movs	r2, #0
 8003b78:	2180      	movs	r1, #128	@ 0x80
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff ff9f 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 8003b80:	b9a8      	cbnz	r0, 8003bae <I2C_RequestMemoryWrite+0x72>
}
 8003b82:	b002      	add	sp, #8
 8003b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003b8e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b90:	463a      	mov	r2, r7
 8003b92:	4631      	mov	r1, r6
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7ff ff62 	bl	8003a5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b9a:	b930      	cbnz	r0, 8003baa <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	fa5f f288 	uxtb.w	r2, r8
 8003ba2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ba4:	e7e5      	b.n	8003b72 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	e7eb      	b.n	8003b82 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8003baa:	2001      	movs	r0, #1
 8003bac:	e7e9      	b.n	8003b82 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
 8003bb0:	e7e7      	b.n	8003b82 <I2C_RequestMemoryWrite+0x46>
 8003bb2:	bf00      	nop
 8003bb4:	80002000 	.word	0x80002000

08003bb8 <I2C_RequestMemoryRead>:
{
 8003bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4690      	mov	r8, r2
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	9e08      	ldr	r6, [sp, #32]
 8003bc6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bc8:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <I2C_RequestMemoryRead+0x74>)
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	b2ea      	uxtb	r2, r5
 8003bd0:	f7ff fe9d 	bl	800390e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd4:	463a      	mov	r2, r7
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff ff40 	bl	8003a5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003bde:	b9f8      	cbnz	r0, 8003c20 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003be0:	2d01      	cmp	r5, #1
 8003be2:	d10e      	bne.n	8003c02 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	fa5f f288 	uxtb.w	r2, r8
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	9700      	str	r7, [sp, #0]
 8003bee:	4633      	mov	r3, r6
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2140      	movs	r1, #64	@ 0x40
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff ff62 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	b9a8      	cbnz	r0, 8003c28 <I2C_RequestMemoryRead+0x70>
}
 8003bfc:	b002      	add	sp, #8
 8003bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003c08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	463a      	mov	r2, r7
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff ff25 	bl	8003a5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c14:	b930      	cbnz	r0, 8003c24 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	fa5f f288 	uxtb.w	r2, r8
 8003c1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c1e:	e7e5      	b.n	8003bec <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003c20:	2001      	movs	r0, #1
 8003c22:	e7eb      	b.n	8003bfc <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003c24:	2001      	movs	r0, #1
 8003c26:	e7e9      	b.n	8003bfc <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003c28:	2001      	movs	r0, #1
 8003c2a:	e7e7      	b.n	8003bfc <I2C_RequestMemoryRead+0x44>
 8003c2c:	80002000 	.word	0x80002000

08003c30 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4604      	mov	r4, r0
 8003c34:	460d      	mov	r5, r1
 8003c36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c38:	e004      	b.n	8003c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f013 0f20 	tst.w	r3, #32
 8003c42:	d012      	beq.n	8003c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f013 0f20 	tst.w	r3, #32
 8003c4c:	d11b      	bne.n	8003c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	4632      	mov	r2, r6
 8003c50:	4629      	mov	r1, r5
 8003c52:	4620      	mov	r0, r4
 8003c54:	f7ff fe79 	bl	800394a <I2C_IsErrorOccurred>
 8003c58:	b9b8      	cbnz	r0, 8003c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7ff fb45 	bl	80032e8 <HAL_GetTick>
 8003c5e:	1b80      	subs	r0, r0, r6
 8003c60:	42a8      	cmp	r0, r5
 8003c62:	d8ea      	bhi.n	8003c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	d1ed      	bne.n	8003c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8003c68:	e7e7      	b.n	8003c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003c6c:	f043 0320 	orr.w	r3, r3, #32
 8003c70:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	2320      	movs	r3, #32
 8003c74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8003c7e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
 8003c84:	e000      	b.n	8003c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8003c86:	2000      	movs	r0, #0
}
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	e7fc      	b.n	8003c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08003c8e <HAL_I2C_MspInit>:
}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d05f      	beq.n	8003d54 <HAL_I2C_Init+0xc4>
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c98:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d048      	beq.n	8003d32 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca0:	2324      	movs	r3, #36	@ 0x24
 8003ca2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003ca6:	6822      	ldr	r2, [r4, #0]
 8003ca8:	6813      	ldr	r3, [r2, #0]
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cb0:	6863      	ldr	r3, [r4, #4]
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003cb8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	6893      	ldr	r3, [r2, #8]
 8003cbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cc2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc4:	68e3      	ldr	r3, [r4, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d038      	beq.n	8003d3c <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8003cd2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd4:	68e3      	ldr	r3, [r4, #12]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d036      	beq.n	8003d48 <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	6853      	ldr	r3, [r2, #4]
 8003cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6853      	ldr	r3, [r2, #4]
 8003ce8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cf0:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	68d3      	ldr	r3, [r2, #12]
 8003cf6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cfa:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cfc:	6923      	ldr	r3, [r4, #16]
 8003cfe:	6962      	ldr	r2, [r4, #20]
 8003d00:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d02:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d0a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d0c:	69e3      	ldr	r3, [r4, #28]
 8003d0e:	6a21      	ldr	r1, [r4, #32]
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	2000      	movs	r0, #0
 8003d22:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	2320      	movs	r3, #32
 8003d26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003d30:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003d32:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003d36:	f7ff ffaa 	bl	8003c8e <HAL_I2C_MspInit>
 8003d3a:	e7b1      	b.n	8003ca0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d44:	6093      	str	r3, [r2, #8]
 8003d46:	e7c5      	b.n	8003cd4 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	6853      	ldr	r3, [r2, #4]
 8003d4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d50:	6053      	str	r3, [r2, #4]
 8003d52:	e7c7      	b.n	8003ce4 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
}
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2C_MspDeInit>:
}
 8003d58:	4770      	bx	lr

08003d5a <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003d5a:	b1a8      	cbz	r0, 8003d88 <HAL_I2C_DeInit+0x2e>
{
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	2324      	movs	r3, #36	@ 0x24
 8003d62:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003d66:	6802      	ldr	r2, [r0, #0]
 8003d68:	6813      	ldr	r3, [r2, #0]
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003d70:	f7ff fff2 	bl	8003d58 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	2000      	movs	r0, #0
 8003d76:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003d78:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7c:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  __HAL_UNLOCK(hi2c);
 8003d82:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8003d86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
}
 8003d8a:	4770      	bx	lr

08003d8c <HAL_I2C_Mem_Write>:
{
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	b083      	sub	sp, #12
 8003d92:	460e      	mov	r6, r1
 8003d94:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8003d98:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8003d9e:	b2c9      	uxtb	r1, r1
 8003da0:	2920      	cmp	r1, #32
 8003da2:	f040 80bb 	bne.w	8003f1c <HAL_I2C_Mem_Write+0x190>
 8003da6:	4604      	mov	r4, r0
 8003da8:	4690      	mov	r8, r2
 8003daa:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8003dac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003dae:	b1cb      	cbz	r3, 8003de4 <HAL_I2C_Mem_Write+0x58>
 8003db0:	f1ba 0f00 	cmp.w	sl, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8003db6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	f000 80b2 	beq.w	8003f24 <HAL_I2C_Mem_Write+0x198>
 8003dc0:	f04f 0b01 	mov.w	fp, #1
 8003dc4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003dc8:	f7ff fa8e 	bl	80032e8 <HAL_GetTick>
 8003dcc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dce:	9000      	str	r0, [sp, #0]
 8003dd0:	2319      	movs	r3, #25
 8003dd2:	465a      	mov	r2, fp
 8003dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff fe70 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 8003dde:	b130      	cbz	r0, 8003dee <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
 8003de2:	e09c      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003de4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003de8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003dea:	2001      	movs	r0, #1
 8003dec:	e097      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dee:	2321      	movs	r3, #33	@ 0x21
 8003df0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003df4:	2340      	movs	r3, #64	@ 0x40
 8003df6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003dfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003e00:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e02:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e06:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e08:	9701      	str	r7, [sp, #4]
 8003e0a:	9500      	str	r5, [sp, #0]
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	4642      	mov	r2, r8
 8003e10:	4631      	mov	r1, r6
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff fe92 	bl	8003b3c <I2C_RequestMemoryWrite>
 8003e18:	b970      	cbnz	r0, 8003e38 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2bff      	cmp	r3, #255	@ 0xff
 8003e20:	d90f      	bls.n	8003e42 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e22:	22ff      	movs	r2, #255	@ 0xff
 8003e24:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff fd6c 	bl	800390e <I2C_TransferConfig>
 8003e36:	e021      	b.n	8003e7c <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003e3e:	4658      	mov	r0, fp
 8003e40:	e06d      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8003e42:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e44:	b292      	uxth	r2, r2
 8003e46:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	4631      	mov	r1, r6
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff fd5a 	bl	800390e <I2C_TransferConfig>
 8003e5a:	e00f      	b.n	8003e7c <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8003e5c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e62:	2300      	movs	r3, #0
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	4631      	mov	r1, r6
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7ff fd4d 	bl	800390e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003e74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d033      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff fdec 	bl	8003a5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d14e      	bne.n	8003f28 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e8a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	7812      	ldrb	r2, [r2, #0]
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003e92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e94:	3301      	adds	r3, #1
 8003e96:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003e98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ea2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eaa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003eac:	b292      	uxth	r2, r2
 8003eae:	2a00      	cmp	r2, #0
 8003eb0:	d0e0      	beq.n	8003e74 <HAL_I2C_Mem_Write+0xe8>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1de      	bne.n	8003e74 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eb6:	9700      	str	r7, [sp, #0]
 8003eb8:	462b      	mov	r3, r5
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fdfd 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	bb90      	cbnz	r0, 8003f2c <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2bff      	cmp	r3, #255	@ 0xff
 8003ecc:	d9c6      	bls.n	8003e5c <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ece:	22ff      	movs	r2, #255	@ 0xff
 8003ed0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eda:	4631      	mov	r1, r6
 8003edc:	4620      	mov	r0, r4
 8003ede:	f7ff fd16 	bl	800390e <I2C_TransferConfig>
 8003ee2:	e7c7      	b.n	8003e74 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	463a      	mov	r2, r7
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fea1 	bl	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eee:	b9f8      	cbnz	r0, 8003f30 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003ef6:	6821      	ldr	r1, [r4, #0]
 8003ef8:	684b      	ldr	r3, [r1, #4]
 8003efa:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003efe:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8003f02:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003f16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8003f1a:	e000      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8003f1c:	2002      	movs	r0, #2
}
 8003f1e:	b003      	add	sp, #12
 8003f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003f24:	2002      	movs	r0, #2
 8003f26:	e7fa      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
 8003f2a:	e7f8      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e7f6      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8003f30:	2001      	movs	r0, #1
 8003f32:	e7f4      	b.n	8003f1e <HAL_I2C_Mem_Write+0x192>

08003f34 <HAL_I2C_Mem_Read>:
{
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	460e      	mov	r6, r1
 8003f3c:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8003f40:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f42:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8003f46:	b2c9      	uxtb	r1, r1
 8003f48:	2920      	cmp	r1, #32
 8003f4a:	f040 80bc 	bne.w	80040c6 <HAL_I2C_Mem_Read+0x192>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	4690      	mov	r8, r2
 8003f52:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8003f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003f56:	b1cb      	cbz	r3, 8003f8c <HAL_I2C_Mem_Read+0x58>
 8003f58:	f1ba 0f00 	cmp.w	sl, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8003f5e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	f000 80b3 	beq.w	80040ce <HAL_I2C_Mem_Read+0x19a>
 8003f68:	f04f 0b01 	mov.w	fp, #1
 8003f6c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003f70:	f7ff f9ba 	bl	80032e8 <HAL_GetTick>
 8003f74:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f76:	9000      	str	r0, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	465a      	mov	r2, fp
 8003f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7ff fd9c 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 8003f86:	b130      	cbz	r0, 8003f96 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8003f88:	2001      	movs	r0, #1
 8003f8a:	e09d      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f90:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
 8003f94:	e098      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f96:	2322      	movs	r3, #34	@ 0x22
 8003f98:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f9c:	2340      	movs	r3, #64	@ 0x40
 8003f9e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003fa6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003fa8:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003faa:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fae:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb0:	9701      	str	r7, [sp, #4]
 8003fb2:	9500      	str	r5, [sp, #0]
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f7ff fdfc 	bl	8003bb8 <I2C_RequestMemoryRead>
 8003fc0:	b970      	cbnz	r0, 8003fe0 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2bff      	cmp	r3, #255	@ 0xff
 8003fc8:	d90f      	bls.n	8003fea <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = 1U;
 8003fca:	2201      	movs	r2, #1
 8003fcc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fce:	4b44      	ldr	r3, [pc, #272]	@ (80040e0 <HAL_I2C_Mem_Read+0x1ac>)
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7ff fc98 	bl	800390e <I2C_TransferConfig>
 8003fde:	e021      	b.n	8004024 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003fe6:	4658      	mov	r0, fp
 8003fe8:	e06e      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8003fea:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003fec:	b292      	uxth	r2, r2
 8003fee:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <HAL_I2C_Mem_Read+0x1ac>)
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff fc86 	bl	800390e <I2C_TransferConfig>
 8004002:	e00f      	b.n	8004024 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004004:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004006:	b292      	uxth	r2, r2
 8004008:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	4631      	mov	r1, r6
 8004016:	4620      	mov	r0, r4
 8004018:	f7ff fc79 	bl	800390e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800401c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d034      	beq.n	800408e <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004024:	9700      	str	r7, [sp, #0]
 8004026:	462b      	mov	r3, r5
 8004028:	2200      	movs	r2, #0
 800402a:	2104      	movs	r1, #4
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff fd46 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 8004032:	2800      	cmp	r0, #0
 8004034:	d14d      	bne.n	80040d2 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800403a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800403c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800403e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004044:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8004046:	3a01      	subs	r2, #1
 8004048:	b292      	uxth	r2, r2
 800404a:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800404c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29b      	uxth	r3, r3
 8004054:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004056:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0de      	beq.n	800401c <HAL_I2C_Mem_Read+0xe8>
 800405e:	2a00      	cmp	r2, #0
 8004060:	d1dc      	bne.n	800401c <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004062:	9700      	str	r7, [sp, #0]
 8004064:	462b      	mov	r3, r5
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	4620      	mov	r0, r4
 800406a:	f7ff fd28 	bl	8003abe <I2C_WaitOnFlagUntilTimeout>
 800406e:	bb90      	cbnz	r0, 80040d6 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004070:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	2bff      	cmp	r3, #255	@ 0xff
 8004076:	d9c5      	bls.n	8004004 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = 1U;
 8004078:	2201      	movs	r2, #1
 800407a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004084:	4631      	mov	r1, r6
 8004086:	4620      	mov	r0, r4
 8004088:	f7ff fc41 	bl	800390e <I2C_TransferConfig>
 800408c:	e7c6      	b.n	800401c <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408e:	463a      	mov	r2, r7
 8004090:	4629      	mov	r1, r5
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff fdcc 	bl	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004098:	b9f8      	cbnz	r0, 80040da <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	2220      	movs	r2, #32
 800409e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80040a0:	6821      	ldr	r1, [r4, #0]
 80040a2:	684b      	ldr	r3, [r1, #4]
 80040a4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80040a8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80040ac:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80040c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80040c4:	e000      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 80040c6:	2002      	movs	r0, #2
}
 80040c8:	b003      	add	sp, #12
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80040ce:	2002      	movs	r0, #2
 80040d0:	e7fa      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 80040d2:	2001      	movs	r0, #1
 80040d4:	e7f8      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 80040d6:	2001      	movs	r0, #1
 80040d8:	e7f6      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 80040da:	2001      	movs	r0, #1
 80040dc:	e7f4      	b.n	80040c8 <HAL_I2C_Mem_Read+0x194>
 80040de:	bf00      	nop
 80040e0:	80002400 	.word	0x80002400

080040e4 <HAL_I2C_GetState>:
  return hi2c->State;
 80040e4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80040e8:	4770      	bx	lr

080040ea <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80040ea:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 80040ec:	4770      	bx	lr

080040ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040ee:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	2a20      	cmp	r2, #32
 80040f8:	d123      	bne.n	8004142 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80040fe:	2a01      	cmp	r2, #1
 8004100:	d021      	beq.n	8004146 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004102:	2201      	movs	r2, #1
 8004104:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	2224      	movs	r2, #36	@ 0x24
 800410a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	6802      	ldr	r2, [r0, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	6802      	ldr	r2, [r0, #0]
 800411c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004120:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	6802      	ldr	r2, [r0, #0]
 8004126:	4311      	orrs	r1, r2
 8004128:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	680a      	ldr	r2, [r1, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	2000      	movs	r0, #0
 800413c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8004140:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004142:	2002      	movs	r0, #2
 8004144:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004146:	2002      	movs	r0, #2
  }
}
 8004148:	4770      	bx	lr

0800414a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800414a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	2a20      	cmp	r2, #32
 8004154:	d121      	bne.n	800419a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004156:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800415a:	2a01      	cmp	r2, #1
 800415c:	d01f      	beq.n	800419e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800415e:	2201      	movs	r2, #1
 8004160:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004164:	2224      	movs	r2, #36	@ 0x24
 8004166:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	6802      	ldr	r2, [r0, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004178:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800417c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004180:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	680a      	ldr	r2, [r1, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004192:	2000      	movs	r0, #0
 8004194:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8004198:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800419a:	2002      	movs	r0, #2
 800419c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800419e:	2002      	movs	r0, #2
  }
}
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a6:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <HAL_MspInit+0x2c>)
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	619a      	str	r2, [r3, #24]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	f002 0201 	and.w	r2, r2, #1
 80041b6:	9200      	str	r2, [sp, #0]
 80041b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80041c0:	61da      	str	r2, [r3, #28]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041cc:	b002      	add	sp, #8
 80041ce:	4770      	bx	lr
 80041d0:	40021000 	.word	0x40021000

080041d4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80041d4:	6802      	ldr	r2, [r0, #0]
 80041d6:	4b08      	ldr	r3, [pc, #32]	@ (80041f8 <HAL_RTC_MspInit+0x24>)
 80041d8:	429a      	cmp	r2, r3
 80041da:	d000      	beq.n	80041de <HAL_RTC_MspInit+0xa>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80041dc:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80041e2:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 80041e6:	fab2 f282 	clz	r2, r2
 80041ea:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <HAL_RTC_MspInit+0x28>)
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	e7f2      	b.n	80041dc <HAL_RTC_MspInit+0x8>
 80041f6:	bf00      	nop
 80041f8:	40002800 	.word	0x40002800
 80041fc:	10908100 	.word	0x10908100

08004200 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004200:	6803      	ldr	r3, [r0, #0]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004206:	d000      	beq.n	800420a <HAL_TIM_Base_MspInit+0xa>
 8004208:	4770      	bx	lr
{
 800420a:	b500      	push	{lr}
 800420c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800420e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004224:	2200      	movs	r2, #0
 8004226:	4611      	mov	r1, r2
 8004228:	201c      	movs	r0, #28
 800422a:	f7ff f8bd 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800422e:	201c      	movs	r0, #28
 8004230:	f7ff f8ca 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004234:	b003      	add	sp, #12
 8004236:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800423c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800423c:	b510      	push	{r4, lr}
 800423e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	2300      	movs	r3, #0
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	9304      	str	r3, [sp, #16]
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	9306      	str	r3, [sp, #24]
 800424a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 800424c:	6802      	ldr	r2, [r0, #0]
 800424e:	4b23      	ldr	r3, [pc, #140]	@ (80042dc <HAL_UART_MspInit+0xa0>)
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004254:	b008      	add	sp, #32
 8004256:	bd10      	pop	{r4, pc}
 8004258:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 800425a:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004264:	61da      	str	r2, [r3, #28]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800426c:	9201      	str	r2, [sp, #4]
 800426e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004276:	615a      	str	r2, [r3, #20]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800427e:	9302      	str	r3, [sp, #8]
 8004280:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004282:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004286:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004288:	2302      	movs	r3, #2
 800428a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428c:	2303      	movs	r3, #3
 800428e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004290:	2307      	movs	r3, #7
 8004292:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004294:	a903      	add	r1, sp, #12
 8004296:	4812      	ldr	r0, [pc, #72]	@ (80042e0 <HAL_UART_MspInit+0xa4>)
 8004298:	f7ff f996 	bl	80035c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800429c:	4811      	ldr	r0, [pc, #68]	@ (80042e4 <HAL_UART_MspInit+0xa8>)
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <HAL_UART_MspInit+0xac>)
 80042a0:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042a2:	2300      	movs	r3, #0
 80042a4:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a6:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042a8:	2280      	movs	r2, #128	@ 0x80
 80042aa:	60c2      	str	r2, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ac:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042ae:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80042b0:	2220      	movs	r2, #32
 80042b2:	6182      	str	r2, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042b4:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80042b6:	f7ff f8bb 	bl	8003430 <HAL_DMA_Init>
 80042ba:	b958      	cbnz	r0, 80042d4 <HAL_UART_MspInit+0x98>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_UART_MspInit+0xa8>)
 80042be:	6763      	str	r3, [r4, #116]	@ 0x74
 80042c0:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80042c2:	2200      	movs	r2, #0
 80042c4:	4611      	mov	r1, r2
 80042c6:	2027      	movs	r0, #39	@ 0x27
 80042c8:	f7ff f86e 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042cc:	2027      	movs	r0, #39	@ 0x27
 80042ce:	f7ff f87b 	bl	80033c8 <HAL_NVIC_EnableIRQ>
}
 80042d2:	e7bf      	b.n	8004254 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80042d4:	f7fe feee 	bl	80030b4 <Error_Handler>
 80042d8:	e7f0      	b.n	80042bc <HAL_UART_MspInit+0x80>
 80042da:	bf00      	nop
 80042dc:	40004800 	.word	0x40004800
 80042e0:	48000c00 	.word	0x48000c00
 80042e4:	200004e8 	.word	0x200004e8
 80042e8:	40020030 	.word	0x40020030

080042ec <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 80042ec:	6802      	ldr	r2, [r0, #0]
 80042ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <HAL_PCD_MspInit+0x3c>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d000      	beq.n	80042f6 <HAL_PCD_MspInit+0xa>
 80042f4:	4770      	bx	lr
{
 80042f6:	b500      	push	{lr}
 80042f8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80042fa:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	9b01      	ldr	r3, [sp, #4]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8004310:	2200      	movs	r2, #0
 8004312:	4611      	mov	r1, r2
 8004314:	2014      	movs	r0, #20
 8004316:	f7ff f847 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800431a:	2014      	movs	r0, #20
 800431c:	f7ff f854 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8004320:	b003      	add	sp, #12
 8004322:	f85d fb04 	ldr.w	pc, [sp], #4
 8004326:	bf00      	nop
 8004328:	40005c00 	.word	0x40005c00

0800432c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800432c:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800432e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004332:	d043      	beq.n	80043bc <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004334:	6804      	ldr	r4, [r0, #0]
 8004336:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800433a:	f891 c000 	ldrb.w	ip, [r1]
 800433e:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8004342:	fa1e f383 	uxtah	r3, lr, r3
 8004346:	4423      	add	r3, r4
 8004348:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	@ 0x402
 800434c:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004350:	698b      	ldr	r3, [r1, #24]
 8004352:	42a3      	cmp	r3, r4
 8004354:	d328      	bcc.n	80043a8 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8004356:	1b1b      	subs	r3, r3, r4
 8004358:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800435a:	698b      	ldr	r3, [r1, #24]
 800435c:	b97b      	cbnz	r3, 800437e <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800435e:	6805      	ldr	r5, [r0, #0]
 8004360:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800436a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437a:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800437e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004382:	d00e      	beq.n	80043a2 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004384:	6802      	ldr	r2, [r0, #0]
 8004386:	780d      	ldrb	r5, [r1, #0]
 8004388:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800439a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800439e:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80043a2:	b924      	cbnz	r4, 80043ae <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80043a4:	4620      	mov	r0, r4
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	618b      	str	r3, [r1, #24]
 80043ac:	e7d5      	b.n	800435a <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043ae:	4623      	mov	r3, r4
 80043b0:	890a      	ldrh	r2, [r1, #8]
 80043b2:	6949      	ldr	r1, [r1, #20]
 80043b4:	6800      	ldr	r0, [r0, #0]
 80043b6:	f003 f92b 	bl	8007610 <USB_ReadPMA>
 80043ba:	e7f3      	b.n	80043a4 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043bc:	6804      	ldr	r4, [r0, #0]
 80043be:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80043c2:	f891 c000 	ldrb.w	ip, [r1]
 80043c6:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80043ca:	fa1e f383 	uxtah	r3, lr, r3
 80043ce:	4423      	add	r3, r4
 80043d0:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	@ 0x406
 80043d4:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80043d8:	698b      	ldr	r3, [r1, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	d32f      	bcc.n	800443e <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 80043de:	1b1b      	subs	r3, r3, r4
 80043e0:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80043e2:	698b      	ldr	r3, [r1, #24]
 80043e4:	b97b      	cbnz	r3, 8004406 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043e6:	6805      	ldr	r5, [r0, #0]
 80043e8:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004402:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004406:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800440a:	d10f      	bne.n	800442c <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800440c:	6802      	ldr	r2, [r0, #0]
 800440e:	f891 c000 	ldrb.w	ip, [r1]
 8004412:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800441c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004424:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004428:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800442c:	2c00      	cmp	r4, #0
 800442e:	d0b9      	beq.n	80043a4 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004430:	4623      	mov	r3, r4
 8004432:	894a      	ldrh	r2, [r1, #10]
 8004434:	6949      	ldr	r1, [r1, #20]
 8004436:	6800      	ldr	r0, [r0, #0]
 8004438:	f003 f8ea 	bl	8007610 <USB_ReadPMA>
 800443c:	e7b2      	b.n	80043a4 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	618b      	str	r3, [r1, #24]
 8004442:	e7ce      	b.n	80043e2 <HAL_PCD_EP_DB_Receive+0xb6>

08004444 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8004444:	2800      	cmp	r0, #0
 8004446:	d04d      	beq.n	80044e4 <HAL_PCD_Init+0xa0>
{
 8004448:	b510      	push	{r4, lr}
 800444a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800444c:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8004450:	b13b      	cbz	r3, 8004462 <HAL_PCD_Init+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004452:	2303      	movs	r3, #3
 8004454:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  __HAL_PCD_DISABLE(hpcd);
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	f002 fcb7 	bl	8006dcc <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	e015      	b.n	800448e <HAL_PCD_Init+0x4a>
    hpcd->Lock = HAL_UNLOCKED;
 8004462:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 8004466:	f7ff ff41 	bl	80042ec <HAL_PCD_MspInit>
 800446a:	e7f2      	b.n	8004452 <HAL_PCD_Init+0xe>
    hpcd->IN_ep[i].is_in = 1U;
 800446c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004470:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8004474:	2101      	movs	r1, #1
 8004476:	7451      	strb	r1, [r2, #17]
    hpcd->IN_ep[i].num = i;
 8004478:	7413      	strb	r3, [r2, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800447a:	2100      	movs	r1, #0
 800447c:	74d1      	strb	r1, [r2, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 800447e:	6211      	str	r1, [r2, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004480:	6251      	str	r1, [r2, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 8004482:	3301      	adds	r3, #1
 8004484:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004488:	00d2      	lsls	r2, r2, #3
 800448a:	50a1      	str	r1, [r4, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448c:	b2db      	uxtb	r3, r3
 800448e:	7920      	ldrb	r0, [r4, #4]
 8004490:	4298      	cmp	r0, r3
 8004492:	d8eb      	bhi.n	800446c <HAL_PCD_Init+0x28>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004494:	2300      	movs	r3, #0
 8004496:	e016      	b.n	80044c6 <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8004498:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800449c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80044a0:	2100      	movs	r1, #0
 80044a2:	f882 1151 	strb.w	r1, [r2, #337]	@ 0x151
    hpcd->OUT_ep[i].num = i;
 80044a6:	f882 3150 	strb.w	r3, [r2, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044aa:	f882 1153 	strb.w	r1, [r2, #339]	@ 0x153
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044ae:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044b2:	f8c2 1164 	str.w	r1, [r2, #356]	@ 0x164
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80044ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80044be:	f8c2 1168 	str.w	r1, [r2, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c2:	3301      	adds	r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4298      	cmp	r0, r3
 80044c8:	d8e6      	bhi.n	8004498 <HAL_PCD_Init+0x54>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80044ca:	4623      	mov	r3, r4
 80044cc:	f853 0b04 	ldr.w	r0, [r3], #4
 80044d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80044d4:	f002 fc84 	bl	8006de0 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80044d8:	2000      	movs	r0, #0
 80044da:	7320      	strb	r0, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80044dc:	2301      	movs	r3, #1
 80044de:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
}
 80044e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80044e4:	2001      	movs	r0, #1
}
 80044e6:	4770      	bx	lr

080044e8 <HAL_PCD_DataOutStageCallback>:
}
 80044e8:	4770      	bx	lr

080044ea <HAL_PCD_DataInStageCallback>:
}
 80044ea:	4770      	bx	lr

080044ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4605      	mov	r5, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044f4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80044f8:	f000 810a 	beq.w	8004710 <HAL_PCD_EP_DB_Transmit+0x224>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044fc:	6802      	ldr	r2, [r0, #0]
 80044fe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004502:	7809      	ldrb	r1, [r1, #0]
 8004504:	00c8      	lsls	r0, r1, #3
 8004506:	fa10 f383 	uxtah	r3, r0, r3
 800450a:	4413      	add	r3, r2
 800450c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004510:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8004514:	69a3      	ldr	r3, [r4, #24]
 8004516:	4293      	cmp	r3, r2
 8004518:	d94d      	bls.n	80045b6 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      ep->xfer_len -= TxPctSize;
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800451e:	69a3      	ldr	r3, [r4, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d164      	bne.n	80045ee <HAL_PCD_EP_DB_Transmit+0x102>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004524:	7863      	ldrb	r3, [r4, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d148      	bne.n	80045bc <HAL_PCD_EP_DB_Transmit+0xd0>
 800452a:	682a      	ldr	r2, [r5, #0]
 800452c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004530:	fa12 f383 	uxtah	r3, r2, r3
 8004534:	4403      	add	r3, r0
 8004536:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800453a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800453e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004542:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004546:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800454a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800454e:	b292      	uxth	r2, r2
 8004550:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004554:	682a      	ldr	r2, [r5, #0]
 8004556:	7863      	ldrb	r3, [r4, #1]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d13b      	bne.n	80045d4 <HAL_PCD_EP_DB_Transmit+0xe8>
 800455c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004560:	fa12 f383 	uxtah	r3, r2, r3
 8004564:	7822      	ldrb	r2, [r4, #0]
 8004566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800456a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800456e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004572:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004576:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800457a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800457e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004582:	b292      	uxth	r2, r2
 8004584:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004588:	7821      	ldrb	r1, [r4, #0]
 800458a:	4628      	mov	r0, r5
 800458c:	f7ff ffad 	bl	80044ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004590:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004594:	d040      	beq.n	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004596:	682a      	ldr	r2, [r5, #0]
 8004598:	7821      	ldrb	r1, [r4, #0]
 800459a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80045b4:	e030      	b.n	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
      ep->xfer_len = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61a3      	str	r3, [r4, #24]
 80045ba:	e7b0      	b.n	800451e <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d1c9      	bne.n	8004554 <HAL_PCD_EP_DB_Transmit+0x68>
 80045c0:	682a      	ldr	r2, [r5, #0]
 80045c2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80045c6:	fa12 f383 	uxtah	r3, r2, r3
 80045ca:	4403      	add	r3, r0
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80045d2:	e7bf      	b.n	8004554 <HAL_PCD_EP_DB_Transmit+0x68>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d1d7      	bne.n	8004588 <HAL_PCD_EP_DB_Transmit+0x9c>
 80045d8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80045dc:	fa12 f383 	uxtah	r3, r2, r3
 80045e0:	7822      	ldrb	r2, [r4, #0]
 80045e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80045ec:	e7cc      	b.n	8004588 <HAL_PCD_EP_DB_Transmit+0x9c>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045ee:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80045f2:	d00d      	beq.n	8004610 <HAL_PCD_EP_DB_Transmit+0x124>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045f4:	6828      	ldr	r0, [r5, #0]
 80045f6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004610:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8004614:	2b01      	cmp	r3, #1
 8004616:	d012      	beq.n	800463e <HAL_PCD_EP_DB_Transmit+0x152>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004618:	682a      	ldr	r2, [r5, #0]
 800461a:	7821      	ldrb	r1, [r4, #0]
 800461c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800462a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800462e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004636:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800463a:	2000      	movs	r0, #0
 800463c:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 800463e:	6963      	ldr	r3, [r4, #20]
 8004640:	4413      	add	r3, r2
 8004642:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8004644:	69e3      	ldr	r3, [r4, #28]
 8004646:	4413      	add	r3, r2
 8004648:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800464a:	6a21      	ldr	r1, [r4, #32]
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	4299      	cmp	r1, r3
 8004650:	d31d      	bcc.n	800468e <HAL_PCD_EP_DB_Transmit+0x1a2>
          ep->xfer_len_db -= len;
 8004652:	1ac9      	subs	r1, r1, r3
 8004654:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004656:	7862      	ldrb	r2, [r4, #1]
 8004658:	2a00      	cmp	r2, #0
 800465a:	d144      	bne.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x1fa>
 800465c:	6829      	ldr	r1, [r5, #0]
 800465e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004662:	fa11 f282 	uxtah	r2, r1, r2
 8004666:	7821      	ldrb	r1, [r4, #0]
 8004668:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800466c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 8004670:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004674:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004678:	b9ab      	cbnz	r3, 80046a6 <HAL_PCD_EP_DB_Transmit+0x1ba>
 800467a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 800467e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004682:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004686:	b289      	uxth	r1, r1
 8004688:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800468c:	e02d      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x1fe>
        else if (ep->xfer_len_db == 0U)
 800468e:	b921      	cbnz	r1, 800469a <HAL_PCD_EP_DB_Transmit+0x1ae>
          ep->xfer_fill_db = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8004696:	4613      	mov	r3, r2
 8004698:	e7dd      	b.n	8004656 <HAL_PCD_EP_DB_Transmit+0x16a>
          ep->xfer_fill_db = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80046a0:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80046a2:	460b      	mov	r3, r1
 80046a4:	e7d7      	b.n	8004656 <HAL_PCD_EP_DB_Transmit+0x16a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80046a8:	d80d      	bhi.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x1da>
 80046aa:	0859      	lsrs	r1, r3, #1
 80046ac:	f013 0f01 	tst.w	r3, #1
 80046b0:	d000      	beq.n	80046b4 <HAL_PCD_EP_DB_Transmit+0x1c8>
 80046b2:	3101      	adds	r1, #1
 80046b4:	f8b2 0402 	ldrh.w	r0, [r2, #1026]	@ 0x402
 80046b8:	b280      	uxth	r0, r0
 80046ba:	0289      	lsls	r1, r1, #10
 80046bc:	b289      	uxth	r1, r1
 80046be:	4301      	orrs	r1, r0
 80046c0:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80046c4:	e011      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x1fe>
 80046c6:	0958      	lsrs	r0, r3, #5
 80046c8:	f013 0f1f 	tst.w	r3, #31
 80046cc:	d100      	bne.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80046ce:	3801      	subs	r0, #1
 80046d0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 80046d4:	b289      	uxth	r1, r1
 80046d6:	0280      	lsls	r0, r0, #10
 80046d8:	b280      	uxth	r0, r0
 80046da:	4301      	orrs	r1, r0
 80046dc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80046e0:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80046e4:	e001      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x1fe>
 80046e6:	2a01      	cmp	r2, #1
 80046e8:	d006      	beq.n	80046f8 <HAL_PCD_EP_DB_Transmit+0x20c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8922      	ldrh	r2, [r4, #8]
 80046ee:	6961      	ldr	r1, [r4, #20]
 80046f0:	6828      	ldr	r0, [r5, #0]
 80046f2:	f002 fb90 	bl	8006e16 <USB_WritePMA>
 80046f6:	e78f      	b.n	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046f8:	6829      	ldr	r1, [r5, #0]
 80046fa:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80046fe:	fa11 f282 	uxtah	r2, r1, r2
 8004702:	7821      	ldrb	r1, [r4, #0]
 8004704:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004708:	b299      	uxth	r1, r3
 800470a:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800470e:	e7ec      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x1fe>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004716:	7809      	ldrb	r1, [r1, #0]
 8004718:	00c8      	lsls	r0, r1, #3
 800471a:	fa10 f383 	uxtah	r3, r0, r3
 800471e:	4413      	add	r3, r2
 8004720:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004724:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8004728:	69a3      	ldr	r3, [r4, #24]
 800472a:	4293      	cmp	r3, r2
 800472c:	d34e      	bcc.n	80047cc <HAL_PCD_EP_DB_Transmit+0x2e0>
      ep->xfer_len -= TxPctSize;
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8004732:	69a3      	ldr	r3, [r4, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d165      	bne.n	8004804 <HAL_PCD_EP_DB_Transmit+0x318>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004738:	7863      	ldrb	r3, [r4, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d149      	bne.n	80047d2 <HAL_PCD_EP_DB_Transmit+0x2e6>
 800473e:	682a      	ldr	r2, [r5, #0]
 8004740:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004744:	fa12 f383 	uxtah	r3, r2, r3
 8004748:	4403      	add	r3, r0
 800474a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800474e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004752:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004756:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800475a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800475e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004762:	b292      	uxth	r2, r2
 8004764:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004768:	682a      	ldr	r2, [r5, #0]
 800476a:	7863      	ldrb	r3, [r4, #1]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d13c      	bne.n	80047ea <HAL_PCD_EP_DB_Transmit+0x2fe>
 8004770:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004774:	fa12 f383 	uxtah	r3, r2, r3
 8004778:	7822      	ldrb	r2, [r4, #0]
 800477a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800477e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004782:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004786:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800478a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800478e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004792:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004796:	b292      	uxth	r2, r2
 8004798:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800479c:	7821      	ldrb	r1, [r4, #0]
 800479e:	4628      	mov	r0, r5
 80047a0:	f7ff fea3 	bl	80044ea <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047a4:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80047a8:	f47f af36 	bne.w	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047ac:	682a      	ldr	r2, [r5, #0]
 80047ae:	7821      	ldrb	r1, [r4, #0]
 80047b0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80047ca:	e725      	b.n	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
      ep->xfer_len = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61a3      	str	r3, [r4, #24]
 80047d0:	e7af      	b.n	8004732 <HAL_PCD_EP_DB_Transmit+0x246>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d1c8      	bne.n	8004768 <HAL_PCD_EP_DB_Transmit+0x27c>
 80047d6:	682a      	ldr	r2, [r5, #0]
 80047d8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80047dc:	fa12 f383 	uxtah	r3, r2, r3
 80047e0:	4403      	add	r3, r0
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80047e8:	e7be      	b.n	8004768 <HAL_PCD_EP_DB_Transmit+0x27c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d1d6      	bne.n	800479c <HAL_PCD_EP_DB_Transmit+0x2b0>
 80047ee:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80047f2:	fa12 f383 	uxtah	r3, r2, r3
 80047f6:	7822      	ldrb	r2, [r4, #0]
 80047f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004802:	e7cb      	b.n	800479c <HAL_PCD_EP_DB_Transmit+0x2b0>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004804:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004808:	d10d      	bne.n	8004826 <HAL_PCD_EP_DB_Transmit+0x33a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800480a:	6828      	ldr	r0, [r5, #0]
 800480c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800481e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004822:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004826:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800482a:	2b01      	cmp	r3, #1
 800482c:	f47f aef4 	bne.w	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
        ep->xfer_buff += TxPctSize;
 8004830:	6963      	ldr	r3, [r4, #20]
 8004832:	4413      	add	r3, r2
 8004834:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8004836:	69e3      	ldr	r3, [r4, #28]
 8004838:	4413      	add	r3, r2
 800483a:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800483c:	6a21      	ldr	r1, [r4, #32]
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	4299      	cmp	r1, r3
 8004842:	d31d      	bcc.n	8004880 <HAL_PCD_EP_DB_Transmit+0x394>
          ep->xfer_len_db -= len;
 8004844:	1ac9      	subs	r1, r1, r3
 8004846:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004848:	6829      	ldr	r1, [r5, #0]
 800484a:	7862      	ldrb	r2, [r4, #1]
 800484c:	2a00      	cmp	r2, #0
 800484e:	d143      	bne.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8004850:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004854:	fa11 f282 	uxtah	r2, r1, r2
 8004858:	7821      	ldrb	r1, [r4, #0]
 800485a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800485e:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004862:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004866:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800486a:	b9ab      	cbnz	r3, 8004898 <HAL_PCD_EP_DB_Transmit+0x3ac>
 800486c:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004870:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004874:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004878:	b289      	uxth	r1, r1
 800487a:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800487e:	e02d      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x3f0>
        else if (ep->xfer_len_db == 0U)
 8004880:	b921      	cbnz	r1, 800488c <HAL_PCD_EP_DB_Transmit+0x3a0>
          ep->xfer_fill_db = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8004888:	4613      	mov	r3, r2
 800488a:	e7dd      	b.n	8004848 <HAL_PCD_EP_DB_Transmit+0x35c>
          ep->xfer_len_db = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8004890:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004894:	460b      	mov	r3, r1
 8004896:	e7d7      	b.n	8004848 <HAL_PCD_EP_DB_Transmit+0x35c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004898:	2b3e      	cmp	r3, #62	@ 0x3e
 800489a:	d80d      	bhi.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x3cc>
 800489c:	0859      	lsrs	r1, r3, #1
 800489e:	f013 0f01 	tst.w	r3, #1
 80048a2:	d000      	beq.n	80048a6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80048a4:	3101      	adds	r1, #1
 80048a6:	f8b2 0406 	ldrh.w	r0, [r2, #1030]	@ 0x406
 80048aa:	b280      	uxth	r0, r0
 80048ac:	0289      	lsls	r1, r1, #10
 80048ae:	b289      	uxth	r1, r1
 80048b0:	4301      	orrs	r1, r0
 80048b2:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 80048b6:	e011      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x3f0>
 80048b8:	0958      	lsrs	r0, r3, #5
 80048ba:	f013 0f1f 	tst.w	r3, #31
 80048be:	d100      	bne.n	80048c2 <HAL_PCD_EP_DB_Transmit+0x3d6>
 80048c0:	3801      	subs	r0, #1
 80048c2:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 80048c6:	b289      	uxth	r1, r1
 80048c8:	0280      	lsls	r0, r0, #10
 80048ca:	b280      	uxth	r0, r0
 80048cc:	4301      	orrs	r1, r0
 80048ce:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80048d2:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 80048d6:	e001      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x3f0>
 80048d8:	2a01      	cmp	r2, #1
 80048da:	d006      	beq.n	80048ea <HAL_PCD_EP_DB_Transmit+0x3fe>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8962      	ldrh	r2, [r4, #10]
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	6828      	ldr	r0, [r5, #0]
 80048e4:	f002 fa97 	bl	8006e16 <USB_WritePMA>
 80048e8:	e696      	b.n	8004618 <HAL_PCD_EP_DB_Transmit+0x12c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048ea:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80048ee:	fa11 f282 	uxtah	r2, r1, r2
 80048f2:	7821      	ldrb	r1, [r4, #0]
 80048f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80048f8:	b299      	uxth	r1, r3
 80048fa:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 80048fe:	e7ed      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x3f0>

08004900 <HAL_PCD_SetupStageCallback>:
}
 8004900:	4770      	bx	lr

08004902 <PCD_EP_ISR_Handler>:
{
 8004902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004906:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004908:	6828      	ldr	r0, [r5, #0]
 800490a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800490e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004912:	f000 828f 	beq.w	8004e34 <PCD_EP_ISR_Handler+0x532>
    wIstr = hpcd->Instance->ISTR;
 8004916:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 800491a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800491c:	f014 040f 	ands.w	r4, r4, #15
 8004920:	f040 80d9 	bne.w	8004ad6 <PCD_EP_ISR_Handler+0x1d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004924:	f013 0f10 	tst.w	r3, #16
 8004928:	d063      	beq.n	80049f2 <PCD_EP_ISR_Handler+0xf0>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800492a:	8803      	ldrh	r3, [r0, #0]
 800492c:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800492e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004932:	f040 808f 	bne.w	8004a54 <PCD_EP_ISR_Handler+0x152>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004936:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800493a:	d0e5      	beq.n	8004908 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800493c:	8803      	ldrh	r3, [r0, #0]
 800493e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004942:	051b      	lsls	r3, r3, #20
 8004944:	0d1b      	lsrs	r3, r3, #20
 8004946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800494c:	6828      	ldr	r0, [r5, #0]
 800494e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004952:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8004956:	00d2      	lsls	r2, r2, #3
 8004958:	fa12 f383 	uxtah	r3, r2, r3
 800495c:	4403      	add	r3, r0
 800495e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800496a:	b18b      	cbz	r3, 8004990 <PCD_EP_ISR_Handler+0x8e>
 800496c:	f8d5 1164 	ldr.w	r1, [r5, #356]	@ 0x164
 8004970:	b171      	cbz	r1, 8004990 <PCD_EP_ISR_Handler+0x8e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004972:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8004976:	f002 fe4b 	bl	8007610 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800497a:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
 800497e:	f8d5 216c 	ldr.w	r2, [r5, #364]	@ 0x16c
 8004982:	4413      	add	r3, r2
 8004984:	f8c5 3164 	str.w	r3, [r5, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004988:	2100      	movs	r1, #0
 800498a:	4628      	mov	r0, r5
 800498c:	f7ff fdac 	bl	80044e8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004990:	682a      	ldr	r2, [r5, #0]
 8004992:	8813      	ldrh	r3, [r2, #0]
 8004994:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004996:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800499a:	d1b5      	bne.n	8004908 <PCD_EP_ISR_Handler+0x6>
 800499c:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 80049a0:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80049a4:	d0b0      	beq.n	8004908 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80049aa:	fa12 f383 	uxtah	r3, r2, r3
 80049ae:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80049b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80049b6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80049ba:	f8d5 2160 	ldr.w	r2, [r5, #352]	@ 0x160
 80049be:	2a00      	cmp	r2, #0
 80049c0:	d169      	bne.n	8004a96 <PCD_EP_ISR_Handler+0x194>
 80049c2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80049c6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80049ca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80049ce:	b292      	uxth	r2, r2
 80049d0:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049d4:	682a      	ldr	r2, [r5, #0]
 80049d6:	8813      	ldrh	r3, [r2, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e2:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ee:	8013      	strh	r3, [r2, #0]
 80049f0:	e78a      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049f2:	8803      	ldrh	r3, [r0, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80049fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a0a:	6829      	ldr	r1, [r5, #0]
 8004a0c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	@ 0x50
 8004a10:	7c2a      	ldrb	r2, [r5, #16]
 8004a12:	00d2      	lsls	r2, r2, #3
 8004a14:	fa12 f383 	uxtah	r3, r2, r3
 8004a18:	440b      	add	r3, r1
 8004a1a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8004a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a22:	62eb      	str	r3, [r5, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8004a24:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8004a26:	441a      	add	r2, r3
 8004a28:	626a      	str	r2, [r5, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f7ff fd5c 	bl	80044ea <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a32:	7b2b      	ldrb	r3, [r5, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f43f af67 	beq.w	8004908 <PCD_EP_ISR_Handler+0x6>
 8004a3a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f af63 	bne.w	8004908 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a42:	7b2b      	ldrb	r3, [r5, #12]
 8004a44:	682a      	ldr	r2, [r5, #0]
 8004a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4a:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	732b      	strb	r3, [r5, #12]
 8004a52:	e759      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a54:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004a58:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8004a5c:	00d2      	lsls	r2, r2, #3
 8004a5e:	fa12 f383 	uxtah	r3, r2, r3
 8004a62:	4403      	add	r3, r0
 8004a64:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8004a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a6c:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a70:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8004a74:	f505 7126 	add.w	r1, r5, #664	@ 0x298
 8004a78:	f002 fdca 	bl	8007610 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a7c:	682a      	ldr	r2, [r5, #0]
 8004a7e:	8813      	ldrh	r3, [r2, #0]
 8004a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a84:	051b      	lsls	r3, r3, #20
 8004a86:	0d1b      	lsrs	r3, r3, #20
 8004a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f7ff ff36 	bl	8004900 <HAL_PCD_SetupStageCallback>
 8004a94:	e738      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a96:	2a3e      	cmp	r2, #62	@ 0x3e
 8004a98:	d80d      	bhi.n	8004ab6 <PCD_EP_ISR_Handler+0x1b4>
 8004a9a:	0851      	lsrs	r1, r2, #1
 8004a9c:	f012 0f01 	tst.w	r2, #1
 8004aa0:	d000      	beq.n	8004aa4 <PCD_EP_ISR_Handler+0x1a2>
 8004aa2:	3101      	adds	r1, #1
 8004aa4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004aa8:	b290      	uxth	r0, r2
 8004aaa:	028a      	lsls	r2, r1, #10
 8004aac:	b292      	uxth	r2, r2
 8004aae:	4302      	orrs	r2, r0
 8004ab0:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004ab4:	e78e      	b.n	80049d4 <PCD_EP_ISR_Handler+0xd2>
 8004ab6:	0951      	lsrs	r1, r2, #5
 8004ab8:	f012 0f1f 	tst.w	r2, #31
 8004abc:	d100      	bne.n	8004ac0 <PCD_EP_ISR_Handler+0x1be>
 8004abe:	3901      	subs	r1, #1
 8004ac0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	0289      	lsls	r1, r1, #10
 8004ac8:	b289      	uxth	r1, r1
 8004aca:	430a      	orrs	r2, r1
 8004acc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ad0:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004ad4:	e77e      	b.n	80049d4 <PCD_EP_ISR_Handler+0xd2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ad6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004ada:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004adc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004ae0:	d14e      	bne.n	8004b80 <PCD_EP_ISR_Handler+0x27e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ae2:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004ae6:	f43f af0f 	beq.w	8004908 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8004aea:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004aee:	00c9      	lsls	r1, r1, #3
 8004af0:	3110      	adds	r1, #16
 8004af2:	4429      	add	r1, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004af4:	682a      	ldr	r2, [r5, #0]
 8004af6:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004b12:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004b16:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004b1a:	7cdb      	ldrb	r3, [r3, #19]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	f000 80e9 	beq.w	8004cf4 <PCD_EP_ISR_Handler+0x3f2>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004b22:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8004b26:	f040 8180 	bne.w	8004e2a <PCD_EP_ISR_Handler+0x528>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b2a:	6828      	ldr	r0, [r5, #0]
 8004b2c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004b30:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004b34:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004b38:	7c16      	ldrb	r6, [r2, #16]
 8004b3a:	00f2      	lsls	r2, r6, #3
 8004b3c:	fa12 f383 	uxtah	r3, r2, r3
 8004b40:	4403      	add	r3, r0
 8004b42:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8004b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8004b4a:	1c62      	adds	r2, r4, #1
 8004b4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b50:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	f240 814b 	bls.w	8004df0 <PCD_EP_ISR_Handler+0x4ee>
              ep->xfer_len -= TxPctSize;
 8004b5a:	1c67      	adds	r7, r4, #1
 8004b5c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
            if (ep->xfer_len == 0U)
 8004b66:	1c62      	adds	r2, r4, #1
 8004b68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b6c:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8004b70:	2a00      	cmp	r2, #0
 8004b72:	f040 8144 	bne.w	8004dfe <PCD_EP_ISR_Handler+0x4fc>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f7ff fcb6 	bl	80044ea <HAL_PCD_DataInStageCallback>
 8004b7e:	e6c3      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b80:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b88:	051b      	lsls	r3, r3, #20
 8004b8a:	0d1b      	lsrs	r3, r3, #20
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b90:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8004b94:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004b98:	00c9      	lsls	r1, r1, #3
 8004b9a:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004b9e:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8004ba2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004ba6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004baa:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d140      	bne.n	8004c34 <PCD_EP_ISR_Handler+0x332>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bb2:	6828      	ldr	r0, [r5, #0]
 8004bb4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004bb8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004bbc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004bc0:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8004bc4:	00d2      	lsls	r2, r2, #3
 8004bc6:	fa12 f383 	uxtah	r3, r2, r3
 8004bca:	4403      	add	r3, r0
 8004bcc:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	@ 0x406
 8004bd0:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8004bd4:	bb17      	cbnz	r7, 8004c1c <PCD_EP_ISR_Handler+0x31a>
        ep->xfer_count += count;
 8004bd6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004bda:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004bde:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8004be2:	443a      	add	r2, r7
 8004be4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8004be8:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8004bec:	443a      	add	r2, r7
 8004bee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004bf2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8004bf6:	b13b      	cbz	r3, 8004c08 <PCD_EP_ISR_Handler+0x306>
 8004bf8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004bfc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c00:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004c04:	429f      	cmp	r7, r3
 8004c06:	d270      	bcs.n	8004cea <PCD_EP_ISR_Handler+0x3e8>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c08:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004c0c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c10:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7ff fc67 	bl	80044e8 <HAL_PCD_DataOutStageCallback>
 8004c1a:	e762      	b.n	8004ae2 <PCD_EP_ISR_Handler+0x1e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c1c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004c20:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004c24:	463b      	mov	r3, r7
 8004c26:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 8004c2a:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004c2e:	f002 fcef 	bl	8007610 <USB_ReadPMA>
 8004c32:	e7d0      	b.n	8004bd6 <PCD_EP_ISR_Handler+0x2d4>
          if (ep->type == EP_TYPE_BULK)
 8004c34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004c38:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c3c:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d033      	beq.n	8004cac <PCD_EP_ISR_Handler+0x3aa>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c44:	6829      	ldr	r1, [r5, #0]
 8004c46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004c4a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004c4e:	f892 0150 	ldrb.w	r0, [r2, #336]	@ 0x150
 8004c52:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c68:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c6c:	6828      	ldr	r0, [r5, #0]
 8004c6e:	f892 3150 	ldrb.w	r3, [r2, #336]	@ 0x150
 8004c72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c76:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004c7a:	d01e      	beq.n	8004cba <PCD_EP_ISR_Handler+0x3b8>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c7c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	fa13 f382 	uxtah	r3, r3, r2
 8004c86:	4403      	add	r3, r0
 8004c88:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	@ 0x402
 8004c8c:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	d0a0      	beq.n	8004bd6 <PCD_EP_ISR_Handler+0x2d4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c94:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004c98:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8004ca2:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004ca6:	f002 fcb3 	bl	8007610 <USB_ReadPMA>
 8004caa:	e794      	b.n	8004bd6 <PCD_EP_ISR_Handler+0x2d4>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cac:	4632      	mov	r2, r6
 8004cae:	4641      	mov	r1, r8
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7ff fb3b 	bl	800432c <HAL_PCD_EP_DB_Receive>
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	e78d      	b.n	8004bd6 <PCD_EP_ISR_Handler+0x2d4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cba:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	fa13 f382 	uxtah	r3, r3, r2
 8004cc4:	4403      	add	r3, r0
 8004cc6:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	@ 0x406
 8004cca:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8004cce:	2f00      	cmp	r7, #0
 8004cd0:	d081      	beq.n	8004bd6 <PCD_EP_ISR_Handler+0x2d4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cd2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004cd6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004cda:	463b      	mov	r3, r7
 8004cdc:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8004ce0:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004ce4:	f002 fc94 	bl	8007610 <USB_ReadPMA>
 8004ce8:	e775      	b.n	8004bd6 <PCD_EP_ISR_Handler+0x2d4>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cea:	4641      	mov	r1, r8
 8004cec:	6828      	ldr	r0, [r5, #0]
 8004cee:	f002 f8a4 	bl	8006e3a <USB_EPStartXfer>
 8004cf2:	e6f6      	b.n	8004ae2 <PCD_EP_ISR_Handler+0x1e0>
          ep->xfer_len = 0U;
 8004cf4:	1c63      	adds	r3, r4, #1
 8004cf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	50ea      	str	r2, [r5, r3]
          if (ep->doublebuffer != 0U)
 8004d00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d04:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004d08:	7f1b      	ldrb	r3, [r3, #28]
 8004d0a:	b31b      	cbz	r3, 8004d54 <PCD_EP_ISR_Handler+0x452>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d0c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004d10:	d03b      	beq.n	8004d8a <PCD_EP_ISR_Handler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d12:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d16:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004d1a:	7c5b      	ldrb	r3, [r3, #17]
 8004d1c:	bb1b      	cbnz	r3, 8004d66 <PCD_EP_ISR_Handler+0x464>
 8004d1e:	682a      	ldr	r2, [r5, #0]
 8004d20:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004d24:	fa12 f383 	uxtah	r3, r2, r3
 8004d28:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004d2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d30:	7c12      	ldrb	r2, [r2, #16]
 8004d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d36:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004d3a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d3e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004d42:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004d46:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004d4a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d54:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004d58:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8004d5c:	7c21      	ldrb	r1, [r4, #16]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f7ff fbc3 	bl	80044ea <HAL_PCD_DataInStageCallback>
 8004d64:	e5d0      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d1f4      	bne.n	8004d54 <PCD_EP_ISR_Handler+0x452>
 8004d6a:	682a      	ldr	r2, [r5, #0]
 8004d6c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004d70:	fa12 f383 	uxtah	r3, r2, r3
 8004d74:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004d78:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d7c:	7c12      	ldrb	r2, [r2, #16]
 8004d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004d88:	e7e4      	b.n	8004d54 <PCD_EP_ISR_Handler+0x452>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d8a:	682a      	ldr	r2, [r5, #0]
 8004d8c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d90:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004d94:	7c5b      	ldrb	r3, [r3, #17]
 8004d96:	b9d3      	cbnz	r3, 8004dce <PCD_EP_ISR_Handler+0x4cc>
 8004d98:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004d9c:	fa12 f383 	uxtah	r3, r2, r3
 8004da0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004da4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004da8:	7c12      	ldrb	r2, [r2, #16]
 8004daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dae:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004db2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004db6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004dba:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004dbe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004dc2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004dcc:	e7c2      	b.n	8004d54 <PCD_EP_ISR_Handler+0x452>
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d1c0      	bne.n	8004d54 <PCD_EP_ISR_Handler+0x452>
 8004dd2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004dd6:	fa12 f383 	uxtah	r3, r2, r3
 8004dda:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004dde:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004de2:	7c12      	ldrb	r2, [r2, #16]
 8004de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004dee:	e7b1      	b.n	8004d54 <PCD_EP_ISR_Handler+0x452>
              ep->xfer_len = 0U;
 8004df0:	1c62      	adds	r2, r4, #1
 8004df2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004df6:	00d2      	lsls	r2, r2, #3
 8004df8:	2700      	movs	r7, #0
 8004dfa:	50af      	str	r7, [r5, r2]
 8004dfc:	e6b3      	b.n	8004b66 <PCD_EP_ISR_Handler+0x264>
              ep->xfer_buff += TxPctSize;
 8004dfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004e02:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004e06:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 8004e08:	441e      	add	r6, r3
 8004e0a:	6256      	str	r6, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8004e0c:	3401      	adds	r4, #1
 8004e0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004e12:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004e16:	6852      	ldr	r2, [r2, #4]
 8004e18:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004e1c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8004e20:	4413      	add	r3, r2
 8004e22:	6063      	str	r3, [r4, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e24:	f002 f809 	bl	8006e3a <USB_EPStartXfer>
 8004e28:	e56e      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e2a:	4632      	mov	r2, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f7ff fb5d 	bl	80044ec <HAL_PCD_EP_DB_Transmit>
 8004e32:	e569      	b.n	8004908 <PCD_EP_ISR_Handler+0x6>
}
 8004e34:	2000      	movs	r0, #0
 8004e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e3a <HAL_PCD_SOFCallback>:
}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_PCD_ResetCallback>:
}
 8004e3c:	4770      	bx	lr

08004e3e <HAL_PCD_SuspendCallback>:
}
 8004e3e:	4770      	bx	lr

08004e40 <HAL_PCD_ResumeCallback>:
}
 8004e40:	4770      	bx	lr

08004e42 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8004e42:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d00c      	beq.n	8004e64 <HAL_PCD_SetAddress+0x22>
{
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004e54:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e56:	6800      	ldr	r0, [r0, #0]
 8004e58:	f001 ffd3 	bl	8006e02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004e62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004e64:	2002      	movs	r0, #2
}
 8004e66:	4770      	bx	lr

08004e68 <HAL_PCD_IRQHandler>:
{
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f001 ffce 	bl	8006e0e <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004e72:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8004e76:	d11e      	bne.n	8004eb6 <HAL_PCD_IRQHandler+0x4e>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004e78:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8004e7c:	d11f      	bne.n	8004ebe <HAL_PCD_IRQHandler+0x56>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004e7e:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8004e82:	d12d      	bne.n	8004ee0 <HAL_PCD_IRQHandler+0x78>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004e84:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8004e88:	d134      	bne.n	8004ef4 <HAL_PCD_IRQHandler+0x8c>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004e8a:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8004e8e:	d13b      	bne.n	8004f08 <HAL_PCD_IRQHandler+0xa0>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004e90:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8004e94:	d157      	bne.n	8004f46 <HAL_PCD_IRQHandler+0xde>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004e96:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8004e9a:	d171      	bne.n	8004f80 <HAL_PCD_IRQHandler+0x118>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004e9c:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004ea0:	d027      	beq.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8004eb4:	e01d      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    (void)PCD_EP_ISR_Handler(hpcd);
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f7ff fd23 	bl	8004902 <PCD_EP_ISR_Handler>
    return;
 8004ebc:	e019      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7ff ffb3 	bl	8004e3c <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f7ff ffb2 	bl	8004e42 <HAL_PCD_SetAddress>
    return;
 8004ede:	e008      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8004ef2:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8004f06:	e7f4      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f08:	6822      	ldr	r2, [r4, #0]
 8004f0a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f023 0308 	bic.w	r3, r3, #8
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7ff ff87 	bl	8004e40 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8004f44:	e7d5      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f043 0308 	orr.w	r3, r3, #8
 8004f52:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff ff60 	bl	8004e3e <HAL_PCD_SuspendCallback>
    return;
 8004f7e:	e7b8      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f80:	6822      	ldr	r2, [r4, #0]
 8004f82:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff ff51 	bl	8004e3a <HAL_PCD_SOFCallback>
    return;
 8004f98:	e7ab      	b.n	8004ef2 <HAL_PCD_IRQHandler+0x8a>
	...

08004f9c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f000 8308 	beq.w	80055b2 <HAL_RCC_OscConfig+0x616>
{
 8004fa2:	b570      	push	{r4, r5, r6, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa8:	6803      	ldr	r3, [r0, #0]
 8004faa:	f013 0f01 	tst.w	r3, #1
 8004fae:	d03d      	beq.n	800502c <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004fb0:	4bb2      	ldr	r3, [pc, #712]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d020      	beq.n	8004ffe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fbc:	4baf      	ldr	r3, [pc, #700]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d013      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fce:	d06a      	beq.n	80050a6 <HAL_RCC_OscConfig+0x10a>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 808d 	bne.w	80050f0 <HAL_RCC_OscConfig+0x154>
 8004fd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fda:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e05f      	b.n	80050b0 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff0:	4ba2      	ldr	r3, [pc, #648]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffc:	d1e4      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x2c>
 8004ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005002:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005006:	4b9d      	ldr	r3, [pc, #628]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800500e:	fa93 f3a3 	rbit	r3, r3
 8005012:	fab3 f383 	clz	r3, r3
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2201      	movs	r2, #1
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	420b      	tst	r3, r1
 8005022:	d003      	beq.n	800502c <HAL_RCC_OscConfig+0x90>
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 82c5 	beq.w	80055b6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	f013 0f02 	tst.w	r3, #2
 8005032:	f000 80bf 	beq.w	80051b4 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005036:	4b91      	ldr	r3, [pc, #580]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f013 0f0c 	tst.w	r3, #12
 800503e:	f000 8097 	beq.w	8005170 <HAL_RCC_OscConfig+0x1d4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005042:	4b8e      	ldr	r3, [pc, #568]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	f000 8088 	beq.w	8005160 <HAL_RCC_OscConfig+0x1c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005050:	68e3      	ldr	r3, [r4, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80eb 	beq.w	800522e <HAL_RCC_OscConfig+0x292>
 8005058:	2201      	movs	r2, #1
 800505a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005066:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506e:	f7fe f93b 	bl	80032e8 <HAL_GetTick>
 8005072:	4605      	mov	r5, r0
 8005074:	2302      	movs	r3, #2
 8005076:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b80      	ldr	r3, [pc, #512]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	2302      	movs	r3, #2
 8005080:	fa93 f3a3 	rbit	r3, r3
 8005084:	fab3 f383 	clz	r3, r3
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2201      	movs	r2, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	420b      	tst	r3, r1
 8005094:	f040 80bd 	bne.w	8005212 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005098:	f7fe f926 	bl	80032e8 <HAL_GetTick>
 800509c:	1b40      	subs	r0, r0, r5
 800509e:	2802      	cmp	r0, #2
 80050a0:	d9e8      	bls.n	8005074 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 80050a2:	2003      	movs	r0, #3
 80050a4:	e290      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a6:	4a75      	ldr	r2, [pc, #468]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 80050a8:	6813      	ldr	r3, [r2, #0]
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 80050b6:	f7fe f917 	bl	80032e8 <HAL_GetTick>
 80050ba:	4605      	mov	r5, r0
 80050bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050c0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c4:	4b6d      	ldr	r3, [pc, #436]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	fab3 f383 	clz	r3, r3
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	2201      	movs	r2, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	420b      	tst	r3, r1
 80050e0:	d1a4      	bne.n	800502c <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e2:	f7fe f901 	bl	80032e8 <HAL_GetTick>
 80050e6:	1b40      	subs	r0, r0, r5
 80050e8:	2864      	cmp	r0, #100	@ 0x64
 80050ea:	d9e7      	bls.n	80050bc <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 80050ec:	2003      	movs	r0, #3
 80050ee:	e26b      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f4:	d009      	beq.n	800510a <HAL_RCC_OscConfig+0x16e>
 80050f6:	4b61      	ldr	r3, [pc, #388]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e7d2      	b.n	80050b0 <HAL_RCC_OscConfig+0x114>
 800510a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800510e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e7c5      	b.n	80050b0 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8005124:	f7fe f8e0 	bl	80032e8 <HAL_GetTick>
 8005128:	4605      	mov	r5, r0
 800512a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800512e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005132:	4b52      	ldr	r3, [pc, #328]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005134:	6819      	ldr	r1, [r3, #0]
 8005136:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	fab3 f383 	clz	r3, r3
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2201      	movs	r2, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	420b      	tst	r3, r1
 800514e:	f43f af6d 	beq.w	800502c <HAL_RCC_OscConfig+0x90>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005152:	f7fe f8c9 	bl	80032e8 <HAL_GetTick>
 8005156:	1b40      	subs	r0, r0, r5
 8005158:	2864      	cmp	r0, #100	@ 0x64
 800515a:	d9e6      	bls.n	800512a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800515c:	2003      	movs	r0, #3
 800515e:	e233      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005160:	4b46      	ldr	r3, [pc, #280]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800516c:	f47f af70 	bne.w	8005050 <HAL_RCC_OscConfig+0xb4>
 8005170:	2302      	movs	r3, #2
 8005172:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	4b41      	ldr	r3, [pc, #260]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	2302      	movs	r3, #2
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	420b      	tst	r3, r1
 8005190:	d003      	beq.n	800519a <HAL_RCC_OscConfig+0x1fe>
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	4293      	cmp	r3, r2
 8005196:	f040 8210 	bne.w	80055ba <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519a:	4838      	ldr	r0, [pc, #224]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 800519c:	6803      	ldr	r3, [r0, #0]
 800519e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80051a2:	6921      	ldr	r1, [r4, #16]
 80051a4:	22f8      	movs	r2, #248	@ 0xf8
 80051a6:	fa92 f2a2 	rbit	r2, r2
 80051aa:	fab2 f282 	clz	r2, r2
 80051ae:	4091      	lsls	r1, r2
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f013 0f08 	tst.w	r3, #8
 80051ba:	f000 808b 	beq.w	80052d4 <HAL_RCC_OscConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051be:	6963      	ldr	r3, [r4, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05f      	beq.n	8005284 <HAL_RCC_OscConfig+0x2e8>
 80051c4:	2101      	movs	r1, #1
 80051c6:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	fab2 f282 	clz	r2, r2
 80051ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005280 <HAL_RCC_OscConfig+0x2e4>)
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d6:	f7fe f887 	bl	80032e8 <HAL_GetTick>
 80051da:	4605      	mov	r5, r0
 80051dc:	2302      	movs	r3, #2
 80051de:	fa93 f2a3 	rbit	r2, r3
 80051e2:	fa93 f2a3 	rbit	r2, r3
 80051e6:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	4a24      	ldr	r2, [pc, #144]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 80051ec:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2201      	movs	r2, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	420b      	tst	r3, r1
 8005202:	d167      	bne.n	80052d4 <HAL_RCC_OscConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005204:	f7fe f870 	bl	80032e8 <HAL_GetTick>
 8005208:	1b40      	subs	r0, r0, r5
 800520a:	2802      	cmp	r0, #2
 800520c:	d9e6      	bls.n	80051dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800520e:	2003      	movs	r0, #3
 8005210:	e1da      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005214:	6803      	ldr	r3, [r0, #0]
 8005216:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800521a:	6921      	ldr	r1, [r4, #16]
 800521c:	22f8      	movs	r2, #248	@ 0xf8
 800521e:	fa92 f2a2 	rbit	r2, r2
 8005222:	fab2 f282 	clz	r2, r2
 8005226:	4091      	lsls	r1, r2
 8005228:	430b      	orrs	r3, r1
 800522a:	6003      	str	r3, [r0, #0]
 800522c:	e7c2      	b.n	80051b4 <HAL_RCC_OscConfig+0x218>
 800522e:	2301      	movs	r3, #1
 8005230:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8005234:	fab3 f383 	clz	r3, r3
 8005238:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800523c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005246:	f7fe f84f 	bl	80032e8 <HAL_GetTick>
 800524a:	4605      	mov	r5, r0
 800524c:	2302      	movs	r3, #2
 800524e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <HAL_RCC_OscConfig+0x2e0>)
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	2302      	movs	r3, #2
 8005258:	fa93 f3a3 	rbit	r3, r3
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2201      	movs	r2, #1
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	420b      	tst	r3, r1
 800526c:	d0a2      	beq.n	80051b4 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526e:	f7fe f83b 	bl	80032e8 <HAL_GetTick>
 8005272:	1b40      	subs	r0, r0, r5
 8005274:	2802      	cmp	r0, #2
 8005276:	d9e9      	bls.n	800524c <HAL_RCC_OscConfig+0x2b0>
            return HAL_TIMEOUT;
 8005278:	2003      	movs	r0, #3
 800527a:	e1a5      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
 800527c:	40021000 	.word	0x40021000
 8005280:	10908120 	.word	0x10908120
 8005284:	2201      	movs	r2, #1
 8005286:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800528a:	fab2 f282 	clz	r2, r2
 800528e:	4b9c      	ldr	r3, [pc, #624]	@ (8005500 <HAL_RCC_OscConfig+0x564>)
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fe f826 	bl	80032e8 <HAL_GetTick>
 800529c:	4605      	mov	r5, r0
 800529e:	2302      	movs	r3, #2
 80052a0:	fa93 f2a3 	rbit	r2, r3
 80052a4:	fa93 f2a3 	rbit	r2, r3
 80052a8:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ac:	4a95      	ldr	r2, [pc, #596]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80052ae:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80052b0:	fa93 f3a3 	rbit	r3, r3
 80052b4:	fab3 f383 	clz	r3, r3
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2201      	movs	r2, #1
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	420b      	tst	r3, r1
 80052c4:	d006      	beq.n	80052d4 <HAL_RCC_OscConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fe f80f 	bl	80032e8 <HAL_GetTick>
 80052ca:	1b40      	subs	r0, r0, r5
 80052cc:	2802      	cmp	r0, #2
 80052ce:	d9e6      	bls.n	800529e <HAL_RCC_OscConfig+0x302>
        {
          return HAL_TIMEOUT;
 80052d0:	2003      	movs	r0, #3
 80052d2:	e179      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f013 0f04 	tst.w	r3, #4
 80052da:	f000 80a9 	beq.w	8005430 <HAL_RCC_OscConfig+0x494>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052de:	4b89      	ldr	r3, [pc, #548]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80052e6:	d120      	bne.n	800532a <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e8:	4b86      	ldr	r3, [pc, #536]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80052f0:	61da      	str	r2, [r3, #28]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052fc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b82      	ldr	r3, [pc, #520]	@ (8005508 <HAL_RCC_OscConfig+0x56c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005306:	d012      	beq.n	800532e <HAL_RCC_OscConfig+0x392>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d023      	beq.n	8005356 <HAL_RCC_OscConfig+0x3ba>
 800530e:	bb73      	cbnz	r3, 800536e <HAL_RCC_OscConfig+0x3d2>
 8005310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005314:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	621a      	str	r2, [r3, #32]
 8005320:	6a1a      	ldr	r2, [r3, #32]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	621a      	str	r2, [r3, #32]
 8005328:	e01a      	b.n	8005360 <HAL_RCC_OscConfig+0x3c4>
    FlagStatus       pwrclkchanged = RESET;
 800532a:	2500      	movs	r5, #0
 800532c:	e7e7      	b.n	80052fe <HAL_RCC_OscConfig+0x362>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532e:	4a76      	ldr	r2, [pc, #472]	@ (8005508 <HAL_RCC_OscConfig+0x56c>)
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005336:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005338:	f7fd ffd6 	bl	80032e8 <HAL_GetTick>
 800533c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533e:	4b72      	ldr	r3, [pc, #456]	@ (8005508 <HAL_RCC_OscConfig+0x56c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005346:	d1df      	bne.n	8005308 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005348:	f7fd ffce 	bl	80032e8 <HAL_GetTick>
 800534c:	1b80      	subs	r0, r0, r6
 800534e:	2864      	cmp	r0, #100	@ 0x64
 8005350:	d9f5      	bls.n	800533e <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8005352:	2003      	movs	r0, #3
 8005354:	e138      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005356:	4a6b      	ldr	r2, [pc, #428]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 8005358:	6a13      	ldr	r3, [r2, #32]
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d03c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x444>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005366:	f7fd ffbf 	bl	80032e8 <HAL_GetTick>
 800536a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536c:	e02e      	b.n	80053cc <HAL_RCC_OscConfig+0x430>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536e:	2b05      	cmp	r3, #5
 8005370:	d009      	beq.n	8005386 <HAL_RCC_OscConfig+0x3ea>
 8005372:	4b64      	ldr	r3, [pc, #400]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	621a      	str	r2, [r3, #32]
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	621a      	str	r2, [r3, #32]
 8005384:	e7ec      	b.n	8005360 <HAL_RCC_OscConfig+0x3c4>
 8005386:	4b5f      	ldr	r3, [pc, #380]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	f042 0204 	orr.w	r2, r2, #4
 800538e:	621a      	str	r2, [r3, #32]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	621a      	str	r2, [r3, #32]
 8005398:	e7e2      	b.n	8005360 <HAL_RCC_OscConfig+0x3c4>
 800539a:	2302      	movs	r3, #2
 800539c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	4b58      	ldr	r3, [pc, #352]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80053a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80053a4:	2302      	movs	r3, #2
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	2201      	movs	r2, #1
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	4219      	tst	r1, r3
 80053ba:	d138      	bne.n	800542e <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fd ff94 	bl	80032e8 <HAL_GetTick>
 80053c0:	1b80      	subs	r0, r0, r6
 80053c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053c6:	4298      	cmp	r0, r3
 80053c8:	f200 80f9 	bhi.w	80055be <HAL_RCC_OscConfig+0x622>
 80053cc:	2302      	movs	r3, #2
 80053ce:	fa93 f2a3 	rbit	r2, r3
 80053d2:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0df      	beq.n	800539a <HAL_RCC_OscConfig+0x3fe>
 80053da:	4b4a      	ldr	r3, [pc, #296]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80053dc:	6a19      	ldr	r1, [r3, #32]
 80053de:	e7e1      	b.n	80053a4 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e0:	f7fd ff82 	bl	80032e8 <HAL_GetTick>
 80053e4:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e6:	e018      	b.n	800541a <HAL_RCC_OscConfig+0x47e>
 80053e8:	2302      	movs	r3, #2
 80053ea:	fa93 f3a3 	rbit	r3, r3
 80053ee:	4b45      	ldr	r3, [pc, #276]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80053f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80053f2:	2302      	movs	r3, #2
 80053f4:	fa93 f3a3 	rbit	r3, r3
 80053f8:	fab3 f383 	clz	r3, r3
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2201      	movs	r2, #1
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	4219      	tst	r1, r3
 8005408:	d011      	beq.n	800542e <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd ff6d 	bl	80032e8 <HAL_GetTick>
 800540e:	1b80      	subs	r0, r0, r6
 8005410:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005414:	4298      	cmp	r0, r3
 8005416:	f200 80d4 	bhi.w	80055c2 <HAL_RCC_OscConfig+0x626>
 800541a:	2302      	movs	r3, #2
 800541c:	fa93 f2a3 	rbit	r2, r3
 8005420:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0df      	beq.n	80053e8 <HAL_RCC_OscConfig+0x44c>
 8005428:	4b36      	ldr	r3, [pc, #216]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 800542a:	6a19      	ldr	r1, [r3, #32]
 800542c:	e7e1      	b.n	80053f2 <HAL_RCC_OscConfig+0x456>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800542e:	bbb5      	cbnz	r5, 800549e <HAL_RCC_OscConfig+0x502>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005430:	69a3      	ldr	r3, [r4, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80c7 	beq.w	80055c6 <HAL_RCC_OscConfig+0x62a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005438:	4a32      	ldr	r2, [pc, #200]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 800543a:	6852      	ldr	r2, [r2, #4]
 800543c:	f002 020c 	and.w	r2, r2, #12
 8005440:	2a08      	cmp	r2, #8
 8005442:	f000 80a0 	beq.w	8005586 <HAL_RCC_OscConfig+0x5ea>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005446:	2b02      	cmp	r3, #2
 8005448:	d02f      	beq.n	80054aa <HAL_RCC_OscConfig+0x50e>
 800544a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800544e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800545a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fd ff40 	bl	80032e8 <HAL_GetTick>
 8005468:	4604      	mov	r4, r0
 800546a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800546e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005472:	4b24      	ldr	r3, [pc, #144]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2201      	movs	r2, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	4219      	tst	r1, r3
 800548e:	d078      	beq.n	8005582 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005490:	f7fd ff2a 	bl	80032e8 <HAL_GetTick>
 8005494:	1b00      	subs	r0, r0, r4
 8005496:	2802      	cmp	r0, #2
 8005498:	d9e7      	bls.n	800546a <HAL_RCC_OscConfig+0x4ce>
          {
            return HAL_TIMEOUT;
 800549a:	2003      	movs	r0, #3
 800549c:	e094      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800549e:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80054a0:	69d3      	ldr	r3, [r2, #28]
 80054a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	61d3      	str	r3, [r2, #28]
 80054a8:	e7c2      	b.n	8005430 <HAL_RCC_OscConfig+0x494>
 80054aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80054ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80054c4:	f7fd ff10 	bl	80032e8 <HAL_GetTick>
 80054c8:	4605      	mov	r5, r0
 80054ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054ce:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005504 <HAL_RCC_OscConfig+0x568>)
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2201      	movs	r2, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	4219      	tst	r1, r3
 80054ee:	d00d      	beq.n	800550c <HAL_RCC_OscConfig+0x570>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fd fefa 	bl	80032e8 <HAL_GetTick>
 80054f4:	1b40      	subs	r0, r0, r5
 80054f6:	2802      	cmp	r0, #2
 80054f8:	d9e7      	bls.n	80054ca <HAL_RCC_OscConfig+0x52e>
            return HAL_TIMEOUT;
 80054fa:	2003      	movs	r0, #3
 80054fc:	e064      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
 80054fe:	bf00      	nop
 8005500:	10908120 	.word	0x10908120
 8005504:	40021000 	.word	0x40021000
 8005508:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800550c:	4a33      	ldr	r2, [pc, #204]	@ (80055dc <HAL_RCC_OscConfig+0x640>)
 800550e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005510:	f023 030f 	bic.w	r3, r3, #15
 8005514:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005516:	430b      	orrs	r3, r1
 8005518:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800551a:	6853      	ldr	r3, [r2, #4]
 800551c:	f423 1376 	bic.w	r3, r3, #4030464	@ 0x3d8000
 8005520:	6a21      	ldr	r1, [r4, #32]
 8005522:	69e0      	ldr	r0, [r4, #28]
 8005524:	4301      	orrs	r1, r0
 8005526:	430b      	orrs	r3, r1
 8005528:	6053      	str	r3, [r2, #4]
 800552a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800552e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005532:	fab3 f383 	clz	r3, r3
 8005536:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800553a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005544:	f7fd fed0 	bl	80032e8 <HAL_GetTick>
 8005548:	4604      	mov	r4, r0
 800554a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800554e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005552:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <HAL_RCC_OscConfig+0x640>)
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	fab3 f383 	clz	r3, r3
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2201      	movs	r2, #1
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	4219      	tst	r1, r3
 800556e:	d106      	bne.n	800557e <HAL_RCC_OscConfig+0x5e2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005570:	f7fd feba 	bl	80032e8 <HAL_GetTick>
 8005574:	1b00      	subs	r0, r0, r4
 8005576:	2802      	cmp	r0, #2
 8005578:	d9e7      	bls.n	800554a <HAL_RCC_OscConfig+0x5ae>
            return HAL_TIMEOUT;
 800557a:	2003      	movs	r0, #3
 800557c:	e024      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
        }
      }
    }
  }

  return HAL_OK;
 800557e:	2000      	movs	r0, #0
 8005580:	e022      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
 8005582:	2000      	movs	r0, #0
 8005584:	e020      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005586:	2b01      	cmp	r3, #1
 8005588:	d020      	beq.n	80055cc <HAL_RCC_OscConfig+0x630>
        pll_config = RCC->CFGR;
 800558a:	4a14      	ldr	r2, [pc, #80]	@ (80055dc <HAL_RCC_OscConfig+0x640>)
 800558c:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 800558e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005590:	f403 31c0 	and.w	r1, r3, #98304	@ 0x18000
 8005594:	69e2      	ldr	r2, [r4, #28]
 8005596:	4291      	cmp	r1, r2
 8005598:	d11a      	bne.n	80055d0 <HAL_RCC_OscConfig+0x634>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800559a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800559e:	6a22      	ldr	r2, [r4, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d117      	bne.n	80055d4 <HAL_RCC_OscConfig+0x638>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80055a4:	f000 000f 	and.w	r0, r0, #15
 80055a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055aa:	4298      	cmp	r0, r3
 80055ac:	d114      	bne.n	80055d8 <HAL_RCC_OscConfig+0x63c>
  return HAL_OK;
 80055ae:	2000      	movs	r0, #0
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
    return HAL_ERROR;
 80055b2:	2001      	movs	r0, #1
}
 80055b4:	4770      	bx	lr
        return HAL_ERROR;
 80055b6:	2001      	movs	r0, #1
 80055b8:	e006      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
        return HAL_ERROR;
 80055ba:	2001      	movs	r0, #1
 80055bc:	e004      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
          return HAL_TIMEOUT;
 80055be:	2003      	movs	r0, #3
 80055c0:	e002      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
          return HAL_TIMEOUT;
 80055c2:	2003      	movs	r0, #3
 80055c4:	e000      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
  return HAL_OK;
 80055c6:	2000      	movs	r0, #0
}
 80055c8:	b002      	add	sp, #8
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
 80055ce:	e7fb      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
          return HAL_ERROR;
 80055d0:	2001      	movs	r0, #1
 80055d2:	e7f9      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
 80055d4:	2001      	movs	r0, #1
 80055d6:	e7f7      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
 80055d8:	2001      	movs	r0, #1
 80055da:	e7f5      	b.n	80055c8 <HAL_RCC_OscConfig+0x62c>
 80055dc:	40021000 	.word	0x40021000

080055e0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80055e0:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x44>)
 80055e2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055e4:	f003 020c 	and.w	r2, r3, #12
 80055e8:	2a08      	cmp	r2, #8
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055ec:	480e      	ldr	r0, [pc, #56]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80055ee:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80055f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80055f4:	490d      	ldr	r1, [pc, #52]	@ (800562c <HAL_RCC_GetSysClockFreq+0x4c>)
 80055f6:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80055f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x44>)
 80055fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055fc:	f002 020f 	and.w	r2, r2, #15
 8005600:	490b      	ldr	r1, [pc, #44]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x50>)
 8005602:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005604:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005608:	d005      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x36>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800560a:	4b07      	ldr	r3, [pc, #28]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x48>)
 800560c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005610:	fb03 f000 	mul.w	r0, r3, r0
 8005614:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005616:	4b04      	ldr	r3, [pc, #16]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x48>)
 8005618:	fbb3 f3f2 	udiv	r3, r3, r2
 800561c:	fb03 f000 	mul.w	r0, r3, r0
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	007a1200 	.word	0x007a1200
 800562c:	08007950 	.word	0x08007950
 8005630:	08007940 	.word	0x08007940

08005634 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005634:	2800      	cmp	r0, #0
 8005636:	f000 80be 	beq.w	80057b6 <HAL_RCC_ClockConfig+0x182>
{
 800563a:	b570      	push	{r4, r5, r6, lr}
 800563c:	460d      	mov	r5, r1
 800563e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005640:	4b61      	ldr	r3, [pc, #388]	@ (80057c8 <HAL_RCC_ClockConfig+0x194>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	428b      	cmp	r3, r1
 800564a:	d20b      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564c:	4a5e      	ldr	r2, [pc, #376]	@ (80057c8 <HAL_RCC_ClockConfig+0x194>)
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	428b      	cmp	r3, r1
 8005660:	f040 80ab 	bne.w	80057ba <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	f013 0f02 	tst.w	r3, #2
 800566a:	d006      	beq.n	800567a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800566c:	4a57      	ldr	r2, [pc, #348]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 800566e:	6853      	ldr	r3, [r2, #4]
 8005670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005674:	68a1      	ldr	r1, [r4, #8]
 8005676:	430b      	orrs	r3, r1
 8005678:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f013 0f01 	tst.w	r3, #1
 8005680:	d05a      	beq.n	8005738 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d02d      	beq.n	80056e4 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005688:	2b02      	cmp	r3, #2
 800568a:	d040      	beq.n	800570e <HAL_RCC_ClockConfig+0xda>
 800568c:	2202      	movs	r2, #2
 800568e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005692:	4a4e      	ldr	r2, [pc, #312]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 8005694:	6810      	ldr	r0, [r2, #0]
 8005696:	2202      	movs	r2, #2
 8005698:	fa92 f2a2 	rbit	r2, r2
 800569c:	fab2 f282 	clz	r2, r2
 80056a0:	f002 021f 	and.w	r2, r2, #31
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f202 	lsl.w	r2, r1, r2
 80056aa:	4210      	tst	r0, r2
 80056ac:	f000 8087 	beq.w	80057be <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b0:	4946      	ldr	r1, [pc, #280]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 80056b2:	684a      	ldr	r2, [r1, #4]
 80056b4:	f022 0203 	bic.w	r2, r2, #3
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80056bc:	f7fd fe14 	bl	80032e8 <HAL_GetTick>
 80056c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	4b42      	ldr	r3, [pc, #264]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80056d0:	d032      	beq.n	8005738 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d2:	f7fd fe09 	bl	80032e8 <HAL_GetTick>
 80056d6:	1b80      	subs	r0, r0, r6
 80056d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056dc:	4298      	cmp	r0, r3
 80056de:	d9f0      	bls.n	80056c2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80056e0:	2003      	movs	r0, #3
 80056e2:	e067      	b.n	80057b4 <HAL_RCC_ClockConfig+0x180>
 80056e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056e8:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ec:	4a37      	ldr	r2, [pc, #220]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 80056ee:	6810      	ldr	r0, [r2, #0]
 80056f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056f4:	fa92 f2a2 	rbit	r2, r2
 80056f8:	fab2 f282 	clz	r2, r2
 80056fc:	f002 021f 	and.w	r2, r2, #31
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f202 	lsl.w	r2, r1, r2
 8005706:	4202      	tst	r2, r0
 8005708:	d1d2      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 800570a:	2001      	movs	r0, #1
 800570c:	e052      	b.n	80057b4 <HAL_RCC_ClockConfig+0x180>
 800570e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005712:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005716:	4a2d      	ldr	r2, [pc, #180]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 8005718:	6810      	ldr	r0, [r2, #0]
 800571a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800571e:	fa92 f2a2 	rbit	r2, r2
 8005722:	fab2 f282 	clz	r2, r2
 8005726:	f002 021f 	and.w	r2, r2, #31
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	4210      	tst	r0, r2
 8005732:	d1bd      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8005734:	2001      	movs	r0, #1
 8005736:	e03d      	b.n	80057b4 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005738:	4b23      	ldr	r3, [pc, #140]	@ (80057c8 <HAL_RCC_ClockConfig+0x194>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	42ab      	cmp	r3, r5
 8005742:	d90a      	bls.n	800575a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005744:	4a20      	ldr	r2, [pc, #128]	@ (80057c8 <HAL_RCC_ClockConfig+0x194>)
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	f023 0307 	bic.w	r3, r3, #7
 800574c:	432b      	orrs	r3, r5
 800574e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005750:	6813      	ldr	r3, [r2, #0]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	42ab      	cmp	r3, r5
 8005758:	d133      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	f013 0f04 	tst.w	r3, #4
 8005760:	d006      	beq.n	8005770 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005762:	4a1a      	ldr	r2, [pc, #104]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 8005764:	6853      	ldr	r3, [r2, #4]
 8005766:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800576a:	68e1      	ldr	r1, [r4, #12]
 800576c:	430b      	orrs	r3, r1
 800576e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f013 0f08 	tst.w	r3, #8
 8005776:	d007      	beq.n	8005788 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005778:	4a14      	ldr	r2, [pc, #80]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 800577a:	6853      	ldr	r3, [r2, #4]
 800577c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005780:	6921      	ldr	r1, [r4, #16]
 8005782:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005786:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005788:	f7ff ff2a 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
 800578c:	4b0f      	ldr	r3, [pc, #60]	@ (80057cc <HAL_RCC_ClockConfig+0x198>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005794:	22f0      	movs	r2, #240	@ 0xf0
 8005796:	fa92 f2a2 	rbit	r2, r2
 800579a:	fab2 f282 	clz	r2, r2
 800579e:	40d3      	lsrs	r3, r2
 80057a0:	4a0b      	ldr	r2, [pc, #44]	@ (80057d0 <HAL_RCC_ClockConfig+0x19c>)
 80057a2:	5cd3      	ldrb	r3, [r2, r3]
 80057a4:	40d8      	lsrs	r0, r3
 80057a6:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <HAL_RCC_ClockConfig+0x1a0>)
 80057a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_ClockConfig+0x1a4>)
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f000 fd3f 	bl	8006230 <HAL_InitTick>
  return HAL_OK;
 80057b2:	2000      	movs	r0, #0
}
 80057b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80057b6:	2001      	movs	r0, #1
}
 80057b8:	4770      	bx	lr
      return HAL_ERROR;
 80057ba:	2001      	movs	r0, #1
 80057bc:	e7fa      	b.n	80057b4 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 80057be:	2001      	movs	r0, #1
 80057c0:	e7f8      	b.n	80057b4 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 80057c2:	2001      	movs	r0, #1
 80057c4:	e7f6      	b.n	80057b4 <HAL_RCC_ClockConfig+0x180>
 80057c6:	bf00      	nop
 80057c8:	40022000 	.word	0x40022000
 80057cc:	40021000 	.word	0x40021000
 80057d0:	08007968 	.word	0x08007968
 80057d4:	200000d0 	.word	0x200000d0
 80057d8:	200000cc 	.word	0x200000cc

080057dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80057dc:	4b01      	ldr	r3, [pc, #4]	@ (80057e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	200000d0 	.word	0x200000d0

080057e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057ea:	f7ff fff7 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 80057ee:	4b07      	ldr	r3, [pc, #28]	@ (800580c <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80057fa:	fa92 f2a2 	rbit	r2, r2
 80057fe:	fab2 f282 	clz	r2, r2
 8005802:	40d3      	lsrs	r3, r2
 8005804:	4a02      	ldr	r2, [pc, #8]	@ (8005810 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
}    
 8005808:	40d8      	lsrs	r0, r3
 800580a:	bd08      	pop	{r3, pc}
 800580c:	40021000 	.word	0x40021000
 8005810:	08007960 	.word	0x08007960

08005814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005814:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005816:	f7ff ffe1 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 800581a:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005822:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005826:	fa92 f2a2 	rbit	r2, r2
 800582a:	fab2 f282 	clz	r2, r2
 800582e:	40d3      	lsrs	r3, r2
 8005830:	4a02      	ldr	r2, [pc, #8]	@ (800583c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005832:	5cd3      	ldrb	r3, [r2, r3]
} 
 8005834:	40d8      	lsrs	r0, r3
 8005836:	bd08      	pop	{r3, pc}
 8005838:	40021000 	.word	0x40021000
 800583c:	08007960 	.word	0x08007960

08005840 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005840:	230f      	movs	r3, #15
 8005842:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <HAL_RCC_GetClockConfig+0x34>)
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	f002 0203 	and.w	r2, r2, #3
 800584c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005854:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800585c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005866:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005868:	4b03      	ldr	r3, [pc, #12]	@ (8005878 <HAL_RCC_GetClockConfig+0x38>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	600b      	str	r3, [r1, #0]
}
 8005872:	4770      	bx	lr
 8005874:	40021000 	.word	0x40021000
 8005878:	40022000 	.word	0x40022000

0800587c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800587c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587e:	b083      	sub	sp, #12
 8005880:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005882:	6803      	ldr	r3, [r0, #0]
 8005884:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005888:	d048      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588a:	4ba1      	ldr	r3, [pc, #644]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005892:	f040 8121 	bne.w	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005896:	4b9e      	ldr	r3, [pc, #632]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800589e:	61da      	str	r2, [r3, #28]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058aa:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ac:	4b99      	ldr	r3, [pc, #612]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80058b4:	f000 8112 	beq.w	8005adc <HAL_RCCEx_PeriphCLKConfig+0x260>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b8:	4b95      	ldr	r3, [pc, #596]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058bc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80058c0:	d022      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80058c2:	6862      	ldr	r2, [r4, #4]
 80058c4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d01d      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058cc:	4890      	ldr	r0, [pc, #576]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80058ce:	6a01      	ldr	r1, [r0, #32]
 80058d0:	f421 7640 	bic.w	r6, r1, #768	@ 0x300
 80058d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80058d8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058dc:	fab2 f282 	clz	r2, r2
 80058e0:	4f8d      	ldr	r7, [pc, #564]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058e2:	443a      	add	r2, r7
 80058e4:	0092      	lsls	r2, r2, #2
 80058e6:	f04f 0c01 	mov.w	ip, #1
 80058ea:	f8c2 c000 	str.w	ip, [r2]
 80058ee:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058f2:	fab3 f383 	clz	r3, r3
 80058f6:	443b      	add	r3, r7
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058fe:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005900:	f011 0f01 	tst.w	r1, #1
 8005904:	f040 80ff 	bne.w	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x28a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005908:	4a81      	ldr	r2, [pc, #516]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800590a:	6a13      	ldr	r3, [r2, #32]
 800590c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	430b      	orrs	r3, r1
 8005914:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005916:	2d00      	cmp	r5, #0
 8005918:	f040 8123 	bne.w	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f013 0f01 	tst.w	r3, #1
 8005922:	d006      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005924:	4a7a      	ldr	r2, [pc, #488]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005926:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005928:	f023 0303 	bic.w	r3, r3, #3
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	430b      	orrs	r3, r1
 8005930:	6313      	str	r3, [r2, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f013 0f02 	tst.w	r3, #2
 8005938:	d006      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800593a:	4a75      	ldr	r2, [pc, #468]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800593c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800593e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005942:	68e1      	ldr	r1, [r4, #12]
 8005944:	430b      	orrs	r3, r1
 8005946:	6313      	str	r3, [r2, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	f013 0f04 	tst.w	r3, #4
 800594e:	d006      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005950:	4a6f      	ldr	r2, [pc, #444]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005952:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005954:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8005958:	6921      	ldr	r1, [r4, #16]
 800595a:	430b      	orrs	r3, r1
 800595c:	6313      	str	r3, [r2, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	f013 0f20 	tst.w	r3, #32
 8005964:	d006      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005966:	4a6a      	ldr	r2, [pc, #424]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005968:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	69e1      	ldr	r1, [r4, #28]
 8005970:	430b      	orrs	r3, r1
 8005972:	6313      	str	r3, [r2, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800597a:	d006      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800597c:	4a64      	ldr	r2, [pc, #400]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800597e:	6853      	ldr	r3, [r2, #4]
 8005980:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005984:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005986:	430b      	orrs	r3, r1
 8005988:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005990:	d006      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005992:	4a5f      	ldr	r2, [pc, #380]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005994:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005996:	f023 0320 	bic.w	r3, r3, #32
 800599a:	6a21      	ldr	r1, [r4, #32]
 800599c:	430b      	orrs	r3, r1
 800599e:	6313      	str	r3, [r2, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80059a6:	d006      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059a8:	4a59      	ldr	r2, [pc, #356]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80059aa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80059ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6313      	str	r3, [r2, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f013 0f08 	tst.w	r3, #8
 80059bc:	d006      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059be:	4a54      	ldr	r2, [pc, #336]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80059c0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80059c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80059c6:	6961      	ldr	r1, [r4, #20]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	f013 0f10 	tst.w	r3, #16
 80059d2:	d006      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80059d6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80059d8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80059dc:	69a1      	ldr	r1, [r4, #24]
 80059de:	430b      	orrs	r3, r1
 80059e0:	6313      	str	r3, [r2, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80059e8:	d006      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059ea:	4a49      	ldr	r2, [pc, #292]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80059ec:	6853      	ldr	r3, [r2, #4]
 80059ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80059f2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059fe:	d006      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a00:	4a43      	ldr	r2, [pc, #268]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a02:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005a04:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8005a08:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005a14:	d006      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a16:	4a3e      	ldr	r2, [pc, #248]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005a1a:	f423 5378 	bic.w	r3, r3, #15872	@ 0x3e00
 8005a1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a20:	430b      	orrs	r3, r1
 8005a22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8005a2a:	d006      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a2c:	4a38      	ldr	r2, [pc, #224]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a2e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a36:	430b      	orrs	r3, r1
 8005a38:	6313      	str	r3, [r2, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8005a40:	d006      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a42:	4a33      	ldr	r2, [pc, #204]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a44:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a46:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a4a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6313      	str	r3, [r2, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005a56:	d006      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005a58:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a5a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8005a6c:	d006      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005a6e:	4a28      	ldr	r2, [pc, #160]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a70:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a76:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005a82:	d006      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a84:	4a22      	ldr	r2, [pc, #136]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a86:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005a98:	d006      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005aa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8005aae:	d006      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005ab0:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005ab2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ab8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6313      	str	r3, [r2, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ac4:	d054      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005ac6:	4a12      	ldr	r2, [pc, #72]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005ac8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005aca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ace:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6313      	str	r3, [r2, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e04c      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  FlagStatus       pwrclkchanged = RESET;
 8005ad8:	2500      	movs	r5, #0
 8005ada:	e6e7      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005adc:	4a0d      	ldr	r2, [pc, #52]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005ae6:	f7fd fbff 	bl	80032e8 <HAL_GetTick>
 8005aea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aec:	4b09      	ldr	r3, [pc, #36]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005af4:	f47f aee0 	bne.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fd fbf6 	bl	80032e8 <HAL_GetTick>
 8005afc:	1b80      	subs	r0, r0, r6
 8005afe:	2864      	cmp	r0, #100	@ 0x64
 8005b00:	d9f4      	bls.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x270>
          return HAL_TIMEOUT;
 8005b02:	2003      	movs	r0, #3
 8005b04:	e035      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        tickstart = HAL_GetTick();
 8005b06:	f7fd fbef 	bl	80032e8 <HAL_GetTick>
 8005b0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0c:	e01f      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40007000 	.word	0x40007000
 8005b18:	10908100 	.word	0x10908100
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	4b15      	ldr	r3, [pc, #84]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b26:	2302      	movs	r3, #2
 8005b28:	fa93 f3a3 	rbit	r3, r3
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	2201      	movs	r2, #1
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	420b      	tst	r3, r1
 8005b3c:	f47f aee4 	bne.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fd fbd2 	bl	80032e8 <HAL_GetTick>
 8005b44:	1b80      	subs	r0, r0, r6
 8005b46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b4a:	4298      	cmp	r0, r3
 8005b4c:	d80e      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	fa93 f2a3 	rbit	r2, r3
 8005b54:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0df      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b5e:	6a19      	ldr	r1, [r3, #32]
 8005b60:	e7e1      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b62:	69d3      	ldr	r3, [r2, #28]
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b68:	61d3      	str	r3, [r2, #28]
 8005b6a:	e6d7      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8005b6c:	2003      	movs	r0, #3
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  return HAL_OK;
 8005b70:	2000      	movs	r0, #0
}
 8005b72:	b003      	add	sp, #12
 8005b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40021000 	.word	0x40021000

08005b7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005b80:	6803      	ldr	r3, [r0, #0]
 8005b82:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <HAL_RTC_WaitForSynchro+0x30>)
 8005b84:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b86:	f7fd fbaf 	bl	80032e8 <HAL_GetTick>
 8005b8a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f013 0f20 	tst.w	r3, #32
 8005b94:	d107      	bne.n	8005ba6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b96:	f7fd fba7 	bl	80032e8 <HAL_GetTick>
 8005b9a:	1b40      	subs	r0, r0, r5
 8005b9c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005ba0:	d9f4      	bls.n	8005b8c <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 8005ba2:	2003      	movs	r0, #3
 8005ba4:	e000      	b.n	8005ba8 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 8005ba6:	2000      	movs	r0, #0
}
 8005ba8:	bd38      	pop	{r3, r4, r5, pc}
 8005baa:	bf00      	nop
 8005bac:	0001ff5f 	.word	0x0001ff5f

08005bb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005bb2:	6803      	ldr	r3, [r0, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005bba:	d002      	beq.n	8005bc2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005bbc:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bca:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005bcc:	f7fd fb8c 	bl	80032e8 <HAL_GetTick>
 8005bd0:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005bdc:	d1ef      	bne.n	8005bbe <RTC_EnterInitMode+0xe>
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	d1ed      	bne.n	8005bbe <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005be2:	f7fd fb81 	bl	80032e8 <HAL_GetTick>
 8005be6:	1b83      	subs	r3, r0, r6
 8005be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bec:	d9f2      	bls.n	8005bd4 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bee:	2304      	movs	r3, #4
 8005bf0:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8005bf2:	2501      	movs	r5, #1
 8005bf4:	e7ee      	b.n	8005bd4 <RTC_EnterInitMode+0x24>

08005bf6 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005bf6:	6802      	ldr	r2, [r0, #0]
 8005bf8:	68d3      	ldr	r3, [r2, #12]
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bfe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c00:	6803      	ldr	r3, [r0, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f013 0f20 	tst.w	r3, #32
 8005c08:	d001      	beq.n	8005c0e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005c0c:	4770      	bx	lr
{
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c12:	f7ff ffb3 	bl	8005b7c <HAL_RTC_WaitForSynchro>
 8005c16:	b110      	cbz	r0, 8005c1e <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c18:	2304      	movs	r3, #4
 8005c1a:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8005c1c:	2001      	movs	r0, #1
}
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d04a      	beq.n	8005cba <HAL_RTC_Init+0x9a>
{
 8005c24:	b510      	push	{r4, lr}
 8005c26:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c28:	7f43      	ldrb	r3, [r0, #29]
 8005c2a:	b153      	cbz	r3, 8005c42 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	f012 0f10 	tst.w	r2, #16
 8005c38:	d007      	beq.n	8005c4a <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 8005c3a:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	7763      	strb	r3, [r4, #29]
}
 8005c40:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005c42:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005c44:	f7fe fac6 	bl	80041d4 <HAL_RTC_MspInit>
 8005c48:	e7f0      	b.n	8005c2c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c4a:	22ca      	movs	r2, #202	@ 0xca
 8005c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	2253      	movs	r2, #83	@ 0x53
 8005c52:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff ffab 	bl	8005bb0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8005c5a:	b128      	cbz	r0, 8005c68 <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	22ff      	movs	r2, #255	@ 0xff
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d1ec      	bne.n	8005c40 <HAL_RTC_Init+0x20>
 8005c66:	e7e9      	b.n	8005c3c <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	6893      	ldr	r3, [r2, #8]
 8005c6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c74:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c76:	6821      	ldr	r1, [r4, #0]
 8005c78:	688a      	ldr	r2, [r1, #8]
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	6920      	ldr	r0, [r4, #16]
 8005c7e:	4303      	orrs	r3, r0
 8005c80:	6960      	ldr	r0, [r4, #20]
 8005c82:	4303      	orrs	r3, r0
 8005c84:	4313      	orrs	r3, r2
 8005c86:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	68e2      	ldr	r2, [r4, #12]
 8005c8c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	6913      	ldr	r3, [r2, #16]
 8005c92:	68a1      	ldr	r1, [r4, #8]
 8005c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005c98:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff ffab 	bl	8005bf6 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d1db      	bne.n	8005c5c <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005ca8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cac:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005cb2:	69a1      	ldr	r1, [r4, #24]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cb8:	e7d0      	b.n	8005c5c <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 8005cba:	2001      	movs	r0, #1
}
 8005cbc:	4770      	bx	lr

08005cbe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbe:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc2:	6a04      	ldr	r4, [r0, #32]
 8005cc4:	f024 0401 	bic.w	r4, r4, #1
 8005cc8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cca:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd0:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005cd8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cda:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005cdc:	6203      	str	r3, [r0, #32]
}
 8005cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ce6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce8:	6a04      	ldr	r4, [r0, #32]
 8005cea:	f024 0410 	bic.w	r4, r4, #16
 8005cee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf2:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cf6:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cfe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d02:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005d04:	6203      	str	r3, [r0, #32]
}
 8005d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d0c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d12:	430b      	orrs	r3, r1
 8005d14:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d18:	6083      	str	r3, [r0, #8]
}
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005d1c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d136      	bne.n	8005d94 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d26:	2302      	movs	r3, #2
 8005d28:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d2c:	6802      	ldr	r2, [r0, #0]
 8005d2e:	68d3      	ldr	r3, [r2, #12]
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	6803      	ldr	r3, [r0, #0]
 8005d38:	4a19      	ldr	r2, [pc, #100]	@ (8005da0 <HAL_TIM_Base_Start_IT+0x84>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01c      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d42:	d019      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
 8005d44:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d015      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
 8005d4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d011      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
 8005d54:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00d      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
 8005d5c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
 8005d64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d005      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d74:	2000      	movs	r0, #0
 8005d76:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005da4 <HAL_TIM_Base_Start_IT+0x88>)
 8005d7c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	2a06      	cmp	r2, #6
 8005d80:	d00a      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x7c>
 8005d82:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005d86:	d009      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d90:	2000      	movs	r0, #0
 8005d92:	4770      	bx	lr
    return HAL_ERROR;
 8005d94:	2001      	movs	r0, #1
 8005d96:	4770      	bx	lr
  return HAL_OK;
 8005d98:	2000      	movs	r0, #0
 8005d9a:	4770      	bx	lr
 8005d9c:	2000      	movs	r0, #0
}
 8005d9e:	4770      	bx	lr
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	00010007 	.word	0x00010007

08005da8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005da8:	4770      	bx	lr

08005daa <HAL_TIM_IC_CaptureCallback>:
}
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005dac:	4770      	bx	lr

08005dae <HAL_TIM_TriggerCallback>:
}
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_IRQHandler>:
{
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005db4:	6803      	ldr	r3, [r0, #0]
 8005db6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005db8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dba:	f015 0f02 	tst.w	r5, #2
 8005dbe:	d010      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dc0:	f016 0f02 	tst.w	r6, #2
 8005dc4:	d00d      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dc6:	f06f 0202 	mvn.w	r2, #2
 8005dca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd0:	6803      	ldr	r3, [r0, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f013 0f03 	tst.w	r3, #3
 8005dd8:	d064      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	f7ff ffe6 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	2300      	movs	r3, #0
 8005de0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005de2:	f015 0f04 	tst.w	r5, #4
 8005de6:	d012      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005de8:	f016 0f04 	tst.w	r6, #4
 8005dec:	d00f      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f06f 0204 	mvn.w	r2, #4
 8005df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005df6:	2302      	movs	r3, #2
 8005df8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005e02:	d055      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff ffd0 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e0e:	f015 0f08 	tst.w	r5, #8
 8005e12:	d012      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e14:	f016 0f08 	tst.w	r6, #8
 8005e18:	d00f      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f06f 0208 	mvn.w	r2, #8
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e22:	2304      	movs	r3, #4
 8005e24:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f013 0f03 	tst.w	r3, #3
 8005e2e:	d046      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff ffba 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	2300      	movs	r3, #0
 8005e38:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e3a:	f015 0f10 	tst.w	r5, #16
 8005e3e:	d012      	beq.n	8005e66 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e40:	f016 0f10 	tst.w	r6, #16
 8005e44:	d00f      	beq.n	8005e66 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f06f 0210 	mvn.w	r2, #16
 8005e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e4e:	2308      	movs	r3, #8
 8005e50:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005e5a:	d037      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7ff ffa4 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	2300      	movs	r3, #0
 8005e64:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e66:	f015 0f01 	tst.w	r5, #1
 8005e6a:	d002      	beq.n	8005e72 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e6c:	f016 0f01 	tst.w	r6, #1
 8005e70:	d133      	bne.n	8005eda <HAL_TIM_IRQHandler+0x12a>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e72:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8005e76:	d002      	beq.n	8005e7e <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e78:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005e7c:	d135      	bne.n	8005eea <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e7e:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005e82:	d002      	beq.n	8005e8a <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e84:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005e88:	d137      	bne.n	8005efa <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e8a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8005e8e:	d002      	beq.n	8005e96 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e90:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8005e94:	d139      	bne.n	8005f0a <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e96:	f015 0f20 	tst.w	r5, #32
 8005e9a:	d002      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e9c:	f016 0f20 	tst.w	r6, #32
 8005ea0:	d13b      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x16a>
}
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea4:	f7ff ff80 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f7ff ff7f 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
 8005eae:	e796      	b.n	8005dde <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff ff79 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7ff ff78 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
 8005ebc:	e7a5      	b.n	8005e0a <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff ff72 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff ff71 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
 8005eca:	e7b4      	b.n	8005e36 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff ff6b 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff ff6a 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
 8005ed8:	e7c3      	b.n	8005e62 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f06f 0201 	mvn.w	r2, #1
 8005ee0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7fd f8da 	bl	800309c <HAL_TIM_PeriodElapsedCallback>
 8005ee8:	e7c3      	b.n	8005e72 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ef0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f999 	bl	800622a <HAL_TIMEx_BreakCallback>
 8005ef8:	e7c1      	b.n	8005e7e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 f992 	bl	800622c <HAL_TIMEx_Break2Callback>
 8005f08:	e7bf      	b.n	8005e8a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f10:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f12:	4620      	mov	r0, r4
 8005f14:	f7ff ff4b 	bl	8005dae <HAL_TIM_TriggerCallback>
 8005f18:	e7bd      	b.n	8005e96 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	f06f 0220 	mvn.w	r2, #32
 8005f20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f980 	bl	8006228 <HAL_TIMEx_CommutCallback>
}
 8005f28:	e7bb      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xf2>
	...

08005f2c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005f2c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f2e:	4a36      	ldr	r2, [pc, #216]	@ (8006008 <TIM_Base_SetConfig+0xdc>)
 8005f30:	4290      	cmp	r0, r2
 8005f32:	d012      	beq.n	8005f5a <TIM_Base_SetConfig+0x2e>
 8005f34:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005f38:	d00f      	beq.n	8005f5a <TIM_Base_SetConfig+0x2e>
 8005f3a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005f3e:	4290      	cmp	r0, r2
 8005f40:	d00b      	beq.n	8005f5a <TIM_Base_SetConfig+0x2e>
 8005f42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f46:	4290      	cmp	r0, r2
 8005f48:	d007      	beq.n	8005f5a <TIM_Base_SetConfig+0x2e>
 8005f4a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005f4e:	4290      	cmp	r0, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_Base_SetConfig+0x2e>
 8005f52:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8005f56:	4290      	cmp	r0, r2
 8005f58:	d103      	bne.n	8005f62 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f5e:	684a      	ldr	r2, [r1, #4]
 8005f60:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f62:	4a29      	ldr	r2, [pc, #164]	@ (8006008 <TIM_Base_SetConfig+0xdc>)
 8005f64:	4290      	cmp	r0, r2
 8005f66:	d01e      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f68:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005f6c:	d01b      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f6e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005f72:	4290      	cmp	r0, r2
 8005f74:	d017      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f7a:	4290      	cmp	r0, r2
 8005f7c:	d013      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f7e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005f82:	4290      	cmp	r0, r2
 8005f84:	d00f      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f86:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005f8a:	4290      	cmp	r0, r2
 8005f8c:	d00b      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f92:	4290      	cmp	r0, r2
 8005f94:	d007      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f9a:	4290      	cmp	r0, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_Base_SetConfig+0x7a>
 8005f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fa2:	4290      	cmp	r0, r2
 8005fa4:	d103      	bne.n	8005fae <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005faa:	68ca      	ldr	r2, [r1, #12]
 8005fac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb2:	694a      	ldr	r2, [r1, #20]
 8005fb4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005fb6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	688b      	ldr	r3, [r1, #8]
 8005fba:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc0:	4b11      	ldr	r3, [pc, #68]	@ (8006008 <TIM_Base_SetConfig+0xdc>)
 8005fc2:	4298      	cmp	r0, r3
 8005fc4:	d013      	beq.n	8005fee <TIM_Base_SetConfig+0xc2>
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fca:	4298      	cmp	r0, r3
 8005fcc:	d00f      	beq.n	8005fee <TIM_Base_SetConfig+0xc2>
 8005fce:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005fd2:	4298      	cmp	r0, r3
 8005fd4:	d00b      	beq.n	8005fee <TIM_Base_SetConfig+0xc2>
 8005fd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fda:	4298      	cmp	r0, r3
 8005fdc:	d007      	beq.n	8005fee <TIM_Base_SetConfig+0xc2>
 8005fde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fe2:	4298      	cmp	r0, r3
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0xc2>
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fea:	4298      	cmp	r0, r3
 8005fec:	d101      	bne.n	8005ff2 <TIM_Base_SetConfig+0xc6>
    TIMx->RCR = Structure->RepetitionCounter;
 8005fee:	690b      	ldr	r3, [r1, #16]
 8005ff0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ff6:	6903      	ldr	r3, [r0, #16]
 8005ff8:	f013 0f01 	tst.w	r3, #1
 8005ffc:	d003      	beq.n	8006006 <TIM_Base_SetConfig+0xda>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ffe:	6903      	ldr	r3, [r0, #16]
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	6103      	str	r3, [r0, #16]
}
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00

0800600c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800600c:	b360      	cbz	r0, 8006068 <HAL_TIM_Base_Init+0x5c>
{
 800600e:	b510      	push	{r4, lr}
 8006010:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006012:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006016:	b313      	cbz	r3, 800605e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	2302      	movs	r3, #2
 800601a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601e:	4621      	mov	r1, r4
 8006020:	f851 0b04 	ldr.w	r0, [r1], #4
 8006024:	f7ff ff82 	bl	8005f2c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006028:	2301      	movs	r3, #1
 800602a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006032:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006036:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800603a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800603e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006046:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800604a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800604e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006052:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006056:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800605a:	2000      	movs	r0, #0
}
 800605c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800605e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006062:	f7fe f8cd 	bl	8004200 <HAL_TIM_Base_MspInit>
 8006066:	e7d7      	b.n	8006018 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006068:	2001      	movs	r0, #1
}
 800606a:	4770      	bx	lr

0800606c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800606c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800606e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006070:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006074:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006078:	430a      	orrs	r2, r1
 800607a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607e:	6082      	str	r2, [r0, #8]
}
 8006080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006088:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d076      	beq.n	800617e <HAL_TIM_ConfigClockSource+0xf6>
{
 8006090:	b510      	push	{r4, lr}
 8006092:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006094:	2301      	movs	r3, #1
 8006096:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800609a:	2302      	movs	r3, #2
 800609c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80060a0:	6802      	ldr	r2, [r0, #0]
 80060a2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a4:	4b37      	ldr	r3, [pc, #220]	@ (8006184 <HAL_TIM_ConfigClockSource+0xfc>)
 80060a6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80060a8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80060aa:	680b      	ldr	r3, [r1, #0]
 80060ac:	2b60      	cmp	r3, #96	@ 0x60
 80060ae:	d04c      	beq.n	800614a <HAL_TIM_ConfigClockSource+0xc2>
 80060b0:	d829      	bhi.n	8006106 <HAL_TIM_ConfigClockSource+0x7e>
 80060b2:	2b40      	cmp	r3, #64	@ 0x40
 80060b4:	d054      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xd8>
 80060b6:	d90c      	bls.n	80060d2 <HAL_TIM_ConfigClockSource+0x4a>
 80060b8:	2b50      	cmp	r3, #80	@ 0x50
 80060ba:	d122      	bne.n	8006102 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060bc:	68ca      	ldr	r2, [r1, #12]
 80060be:	6849      	ldr	r1, [r1, #4]
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	f7ff fdfc 	bl	8005cbe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060c6:	2150      	movs	r1, #80	@ 0x50
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	f7ff fe1f 	bl	8005d0c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2000      	movs	r0, #0
      break;
 80060d0:	e005      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d00d      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x6a>
 80060d6:	d909      	bls.n	80060ec <HAL_TIM_ConfigClockSource+0x64>
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d00a      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80060dc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80060de:	2301      	movs	r3, #1
 80060e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80060e4:	2300      	movs	r3, #0
 80060e6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80060ea:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80060ec:	b10b      	cbz	r3, 80060f2 <HAL_TIM_ConfigClockSource+0x6a>
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d105      	bne.n	80060fe <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060f2:	4619      	mov	r1, r3
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	f7ff fe09 	bl	8005d0c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2000      	movs	r0, #0
      break;
 80060fc:	e7ef      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 80060fe:	2001      	movs	r0, #1
 8006100:	e7ed      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
 8006102:	2001      	movs	r0, #1
 8006104:	e7eb      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	d034      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0xee>
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006110:	d10c      	bne.n	800612c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8006112:	68cb      	ldr	r3, [r1, #12]
 8006114:	684a      	ldr	r2, [r1, #4]
 8006116:	6889      	ldr	r1, [r1, #8]
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	f7ff ffa7 	bl	800606c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	6893      	ldr	r3, [r2, #8]
 8006122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006126:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006128:	2000      	movs	r0, #0
      break;
 800612a:	e7d8      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800612c:	2b70      	cmp	r3, #112	@ 0x70
 800612e:	d124      	bne.n	800617a <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8006130:	68cb      	ldr	r3, [r1, #12]
 8006132:	684a      	ldr	r2, [r1, #4]
 8006134:	6889      	ldr	r1, [r1, #8]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	f7ff ff98 	bl	800606c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800613c:	6822      	ldr	r2, [r4, #0]
 800613e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006144:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2000      	movs	r0, #0
      break;
 8006148:	e7c9      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800614a:	68ca      	ldr	r2, [r1, #12]
 800614c:	6849      	ldr	r1, [r1, #4]
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	f7ff fdc8 	bl	8005ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006154:	2160      	movs	r1, #96	@ 0x60
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	f7ff fdd8 	bl	8005d0c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800615c:	2000      	movs	r0, #0
      break;
 800615e:	e7be      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006160:	68ca      	ldr	r2, [r1, #12]
 8006162:	6849      	ldr	r1, [r1, #4]
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	f7ff fdaa 	bl	8005cbe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800616a:	2140      	movs	r1, #64	@ 0x40
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	f7ff fdcd 	bl	8005d0c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2000      	movs	r0, #0
      break;
 8006174:	e7b3      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006176:	2000      	movs	r0, #0
 8006178:	e7b1      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800617a:	2001      	movs	r0, #1
 800617c:	e7af      	b.n	80060de <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800617e:	2002      	movs	r0, #2
}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	fffe0088 	.word	0xfffe0088

08006188 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006188:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800618c:	2a01      	cmp	r2, #1
 800618e:	d046      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8006190:	b430      	push	{r4, r5}
 8006192:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006194:	2201      	movs	r2, #1
 8006196:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619a:	2202      	movs	r2, #2
 800619c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a0:	6800      	ldr	r0, [r0, #0]
 80061a2:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a4:	6884      	ldr	r4, [r0, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061a6:	4d1f      	ldr	r5, [pc, #124]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80061a8:	42a8      	cmp	r0, r5
 80061aa:	d007      	beq.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80061ac:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80061b0:	42a8      	cmp	r0, r5
 80061b2:	d003      	beq.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80061b4:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80061b8:	42a8      	cmp	r0, r5
 80061ba:	d103      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061bc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061c0:	684d      	ldr	r5, [r1, #4]
 80061c2:	432a      	orrs	r2, r5
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c8:	680d      	ldr	r5, [r1, #0]
 80061ca:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061cc:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4814      	ldr	r0, [pc, #80]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80061d2:	4282      	cmp	r2, r0
 80061d4:	d016      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061d6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80061da:	d013      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061dc:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80061e0:	4282      	cmp	r2, r0
 80061e2:	d00f      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061e4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80061e8:	4282      	cmp	r2, r0
 80061ea:	d00b      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061ec:	f500 3096 	add.w	r0, r0, #76800	@ 0x12c00
 80061f0:	4282      	cmp	r2, r0
 80061f2:	d007      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061f4:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 80061f8:	4282      	cmp	r2, r0
 80061fa:	d003      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061fc:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006200:	4282      	cmp	r2, r0
 8006202:	d104      	bne.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0x86>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006204:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006208:	6889      	ldr	r1, [r1, #8]
 800620a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006214:	2000      	movs	r0, #0
 8006216:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800621a:	bc30      	pop	{r4, r5}
 800621c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800621e:	2002      	movs	r0, #2
}
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00

08006228 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006228:	4770      	bx	lr

0800622a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800622c:	4770      	bx	lr
	...

08006230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006230:	b530      	push	{r4, r5, lr}
 8006232:	b089      	sub	sp, #36	@ 0x24
 8006234:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006236:	4b1e      	ldr	r3, [pc, #120]	@ (80062b0 <HAL_InitTick+0x80>)
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800623e:	619a      	str	r2, [r3, #24]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800624a:	a902      	add	r1, sp, #8
 800624c:	a803      	add	r0, sp, #12
 800624e:	f7ff faf7 	bl	8005840 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006252:	f7ff fadf 	bl	8005814 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006256:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <HAL_InitTick+0x84>)
 8006258:	fba2 2300 	umull	r2, r3, r2, r0
 800625c:	0c9b      	lsrs	r3, r3, #18
 800625e:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006260:	4815      	ldr	r0, [pc, #84]	@ (80062b8 <HAL_InitTick+0x88>)
 8006262:	4a16      	ldr	r2, [pc, #88]	@ (80062bc <HAL_InitTick+0x8c>)
 8006264:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006266:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800626a:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800626c:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006272:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006274:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006276:	f7ff fec9 	bl	800600c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800627a:	4605      	mov	r5, r0
 800627c:	b110      	cbz	r0, 8006284 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 800627e:	4628      	mov	r0, r5
 8006280:	b009      	add	sp, #36	@ 0x24
 8006282:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006284:	480c      	ldr	r0, [pc, #48]	@ (80062b8 <HAL_InitTick+0x88>)
 8006286:	f7ff fd49 	bl	8005d1c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800628a:	4605      	mov	r5, r0
 800628c:	2800      	cmp	r0, #0
 800628e:	d1f6      	bne.n	800627e <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006290:	2019      	movs	r0, #25
 8006292:	f7fd f899 	bl	80033c8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006296:	2c0f      	cmp	r4, #15
 8006298:	d901      	bls.n	800629e <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 800629a:	2501      	movs	r5, #1
 800629c:	e7ef      	b.n	800627e <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800629e:	2200      	movs	r2, #0
 80062a0:	4621      	mov	r1, r4
 80062a2:	2019      	movs	r0, #25
 80062a4:	f7fd f880 	bl	80033a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80062a8:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <HAL_InitTick+0x90>)
 80062aa:	601c      	str	r4, [r3, #0]
 80062ac:	e7e7      	b.n	800627e <HAL_InitTick+0x4e>
 80062ae:	bf00      	nop
 80062b0:	40021000 	.word	0x40021000
 80062b4:	431bde83 	.word	0x431bde83
 80062b8:	20000624 	.word	0x20000624
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	200000cc 	.word	0x200000cc

080062c4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	e852 3f00 	ldrex	r3, [r2]
 80062ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	e842 3100 	strex	r1, r3, [r2]
 80062d2:	2900      	cmp	r1, #0
 80062d4:	d1f6      	bne.n	80062c4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	f102 0308 	add.w	r3, r2, #8
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	3208      	adds	r2, #8
 80062e6:	e842 3100 	strex	r1, r3, [r2]
 80062ea:	2900      	cmp	r1, #0
 80062ec:	d1f3      	bne.n	80062d6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ee:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d006      	beq.n	8006302 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f4:	2320      	movs	r3, #32
 80062f6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	2300      	movs	r3, #0
 80062fc:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062fe:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8006300:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006302:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	e852 3f00 	ldrex	r3, [r2]
 8006308:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	e842 3100 	strex	r1, r3, [r2]
 8006310:	2900      	cmp	r1, #0
 8006312:	d1f6      	bne.n	8006302 <UART_EndRxTransfer+0x3e>
 8006314:	e7ee      	b.n	80062f4 <UART_EndRxTransfer+0x30>

08006316 <HAL_UART_TxCpltCallback>:
}
 8006316:	4770      	bx	lr

08006318 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006318:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800631a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	e852 3f00 	ldrex	r3, [r2]
 8006320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	e842 3100 	strex	r1, r3, [r2]
 8006328:	2900      	cmp	r1, #0
 800632a:	d1f6      	bne.n	800631a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800632c:	2320      	movs	r3, #32
 800632e:	67c3      	str	r3, [r0, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	66c3      	str	r3, [r0, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006334:	f7ff ffef 	bl	8006316 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006338:	bd08      	pop	{r3, pc}

0800633a <HAL_UART_ErrorCallback>:
}
 800633a:	4770      	bx	lr

0800633c <UART_DMAAbortOnError>:
{
 800633c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800633e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006346:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 800634a:	f7ff fff6 	bl	800633a <HAL_UART_ErrorCallback>
}
 800634e:	bd08      	pop	{r3, pc}

08006350 <HAL_UARTEx_RxEventCallback>:
}
 8006350:	4770      	bx	lr
	...

08006354 <HAL_UART_IRQHandler>:
{
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006358:	6802      	ldr	r2, [r0, #0]
 800635a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800635c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800635e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8006360:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8006364:	ea13 0f0c 	tst.w	r3, ip
 8006368:	d10a      	bne.n	8006380 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800636a:	f013 0f20 	tst.w	r3, #32
 800636e:	d00d      	beq.n	800638c <HAL_UART_IRQHandler+0x38>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006370:	f011 0f20 	tst.w	r1, #32
 8006374:	d00a      	beq.n	800638c <HAL_UART_IRQHandler+0x38>
      if (huart->RxISR != NULL)
 8006376:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006378:	b30b      	cbz	r3, 80063be <HAL_UART_IRQHandler+0x6a>
        huart->RxISR(huart);
 800637a:	4620      	mov	r0, r4
 800637c:	4798      	blx	r3
      return;
 800637e:	e01e      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006380:	f010 0501 	ands.w	r5, r0, #1
 8006384:	d11c      	bne.n	80063c0 <HAL_UART_IRQHandler+0x6c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006386:	4eab      	ldr	r6, [pc, #684]	@ (8006634 <HAL_UART_IRQHandler+0x2e0>)
 8006388:	4231      	tst	r1, r6
 800638a:	d119      	bne.n	80063c0 <HAL_UART_IRQHandler+0x6c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638c:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800638e:	2d01      	cmp	r5, #1
 8006390:	f000 80a4 	beq.w	80064dc <HAL_UART_IRQHandler+0x188>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006398:	d003      	beq.n	80063a2 <HAL_UART_IRQHandler+0x4e>
 800639a:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 800639e:	f040 8136 	bne.w	800660e <HAL_UART_IRQHandler+0x2ba>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063a6:	d003      	beq.n	80063b0 <HAL_UART_IRQHandler+0x5c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80063ac:	f040 8136 	bne.w	800661c <HAL_UART_IRQHandler+0x2c8>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80063b4:	d003      	beq.n	80063be <HAL_UART_IRQHandler+0x6a>
 80063b6:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80063ba:	f040 8136 	bne.w	800662a <HAL_UART_IRQHandler+0x2d6>
}
 80063be:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063c0:	f013 0f01 	tst.w	r3, #1
 80063c4:	d009      	beq.n	80063da <HAL_UART_IRQHandler+0x86>
 80063c6:	f411 7f80 	tst.w	r1, #256	@ 0x100
 80063ca:	d006      	beq.n	80063da <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063cc:	2001      	movs	r0, #1
 80063ce:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d0:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80063d4:	4302      	orrs	r2, r0
 80063d6:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063da:	f013 0f02 	tst.w	r3, #2
 80063de:	d009      	beq.n	80063f4 <HAL_UART_IRQHandler+0xa0>
 80063e0:	b145      	cbz	r5, 80063f4 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	2002      	movs	r0, #2
 80063e6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063e8:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80063ec:	f042 0204 	orr.w	r2, r2, #4
 80063f0:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f4:	f013 0f04 	tst.w	r3, #4
 80063f8:	d009      	beq.n	800640e <HAL_UART_IRQHandler+0xba>
 80063fa:	b145      	cbz	r5, 800640e <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	2004      	movs	r0, #4
 8006400:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006402:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8006406:	f042 0202 	orr.w	r2, r2, #2
 800640a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800640e:	f013 0f08 	tst.w	r3, #8
 8006412:	d00b      	beq.n	800642c <HAL_UART_IRQHandler+0xd8>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006414:	f011 0f20 	tst.w	r1, #32
 8006418:	d100      	bne.n	800641c <HAL_UART_IRQHandler+0xc8>
 800641a:	b13d      	cbz	r5, 800642c <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	2008      	movs	r0, #8
 8006420:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006422:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8006426:	4302      	orrs	r2, r0
 8006428:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800642c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006430:	d00c      	beq.n	800644c <HAL_UART_IRQHandler+0xf8>
 8006432:	f011 6f80 	tst.w	r1, #67108864	@ 0x4000000
 8006436:	d009      	beq.n	800644c <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800643e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006440:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8006444:	f042 0220 	orr.w	r2, r2, #32
 8006448:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800644c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8006450:	2a00      	cmp	r2, #0
 8006452:	d0b4      	beq.n	80063be <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006454:	f013 0f20 	tst.w	r3, #32
 8006458:	d006      	beq.n	8006468 <HAL_UART_IRQHandler+0x114>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800645a:	f011 0f20 	tst.w	r1, #32
 800645e:	d003      	beq.n	8006468 <HAL_UART_IRQHandler+0x114>
        if (huart->RxISR != NULL)
 8006460:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006462:	b10b      	cbz	r3, 8006468 <HAL_UART_IRQHandler+0x114>
          huart->RxISR(huart);
 8006464:	4620      	mov	r0, r4
 8006466:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006468:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006474:	d102      	bne.n	800647c <HAL_UART_IRQHandler+0x128>
 8006476:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800647a:	d028      	beq.n	80064ce <HAL_UART_IRQHandler+0x17a>
        UART_EndRxTransfer(huart);
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff ff21 	bl	80062c4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800648a:	d01c      	beq.n	80064c6 <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	f102 0308 	add.w	r3, r2, #8
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	3208      	adds	r2, #8
 800649c:	e842 3100 	strex	r1, r3, [r2]
 80064a0:	2900      	cmp	r1, #0
 80064a2:	d1f3      	bne.n	800648c <HAL_UART_IRQHandler+0x138>
          if (huart->hdmarx != NULL)
 80064a4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80064a6:	b153      	cbz	r3, 80064be <HAL_UART_IRQHandler+0x16a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a8:	4a63      	ldr	r2, [pc, #396]	@ (8006638 <HAL_UART_IRQHandler+0x2e4>)
 80064aa:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ac:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80064ae:	f7fd f80c 	bl	80034ca <HAL_DMA_Abort_IT>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d083      	beq.n	80063be <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064b6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80064b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80064ba:	4798      	blx	r3
 80064bc:	e77f      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 80064be:	4620      	mov	r0, r4
 80064c0:	f7ff ff3b 	bl	800633a <HAL_UART_ErrorCallback>
 80064c4:	e77b      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
          HAL_UART_ErrorCallback(huart);
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff ff37 	bl	800633a <HAL_UART_ErrorCallback>
 80064cc:	e777      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff ff33 	bl	800633a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return;
 80064da:	e770      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064dc:	f013 0f10 	tst.w	r3, #16
 80064e0:	f43f af58 	beq.w	8006394 <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064e4:	f011 0f10 	tst.w	r1, #16
 80064e8:	f43f af54 	beq.w	8006394 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ec:	2310      	movs	r3, #16
 80064ee:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80064f8:	d04f      	beq.n	800659a <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064fa:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80064fc:	6813      	ldr	r3, [r2, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006502:	2b00      	cmp	r3, #0
 8006504:	f43f af5b 	beq.w	80063be <HAL_UART_IRQHandler+0x6a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006508:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 800650c:	4299      	cmp	r1, r3
 800650e:	f67f af56 	bls.w	80063be <HAL_UART_IRQHandler+0x6a>
        huart->RxXferCount = nb_remaining_rx_data;
 8006512:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006516:	6993      	ldr	r3, [r2, #24]
 8006518:	2b20      	cmp	r3, #32
 800651a:	d031      	beq.n	8006580 <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800651c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	e852 3f00 	ldrex	r3, [r2]
 8006522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	e842 3100 	strex	r1, r3, [r2]
 800652a:	2900      	cmp	r1, #0
 800652c:	d1f6      	bne.n	800651c <HAL_UART_IRQHandler+0x1c8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	f102 0308 	add.w	r3, r2, #8
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	3208      	adds	r2, #8
 800653e:	e842 3100 	strex	r1, r3, [r2]
 8006542:	2900      	cmp	r1, #0
 8006544:	d1f3      	bne.n	800652e <HAL_UART_IRQHandler+0x1da>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006546:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	f102 0308 	add.w	r3, r2, #8
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	3208      	adds	r2, #8
 8006556:	e842 3100 	strex	r1, r3, [r2]
 800655a:	2900      	cmp	r1, #0
 800655c:	d1f3      	bne.n	8006546 <HAL_UART_IRQHandler+0x1f2>
          huart->RxState = HAL_UART_STATE_READY;
 800655e:	2320      	movs	r3, #32
 8006560:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006564:	2300      	movs	r3, #0
 8006566:	6623      	str	r3, [r4, #96]	@ 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006568:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	e852 3f00 	ldrex	r3, [r2]
 800656e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	e842 3100 	strex	r1, r3, [r2]
 8006576:	2900      	cmp	r1, #0
 8006578:	d1f6      	bne.n	8006568 <HAL_UART_IRQHandler+0x214>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800657a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800657c:	f7fc ff80 	bl	8003480 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006580:	2302      	movs	r3, #2
 8006582:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006584:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8006588:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800658c:	b29b      	uxth	r3, r3
 800658e:	1ac9      	subs	r1, r1, r3
 8006590:	b289      	uxth	r1, r1
 8006592:	4620      	mov	r0, r4
 8006594:	f7ff fedc 	bl	8006350 <HAL_UARTEx_RxEventCallback>
      return;
 8006598:	e711      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800659a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 800659e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	1ac9      	subs	r1, r1, r3
 80065a6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80065a8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f43f af05 	beq.w	80063be <HAL_UART_IRQHandler+0x6a>
          && (nb_rx_data > 0U))
 80065b4:	2900      	cmp	r1, #0
 80065b6:	f43f af02 	beq.w	80063be <HAL_UART_IRQHandler+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	e852 3f00 	ldrex	r3, [r2]
 80065c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	e842 3000 	strex	r0, r3, [r2]
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d1f6      	bne.n	80065ba <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	f102 0308 	add.w	r3, r2, #8
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	3208      	adds	r2, #8
 80065dc:	e842 3000 	strex	r0, r3, [r2]
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d1f3      	bne.n	80065cc <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 80065e4:	2320      	movs	r3, #32
 80065e6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	2300      	movs	r3, #0
 80065ec:	6623      	str	r3, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 80065ee:	66a3      	str	r3, [r4, #104]	@ 0x68
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	e852 3f00 	ldrex	r3, [r2]
 80065f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	e842 3000 	strex	r0, r3, [r2]
 80065fe:	2800      	cmp	r0, #0
 8006600:	d1f6      	bne.n	80065f0 <HAL_UART_IRQHandler+0x29c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006602:	2302      	movs	r3, #2
 8006604:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff fea2 	bl	8006350 <HAL_UARTEx_RxEventCallback>
      return;
 800660c:	e6d7      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800660e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006612:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006614:	4620      	mov	r0, r4
 8006616:	f000 fb71 	bl	8006cfc <HAL_UARTEx_WakeupCallback>
    return;
 800661a:	e6d0      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
    if (huart->TxISR != NULL)
 800661c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800661e:	2b00      	cmp	r3, #0
 8006620:	f43f aecd 	beq.w	80063be <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 8006624:	4620      	mov	r0, r4
 8006626:	4798      	blx	r3
    return;
 8006628:	e6c9      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
    UART_EndTransmit_IT(huart);
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff fe74 	bl	8006318 <UART_EndTransmit_IT>
    return;
 8006630:	e6c5      	b.n	80063be <HAL_UART_IRQHandler+0x6a>
 8006632:	bf00      	nop
 8006634:	04000120 	.word	0x04000120
 8006638:	0800633d 	.word	0x0800633d

0800663c <UART_SetConfig>:
{
 800663c:	b510      	push	{r4, lr}
 800663e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006640:	6883      	ldr	r3, [r0, #8]
 8006642:	6902      	ldr	r2, [r0, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	6942      	ldr	r2, [r0, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	69c2      	ldr	r2, [r0, #28]
 800664c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800664e:	6801      	ldr	r1, [r0, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	4a86      	ldr	r2, [pc, #536]	@ (800686c <UART_SetConfig+0x230>)
 8006654:	4002      	ands	r2, r0
 8006656:	431a      	orrs	r2, r3
 8006658:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	6853      	ldr	r3, [r2, #4]
 800665e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006662:	68e1      	ldr	r1, [r4, #12]
 8006664:	430b      	orrs	r3, r1
 8006666:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006668:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800666a:	6a23      	ldr	r3, [r4, #32]
 800666c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800666e:	6821      	ldr	r1, [r4, #0]
 8006670:	688b      	ldr	r3, [r1, #8]
 8006672:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	4a7c      	ldr	r2, [pc, #496]	@ (8006870 <UART_SetConfig+0x234>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00d      	beq.n	800669e <UART_SetConfig+0x62>
 8006682:	4a7c      	ldr	r2, [pc, #496]	@ (8006874 <UART_SetConfig+0x238>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01c      	beq.n	80066c2 <UART_SetConfig+0x86>
 8006688:	4a7b      	ldr	r2, [pc, #492]	@ (8006878 <UART_SetConfig+0x23c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d03a      	beq.n	8006704 <UART_SetConfig+0xc8>
 800668e:	4a7b      	ldr	r2, [pc, #492]	@ (800687c <UART_SetConfig+0x240>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d04a      	beq.n	800672a <UART_SetConfig+0xee>
 8006694:	4a7a      	ldr	r2, [pc, #488]	@ (8006880 <UART_SetConfig+0x244>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d05a      	beq.n	8006750 <UART_SetConfig+0x114>
 800669a:	2310      	movs	r3, #16
 800669c:	e01f      	b.n	80066de <UART_SetConfig+0xa2>
 800669e:	4b79      	ldr	r3, [pc, #484]	@ (8006884 <UART_SetConfig+0x248>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d809      	bhi.n	80066be <UART_SetConfig+0x82>
 80066aa:	e8df f003 	tbb	[pc, r3]
 80066ae:	0402      	.short	0x0402
 80066b0:	6406      	.short	0x6406
 80066b2:	2301      	movs	r3, #1
 80066b4:	e013      	b.n	80066de <UART_SetConfig+0xa2>
 80066b6:	2304      	movs	r3, #4
 80066b8:	e011      	b.n	80066de <UART_SetConfig+0xa2>
 80066ba:	2308      	movs	r3, #8
 80066bc:	e00f      	b.n	80066de <UART_SetConfig+0xa2>
 80066be:	2310      	movs	r3, #16
 80066c0:	e00d      	b.n	80066de <UART_SetConfig+0xa2>
 80066c2:	4b70      	ldr	r3, [pc, #448]	@ (8006884 <UART_SetConfig+0x248>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ce:	d054      	beq.n	800677a <UART_SetConfig+0x13e>
 80066d0:	d813      	bhi.n	80066fa <UART_SetConfig+0xbe>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d053      	beq.n	800677e <UART_SetConfig+0x142>
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066da:	d152      	bne.n	8006782 <UART_SetConfig+0x146>
 80066dc:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066de:	69e0      	ldr	r0, [r4, #28]
 80066e0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80066e4:	d069      	beq.n	80067ba <UART_SetConfig+0x17e>
    switch (clocksource)
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	f200 80b9 	bhi.w	800685e <UART_SetConfig+0x222>
 80066ec:	e8df f003 	tbb	[pc, r3]
 80066f0:	b790a892 	.word	0xb790a892
 80066f4:	b7b7b7ab 	.word	0xb7b7b7ab
 80066f8:	ae          	.byte	0xae
 80066f9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066fe:	d142      	bne.n	8006786 <UART_SetConfig+0x14a>
 8006700:	2302      	movs	r3, #2
 8006702:	e7ec      	b.n	80066de <UART_SetConfig+0xa2>
 8006704:	4b5f      	ldr	r3, [pc, #380]	@ (8006884 <UART_SetConfig+0x248>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006708:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800670c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006710:	d03b      	beq.n	800678a <UART_SetConfig+0x14e>
 8006712:	d805      	bhi.n	8006720 <UART_SetConfig+0xe4>
 8006714:	b3db      	cbz	r3, 800678e <UART_SetConfig+0x152>
 8006716:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800671a:	d13a      	bne.n	8006792 <UART_SetConfig+0x156>
 800671c:	2304      	movs	r3, #4
 800671e:	e7de      	b.n	80066de <UART_SetConfig+0xa2>
 8006720:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006724:	d137      	bne.n	8006796 <UART_SetConfig+0x15a>
 8006726:	2302      	movs	r3, #2
 8006728:	e7d9      	b.n	80066de <UART_SetConfig+0xa2>
 800672a:	4b56      	ldr	r3, [pc, #344]	@ (8006884 <UART_SetConfig+0x248>)
 800672c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006736:	d030      	beq.n	800679a <UART_SetConfig+0x15e>
 8006738:	d805      	bhi.n	8006746 <UART_SetConfig+0x10a>
 800673a:	b383      	cbz	r3, 800679e <UART_SetConfig+0x162>
 800673c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006740:	d12f      	bne.n	80067a2 <UART_SetConfig+0x166>
 8006742:	2304      	movs	r3, #4
 8006744:	e7cb      	b.n	80066de <UART_SetConfig+0xa2>
 8006746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800674a:	d12c      	bne.n	80067a6 <UART_SetConfig+0x16a>
 800674c:	2302      	movs	r3, #2
 800674e:	e7c6      	b.n	80066de <UART_SetConfig+0xa2>
 8006750:	4b4c      	ldr	r3, [pc, #304]	@ (8006884 <UART_SetConfig+0x248>)
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006758:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800675c:	d025      	beq.n	80067aa <UART_SetConfig+0x16e>
 800675e:	d805      	bhi.n	800676c <UART_SetConfig+0x130>
 8006760:	b32b      	cbz	r3, 80067ae <UART_SetConfig+0x172>
 8006762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006766:	d124      	bne.n	80067b2 <UART_SetConfig+0x176>
 8006768:	2304      	movs	r3, #4
 800676a:	e7b8      	b.n	80066de <UART_SetConfig+0xa2>
 800676c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006770:	d121      	bne.n	80067b6 <UART_SetConfig+0x17a>
 8006772:	2302      	movs	r3, #2
 8006774:	e7b3      	b.n	80066de <UART_SetConfig+0xa2>
 8006776:	2302      	movs	r3, #2
 8006778:	e7b1      	b.n	80066de <UART_SetConfig+0xa2>
 800677a:	2308      	movs	r3, #8
 800677c:	e7af      	b.n	80066de <UART_SetConfig+0xa2>
 800677e:	2300      	movs	r3, #0
 8006780:	e7ad      	b.n	80066de <UART_SetConfig+0xa2>
 8006782:	2310      	movs	r3, #16
 8006784:	e7ab      	b.n	80066de <UART_SetConfig+0xa2>
 8006786:	2310      	movs	r3, #16
 8006788:	e7a9      	b.n	80066de <UART_SetConfig+0xa2>
 800678a:	2308      	movs	r3, #8
 800678c:	e7a7      	b.n	80066de <UART_SetConfig+0xa2>
 800678e:	2300      	movs	r3, #0
 8006790:	e7a5      	b.n	80066de <UART_SetConfig+0xa2>
 8006792:	2310      	movs	r3, #16
 8006794:	e7a3      	b.n	80066de <UART_SetConfig+0xa2>
 8006796:	2310      	movs	r3, #16
 8006798:	e7a1      	b.n	80066de <UART_SetConfig+0xa2>
 800679a:	2308      	movs	r3, #8
 800679c:	e79f      	b.n	80066de <UART_SetConfig+0xa2>
 800679e:	2300      	movs	r3, #0
 80067a0:	e79d      	b.n	80066de <UART_SetConfig+0xa2>
 80067a2:	2310      	movs	r3, #16
 80067a4:	e79b      	b.n	80066de <UART_SetConfig+0xa2>
 80067a6:	2310      	movs	r3, #16
 80067a8:	e799      	b.n	80066de <UART_SetConfig+0xa2>
 80067aa:	2308      	movs	r3, #8
 80067ac:	e797      	b.n	80066de <UART_SetConfig+0xa2>
 80067ae:	2300      	movs	r3, #0
 80067b0:	e795      	b.n	80066de <UART_SetConfig+0xa2>
 80067b2:	2310      	movs	r3, #16
 80067b4:	e793      	b.n	80066de <UART_SetConfig+0xa2>
 80067b6:	2310      	movs	r3, #16
 80067b8:	e791      	b.n	80066de <UART_SetConfig+0xa2>
    switch (clocksource)
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d849      	bhi.n	8006852 <UART_SetConfig+0x216>
 80067be:	e8df f003 	tbb	[pc, r3]
 80067c2:	1f05      	.short	0x1f05
 80067c4:	48224825 	.word	0x48224825
 80067c8:	4848      	.short	0x4848
 80067ca:	09          	.byte	0x09
 80067cb:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80067cc:	f7ff f80c 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d040      	beq.n	8006856 <UART_SetConfig+0x21a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067d4:	6862      	ldr	r2, [r4, #4]
 80067d6:	0853      	lsrs	r3, r2, #1
 80067d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80067dc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	f1a3 0110 	sub.w	r1, r3, #16
 80067e4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80067e8:	4291      	cmp	r1, r2
 80067ea:	d836      	bhi.n	800685a <UART_SetConfig+0x21e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80067f6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	60d3      	str	r3, [r2, #12]
 80067fc:	2000      	movs	r0, #0
 80067fe:	e01b      	b.n	8006838 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006800:	f7ff f808 	bl	8005814 <HAL_RCC_GetPCLK2Freq>
        break;
 8006804:	e7e4      	b.n	80067d0 <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fe feeb 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
        break;
 800680a:	e7e1      	b.n	80067d0 <UART_SetConfig+0x194>
        pclk = (uint32_t) HSI_VALUE;
 800680c:	481e      	ldr	r0, [pc, #120]	@ (8006888 <UART_SetConfig+0x24c>)
 800680e:	e7e1      	b.n	80067d4 <UART_SetConfig+0x198>
    switch (clocksource)
 8006810:	481d      	ldr	r0, [pc, #116]	@ (8006888 <UART_SetConfig+0x24c>)
 8006812:	e002      	b.n	800681a <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fe ffe8 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006818:	b318      	cbz	r0, 8006862 <UART_SetConfig+0x226>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006820:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006824:	f1a0 0210 	sub.w	r2, r0, #16
 8006828:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800682c:	429a      	cmp	r2, r3
 800682e:	d81a      	bhi.n	8006866 <UART_SetConfig+0x22a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	b280      	uxth	r0, r0
 8006834:	60d8      	str	r0, [r3, #12]
 8006836:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800683c:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800683e:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7fe ffe8 	bl	8005814 <HAL_RCC_GetPCLK2Freq>
        break;
 8006844:	e7e8      	b.n	8006818 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fe fecb 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
        break;
 800684a:	e7e5      	b.n	8006818 <UART_SetConfig+0x1dc>
        pclk = (uint32_t) LSE_VALUE;
 800684c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006850:	e7e3      	b.n	800681a <UART_SetConfig+0x1de>
    switch (clocksource)
 8006852:	2001      	movs	r0, #1
 8006854:	e7f0      	b.n	8006838 <UART_SetConfig+0x1fc>
 8006856:	2000      	movs	r0, #0
 8006858:	e7ee      	b.n	8006838 <UART_SetConfig+0x1fc>
        ret = HAL_ERROR;
 800685a:	2001      	movs	r0, #1
 800685c:	e7ec      	b.n	8006838 <UART_SetConfig+0x1fc>
    switch (clocksource)
 800685e:	2001      	movs	r0, #1
 8006860:	e7ea      	b.n	8006838 <UART_SetConfig+0x1fc>
 8006862:	2000      	movs	r0, #0
 8006864:	e7e8      	b.n	8006838 <UART_SetConfig+0x1fc>
        ret = HAL_ERROR;
 8006866:	2001      	movs	r0, #1
 8006868:	e7e6      	b.n	8006838 <UART_SetConfig+0x1fc>
 800686a:	bf00      	nop
 800686c:	efff69f3 	.word	0xefff69f3
 8006870:	40013800 	.word	0x40013800
 8006874:	40004400 	.word	0x40004400
 8006878:	40004800 	.word	0x40004800
 800687c:	40004c00 	.word	0x40004c00
 8006880:	40005000 	.word	0x40005000
 8006884:	40021000 	.word	0x40021000
 8006888:	007a1200 	.word	0x007a1200

0800688c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800688e:	f013 0f08 	tst.w	r3, #8
 8006892:	d006      	beq.n	80068a2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006894:	6802      	ldr	r2, [r0, #0]
 8006896:	6853      	ldr	r3, [r2, #4]
 8006898:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800689c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800689e:	430b      	orrs	r3, r1
 80068a0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068a4:	f013 0f01 	tst.w	r3, #1
 80068a8:	d006      	beq.n	80068b8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068aa:	6802      	ldr	r2, [r0, #0]
 80068ac:	6853      	ldr	r3, [r2, #4]
 80068ae:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068b2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068ba:	f013 0f02 	tst.w	r3, #2
 80068be:	d006      	beq.n	80068ce <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c0:	6802      	ldr	r2, [r0, #0]
 80068c2:	6853      	ldr	r3, [r2, #4]
 80068c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068d0:	f013 0f04 	tst.w	r3, #4
 80068d4:	d006      	beq.n	80068e4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d6:	6802      	ldr	r2, [r0, #0]
 80068d8:	6853      	ldr	r3, [r2, #4]
 80068da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068de:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068e6:	f013 0f10 	tst.w	r3, #16
 80068ea:	d006      	beq.n	80068fa <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068ec:	6802      	ldr	r2, [r0, #0]
 80068ee:	6893      	ldr	r3, [r2, #8]
 80068f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068f4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80068f6:	430b      	orrs	r3, r1
 80068f8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068fc:	f013 0f20 	tst.w	r3, #32
 8006900:	d006      	beq.n	8006910 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006902:	6802      	ldr	r2, [r0, #0]
 8006904:	6893      	ldr	r3, [r2, #8]
 8006906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800690a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800690c:	430b      	orrs	r3, r1
 800690e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006910:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006912:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006918:	6802      	ldr	r2, [r0, #0]
 800691a:	6853      	ldr	r3, [r2, #4]
 800691c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006920:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006922:	430b      	orrs	r3, r1
 8006924:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006926:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692c:	d00b      	beq.n	8006946 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800692e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006930:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006934:	d006      	beq.n	8006944 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006936:	6802      	ldr	r2, [r0, #0]
 8006938:	6853      	ldr	r3, [r2, #4]
 800693a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800693e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006940:	430b      	orrs	r3, r1
 8006942:	6053      	str	r3, [r2, #4]
}
 8006944:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006946:	6802      	ldr	r2, [r0, #0]
 8006948:	6853      	ldr	r3, [r2, #4]
 800694a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800694e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006950:	430b      	orrs	r3, r1
 8006952:	6053      	str	r3, [r2, #4]
 8006954:	e7eb      	b.n	800692e <UART_AdvFeatureConfig+0xa2>

08006956 <UART_WaitOnFlagUntilTimeout>:
{
 8006956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800695a:	4605      	mov	r5, r0
 800695c:	460e      	mov	r6, r1
 800695e:	4617      	mov	r7, r2
 8006960:	4699      	mov	r9, r3
 8006962:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	69dc      	ldr	r4, [r3, #28]
 800696a:	ea36 0404 	bics.w	r4, r6, r4
 800696e:	bf0c      	ite	eq
 8006970:	2401      	moveq	r4, #1
 8006972:	2400      	movne	r4, #0
 8006974:	42bc      	cmp	r4, r7
 8006976:	d136      	bne.n	80069e6 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8006978:	f1b8 3fff 	cmp.w	r8, #4294967295
 800697c:	d0f3      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fc fcb3 	bl	80032e8 <HAL_GetTick>
 8006982:	eba0 0009 	sub.w	r0, r0, r9
 8006986:	4540      	cmp	r0, r8
 8006988:	d830      	bhi.n	80069ec <UART_WaitOnFlagUntilTimeout+0x96>
 800698a:	f1b8 0f00 	cmp.w	r8, #0
 800698e:	d02f      	beq.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	f012 0f04 	tst.w	r2, #4
 8006998:	d0e5      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x10>
 800699a:	2e80      	cmp	r6, #128	@ 0x80
 800699c:	d0e3      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x10>
 800699e:	2e40      	cmp	r6, #64	@ 0x40
 80069a0:	d0e1      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	f012 0f08 	tst.w	r2, #8
 80069a8:	d111      	bne.n	80069ce <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80069b0:	d0d9      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069b6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80069b8:	4628      	mov	r0, r5
 80069ba:	f7ff fc83 	bl	80062c4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069be:	2320      	movs	r3, #32
 80069c0:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80069c4:	2300      	movs	r3, #0
 80069c6:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 80069ca:	2003      	movs	r0, #3
 80069cc:	e00c      	b.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069ce:	2408      	movs	r4, #8
 80069d0:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7ff fc76 	bl	80062c4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069d8:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80069dc:	2300      	movs	r3, #0
 80069de:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 80069e2:	2001      	movs	r0, #1
 80069e4:	e000      	b.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 80069e6:	2000      	movs	r0, #0
}
 80069e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80069ec:	2003      	movs	r0, #3
 80069ee:	e7fb      	b.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x92>
 80069f0:	2003      	movs	r0, #3
 80069f2:	e7f9      	b.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x92>

080069f4 <HAL_UART_Transmit>:
{
 80069f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80069fc:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d156      	bne.n	8006ab0 <HAL_UART_Transmit+0xbc>
 8006a02:	4604      	mov	r4, r0
 8006a04:	460d      	mov	r5, r1
 8006a06:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	d055      	beq.n	8006ab8 <HAL_UART_Transmit+0xc4>
 8006a0c:	b90a      	cbnz	r2, 8006a12 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8006a0e:	2001      	movs	r0, #1
 8006a10:	e04f      	b.n	8006ab2 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a18:	2321      	movs	r3, #33	@ 0x21
 8006a1a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8006a1c:	f7fc fc64 	bl	80032e8 <HAL_GetTick>
 8006a20:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006a22:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006a26:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a30:	d002      	beq.n	8006a38 <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 8006a32:	f04f 0800 	mov.w	r8, #0
 8006a36:	e018      	b.n	8006a6a <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b113      	cbz	r3, 8006a42 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8006a3c:	f04f 0800 	mov.w	r8, #0
 8006a40:	e013      	b.n	8006a6a <HAL_UART_Transmit+0x76>
      pdata16bits = (const uint16_t *) pData;
 8006a42:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006a44:	2500      	movs	r5, #0
 8006a46:	e010      	b.n	8006a6a <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006a48:	2320      	movs	r3, #32
 8006a4a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006a4c:	2003      	movs	r0, #3
 8006a4e:	e030      	b.n	8006ab2 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a50:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006a5c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8006a60:	b292      	uxth	r2, r2
 8006a62:	3a01      	subs	r2, #1
 8006a64:	b292      	uxth	r2, r2
 8006a66:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a6a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	b17b      	cbz	r3, 8006a92 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a72:	9600      	str	r6, [sp, #0]
 8006a74:	463b      	mov	r3, r7
 8006a76:	2200      	movs	r2, #0
 8006a78:	2180      	movs	r1, #128	@ 0x80
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff ff6b 	bl	8006956 <UART_WaitOnFlagUntilTimeout>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d1e1      	bne.n	8006a48 <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	d0e3      	beq.n	8006a50 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a88:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a90:	e7e4      	b.n	8006a5c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a92:	9600      	str	r6, [sp, #0]
 8006a94:	463b      	mov	r3, r7
 8006a96:	2200      	movs	r2, #0
 8006a98:	2140      	movs	r1, #64	@ 0x40
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff ff5b 	bl	8006956 <UART_WaitOnFlagUntilTimeout>
 8006aa0:	b910      	cbnz	r0, 8006aa8 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8006aa2:	2320      	movs	r3, #32
 8006aa4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006aa6:	e004      	b.n	8006ab2 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006aac:	2003      	movs	r0, #3
 8006aae:	e000      	b.n	8006ab2 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8006ab0:	2002      	movs	r0, #2
}
 8006ab2:	b002      	add	sp, #8
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006ab8:	2001      	movs	r0, #1
 8006aba:	e7fa      	b.n	8006ab2 <HAL_UART_Transmit+0xbe>

08006abc <HAL_UART_Receive>:
{
 8006abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ac4:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d17d      	bne.n	8006bc8 <HAL_UART_Receive+0x10c>
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006ad2:	2900      	cmp	r1, #0
 8006ad4:	d07c      	beq.n	8006bd0 <HAL_UART_Receive+0x114>
 8006ad6:	b90a      	cbnz	r2, 8006adc <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 8006ad8:	2001      	movs	r0, #1
 8006ada:	e076      	b.n	8006bca <HAL_UART_Receive+0x10e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ae2:	2222      	movs	r2, #34	@ 0x22
 8006ae4:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae8:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8006aea:	f7fc fbfd 	bl	80032e8 <HAL_GetTick>
 8006aee:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8006af0:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006af4:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006af8:	68a3      	ldr	r3, [r4, #8]
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afe:	d006      	beq.n	8006b0e <HAL_UART_Receive+0x52>
 8006b00:	b9a3      	cbnz	r3, 8006b2c <HAL_UART_Receive+0x70>
 8006b02:	6922      	ldr	r2, [r4, #16]
 8006b04:	b972      	cbnz	r2, 8006b24 <HAL_UART_Receive+0x68>
 8006b06:	22ff      	movs	r2, #255	@ 0xff
 8006b08:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8006b0c:	e014      	b.n	8006b38 <HAL_UART_Receive+0x7c>
 8006b0e:	6922      	ldr	r2, [r4, #16]
 8006b10:	b922      	cbnz	r2, 8006b1c <HAL_UART_Receive+0x60>
 8006b12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b16:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8006b1a:	e00d      	b.n	8006b38 <HAL_UART_Receive+0x7c>
 8006b1c:	22ff      	movs	r2, #255	@ 0xff
 8006b1e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8006b22:	e009      	b.n	8006b38 <HAL_UART_Receive+0x7c>
 8006b24:	227f      	movs	r2, #127	@ 0x7f
 8006b26:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8006b2a:	e005      	b.n	8006b38 <HAL_UART_Receive+0x7c>
 8006b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b30:	d00a      	beq.n	8006b48 <HAL_UART_Receive+0x8c>
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006b38:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b40:	d00c      	beq.n	8006b5c <HAL_UART_Receive+0xa0>
      pdata16bits = NULL;
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	e023      	b.n	8006b90 <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	b91a      	cbnz	r2, 8006b54 <HAL_UART_Receive+0x98>
 8006b4c:	227f      	movs	r2, #127	@ 0x7f
 8006b4e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8006b52:	e7f1      	b.n	8006b38 <HAL_UART_Receive+0x7c>
 8006b54:	223f      	movs	r2, #63	@ 0x3f
 8006b56:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8006b5a:	e7ed      	b.n	8006b38 <HAL_UART_Receive+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	b113      	cbz	r3, 8006b66 <HAL_UART_Receive+0xaa>
      pdata16bits = NULL;
 8006b60:	f04f 0900 	mov.w	r9, #0
 8006b64:	e014      	b.n	8006b90 <HAL_UART_Receive+0xd4>
      pdata16bits = (uint16_t *) pData;
 8006b66:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8006b68:	2500      	movs	r5, #0
 8006b6a:	e011      	b.n	8006b90 <HAL_UART_Receive+0xd4>
        huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006b72:	2003      	movs	r0, #3
 8006b74:	e029      	b.n	8006bca <HAL_UART_Receive+0x10e>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b7a:	ea08 0303 	and.w	r3, r8, r3
 8006b7e:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8006b82:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8006b86:	b292      	uxth	r2, r2
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	b292      	uxth	r2, r2
 8006b8c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006b90:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	b193      	cbz	r3, 8006bbe <HAL_UART_Receive+0x102>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b98:	9600      	str	r6, [sp, #0]
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2120      	movs	r1, #32
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7ff fed8 	bl	8006956 <UART_WaitOnFlagUntilTimeout>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1e0      	bne.n	8006b6c <HAL_UART_Receive+0xb0>
      if (pdata8bits == NULL)
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	d0e3      	beq.n	8006b76 <HAL_UART_Receive+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006bb2:	fa5f f388 	uxtb.w	r3, r8
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8006bbc:	e7e1      	b.n	8006b82 <HAL_UART_Receive+0xc6>
    huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	2320      	movs	r3, #32
 8006bc0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e000      	b.n	8006bca <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 8006bc8:	2002      	movs	r0, #2
}
 8006bca:	b003      	add	sp, #12
 8006bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	e7fa      	b.n	8006bca <HAL_UART_Receive+0x10e>

08006bd4 <UART_CheckIdleState>:
{
 8006bd4:	b530      	push	{r4, r5, lr}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006be0:	f7fc fb82 	bl	80032e8 <HAL_GetTick>
 8006be4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	f012 0f08 	tst.w	r2, #8
 8006bee:	d10f      	bne.n	8006c10 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f013 0f04 	tst.w	r3, #4
 8006bf8:	d126      	bne.n	8006c48 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	2000      	movs	r0, #0
 8006c04:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c06:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8006c08:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4603      	mov	r3, r0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7ff fe99 	bl	8006956 <UART_WaitOnFlagUntilTimeout>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d0e3      	beq.n	8006bf0 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c28:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	e852 3f00 	ldrex	r3, [r2]
 8006c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	e842 3100 	strex	r1, r3, [r2]
 8006c36:	2900      	cmp	r1, #0
 8006c38:	d1f6      	bne.n	8006c28 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8006c3a:	2320      	movs	r3, #32
 8006c3c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8006c44:	2003      	movs	r0, #3
 8006c46:	e7e1      	b.n	8006c0c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	462b      	mov	r3, r5
 8006c50:	2200      	movs	r2, #0
 8006c52:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7ff fe7d 	bl	8006956 <UART_WaitOnFlagUntilTimeout>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0cc      	beq.n	8006bfa <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	e852 3f00 	ldrex	r3, [r2]
 8006c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	e842 3100 	strex	r1, r3, [r2]
 8006c6e:	2900      	cmp	r1, #0
 8006c70:	d1f6      	bne.n	8006c60 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	f102 0308 	add.w	r3, r2, #8
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	3208      	adds	r2, #8
 8006c82:	e842 3100 	strex	r1, r3, [r2]
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d1f3      	bne.n	8006c72 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	2320      	movs	r3, #32
 8006c8c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 8006c90:	2300      	movs	r3, #0
 8006c92:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8006c96:	2003      	movs	r0, #3
 8006c98:	e7b8      	b.n	8006c0c <UART_CheckIdleState+0x38>

08006c9a <HAL_UART_Init>:
  if (huart == NULL)
 8006c9a:	b368      	cbz	r0, 8006cf8 <HAL_UART_Init+0x5e>
{
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006ca2:	b303      	cbz	r3, 8006ce6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	2324      	movs	r3, #36	@ 0x24
 8006ca6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006cb4:	b9e3      	cbnz	r3, 8006cf0 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff fcc0 	bl	800663c <UART_SetConfig>
 8006cbc:	2801      	cmp	r0, #1
 8006cbe:	d011      	beq.n	8006ce4 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc0:	6822      	ldr	r2, [r4, #0]
 8006cc2:	6853      	ldr	r3, [r2, #4]
 8006cc4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006cc8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	6893      	ldr	r3, [r2, #8]
 8006cce:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006cd2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	6813      	ldr	r3, [r2, #0]
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff ff78 	bl	8006bd4 <UART_CheckIdleState>
}
 8006ce4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006ce6:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8006cea:	f7fd faa7 	bl	800423c <HAL_UART_MspInit>
 8006cee:	e7d9      	b.n	8006ca4 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7ff fdcb 	bl	800688c <UART_AdvFeatureConfig>
 8006cf6:	e7de      	b.n	8006cb6 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8006cf8:	2001      	movs	r0, #1
}
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cfc:	4770      	bx	lr
	...

08006d00 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006d00:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006d04:	4905      	ldr	r1, [pc, #20]	@ (8006d1c <__NVIC_SystemReset+0x1c>)
 8006d06:	68ca      	ldr	r2, [r1, #12]
 8006d08:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006d0c:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <__NVIC_SystemReset+0x20>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60cb      	str	r3, [r1, #12]
 8006d12:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006d16:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006d18:	e7fd      	b.n	8006d16 <__NVIC_SystemReset+0x16>
 8006d1a:	bf00      	nop
 8006d1c:	e000ed00 	.word	0xe000ed00
 8006d20:	05fa0004 	.word	0x05fa0004

08006d24 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d24:	e7fe      	b.n	8006d24 <NMI_Handler>
	...

08006d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,0);
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4804      	ldr	r0, [pc, #16]	@ (8006d40 <HardFault_Handler+0x18>)
 8006d30:	f7fc fdce 	bl	80038d0 <HAL_GPIO_WritePin>
  GPIOA->ODR = 0;
 8006d34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d38:	2200      	movs	r2, #0
 8006d3a:	615a      	str	r2, [r3, #20]
  NVIC_SystemReset();
 8006d3c:	f7ff ffe0 	bl	8006d00 <__NVIC_SystemReset>
 8006d40:	48000400 	.word	0x48000400

08006d44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d44:	e7fe      	b.n	8006d44 <MemManage_Handler>

08006d46 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d46:	e7fe      	b.n	8006d46 <BusFault_Handler>

08006d48 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d48:	e7fe      	b.n	8006d48 <UsageFault_Handler>

08006d4a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d4a:	4770      	bx	lr

08006d4c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d4c:	4770      	bx	lr

08006d4e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d4e:	4770      	bx	lr

08006d50 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d50:	4770      	bx	lr
	...

08006d54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006d54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006d56:	4802      	ldr	r0, [pc, #8]	@ (8006d60 <DMA1_Channel3_IRQHandler+0xc>)
 8006d58:	f7fc fbdc 	bl	8003514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006d5c:	bd08      	pop	{r3, pc}
 8006d5e:	bf00      	nop
 8006d60:	200004e8 	.word	0x200004e8

08006d64 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8006d64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006d66:	4802      	ldr	r0, [pc, #8]	@ (8006d70 <USB_LP_CAN_RX0_IRQHandler+0xc>)
 8006d68:	f7fe f87e 	bl	8004e68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8006d6c:	bd08      	pop	{r3, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000214 	.word	0x20000214

08006d74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006d74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006d76:	4802      	ldr	r0, [pc, #8]	@ (8006d80 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8006d78:	f7ff f81a 	bl	8005db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006d7c:	bd08      	pop	{r3, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000624 	.word	0x20000624

08006d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006d84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  clearToSend = 1;
 8006d86:	4c09      	ldr	r4, [pc, #36]	@ (8006dac <TIM2_IRQHandler+0x28>)
 8006d88:	2101      	movs	r1, #1
 8006d8a:	7021      	strb	r1, [r4, #0]
    if (clearToSend == 1){
      counter++;
 8006d8c:	4a08      	ldr	r2, [pc, #32]	@ (8006db0 <TIM2_IRQHandler+0x2c>)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	440b      	add	r3, r1
 8006d92:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 8006d94:	4807      	ldr	r0, [pc, #28]	@ (8006db4 <TIM2_IRQHandler+0x30>)
 8006d96:	f7fc fda0 	bl	80038da <HAL_GPIO_TogglePin>
      sendToSimulink();
 8006d9a:	f7f9 fa9b 	bl	80002d4 <sendToSimulink>
      clearToSend = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	7023      	strb	r3, [r4, #0]
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006da2:	4805      	ldr	r0, [pc, #20]	@ (8006db8 <TIM2_IRQHandler+0x34>)
 8006da4:	f7ff f804 	bl	8005db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006da8:	bd10      	pop	{r4, pc}
 8006daa:	bf00      	nop
 8006dac:	200001f5 	.word	0x200001f5
 8006db0:	200001f0 	.word	0x200001f0
 8006db4:	48000400 	.word	0x48000400
 8006db8:	200005b4 	.word	0x200005b4

08006dbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8006dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006dbe:	4802      	ldr	r0, [pc, #8]	@ (8006dc8 <USART3_IRQHandler+0xc>)
 8006dc0:	f7ff fac8 	bl	8006354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006dc4:	bd08      	pop	{r3, pc}
 8006dc6:	bf00      	nop
 8006dc8:	2000052c 	.word	0x2000052c

08006dcc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006dcc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8006dd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006dd4:	045b      	lsls	r3, r3, #17
 8006dd6:	0c5b      	lsrs	r3, r3, #17
 8006dd8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8006ddc:	2000      	movs	r0, #0
 8006dde:	4770      	bx	lr

08006de0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006de0:	b082      	sub	sp, #8
 8006de2:	4603      	mov	r3, r0
 8006de4:	a802      	add	r0, sp, #8
 8006de6:	e900 0006 	stmdb	r0, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006df0:	2000      	movs	r0, #0
 8006df2:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006df6:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006dfa:	f8a3 0050 	strh.w	r0, [r3, #80]	@ 0x50

  return HAL_OK;
}
 8006dfe:	b002      	add	sp, #8
 8006e00:	4770      	bx	lr

08006e02 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006e02:	b911      	cbnz	r1, 8006e0a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e04:	2380      	movs	r3, #128	@ 0x80
 8006e06:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	4770      	bx	lr

08006e0e <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e0e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8006e12:	b280      	uxth	r0, r0
 8006e14:	4770      	bx	lr

08006e16 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e16:	3301      	adds	r3, #1
 8006e18:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e1a:	4402      	add	r2, r0
 8006e1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 8006e20:	e008      	b.n	8006e34 <USB_WritePMA+0x1e>
  {
    WrVal = pBuf[0];
 8006e22:	7808      	ldrb	r0, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006e24:	f891 c001 	ldrb.w	ip, [r1, #1]
 8006e28:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8006e2c:	f822 0b02 	strh.w	r0, [r2], #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8006e30:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8006e32:	3b01      	subs	r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1f4      	bne.n	8006e22 <USB_WritePMA+0xc>
  }
}
 8006e38:	4770      	bx	lr

08006e3a <USB_EPStartXfer>:
{
 8006e3a:	b570      	push	{r4, r5, r6, lr}
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006e40:	784a      	ldrb	r2, [r1, #1]
 8006e42:	2a01      	cmp	r2, #1
 8006e44:	d035      	beq.n	8006eb2 <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 8006e46:	7b0b      	ldrb	r3, [r1, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 82a8 	bne.w	800739e <USB_EPStartXfer+0x564>
      if (ep->xfer_len > ep->maxpacket)
 8006e4e:	698b      	ldr	r3, [r1, #24]
 8006e50:	690a      	ldr	r2, [r1, #16]
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f240 827f 	bls.w	8007356 <USB_EPStartXfer+0x51c>
        ep->xfer_len -= len;
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e5c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006e60:	fa15 f383 	uxtah	r3, r5, r3
 8006e64:	7821      	ldrb	r1, [r4, #0]
 8006e66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006e6a:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 8006e6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006e72:	f8a3 1406 	strh.w	r1, [r3, #1030]	@ 0x406
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	f040 8271 	bne.w	800735e <USB_EPStartXfer+0x524>
 8006e7c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8006e80:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006e84:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e8e:	7822      	ldrb	r2, [r4, #0]
 8006e90:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8006ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eaa:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006eae:	2000      	movs	r0, #0
}
 8006eb0:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006eb2:	698e      	ldr	r6, [r1, #24]
 8006eb4:	6909      	ldr	r1, [r1, #16]
 8006eb6:	428e      	cmp	r6, r1
 8006eb8:	d900      	bls.n	8006ebc <USB_EPStartXfer+0x82>
      len = ep->maxpacket;
 8006eba:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8006ebc:	7b23      	ldrb	r3, [r4, #12]
 8006ebe:	b343      	cbz	r3, 8006f12 <USB_EPStartXfer+0xd8>
      if (ep->type == EP_TYPE_BULK)
 8006ec0:	78e3      	ldrb	r3, [r4, #3]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d047      	beq.n	8006f56 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8006ec6:	6a23      	ldr	r3, [r4, #32]
 8006ec8:	1b9b      	subs	r3, r3, r6
 8006eca:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ecc:	7823      	ldrb	r3, [r4, #0]
 8006ece:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8006ed2:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8006ed6:	f000 81f6 	beq.w	80072c6 <USB_EPStartXfer+0x48c>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	f040 81e3 	bne.w	80072a6 <USB_EPStartXfer+0x46c>
 8006ee0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8006ee4:	fa15 f282 	uxtah	r2, r5, r2
 8006ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8006ef0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006ef4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	f040 81b4 	bne.w	8007266 <USB_EPStartXfer+0x42c>
 8006efe:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8006f02:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006f06:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8006f10:	e1d2      	b.n	80072b8 <USB_EPStartXfer+0x47e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f12:	b2b6      	uxth	r6, r6
 8006f14:	4633      	mov	r3, r6
 8006f16:	88e2      	ldrh	r2, [r4, #6]
 8006f18:	6961      	ldr	r1, [r4, #20]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f7ff ff7b 	bl	8006e16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f20:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006f24:	fa15 f383 	uxtah	r3, r5, r3
 8006f28:	7822      	ldrb	r2, [r4, #0]
 8006f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f2e:	f8a3 6402 	strh.w	r6, [r3, #1026]	@ 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f32:	7822      	ldrb	r2, [r4, #0]
 8006f34:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f42:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8006f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f4e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006f52:	2000      	movs	r0, #0
 8006f54:	e7ac      	b.n	8006eb0 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 8006f56:	6a23      	ldr	r3, [r4, #32]
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	f080 8166 	bcs.w	800722a <USB_EPStartXfer+0x3f0>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f5e:	7822      	ldrb	r2, [r4, #0]
 8006f60:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f76:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8006f7a:	6a23      	ldr	r3, [r4, #32]
 8006f7c:	1b9b      	subs	r3, r3, r6
 8006f7e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f80:	7823      	ldrb	r3, [r4, #0]
 8006f82:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8006f86:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8006f8a:	f000 80a7 	beq.w	80070dc <USB_EPStartXfer+0x2a2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f8e:	7862      	ldrb	r2, [r4, #1]
 8006f90:	bbb2      	cbnz	r2, 8007000 <USB_EPStartXfer+0x1c6>
 8006f92:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8006f96:	fa15 f282 	uxtah	r2, r5, r2
 8006f9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f9e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8006fa2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006fa6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8006faa:	b94e      	cbnz	r6, 8006fc0 <USB_EPStartXfer+0x186>
 8006fac:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8006fb0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006fb4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8006fbe:	e021      	b.n	8007004 <USB_EPStartXfer+0x1ca>
 8006fc0:	2e3e      	cmp	r6, #62	@ 0x3e
 8006fc2:	d80d      	bhi.n	8006fe0 <USB_EPStartXfer+0x1a6>
 8006fc4:	0872      	lsrs	r2, r6, #1
 8006fc6:	f016 0f01 	tst.w	r6, #1
 8006fca:	d000      	beq.n	8006fce <USB_EPStartXfer+0x194>
 8006fcc:	3201      	adds	r2, #1
 8006fce:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 8006fd2:	b289      	uxth	r1, r1
 8006fd4:	0292      	lsls	r2, r2, #10
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8006fde:	e011      	b.n	8007004 <USB_EPStartXfer+0x1ca>
 8006fe0:	0971      	lsrs	r1, r6, #5
 8006fe2:	f016 0f1f 	tst.w	r6, #31
 8006fe6:	d100      	bne.n	8006fea <USB_EPStartXfer+0x1b0>
 8006fe8:	3901      	subs	r1, #1
 8006fea:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	0289      	lsls	r1, r1, #10
 8006ff2:	b289      	uxth	r1, r1
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ffa:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8006ffe:	e001      	b.n	8007004 <USB_EPStartXfer+0x1ca>
 8007000:	2a01      	cmp	r2, #1
 8007002:	d029      	beq.n	8007058 <USB_EPStartXfer+0x21e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007004:	b2b3      	uxth	r3, r6
 8007006:	8962      	ldrh	r2, [r4, #10]
 8007008:	6961      	ldr	r1, [r4, #20]
 800700a:	4628      	mov	r0, r5
 800700c:	f7ff ff03 	bl	8006e16 <USB_WritePMA>
            ep->xfer_buff += len;
 8007010:	6963      	ldr	r3, [r4, #20]
 8007012:	4433      	add	r3, r6
 8007014:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007016:	6a23      	ldr	r3, [r4, #32]
 8007018:	6922      	ldr	r2, [r4, #16]
 800701a:	4293      	cmp	r3, r2
 800701c:	d926      	bls.n	800706c <USB_EPStartXfer+0x232>
              ep->xfer_len_db -= len;
 800701e:	1b9b      	subs	r3, r3, r6
 8007020:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007022:	7863      	ldrb	r3, [r4, #1]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d145      	bne.n	80070b4 <USB_EPStartXfer+0x27a>
 8007028:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800702c:	fa15 f383 	uxtah	r3, r5, r3
 8007030:	7822      	ldrb	r2, [r4, #0]
 8007032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007036:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800703a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800703e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007042:	b9be      	cbnz	r6, 8007074 <USB_EPStartXfer+0x23a>
 8007044:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007048:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800704c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007050:	b292      	uxth	r2, r2
 8007052:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007056:	e02f      	b.n	80070b8 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007058:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 800705c:	fa15 f282 	uxtah	r2, r5, r2
 8007060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007064:	b2b2      	uxth	r2, r6
 8007066:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800706a:	e7cb      	b.n	8007004 <USB_EPStartXfer+0x1ca>
              ep->xfer_len_db = 0U;
 800706c:	2200      	movs	r2, #0
 800706e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007070:	461e      	mov	r6, r3
 8007072:	e7d6      	b.n	8007022 <USB_EPStartXfer+0x1e8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007074:	2e3e      	cmp	r6, #62	@ 0x3e
 8007076:	d80d      	bhi.n	8007094 <USB_EPStartXfer+0x25a>
 8007078:	0872      	lsrs	r2, r6, #1
 800707a:	f016 0f01 	tst.w	r6, #1
 800707e:	d000      	beq.n	8007082 <USB_EPStartXfer+0x248>
 8007080:	3201      	adds	r2, #1
 8007082:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 8007086:	b289      	uxth	r1, r1
 8007088:	0292      	lsls	r2, r2, #10
 800708a:	b292      	uxth	r2, r2
 800708c:	430a      	orrs	r2, r1
 800708e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007092:	e011      	b.n	80070b8 <USB_EPStartXfer+0x27e>
 8007094:	0971      	lsrs	r1, r6, #5
 8007096:	f016 0f1f 	tst.w	r6, #31
 800709a:	d100      	bne.n	800709e <USB_EPStartXfer+0x264>
 800709c:	3901      	subs	r1, #1
 800709e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80070a2:	b292      	uxth	r2, r2
 80070a4:	0289      	lsls	r1, r1, #10
 80070a6:	b289      	uxth	r1, r1
 80070a8:	430a      	orrs	r2, r1
 80070aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070ae:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80070b2:	e001      	b.n	80070b8 <USB_EPStartXfer+0x27e>
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d006      	beq.n	80070c6 <USB_EPStartXfer+0x28c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070b8:	b2b3      	uxth	r3, r6
 80070ba:	8922      	ldrh	r2, [r4, #8]
 80070bc:	6961      	ldr	r1, [r4, #20]
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff fea9 	bl	8006e16 <USB_WritePMA>
 80070c4:	e735      	b.n	8006f32 <USB_EPStartXfer+0xf8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070c6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80070ca:	fa15 f383 	uxtah	r3, r5, r3
 80070ce:	7822      	ldrb	r2, [r4, #0]
 80070d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d4:	b2b2      	uxth	r2, r6
 80070d6:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80070da:	e7ed      	b.n	80070b8 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070dc:	7862      	ldrb	r2, [r4, #1]
 80070de:	bbb2      	cbnz	r2, 800714e <USB_EPStartXfer+0x314>
 80070e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80070e4:	fa15 f282 	uxtah	r2, r5, r2
 80070e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070ec:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80070f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80070f4:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80070f8:	b94e      	cbnz	r6, 800710e <USB_EPStartXfer+0x2d4>
 80070fa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80070fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007102:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007106:	b292      	uxth	r2, r2
 8007108:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800710c:	e021      	b.n	8007152 <USB_EPStartXfer+0x318>
 800710e:	2e3e      	cmp	r6, #62	@ 0x3e
 8007110:	d80d      	bhi.n	800712e <USB_EPStartXfer+0x2f4>
 8007112:	0872      	lsrs	r2, r6, #1
 8007114:	f016 0f01 	tst.w	r6, #1
 8007118:	d000      	beq.n	800711c <USB_EPStartXfer+0x2e2>
 800711a:	3201      	adds	r2, #1
 800711c:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 8007120:	b289      	uxth	r1, r1
 8007122:	0292      	lsls	r2, r2, #10
 8007124:	b292      	uxth	r2, r2
 8007126:	430a      	orrs	r2, r1
 8007128:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800712c:	e011      	b.n	8007152 <USB_EPStartXfer+0x318>
 800712e:	0971      	lsrs	r1, r6, #5
 8007130:	f016 0f1f 	tst.w	r6, #31
 8007134:	d100      	bne.n	8007138 <USB_EPStartXfer+0x2fe>
 8007136:	3901      	subs	r1, #1
 8007138:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800713c:	b292      	uxth	r2, r2
 800713e:	0289      	lsls	r1, r1, #10
 8007140:	b289      	uxth	r1, r1
 8007142:	430a      	orrs	r2, r1
 8007144:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007148:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800714c:	e001      	b.n	8007152 <USB_EPStartXfer+0x318>
 800714e:	2a01      	cmp	r2, #1
 8007150:	d029      	beq.n	80071a6 <USB_EPStartXfer+0x36c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007152:	b2b3      	uxth	r3, r6
 8007154:	8922      	ldrh	r2, [r4, #8]
 8007156:	6961      	ldr	r1, [r4, #20]
 8007158:	4628      	mov	r0, r5
 800715a:	f7ff fe5c 	bl	8006e16 <USB_WritePMA>
            ep->xfer_buff += len;
 800715e:	6963      	ldr	r3, [r4, #20]
 8007160:	4433      	add	r3, r6
 8007162:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007164:	6a23      	ldr	r3, [r4, #32]
 8007166:	6922      	ldr	r2, [r4, #16]
 8007168:	4293      	cmp	r3, r2
 800716a:	d926      	bls.n	80071ba <USB_EPStartXfer+0x380>
              ep->xfer_len_db -= len;
 800716c:	1b9b      	subs	r3, r3, r6
 800716e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007170:	7863      	ldrb	r3, [r4, #1]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d145      	bne.n	8007202 <USB_EPStartXfer+0x3c8>
 8007176:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800717a:	fa15 f383 	uxtah	r3, r5, r3
 800717e:	7822      	ldrb	r2, [r4, #0]
 8007180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007184:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007188:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800718c:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007190:	b9be      	cbnz	r6, 80071c2 <USB_EPStartXfer+0x388>
 8007192:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007196:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800719a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800719e:	b292      	uxth	r2, r2
 80071a0:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80071a4:	e02f      	b.n	8007206 <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80071aa:	fa15 f282 	uxtah	r2, r5, r2
 80071ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071b2:	b2b2      	uxth	r2, r6
 80071b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80071b8:	e7cb      	b.n	8007152 <USB_EPStartXfer+0x318>
              ep->xfer_len_db = 0U;
 80071ba:	2200      	movs	r2, #0
 80071bc:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80071be:	461e      	mov	r6, r3
 80071c0:	e7d6      	b.n	8007170 <USB_EPStartXfer+0x336>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071c2:	2e3e      	cmp	r6, #62	@ 0x3e
 80071c4:	d80d      	bhi.n	80071e2 <USB_EPStartXfer+0x3a8>
 80071c6:	0872      	lsrs	r2, r6, #1
 80071c8:	f016 0f01 	tst.w	r6, #1
 80071cc:	d000      	beq.n	80071d0 <USB_EPStartXfer+0x396>
 80071ce:	3201      	adds	r2, #1
 80071d0:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 80071d4:	b289      	uxth	r1, r1
 80071d6:	0292      	lsls	r2, r2, #10
 80071d8:	b292      	uxth	r2, r2
 80071da:	430a      	orrs	r2, r1
 80071dc:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80071e0:	e011      	b.n	8007206 <USB_EPStartXfer+0x3cc>
 80071e2:	0971      	lsrs	r1, r6, #5
 80071e4:	f016 0f1f 	tst.w	r6, #31
 80071e8:	d100      	bne.n	80071ec <USB_EPStartXfer+0x3b2>
 80071ea:	3901      	subs	r1, #1
 80071ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80071f0:	b292      	uxth	r2, r2
 80071f2:	0289      	lsls	r1, r1, #10
 80071f4:	b289      	uxth	r1, r1
 80071f6:	430a      	orrs	r2, r1
 80071f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071fc:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007200:	e001      	b.n	8007206 <USB_EPStartXfer+0x3cc>
 8007202:	2b01      	cmp	r3, #1
 8007204:	d006      	beq.n	8007214 <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007206:	b2b3      	uxth	r3, r6
 8007208:	8962      	ldrh	r2, [r4, #10]
 800720a:	6961      	ldr	r1, [r4, #20]
 800720c:	4628      	mov	r0, r5
 800720e:	f7ff fe02 	bl	8006e16 <USB_WritePMA>
 8007212:	e68e      	b.n	8006f32 <USB_EPStartXfer+0xf8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007214:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007218:	fa15 f383 	uxtah	r3, r5, r3
 800721c:	7822      	ldrb	r2, [r4, #0]
 800721e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007222:	b2b2      	uxth	r2, r6
 8007224:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007228:	e7ed      	b.n	8007206 <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800722a:	7821      	ldrb	r1, [r4, #0]
 800722c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8007230:	b292      	uxth	r2, r2
 8007232:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8007236:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800723a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800723e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007242:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007246:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 800724a:	fa15 f282 	uxtah	r2, r5, r2
 800724e:	7821      	ldrb	r1, [r4, #0]
 8007250:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007254:	b29b      	uxth	r3, r3
 8007256:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800725a:	8922      	ldrh	r2, [r4, #8]
 800725c:	6961      	ldr	r1, [r4, #20]
 800725e:	4628      	mov	r0, r5
 8007260:	f7ff fdd9 	bl	8006e16 <USB_WritePMA>
 8007264:	e665      	b.n	8006f32 <USB_EPStartXfer+0xf8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007266:	2e3e      	cmp	r6, #62	@ 0x3e
 8007268:	d80d      	bhi.n	8007286 <USB_EPStartXfer+0x44c>
 800726a:	0872      	lsrs	r2, r6, #1
 800726c:	f016 0f01 	tst.w	r6, #1
 8007270:	d000      	beq.n	8007274 <USB_EPStartXfer+0x43a>
 8007272:	3201      	adds	r2, #1
 8007274:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 8007278:	b289      	uxth	r1, r1
 800727a:	0292      	lsls	r2, r2, #10
 800727c:	b292      	uxth	r2, r2
 800727e:	430a      	orrs	r2, r1
 8007280:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007284:	e018      	b.n	80072b8 <USB_EPStartXfer+0x47e>
 8007286:	0971      	lsrs	r1, r6, #5
 8007288:	f016 0f1f 	tst.w	r6, #31
 800728c:	d100      	bne.n	8007290 <USB_EPStartXfer+0x456>
 800728e:	3901      	subs	r1, #1
 8007290:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007294:	b292      	uxth	r2, r2
 8007296:	0289      	lsls	r1, r1, #10
 8007298:	b289      	uxth	r1, r1
 800729a:	430a      	orrs	r2, r1
 800729c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072a0:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80072a4:	e008      	b.n	80072b8 <USB_EPStartXfer+0x47e>
 80072a6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80072aa:	fa15 f282 	uxtah	r2, r5, r2
 80072ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072b2:	b2b2      	uxth	r2, r6
 80072b4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b8:	b2b3      	uxth	r3, r6
 80072ba:	8962      	ldrh	r2, [r4, #10]
 80072bc:	6961      	ldr	r1, [r4, #20]
 80072be:	4628      	mov	r0, r5
 80072c0:	f7ff fda9 	bl	8006e16 <USB_WritePMA>
 80072c4:	e635      	b.n	8006f32 <USB_EPStartXfer+0xf8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072c6:	bbb2      	cbnz	r2, 8007336 <USB_EPStartXfer+0x4fc>
 80072c8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80072cc:	fa15 f282 	uxtah	r2, r5, r2
 80072d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072d4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80072d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80072dc:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80072e0:	b94e      	cbnz	r6, 80072f6 <USB_EPStartXfer+0x4bc>
 80072e2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80072e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80072ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80072ee:	b292      	uxth	r2, r2
 80072f0:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80072f4:	e028      	b.n	8007348 <USB_EPStartXfer+0x50e>
 80072f6:	2e3e      	cmp	r6, #62	@ 0x3e
 80072f8:	d80d      	bhi.n	8007316 <USB_EPStartXfer+0x4dc>
 80072fa:	0872      	lsrs	r2, r6, #1
 80072fc:	f016 0f01 	tst.w	r6, #1
 8007300:	d000      	beq.n	8007304 <USB_EPStartXfer+0x4ca>
 8007302:	3201      	adds	r2, #1
 8007304:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 8007308:	b289      	uxth	r1, r1
 800730a:	0292      	lsls	r2, r2, #10
 800730c:	b292      	uxth	r2, r2
 800730e:	430a      	orrs	r2, r1
 8007310:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007314:	e018      	b.n	8007348 <USB_EPStartXfer+0x50e>
 8007316:	0971      	lsrs	r1, r6, #5
 8007318:	f016 0f1f 	tst.w	r6, #31
 800731c:	d100      	bne.n	8007320 <USB_EPStartXfer+0x4e6>
 800731e:	3901      	subs	r1, #1
 8007320:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007324:	b292      	uxth	r2, r2
 8007326:	0289      	lsls	r1, r1, #10
 8007328:	b289      	uxth	r1, r1
 800732a:	430a      	orrs	r2, r1
 800732c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007330:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007334:	e008      	b.n	8007348 <USB_EPStartXfer+0x50e>
 8007336:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 800733a:	fa15 f282 	uxtah	r2, r5, r2
 800733e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007342:	b2b2      	uxth	r2, r6
 8007344:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007348:	b2b3      	uxth	r3, r6
 800734a:	8922      	ldrh	r2, [r4, #8]
 800734c:	6961      	ldr	r1, [r4, #20]
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff fd61 	bl	8006e16 <USB_WritePMA>
 8007354:	e5ed      	b.n	8006f32 <USB_EPStartXfer+0xf8>
        ep->xfer_len = 0U;
 8007356:	2200      	movs	r2, #0
 8007358:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800735a:	461a      	mov	r2, r3
 800735c:	e57e      	b.n	8006e5c <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800735e:	2a3e      	cmp	r2, #62	@ 0x3e
 8007360:	d80d      	bhi.n	800737e <USB_EPStartXfer+0x544>
 8007362:	0851      	lsrs	r1, r2, #1
 8007364:	f012 0f01 	tst.w	r2, #1
 8007368:	d000      	beq.n	800736c <USB_EPStartXfer+0x532>
 800736a:	3101      	adds	r1, #1
 800736c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007370:	b292      	uxth	r2, r2
 8007372:	0289      	lsls	r1, r1, #10
 8007374:	b289      	uxth	r1, r1
 8007376:	430a      	orrs	r2, r1
 8007378:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800737c:	e587      	b.n	8006e8e <USB_EPStartXfer+0x54>
 800737e:	0951      	lsrs	r1, r2, #5
 8007380:	f012 0f1f 	tst.w	r2, #31
 8007384:	d100      	bne.n	8007388 <USB_EPStartXfer+0x54e>
 8007386:	3901      	subs	r1, #1
 8007388:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800738c:	b292      	uxth	r2, r2
 800738e:	0289      	lsls	r1, r1, #10
 8007390:	b289      	uxth	r1, r1
 8007392:	430a      	orrs	r2, r1
 8007394:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007398:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800739c:	e577      	b.n	8006e8e <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 800739e:	78cb      	ldrb	r3, [r1, #3]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d041      	beq.n	8007428 <USB_EPStartXfer+0x5ee>
      else if (ep->type == EP_TYPE_ISOC)
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	f040 8131 	bne.w	800760c <USB_EPStartXfer+0x7d2>
        if (ep->xfer_len > ep->maxpacket)
 80073aa:	6989      	ldr	r1, [r1, #24]
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	f240 80da 	bls.w	8007568 <USB_EPStartXfer+0x72e>
          ep->xfer_len -= len;
 80073b4:	1ac9      	subs	r1, r1, r3
 80073b6:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073b8:	b9c2      	cbnz	r2, 80073ec <USB_EPStartXfer+0x5b2>
 80073ba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80073be:	fa15 f282 	uxtah	r2, r5, r2
 80073c2:	7821      	ldrb	r1, [r4, #0]
 80073c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80073c8:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 80073cc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80073d0:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 80cb 	bne.w	8007570 <USB_EPStartXfer+0x736>
 80073da:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 80073de:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80073e2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80073e6:	b289      	uxth	r1, r1
 80073e8:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80073ec:	7862      	ldrb	r2, [r4, #1]
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	f040 80fe 	bne.w	80075f0 <USB_EPStartXfer+0x7b6>
 80073f4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80073f8:	fa15 f282 	uxtah	r2, r5, r2
 80073fc:	7821      	ldrb	r1, [r4, #0]
 80073fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007402:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8007406:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800740a:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 80ce 	bne.w	80075b0 <USB_EPStartXfer+0x776>
 8007414:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 8007418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800741c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007420:	b29b      	uxth	r3, r3
 8007422:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 8007426:	e532      	b.n	8006e8e <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007428:	b9ba      	cbnz	r2, 800745a <USB_EPStartXfer+0x620>
 800742a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800742e:	fa10 f383 	uxtah	r3, r0, r3
 8007432:	780a      	ldrb	r2, [r1, #0]
 8007434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007438:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800743c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007440:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007444:	690a      	ldr	r2, [r1, #16]
 8007446:	bb22      	cbnz	r2, 8007492 <USB_EPStartXfer+0x658>
 8007448:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800744c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007450:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007454:	b292      	uxth	r2, r2
 8007456:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800745a:	7863      	ldrb	r3, [r4, #1]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d158      	bne.n	8007512 <USB_EPStartXfer+0x6d8>
 8007460:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007464:	fa15 f383 	uxtah	r3, r5, r3
 8007468:	7822      	ldrb	r2, [r4, #0]
 800746a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800746e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007472:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007476:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	bb4a      	cbnz	r2, 80074d2 <USB_EPStartXfer+0x698>
 800747e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007482:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007486:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800748a:	b292      	uxth	r2, r2
 800748c:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007490:	e041      	b.n	8007516 <USB_EPStartXfer+0x6dc>
 8007492:	2a3e      	cmp	r2, #62	@ 0x3e
 8007494:	d80d      	bhi.n	80074b2 <USB_EPStartXfer+0x678>
 8007496:	0851      	lsrs	r1, r2, #1
 8007498:	f012 0f01 	tst.w	r2, #1
 800749c:	d000      	beq.n	80074a0 <USB_EPStartXfer+0x666>
 800749e:	3101      	adds	r1, #1
 80074a0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80074a4:	b290      	uxth	r0, r2
 80074a6:	028a      	lsls	r2, r1, #10
 80074a8:	b292      	uxth	r2, r2
 80074aa:	4302      	orrs	r2, r0
 80074ac:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80074b0:	e7d3      	b.n	800745a <USB_EPStartXfer+0x620>
 80074b2:	0951      	lsrs	r1, r2, #5
 80074b4:	f012 0f1f 	tst.w	r2, #31
 80074b8:	d100      	bne.n	80074bc <USB_EPStartXfer+0x682>
 80074ba:	3901      	subs	r1, #1
 80074bc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80074c0:	b292      	uxth	r2, r2
 80074c2:	0289      	lsls	r1, r1, #10
 80074c4:	b289      	uxth	r1, r1
 80074c6:	430a      	orrs	r2, r1
 80074c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074cc:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80074d0:	e7c3      	b.n	800745a <USB_EPStartXfer+0x620>
 80074d2:	2a3e      	cmp	r2, #62	@ 0x3e
 80074d4:	d80d      	bhi.n	80074f2 <USB_EPStartXfer+0x6b8>
 80074d6:	0851      	lsrs	r1, r2, #1
 80074d8:	f012 0f01 	tst.w	r2, #1
 80074dc:	d000      	beq.n	80074e0 <USB_EPStartXfer+0x6a6>
 80074de:	3101      	adds	r1, #1
 80074e0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80074e4:	b290      	uxth	r0, r2
 80074e6:	028a      	lsls	r2, r1, #10
 80074e8:	b292      	uxth	r2, r2
 80074ea:	4302      	orrs	r2, r0
 80074ec:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80074f0:	e011      	b.n	8007516 <USB_EPStartXfer+0x6dc>
 80074f2:	0951      	lsrs	r1, r2, #5
 80074f4:	f012 0f1f 	tst.w	r2, #31
 80074f8:	d100      	bne.n	80074fc <USB_EPStartXfer+0x6c2>
 80074fa:	3901      	subs	r1, #1
 80074fc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007500:	b292      	uxth	r2, r2
 8007502:	0289      	lsls	r1, r1, #10
 8007504:	b289      	uxth	r1, r1
 8007506:	430a      	orrs	r2, r1
 8007508:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800750c:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007510:	e001      	b.n	8007516 <USB_EPStartXfer+0x6dc>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d01d      	beq.n	8007552 <USB_EPStartXfer+0x718>
        if (ep->xfer_count != 0U)
 8007516:	69e3      	ldr	r3, [r4, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f43f acb8 	beq.w	8006e8e <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800751e:	7822      	ldrb	r2, [r4, #0]
 8007520:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007524:	f244 0340 	movw	r3, #16448	@ 0x4040
 8007528:	ea03 0001 	and.w	r0, r3, r1
 800752c:	438b      	bics	r3, r1
 800752e:	d002      	beq.n	8007536 <USB_EPStartXfer+0x6fc>
 8007530:	2800      	cmp	r0, #0
 8007532:	f47f acac 	bne.w	8006e8e <USB_EPStartXfer+0x54>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007536:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007548:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800754c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007550:	e49d      	b.n	8006e8e <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007552:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007556:	fa15 f383 	uxtah	r3, r5, r3
 800755a:	7822      	ldrb	r2, [r4, #0]
 800755c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007560:	8a22      	ldrh	r2, [r4, #16]
 8007562:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007566:	e7d6      	b.n	8007516 <USB_EPStartXfer+0x6dc>
          ep->xfer_len = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800756c:	460b      	mov	r3, r1
 800756e:	e723      	b.n	80073b8 <USB_EPStartXfer+0x57e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007570:	2b3e      	cmp	r3, #62	@ 0x3e
 8007572:	d80d      	bhi.n	8007590 <USB_EPStartXfer+0x756>
 8007574:	0859      	lsrs	r1, r3, #1
 8007576:	f013 0f01 	tst.w	r3, #1
 800757a:	d000      	beq.n	800757e <USB_EPStartXfer+0x744>
 800757c:	3101      	adds	r1, #1
 800757e:	f8b2 0402 	ldrh.w	r0, [r2, #1026]	@ 0x402
 8007582:	b280      	uxth	r0, r0
 8007584:	0289      	lsls	r1, r1, #10
 8007586:	b289      	uxth	r1, r1
 8007588:	4301      	orrs	r1, r0
 800758a:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800758e:	e72d      	b.n	80073ec <USB_EPStartXfer+0x5b2>
 8007590:	0958      	lsrs	r0, r3, #5
 8007592:	f013 0f1f 	tst.w	r3, #31
 8007596:	d100      	bne.n	800759a <USB_EPStartXfer+0x760>
 8007598:	3801      	subs	r0, #1
 800759a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 800759e:	b289      	uxth	r1, r1
 80075a0:	0280      	lsls	r0, r0, #10
 80075a2:	b280      	uxth	r0, r0
 80075a4:	4301      	orrs	r1, r0
 80075a6:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80075aa:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80075ae:	e71d      	b.n	80073ec <USB_EPStartXfer+0x5b2>
 80075b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80075b2:	d80d      	bhi.n	80075d0 <USB_EPStartXfer+0x796>
 80075b4:	0859      	lsrs	r1, r3, #1
 80075b6:	f013 0f01 	tst.w	r3, #1
 80075ba:	d000      	beq.n	80075be <USB_EPStartXfer+0x784>
 80075bc:	3101      	adds	r1, #1
 80075be:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 80075c2:	b298      	uxth	r0, r3
 80075c4:	028b      	lsls	r3, r1, #10
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	4303      	orrs	r3, r0
 80075ca:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 80075ce:	e45e      	b.n	8006e8e <USB_EPStartXfer+0x54>
 80075d0:	0959      	lsrs	r1, r3, #5
 80075d2:	f013 0f1f 	tst.w	r3, #31
 80075d6:	d100      	bne.n	80075da <USB_EPStartXfer+0x7a0>
 80075d8:	3901      	subs	r1, #1
 80075da:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 80075de:	b29b      	uxth	r3, r3
 80075e0:	0289      	lsls	r1, r1, #10
 80075e2:	b289      	uxth	r1, r1
 80075e4:	430b      	orrs	r3, r1
 80075e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ea:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 80075ee:	e44e      	b.n	8006e8e <USB_EPStartXfer+0x54>
 80075f0:	2a01      	cmp	r2, #1
 80075f2:	f47f ac4c 	bne.w	8006e8e <USB_EPStartXfer+0x54>
 80075f6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80075fa:	fa15 f282 	uxtah	r2, r5, r2
 80075fe:	7821      	ldrb	r1, [r4, #0]
 8007600:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007604:	b29b      	uxth	r3, r3
 8007606:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 800760a:	e440      	b.n	8006e8e <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 800760c:	2001      	movs	r0, #1
 800760e:	e44f      	b.n	8006eb0 <USB_EPStartXfer+0x76>

08007610 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007610:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007612:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007614:	4402      	add	r2, r0
 8007616:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 800761a:	e007      	b.n	800762c <USB_ReadPMA+0x1c>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800761c:	f832 0b02 	ldrh.w	r0, [r2], #2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007620:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007622:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007626:	7048      	strb	r0, [r1, #1]
    pBuf++;
 8007628:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 800762a:	3c01      	subs	r4, #1
 800762c:	2c00      	cmp	r4, #0
 800762e:	d1f5      	bne.n	800761c <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007630:	f013 0f01 	tst.w	r3, #1
 8007634:	d001      	beq.n	800763a <USB_ReadPMA+0x2a>
  {
    RdVal = *pdwVal;
 8007636:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007638:	700b      	strb	r3, [r1, #0]
  }
}
 800763a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800763e:	4770      	bx	lr

08007640 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007644:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007646:	4c1b      	ldr	r4, [pc, #108]	@ (80076b4 <I2C1_MspInit+0x74>)
 8007648:	6963      	ldr	r3, [r4, #20]
 800764a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800764e:	6163      	str	r3, [r4, #20]
 8007650:	6963      	ldr	r3, [r4, #20]
 8007652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800765a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800765e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007660:	f04f 0912 	mov.w	r9, #18
 8007664:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	f04f 0800 	mov.w	r8, #0
 800766c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007670:	2703      	movs	r7, #3
 8007672:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8007674:	2604      	movs	r6, #4
 8007676:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007678:	4d0f      	ldr	r5, [pc, #60]	@ (80076b8 <I2C1_MspInit+0x78>)
 800767a:	a903      	add	r1, sp, #12
 800767c:	4628      	mov	r0, r5
 800767e:	f7fb ffa3 	bl	80035c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8007682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007686:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007688:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800768c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007690:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8007692:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007694:	a903      	add	r1, sp, #12
 8007696:	4628      	mov	r0, r5
 8007698:	f7fb ff96 	bl	80035c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800769c:	69e3      	ldr	r3, [r4, #28]
 800769e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076a2:	61e3      	str	r3, [r4, #28]
 80076a4:	69e3      	ldr	r3, [r4, #28]
 80076a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80076ae:	b009      	add	sp, #36	@ 0x24
 80076b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076b4:	40021000 	.word	0x40021000
 80076b8:	48000400 	.word	0x48000400

080076bc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80076bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80076be:	4a08      	ldr	r2, [pc, #32]	@ (80076e0 <I2C1_MspDeInit+0x24>)
 80076c0:	69d3      	ldr	r3, [r2, #28]
 80076c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076c6:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80076c8:	4c06      	ldr	r4, [pc, #24]	@ (80076e4 <I2C1_MspDeInit+0x28>)
 80076ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7fc f86a 	bl	80037a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80076d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076d8:	4620      	mov	r0, r4
 80076da:	f7fc f865 	bl	80037a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80076de:	bd10      	pop	{r4, pc}
 80076e0:	40021000 	.word	0x40021000
 80076e4:	48000400 	.word	0x48000400

080076e8 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 80076e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <BSP_I2C1_DeInit+0x30>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	b17b      	cbz	r3, 800770e <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 80076ee:	3b01      	subs	r3, #1
 80076f0:	4a09      	ldr	r2, [pc, #36]	@ (8007718 <BSP_I2C1_DeInit+0x30>)
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	b10b      	cbz	r3, 80076fa <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 80076f6:	2000      	movs	r0, #0
}
 80076f8:	4770      	bx	lr
{
 80076fa:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 80076fc:	4c07      	ldr	r4, [pc, #28]	@ (800771c <BSP_I2C1_DeInit+0x34>)
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff ffdc 	bl	80076bc <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8007704:	4620      	mov	r0, r4
 8007706:	f7fc fb28 	bl	8003d5a <HAL_I2C_DeInit>
 800770a:	b910      	cbnz	r0, 8007712 <BSP_I2C1_DeInit+0x2a>
}
 800770c:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 800770e:	2000      	movs	r0, #0
 8007710:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 8007712:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007716:	e7f9      	b.n	800770c <BSP_I2C1_DeInit+0x24>
 8007718:	20000670 	.word	0x20000670
 800771c:	20000674 	.word	0x20000674

08007720 <BSP_I2C1_WriteReg>:
{
 8007720:	b510      	push	{r4, lr}
 8007722:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007724:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8007728:	9402      	str	r4, [sp, #8]
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	9200      	str	r2, [sp, #0]
 800772e:	2301      	movs	r3, #1
 8007730:	460a      	mov	r2, r1
 8007732:	4601      	mov	r1, r0
 8007734:	4808      	ldr	r0, [pc, #32]	@ (8007758 <BSP_I2C1_WriteReg+0x38>)
 8007736:	f7fc fb29 	bl	8003d8c <HAL_I2C_Mem_Write>
 800773a:	b910      	cbnz	r0, 8007742 <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 800773c:	2000      	movs	r0, #0
}
 800773e:	b004      	add	sp, #16
 8007740:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8007742:	4805      	ldr	r0, [pc, #20]	@ (8007758 <BSP_I2C1_WriteReg+0x38>)
 8007744:	f7fc fcd1 	bl	80040ea <HAL_I2C_GetError>
 8007748:	2804      	cmp	r0, #4
 800774a:	d002      	beq.n	8007752 <BSP_I2C1_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800774c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007750:	e7f5      	b.n	800773e <BSP_I2C1_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007752:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8007756:	e7f2      	b.n	800773e <BSP_I2C1_WriteReg+0x1e>
 8007758:	20000674 	.word	0x20000674

0800775c <BSP_I2C1_ReadReg>:
{
 800775c:	b510      	push	{r4, lr}
 800775e:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007760:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8007764:	9402      	str	r4, [sp, #8]
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	9200      	str	r2, [sp, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	460a      	mov	r2, r1
 800776e:	4601      	mov	r1, r0
 8007770:	4808      	ldr	r0, [pc, #32]	@ (8007794 <BSP_I2C1_ReadReg+0x38>)
 8007772:	f7fc fbdf 	bl	8003f34 <HAL_I2C_Mem_Read>
 8007776:	b910      	cbnz	r0, 800777e <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8007778:	2000      	movs	r0, #0
}
 800777a:	b004      	add	sp, #16
 800777c:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800777e:	4805      	ldr	r0, [pc, #20]	@ (8007794 <BSP_I2C1_ReadReg+0x38>)
 8007780:	f7fc fcb3 	bl	80040ea <HAL_I2C_GetError>
 8007784:	2804      	cmp	r0, #4
 8007786:	d002      	beq.n	800778e <BSP_I2C1_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007788:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800778c:	e7f5      	b.n	800777a <BSP_I2C1_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800778e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8007792:	e7f2      	b.n	800777a <BSP_I2C1_ReadReg+0x1e>
 8007794:	20000674 	.word	0x20000674

08007798 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8007798:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800779a:	f7fb fda5 	bl	80032e8 <HAL_GetTick>
}
 800779e:	bd08      	pop	{r3, pc}

080077a0 <MX_I2C1_Init>:
{
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4604      	mov	r4, r0
  hi2c->Instance = I2C1;
 80077a4:	4b0f      	ldr	r3, [pc, #60]	@ (80077e4 <MX_I2C1_Init+0x44>)
 80077a6:	6003      	str	r3, [r0, #0]
  hi2c->Init.Timing = 0x0010020A;
 80077a8:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <MX_I2C1_Init+0x48>)
 80077aa:	6043      	str	r3, [r0, #4]
  hi2c->Init.OwnAddress1 = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	6083      	str	r3, [r0, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077b0:	2201      	movs	r2, #1
 80077b2:	60c2      	str	r2, [r0, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077b4:	6103      	str	r3, [r0, #16]
  hi2c->Init.OwnAddress2 = 0;
 80077b6:	6143      	str	r3, [r0, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077b8:	6183      	str	r3, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077ba:	61c3      	str	r3, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077bc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80077be:	f7fc fa67 	bl	8003c90 <HAL_I2C_Init>
 80077c2:	4605      	mov	r5, r0
 80077c4:	b100      	cbz	r0, 80077c8 <MX_I2C1_Init+0x28>
    ret = HAL_ERROR;
 80077c6:	2501      	movs	r5, #1
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077c8:	2100      	movs	r1, #0
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7fc fc8f 	bl	80040ee <HAL_I2CEx_ConfigAnalogFilter>
 80077d0:	b100      	cbz	r0, 80077d4 <MX_I2C1_Init+0x34>
    ret = HAL_ERROR;
 80077d2:	2501      	movs	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80077d4:	2100      	movs	r1, #0
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7fc fcb7 	bl	800414a <HAL_I2CEx_ConfigDigitalFilter>
 80077dc:	b100      	cbz	r0, 80077e0 <MX_I2C1_Init+0x40>
    ret = HAL_ERROR;
 80077de:	2501      	movs	r5, #1
}
 80077e0:	4628      	mov	r0, r5
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	40005400 	.word	0x40005400
 80077e8:	0010020a 	.word	0x0010020a

080077ec <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 80077ec:	4b12      	ldr	r3, [pc, #72]	@ (8007838 <BSP_I2C1_Init+0x4c>)
 80077ee:	4a13      	ldr	r2, [pc, #76]	@ (800783c <BSP_I2C1_Init+0x50>)
 80077f0:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 80077f2:	4a13      	ldr	r2, [pc, #76]	@ (8007840 <BSP_I2C1_Init+0x54>)
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	1c59      	adds	r1, r3, #1
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	b10b      	cbz	r3, 8007800 <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80077fc:	2000      	movs	r0, #0
}
 80077fe:	4770      	bx	lr
{
 8007800:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8007802:	480d      	ldr	r0, [pc, #52]	@ (8007838 <BSP_I2C1_Init+0x4c>)
 8007804:	f7fc fc6e 	bl	80040e4 <HAL_I2C_GetState>
 8007808:	b108      	cbz	r0, 800780e <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 800780a:	2000      	movs	r0, #0
}
 800780c:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 800780e:	4c0a      	ldr	r4, [pc, #40]	@ (8007838 <BSP_I2C1_Init+0x4c>)
 8007810:	4620      	mov	r0, r4
 8007812:	f7ff ff15 	bl	8007640 <I2C1_MspInit>
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8007816:	4620      	mov	r0, r4
 8007818:	f7ff ffc2 	bl	80077a0 <MX_I2C1_Init>
 800781c:	b948      	cbnz	r0, 8007832 <BSP_I2C1_Init+0x46>
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800781e:	2100      	movs	r1, #0
 8007820:	4620      	mov	r0, r4
 8007822:	f7fc fc64 	bl	80040ee <HAL_I2CEx_ConfigAnalogFilter>
 8007826:	b908      	cbnz	r0, 800782c <BSP_I2C1_Init+0x40>
          ret = BSP_ERROR_NONE;
 8007828:	2000      	movs	r0, #0
  return ret;
 800782a:	e7ef      	b.n	800780c <BSP_I2C1_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 800782c:	f06f 0007 	mvn.w	r0, #7
 8007830:	e7ec      	b.n	800780c <BSP_I2C1_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 8007832:	f06f 0007 	mvn.w	r0, #7
 8007836:	e7e9      	b.n	800780c <BSP_I2C1_Init+0x20>
 8007838:	20000674 	.word	0x20000674
 800783c:	40005400 	.word	0x40005400
 8007840:	20000670 	.word	0x20000670

08007844 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007844:	4a03      	ldr	r2, [pc, #12]	@ (8007854 <SystemInit+0x10>)
 8007846:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800784a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800784e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007852:	4770      	bx	lr
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007890 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800785c:	f7ff fff2 	bl	8007844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007860:	480c      	ldr	r0, [pc, #48]	@ (8007894 <LoopForever+0x6>)
  ldr r1, =_edata
 8007862:	490d      	ldr	r1, [pc, #52]	@ (8007898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007864:	4a0d      	ldr	r2, [pc, #52]	@ (800789c <LoopForever+0xe>)
  movs r3, #0
 8007866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007868:	e002      	b.n	8007870 <LoopCopyDataInit>

0800786a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800786a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800786c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800786e:	3304      	adds	r3, #4

08007870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007874:	d3f9      	bcc.n	800786a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007876:	4a0a      	ldr	r2, [pc, #40]	@ (80078a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007878:	4c0a      	ldr	r4, [pc, #40]	@ (80078a4 <LoopForever+0x16>)
  movs r3, #0
 800787a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800787c:	e001      	b.n	8007882 <LoopFillZerobss>

0800787e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800787e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007880:	3204      	adds	r2, #4

08007882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007884:	d3fb      	bcc.n	800787e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007886:	f000 f819 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800788a:	f7fb fce9 	bl	8003260 <main>

0800788e <LoopForever>:

LoopForever:
    b LoopForever
 800788e:	e7fe      	b.n	800788e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007890:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007898:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800789c:	08007980 	.word	0x08007980
  ldr r2, =_sbss
 80078a0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80078a4:	200006c8 	.word	0x200006c8

080078a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078a8:	e7fe      	b.n	80078a8 <ADC1_2_IRQHandler>

080078aa <memset>:
 80078aa:	4402      	add	r2, r0
 80078ac:	4603      	mov	r3, r0
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d100      	bne.n	80078b4 <memset+0xa>
 80078b2:	4770      	bx	lr
 80078b4:	f803 1b01 	strb.w	r1, [r3], #1
 80078b8:	e7f9      	b.n	80078ae <memset+0x4>
	...

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4d0d      	ldr	r5, [pc, #52]	@ (80078f4 <__libc_init_array+0x38>)
 80078c0:	4c0d      	ldr	r4, [pc, #52]	@ (80078f8 <__libc_init_array+0x3c>)
 80078c2:	1b64      	subs	r4, r4, r5
 80078c4:	10a4      	asrs	r4, r4, #2
 80078c6:	2600      	movs	r6, #0
 80078c8:	42a6      	cmp	r6, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	4d0b      	ldr	r5, [pc, #44]	@ (80078fc <__libc_init_array+0x40>)
 80078ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007900 <__libc_init_array+0x44>)
 80078d0:	f000 f818 	bl	8007904 <_init>
 80078d4:	1b64      	subs	r4, r4, r5
 80078d6:	10a4      	asrs	r4, r4, #2
 80078d8:	2600      	movs	r6, #0
 80078da:	42a6      	cmp	r6, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e4:	4798      	blx	r3
 80078e6:	3601      	adds	r6, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ee:	4798      	blx	r3
 80078f0:	3601      	adds	r6, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	08007978 	.word	0x08007978
 80078f8:	08007978 	.word	0x08007978
 80078fc:	08007978 	.word	0x08007978
 8007900:	0800797c 	.word	0x0800797c

08007904 <_init>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr

08007910 <_fini>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	bf00      	nop
 8007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007916:	bc08      	pop	{r3}
 8007918:	469e      	mov	lr, r3
 800791a:	4770      	bx	lr
