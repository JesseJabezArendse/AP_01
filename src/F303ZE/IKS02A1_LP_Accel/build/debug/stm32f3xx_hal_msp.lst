ARM GAS  C:\Temp\ccC9R8db.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f3xx_hal_msp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/stm32f3xx_hal_msp.c"
  20              		.section	.text.HAL_MspInit,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_MspInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_MspInit:
  28              	.LFB130:
   1:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f3xx_hal_msp.c **** /**
   3:Core/Src/stm32f3xx_hal_msp.c ****   ******************************************************************************
   4:Core/Src/stm32f3xx_hal_msp.c ****   * @file         stm32f3xx_hal_msp.c
   5:Core/Src/stm32f3xx_hal_msp.c ****   * @brief        This file provides code for the MSP Initialization
   6:Core/Src/stm32f3xx_hal_msp.c ****   *               and de-Initialization codes.
   7:Core/Src/stm32f3xx_hal_msp.c ****   ******************************************************************************
   8:Core/Src/stm32f3xx_hal_msp.c ****   * @attention
   9:Core/Src/stm32f3xx_hal_msp.c ****   *
  10:Core/Src/stm32f3xx_hal_msp.c ****   * Copyright (c) 2025 STMicroelectronics.
  11:Core/Src/stm32f3xx_hal_msp.c ****   * All rights reserved.
  12:Core/Src/stm32f3xx_hal_msp.c ****   *
  13:Core/Src/stm32f3xx_hal_msp.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/stm32f3xx_hal_msp.c ****   * in the root directory of this software component.
  15:Core/Src/stm32f3xx_hal_msp.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/stm32f3xx_hal_msp.c ****   *
  17:Core/Src/stm32f3xx_hal_msp.c ****   ******************************************************************************
  18:Core/Src/stm32f3xx_hal_msp.c ****   */
  19:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END Header */
  20:Core/Src/stm32f3xx_hal_msp.c **** 
  21:Core/Src/stm32f3xx_hal_msp.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f3xx_hal_msp.c **** #include "main.h"
  23:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/stm32f3xx_hal_msp.c **** 
  25:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f3xx_hal_msp.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  27:Core/Src/stm32f3xx_hal_msp.c **** 
  28:Core/Src/stm32f3xx_hal_msp.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f3xx_hal_msp.c **** 
ARM GAS  C:\Temp\ccC9R8db.s 			page 2


  31:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END TD */
  32:Core/Src/stm32f3xx_hal_msp.c **** 
  33:Core/Src/stm32f3xx_hal_msp.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN Define */
  35:Core/Src/stm32f3xx_hal_msp.c **** 
  36:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END Define */
  37:Core/Src/stm32f3xx_hal_msp.c **** 
  38:Core/Src/stm32f3xx_hal_msp.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN Macro */
  40:Core/Src/stm32f3xx_hal_msp.c **** 
  41:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END Macro */
  42:Core/Src/stm32f3xx_hal_msp.c **** 
  43:Core/Src/stm32f3xx_hal_msp.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f3xx_hal_msp.c **** 
  46:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END PV */
  47:Core/Src/stm32f3xx_hal_msp.c **** 
  48:Core/Src/stm32f3xx_hal_msp.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f3xx_hal_msp.c **** 
  51:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f3xx_hal_msp.c **** 
  53:Core/Src/stm32f3xx_hal_msp.c **** /* External functions --------------------------------------------------------*/
  54:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN ExternalFunctions */
  55:Core/Src/stm32f3xx_hal_msp.c **** 
  56:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END ExternalFunctions */
  57:Core/Src/stm32f3xx_hal_msp.c **** 
  58:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/stm32f3xx_hal_msp.c **** 
  60:Core/Src/stm32f3xx_hal_msp.c **** /* USER CODE END 0 */
  61:Core/Src/stm32f3xx_hal_msp.c **** /**
  62:Core/Src/stm32f3xx_hal_msp.c ****   * Initializes the Global MSP.
  63:Core/Src/stm32f3xx_hal_msp.c ****   */
  64:Core/Src/stm32f3xx_hal_msp.c **** void HAL_MspInit(void)
  65:Core/Src/stm32f3xx_hal_msp.c **** {
  29              		.loc 1 65 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 82B0     		sub	sp, sp, #8
  35              		.cfi_def_cfa_offset 8
  66:Core/Src/stm32f3xx_hal_msp.c **** 
  67:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN MspInit 0 */
  68:Core/Src/stm32f3xx_hal_msp.c **** 
  69:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END MspInit 0 */
  70:Core/Src/stm32f3xx_hal_msp.c **** 
  71:Core/Src/stm32f3xx_hal_msp.c ****   __HAL_RCC_SYSCFG_CLK_ENABLE();
  36              		.loc 1 71 3 view .LVU1
  37              	.LBB6:
  38              		.loc 1 71 3 view .LVU2
  39              		.loc 1 71 3 view .LVU3
  40 0002 0A4B     		ldr	r3, .L3
  41 0004 9A69     		ldr	r2, [r3, #24]
  42 0006 42F00102 		orr	r2, r2, #1
  43 000a 9A61     		str	r2, [r3, #24]
  44              		.loc 1 71 3 view .LVU4
ARM GAS  C:\Temp\ccC9R8db.s 			page 3


  45 000c 9A69     		ldr	r2, [r3, #24]
  46 000e 02F00102 		and	r2, r2, #1
  47 0012 0092     		str	r2, [sp]
  48              		.loc 1 71 3 view .LVU5
  49 0014 009A     		ldr	r2, [sp]
  50              	.LBE6:
  51              		.loc 1 71 3 view .LVU6
  72:Core/Src/stm32f3xx_hal_msp.c ****   __HAL_RCC_PWR_CLK_ENABLE();
  52              		.loc 1 72 3 view .LVU7
  53              	.LBB7:
  54              		.loc 1 72 3 view .LVU8
  55              		.loc 1 72 3 view .LVU9
  56 0016 DA69     		ldr	r2, [r3, #28]
  57 0018 42F08052 		orr	r2, r2, #268435456
  58 001c DA61     		str	r2, [r3, #28]
  59              		.loc 1 72 3 view .LVU10
  60 001e DB69     		ldr	r3, [r3, #28]
  61 0020 03F08053 		and	r3, r3, #268435456
  62 0024 0193     		str	r3, [sp, #4]
  63              		.loc 1 72 3 view .LVU11
  64 0026 019B     		ldr	r3, [sp, #4]
  65              	.LBE7:
  66              		.loc 1 72 3 view .LVU12
  73:Core/Src/stm32f3xx_hal_msp.c **** 
  74:Core/Src/stm32f3xx_hal_msp.c ****   /* System interrupt init*/
  75:Core/Src/stm32f3xx_hal_msp.c **** 
  76:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN MspInit 1 */
  77:Core/Src/stm32f3xx_hal_msp.c **** 
  78:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END MspInit 1 */
  79:Core/Src/stm32f3xx_hal_msp.c **** }
  67              		.loc 1 79 1 is_stmt 0 view .LVU13
  68 0028 02B0     		add	sp, sp, #8
  69              		.cfi_def_cfa_offset 0
  70              		@ sp needed
  71 002a 7047     		bx	lr
  72              	.L4:
  73              		.align	2
  74              	.L3:
  75 002c 00100240 		.word	1073876992
  76              		.cfi_endproc
  77              	.LFE130:
  79              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  80              		.align	1
  81              		.global	HAL_RTC_MspInit
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  86              	HAL_RTC_MspInit:
  87              	.LVL0:
  88              	.LFB131:
  80:Core/Src/stm32f3xx_hal_msp.c **** 
  81:Core/Src/stm32f3xx_hal_msp.c **** /**
  82:Core/Src/stm32f3xx_hal_msp.c **** * @brief RTC MSP Initialization
  83:Core/Src/stm32f3xx_hal_msp.c **** * This function configures the hardware resources used in this example
  84:Core/Src/stm32f3xx_hal_msp.c **** * @param hrtc: RTC handle pointer
  85:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
  86:Core/Src/stm32f3xx_hal_msp.c **** */
ARM GAS  C:\Temp\ccC9R8db.s 			page 4


  87:Core/Src/stm32f3xx_hal_msp.c **** void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
  88:Core/Src/stm32f3xx_hal_msp.c **** {
  89              		.loc 1 88 1 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  89:Core/Src/stm32f3xx_hal_msp.c ****   if(hrtc->Instance==RTC)
  94              		.loc 1 89 3 view .LVU15
  95              		.loc 1 89 10 is_stmt 0 view .LVU16
  96 0000 0268     		ldr	r2, [r0]
  97              		.loc 1 89 5 view .LVU17
  98 0002 084B     		ldr	r3, .L8
  99 0004 9A42     		cmp	r2, r3
 100 0006 00D0     		beq	.L7
 101              	.L5:
  90:Core/Src/stm32f3xx_hal_msp.c ****   {
  91:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspInit 0 */
  92:Core/Src/stm32f3xx_hal_msp.c **** 
  93:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END RTC_MspInit 0 */
  94:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock enable */
  95:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_RTC_ENABLE();
  96:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspInit 1 */
  97:Core/Src/stm32f3xx_hal_msp.c **** 
  98:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END RTC_MspInit 1 */
  99:Core/Src/stm32f3xx_hal_msp.c **** 
 100:Core/Src/stm32f3xx_hal_msp.c ****   }
 101:Core/Src/stm32f3xx_hal_msp.c **** 
 102:Core/Src/stm32f3xx_hal_msp.c **** }
 102              		.loc 1 102 1 view .LVU18
 103 0008 7047     		bx	lr
 104              	.L7:
  95:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspInit 1 */
 105              		.loc 1 95 5 is_stmt 1 view .LVU19
 106              	.LVL1:
 107              	.LBB8:
 108              	.LBI8:
 109              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Temp\ccC9R8db.s 			page 5


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  C:\Temp\ccC9R8db.s 			page 6


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccC9R8db.s 			page 7


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
ARM GAS  C:\Temp\ccC9R8db.s 			page 8


 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
ARM GAS  C:\Temp\ccC9R8db.s 			page 9


 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccC9R8db.s 			page 10


 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Temp\ccC9R8db.s 			page 11


 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Temp\ccC9R8db.s 			page 12


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccC9R8db.s 			page 13


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Temp\ccC9R8db.s 			page 14


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
ARM GAS  C:\Temp\ccC9R8db.s 			page 15


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\ccC9R8db.s 			page 16


 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\ccC9R8db.s 			page 17


 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccC9R8db.s 			page 18


 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
ARM GAS  C:\Temp\ccC9R8db.s 			page 19


 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  C:\Temp\ccC9R8db.s 			page 20


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  C:\Temp\ccC9R8db.s 			page 21


 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 110              		.loc 2 981 31 view .LVU20
 111              	.LBB9:
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 112              		.loc 2 983 3 view .LVU21
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Temp\ccC9R8db.s 			page 22


 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 113              		.loc 2 988 4 view .LVU22
 114 000a 4FF40042 		mov	r2, #32768
 115              		.syntax unified
 116              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 117 000e 92FAA2F2 		rbit r2, r2
 118              	@ 0 "" 2
 119              	.LVL2:
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 120              		.loc 2 1001 3 view .LVU23
 121              		.loc 2 1001 3 is_stmt 0 view .LVU24
 122              		.thumb
 123              		.syntax unified
 124              	.LBE9:
 125              	.LBE8:
  95:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspInit 1 */
 126              		.loc 1 95 5 view .LVU25
 127 0012 B2FA82F2 		clz	r2, r2
 128 0016 044B     		ldr	r3, .L8+4
 129 0018 1344     		add	r3, r3, r2
 130 001a 9B00     		lsls	r3, r3, #2
 131 001c 0122     		movs	r2, #1
 132 001e 1A60     		str	r2, [r3]
 133              		.loc 1 102 1 view .LVU26
 134 0020 F2E7     		b	.L5
 135              	.L9:
 136 0022 00BF     		.align	2
 137              	.L8:
 138 0024 00280040 		.word	1073752064
 139 0028 00819010 		.word	277905664
 140              		.cfi_endproc
 141              	.LFE131:
 143              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 144              		.align	1
 145              		.global	HAL_RTC_MspDeInit
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 150              	HAL_RTC_MspDeInit:
 151              	.LVL3:
 152              	.LFB132:
 103:Core/Src/stm32f3xx_hal_msp.c **** 
 104:Core/Src/stm32f3xx_hal_msp.c **** /**
ARM GAS  C:\Temp\ccC9R8db.s 			page 23


 105:Core/Src/stm32f3xx_hal_msp.c **** * @brief RTC MSP De-Initialization
 106:Core/Src/stm32f3xx_hal_msp.c **** * This function freeze the hardware resources used in this example
 107:Core/Src/stm32f3xx_hal_msp.c **** * @param hrtc: RTC handle pointer
 108:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 109:Core/Src/stm32f3xx_hal_msp.c **** */
 110:Core/Src/stm32f3xx_hal_msp.c **** void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 111:Core/Src/stm32f3xx_hal_msp.c **** {
 153              		.loc 1 111 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 112:Core/Src/stm32f3xx_hal_msp.c ****   if(hrtc->Instance==RTC)
 158              		.loc 1 112 3 view .LVU28
 159              		.loc 1 112 10 is_stmt 0 view .LVU29
 160 0000 0268     		ldr	r2, [r0]
 161              		.loc 1 112 5 view .LVU30
 162 0002 084B     		ldr	r3, .L13
 163 0004 9A42     		cmp	r2, r3
 164 0006 00D0     		beq	.L12
 165              	.L10:
 113:Core/Src/stm32f3xx_hal_msp.c ****   {
 114:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspDeInit 0 */
 115:Core/Src/stm32f3xx_hal_msp.c **** 
 116:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END RTC_MspDeInit 0 */
 117:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock disable */
 118:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_RTC_DISABLE();
 119:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspDeInit 1 */
 120:Core/Src/stm32f3xx_hal_msp.c **** 
 121:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END RTC_MspDeInit 1 */
 122:Core/Src/stm32f3xx_hal_msp.c ****   }
 123:Core/Src/stm32f3xx_hal_msp.c **** 
 124:Core/Src/stm32f3xx_hal_msp.c **** }
 166              		.loc 1 124 1 view .LVU31
 167 0008 7047     		bx	lr
 168              	.L12:
 118:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspDeInit 1 */
 169              		.loc 1 118 5 is_stmt 1 view .LVU32
 170              	.LVL4:
 171              	.LBB10:
 172              	.LBI10:
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 173              		.loc 2 981 31 view .LVU33
 174              	.LBB11:
 983:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175              		.loc 2 983 3 view .LVU34
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 176              		.loc 2 988 4 view .LVU35
 177 000a 4FF40042 		mov	r2, #32768
 178              		.syntax unified
 179              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 180 000e 92FAA2F2 		rbit r2, r2
 181              	@ 0 "" 2
 182              	.LVL5:
 183              		.loc 2 1001 3 view .LVU36
 184              		.loc 2 1001 3 is_stmt 0 view .LVU37
 185              		.thumb
ARM GAS  C:\Temp\ccC9R8db.s 			page 24


 186              		.syntax unified
 187              	.LBE11:
 188              	.LBE10:
 118:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN RTC_MspDeInit 1 */
 189              		.loc 1 118 5 view .LVU38
 190 0012 B2FA82F2 		clz	r2, r2
 191 0016 044B     		ldr	r3, .L13+4
 192 0018 1344     		add	r3, r3, r2
 193 001a 9B00     		lsls	r3, r3, #2
 194 001c 0022     		movs	r2, #0
 195 001e 1A60     		str	r2, [r3]
 196              		.loc 1 124 1 view .LVU39
 197 0020 F2E7     		b	.L10
 198              	.L14:
 199 0022 00BF     		.align	2
 200              	.L13:
 201 0024 00280040 		.word	1073752064
 202 0028 00819010 		.word	277905664
 203              		.cfi_endproc
 204              	.LFE132:
 206              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
 207              		.align	1
 208              		.global	HAL_TIM_Base_MspInit
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 213              	HAL_TIM_Base_MspInit:
 214              	.LVL6:
 215              	.LFB133:
 125:Core/Src/stm32f3xx_hal_msp.c **** 
 126:Core/Src/stm32f3xx_hal_msp.c **** /**
 127:Core/Src/stm32f3xx_hal_msp.c **** * @brief TIM_Base MSP Initialization
 128:Core/Src/stm32f3xx_hal_msp.c **** * This function configures the hardware resources used in this example
 129:Core/Src/stm32f3xx_hal_msp.c **** * @param htim_base: TIM_Base handle pointer
 130:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 131:Core/Src/stm32f3xx_hal_msp.c **** */
 132:Core/Src/stm32f3xx_hal_msp.c **** void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
 133:Core/Src/stm32f3xx_hal_msp.c **** {
 216              		.loc 1 133 1 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 8
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 134:Core/Src/stm32f3xx_hal_msp.c ****   if(htim_base->Instance==TIM2)
 220              		.loc 1 134 3 view .LVU41
 221              		.loc 1 134 15 is_stmt 0 view .LVU42
 222 0000 0368     		ldr	r3, [r0]
 223              		.loc 1 134 5 view .LVU43
 224 0002 B3F1804F 		cmp	r3, #1073741824
 225 0006 00D0     		beq	.L21
 226 0008 7047     		bx	lr
 227              	.L21:
 133:Core/Src/stm32f3xx_hal_msp.c ****   if(htim_base->Instance==TIM2)
 228              		.loc 1 133 1 view .LVU44
 229 000a 00B5     		push	{lr}
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 14, -4
 232 000c 83B0     		sub	sp, sp, #12
ARM GAS  C:\Temp\ccC9R8db.s 			page 25


 233              		.cfi_def_cfa_offset 16
 135:Core/Src/stm32f3xx_hal_msp.c ****   {
 136:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN TIM2_MspInit 0 */
 137:Core/Src/stm32f3xx_hal_msp.c **** 
 138:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END TIM2_MspInit 0 */
 139:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock enable */
 140:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_TIM2_CLK_ENABLE();
 234              		.loc 1 140 5 is_stmt 1 view .LVU45
 235              	.LBB12:
 236              		.loc 1 140 5 view .LVU46
 237              		.loc 1 140 5 view .LVU47
 238 000e 03F50433 		add	r3, r3, #135168
 239 0012 DA69     		ldr	r2, [r3, #28]
 240 0014 42F00102 		orr	r2, r2, #1
 241 0018 DA61     		str	r2, [r3, #28]
 242              		.loc 1 140 5 view .LVU48
 243 001a DB69     		ldr	r3, [r3, #28]
 244 001c 03F00103 		and	r3, r3, #1
 245 0020 0193     		str	r3, [sp, #4]
 246              		.loc 1 140 5 view .LVU49
 247 0022 019B     		ldr	r3, [sp, #4]
 248              	.LBE12:
 249              		.loc 1 140 5 view .LVU50
 141:Core/Src/stm32f3xx_hal_msp.c ****     /* TIM2 interrupt Init */
 142:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 250              		.loc 1 142 5 view .LVU51
 251 0024 0022     		movs	r2, #0
 252 0026 1146     		mov	r1, r2
 253 0028 1C20     		movs	r0, #28
 254              	.LVL7:
 255              		.loc 1 142 5 is_stmt 0 view .LVU52
 256 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 257              	.LVL8:
 143:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 258              		.loc 1 143 5 is_stmt 1 view .LVU53
 259 002e 1C20     		movs	r0, #28
 260 0030 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 261              	.LVL9:
 144:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN TIM2_MspInit 1 */
 145:Core/Src/stm32f3xx_hal_msp.c **** 
 146:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END TIM2_MspInit 1 */
 147:Core/Src/stm32f3xx_hal_msp.c **** 
 148:Core/Src/stm32f3xx_hal_msp.c ****   }
 149:Core/Src/stm32f3xx_hal_msp.c **** 
 150:Core/Src/stm32f3xx_hal_msp.c **** }
 262              		.loc 1 150 1 is_stmt 0 view .LVU54
 263 0034 03B0     		add	sp, sp, #12
 264              		.cfi_def_cfa_offset 4
 265              		@ sp needed
 266 0036 5DF804FB 		ldr	pc, [sp], #4
 267              		.cfi_endproc
 268              	.LFE133:
 270              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 271              		.align	1
 272              		.global	HAL_TIM_Base_MspDeInit
 273              		.syntax unified
 274              		.thumb
ARM GAS  C:\Temp\ccC9R8db.s 			page 26


 275              		.thumb_func
 277              	HAL_TIM_Base_MspDeInit:
 278              	.LVL10:
 279              	.LFB134:
 151:Core/Src/stm32f3xx_hal_msp.c **** 
 152:Core/Src/stm32f3xx_hal_msp.c **** /**
 153:Core/Src/stm32f3xx_hal_msp.c **** * @brief TIM_Base MSP De-Initialization
 154:Core/Src/stm32f3xx_hal_msp.c **** * This function freeze the hardware resources used in this example
 155:Core/Src/stm32f3xx_hal_msp.c **** * @param htim_base: TIM_Base handle pointer
 156:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 157:Core/Src/stm32f3xx_hal_msp.c **** */
 158:Core/Src/stm32f3xx_hal_msp.c **** void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
 159:Core/Src/stm32f3xx_hal_msp.c **** {
 280              		.loc 1 159 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		.loc 1 159 1 is_stmt 0 view .LVU56
 285 0000 08B5     		push	{r3, lr}
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 160:Core/Src/stm32f3xx_hal_msp.c ****   if(htim_base->Instance==TIM2)
 289              		.loc 1 160 3 is_stmt 1 view .LVU57
 290              		.loc 1 160 15 is_stmt 0 view .LVU58
 291 0002 0368     		ldr	r3, [r0]
 292              		.loc 1 160 5 view .LVU59
 293 0004 B3F1804F 		cmp	r3, #1073741824
 294 0008 00D0     		beq	.L25
 295              	.LVL11:
 296              	.L22:
 161:Core/Src/stm32f3xx_hal_msp.c ****   {
 162:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN TIM2_MspDeInit 0 */
 163:Core/Src/stm32f3xx_hal_msp.c **** 
 164:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END TIM2_MspDeInit 0 */
 165:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock disable */
 166:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_TIM2_CLK_DISABLE();
 167:Core/Src/stm32f3xx_hal_msp.c **** 
 168:Core/Src/stm32f3xx_hal_msp.c ****     /* TIM2 interrupt DeInit */
 169:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_DisableIRQ(TIM2_IRQn);
 170:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 171:Core/Src/stm32f3xx_hal_msp.c **** 
 172:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END TIM2_MspDeInit 1 */
 173:Core/Src/stm32f3xx_hal_msp.c ****   }
 174:Core/Src/stm32f3xx_hal_msp.c **** 
 175:Core/Src/stm32f3xx_hal_msp.c **** }
 297              		.loc 1 175 1 view .LVU60
 298 000a 08BD     		pop	{r3, pc}
 299              	.LVL12:
 300              	.L25:
 166:Core/Src/stm32f3xx_hal_msp.c **** 
 301              		.loc 1 166 5 is_stmt 1 view .LVU61
 302 000c 044A     		ldr	r2, .L26
 303 000e D369     		ldr	r3, [r2, #28]
 304 0010 23F00103 		bic	r3, r3, #1
 305 0014 D361     		str	r3, [r2, #28]
 169:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
ARM GAS  C:\Temp\ccC9R8db.s 			page 27


 306              		.loc 1 169 5 view .LVU62
 307 0016 1C20     		movs	r0, #28
 308              	.LVL13:
 169:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 309              		.loc 1 169 5 is_stmt 0 view .LVU63
 310 0018 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 311              	.LVL14:
 312              		.loc 1 175 1 view .LVU64
 313 001c F5E7     		b	.L22
 314              	.L27:
 315 001e 00BF     		.align	2
 316              	.L26:
 317 0020 00100240 		.word	1073876992
 318              		.cfi_endproc
 319              	.LFE134:
 321              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 322              		.align	1
 323              		.global	HAL_UART_MspInit
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 328              	HAL_UART_MspInit:
 329              	.LVL15:
 330              	.LFB135:
 176:Core/Src/stm32f3xx_hal_msp.c **** 
 177:Core/Src/stm32f3xx_hal_msp.c **** /**
 178:Core/Src/stm32f3xx_hal_msp.c **** * @brief UART MSP Initialization
 179:Core/Src/stm32f3xx_hal_msp.c **** * This function configures the hardware resources used in this example
 180:Core/Src/stm32f3xx_hal_msp.c **** * @param huart: UART handle pointer
 181:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 182:Core/Src/stm32f3xx_hal_msp.c **** */
 183:Core/Src/stm32f3xx_hal_msp.c **** void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 184:Core/Src/stm32f3xx_hal_msp.c **** {
 331              		.loc 1 184 1 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 32
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		.loc 1 184 1 is_stmt 0 view .LVU66
 336 0000 10B5     		push	{r4, lr}
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
 340 0002 88B0     		sub	sp, sp, #32
 341              		.cfi_def_cfa_offset 40
 185:Core/Src/stm32f3xx_hal_msp.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 342              		.loc 1 185 3 is_stmt 1 view .LVU67
 343              		.loc 1 185 20 is_stmt 0 view .LVU68
 344 0004 0023     		movs	r3, #0
 345 0006 0393     		str	r3, [sp, #12]
 346 0008 0493     		str	r3, [sp, #16]
 347 000a 0593     		str	r3, [sp, #20]
 348 000c 0693     		str	r3, [sp, #24]
 349 000e 0793     		str	r3, [sp, #28]
 186:Core/Src/stm32f3xx_hal_msp.c ****   if(huart->Instance==USART3)
 350              		.loc 1 186 3 is_stmt 1 view .LVU69
 351              		.loc 1 186 11 is_stmt 0 view .LVU70
 352 0010 0268     		ldr	r2, [r0]
ARM GAS  C:\Temp\ccC9R8db.s 			page 28


 353              		.loc 1 186 5 view .LVU71
 354 0012 234B     		ldr	r3, .L34
 355 0014 9A42     		cmp	r2, r3
 356 0016 01D0     		beq	.L32
 357              	.LVL16:
 358              	.L28:
 187:Core/Src/stm32f3xx_hal_msp.c ****   {
 188:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USART3_MspInit 0 */
 189:Core/Src/stm32f3xx_hal_msp.c **** 
 190:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USART3_MspInit 0 */
 191:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock enable */
 192:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_USART3_CLK_ENABLE();
 193:Core/Src/stm32f3xx_hal_msp.c **** 
 194:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_GPIOD_CLK_ENABLE();
 195:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 196:Core/Src/stm32f3xx_hal_msp.c ****     PD8     ------> USART3_TX
 197:Core/Src/stm32f3xx_hal_msp.c ****     PD9     ------> USART3_RX
 198:Core/Src/stm32f3xx_hal_msp.c ****     */
 199:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 200:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 201:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 202:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 203:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 204:Core/Src/stm32f3xx_hal_msp.c ****     HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 205:Core/Src/stm32f3xx_hal_msp.c **** 
 206:Core/Src/stm32f3xx_hal_msp.c ****     /* USART3 DMA Init */
 207:Core/Src/stm32f3xx_hal_msp.c ****     /* USART3_RX Init */
 208:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Instance = DMA1_Channel3;
 209:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 210:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 211:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 212:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 213:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 214:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 215:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 216:Core/Src/stm32f3xx_hal_msp.c ****     if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 217:Core/Src/stm32f3xx_hal_msp.c ****     {
 218:Core/Src/stm32f3xx_hal_msp.c ****       Error_Handler();
 219:Core/Src/stm32f3xx_hal_msp.c ****     }
 220:Core/Src/stm32f3xx_hal_msp.c **** 
 221:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 222:Core/Src/stm32f3xx_hal_msp.c **** 
 223:Core/Src/stm32f3xx_hal_msp.c ****     /* USART3 interrupt Init */
 224:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 225:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_EnableIRQ(USART3_IRQn);
 226:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USART3_MspInit 1 */
 227:Core/Src/stm32f3xx_hal_msp.c **** 
 228:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USART3_MspInit 1 */
 229:Core/Src/stm32f3xx_hal_msp.c **** 
 230:Core/Src/stm32f3xx_hal_msp.c ****   }
 231:Core/Src/stm32f3xx_hal_msp.c **** 
 232:Core/Src/stm32f3xx_hal_msp.c **** }
 359              		.loc 1 232 1 view .LVU72
 360 0018 08B0     		add	sp, sp, #32
 361              		.cfi_remember_state
 362              		.cfi_def_cfa_offset 8
 363              		@ sp needed
ARM GAS  C:\Temp\ccC9R8db.s 			page 29


 364 001a 10BD     		pop	{r4, pc}
 365              	.LVL17:
 366              	.L32:
 367              		.cfi_restore_state
 368              		.loc 1 232 1 view .LVU73
 369 001c 0446     		mov	r4, r0
 192:Core/Src/stm32f3xx_hal_msp.c **** 
 370              		.loc 1 192 5 is_stmt 1 view .LVU74
 371              	.LBB13:
 192:Core/Src/stm32f3xx_hal_msp.c **** 
 372              		.loc 1 192 5 view .LVU75
 192:Core/Src/stm32f3xx_hal_msp.c **** 
 373              		.loc 1 192 5 view .LVU76
 374 001e 03F5E433 		add	r3, r3, #116736
 375 0022 DA69     		ldr	r2, [r3, #28]
 376 0024 42F48022 		orr	r2, r2, #262144
 377 0028 DA61     		str	r2, [r3, #28]
 192:Core/Src/stm32f3xx_hal_msp.c **** 
 378              		.loc 1 192 5 view .LVU77
 379 002a DA69     		ldr	r2, [r3, #28]
 380 002c 02F48022 		and	r2, r2, #262144
 381 0030 0192     		str	r2, [sp, #4]
 192:Core/Src/stm32f3xx_hal_msp.c **** 
 382              		.loc 1 192 5 view .LVU78
 383 0032 019A     		ldr	r2, [sp, #4]
 384              	.LBE13:
 192:Core/Src/stm32f3xx_hal_msp.c **** 
 385              		.loc 1 192 5 view .LVU79
 194:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 386              		.loc 1 194 5 view .LVU80
 387              	.LBB14:
 194:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 388              		.loc 1 194 5 view .LVU81
 194:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 389              		.loc 1 194 5 view .LVU82
 390 0034 5A69     		ldr	r2, [r3, #20]
 391 0036 42F48012 		orr	r2, r2, #1048576
 392 003a 5A61     		str	r2, [r3, #20]
 194:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 393              		.loc 1 194 5 view .LVU83
 394 003c 5B69     		ldr	r3, [r3, #20]
 395 003e 03F48013 		and	r3, r3, #1048576
 396 0042 0293     		str	r3, [sp, #8]
 194:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 397              		.loc 1 194 5 view .LVU84
 398 0044 029B     		ldr	r3, [sp, #8]
 399              	.LBE14:
 194:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 400              		.loc 1 194 5 view .LVU85
 199:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 401              		.loc 1 199 5 view .LVU86
 199:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 402              		.loc 1 199 25 is_stmt 0 view .LVU87
 403 0046 4FF44073 		mov	r3, #768
 404 004a 0393     		str	r3, [sp, #12]
 200:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 405              		.loc 1 200 5 is_stmt 1 view .LVU88
ARM GAS  C:\Temp\ccC9R8db.s 			page 30


 200:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 406              		.loc 1 200 26 is_stmt 0 view .LVU89
 407 004c 0223     		movs	r3, #2
 408 004e 0493     		str	r3, [sp, #16]
 201:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 409              		.loc 1 201 5 is_stmt 1 view .LVU90
 202:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 410              		.loc 1 202 5 view .LVU91
 202:Core/Src/stm32f3xx_hal_msp.c ****     GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 411              		.loc 1 202 27 is_stmt 0 view .LVU92
 412 0050 0323     		movs	r3, #3
 413 0052 0693     		str	r3, [sp, #24]
 203:Core/Src/stm32f3xx_hal_msp.c ****     HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 414              		.loc 1 203 5 is_stmt 1 view .LVU93
 203:Core/Src/stm32f3xx_hal_msp.c ****     HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 415              		.loc 1 203 31 is_stmt 0 view .LVU94
 416 0054 0723     		movs	r3, #7
 417 0056 0793     		str	r3, [sp, #28]
 204:Core/Src/stm32f3xx_hal_msp.c **** 
 418              		.loc 1 204 5 is_stmt 1 view .LVU95
 419 0058 03A9     		add	r1, sp, #12
 420 005a 1248     		ldr	r0, .L34+4
 421              	.LVL18:
 204:Core/Src/stm32f3xx_hal_msp.c **** 
 422              		.loc 1 204 5 is_stmt 0 view .LVU96
 423 005c FFF7FEFF 		bl	HAL_GPIO_Init
 424              	.LVL19:
 208:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 425              		.loc 1 208 5 is_stmt 1 view .LVU97
 208:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 426              		.loc 1 208 29 is_stmt 0 view .LVU98
 427 0060 1148     		ldr	r0, .L34+8
 428 0062 124B     		ldr	r3, .L34+12
 429 0064 0360     		str	r3, [r0]
 209:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 430              		.loc 1 209 5 is_stmt 1 view .LVU99
 209:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 431              		.loc 1 209 35 is_stmt 0 view .LVU100
 432 0066 0023     		movs	r3, #0
 433 0068 4360     		str	r3, [r0, #4]
 210:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 434              		.loc 1 210 5 is_stmt 1 view .LVU101
 210:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 435              		.loc 1 210 35 is_stmt 0 view .LVU102
 436 006a 8360     		str	r3, [r0, #8]
 211:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 437              		.loc 1 211 5 is_stmt 1 view .LVU103
 211:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 438              		.loc 1 211 32 is_stmt 0 view .LVU104
 439 006c 8022     		movs	r2, #128
 440 006e C260     		str	r2, [r0, #12]
 212:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 441              		.loc 1 212 5 is_stmt 1 view .LVU105
 212:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 442              		.loc 1 212 45 is_stmt 0 view .LVU106
 443 0070 0361     		str	r3, [r0, #16]
 213:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
ARM GAS  C:\Temp\ccC9R8db.s 			page 31


 444              		.loc 1 213 5 is_stmt 1 view .LVU107
 213:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 445              		.loc 1 213 42 is_stmt 0 view .LVU108
 446 0072 4361     		str	r3, [r0, #20]
 214:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 447              		.loc 1 214 5 is_stmt 1 view .LVU109
 214:Core/Src/stm32f3xx_hal_msp.c ****     hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 448              		.loc 1 214 30 is_stmt 0 view .LVU110
 449 0074 2022     		movs	r2, #32
 450 0076 8261     		str	r2, [r0, #24]
 215:Core/Src/stm32f3xx_hal_msp.c ****     if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 451              		.loc 1 215 5 is_stmt 1 view .LVU111
 215:Core/Src/stm32f3xx_hal_msp.c ****     if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 452              		.loc 1 215 34 is_stmt 0 view .LVU112
 453 0078 C361     		str	r3, [r0, #28]
 216:Core/Src/stm32f3xx_hal_msp.c ****     {
 454              		.loc 1 216 5 is_stmt 1 view .LVU113
 216:Core/Src/stm32f3xx_hal_msp.c ****     {
 455              		.loc 1 216 9 is_stmt 0 view .LVU114
 456 007a FFF7FEFF 		bl	HAL_DMA_Init
 457              	.LVL20:
 216:Core/Src/stm32f3xx_hal_msp.c ****     {
 458              		.loc 1 216 8 view .LVU115
 459 007e 58B9     		cbnz	r0, .L33
 460              	.L30:
 221:Core/Src/stm32f3xx_hal_msp.c **** 
 461              		.loc 1 221 5 is_stmt 1 view .LVU116
 221:Core/Src/stm32f3xx_hal_msp.c **** 
 462              		.loc 1 221 5 view .LVU117
 463 0080 094B     		ldr	r3, .L34+8
 464 0082 6367     		str	r3, [r4, #116]
 221:Core/Src/stm32f3xx_hal_msp.c **** 
 465              		.loc 1 221 5 view .LVU118
 466 0084 5C62     		str	r4, [r3, #36]
 221:Core/Src/stm32f3xx_hal_msp.c **** 
 467              		.loc 1 221 5 view .LVU119
 224:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_EnableIRQ(USART3_IRQn);
 468              		.loc 1 224 5 view .LVU120
 469 0086 0022     		movs	r2, #0
 470 0088 1146     		mov	r1, r2
 471 008a 2720     		movs	r0, #39
 472 008c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 473              	.LVL21:
 225:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USART3_MspInit 1 */
 474              		.loc 1 225 5 view .LVU121
 475 0090 2720     		movs	r0, #39
 476 0092 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 477              	.LVL22:
 478              		.loc 1 232 1 is_stmt 0 view .LVU122
 479 0096 BFE7     		b	.L28
 480              	.L33:
 218:Core/Src/stm32f3xx_hal_msp.c ****     }
 481              		.loc 1 218 7 is_stmt 1 view .LVU123
 482 0098 FFF7FEFF 		bl	Error_Handler
 483              	.LVL23:
 484 009c F0E7     		b	.L30
 485              	.L35:
ARM GAS  C:\Temp\ccC9R8db.s 			page 32


 486 009e 00BF     		.align	2
 487              	.L34:
 488 00a0 00480040 		.word	1073760256
 489 00a4 000C0048 		.word	1207962624
 490 00a8 00000000 		.word	hdma_usart3_rx
 491 00ac 30000240 		.word	1073872944
 492              		.cfi_endproc
 493              	.LFE135:
 495              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 496              		.align	1
 497              		.global	HAL_UART_MspDeInit
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 502              	HAL_UART_MspDeInit:
 503              	.LVL24:
 504              	.LFB136:
 233:Core/Src/stm32f3xx_hal_msp.c **** 
 234:Core/Src/stm32f3xx_hal_msp.c **** /**
 235:Core/Src/stm32f3xx_hal_msp.c **** * @brief UART MSP De-Initialization
 236:Core/Src/stm32f3xx_hal_msp.c **** * This function freeze the hardware resources used in this example
 237:Core/Src/stm32f3xx_hal_msp.c **** * @param huart: UART handle pointer
 238:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 239:Core/Src/stm32f3xx_hal_msp.c **** */
 240:Core/Src/stm32f3xx_hal_msp.c **** void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
 241:Core/Src/stm32f3xx_hal_msp.c **** {
 505              		.loc 1 241 1 view -0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 242:Core/Src/stm32f3xx_hal_msp.c ****   if(huart->Instance==USART3)
 509              		.loc 1 242 3 view .LVU125
 510              		.loc 1 242 11 is_stmt 0 view .LVU126
 511 0000 0268     		ldr	r2, [r0]
 512              		.loc 1 242 5 view .LVU127
 513 0002 0B4B     		ldr	r3, .L43
 514 0004 9A42     		cmp	r2, r3
 515 0006 00D0     		beq	.L42
 516 0008 7047     		bx	lr
 517              	.L42:
 241:Core/Src/stm32f3xx_hal_msp.c ****   if(huart->Instance==USART3)
 518              		.loc 1 241 1 view .LVU128
 519 000a 10B5     		push	{r4, lr}
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 4, -8
 522              		.cfi_offset 14, -4
 523 000c 0446     		mov	r4, r0
 243:Core/Src/stm32f3xx_hal_msp.c ****   {
 244:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USART3_MspDeInit 0 */
 245:Core/Src/stm32f3xx_hal_msp.c **** 
 246:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USART3_MspDeInit 0 */
 247:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock disable */
 248:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_USART3_CLK_DISABLE();
 524              		.loc 1 248 5 is_stmt 1 view .LVU129
 525 000e 094A     		ldr	r2, .L43+4
 526 0010 D369     		ldr	r3, [r2, #28]
 527 0012 23F48023 		bic	r3, r3, #262144
ARM GAS  C:\Temp\ccC9R8db.s 			page 33


 528 0016 D361     		str	r3, [r2, #28]
 249:Core/Src/stm32f3xx_hal_msp.c **** 
 250:Core/Src/stm32f3xx_hal_msp.c ****     /**USART3 GPIO Configuration
 251:Core/Src/stm32f3xx_hal_msp.c ****     PD8     ------> USART3_TX
 252:Core/Src/stm32f3xx_hal_msp.c ****     PD9     ------> USART3_RX
 253:Core/Src/stm32f3xx_hal_msp.c ****     */
 254:Core/Src/stm32f3xx_hal_msp.c ****     HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 529              		.loc 1 254 5 view .LVU130
 530 0018 4FF44071 		mov	r1, #768
 531 001c 0648     		ldr	r0, .L43+8
 532              	.LVL25:
 533              		.loc 1 254 5 is_stmt 0 view .LVU131
 534 001e FFF7FEFF 		bl	HAL_GPIO_DeInit
 535              	.LVL26:
 255:Core/Src/stm32f3xx_hal_msp.c **** 
 256:Core/Src/stm32f3xx_hal_msp.c ****     /* USART3 DMA DeInit */
 257:Core/Src/stm32f3xx_hal_msp.c ****     HAL_DMA_DeInit(huart->hdmarx);
 536              		.loc 1 257 5 is_stmt 1 view .LVU132
 537 0022 606F     		ldr	r0, [r4, #116]
 538 0024 FFF7FEFF 		bl	HAL_DMA_DeInit
 539              	.LVL27:
 258:Core/Src/stm32f3xx_hal_msp.c **** 
 259:Core/Src/stm32f3xx_hal_msp.c ****     /* USART3 interrupt DeInit */
 260:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_DisableIRQ(USART3_IRQn);
 540              		.loc 1 260 5 view .LVU133
 541 0028 2720     		movs	r0, #39
 542 002a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 543              	.LVL28:
 261:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USART3_MspDeInit 1 */
 262:Core/Src/stm32f3xx_hal_msp.c **** 
 263:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USART3_MspDeInit 1 */
 264:Core/Src/stm32f3xx_hal_msp.c ****   }
 265:Core/Src/stm32f3xx_hal_msp.c **** 
 266:Core/Src/stm32f3xx_hal_msp.c **** }
 544              		.loc 1 266 1 is_stmt 0 view .LVU134
 545 002e 10BD     		pop	{r4, pc}
 546              	.LVL29:
 547              	.L44:
 548              		.loc 1 266 1 view .LVU135
 549              		.align	2
 550              	.L43:
 551 0030 00480040 		.word	1073760256
 552 0034 00100240 		.word	1073876992
 553 0038 000C0048 		.word	1207962624
 554              		.cfi_endproc
 555              	.LFE136:
 557              		.section	.text.HAL_PCD_MspInit,"ax",%progbits
 558              		.align	1
 559              		.global	HAL_PCD_MspInit
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 564              	HAL_PCD_MspInit:
 565              	.LVL30:
 566              	.LFB137:
 267:Core/Src/stm32f3xx_hal_msp.c **** 
 268:Core/Src/stm32f3xx_hal_msp.c **** /**
ARM GAS  C:\Temp\ccC9R8db.s 			page 34


 269:Core/Src/stm32f3xx_hal_msp.c **** * @brief PCD MSP Initialization
 270:Core/Src/stm32f3xx_hal_msp.c **** * This function configures the hardware resources used in this example
 271:Core/Src/stm32f3xx_hal_msp.c **** * @param hpcd: PCD handle pointer
 272:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 273:Core/Src/stm32f3xx_hal_msp.c **** */
 274:Core/Src/stm32f3xx_hal_msp.c **** void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
 275:Core/Src/stm32f3xx_hal_msp.c **** {
 567              		.loc 1 275 1 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 8
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 276:Core/Src/stm32f3xx_hal_msp.c ****   if(hpcd->Instance==USB)
 571              		.loc 1 276 3 view .LVU137
 572              		.loc 1 276 10 is_stmt 0 view .LVU138
 573 0000 0268     		ldr	r2, [r0]
 574              		.loc 1 276 5 view .LVU139
 575 0002 0E4B     		ldr	r3, .L52
 576 0004 9A42     		cmp	r2, r3
 577 0006 00D0     		beq	.L51
 578 0008 7047     		bx	lr
 579              	.L51:
 275:Core/Src/stm32f3xx_hal_msp.c ****   if(hpcd->Instance==USB)
 580              		.loc 1 275 1 view .LVU140
 581 000a 00B5     		push	{lr}
 582              		.cfi_def_cfa_offset 4
 583              		.cfi_offset 14, -4
 584 000c 83B0     		sub	sp, sp, #12
 585              		.cfi_def_cfa_offset 16
 277:Core/Src/stm32f3xx_hal_msp.c ****   {
 278:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USB_MspInit 0 */
 279:Core/Src/stm32f3xx_hal_msp.c **** 
 280:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USB_MspInit 0 */
 281:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock enable */
 282:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_USB_CLK_ENABLE();
 586              		.loc 1 282 5 is_stmt 1 view .LVU141
 587              	.LBB15:
 588              		.loc 1 282 5 view .LVU142
 589              		.loc 1 282 5 view .LVU143
 590 000e 03F5DA33 		add	r3, r3, #111616
 591 0012 DA69     		ldr	r2, [r3, #28]
 592 0014 42F40002 		orr	r2, r2, #8388608
 593 0018 DA61     		str	r2, [r3, #28]
 594              		.loc 1 282 5 view .LVU144
 595 001a DB69     		ldr	r3, [r3, #28]
 596 001c 03F40003 		and	r3, r3, #8388608
 597 0020 0193     		str	r3, [sp, #4]
 598              		.loc 1 282 5 view .LVU145
 599 0022 019B     		ldr	r3, [sp, #4]
 600              	.LBE15:
 601              		.loc 1 282 5 view .LVU146
 283:Core/Src/stm32f3xx_hal_msp.c ****     /* USB interrupt Init */
 284:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 602              		.loc 1 284 5 view .LVU147
 603 0024 0022     		movs	r2, #0
 604 0026 1146     		mov	r1, r2
 605 0028 1420     		movs	r0, #20
 606              	.LVL31:
ARM GAS  C:\Temp\ccC9R8db.s 			page 35


 607              		.loc 1 284 5 is_stmt 0 view .LVU148
 608 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 609              	.LVL32:
 285:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 610              		.loc 1 285 5 is_stmt 1 view .LVU149
 611 002e 1420     		movs	r0, #20
 612 0030 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 613              	.LVL33:
 286:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USB_MspInit 1 */
 287:Core/Src/stm32f3xx_hal_msp.c **** 
 288:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USB_MspInit 1 */
 289:Core/Src/stm32f3xx_hal_msp.c **** 
 290:Core/Src/stm32f3xx_hal_msp.c ****   }
 291:Core/Src/stm32f3xx_hal_msp.c **** 
 292:Core/Src/stm32f3xx_hal_msp.c **** }
 614              		.loc 1 292 1 is_stmt 0 view .LVU150
 615 0034 03B0     		add	sp, sp, #12
 616              		.cfi_def_cfa_offset 4
 617              		@ sp needed
 618 0036 5DF804FB 		ldr	pc, [sp], #4
 619              	.L53:
 620 003a 00BF     		.align	2
 621              	.L52:
 622 003c 005C0040 		.word	1073765376
 623              		.cfi_endproc
 624              	.LFE137:
 626              		.section	.text.HAL_PCD_MspDeInit,"ax",%progbits
 627              		.align	1
 628              		.global	HAL_PCD_MspDeInit
 629              		.syntax unified
 630              		.thumb
 631              		.thumb_func
 633              	HAL_PCD_MspDeInit:
 634              	.LVL34:
 635              	.LFB138:
 293:Core/Src/stm32f3xx_hal_msp.c **** 
 294:Core/Src/stm32f3xx_hal_msp.c **** /**
 295:Core/Src/stm32f3xx_hal_msp.c **** * @brief PCD MSP De-Initialization
 296:Core/Src/stm32f3xx_hal_msp.c **** * This function freeze the hardware resources used in this example
 297:Core/Src/stm32f3xx_hal_msp.c **** * @param hpcd: PCD handle pointer
 298:Core/Src/stm32f3xx_hal_msp.c **** * @retval None
 299:Core/Src/stm32f3xx_hal_msp.c **** */
 300:Core/Src/stm32f3xx_hal_msp.c **** void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
 301:Core/Src/stm32f3xx_hal_msp.c **** {
 636              		.loc 1 301 1 is_stmt 1 view -0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              		.loc 1 301 1 is_stmt 0 view .LVU152
 641 0000 08B5     		push	{r3, lr}
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 3, -8
 644              		.cfi_offset 14, -4
 302:Core/Src/stm32f3xx_hal_msp.c ****   if(hpcd->Instance==USB)
 645              		.loc 1 302 3 is_stmt 1 view .LVU153
 646              		.loc 1 302 10 is_stmt 0 view .LVU154
 647 0002 0268     		ldr	r2, [r0]
ARM GAS  C:\Temp\ccC9R8db.s 			page 36


 648              		.loc 1 302 5 view .LVU155
 649 0004 064B     		ldr	r3, .L58
 650 0006 9A42     		cmp	r2, r3
 651 0008 00D0     		beq	.L57
 652              	.LVL35:
 653              	.L54:
 303:Core/Src/stm32f3xx_hal_msp.c ****   {
 304:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USB_MspDeInit 0 */
 305:Core/Src/stm32f3xx_hal_msp.c **** 
 306:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USB_MspDeInit 0 */
 307:Core/Src/stm32f3xx_hal_msp.c ****     /* Peripheral clock disable */
 308:Core/Src/stm32f3xx_hal_msp.c ****     __HAL_RCC_USB_CLK_DISABLE();
 309:Core/Src/stm32f3xx_hal_msp.c **** 
 310:Core/Src/stm32f3xx_hal_msp.c ****     /* USB interrupt DeInit */
 311:Core/Src/stm32f3xx_hal_msp.c ****     HAL_NVIC_DisableIRQ(USB_LP_CAN_RX0_IRQn);
 312:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USB_MspDeInit 1 */
 313:Core/Src/stm32f3xx_hal_msp.c **** 
 314:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE END USB_MspDeInit 1 */
 315:Core/Src/stm32f3xx_hal_msp.c ****   }
 316:Core/Src/stm32f3xx_hal_msp.c **** 
 317:Core/Src/stm32f3xx_hal_msp.c **** }
 654              		.loc 1 317 1 view .LVU156
 655 000a 08BD     		pop	{r3, pc}
 656              	.LVL36:
 657              	.L57:
 308:Core/Src/stm32f3xx_hal_msp.c **** 
 658              		.loc 1 308 5 is_stmt 1 view .LVU157
 659 000c 054A     		ldr	r2, .L58+4
 660 000e D369     		ldr	r3, [r2, #28]
 661 0010 23F40003 		bic	r3, r3, #8388608
 662 0014 D361     		str	r3, [r2, #28]
 311:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USB_MspDeInit 1 */
 663              		.loc 1 311 5 view .LVU158
 664 0016 1420     		movs	r0, #20
 665              	.LVL37:
 311:Core/Src/stm32f3xx_hal_msp.c ****   /* USER CODE BEGIN USB_MspDeInit 1 */
 666              		.loc 1 311 5 is_stmt 0 view .LVU159
 667 0018 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 668              	.LVL38:
 669              		.loc 1 317 1 view .LVU160
 670 001c F5E7     		b	.L54
 671              	.L59:
 672 001e 00BF     		.align	2
 673              	.L58:
 674 0020 005C0040 		.word	1073765376
 675 0024 00100240 		.word	1073876992
 676              		.cfi_endproc
 677              	.LFE138:
 679              		.text
 680              	.Letext0:
 681              		.file 3 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 682              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 683              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 684              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 685              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 686              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 687              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
ARM GAS  C:\Temp\ccC9R8db.s 			page 37


 688              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usb.h"
 689              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
 690              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rtc.h"
 691              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 692              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 693              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 694              		.file 16 "Core/Inc/main.h"
ARM GAS  C:\Temp\ccC9R8db.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f3xx_hal_msp.c
  C:\Temp\ccC9R8db.s:21     .text.HAL_MspInit:00000000 $t
  C:\Temp\ccC9R8db.s:27     .text.HAL_MspInit:00000000 HAL_MspInit
  C:\Temp\ccC9R8db.s:75     .text.HAL_MspInit:0000002c $d
  C:\Temp\ccC9R8db.s:80     .text.HAL_RTC_MspInit:00000000 $t
  C:\Temp\ccC9R8db.s:86     .text.HAL_RTC_MspInit:00000000 HAL_RTC_MspInit
  C:\Temp\ccC9R8db.s:138    .text.HAL_RTC_MspInit:00000024 $d
  C:\Temp\ccC9R8db.s:144    .text.HAL_RTC_MspDeInit:00000000 $t
  C:\Temp\ccC9R8db.s:150    .text.HAL_RTC_MspDeInit:00000000 HAL_RTC_MspDeInit
  C:\Temp\ccC9R8db.s:201    .text.HAL_RTC_MspDeInit:00000024 $d
  C:\Temp\ccC9R8db.s:207    .text.HAL_TIM_Base_MspInit:00000000 $t
  C:\Temp\ccC9R8db.s:213    .text.HAL_TIM_Base_MspInit:00000000 HAL_TIM_Base_MspInit
  C:\Temp\ccC9R8db.s:271    .text.HAL_TIM_Base_MspDeInit:00000000 $t
  C:\Temp\ccC9R8db.s:277    .text.HAL_TIM_Base_MspDeInit:00000000 HAL_TIM_Base_MspDeInit
  C:\Temp\ccC9R8db.s:317    .text.HAL_TIM_Base_MspDeInit:00000020 $d
  C:\Temp\ccC9R8db.s:322    .text.HAL_UART_MspInit:00000000 $t
  C:\Temp\ccC9R8db.s:328    .text.HAL_UART_MspInit:00000000 HAL_UART_MspInit
  C:\Temp\ccC9R8db.s:488    .text.HAL_UART_MspInit:000000a0 $d
  C:\Temp\ccC9R8db.s:496    .text.HAL_UART_MspDeInit:00000000 $t
  C:\Temp\ccC9R8db.s:502    .text.HAL_UART_MspDeInit:00000000 HAL_UART_MspDeInit
  C:\Temp\ccC9R8db.s:551    .text.HAL_UART_MspDeInit:00000030 $d
  C:\Temp\ccC9R8db.s:558    .text.HAL_PCD_MspInit:00000000 $t
  C:\Temp\ccC9R8db.s:564    .text.HAL_PCD_MspInit:00000000 HAL_PCD_MspInit
  C:\Temp\ccC9R8db.s:622    .text.HAL_PCD_MspInit:0000003c $d
  C:\Temp\ccC9R8db.s:627    .text.HAL_PCD_MspDeInit:00000000 $t
  C:\Temp\ccC9R8db.s:633    .text.HAL_PCD_MspDeInit:00000000 HAL_PCD_MspDeInit
  C:\Temp\ccC9R8db.s:674    .text.HAL_PCD_MspDeInit:00000020 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_NVIC_DisableIRQ
HAL_GPIO_Init
HAL_DMA_Init
Error_Handler
hdma_usart3_rx
HAL_GPIO_DeInit
HAL_DMA_DeInit
