ARM GAS  C:\Temp\ccmIEjMS.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.configureTimer,"ax",%progbits
  21              		.align	1
  22              		.global	configureTimer
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	configureTimer:
  28              	.LVL0:
  29              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "VL53L8A1_Simulink.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccmIEjMS.s 			page 2


  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** UART_HandleTypeDef huart2;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE BEGIN PV */
  48:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_centre;
  49:Core/Src/main.c **** extern RANGING_SENSOR_ProfileConfig_t Profile;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  52:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_TIM2_Init(void);
  58:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  59:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PFP */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  64:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  65:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2);
  66:Core/Src/main.c **** uint8_t bigBuffer[8+3+3] = {0};
  67:Core/Src/main.c **** uint8_t clearToSend = 0;
  68:Core/Src/main.c **** uint8_t calibrated = 0;
  69:Core/Src/main.c **** int32_t counter = 0;
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** void configureTimer(float desired_frequency) {
  30              		.loc 1 71 46 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  72:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
  73:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
  35              		.loc 1 73 5 view .LVU1
  36              		.loc 1 73 11 is_stmt 0 view .LVU2
  37 0000 154B     		ldr	r3, .L6
  38 0002 D3ED007A 		vldr.32	s15, [r3]	@ int
  39 0006 F8EE677A 		vcvt.f32.u32	s15, s15
  40              	.LVL1:
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
ARM GAS  C:\Temp\ccmIEjMS.s 			page 3


  76:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
  41              		.loc 1 76 5 is_stmt 1 view .LVU3
  42              		.loc 1 76 11 is_stmt 0 view .LVU4
  43 000a C7EE806A 		vdiv.f32	s13, s15, s0
  44              	.LVL2:
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
  79:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
  45              		.loc 1 79 5 is_stmt 1 view .LVU5
  46              		.loc 1 79 50 is_stmt 0 view .LVU6
  47 000e DFED137A 		vldr.32	s15, .L6+4
  48              	.LVL3:
  49              		.loc 1 79 50 view .LVU7
  50 0012 66EEA77A 		vmul.f32	s15, s13, s15
  51              		.loc 1 79 14 view .LVU8
  52 0016 FCEEE77A 		vcvt.u32.f32	s15, s15
  53 001a 17EE903A 		vmov	r3, s15	@ int
  54              	.LVL4:
  80:Core/Src/main.c ****     if (prescaler > 65535) {
  55              		.loc 1 80 5 is_stmt 1 view .LVU9
  56              		.loc 1 80 8 is_stmt 0 view .LVU10
  57 001e B3F5803F 		cmp	r3, #65536
  58 0022 01D3     		bcc	.L2
  81:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
  59              		.loc 1 81 19 view .LVU11
  60 0024 4FF6FF73 		movw	r3, #65535
  61              	.LVL5:
  62              	.L2:
  82:Core/Src/main.c ****     }
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
  85:Core/Src/main.c ****     uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
  63              		.loc 1 85 5 is_stmt 1 view .LVU12
  64              		.loc 1 85 57 is_stmt 0 view .LVU13
  65 0028 5A1C     		adds	r2, r3, #1
  66 002a 07EE102A 		vmov	s14, r2	@ int
  67              		.loc 1 85 44 view .LVU14
  68 002e B8EE477A 		vcvt.f32.u32	s14, s14
  69 0032 C6EE877A 		vdiv.f32	s15, s13, s14
  70              		.loc 1 85 14 view .LVU15
  71 0036 FCEEE77A 		vcvt.u32.f32	s15, s15
  72 003a 17EE902A 		vmov	r2, s15	@ int
  73              	.LVL6:
  86:Core/Src/main.c ****     if (arr > 65535) {
  74              		.loc 1 86 5 is_stmt 1 view .LVU16
  75              		.loc 1 86 8 is_stmt 0 view .LVU17
  76 003e B2F5803F 		cmp	r2, #65536
  77 0042 01D3     		bcc	.L3
  87:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
  78              		.loc 1 87 13 view .LVU18
  79 0044 4FF6FF72 		movw	r2, #65535
  80              	.LVL7:
  81              	.L3:
  88:Core/Src/main.c ****     }
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****     // Update the timer registers
  91:Core/Src/main.c ****     TIM2->PSC = prescaler;   // Set the prescaler
ARM GAS  C:\Temp\ccmIEjMS.s 			page 4


  82              		.loc 1 91 5 is_stmt 1 view .LVU19
  83              		.loc 1 91 15 is_stmt 0 view .LVU20
  84 0048 4FF08041 		mov	r1, #1073741824
  85 004c 8B62     		str	r3, [r1, #40]
  86              	.LVL8:
  92:Core/Src/main.c ****     TIM2->ARR = arr;         // Set the auto-reload register
  87              		.loc 1 92 5 is_stmt 1 view .LVU21
  88              		.loc 1 92 15 is_stmt 0 view .LVU22
  89 004e CA62     		str	r2, [r1, #44]
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
  95:Core/Src/main.c ****     TIM2->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
  90              		.loc 1 95 5 is_stmt 1 view .LVU23
  91              		.loc 1 95 15 is_stmt 0 view .LVU24
  92 0050 0123     		movs	r3, #1
  93              	.LVL9:
  94              		.loc 1 95 15 view .LVU25
  95 0052 4B61     		str	r3, [r1, #20]
  96:Core/Src/main.c **** }
  96              		.loc 1 96 1 view .LVU26
  97 0054 7047     		bx	lr
  98              	.L7:
  99 0056 00BF     		.align	2
 100              	.L6:
 101 0058 00000000 		.word	SystemCoreClock
 102 005c 00008037 		.word	931135488
 103              		.cfi_endproc
 104              	.LFE137:
 106              		.section	.text.initialCalibration,"ax",%progbits
 107              		.align	1
 108              		.global	initialCalibration
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 113              	initialCalibration:
 114              	.LFB138:
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** void initialCalibration(){
 115              		.loc 1 98 26 is_stmt 1 view -0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119 0000 10B5     		push	{r4, lr}
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 4, -8
 122              		.cfi_offset 14, -4
  99:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 123              		.loc 1 99 3 view .LVU28
 124 0002 154C     		ldr	r4, .L12
 125 0004 0123     		movs	r3, #1
 126 0006 0E22     		movs	r2, #14
 127 0008 2146     		mov	r1, r4
 128 000a 1448     		ldr	r0, .L12+4
 129 000c FFF7FEFF 		bl	HAL_UART_Receive
 130              	.LVL10:
 100:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 131              		.loc 1 100 3 view .LVU29
ARM GAS  C:\Temp\ccmIEjMS.s 			page 5


 132              		.loc 1 100 16 is_stmt 0 view .LVU30
 133 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 134              		.loc 1 100 6 view .LVU31
 135 0012 4A2B     		cmp	r3, #74
 136 0014 00D0     		beq	.L11
 137              	.L8:
 101:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 102:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 103:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 104:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 105:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 106:Core/Src/main.c ****         calibrated = 1;
 107:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 108:Core/Src/main.c ****         configureTimer(Profile.Frequency);
 109:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 110:Core/Src/main.c ****   }
 111:Core/Src/main.c **** }
 138              		.loc 1 111 1 view .LVU32
 139 0016 10BD     		pop	{r4, pc}
 140              	.L11:
 101:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 141              		.loc 1 101 16 discriminator 1 view .LVU33
 142 0018 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 100:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 143              		.loc 1 100 41 discriminator 1 view .LVU34
 144 001a 5F2B     		cmp	r3, #95
 145 001c FBD1     		bne	.L8
 102:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 146              		.loc 1 102 16 view .LVU35
 147 001e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 101:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 148              		.loc 1 101 41 view .LVU36
 149 0020 412B     		cmp	r3, #65
 150 0022 F8D1     		bne	.L8
 103:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 151              		.loc 1 103 16 view .LVU37
 152 0024 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 102:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 153              		.loc 1 102 41 view .LVU38
 154 0026 412B     		cmp	r3, #65
 155 0028 F5D1     		bne	.L8
 104:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 156              		.loc 1 104 16 view .LVU39
 157 002a 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 103:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 158              		.loc 1 103 69 view .LVU40
 159 002c 5F2B     		cmp	r3, #95
 160 002e F2D1     		bne	.L8
 105:Core/Src/main.c ****         calibrated = 1;
 161              		.loc 1 105 16 view .LVU41
 162 0030 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 104:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 163              		.loc 1 104 69 view .LVU42
 164 0032 4A2B     		cmp	r3, #74
 165 0034 EFD1     		bne	.L8
 106:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 166              		.loc 1 106 9 is_stmt 1 view .LVU43
ARM GAS  C:\Temp\ccmIEjMS.s 			page 6


 106:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 167              		.loc 1 106 20 is_stmt 0 view .LVU44
 168 0036 0A4B     		ldr	r3, .L12+8
 169 0038 0122     		movs	r2, #1
 170 003a 1A70     		strb	r2, [r3]
 107:Core/Src/main.c ****         configureTimer(Profile.Frequency);
 171              		.loc 1 107 9 is_stmt 1 view .LVU45
 172 003c 2046     		mov	r0, r4
 173 003e FFF7FEFF 		bl	receivedFromSimulink
 174              	.LVL11:
 108:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 175              		.loc 1 108 9 view .LVU46
 108:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 176              		.loc 1 108 31 is_stmt 0 view .LVU47
 177 0042 084B     		ldr	r3, .L12+12
 178 0044 93ED020A 		vldr.32	s0, [r3, #8]	@ int
 108:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 179              		.loc 1 108 9 view .LVU48
 180 0048 B8EE400A 		vcvt.f32.u32	s0, s0
 181 004c FFF7FEFF 		bl	configureTimer
 182              	.LVL12:
 109:Core/Src/main.c ****   }
 183              		.loc 1 109 9 is_stmt 1 view .LVU49
 184 0050 0548     		ldr	r0, .L12+16
 185 0052 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 186              	.LVL13:
 187              		.loc 1 111 1 is_stmt 0 view .LVU50
 188 0056 DEE7     		b	.L8
 189              	.L13:
 190              		.align	2
 191              	.L12:
 192 0058 00000000 		.word	bigBuffer
 193 005c 00000000 		.word	huart2
 194 0060 00000000 		.word	calibrated
 195 0064 00000000 		.word	Profile
 196 0068 00000000 		.word	htim2
 197              		.cfi_endproc
 198              	.LFE138:
 200              		.section	.text.MX_GPIO_Init,"ax",%progbits
 201              		.align	1
 202              		.global	MX_GPIO_Init
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 207              	MX_GPIO_Init:
 208              	.LFB143:
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* USER CODE END 0 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** /**
 117:Core/Src/main.c ****   * @brief  The application entry point.
 118:Core/Src/main.c ****   * @retval int
 119:Core/Src/main.c ****   */
 120:Core/Src/main.c **** int main(void)
 121:Core/Src/main.c **** {
 122:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccmIEjMS.s 			page 7


 123:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* USER CODE END 1 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 130:Core/Src/main.c ****   HAL_Init();
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE END Init */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* Configure the system clock */
 137:Core/Src/main.c ****   SystemClock_Config();
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE END SysInit */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* Initialize all configured peripherals */
 144:Core/Src/main.c ****   MX_GPIO_Init();
 145:Core/Src/main.c ****   MX_TIM2_Init();
 146:Core/Src/main.c ****   MX_USART2_UART_Init();
 147:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 148:Core/Src/main.c ****   while (calibrated != 1){
 149:Core/Src/main.c ****     initialCalibration();
 150:Core/Src/main.c ****   }
 151:Core/Src/main.c ****   initVL53L8A1();
 152:Core/Src/main.c ****   /* USER CODE END 2 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* Infinite loop */
 155:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 156:Core/Src/main.c ****   while (1)
 157:Core/Src/main.c ****   {
 158:Core/Src/main.c ****     getVL53L8A1();
 159:Core/Src/main.c ****     if (clearToSend == 1){
 160:Core/Src/main.c ****       counter++;
 161:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 162:Core/Src/main.c ****       sendToSimulink();
 163:Core/Src/main.c ****       clearToSend = 0;
 164:Core/Src/main.c ****     }
 165:Core/Src/main.c ****     /* USER CODE END WHILE */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 168:Core/Src/main.c ****   }
 169:Core/Src/main.c ****   /* USER CODE END 3 */
 170:Core/Src/main.c **** }
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /**
 173:Core/Src/main.c ****   * @brief System Clock Configuration
 174:Core/Src/main.c ****   * @retval None
 175:Core/Src/main.c ****   */
 176:Core/Src/main.c **** void SystemClock_Config(void)
 177:Core/Src/main.c **** {
 178:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 179:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  C:\Temp\ccmIEjMS.s 			page 8


 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 182:Core/Src/main.c ****   */
 183:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 184:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 187:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 190:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 197:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 198:Core/Src/main.c ****   {
 199:Core/Src/main.c ****     Error_Handler();
 200:Core/Src/main.c ****   }
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 205:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 206:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 207:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 212:Core/Src/main.c ****   {
 213:Core/Src/main.c ****     Error_Handler();
 214:Core/Src/main.c ****   }
 215:Core/Src/main.c **** }
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** /**
 218:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 219:Core/Src/main.c ****   * @param None
 220:Core/Src/main.c ****   * @retval None
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c **** static void MX_TIM2_Init(void)
 223:Core/Src/main.c **** {
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 230:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 235:Core/Src/main.c ****   htim2.Instance = TIM2;
 236:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
ARM GAS  C:\Temp\ccmIEjMS.s 			page 9


 237:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 238:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 239:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 240:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 241:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 246:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 247:Core/Src/main.c ****   {
 248:Core/Src/main.c ****     Error_Handler();
 249:Core/Src/main.c ****   }
 250:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 251:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 252:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 253:Core/Src/main.c ****   {
 254:Core/Src/main.c ****     Error_Handler();
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** }
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** /**
 263:Core/Src/main.c ****   * @brief USART2 Initialization Function
 264:Core/Src/main.c ****   * @param None
 265:Core/Src/main.c ****   * @retval None
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 268:Core/Src/main.c **** {
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 277:Core/Src/main.c ****   huart2.Instance = USART2;
 278:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 279:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 280:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 281:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 282:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 283:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 284:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 285:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** }
ARM GAS  C:\Temp\ccmIEjMS.s 			page 10


 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /**
 296:Core/Src/main.c ****   * @brief GPIO Initialization Function
 297:Core/Src/main.c ****   * @param None
 298:Core/Src/main.c ****   * @retval None
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c **** void MX_GPIO_Init(void)
 301:Core/Src/main.c **** {
 209              		.loc 1 301 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 40
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 214              		.cfi_def_cfa_offset 24
 215              		.cfi_offset 4, -24
 216              		.cfi_offset 5, -20
 217              		.cfi_offset 6, -16
 218              		.cfi_offset 7, -12
 219              		.cfi_offset 8, -8
 220              		.cfi_offset 14, -4
 221 0004 8AB0     		sub	sp, sp, #40
 222              		.cfi_def_cfa_offset 64
 302:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 223              		.loc 1 302 3 view .LVU52
 224              		.loc 1 302 20 is_stmt 0 view .LVU53
 225 0006 0024     		movs	r4, #0
 226 0008 0594     		str	r4, [sp, #20]
 227 000a 0694     		str	r4, [sp, #24]
 228 000c 0794     		str	r4, [sp, #28]
 229 000e 0894     		str	r4, [sp, #32]
 230 0010 0994     		str	r4, [sp, #36]
 303:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 304:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 307:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 231              		.loc 1 307 3 is_stmt 1 view .LVU54
 232              	.LBB4:
 233              		.loc 1 307 3 view .LVU55
 234 0012 0094     		str	r4, [sp]
 235              		.loc 1 307 3 view .LVU56
 236 0014 574B     		ldr	r3, .L16
 237 0016 1A6B     		ldr	r2, [r3, #48]
 238 0018 42F00402 		orr	r2, r2, #4
 239 001c 1A63     		str	r2, [r3, #48]
 240              		.loc 1 307 3 view .LVU57
 241 001e 1A6B     		ldr	r2, [r3, #48]
 242 0020 02F00402 		and	r2, r2, #4
 243 0024 0092     		str	r2, [sp]
 244              		.loc 1 307 3 view .LVU58
 245 0026 009A     		ldr	r2, [sp]
 246              	.LBE4:
 247              		.loc 1 307 3 view .LVU59
 308:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 248              		.loc 1 308 3 view .LVU60
 249              	.LBB5:
 250              		.loc 1 308 3 view .LVU61
ARM GAS  C:\Temp\ccmIEjMS.s 			page 11


 251 0028 0194     		str	r4, [sp, #4]
 252              		.loc 1 308 3 view .LVU62
 253 002a 1A6B     		ldr	r2, [r3, #48]
 254 002c 42F08002 		orr	r2, r2, #128
 255 0030 1A63     		str	r2, [r3, #48]
 256              		.loc 1 308 3 view .LVU63
 257 0032 1A6B     		ldr	r2, [r3, #48]
 258 0034 02F08002 		and	r2, r2, #128
 259 0038 0192     		str	r2, [sp, #4]
 260              		.loc 1 308 3 view .LVU64
 261 003a 019A     		ldr	r2, [sp, #4]
 262              	.LBE5:
 263              		.loc 1 308 3 view .LVU65
 309:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 264              		.loc 1 309 3 view .LVU66
 265              	.LBB6:
 266              		.loc 1 309 3 view .LVU67
 267 003c 0294     		str	r4, [sp, #8]
 268              		.loc 1 309 3 view .LVU68
 269 003e 1A6B     		ldr	r2, [r3, #48]
 270 0040 42F00102 		orr	r2, r2, #1
 271 0044 1A63     		str	r2, [r3, #48]
 272              		.loc 1 309 3 view .LVU69
 273 0046 1A6B     		ldr	r2, [r3, #48]
 274 0048 02F00102 		and	r2, r2, #1
 275 004c 0292     		str	r2, [sp, #8]
 276              		.loc 1 309 3 view .LVU70
 277 004e 029A     		ldr	r2, [sp, #8]
 278              	.LBE6:
 279              		.loc 1 309 3 view .LVU71
 310:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 280              		.loc 1 310 3 view .LVU72
 281              	.LBB7:
 282              		.loc 1 310 3 view .LVU73
 283 0050 0394     		str	r4, [sp, #12]
 284              		.loc 1 310 3 view .LVU74
 285 0052 1A6B     		ldr	r2, [r3, #48]
 286 0054 42F00202 		orr	r2, r2, #2
 287 0058 1A63     		str	r2, [r3, #48]
 288              		.loc 1 310 3 view .LVU75
 289 005a 1A6B     		ldr	r2, [r3, #48]
 290 005c 02F00202 		and	r2, r2, #2
 291 0060 0392     		str	r2, [sp, #12]
 292              		.loc 1 310 3 view .LVU76
 293 0062 039A     		ldr	r2, [sp, #12]
 294              	.LBE7:
 295              		.loc 1 310 3 view .LVU77
 311:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 296              		.loc 1 311 3 view .LVU78
 297              	.LBB8:
 298              		.loc 1 311 3 view .LVU79
 299 0064 0494     		str	r4, [sp, #16]
 300              		.loc 1 311 3 view .LVU80
 301 0066 1A6B     		ldr	r2, [r3, #48]
 302 0068 42F00802 		orr	r2, r2, #8
 303 006c 1A63     		str	r2, [r3, #48]
 304              		.loc 1 311 3 view .LVU81
ARM GAS  C:\Temp\ccmIEjMS.s 			page 12


 305 006e 1B6B     		ldr	r3, [r3, #48]
 306 0070 03F00803 		and	r3, r3, #8
 307 0074 0493     		str	r3, [sp, #16]
 308              		.loc 1 311 3 view .LVU82
 309 0076 049B     		ldr	r3, [sp, #16]
 310              	.LBE8:
 311              		.loc 1 311 3 view .LVU83
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 314:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 312              		.loc 1 314 3 view .LVU84
 313 0078 3F4D     		ldr	r5, .L16+4
 314 007a 2246     		mov	r2, r4
 315 007c 2021     		movs	r1, #32
 316 007e 2846     		mov	r0, r5
 317 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 318              	.LVL14:
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 317:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|VL53L8A1_PWR_EN_Pin, GPIO_PIN_SET);
 319              		.loc 1 317 3 view .LVU85
 320 0084 0122     		movs	r2, #1
 321 0086 C021     		movs	r1, #192
 322 0088 2846     		mov	r0, r5
 323 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 324              	.LVL15:
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 320:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, VL53L8A1_LOW_PWR_Pin|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 325              		.loc 1 320 3 view .LVU86
 326 008e DFF8F480 		ldr	r8, .L16+16
 327 0092 0122     		movs	r2, #1
 328 0094 40F21141 		movw	r1, #1041
 329 0098 4046     		mov	r0, r8
 330 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 331              	.LVL16:
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 323:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 332              		.loc 1 323 3 view .LVU87
 333              		.loc 1 323 23 is_stmt 0 view .LVU88
 334 009e 4FF40053 		mov	r3, #8192
 335 00a2 0593     		str	r3, [sp, #20]
 324:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 336              		.loc 1 324 3 is_stmt 1 view .LVU89
 337              		.loc 1 324 24 is_stmt 0 view .LVU90
 338 00a4 4FF48813 		mov	r3, #1114112
 339 00a8 0693     		str	r3, [sp, #24]
 325:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 340              		.loc 1 325 3 is_stmt 1 view .LVU91
 341              		.loc 1 325 24 is_stmt 0 view .LVU92
 342 00aa 0794     		str	r4, [sp, #28]
 326:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 343              		.loc 1 326 3 is_stmt 1 view .LVU93
 344 00ac 334E     		ldr	r6, .L16+8
 345 00ae 05A9     		add	r1, sp, #20
 346 00b0 3046     		mov	r0, r6
ARM GAS  C:\Temp\ccmIEjMS.s 			page 13


 347 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 348              	.LVL17:
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 329:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 330:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 331:Core/Src/main.c ****                            PC12 */
 332:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 349              		.loc 1 332 3 view .LVU94
 350              		.loc 1 332 23 is_stmt 0 view .LVU95
 351 00b6 41F6FF73 		movw	r3, #8191
 352 00ba 0593     		str	r3, [sp, #20]
 333:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 334:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 335:Core/Src/main.c ****                           |GPIO_PIN_12;
 336:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 353              		.loc 1 336 3 is_stmt 1 view .LVU96
 354              		.loc 1 336 24 is_stmt 0 view .LVU97
 355 00bc 0327     		movs	r7, #3
 356 00be 0697     		str	r7, [sp, #24]
 337:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 357              		.loc 1 337 3 is_stmt 1 view .LVU98
 358              		.loc 1 337 24 is_stmt 0 view .LVU99
 359 00c0 0794     		str	r4, [sp, #28]
 338:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 360              		.loc 1 338 3 is_stmt 1 view .LVU100
 361 00c2 05A9     		add	r1, sp, #20
 362 00c4 3046     		mov	r0, r6
 363 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 364              	.LVL18:
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA8 PA9
 341:Core/Src/main.c ****                            PA10 PA11 PA12 PA15 */
 342:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 365              		.loc 1 342 3 view .LVU101
 366              		.loc 1 342 23 is_stmt 0 view .LVU102
 367 00ca 49F60373 		movw	r3, #40707
 368 00ce 0593     		str	r3, [sp, #20]
 343:Core/Src/main.c ****                           |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 344:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 369              		.loc 1 344 3 is_stmt 1 view .LVU103
 370              		.loc 1 344 24 is_stmt 0 view .LVU104
 371 00d0 0697     		str	r7, [sp, #24]
 345:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 372              		.loc 1 345 3 is_stmt 1 view .LVU105
 373              		.loc 1 345 24 is_stmt 0 view .LVU106
 374 00d2 0794     		str	r4, [sp, #28]
 346:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 375              		.loc 1 346 3 is_stmt 1 view .LVU107
 376 00d4 05A9     		add	r1, sp, #20
 377 00d6 2846     		mov	r0, r5
 378 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 379              	.LVL19:
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /*Configure GPIO pin : VL53L8A1_INT_Pin */
 349:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L8A1_INT_Pin;
 380              		.loc 1 349 3 view .LVU108
ARM GAS  C:\Temp\ccmIEjMS.s 			page 14


 381              		.loc 1 349 23 is_stmt 0 view .LVU109
 382 00dc 1023     		movs	r3, #16
 383 00de 0593     		str	r3, [sp, #20]
 350:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 384              		.loc 1 350 3 is_stmt 1 view .LVU110
 385              		.loc 1 350 24 is_stmt 0 view .LVU111
 386 00e0 4FF40413 		mov	r3, #2162688
 387 00e4 0693     		str	r3, [sp, #24]
 351:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 388              		.loc 1 351 3 is_stmt 1 view .LVU112
 389              		.loc 1 351 24 is_stmt 0 view .LVU113
 390 00e6 0794     		str	r4, [sp, #28]
 352:Core/Src/main.c ****   HAL_GPIO_Init(VL53L8A1_INT_GPIO_Port, &GPIO_InitStruct);
 391              		.loc 1 352 3 is_stmt 1 view .LVU114
 392 00e8 05A9     		add	r1, sp, #20
 393 00ea 2846     		mov	r0, r5
 394 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 395              	.LVL20:
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 355:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 396              		.loc 1 355 3 view .LVU115
 397              		.loc 1 355 23 is_stmt 0 view .LVU116
 398 00f0 2023     		movs	r3, #32
 399 00f2 0593     		str	r3, [sp, #20]
 356:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 400              		.loc 1 356 3 is_stmt 1 view .LVU117
 401              		.loc 1 356 24 is_stmt 0 view .LVU118
 402 00f4 0126     		movs	r6, #1
 403 00f6 0696     		str	r6, [sp, #24]
 357:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 404              		.loc 1 357 3 is_stmt 1 view .LVU119
 405              		.loc 1 357 24 is_stmt 0 view .LVU120
 406 00f8 0794     		str	r4, [sp, #28]
 358:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 407              		.loc 1 358 3 is_stmt 1 view .LVU121
 408              		.loc 1 358 25 is_stmt 0 view .LVU122
 409 00fa 0894     		str	r4, [sp, #32]
 359:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 410              		.loc 1 359 3 is_stmt 1 view .LVU123
 411 00fc 05A9     		add	r1, sp, #20
 412 00fe 2846     		mov	r0, r5
 413 0100 FFF7FEFF 		bl	HAL_GPIO_Init
 414              	.LVL21:
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /*Configure GPIO pins : PA6 VL53L8A1_PWR_EN_Pin */
 362:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|VL53L8A1_PWR_EN_Pin;
 415              		.loc 1 362 3 view .LVU124
 416              		.loc 1 362 23 is_stmt 0 view .LVU125
 417 0104 C023     		movs	r3, #192
 418 0106 0593     		str	r3, [sp, #20]
 363:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 419              		.loc 1 363 3 is_stmt 1 view .LVU126
 420              		.loc 1 363 24 is_stmt 0 view .LVU127
 421 0108 0696     		str	r6, [sp, #24]
 364:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 422              		.loc 1 364 3 is_stmt 1 view .LVU128
ARM GAS  C:\Temp\ccmIEjMS.s 			page 15


 423              		.loc 1 364 24 is_stmt 0 view .LVU129
 424 010a 0796     		str	r6, [sp, #28]
 365:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 425              		.loc 1 365 3 is_stmt 1 view .LVU130
 426              		.loc 1 365 25 is_stmt 0 view .LVU131
 427 010c 0894     		str	r4, [sp, #32]
 366:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 428              		.loc 1 366 3 is_stmt 1 view .LVU132
 429 010e 05A9     		add	r1, sp, #20
 430 0110 2846     		mov	r0, r5
 431 0112 FFF7FEFF 		bl	HAL_GPIO_Init
 432              	.LVL22:
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /*Configure GPIO pins : VL53L8A1_LOW_PWR_Pin PB10 PB4 */
 369:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L8A1_LOW_PWR_Pin|GPIO_PIN_10|GPIO_PIN_4;
 433              		.loc 1 369 3 view .LVU133
 434              		.loc 1 369 23 is_stmt 0 view .LVU134
 435 0116 40F21143 		movw	r3, #1041
 436 011a 0593     		str	r3, [sp, #20]
 370:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 437              		.loc 1 370 3 is_stmt 1 view .LVU135
 438              		.loc 1 370 24 is_stmt 0 view .LVU136
 439 011c 0696     		str	r6, [sp, #24]
 371:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 440              		.loc 1 371 3 is_stmt 1 view .LVU137
 441              		.loc 1 371 24 is_stmt 0 view .LVU138
 442 011e 0796     		str	r6, [sp, #28]
 372:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 443              		.loc 1 372 3 is_stmt 1 view .LVU139
 444              		.loc 1 372 25 is_stmt 0 view .LVU140
 445 0120 0894     		str	r4, [sp, #32]
 373:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 446              		.loc 1 373 3 is_stmt 1 view .LVU141
 447 0122 05A9     		add	r1, sp, #20
 448 0124 4046     		mov	r0, r8
 449 0126 FFF7FEFF 		bl	HAL_GPIO_Init
 450              	.LVL23:
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /*Configure GPIO pins : PB1 PB2 PB12 PB13
 376:Core/Src/main.c ****                            PB14 PB15 PB3 PB5
 377:Core/Src/main.c ****                            PB6 PB7 */
 378:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 451              		.loc 1 378 3 view .LVU142
 452              		.loc 1 378 23 is_stmt 0 view .LVU143
 453 012a 4FF2EE03 		movw	r3, #61678
 454 012e 0593     		str	r3, [sp, #20]
 379:Core/Src/main.c ****                           |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_5
 380:Core/Src/main.c ****                           |GPIO_PIN_6|GPIO_PIN_7;
 381:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 455              		.loc 1 381 3 is_stmt 1 view .LVU144
 456              		.loc 1 381 24 is_stmt 0 view .LVU145
 457 0130 0697     		str	r7, [sp, #24]
 382:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 458              		.loc 1 382 3 is_stmt 1 view .LVU146
 459              		.loc 1 382 24 is_stmt 0 view .LVU147
 460 0132 0794     		str	r4, [sp, #28]
 383:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
ARM GAS  C:\Temp\ccmIEjMS.s 			page 16


 461              		.loc 1 383 3 is_stmt 1 view .LVU148
 462 0134 05A9     		add	r1, sp, #20
 463 0136 4046     		mov	r0, r8
 464 0138 FFF7FEFF 		bl	HAL_GPIO_Init
 465              	.LVL24:
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 386:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 466              		.loc 1 386 3 view .LVU149
 467              		.loc 1 386 23 is_stmt 0 view .LVU150
 468 013c 0423     		movs	r3, #4
 469 013e 0593     		str	r3, [sp, #20]
 387:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 470              		.loc 1 387 3 is_stmt 1 view .LVU151
 471              		.loc 1 387 24 is_stmt 0 view .LVU152
 472 0140 0697     		str	r7, [sp, #24]
 388:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 473              		.loc 1 388 3 is_stmt 1 view .LVU153
 474              		.loc 1 388 24 is_stmt 0 view .LVU154
 475 0142 0794     		str	r4, [sp, #28]
 389:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 476              		.loc 1 389 3 is_stmt 1 view .LVU155
 477 0144 05A9     		add	r1, sp, #20
 478 0146 0E48     		ldr	r0, .L16+12
 479 0148 FFF7FEFF 		bl	HAL_GPIO_Init
 480              	.LVL25:
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /* EXTI interrupt init*/
 392:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 481              		.loc 1 392 3 view .LVU156
 482 014c 2246     		mov	r2, r4
 483 014e 2146     		mov	r1, r4
 484 0150 0A20     		movs	r0, #10
 485 0152 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 486              	.LVL26:
 393:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 487              		.loc 1 393 3 view .LVU157
 488 0156 0A20     		movs	r0, #10
 489 0158 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 490              	.LVL27:
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 491              		.loc 1 395 3 view .LVU158
 492 015c 2246     		mov	r2, r4
 493 015e 2146     		mov	r1, r4
 494 0160 2820     		movs	r0, #40
 495 0162 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 496              	.LVL28:
 396:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 497              		.loc 1 396 3 view .LVU159
 498 0166 2820     		movs	r0, #40
 499 0168 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 500              	.LVL29:
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 399:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 400:Core/Src/main.c **** }
ARM GAS  C:\Temp\ccmIEjMS.s 			page 17


 501              		.loc 1 400 1 is_stmt 0 view .LVU160
 502 016c 0AB0     		add	sp, sp, #40
 503              		.cfi_def_cfa_offset 24
 504              		@ sp needed
 505 016e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 506              	.L17:
 507 0172 00BF     		.align	2
 508              	.L16:
 509 0174 00380240 		.word	1073887232
 510 0178 00000240 		.word	1073872896
 511 017c 00080240 		.word	1073874944
 512 0180 000C0240 		.word	1073875968
 513 0184 00040240 		.word	1073873920
 514              		.cfi_endproc
 515              	.LFE143:
 517              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 518              		.align	1
 519              		.global	HAL_TIM_PeriodElapsedCallback
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 524              	HAL_TIM_PeriodElapsedCallback:
 525              	.LVL30:
 526              	.LFB144:
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 403:Core/Src/main.c **** 
 404:Core/Src/main.c **** /* USER CODE END 4 */
 405:Core/Src/main.c **** 
 406:Core/Src/main.c **** /**
 407:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 408:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 409:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 410:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 411:Core/Src/main.c ****   * @param  htim : TIM handle
 412:Core/Src/main.c ****   * @retval None
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 415:Core/Src/main.c **** {
 527              		.loc 1 415 1 is_stmt 1 view -0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		.loc 1 415 1 is_stmt 0 view .LVU162
 532 0000 08B5     		push	{r3, lr}
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 3, -8
 535              		.cfi_offset 14, -4
 416:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 419:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 536              		.loc 1 419 3 is_stmt 1 view .LVU163
 537              		.loc 1 419 11 is_stmt 0 view .LVU164
 538 0002 0268     		ldr	r2, [r0]
 539              		.loc 1 419 6 view .LVU165
 540 0004 034B     		ldr	r3, .L22
ARM GAS  C:\Temp\ccmIEjMS.s 			page 18


 541 0006 9A42     		cmp	r2, r3
 542 0008 00D0     		beq	.L21
 543              	.LVL31:
 544              	.L18:
 420:Core/Src/main.c ****     HAL_IncTick();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 425:Core/Src/main.c **** }
 545              		.loc 1 425 1 view .LVU166
 546 000a 08BD     		pop	{r3, pc}
 547              	.LVL32:
 548              	.L21:
 420:Core/Src/main.c ****     HAL_IncTick();
 549              		.loc 1 420 5 is_stmt 1 view .LVU167
 550 000c FFF7FEFF 		bl	HAL_IncTick
 551              	.LVL33:
 552              		.loc 1 425 1 is_stmt 0 view .LVU168
 553 0010 FBE7     		b	.L18
 554              	.L23:
 555 0012 00BF     		.align	2
 556              	.L22:
 557 0014 00000140 		.word	1073807360
 558              		.cfi_endproc
 559              	.LFE144:
 561              		.section	.text.Error_Handler,"ax",%progbits
 562              		.align	1
 563              		.global	Error_Handler
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 568              	Error_Handler:
 569              	.LFB145:
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** /**
 428:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 429:Core/Src/main.c ****   * @retval None
 430:Core/Src/main.c ****   */
 431:Core/Src/main.c **** void Error_Handler(void)
 432:Core/Src/main.c **** {
 570              		.loc 1 432 1 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ Volatile: function does not return.
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 433:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 434:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 435:Core/Src/main.c ****   __disable_irq();
 576              		.loc 1 435 3 view .LVU170
 577              	.LBB9:
 578              	.LBI9:
 579              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
ARM GAS  C:\Temp\ccmIEjMS.s 			page 19


   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\ccmIEjMS.s 			page 20


  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
ARM GAS  C:\Temp\ccmIEjMS.s 			page 21


 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
ARM GAS  C:\Temp\ccmIEjMS.s 			page 22


 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
ARM GAS  C:\Temp\ccmIEjMS.s 			page 23


 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
ARM GAS  C:\Temp\ccmIEjMS.s 			page 24


 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccmIEjMS.s 			page 25


 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccmIEjMS.s 			page 26


 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
ARM GAS  C:\Temp\ccmIEjMS.s 			page 27


 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\ccmIEjMS.s 			page 28


 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
ARM GAS  C:\Temp\ccmIEjMS.s 			page 29


 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
ARM GAS  C:\Temp\ccmIEjMS.s 			page 30


 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
ARM GAS  C:\Temp\ccmIEjMS.s 			page 31


 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Temp\ccmIEjMS.s 			page 32


 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\ccmIEjMS.s 			page 33


 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
ARM GAS  C:\Temp\ccmIEjMS.s 			page 34


 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccmIEjMS.s 			page 35


 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 580              		.loc 2 960 27 view .LVU171
 581              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 582              		.loc 2 962 3 view .LVU172
 583              		.syntax unified
 584              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 585 0000 72B6     		cpsid i
 586              	@ 0 "" 2
 587              		.thumb
 588              		.syntax unified
 589              	.L25:
ARM GAS  C:\Temp\ccmIEjMS.s 			page 36


 590              	.LBE10:
 591              	.LBE9:
 436:Core/Src/main.c ****   while (1)
 592              		.loc 1 436 3 discriminator 1 view .LVU173
 437:Core/Src/main.c ****   {
 438:Core/Src/main.c ****   }
 593              		.loc 1 438 3 discriminator 1 view .LVU174
 436:Core/Src/main.c ****   while (1)
 594              		.loc 1 436 9 discriminator 1 view .LVU175
 595 0002 FEE7     		b	.L25
 596              		.cfi_endproc
 597              	.LFE145:
 599              		.section	.text.MX_TIM2_Init,"ax",%progbits
 600              		.align	1
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 605              	MX_TIM2_Init:
 606              	.LFB141:
 223:Core/Src/main.c **** 
 607              		.loc 1 223 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 24
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 00B5     		push	{lr}
 612              		.cfi_def_cfa_offset 4
 613              		.cfi_offset 14, -4
 614 0002 87B0     		sub	sp, sp, #28
 615              		.cfi_def_cfa_offset 32
 229:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 616              		.loc 1 229 3 view .LVU177
 229:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 617              		.loc 1 229 26 is_stmt 0 view .LVU178
 618 0004 0023     		movs	r3, #0
 619 0006 0293     		str	r3, [sp, #8]
 620 0008 0393     		str	r3, [sp, #12]
 621 000a 0493     		str	r3, [sp, #16]
 622 000c 0593     		str	r3, [sp, #20]
 230:Core/Src/main.c **** 
 623              		.loc 1 230 3 is_stmt 1 view .LVU179
 230:Core/Src/main.c **** 
 624              		.loc 1 230 27 is_stmt 0 view .LVU180
 625 000e 0093     		str	r3, [sp]
 626 0010 0193     		str	r3, [sp, #4]
 235:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 627              		.loc 1 235 3 is_stmt 1 view .LVU181
 235:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 628              		.loc 1 235 18 is_stmt 0 view .LVU182
 629 0012 1448     		ldr	r0, .L34
 630 0014 4FF08042 		mov	r2, #1073741824
 631 0018 0260     		str	r2, [r0]
 236:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 632              		.loc 1 236 3 is_stmt 1 view .LVU183
 236:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 633              		.loc 1 236 24 is_stmt 0 view .LVU184
 634 001a 40F2E732 		movw	r2, #999
 635 001e 4260     		str	r2, [r0, #4]
ARM GAS  C:\Temp\ccmIEjMS.s 			page 37


 237:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 636              		.loc 1 237 3 is_stmt 1 view .LVU185
 237:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 637              		.loc 1 237 26 is_stmt 0 view .LVU186
 638 0020 8360     		str	r3, [r0, #8]
 238:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 639              		.loc 1 238 3 is_stmt 1 view .LVU187
 238:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 640              		.loc 1 238 21 is_stmt 0 view .LVU188
 641 0022 C260     		str	r2, [r0, #12]
 239:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 642              		.loc 1 239 3 is_stmt 1 view .LVU189
 239:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 643              		.loc 1 239 28 is_stmt 0 view .LVU190
 644 0024 0361     		str	r3, [r0, #16]
 240:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 645              		.loc 1 240 3 is_stmt 1 view .LVU191
 240:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 646              		.loc 1 240 32 is_stmt 0 view .LVU192
 647 0026 8023     		movs	r3, #128
 648 0028 8361     		str	r3, [r0, #24]
 241:Core/Src/main.c ****   {
 649              		.loc 1 241 3 is_stmt 1 view .LVU193
 241:Core/Src/main.c ****   {
 650              		.loc 1 241 7 is_stmt 0 view .LVU194
 651 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 652              	.LVL34:
 241:Core/Src/main.c ****   {
 653              		.loc 1 241 6 view .LVU195
 654 002e 90B9     		cbnz	r0, .L31
 245:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 655              		.loc 1 245 3 is_stmt 1 view .LVU196
 245:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 656              		.loc 1 245 34 is_stmt 0 view .LVU197
 657 0030 4FF48053 		mov	r3, #4096
 658 0034 0293     		str	r3, [sp, #8]
 246:Core/Src/main.c ****   {
 659              		.loc 1 246 3 is_stmt 1 view .LVU198
 246:Core/Src/main.c ****   {
 660              		.loc 1 246 7 is_stmt 0 view .LVU199
 661 0036 02A9     		add	r1, sp, #8
 662 0038 0A48     		ldr	r0, .L34
 663 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 664              	.LVL35:
 246:Core/Src/main.c ****   {
 665              		.loc 1 246 6 view .LVU200
 666 003e 60B9     		cbnz	r0, .L32
 250:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 667              		.loc 1 250 3 is_stmt 1 view .LVU201
 250:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 668              		.loc 1 250 37 is_stmt 0 view .LVU202
 669 0040 0023     		movs	r3, #0
 670 0042 0093     		str	r3, [sp]
 251:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 671              		.loc 1 251 3 is_stmt 1 view .LVU203
 251:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 672              		.loc 1 251 33 is_stmt 0 view .LVU204
ARM GAS  C:\Temp\ccmIEjMS.s 			page 38


 673 0044 0193     		str	r3, [sp, #4]
 252:Core/Src/main.c ****   {
 674              		.loc 1 252 3 is_stmt 1 view .LVU205
 252:Core/Src/main.c ****   {
 675              		.loc 1 252 7 is_stmt 0 view .LVU206
 676 0046 6946     		mov	r1, sp
 677 0048 0648     		ldr	r0, .L34
 678 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 679              	.LVL36:
 252:Core/Src/main.c ****   {
 680              		.loc 1 252 6 view .LVU207
 681 004e 30B9     		cbnz	r0, .L33
 260:Core/Src/main.c **** 
 682              		.loc 1 260 1 view .LVU208
 683 0050 07B0     		add	sp, sp, #28
 684              		.cfi_remember_state
 685              		.cfi_def_cfa_offset 4
 686              		@ sp needed
 687 0052 5DF804FB 		ldr	pc, [sp], #4
 688              	.L31:
 689              		.cfi_restore_state
 243:Core/Src/main.c ****   }
 690              		.loc 1 243 5 is_stmt 1 view .LVU209
 691 0056 FFF7FEFF 		bl	Error_Handler
 692              	.LVL37:
 693              	.L32:
 248:Core/Src/main.c ****   }
 694              		.loc 1 248 5 view .LVU210
 695 005a FFF7FEFF 		bl	Error_Handler
 696              	.LVL38:
 697              	.L33:
 254:Core/Src/main.c ****   }
 698              		.loc 1 254 5 view .LVU211
 699 005e FFF7FEFF 		bl	Error_Handler
 700              	.LVL39:
 701              	.L35:
 702 0062 00BF     		.align	2
 703              	.L34:
 704 0064 00000000 		.word	htim2
 705              		.cfi_endproc
 706              	.LFE141:
 708              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 709              		.align	1
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 714              	MX_USART2_UART_Init:
 715              	.LFB142:
 268:Core/Src/main.c **** 
 716              		.loc 1 268 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720 0000 08B5     		push	{r3, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 3, -8
 723              		.cfi_offset 14, -4
ARM GAS  C:\Temp\ccmIEjMS.s 			page 39


 277:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 724              		.loc 1 277 3 view .LVU213
 277:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 725              		.loc 1 277 19 is_stmt 0 view .LVU214
 726 0002 0D48     		ldr	r0, .L40
 727 0004 0D4B     		ldr	r3, .L40+4
 728 0006 0360     		str	r3, [r0]
 278:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 729              		.loc 1 278 3 is_stmt 1 view .LVU215
 278:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 730              		.loc 1 278 24 is_stmt 0 view .LVU216
 731 0008 4FF4E113 		mov	r3, #1843200
 732 000c 4360     		str	r3, [r0, #4]
 279:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 733              		.loc 1 279 3 is_stmt 1 view .LVU217
 279:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 734              		.loc 1 279 26 is_stmt 0 view .LVU218
 735 000e 4FF48053 		mov	r3, #4096
 736 0012 8360     		str	r3, [r0, #8]
 280:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 737              		.loc 1 280 3 is_stmt 1 view .LVU219
 280:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 738              		.loc 1 280 24 is_stmt 0 view .LVU220
 739 0014 4FF40053 		mov	r3, #8192
 740 0018 C360     		str	r3, [r0, #12]
 281:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 741              		.loc 1 281 3 is_stmt 1 view .LVU221
 281:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 742              		.loc 1 281 22 is_stmt 0 view .LVU222
 743 001a 4FF48063 		mov	r3, #1024
 744 001e 0361     		str	r3, [r0, #16]
 282:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 745              		.loc 1 282 3 is_stmt 1 view .LVU223
 282:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 746              		.loc 1 282 20 is_stmt 0 view .LVU224
 747 0020 0C23     		movs	r3, #12
 748 0022 4361     		str	r3, [r0, #20]
 283:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 749              		.loc 1 283 3 is_stmt 1 view .LVU225
 283:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 750              		.loc 1 283 25 is_stmt 0 view .LVU226
 751 0024 0023     		movs	r3, #0
 752 0026 8361     		str	r3, [r0, #24]
 284:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 753              		.loc 1 284 3 is_stmt 1 view .LVU227
 284:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 754              		.loc 1 284 28 is_stmt 0 view .LVU228
 755 0028 C361     		str	r3, [r0, #28]
 285:Core/Src/main.c ****   {
 756              		.loc 1 285 3 is_stmt 1 view .LVU229
 285:Core/Src/main.c ****   {
 757              		.loc 1 285 7 is_stmt 0 view .LVU230
 758 002a FFF7FEFF 		bl	HAL_UART_Init
 759              	.LVL40:
 285:Core/Src/main.c ****   {
 760              		.loc 1 285 6 view .LVU231
 761 002e 00B9     		cbnz	r0, .L39
ARM GAS  C:\Temp\ccmIEjMS.s 			page 40


 293:Core/Src/main.c **** 
 762              		.loc 1 293 1 view .LVU232
 763 0030 08BD     		pop	{r3, pc}
 764              	.L39:
 287:Core/Src/main.c ****   }
 765              		.loc 1 287 5 is_stmt 1 view .LVU233
 766 0032 FFF7FEFF 		bl	Error_Handler
 767              	.LVL41:
 768              	.L41:
 769 0036 00BF     		.align	2
 770              	.L40:
 771 0038 00000000 		.word	huart2
 772 003c 00440040 		.word	1073759232
 773              		.cfi_endproc
 774              	.LFE142:
 776              		.section	.text.SystemClock_Config,"ax",%progbits
 777              		.align	1
 778              		.global	SystemClock_Config
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 783              	SystemClock_Config:
 784              	.LFB140:
 177:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 785              		.loc 1 177 1 view -0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 80
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789 0000 00B5     		push	{lr}
 790              		.cfi_def_cfa_offset 4
 791              		.cfi_offset 14, -4
 792 0002 95B0     		sub	sp, sp, #84
 793              		.cfi_def_cfa_offset 88
 178:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 794              		.loc 1 178 3 view .LVU235
 178:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 795              		.loc 1 178 22 is_stmt 0 view .LVU236
 796 0004 3022     		movs	r2, #48
 797 0006 0021     		movs	r1, #0
 798 0008 08A8     		add	r0, sp, #32
 799 000a FFF7FEFF 		bl	memset
 800              	.LVL42:
 179:Core/Src/main.c **** 
 801              		.loc 1 179 3 is_stmt 1 view .LVU237
 179:Core/Src/main.c **** 
 802              		.loc 1 179 22 is_stmt 0 view .LVU238
 803 000e 0023     		movs	r3, #0
 804 0010 0393     		str	r3, [sp, #12]
 805 0012 0493     		str	r3, [sp, #16]
 806 0014 0593     		str	r3, [sp, #20]
 807 0016 0693     		str	r3, [sp, #24]
 808 0018 0793     		str	r3, [sp, #28]
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 809              		.loc 1 183 3 is_stmt 1 view .LVU239
 810              	.LBB11:
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 811              		.loc 1 183 3 view .LVU240
ARM GAS  C:\Temp\ccmIEjMS.s 			page 41


 812 001a 0193     		str	r3, [sp, #4]
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 813              		.loc 1 183 3 view .LVU241
 814 001c 1F4A     		ldr	r2, .L48
 815 001e 116C     		ldr	r1, [r2, #64]
 816 0020 41F08051 		orr	r1, r1, #268435456
 817 0024 1164     		str	r1, [r2, #64]
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 818              		.loc 1 183 3 view .LVU242
 819 0026 126C     		ldr	r2, [r2, #64]
 820 0028 02F08052 		and	r2, r2, #268435456
 821 002c 0192     		str	r2, [sp, #4]
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 822              		.loc 1 183 3 view .LVU243
 823 002e 019A     		ldr	r2, [sp, #4]
 824              	.LBE11:
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 825              		.loc 1 183 3 view .LVU244
 184:Core/Src/main.c **** 
 826              		.loc 1 184 3 view .LVU245
 827              	.LBB12:
 184:Core/Src/main.c **** 
 828              		.loc 1 184 3 view .LVU246
 829 0030 0293     		str	r3, [sp, #8]
 184:Core/Src/main.c **** 
 830              		.loc 1 184 3 view .LVU247
 831 0032 1B4B     		ldr	r3, .L48+4
 832 0034 1A68     		ldr	r2, [r3]
 833 0036 42F44042 		orr	r2, r2, #49152
 834 003a 1A60     		str	r2, [r3]
 184:Core/Src/main.c **** 
 835              		.loc 1 184 3 view .LVU248
 836 003c 1B68     		ldr	r3, [r3]
 837 003e 03F44043 		and	r3, r3, #49152
 838 0042 0293     		str	r3, [sp, #8]
 184:Core/Src/main.c **** 
 839              		.loc 1 184 3 view .LVU249
 840 0044 029B     		ldr	r3, [sp, #8]
 841              	.LBE12:
 184:Core/Src/main.c **** 
 842              		.loc 1 184 3 view .LVU250
 189:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 843              		.loc 1 189 3 view .LVU251
 189:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 844              		.loc 1 189 36 is_stmt 0 view .LVU252
 845 0046 0123     		movs	r3, #1
 846 0048 0893     		str	r3, [sp, #32]
 190:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 847              		.loc 1 190 3 is_stmt 1 view .LVU253
 190:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 848              		.loc 1 190 30 is_stmt 0 view .LVU254
 849 004a 4FF48033 		mov	r3, #65536
 850 004e 0993     		str	r3, [sp, #36]
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 851              		.loc 1 191 3 is_stmt 1 view .LVU255
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 852              		.loc 1 191 34 is_stmt 0 view .LVU256
ARM GAS  C:\Temp\ccmIEjMS.s 			page 42


 853 0050 0222     		movs	r2, #2
 854 0052 0E92     		str	r2, [sp, #56]
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 855              		.loc 1 192 3 is_stmt 1 view .LVU257
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 856              		.loc 1 192 35 is_stmt 0 view .LVU258
 857 0054 4FF48003 		mov	r3, #4194304
 858 0058 0F93     		str	r3, [sp, #60]
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 859              		.loc 1 193 3 is_stmt 1 view .LVU259
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 860              		.loc 1 193 30 is_stmt 0 view .LVU260
 861 005a 0423     		movs	r3, #4
 862 005c 1093     		str	r3, [sp, #64]
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 863              		.loc 1 194 3 is_stmt 1 view .LVU261
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 864              		.loc 1 194 30 is_stmt 0 view .LVU262
 865 005e 6421     		movs	r1, #100
 866 0060 1191     		str	r1, [sp, #68]
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 867              		.loc 1 195 3 is_stmt 1 view .LVU263
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 868              		.loc 1 195 30 is_stmt 0 view .LVU264
 869 0062 1292     		str	r2, [sp, #72]
 196:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 870              		.loc 1 196 3 is_stmt 1 view .LVU265
 196:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 871              		.loc 1 196 30 is_stmt 0 view .LVU266
 872 0064 1393     		str	r3, [sp, #76]
 197:Core/Src/main.c ****   {
 873              		.loc 1 197 3 is_stmt 1 view .LVU267
 197:Core/Src/main.c ****   {
 874              		.loc 1 197 7 is_stmt 0 view .LVU268
 875 0066 08A8     		add	r0, sp, #32
 876 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 877              	.LVL43:
 197:Core/Src/main.c ****   {
 878              		.loc 1 197 6 view .LVU269
 879 006c 88B9     		cbnz	r0, .L46
 204:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 880              		.loc 1 204 3 is_stmt 1 view .LVU270
 204:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 881              		.loc 1 204 31 is_stmt 0 view .LVU271
 882 006e 0F23     		movs	r3, #15
 883 0070 0393     		str	r3, [sp, #12]
 206:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 884              		.loc 1 206 3 is_stmt 1 view .LVU272
 206:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 885              		.loc 1 206 34 is_stmt 0 view .LVU273
 886 0072 0223     		movs	r3, #2
 887 0074 0493     		str	r3, [sp, #16]
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 888              		.loc 1 207 3 is_stmt 1 view .LVU274
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 889              		.loc 1 207 35 is_stmt 0 view .LVU275
 890 0076 0023     		movs	r3, #0
ARM GAS  C:\Temp\ccmIEjMS.s 			page 43


 891 0078 0593     		str	r3, [sp, #20]
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 892              		.loc 1 208 3 is_stmt 1 view .LVU276
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 893              		.loc 1 208 36 is_stmt 0 view .LVU277
 894 007a 4FF48052 		mov	r2, #4096
 895 007e 0692     		str	r2, [sp, #24]
 209:Core/Src/main.c **** 
 896              		.loc 1 209 3 is_stmt 1 view .LVU278
 209:Core/Src/main.c **** 
 897              		.loc 1 209 36 is_stmt 0 view .LVU279
 898 0080 0793     		str	r3, [sp, #28]
 211:Core/Src/main.c ****   {
 899              		.loc 1 211 3 is_stmt 1 view .LVU280
 211:Core/Src/main.c ****   {
 900              		.loc 1 211 7 is_stmt 0 view .LVU281
 901 0082 0321     		movs	r1, #3
 902 0084 03A8     		add	r0, sp, #12
 903 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 904              	.LVL44:
 211:Core/Src/main.c ****   {
 905              		.loc 1 211 6 view .LVU282
 906 008a 20B9     		cbnz	r0, .L47
 215:Core/Src/main.c **** 
 907              		.loc 1 215 1 view .LVU283
 908 008c 15B0     		add	sp, sp, #84
 909              		.cfi_remember_state
 910              		.cfi_def_cfa_offset 4
 911              		@ sp needed
 912 008e 5DF804FB 		ldr	pc, [sp], #4
 913              	.L46:
 914              		.cfi_restore_state
 199:Core/Src/main.c ****   }
 915              		.loc 1 199 5 is_stmt 1 view .LVU284
 916 0092 FFF7FEFF 		bl	Error_Handler
 917              	.LVL45:
 918              	.L47:
 213:Core/Src/main.c ****   }
 919              		.loc 1 213 5 view .LVU285
 920 0096 FFF7FEFF 		bl	Error_Handler
 921              	.LVL46:
 922              	.L49:
 923 009a 00BF     		.align	2
 924              	.L48:
 925 009c 00380240 		.word	1073887232
 926 00a0 00700040 		.word	1073770496
 927              		.cfi_endproc
 928              	.LFE140:
 930              		.section	.text.main,"ax",%progbits
 931              		.align	1
 932              		.global	main
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 937              	main:
 938              	.LFB139:
 121:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccmIEjMS.s 			page 44


 939              		.loc 1 121 1 view -0
 940              		.cfi_startproc
 941              		@ Volatile: function does not return.
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944 0000 08B5     		push	{r3, lr}
 945              		.cfi_def_cfa_offset 8
 946              		.cfi_offset 3, -8
 947              		.cfi_offset 14, -4
 130:Core/Src/main.c **** 
 948              		.loc 1 130 3 view .LVU287
 949 0002 FFF7FEFF 		bl	HAL_Init
 950              	.LVL47:
 137:Core/Src/main.c **** 
 951              		.loc 1 137 3 view .LVU288
 952 0006 FFF7FEFF 		bl	SystemClock_Config
 953              	.LVL48:
 144:Core/Src/main.c ****   MX_TIM2_Init();
 954              		.loc 1 144 3 view .LVU289
 955 000a FFF7FEFF 		bl	MX_GPIO_Init
 956              	.LVL49:
 145:Core/Src/main.c ****   MX_USART2_UART_Init();
 957              		.loc 1 145 3 view .LVU290
 958 000e FFF7FEFF 		bl	MX_TIM2_Init
 959              	.LVL50:
 146:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 960              		.loc 1 146 3 view .LVU291
 961 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 962              	.LVL51:
 148:Core/Src/main.c ****     initialCalibration();
 963              		.loc 1 148 3 view .LVU292
 964              	.L51:
 148:Core/Src/main.c ****     initialCalibration();
 965              		.loc 1 148 21 view .LVU293
 966 0016 0E4B     		ldr	r3, .L57
 967 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968 001a 012B     		cmp	r3, #1
 969 001c 02D0     		beq	.L56
 149:Core/Src/main.c ****   }
 970              		.loc 1 149 5 view .LVU294
 971 001e FFF7FEFF 		bl	initialCalibration
 972              	.LVL52:
 973 0022 F8E7     		b	.L51
 974              	.L56:
 151:Core/Src/main.c ****   /* USER CODE END 2 */
 975              		.loc 1 151 3 view .LVU295
 976 0024 FFF7FEFF 		bl	initVL53L8A1
 977              	.LVL53:
 978              	.L53:
 156:Core/Src/main.c ****   {
 979              		.loc 1 156 3 view .LVU296
 158:Core/Src/main.c ****     if (clearToSend == 1){
 980              		.loc 1 158 5 view .LVU297
 981 0028 FFF7FEFF 		bl	getVL53L8A1
 982              	.LVL54:
 159:Core/Src/main.c ****       counter++;
 983              		.loc 1 159 5 view .LVU298
ARM GAS  C:\Temp\ccmIEjMS.s 			page 45


 159:Core/Src/main.c ****       counter++;
 984              		.loc 1 159 21 is_stmt 0 view .LVU299
 985 002c 094B     		ldr	r3, .L57+4
 986 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 159:Core/Src/main.c ****       counter++;
 987              		.loc 1 159 8 view .LVU300
 988 0030 012B     		cmp	r3, #1
 989 0032 F9D1     		bne	.L53
 160:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 990              		.loc 1 160 7 is_stmt 1 view .LVU301
 160:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 991              		.loc 1 160 14 is_stmt 0 view .LVU302
 992 0034 084A     		ldr	r2, .L57+8
 993 0036 1368     		ldr	r3, [r2]
 994 0038 0133     		adds	r3, r3, #1
 995 003a 1360     		str	r3, [r2]
 161:Core/Src/main.c ****       sendToSimulink();
 996              		.loc 1 161 7 is_stmt 1 view .LVU303
 997 003c 2021     		movs	r1, #32
 998 003e 0748     		ldr	r0, .L57+12
 999 0040 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1000              	.LVL55:
 162:Core/Src/main.c ****       clearToSend = 0;
 1001              		.loc 1 162 7 view .LVU304
 1002 0044 FFF7FEFF 		bl	sendToSimulink
 1003              	.LVL56:
 163:Core/Src/main.c ****     }
 1004              		.loc 1 163 7 view .LVU305
 163:Core/Src/main.c ****     }
 1005              		.loc 1 163 19 is_stmt 0 view .LVU306
 1006 0048 024B     		ldr	r3, .L57+4
 1007 004a 0022     		movs	r2, #0
 1008 004c 1A70     		strb	r2, [r3]
 1009 004e EBE7     		b	.L53
 1010              	.L58:
 1011              		.align	2
 1012              	.L57:
 1013 0050 00000000 		.word	calibrated
 1014 0054 00000000 		.word	clearToSend
 1015 0058 00000000 		.word	counter
 1016 005c 00000240 		.word	1073872896
 1017              		.cfi_endproc
 1018              	.LFE139:
 1020              		.section	.text.assert_failed,"ax",%progbits
 1021              		.align	1
 1022              		.global	assert_failed
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1027              	assert_failed:
 1028              	.LVL57:
 1029              	.LFB146:
 439:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 440:Core/Src/main.c **** }
 441:Core/Src/main.c **** 
 442:Core/Src/main.c **** #ifdef  USE_FULL_ASSERT
 443:Core/Src/main.c **** /**
ARM GAS  C:\Temp\ccmIEjMS.s 			page 46


 444:Core/Src/main.c ****   * @brief  Reports the name of the source file and the source line number
 445:Core/Src/main.c ****   *         where the assert_param error has occurred.
 446:Core/Src/main.c ****   * @param  file: pointer to the source file name
 447:Core/Src/main.c ****   * @param  line: assert_param error line source number
 448:Core/Src/main.c ****   * @retval None
 449:Core/Src/main.c ****   */
 450:Core/Src/main.c **** void assert_failed(uint8_t *file, uint32_t line)
 451:Core/Src/main.c **** {
 1030              		.loc 1 451 1 is_stmt 1 view -0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              		@ link register save eliminated.
 452:Core/Src/main.c ****   /* USER CODE BEGIN 6 */
 453:Core/Src/main.c ****   /* User can add his own implementation to report the file name and line number,
 454:Core/Src/main.c ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 455:Core/Src/main.c ****   /* USER CODE END 6 */
 456:Core/Src/main.c **** }
 1035              		.loc 1 456 1 view .LVU308
 1036 0000 7047     		bx	lr
 1037              		.cfi_endproc
 1038              	.LFE146:
 1040              		.global	counter
 1041              		.section	.bss.counter,"aw",%nobits
 1042              		.align	2
 1045              	counter:
 1046 0000 00000000 		.space	4
 1047              		.global	calibrated
 1048              		.section	.bss.calibrated,"aw",%nobits
 1051              	calibrated:
 1052 0000 00       		.space	1
 1053              		.global	clearToSend
 1054              		.section	.bss.clearToSend,"aw",%nobits
 1057              	clearToSend:
 1058 0000 00       		.space	1
 1059              		.global	bigBuffer
 1060              		.section	.bss.bigBuffer,"aw",%nobits
 1061              		.align	2
 1064              	bigBuffer:
 1065 0000 00000000 		.space	14
 1065      00000000 
 1065      00000000 
 1065      0000
 1066              		.global	numberOfSimulinkBytes
 1067              		.section	.rodata.numberOfSimulinkBytes,"a"
 1068              		.align	2
 1071              	numberOfSimulinkBytes:
 1072 0000 08000000 		.word	8
 1073              		.global	expectedTerminator
 1074              		.section	.rodata.expectedTerminator,"a"
 1075              		.align	2
 1078              	expectedTerminator:
 1079 0000 415F4A   		.ascii	"A_J"
 1080              		.global	expectedHeader
 1081              		.section	.rodata.expectedHeader,"a"
 1082              		.align	2
 1085              	expectedHeader:
ARM GAS  C:\Temp\ccmIEjMS.s 			page 47


 1086 0000 4A5F41   		.ascii	"J_A"
 1087              		.global	TOF_centre
 1088              		.section	.bss.TOF_centre,"aw",%nobits
 1089              		.align	2
 1092              	TOF_centre:
 1093 0000 00000000 		.space	1284
 1093      00000000 
 1093      00000000 
 1093      00000000 
 1093      00000000 
 1094              		.global	huart2
 1095              		.section	.bss.huart2,"aw",%nobits
 1096              		.align	2
 1099              	huart2:
 1100 0000 00000000 		.space	72
 1100      00000000 
 1100      00000000 
 1100      00000000 
 1100      00000000 
 1101              		.global	htim2
 1102              		.section	.bss.htim2,"aw",%nobits
 1103              		.align	2
 1106              	htim2:
 1107 0000 00000000 		.space	72
 1107      00000000 
 1107      00000000 
 1107      00000000 
 1107      00000000 
 1108              		.text
 1109              	.Letext0:
 1110              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1111              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1112              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1113              		.file 6 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1114              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1115              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1116              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1117              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1118              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1119              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1120              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1121              		.file 14 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 1122              		.file 15 "Drivers/BSP/Components/vl53l8cx/modules/vl53l8cx_plugin_xtalk.h"
 1123              		.file 16 "Drivers/BSP/53L8A1/53l8a1_ranging_sensor.h"
 1124              		.file 17 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1125              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1126              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1127              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1128              		.file 21 "Core/Inc/VL53L8A1_Simulink.h"
 1129              		.file 22 "<built-in>"
ARM GAS  C:\Temp\ccmIEjMS.s 			page 48


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\ccmIEjMS.s:21     .text.configureTimer:00000000 $t
  C:\Temp\ccmIEjMS.s:27     .text.configureTimer:00000000 configureTimer
  C:\Temp\ccmIEjMS.s:101    .text.configureTimer:00000058 $d
  C:\Temp\ccmIEjMS.s:107    .text.initialCalibration:00000000 $t
  C:\Temp\ccmIEjMS.s:113    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\ccmIEjMS.s:192    .text.initialCalibration:00000058 $d
  C:\Temp\ccmIEjMS.s:1064   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\ccmIEjMS.s:1099   .bss.huart2:00000000 huart2
  C:\Temp\ccmIEjMS.s:1051   .bss.calibrated:00000000 calibrated
  C:\Temp\ccmIEjMS.s:1106   .bss.htim2:00000000 htim2
  C:\Temp\ccmIEjMS.s:201    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\ccmIEjMS.s:207    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\ccmIEjMS.s:509    .text.MX_GPIO_Init:00000174 $d
  C:\Temp\ccmIEjMS.s:518    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\ccmIEjMS.s:524    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\ccmIEjMS.s:557    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\ccmIEjMS.s:562    .text.Error_Handler:00000000 $t
  C:\Temp\ccmIEjMS.s:568    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\ccmIEjMS.s:600    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\ccmIEjMS.s:605    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\ccmIEjMS.s:704    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\ccmIEjMS.s:709    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\ccmIEjMS.s:714    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\ccmIEjMS.s:771    .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\ccmIEjMS.s:777    .text.SystemClock_Config:00000000 $t
  C:\Temp\ccmIEjMS.s:783    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\ccmIEjMS.s:925    .text.SystemClock_Config:0000009c $d
  C:\Temp\ccmIEjMS.s:931    .text.main:00000000 $t
  C:\Temp\ccmIEjMS.s:937    .text.main:00000000 main
  C:\Temp\ccmIEjMS.s:1013   .text.main:00000050 $d
  C:\Temp\ccmIEjMS.s:1057   .bss.clearToSend:00000000 clearToSend
  C:\Temp\ccmIEjMS.s:1045   .bss.counter:00000000 counter
  C:\Temp\ccmIEjMS.s:1021   .text.assert_failed:00000000 $t
  C:\Temp\ccmIEjMS.s:1027   .text.assert_failed:00000000 assert_failed
  C:\Temp\ccmIEjMS.s:1042   .bss.counter:00000000 $d
  C:\Temp\ccmIEjMS.s:1052   .bss.calibrated:00000000 $d
  C:\Temp\ccmIEjMS.s:1058   .bss.clearToSend:00000000 $d
  C:\Temp\ccmIEjMS.s:1061   .bss.bigBuffer:00000000 $d
  C:\Temp\ccmIEjMS.s:1071   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\ccmIEjMS.s:1068   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\ccmIEjMS.s:1078   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\ccmIEjMS.s:1075   .rodata.expectedTerminator:00000000 $d
  C:\Temp\ccmIEjMS.s:1085   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\ccmIEjMS.s:1082   .rodata.expectedHeader:00000000 $d
  C:\Temp\ccmIEjMS.s:1092   .bss.TOF_centre:00000000 TOF_centre
  C:\Temp\ccmIEjMS.s:1089   .bss.TOF_centre:00000000 $d
  C:\Temp\ccmIEjMS.s:1096   .bss.huart2:00000000 $d
  C:\Temp\ccmIEjMS.s:1103   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_UART_Receive
receivedFromSimulink
HAL_TIM_Base_Start_IT
Profile
ARM GAS  C:\Temp\ccmIEjMS.s 			page 49


HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
initVL53L8A1
getVL53L8A1
HAL_GPIO_TogglePin
sendToSimulink
