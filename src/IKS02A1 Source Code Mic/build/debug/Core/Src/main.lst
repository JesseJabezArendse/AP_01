ARM GAS  C:\Temp\ccFIo5dr.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.HAL_I2S_RxCpltCallback,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_I2S_RxCpltCallback
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_I2S_RxCpltCallback:
  28              	.LVL0:
  29              	.LFB134:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "pdm2pcm.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "IKS02A1_Simulink.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  C:\Temp\ccFIo5dr.s 			page 2


  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** CRC_HandleTypeDef hcrc;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** I2S_HandleTypeDef hi2s3;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_spi3_rx;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** UART_HandleTypeDef huart2;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE BEGIN PV */
  55:Core/Src/main.c **** uint16_t pcm_buffer_len;
  56:Core/Src/main.c **** /* USER CODE END PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  59:Core/Src/main.c **** void SystemClock_Config(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** // #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  67:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** uint8_t bigBuffer[28+3+3] = {0};
  70:Core/Src/main.c **** uint8_t clearToSend = 0;
  71:Core/Src/main.c **** uint8_t counter = 0;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* Buffers */
  74:Core/Src/main.c **** #define PDM_BUFFER_SIZE 64
  75:Core/Src/main.c **** #define PCM_BUFFER_SIZE 16
  76:Core/Src/main.c **** uint32_t pdm_buffer[PDM_BUFFER_SIZE]; // Buffer for raw PDM data
  77:Core/Src/main.c **** uint16_t pcm_buffer[PCM_BUFFER_SIZE]; // Buffer for processed PCM data
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
  30              		.loc 1 79 54 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 79 54 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              		.cfi_def_cfa_offset 8
ARM GAS  C:\Temp\ccFIo5dr.s 			page 3


  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  80:Core/Src/main.c ****     if (hi2s == &hi2s3) {
  39              		.loc 1 80 5 is_stmt 1 view .LVU2
  40              		.loc 1 80 8 is_stmt 0 view .LVU3
  41 0002 084B     		ldr	r3, .L5
  42 0004 8342     		cmp	r3, r0
  43 0006 00D0     		beq	.L4
  44              	.LVL1:
  45              	.L1:
  81:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
  82:Core/Src/main.c ****       PDM_Filter((uint8_t *)pdm_buffer, (int16_t *)pcm_buffer, &PDM1_filter_handler);
  83:Core/Src/main.c ****       clearToSend = 1;
  84:Core/Src/main.c ****     }
  85:Core/Src/main.c **** }
  46              		.loc 1 85 1 view .LVU4
  47 0008 08BD     		pop	{r3, pc}
  48              	.LVL2:
  49              	.L4:
  81:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
  50              		.loc 1 81 7 is_stmt 1 view .LVU5
  51 000a 2021     		movs	r1, #32
  52 000c 0648     		ldr	r0, .L5+4
  53              	.LVL3:
  81:Core/Src/main.c ****       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
  54              		.loc 1 81 7 is_stmt 0 view .LVU6
  55 000e FFF7FEFF 		bl	HAL_GPIO_TogglePin
  56              	.LVL4:
  82:Core/Src/main.c ****       clearToSend = 1;
  57              		.loc 1 82 7 is_stmt 1 view .LVU7
  58 0012 064A     		ldr	r2, .L5+8
  59 0014 0649     		ldr	r1, .L5+12
  60 0016 0748     		ldr	r0, .L5+16
  61 0018 FFF7FEFF 		bl	PDM_Filter
  62              	.LVL5:
  83:Core/Src/main.c ****     }
  63              		.loc 1 83 7 view .LVU8
  83:Core/Src/main.c ****     }
  64              		.loc 1 83 19 is_stmt 0 view .LVU9
  65 001c 064B     		ldr	r3, .L5+20
  66 001e 0122     		movs	r2, #1
  67 0020 1A70     		strb	r2, [r3]
  68              		.loc 1 85 1 view .LVU10
  69 0022 F1E7     		b	.L1
  70              	.L6:
  71              		.align	2
  72              	.L5:
  73 0024 00000000 		.word	hi2s3
  74 0028 00000240 		.word	1073872896
  75 002c 00000000 		.word	PDM1_filter_handler
  76 0030 00000000 		.word	pcm_buffer
  77 0034 00000000 		.word	pdm_buffer
  78 0038 00000000 		.word	clearToSend
  79              		.cfi_endproc
  80              	.LFE134:
  82              		.section	.text.Transmit_PCM_Data,"ax",%progbits
  83              		.align	1
ARM GAS  C:\Temp\ccFIo5dr.s 			page 4


  84              		.global	Transmit_PCM_Data
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  89              	Transmit_PCM_Data:
  90              	.LVL6:
  91              	.LFB135:
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* Transmit PCM Data over USART */
  88:Core/Src/main.c **** void Transmit_PCM_Data(uint16_t *pcm_data, uint16_t size)
  89:Core/Src/main.c **** {
  92              		.loc 1 89 1 is_stmt 1 view -0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		.loc 1 89 1 is_stmt 0 view .LVU12
  97 0000 08B5     		push	{r3, lr}
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 3, -8
 100              		.cfi_offset 14, -4
  90:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t *)pcm_data, size * sizeof(uint16_t), HAL_MAX_DELAY);
 101              		.loc 1 90 3 is_stmt 1 view .LVU13
 102 0002 4A00     		lsls	r2, r1, #1
 103 0004 92B2     		uxth	r2, r2
 104 0006 4FF0FF33 		mov	r3, #-1
 105 000a 0146     		mov	r1, r0
 106              	.LVL7:
 107              		.loc 1 90 3 is_stmt 0 view .LVU14
 108 000c 0148     		ldr	r0, .L9
 109              	.LVL8:
 110              		.loc 1 90 3 view .LVU15
 111 000e FFF7FEFF 		bl	HAL_UART_Transmit
 112              	.LVL9:
  91:Core/Src/main.c **** }
 113              		.loc 1 91 1 view .LVU16
 114 0012 08BD     		pop	{r3, pc}
 115              	.L10:
 116              		.align	2
 117              	.L9:
 118 0014 00000000 		.word	huart2
 119              		.cfi_endproc
 120              	.LFE135:
 122              		.section	.text.MX_DMA_Init,"ax",%progbits
 123              		.align	1
 124              		.global	MX_DMA_Init
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	MX_DMA_Init:
 130              	.LFB142:
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* USER CODE END 0 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /**
  96:Core/Src/main.c ****   * @brief  The application entry point.
  97:Core/Src/main.c ****   * @retval int
  98:Core/Src/main.c ****   */
ARM GAS  C:\Temp\ccFIo5dr.s 			page 5


  99:Core/Src/main.c **** int main(void)
 100:Core/Src/main.c **** {
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE END 1 */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 109:Core/Src/main.c ****   HAL_Init();
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE END Init */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* Configure the system clock */
 116:Core/Src/main.c ****   SystemClock_Config();
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 119:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,0);
 120:Core/Src/main.c ****   /* USER CODE END SysInit */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* Initialize all configured peripherals */
 123:Core/Src/main.c ****   MX_GPIO_Init();
 124:Core/Src/main.c ****   MX_DMA_Init();
 125:Core/Src/main.c ****   MX_TIM2_Init();
 126:Core/Src/main.c ****   MX_USART2_UART_Init();
 127:Core/Src/main.c ****   MX_CRC_Init();
 128:Core/Src/main.c ****   MX_PDM2PCM_Init();
 129:Core/Src/main.c ****   MX_I2S3_Init();
 130:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 131:Core/Src/main.c ****   
 132:Core/Src/main.c ****   /* USER CODE END 2 */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* Infinite loop */
 135:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 136:Core/Src/main.c ****   HAL_I2S_Receive_DMA(&hi2s3, pdm_buffer, sizeof(pdm_buffer)/sizeof(pdm_buffer[0]));
 137:Core/Src/main.c ****   while (1)
 138:Core/Src/main.c ****   {
 139:Core/Src/main.c ****     if (clearToSend == 1){
 140:Core/Src/main.c ****       counter++;
 141:Core/Src/main.c ****       if (counter == 50){
 142:Core/Src/main.c ****         // startAudioPacket();
 143:Core/Src/main.c ****         counter = 0;
 144:Core/Src/main.c ****       }
 145:Core/Src/main.c ****       Transmit_PCM_Data(pcm_buffer, PCM_BUFFER_SIZE);
 146:Core/Src/main.c ****       clearToSend = 0;
 147:Core/Src/main.c ****     }
 148:Core/Src/main.c ****     
 149:Core/Src/main.c ****     /* USER CODE END WHILE */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 152:Core/Src/main.c ****   }
 153:Core/Src/main.c ****   /* USER CODE END 3 */
 154:Core/Src/main.c **** }
 155:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 6


 156:Core/Src/main.c **** /**
 157:Core/Src/main.c ****   * @brief System Clock Configuration
 158:Core/Src/main.c ****   * @retval None
 159:Core/Src/main.c ****   */
 160:Core/Src/main.c **** void SystemClock_Config(void)
 161:Core/Src/main.c **** {
 162:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 163:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 166:Core/Src/main.c ****   */
 167:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 168:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 171:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 172:Core/Src/main.c ****   */
 173:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 174:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 179:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 180:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 181:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 182:Core/Src/main.c ****   {
 183:Core/Src/main.c ****     Error_Handler();
 184:Core/Src/main.c ****   }
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 187:Core/Src/main.c ****   */
 188:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 189:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 190:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 191:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 192:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 193:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 196:Core/Src/main.c ****   {
 197:Core/Src/main.c ****     Error_Handler();
 198:Core/Src/main.c ****   }
 199:Core/Src/main.c **** }
 200:Core/Src/main.c **** 
 201:Core/Src/main.c **** /**
 202:Core/Src/main.c ****   * @brief CRC Initialization Function
 203:Core/Src/main.c ****   * @param None
 204:Core/Src/main.c ****   * @retval None
 205:Core/Src/main.c ****   */
 206:Core/Src/main.c **** void MX_CRC_Init(void)
 207:Core/Src/main.c **** {
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 0 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE END CRC_Init 0 */
 212:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 7


 213:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 1 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE END CRC_Init 1 */
 216:Core/Src/main.c ****   hcrc.Instance = CRC;
 217:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 218:Core/Src/main.c ****   {
 219:Core/Src/main.c ****     Error_Handler();
 220:Core/Src/main.c ****   }
 221:Core/Src/main.c ****   __HAL_CRC_DR_RESET(&hcrc);
 222:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 2 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* USER CODE END CRC_Init 2 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** }
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** /**
 229:Core/Src/main.c ****   * @brief I2S3 Initialization Function
 230:Core/Src/main.c ****   * @param None
 231:Core/Src/main.c ****   * @retval None
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c **** void MX_I2S3_Init(void)
 234:Core/Src/main.c **** {
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 0 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END I2S3_Init 0 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 1 */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* USER CODE END I2S3_Init 1 */
 243:Core/Src/main.c ****   hi2s3.Instance = SPI3;
 244:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 245:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILLIPS;
 246:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 247:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 248:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 249:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 250:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 251:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 252:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 253:Core/Src/main.c ****   {
 254:Core/Src/main.c ****     Error_Handler();
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 2 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE END I2S3_Init 2 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** }
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** /**
 263:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 264:Core/Src/main.c ****   * @param None
 265:Core/Src/main.c ****   * @retval None
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c **** void MX_TIM2_Init(void)
 268:Core/Src/main.c **** {
 269:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 8


 270:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 275:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 280:Core/Src/main.c ****   htim2.Instance = TIM2;
 281:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 282:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 283:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 284:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 285:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 286:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 287:Core/Src/main.c ****   {
 288:Core/Src/main.c ****     Error_Handler();
 289:Core/Src/main.c ****   }
 290:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 291:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 292:Core/Src/main.c ****   {
 293:Core/Src/main.c ****     Error_Handler();
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 296:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 297:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 298:Core/Src/main.c ****   {
 299:Core/Src/main.c ****     Error_Handler();
 300:Core/Src/main.c ****   }
 301:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c **** }
 306:Core/Src/main.c **** 
 307:Core/Src/main.c **** /**
 308:Core/Src/main.c ****   * @brief USART2 Initialization Function
 309:Core/Src/main.c ****   * @param None
 310:Core/Src/main.c ****   * @retval None
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c **** void MX_USART2_UART_Init(void)
 313:Core/Src/main.c **** {
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 322:Core/Src/main.c ****   huart2.Instance = USART2;
 323:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 324:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 325:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 326:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
ARM GAS  C:\Temp\ccFIo5dr.s 			page 9


 327:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX;
 328:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 329:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 330:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 331:Core/Src/main.c ****   {
 332:Core/Src/main.c ****     Error_Handler();
 333:Core/Src/main.c ****   }
 334:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /**
 341:Core/Src/main.c ****   * Enable DMA controller clock
 342:Core/Src/main.c ****   */
 343:Core/Src/main.c **** void MX_DMA_Init(void)
 344:Core/Src/main.c **** {
 131              		.loc 1 344 1 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135 0000 10B5     		push	{r4, lr}
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 4, -8
 138              		.cfi_offset 14, -4
 139 0002 82B0     		sub	sp, sp, #8
 140              		.cfi_def_cfa_offset 16
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* DMA controller clock enable */
 347:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 141              		.loc 1 347 3 view .LVU18
 142              	.LBB4:
 143              		.loc 1 347 3 view .LVU19
 144 0004 0024     		movs	r4, #0
 145 0006 0194     		str	r4, [sp, #4]
 146              		.loc 1 347 3 view .LVU20
 147 0008 0D4B     		ldr	r3, .L13
 148 000a 1A6B     		ldr	r2, [r3, #48]
 149 000c 42F40012 		orr	r2, r2, #2097152
 150 0010 1A63     		str	r2, [r3, #48]
 151              		.loc 1 347 3 view .LVU21
 152 0012 1B6B     		ldr	r3, [r3, #48]
 153 0014 03F40013 		and	r3, r3, #2097152
 154 0018 0193     		str	r3, [sp, #4]
 155              		.loc 1 347 3 view .LVU22
 156 001a 019B     		ldr	r3, [sp, #4]
 157              	.LBE4:
 158              		.loc 1 347 3 view .LVU23
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /* DMA interrupt init */
 350:Core/Src/main.c ****   /* DMA1_Stream0_IRQn interrupt configuration */
 351:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 159              		.loc 1 351 3 view .LVU24
 160 001c 2246     		mov	r2, r4
 161 001e 2146     		mov	r1, r4
 162 0020 0B20     		movs	r0, #11
ARM GAS  C:\Temp\ccFIo5dr.s 			page 10


 163 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 164              	.LVL10:
 352:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 165              		.loc 1 352 3 view .LVU25
 166 0026 0B20     		movs	r0, #11
 167 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 168              	.LVL11:
 353:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 354:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 169              		.loc 1 354 3 view .LVU26
 170 002c 2246     		mov	r2, r4
 171 002e 2146     		mov	r1, r4
 172 0030 1120     		movs	r0, #17
 173 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 174              	.LVL12:
 355:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 175              		.loc 1 355 3 view .LVU27
 176 0036 1120     		movs	r0, #17
 177 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 178              	.LVL13:
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** }
 179              		.loc 1 357 1 is_stmt 0 view .LVU28
 180 003c 02B0     		add	sp, sp, #8
 181              		.cfi_def_cfa_offset 8
 182              		@ sp needed
 183 003e 10BD     		pop	{r4, pc}
 184              	.L14:
 185              		.align	2
 186              	.L13:
 187 0040 00380240 		.word	1073887232
 188              		.cfi_endproc
 189              	.LFE142:
 191              		.section	.text.MX_GPIO_Init,"ax",%progbits
 192              		.align	1
 193              		.global	MX_GPIO_Init
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 198              	MX_GPIO_Init:
 199              	.LFB143:
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** /**
 360:Core/Src/main.c ****   * @brief GPIO Initialization Function
 361:Core/Src/main.c ****   * @param None
 362:Core/Src/main.c ****   * @retval None
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c **** void MX_GPIO_Init(void)
 365:Core/Src/main.c **** {
 200              		.loc 1 365 1 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 40
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 205              		.cfi_def_cfa_offset 20
 206              		.cfi_offset 4, -20
 207              		.cfi_offset 5, -16
ARM GAS  C:\Temp\ccFIo5dr.s 			page 11


 208              		.cfi_offset 6, -12
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 8BB0     		sub	sp, sp, #44
 212              		.cfi_def_cfa_offset 64
 366:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 213              		.loc 1 366 3 view .LVU30
 214              		.loc 1 366 20 is_stmt 0 view .LVU31
 215 0004 0024     		movs	r4, #0
 216 0006 0594     		str	r4, [sp, #20]
 217 0008 0694     		str	r4, [sp, #24]
 218 000a 0794     		str	r4, [sp, #28]
 219 000c 0894     		str	r4, [sp, #32]
 220 000e 0994     		str	r4, [sp, #36]
 367:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 368:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 371:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 221              		.loc 1 371 3 is_stmt 1 view .LVU32
 222              	.LBB5:
 223              		.loc 1 371 3 view .LVU33
 224 0010 0094     		str	r4, [sp]
 225              		.loc 1 371 3 view .LVU34
 226 0012 3E4B     		ldr	r3, .L17
 227 0014 1A6B     		ldr	r2, [r3, #48]
 228 0016 42F00402 		orr	r2, r2, #4
 229 001a 1A63     		str	r2, [r3, #48]
 230              		.loc 1 371 3 view .LVU35
 231 001c 1A6B     		ldr	r2, [r3, #48]
 232 001e 02F00402 		and	r2, r2, #4
 233 0022 0092     		str	r2, [sp]
 234              		.loc 1 371 3 view .LVU36
 235 0024 009A     		ldr	r2, [sp]
 236              	.LBE5:
 237              		.loc 1 371 3 view .LVU37
 372:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 238              		.loc 1 372 3 view .LVU38
 239              	.LBB6:
 240              		.loc 1 372 3 view .LVU39
 241 0026 0194     		str	r4, [sp, #4]
 242              		.loc 1 372 3 view .LVU40
 243 0028 1A6B     		ldr	r2, [r3, #48]
 244 002a 42F08002 		orr	r2, r2, #128
 245 002e 1A63     		str	r2, [r3, #48]
 246              		.loc 1 372 3 view .LVU41
 247 0030 1A6B     		ldr	r2, [r3, #48]
 248 0032 02F08002 		and	r2, r2, #128
 249 0036 0192     		str	r2, [sp, #4]
 250              		.loc 1 372 3 view .LVU42
 251 0038 019A     		ldr	r2, [sp, #4]
 252              	.LBE6:
 253              		.loc 1 372 3 view .LVU43
 373:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 254              		.loc 1 373 3 view .LVU44
 255              	.LBB7:
 256              		.loc 1 373 3 view .LVU45
ARM GAS  C:\Temp\ccFIo5dr.s 			page 12


 257 003a 0294     		str	r4, [sp, #8]
 258              		.loc 1 373 3 view .LVU46
 259 003c 1A6B     		ldr	r2, [r3, #48]
 260 003e 42F00102 		orr	r2, r2, #1
 261 0042 1A63     		str	r2, [r3, #48]
 262              		.loc 1 373 3 view .LVU47
 263 0044 1A6B     		ldr	r2, [r3, #48]
 264 0046 02F00102 		and	r2, r2, #1
 265 004a 0292     		str	r2, [sp, #8]
 266              		.loc 1 373 3 view .LVU48
 267 004c 029A     		ldr	r2, [sp, #8]
 268              	.LBE7:
 269              		.loc 1 373 3 view .LVU49
 374:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 270              		.loc 1 374 3 view .LVU50
 271              	.LBB8:
 272              		.loc 1 374 3 view .LVU51
 273 004e 0394     		str	r4, [sp, #12]
 274              		.loc 1 374 3 view .LVU52
 275 0050 1A6B     		ldr	r2, [r3, #48]
 276 0052 42F00202 		orr	r2, r2, #2
 277 0056 1A63     		str	r2, [r3, #48]
 278              		.loc 1 374 3 view .LVU53
 279 0058 1A6B     		ldr	r2, [r3, #48]
 280 005a 02F00202 		and	r2, r2, #2
 281 005e 0392     		str	r2, [sp, #12]
 282              		.loc 1 374 3 view .LVU54
 283 0060 039A     		ldr	r2, [sp, #12]
 284              	.LBE8:
 285              		.loc 1 374 3 view .LVU55
 375:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 286              		.loc 1 375 3 view .LVU56
 287              	.LBB9:
 288              		.loc 1 375 3 view .LVU57
 289 0062 0494     		str	r4, [sp, #16]
 290              		.loc 1 375 3 view .LVU58
 291 0064 1A6B     		ldr	r2, [r3, #48]
 292 0066 42F00802 		orr	r2, r2, #8
 293 006a 1A63     		str	r2, [r3, #48]
 294              		.loc 1 375 3 view .LVU59
 295 006c 1B6B     		ldr	r3, [r3, #48]
 296 006e 03F00803 		and	r3, r3, #8
 297 0072 0493     		str	r3, [sp, #16]
 298              		.loc 1 375 3 view .LVU60
 299 0074 049B     		ldr	r3, [sp, #16]
 300              	.LBE9:
 301              		.loc 1 375 3 view .LVU61
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 378:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 302              		.loc 1 378 3 view .LVU62
 303 0076 264E     		ldr	r6, .L17+4
 304 0078 2246     		mov	r2, r4
 305 007a 2021     		movs	r1, #32
 306 007c 3046     		mov	r0, r6
 307 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 308              	.LVL14:
ARM GAS  C:\Temp\ccFIo5dr.s 			page 13


 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 381:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 309              		.loc 1 381 3 view .LVU63
 310              		.loc 1 381 23 is_stmt 0 view .LVU64
 311 0082 4FF40053 		mov	r3, #8192
 312 0086 0593     		str	r3, [sp, #20]
 382:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 313              		.loc 1 382 3 is_stmt 1 view .LVU65
 314              		.loc 1 382 24 is_stmt 0 view .LVU66
 315 0088 4FF48813 		mov	r3, #1114112
 316 008c 0693     		str	r3, [sp, #24]
 383:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 317              		.loc 1 383 3 is_stmt 1 view .LVU67
 318              		.loc 1 383 24 is_stmt 0 view .LVU68
 319 008e 0794     		str	r4, [sp, #28]
 384:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 320              		.loc 1 384 3 is_stmt 1 view .LVU69
 321 0090 204F     		ldr	r7, .L17+8
 322 0092 05A9     		add	r1, sp, #20
 323 0094 3846     		mov	r0, r7
 324 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 325              	.LVL15:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 387:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 388:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 389:Core/Src/main.c ****                            PC12 */
 390:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 326              		.loc 1 390 3 view .LVU70
 327              		.loc 1 390 23 is_stmt 0 view .LVU71
 328 009a 41F6FF73 		movw	r3, #8191
 329 009e 0593     		str	r3, [sp, #20]
 391:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 392:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 393:Core/Src/main.c ****                           |GPIO_PIN_12;
 394:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 330              		.loc 1 394 3 is_stmt 1 view .LVU72
 331              		.loc 1 394 24 is_stmt 0 view .LVU73
 332 00a0 0325     		movs	r5, #3
 333 00a2 0695     		str	r5, [sp, #24]
 395:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 334              		.loc 1 395 3 is_stmt 1 view .LVU74
 335              		.loc 1 395 24 is_stmt 0 view .LVU75
 336 00a4 0794     		str	r4, [sp, #28]
 396:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 337              		.loc 1 396 3 is_stmt 1 view .LVU76
 338 00a6 05A9     		add	r1, sp, #20
 339 00a8 3846     		mov	r0, r7
 340 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 341              	.LVL16:
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA6 PA7
 399:Core/Src/main.c ****                            PA8 PA9 PA10 PA11
 400:Core/Src/main.c ****                            PA12 PA15 */
 401:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 342              		.loc 1 401 3 view .LVU77
ARM GAS  C:\Temp\ccFIo5dr.s 			page 14


 343              		.loc 1 401 23 is_stmt 0 view .LVU78
 344 00ae 49F6C373 		movw	r3, #40899
 345 00b2 0593     		str	r3, [sp, #20]
 402:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 403:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_15;
 404:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 346              		.loc 1 404 3 is_stmt 1 view .LVU79
 347              		.loc 1 404 24 is_stmt 0 view .LVU80
 348 00b4 0695     		str	r5, [sp, #24]
 405:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 349              		.loc 1 405 3 is_stmt 1 view .LVU81
 350              		.loc 1 405 24 is_stmt 0 view .LVU82
 351 00b6 0794     		str	r4, [sp, #28]
 406:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 352              		.loc 1 406 3 is_stmt 1 view .LVU83
 353 00b8 05A9     		add	r1, sp, #20
 354 00ba 3046     		mov	r0, r6
 355 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 356              	.LVL17:
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 409:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 357              		.loc 1 409 3 view .LVU84
 358              		.loc 1 409 23 is_stmt 0 view .LVU85
 359 00c0 2023     		movs	r3, #32
 360 00c2 0593     		str	r3, [sp, #20]
 410:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 361              		.loc 1 410 3 is_stmt 1 view .LVU86
 362              		.loc 1 410 24 is_stmt 0 view .LVU87
 363 00c4 0123     		movs	r3, #1
 364 00c6 0693     		str	r3, [sp, #24]
 411:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 365              		.loc 1 411 3 is_stmt 1 view .LVU88
 366              		.loc 1 411 24 is_stmt 0 view .LVU89
 367 00c8 0794     		str	r4, [sp, #28]
 412:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 368              		.loc 1 412 3 is_stmt 1 view .LVU90
 369              		.loc 1 412 25 is_stmt 0 view .LVU91
 370 00ca 0894     		str	r4, [sp, #32]
 413:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 371              		.loc 1 413 3 is_stmt 1 view .LVU92
 372 00cc 05A9     		add	r1, sp, #20
 373 00ce 3046     		mov	r0, r6
 374 00d0 FFF7FEFF 		bl	HAL_GPIO_Init
 375              	.LVL18:
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 416:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 417:Core/Src/main.c ****                            PB4 PB6 PB7 PB8
 418:Core/Src/main.c ****                            PB9 */
 419:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 376              		.loc 1 419 3 view .LVU93
 377              		.loc 1 419 23 is_stmt 0 view .LVU94
 378 00d4 4FF2D773 		movw	r3, #63447
 379 00d8 0593     		str	r3, [sp, #20]
 420:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 421:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
ARM GAS  C:\Temp\ccFIo5dr.s 			page 15


 422:Core/Src/main.c ****                           |GPIO_PIN_9;
 423:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 380              		.loc 1 423 3 is_stmt 1 view .LVU95
 381              		.loc 1 423 24 is_stmt 0 view .LVU96
 382 00da 0695     		str	r5, [sp, #24]
 424:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 383              		.loc 1 424 3 is_stmt 1 view .LVU97
 384              		.loc 1 424 24 is_stmt 0 view .LVU98
 385 00dc 0794     		str	r4, [sp, #28]
 425:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 386              		.loc 1 425 3 is_stmt 1 view .LVU99
 387 00de 05A9     		add	r1, sp, #20
 388 00e0 0D48     		ldr	r0, .L17+12
 389 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 390              	.LVL19:
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 428:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 391              		.loc 1 428 3 view .LVU100
 392              		.loc 1 428 23 is_stmt 0 view .LVU101
 393 00e6 0423     		movs	r3, #4
 394 00e8 0593     		str	r3, [sp, #20]
 429:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 395              		.loc 1 429 3 is_stmt 1 view .LVU102
 396              		.loc 1 429 24 is_stmt 0 view .LVU103
 397 00ea 0695     		str	r5, [sp, #24]
 430:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 398              		.loc 1 430 3 is_stmt 1 view .LVU104
 399              		.loc 1 430 24 is_stmt 0 view .LVU105
 400 00ec 0794     		str	r4, [sp, #28]
 431:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 401              		.loc 1 431 3 is_stmt 1 view .LVU106
 402 00ee 05A9     		add	r1, sp, #20
 403 00f0 0A48     		ldr	r0, .L17+16
 404 00f2 FFF7FEFF 		bl	HAL_GPIO_Init
 405              	.LVL20:
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /* EXTI interrupt init*/
 434:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 406              		.loc 1 434 3 view .LVU107
 407 00f6 2246     		mov	r2, r4
 408 00f8 2146     		mov	r1, r4
 409 00fa 2820     		movs	r0, #40
 410 00fc FFF7FEFF 		bl	HAL_NVIC_SetPriority
 411              	.LVL21:
 435:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 412              		.loc 1 435 3 view .LVU108
 413 0100 2820     		movs	r0, #40
 414 0102 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 415              	.LVL22:
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 438:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 439:Core/Src/main.c **** }
 416              		.loc 1 439 1 is_stmt 0 view .LVU109
 417 0106 0BB0     		add	sp, sp, #44
 418              		.cfi_def_cfa_offset 20
ARM GAS  C:\Temp\ccFIo5dr.s 			page 16


 419              		@ sp needed
 420 0108 F0BD     		pop	{r4, r5, r6, r7, pc}
 421              	.L18:
 422 010a 00BF     		.align	2
 423              	.L17:
 424 010c 00380240 		.word	1073887232
 425 0110 00000240 		.word	1073872896
 426 0114 00080240 		.word	1073874944
 427 0118 00040240 		.word	1073873920
 428 011c 000C0240 		.word	1073875968
 429              		.cfi_endproc
 430              	.LFE143:
 432              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 433              		.align	1
 434              		.global	HAL_TIM_PeriodElapsedCallback
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	HAL_TIM_PeriodElapsedCallback:
 440              	.LVL23:
 441              	.LFB144:
 440:Core/Src/main.c **** 
 441:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 442:Core/Src/main.c **** 
 443:Core/Src/main.c **** /* USER CODE END 4 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** /**
 446:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 447:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 448:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 449:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 450:Core/Src/main.c ****   * @param  htim : TIM handle
 451:Core/Src/main.c ****   * @retval None
 452:Core/Src/main.c ****   */
 453:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 454:Core/Src/main.c **** {
 442              		.loc 1 454 1 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		.loc 1 454 1 is_stmt 0 view .LVU111
 447 0000 08B5     		push	{r3, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 3, -8
 450              		.cfi_offset 14, -4
 455:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 458:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 451              		.loc 1 458 3 is_stmt 1 view .LVU112
 452              		.loc 1 458 11 is_stmt 0 view .LVU113
 453 0002 0268     		ldr	r2, [r0]
 454              		.loc 1 458 6 view .LVU114
 455 0004 034B     		ldr	r3, .L23
 456 0006 9A42     		cmp	r2, r3
 457 0008 00D0     		beq	.L22
 458              	.LVL24:
ARM GAS  C:\Temp\ccFIo5dr.s 			page 17


 459              	.L19:
 459:Core/Src/main.c ****     HAL_IncTick();
 460:Core/Src/main.c ****   }
 461:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 464:Core/Src/main.c **** }
 460              		.loc 1 464 1 view .LVU115
 461 000a 08BD     		pop	{r3, pc}
 462              	.LVL25:
 463              	.L22:
 459:Core/Src/main.c ****     HAL_IncTick();
 464              		.loc 1 459 5 is_stmt 1 view .LVU116
 465 000c FFF7FEFF 		bl	HAL_IncTick
 466              	.LVL26:
 467              		.loc 1 464 1 is_stmt 0 view .LVU117
 468 0010 FBE7     		b	.L19
 469              	.L24:
 470 0012 00BF     		.align	2
 471              	.L23:
 472 0014 00000140 		.word	1073807360
 473              		.cfi_endproc
 474              	.LFE144:
 476              		.section	.text.Error_Handler,"ax",%progbits
 477              		.align	1
 478              		.global	Error_Handler
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 483              	Error_Handler:
 484              	.LFB145:
 465:Core/Src/main.c **** 
 466:Core/Src/main.c **** /**
 467:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 468:Core/Src/main.c ****   * @retval None
 469:Core/Src/main.c ****   */
 470:Core/Src/main.c **** void Error_Handler(void)
 471:Core/Src/main.c **** {
 485              		.loc 1 471 1 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ Volatile: function does not return.
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 472:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 473:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 474:Core/Src/main.c ****   __disable_irq();
 491              		.loc 1 474 3 view .LVU119
 492              	.LBB10:
 493              	.LBI10:
 494              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  C:\Temp\ccFIo5dr.s 			page 18


   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\ccFIo5dr.s 			page 19


  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
ARM GAS  C:\Temp\ccFIo5dr.s 			page 20


 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
ARM GAS  C:\Temp\ccFIo5dr.s 			page 21


 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
ARM GAS  C:\Temp\ccFIo5dr.s 			page 22


 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccFIo5dr.s 			page 23


 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
ARM GAS  C:\Temp\ccFIo5dr.s 			page 24


 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
ARM GAS  C:\Temp\ccFIo5dr.s 			page 25


 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
ARM GAS  C:\Temp\ccFIo5dr.s 			page 26


 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\ccFIo5dr.s 			page 27


 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccFIo5dr.s 			page 28


 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 29


 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccFIo5dr.s 			page 30


 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\ccFIo5dr.s 			page 31


 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Temp\ccFIo5dr.s 			page 32


 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 33


 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
ARM GAS  C:\Temp\ccFIo5dr.s 			page 34


 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 495              		.loc 2 960 27 view .LVU120
 496              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 497              		.loc 2 962 3 view .LVU121
 498              		.syntax unified
 499              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 500 0000 72B6     		cpsid i
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504              	.L26:
 505              	.LBE11:
 506              	.LBE10:
 475:Core/Src/main.c ****   while (1)
ARM GAS  C:\Temp\ccFIo5dr.s 			page 35


 507              		.loc 1 475 3 discriminator 1 view .LVU122
 476:Core/Src/main.c ****   {
 477:Core/Src/main.c ****   }
 508              		.loc 1 477 3 discriminator 1 view .LVU123
 475:Core/Src/main.c ****   while (1)
 509              		.loc 1 475 9 discriminator 1 view .LVU124
 510 0002 FEE7     		b	.L26
 511              		.cfi_endproc
 512              	.LFE145:
 514              		.section	.text.SystemClock_Config,"ax",%progbits
 515              		.align	1
 516              		.global	SystemClock_Config
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 521              	SystemClock_Config:
 522              	.LFB137:
 161:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 523              		.loc 1 161 1 view -0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 80
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527 0000 00B5     		push	{lr}
 528              		.cfi_def_cfa_offset 4
 529              		.cfi_offset 14, -4
 530 0002 95B0     		sub	sp, sp, #84
 531              		.cfi_def_cfa_offset 88
 162:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 532              		.loc 1 162 3 view .LVU126
 162:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 533              		.loc 1 162 22 is_stmt 0 view .LVU127
 534 0004 3022     		movs	r2, #48
 535 0006 0021     		movs	r1, #0
 536 0008 08A8     		add	r0, sp, #32
 537 000a FFF7FEFF 		bl	memset
 538              	.LVL27:
 163:Core/Src/main.c **** 
 539              		.loc 1 163 3 is_stmt 1 view .LVU128
 163:Core/Src/main.c **** 
 540              		.loc 1 163 22 is_stmt 0 view .LVU129
 541 000e 0023     		movs	r3, #0
 542 0010 0393     		str	r3, [sp, #12]
 543 0012 0493     		str	r3, [sp, #16]
 544 0014 0593     		str	r3, [sp, #20]
 545 0016 0693     		str	r3, [sp, #24]
 546 0018 0793     		str	r3, [sp, #28]
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 547              		.loc 1 167 3 is_stmt 1 view .LVU130
 548              	.LBB12:
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 549              		.loc 1 167 3 view .LVU131
 550 001a 0193     		str	r3, [sp, #4]
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 551              		.loc 1 167 3 view .LVU132
 552 001c 1F4A     		ldr	r2, .L33
 553 001e 116C     		ldr	r1, [r2, #64]
 554 0020 41F08051 		orr	r1, r1, #268435456
ARM GAS  C:\Temp\ccFIo5dr.s 			page 36


 555 0024 1164     		str	r1, [r2, #64]
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 556              		.loc 1 167 3 view .LVU133
 557 0026 126C     		ldr	r2, [r2, #64]
 558 0028 02F08052 		and	r2, r2, #268435456
 559 002c 0192     		str	r2, [sp, #4]
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 560              		.loc 1 167 3 view .LVU134
 561 002e 019A     		ldr	r2, [sp, #4]
 562              	.LBE12:
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 563              		.loc 1 167 3 view .LVU135
 168:Core/Src/main.c **** 
 564              		.loc 1 168 3 view .LVU136
 565              	.LBB13:
 168:Core/Src/main.c **** 
 566              		.loc 1 168 3 view .LVU137
 567 0030 0293     		str	r3, [sp, #8]
 168:Core/Src/main.c **** 
 568              		.loc 1 168 3 view .LVU138
 569 0032 1B4B     		ldr	r3, .L33+4
 570 0034 1A68     		ldr	r2, [r3]
 571 0036 42F44042 		orr	r2, r2, #49152
 572 003a 1A60     		str	r2, [r3]
 168:Core/Src/main.c **** 
 573              		.loc 1 168 3 view .LVU139
 574 003c 1B68     		ldr	r3, [r3]
 575 003e 03F44043 		and	r3, r3, #49152
 576 0042 0293     		str	r3, [sp, #8]
 168:Core/Src/main.c **** 
 577              		.loc 1 168 3 view .LVU140
 578 0044 029B     		ldr	r3, [sp, #8]
 579              	.LBE13:
 168:Core/Src/main.c **** 
 580              		.loc 1 168 3 view .LVU141
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 581              		.loc 1 173 3 view .LVU142
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 582              		.loc 1 173 36 is_stmt 0 view .LVU143
 583 0046 0123     		movs	r3, #1
 584 0048 0893     		str	r3, [sp, #32]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 585              		.loc 1 174 3 is_stmt 1 view .LVU144
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 586              		.loc 1 174 30 is_stmt 0 view .LVU145
 587 004a 4FF4A023 		mov	r3, #327680
 588 004e 0993     		str	r3, [sp, #36]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 589              		.loc 1 175 3 is_stmt 1 view .LVU146
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 590              		.loc 1 175 34 is_stmt 0 view .LVU147
 591 0050 0222     		movs	r2, #2
 592 0052 0E92     		str	r2, [sp, #56]
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 593              		.loc 1 176 3 is_stmt 1 view .LVU148
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 594              		.loc 1 176 35 is_stmt 0 view .LVU149
ARM GAS  C:\Temp\ccFIo5dr.s 			page 37


 595 0054 4FF48003 		mov	r3, #4194304
 596 0058 0F93     		str	r3, [sp, #60]
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 597              		.loc 1 177 3 is_stmt 1 view .LVU150
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 598              		.loc 1 177 30 is_stmt 0 view .LVU151
 599 005a 0423     		movs	r3, #4
 600 005c 1093     		str	r3, [sp, #64]
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 601              		.loc 1 178 3 is_stmt 1 view .LVU152
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 602              		.loc 1 178 30 is_stmt 0 view .LVU153
 603 005e 6421     		movs	r1, #100
 604 0060 1191     		str	r1, [sp, #68]
 179:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 605              		.loc 1 179 3 is_stmt 1 view .LVU154
 179:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 606              		.loc 1 179 30 is_stmt 0 view .LVU155
 607 0062 1292     		str	r2, [sp, #72]
 180:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 608              		.loc 1 180 3 is_stmt 1 view .LVU156
 180:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 609              		.loc 1 180 30 is_stmt 0 view .LVU157
 610 0064 1393     		str	r3, [sp, #76]
 181:Core/Src/main.c ****   {
 611              		.loc 1 181 3 is_stmt 1 view .LVU158
 181:Core/Src/main.c ****   {
 612              		.loc 1 181 7 is_stmt 0 view .LVU159
 613 0066 08A8     		add	r0, sp, #32
 614 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 615              	.LVL28:
 181:Core/Src/main.c ****   {
 616              		.loc 1 181 6 view .LVU160
 617 006c 88B9     		cbnz	r0, .L31
 188:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 618              		.loc 1 188 3 is_stmt 1 view .LVU161
 188:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 619              		.loc 1 188 31 is_stmt 0 view .LVU162
 620 006e 0F23     		movs	r3, #15
 621 0070 0393     		str	r3, [sp, #12]
 190:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 622              		.loc 1 190 3 is_stmt 1 view .LVU163
 190:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 623              		.loc 1 190 34 is_stmt 0 view .LVU164
 624 0072 0223     		movs	r3, #2
 625 0074 0493     		str	r3, [sp, #16]
 191:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 626              		.loc 1 191 3 is_stmt 1 view .LVU165
 191:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 627              		.loc 1 191 35 is_stmt 0 view .LVU166
 628 0076 0023     		movs	r3, #0
 629 0078 0593     		str	r3, [sp, #20]
 192:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 630              		.loc 1 192 3 is_stmt 1 view .LVU167
 192:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 631              		.loc 1 192 36 is_stmt 0 view .LVU168
 632 007a 4FF48052 		mov	r2, #4096
ARM GAS  C:\Temp\ccFIo5dr.s 			page 38


 633 007e 0692     		str	r2, [sp, #24]
 193:Core/Src/main.c **** 
 634              		.loc 1 193 3 is_stmt 1 view .LVU169
 193:Core/Src/main.c **** 
 635              		.loc 1 193 36 is_stmt 0 view .LVU170
 636 0080 0793     		str	r3, [sp, #28]
 195:Core/Src/main.c ****   {
 637              		.loc 1 195 3 is_stmt 1 view .LVU171
 195:Core/Src/main.c ****   {
 638              		.loc 1 195 7 is_stmt 0 view .LVU172
 639 0082 0321     		movs	r1, #3
 640 0084 03A8     		add	r0, sp, #12
 641 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 642              	.LVL29:
 195:Core/Src/main.c ****   {
 643              		.loc 1 195 6 view .LVU173
 644 008a 20B9     		cbnz	r0, .L32
 199:Core/Src/main.c **** 
 645              		.loc 1 199 1 view .LVU174
 646 008c 15B0     		add	sp, sp, #84
 647              		.cfi_remember_state
 648              		.cfi_def_cfa_offset 4
 649              		@ sp needed
 650 008e 5DF804FB 		ldr	pc, [sp], #4
 651              	.L31:
 652              		.cfi_restore_state
 183:Core/Src/main.c ****   }
 653              		.loc 1 183 5 is_stmt 1 view .LVU175
 654 0092 FFF7FEFF 		bl	Error_Handler
 655              	.LVL30:
 656              	.L32:
 197:Core/Src/main.c ****   }
 657              		.loc 1 197 5 view .LVU176
 658 0096 FFF7FEFF 		bl	Error_Handler
 659              	.LVL31:
 660              	.L34:
 661 009a 00BF     		.align	2
 662              	.L33:
 663 009c 00380240 		.word	1073887232
 664 00a0 00700040 		.word	1073770496
 665              		.cfi_endproc
 666              	.LFE137:
 668              		.section	.text.MX_CRC_Init,"ax",%progbits
 669              		.align	1
 670              		.global	MX_CRC_Init
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 675              	MX_CRC_Init:
 676              	.LFB138:
 207:Core/Src/main.c **** 
 677              		.loc 1 207 1 view -0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681 0000 08B5     		push	{r3, lr}
 682              		.cfi_def_cfa_offset 8
ARM GAS  C:\Temp\ccFIo5dr.s 			page 39


 683              		.cfi_offset 3, -8
 684              		.cfi_offset 14, -4
 216:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 685              		.loc 1 216 3 view .LVU178
 216:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 686              		.loc 1 216 17 is_stmt 0 view .LVU179
 687 0002 0748     		ldr	r0, .L39
 688 0004 074B     		ldr	r3, .L39+4
 689 0006 0360     		str	r3, [r0]
 217:Core/Src/main.c ****   {
 690              		.loc 1 217 3 is_stmt 1 view .LVU180
 217:Core/Src/main.c ****   {
 691              		.loc 1 217 7 is_stmt 0 view .LVU181
 692 0008 FFF7FEFF 		bl	HAL_CRC_Init
 693              	.LVL32:
 217:Core/Src/main.c ****   {
 694              		.loc 1 217 6 view .LVU182
 695 000c 30B9     		cbnz	r0, .L38
 221:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 2 */
 696              		.loc 1 221 3 is_stmt 1 view .LVU183
 697 000e 044B     		ldr	r3, .L39
 698 0010 1A68     		ldr	r2, [r3]
 699 0012 9368     		ldr	r3, [r2, #8]
 700 0014 43F00103 		orr	r3, r3, #1
 701 0018 9360     		str	r3, [r2, #8]
 226:Core/Src/main.c **** 
 702              		.loc 1 226 1 is_stmt 0 view .LVU184
 703 001a 08BD     		pop	{r3, pc}
 704              	.L38:
 219:Core/Src/main.c ****   }
 705              		.loc 1 219 5 is_stmt 1 view .LVU185
 706 001c FFF7FEFF 		bl	Error_Handler
 707              	.LVL33:
 708              	.L40:
 709              		.align	2
 710              	.L39:
 711 0020 00000000 		.word	hcrc
 712 0024 00300240 		.word	1073885184
 713              		.cfi_endproc
 714              	.LFE138:
 716              		.section	.text.MX_I2S3_Init,"ax",%progbits
 717              		.align	1
 718              		.global	MX_I2S3_Init
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 723              	MX_I2S3_Init:
 724              	.LFB139:
 234:Core/Src/main.c **** 
 725              		.loc 1 234 1 view -0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729 0000 08B5     		push	{r3, lr}
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 3, -8
 732              		.cfi_offset 14, -4
ARM GAS  C:\Temp\ccFIo5dr.s 			page 40


 243:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 733              		.loc 1 243 3 view .LVU187
 243:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 734              		.loc 1 243 18 is_stmt 0 view .LVU188
 735 0002 0B48     		ldr	r0, .L45
 736 0004 0B4B     		ldr	r3, .L45+4
 737 0006 0360     		str	r3, [r0]
 244:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILLIPS;
 738              		.loc 1 244 3 is_stmt 1 view .LVU189
 244:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILLIPS;
 739              		.loc 1 244 19 is_stmt 0 view .LVU190
 740 0008 4FF44073 		mov	r3, #768
 741 000c 4360     		str	r3, [r0, #4]
 245:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 742              		.loc 1 245 3 is_stmt 1 view .LVU191
 245:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 743              		.loc 1 245 23 is_stmt 0 view .LVU192
 744 000e 0023     		movs	r3, #0
 745 0010 8360     		str	r3, [r0, #8]
 246:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 746              		.loc 1 246 3 is_stmt 1 view .LVU193
 246:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 747              		.loc 1 246 25 is_stmt 0 view .LVU194
 748 0012 0322     		movs	r2, #3
 749 0014 C260     		str	r2, [r0, #12]
 247:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 750              		.loc 1 247 3 is_stmt 1 view .LVU195
 247:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 751              		.loc 1 247 25 is_stmt 0 view .LVU196
 752 0016 0361     		str	r3, [r0, #16]
 248:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 753              		.loc 1 248 3 is_stmt 1 view .LVU197
 248:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 754              		.loc 1 248 24 is_stmt 0 view .LVU198
 755 0018 4BF68032 		movw	r2, #48000
 756 001c 4261     		str	r2, [r0, #20]
 249:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 757              		.loc 1 249 3 is_stmt 1 view .LVU199
 249:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 758              		.loc 1 249 19 is_stmt 0 view .LVU200
 759 001e 8361     		str	r3, [r0, #24]
 250:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 760              		.loc 1 250 3 is_stmt 1 view .LVU201
 250:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 761              		.loc 1 250 26 is_stmt 0 view .LVU202
 762 0020 C361     		str	r3, [r0, #28]
 251:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 763              		.loc 1 251 3 is_stmt 1 view .LVU203
 251:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 764              		.loc 1 251 29 is_stmt 0 view .LVU204
 765 0022 0362     		str	r3, [r0, #32]
 252:Core/Src/main.c ****   {
 766              		.loc 1 252 3 is_stmt 1 view .LVU205
 252:Core/Src/main.c ****   {
 767              		.loc 1 252 7 is_stmt 0 view .LVU206
 768 0024 FFF7FEFF 		bl	HAL_I2S_Init
 769              	.LVL34:
ARM GAS  C:\Temp\ccFIo5dr.s 			page 41


 252:Core/Src/main.c ****   {
 770              		.loc 1 252 6 view .LVU207
 771 0028 00B9     		cbnz	r0, .L44
 260:Core/Src/main.c **** 
 772              		.loc 1 260 1 view .LVU208
 773 002a 08BD     		pop	{r3, pc}
 774              	.L44:
 254:Core/Src/main.c ****   }
 775              		.loc 1 254 5 is_stmt 1 view .LVU209
 776 002c FFF7FEFF 		bl	Error_Handler
 777              	.LVL35:
 778              	.L46:
 779              		.align	2
 780              	.L45:
 781 0030 00000000 		.word	hi2s3
 782 0034 003C0040 		.word	1073757184
 783              		.cfi_endproc
 784              	.LFE139:
 786              		.section	.text.MX_TIM2_Init,"ax",%progbits
 787              		.align	1
 788              		.global	MX_TIM2_Init
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 793              	MX_TIM2_Init:
 794              	.LFB140:
 268:Core/Src/main.c **** 
 795              		.loc 1 268 1 view -0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 24
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799 0000 00B5     		push	{lr}
 800              		.cfi_def_cfa_offset 4
 801              		.cfi_offset 14, -4
 802 0002 87B0     		sub	sp, sp, #28
 803              		.cfi_def_cfa_offset 32
 274:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 804              		.loc 1 274 3 view .LVU211
 274:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 805              		.loc 1 274 26 is_stmt 0 view .LVU212
 806 0004 0023     		movs	r3, #0
 807 0006 0293     		str	r3, [sp, #8]
 808 0008 0393     		str	r3, [sp, #12]
 809 000a 0493     		str	r3, [sp, #16]
 810 000c 0593     		str	r3, [sp, #20]
 275:Core/Src/main.c **** 
 811              		.loc 1 275 3 is_stmt 1 view .LVU213
 275:Core/Src/main.c **** 
 812              		.loc 1 275 27 is_stmt 0 view .LVU214
 813 000e 0093     		str	r3, [sp]
 814 0010 0193     		str	r3, [sp, #4]
 280:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 815              		.loc 1 280 3 is_stmt 1 view .LVU215
 280:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 816              		.loc 1 280 18 is_stmt 0 view .LVU216
 817 0012 1448     		ldr	r0, .L55
 818 0014 4FF08042 		mov	r2, #1073741824
ARM GAS  C:\Temp\ccFIo5dr.s 			page 42


 819 0018 0260     		str	r2, [r0]
 281:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 820              		.loc 1 281 3 is_stmt 1 view .LVU217
 281:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 821              		.loc 1 281 24 is_stmt 0 view .LVU218
 822 001a 40F2E732 		movw	r2, #999
 823 001e 4260     		str	r2, [r0, #4]
 282:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 824              		.loc 1 282 3 is_stmt 1 view .LVU219
 282:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 825              		.loc 1 282 26 is_stmt 0 view .LVU220
 826 0020 8360     		str	r3, [r0, #8]
 283:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 827              		.loc 1 283 3 is_stmt 1 view .LVU221
 283:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 828              		.loc 1 283 21 is_stmt 0 view .LVU222
 829 0022 C260     		str	r2, [r0, #12]
 284:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 830              		.loc 1 284 3 is_stmt 1 view .LVU223
 284:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 831              		.loc 1 284 28 is_stmt 0 view .LVU224
 832 0024 0361     		str	r3, [r0, #16]
 285:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 833              		.loc 1 285 3 is_stmt 1 view .LVU225
 285:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 834              		.loc 1 285 32 is_stmt 0 view .LVU226
 835 0026 8023     		movs	r3, #128
 836 0028 8361     		str	r3, [r0, #24]
 286:Core/Src/main.c ****   {
 837              		.loc 1 286 3 is_stmt 1 view .LVU227
 286:Core/Src/main.c ****   {
 838              		.loc 1 286 7 is_stmt 0 view .LVU228
 839 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 840              	.LVL36:
 286:Core/Src/main.c ****   {
 841              		.loc 1 286 6 view .LVU229
 842 002e 90B9     		cbnz	r0, .L52
 290:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 843              		.loc 1 290 3 is_stmt 1 view .LVU230
 290:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 844              		.loc 1 290 34 is_stmt 0 view .LVU231
 845 0030 4FF48053 		mov	r3, #4096
 846 0034 0293     		str	r3, [sp, #8]
 291:Core/Src/main.c ****   {
 847              		.loc 1 291 3 is_stmt 1 view .LVU232
 291:Core/Src/main.c ****   {
 848              		.loc 1 291 7 is_stmt 0 view .LVU233
 849 0036 02A9     		add	r1, sp, #8
 850 0038 0A48     		ldr	r0, .L55
 851 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 852              	.LVL37:
 291:Core/Src/main.c ****   {
 853              		.loc 1 291 6 view .LVU234
 854 003e 60B9     		cbnz	r0, .L53
 295:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 855              		.loc 1 295 3 is_stmt 1 view .LVU235
 295:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  C:\Temp\ccFIo5dr.s 			page 43


 856              		.loc 1 295 37 is_stmt 0 view .LVU236
 857 0040 0023     		movs	r3, #0
 858 0042 0093     		str	r3, [sp]
 296:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 859              		.loc 1 296 3 is_stmt 1 view .LVU237
 296:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 860              		.loc 1 296 33 is_stmt 0 view .LVU238
 861 0044 0193     		str	r3, [sp, #4]
 297:Core/Src/main.c ****   {
 862              		.loc 1 297 3 is_stmt 1 view .LVU239
 297:Core/Src/main.c ****   {
 863              		.loc 1 297 7 is_stmt 0 view .LVU240
 864 0046 6946     		mov	r1, sp
 865 0048 0648     		ldr	r0, .L55
 866 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 867              	.LVL38:
 297:Core/Src/main.c ****   {
 868              		.loc 1 297 6 view .LVU241
 869 004e 30B9     		cbnz	r0, .L54
 305:Core/Src/main.c **** 
 870              		.loc 1 305 1 view .LVU242
 871 0050 07B0     		add	sp, sp, #28
 872              		.cfi_remember_state
 873              		.cfi_def_cfa_offset 4
 874              		@ sp needed
 875 0052 5DF804FB 		ldr	pc, [sp], #4
 876              	.L52:
 877              		.cfi_restore_state
 288:Core/Src/main.c ****   }
 878              		.loc 1 288 5 is_stmt 1 view .LVU243
 879 0056 FFF7FEFF 		bl	Error_Handler
 880              	.LVL39:
 881              	.L53:
 293:Core/Src/main.c ****   }
 882              		.loc 1 293 5 view .LVU244
 883 005a FFF7FEFF 		bl	Error_Handler
 884              	.LVL40:
 885              	.L54:
 299:Core/Src/main.c ****   }
 886              		.loc 1 299 5 view .LVU245
 887 005e FFF7FEFF 		bl	Error_Handler
 888              	.LVL41:
 889              	.L56:
 890 0062 00BF     		.align	2
 891              	.L55:
 892 0064 00000000 		.word	htim2
 893              		.cfi_endproc
 894              	.LFE140:
 896              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 897              		.align	1
 898              		.global	MX_USART2_UART_Init
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 903              	MX_USART2_UART_Init:
 904              	.LFB141:
 313:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 44


 905              		.loc 1 313 1 view -0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909 0000 08B5     		push	{r3, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 3, -8
 912              		.cfi_offset 14, -4
 322:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 913              		.loc 1 322 3 view .LVU247
 322:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 914              		.loc 1 322 19 is_stmt 0 view .LVU248
 915 0002 0D48     		ldr	r0, .L61
 916 0004 0D4B     		ldr	r3, .L61+4
 917 0006 0360     		str	r3, [r0]
 323:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 918              		.loc 1 323 3 is_stmt 1 view .LVU249
 323:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 919              		.loc 1 323 24 is_stmt 0 view .LVU250
 920 0008 4FF4E113 		mov	r3, #1843200
 921 000c 4360     		str	r3, [r0, #4]
 324:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 922              		.loc 1 324 3 is_stmt 1 view .LVU251
 324:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 923              		.loc 1 324 26 is_stmt 0 view .LVU252
 924 000e 4FF48053 		mov	r3, #4096
 925 0012 8360     		str	r3, [r0, #8]
 325:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 926              		.loc 1 325 3 is_stmt 1 view .LVU253
 325:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 927              		.loc 1 325 24 is_stmt 0 view .LVU254
 928 0014 4FF40053 		mov	r3, #8192
 929 0018 C360     		str	r3, [r0, #12]
 326:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX;
 930              		.loc 1 326 3 is_stmt 1 view .LVU255
 326:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX;
 931              		.loc 1 326 22 is_stmt 0 view .LVU256
 932 001a 4FF48063 		mov	r3, #1024
 933 001e 0361     		str	r3, [r0, #16]
 327:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 934              		.loc 1 327 3 is_stmt 1 view .LVU257
 327:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 935              		.loc 1 327 20 is_stmt 0 view .LVU258
 936 0020 0823     		movs	r3, #8
 937 0022 4361     		str	r3, [r0, #20]
 328:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 938              		.loc 1 328 3 is_stmt 1 view .LVU259
 328:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 939              		.loc 1 328 25 is_stmt 0 view .LVU260
 940 0024 0023     		movs	r3, #0
 941 0026 8361     		str	r3, [r0, #24]
 329:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 942              		.loc 1 329 3 is_stmt 1 view .LVU261
 329:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 943              		.loc 1 329 28 is_stmt 0 view .LVU262
 944 0028 C361     		str	r3, [r0, #28]
 330:Core/Src/main.c ****   {
ARM GAS  C:\Temp\ccFIo5dr.s 			page 45


 945              		.loc 1 330 3 is_stmt 1 view .LVU263
 330:Core/Src/main.c ****   {
 946              		.loc 1 330 7 is_stmt 0 view .LVU264
 947 002a FFF7FEFF 		bl	HAL_UART_Init
 948              	.LVL42:
 330:Core/Src/main.c ****   {
 949              		.loc 1 330 6 view .LVU265
 950 002e 00B9     		cbnz	r0, .L60
 338:Core/Src/main.c **** 
 951              		.loc 1 338 1 view .LVU266
 952 0030 08BD     		pop	{r3, pc}
 953              	.L60:
 332:Core/Src/main.c ****   }
 954              		.loc 1 332 5 is_stmt 1 view .LVU267
 955 0032 FFF7FEFF 		bl	Error_Handler
 956              	.LVL43:
 957              	.L62:
 958 0036 00BF     		.align	2
 959              	.L61:
 960 0038 00000000 		.word	huart2
 961 003c 00440040 		.word	1073759232
 962              		.cfi_endproc
 963              	.LFE141:
 965              		.section	.text.main,"ax",%progbits
 966              		.align	1
 967              		.global	main
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 972              	main:
 973              	.LFB136:
 100:Core/Src/main.c **** 
 974              		.loc 1 100 1 view -0
 975              		.cfi_startproc
 976              		@ Volatile: function does not return.
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979 0000 08B5     		push	{r3, lr}
 980              		.cfi_def_cfa_offset 8
 981              		.cfi_offset 3, -8
 982              		.cfi_offset 14, -4
 109:Core/Src/main.c **** 
 983              		.loc 1 109 3 view .LVU269
 984 0002 FFF7FEFF 		bl	HAL_Init
 985              	.LVL44:
 116:Core/Src/main.c **** 
 986              		.loc 1 116 3 view .LVU270
 987 0006 FFF7FEFF 		bl	SystemClock_Config
 988              	.LVL45:
 119:Core/Src/main.c ****   /* USER CODE END SysInit */
 989              		.loc 1 119 3 view .LVU271
 990 000a 0022     		movs	r2, #0
 991 000c 2021     		movs	r1, #32
 992 000e 1648     		ldr	r0, .L68
 993 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 994              	.LVL46:
 123:Core/Src/main.c ****   MX_DMA_Init();
ARM GAS  C:\Temp\ccFIo5dr.s 			page 46


 995              		.loc 1 123 3 view .LVU272
 996 0014 FFF7FEFF 		bl	MX_GPIO_Init
 997              	.LVL47:
 124:Core/Src/main.c ****   MX_TIM2_Init();
 998              		.loc 1 124 3 view .LVU273
 999 0018 FFF7FEFF 		bl	MX_DMA_Init
 1000              	.LVL48:
 125:Core/Src/main.c ****   MX_USART2_UART_Init();
 1001              		.loc 1 125 3 view .LVU274
 1002 001c FFF7FEFF 		bl	MX_TIM2_Init
 1003              	.LVL49:
 126:Core/Src/main.c ****   MX_CRC_Init();
 1004              		.loc 1 126 3 view .LVU275
 1005 0020 FFF7FEFF 		bl	MX_USART2_UART_Init
 1006              	.LVL50:
 127:Core/Src/main.c ****   MX_PDM2PCM_Init();
 1007              		.loc 1 127 3 view .LVU276
 1008 0024 FFF7FEFF 		bl	MX_CRC_Init
 1009              	.LVL51:
 128:Core/Src/main.c ****   MX_I2S3_Init();
 1010              		.loc 1 128 3 view .LVU277
 1011 0028 FFF7FEFF 		bl	MX_PDM2PCM_Init
 1012              	.LVL52:
 129:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1013              		.loc 1 129 3 view .LVU278
 1014 002c FFF7FEFF 		bl	MX_I2S3_Init
 1015              	.LVL53:
 136:Core/Src/main.c ****   while (1)
 1016              		.loc 1 136 3 view .LVU279
 1017 0030 4022     		movs	r2, #64
 1018 0032 0E49     		ldr	r1, .L68+4
 1019 0034 0E48     		ldr	r0, .L68+8
 1020 0036 FFF7FEFF 		bl	HAL_I2S_Receive_DMA
 1021              	.LVL54:
 1022 003a 06E0     		b	.L64
 1023              	.L65:
 145:Core/Src/main.c ****       clearToSend = 0;
 1024              		.loc 1 145 7 view .LVU280
 1025 003c 1021     		movs	r1, #16
 1026 003e 0D48     		ldr	r0, .L68+12
 1027 0040 FFF7FEFF 		bl	Transmit_PCM_Data
 1028              	.LVL55:
 146:Core/Src/main.c ****     }
 1029              		.loc 1 146 7 view .LVU281
 146:Core/Src/main.c ****     }
 1030              		.loc 1 146 19 is_stmt 0 view .LVU282
 1031 0044 0C4B     		ldr	r3, .L68+16
 1032 0046 0022     		movs	r2, #0
 1033 0048 1A70     		strb	r2, [r3]
 1034              	.L64:
 137:Core/Src/main.c ****   {
 1035              		.loc 1 137 3 is_stmt 1 view .LVU283
 139:Core/Src/main.c ****       counter++;
 1036              		.loc 1 139 5 view .LVU284
 139:Core/Src/main.c ****       counter++;
 1037              		.loc 1 139 21 is_stmt 0 view .LVU285
 1038 004a 0B4B     		ldr	r3, .L68+16
ARM GAS  C:\Temp\ccFIo5dr.s 			page 47


 1039 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 139:Core/Src/main.c ****       counter++;
 1040              		.loc 1 139 8 view .LVU286
 1041 004e 012B     		cmp	r3, #1
 1042 0050 FBD1     		bne	.L64
 140:Core/Src/main.c ****       if (counter == 50){
 1043              		.loc 1 140 7 is_stmt 1 view .LVU287
 140:Core/Src/main.c ****       if (counter == 50){
 1044              		.loc 1 140 14 is_stmt 0 view .LVU288
 1045 0052 0A4A     		ldr	r2, .L68+20
 1046 0054 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1047 0056 0133     		adds	r3, r3, #1
 1048 0058 DBB2     		uxtb	r3, r3
 1049 005a 1370     		strb	r3, [r2]
 141:Core/Src/main.c ****         // startAudioPacket();
 1050              		.loc 1 141 7 is_stmt 1 view .LVU289
 141:Core/Src/main.c ****         // startAudioPacket();
 1051              		.loc 1 141 10 is_stmt 0 view .LVU290
 1052 005c 322B     		cmp	r3, #50
 1053 005e EDD1     		bne	.L65
 143:Core/Src/main.c ****       }
 1054              		.loc 1 143 9 is_stmt 1 view .LVU291
 143:Core/Src/main.c ****       }
 1055              		.loc 1 143 17 is_stmt 0 view .LVU292
 1056 0060 1346     		mov	r3, r2
 1057 0062 0022     		movs	r2, #0
 1058 0064 1A70     		strb	r2, [r3]
 1059 0066 E9E7     		b	.L65
 1060              	.L69:
 1061              		.align	2
 1062              	.L68:
 1063 0068 00000240 		.word	1073872896
 1064 006c 00000000 		.word	pdm_buffer
 1065 0070 00000000 		.word	hi2s3
 1066 0074 00000000 		.word	pcm_buffer
 1067 0078 00000000 		.word	clearToSend
 1068 007c 00000000 		.word	counter
 1069              		.cfi_endproc
 1070              	.LFE136:
 1072              		.global	pcm_buffer
 1073              		.section	.bss.pcm_buffer,"aw",%nobits
 1074              		.align	2
 1077              	pcm_buffer:
 1078 0000 00000000 		.space	32
 1078      00000000 
 1078      00000000 
 1078      00000000 
 1078      00000000 
 1079              		.global	pdm_buffer
 1080              		.section	.bss.pdm_buffer,"aw",%nobits
 1081              		.align	2
 1084              	pdm_buffer:
 1085 0000 00000000 		.space	256
 1085      00000000 
 1085      00000000 
 1085      00000000 
 1085      00000000 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 48


 1086              		.global	counter
 1087              		.section	.bss.counter,"aw",%nobits
 1090              	counter:
 1091 0000 00       		.space	1
 1092              		.global	clearToSend
 1093              		.section	.bss.clearToSend,"aw",%nobits
 1096              	clearToSend:
 1097 0000 00       		.space	1
 1098              		.global	bigBuffer
 1099              		.section	.bss.bigBuffer,"aw",%nobits
 1100              		.align	2
 1103              	bigBuffer:
 1104 0000 00000000 		.space	34
 1104      00000000 
 1104      00000000 
 1104      00000000 
 1104      00000000 
 1105              		.global	expectedTerminator
 1106              		.section	.rodata.expectedTerminator,"a"
 1107              		.align	2
 1110              	expectedTerminator:
 1111 0000 415F4A   		.ascii	"A_J"
 1112              		.global	expectedHeader
 1113              		.section	.rodata.expectedHeader,"a"
 1114              		.align	2
 1117              	expectedHeader:
 1118 0000 4A5F41   		.ascii	"J_A"
 1119              		.global	pcm_buffer_len
 1120              		.section	.bss.pcm_buffer_len,"aw",%nobits
 1121              		.align	1
 1124              	pcm_buffer_len:
 1125 0000 0000     		.space	2
 1126              		.global	hdma_usart2_tx
 1127              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 1128              		.align	2
 1131              	hdma_usart2_tx:
 1132 0000 00000000 		.space	96
 1132      00000000 
 1132      00000000 
 1132      00000000 
 1132      00000000 
 1133              		.global	huart2
 1134              		.section	.bss.huart2,"aw",%nobits
 1135              		.align	2
 1138              	huart2:
 1139 0000 00000000 		.space	72
 1139      00000000 
 1139      00000000 
 1139      00000000 
 1139      00000000 
 1140              		.global	htim2
 1141              		.section	.bss.htim2,"aw",%nobits
 1142              		.align	2
 1145              	htim2:
 1146 0000 00000000 		.space	72
 1146      00000000 
 1146      00000000 
ARM GAS  C:\Temp\ccFIo5dr.s 			page 49


 1146      00000000 
 1146      00000000 
 1147              		.global	hdma_spi3_rx
 1148              		.section	.bss.hdma_spi3_rx,"aw",%nobits
 1149              		.align	2
 1152              	hdma_spi3_rx:
 1153 0000 00000000 		.space	96
 1153      00000000 
 1153      00000000 
 1153      00000000 
 1153      00000000 
 1154              		.global	hi2s3
 1155              		.section	.bss.hi2s3,"aw",%nobits
 1156              		.align	2
 1159              	hi2s3:
 1160 0000 00000000 		.space	72
 1160      00000000 
 1160      00000000 
 1160      00000000 
 1160      00000000 
 1161              		.global	hcrc
 1162              		.section	.bss.hcrc,"aw",%nobits
 1163              		.align	2
 1166              	hcrc:
 1167 0000 00000000 		.space	8
 1167      00000000 
 1168              		.text
 1169              	.Letext0:
 1170              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1171              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1172              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1173              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1174              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1175              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1176              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1177              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1178              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_crc.h"
 1179              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 1180              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1181              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1182              		.file 15 "Middlewares/ST/STM32_Audio/Addons/PDM/Inc/pdm2pcm_glo.h"
 1183              		.file 16 "PDM2PCM/App/pdm2pcm.h"
 1184              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1185              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1186              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1187              		.file 20 "<built-in>"
ARM GAS  C:\Temp\ccFIo5dr.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\ccFIo5dr.s:21     .text.HAL_I2S_RxCpltCallback:00000000 $t
  C:\Temp\ccFIo5dr.s:27     .text.HAL_I2S_RxCpltCallback:00000000 HAL_I2S_RxCpltCallback
  C:\Temp\ccFIo5dr.s:73     .text.HAL_I2S_RxCpltCallback:00000024 $d
  C:\Temp\ccFIo5dr.s:1159   .bss.hi2s3:00000000 hi2s3
  C:\Temp\ccFIo5dr.s:1077   .bss.pcm_buffer:00000000 pcm_buffer
  C:\Temp\ccFIo5dr.s:1084   .bss.pdm_buffer:00000000 pdm_buffer
  C:\Temp\ccFIo5dr.s:1096   .bss.clearToSend:00000000 clearToSend
  C:\Temp\ccFIo5dr.s:83     .text.Transmit_PCM_Data:00000000 $t
  C:\Temp\ccFIo5dr.s:89     .text.Transmit_PCM_Data:00000000 Transmit_PCM_Data
  C:\Temp\ccFIo5dr.s:118    .text.Transmit_PCM_Data:00000014 $d
  C:\Temp\ccFIo5dr.s:1138   .bss.huart2:00000000 huart2
  C:\Temp\ccFIo5dr.s:123    .text.MX_DMA_Init:00000000 $t
  C:\Temp\ccFIo5dr.s:129    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\ccFIo5dr.s:187    .text.MX_DMA_Init:00000040 $d
  C:\Temp\ccFIo5dr.s:192    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\ccFIo5dr.s:198    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\ccFIo5dr.s:424    .text.MX_GPIO_Init:0000010c $d
  C:\Temp\ccFIo5dr.s:433    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\ccFIo5dr.s:439    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\ccFIo5dr.s:472    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\ccFIo5dr.s:477    .text.Error_Handler:00000000 $t
  C:\Temp\ccFIo5dr.s:483    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\ccFIo5dr.s:515    .text.SystemClock_Config:00000000 $t
  C:\Temp\ccFIo5dr.s:521    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\ccFIo5dr.s:663    .text.SystemClock_Config:0000009c $d
  C:\Temp\ccFIo5dr.s:669    .text.MX_CRC_Init:00000000 $t
  C:\Temp\ccFIo5dr.s:675    .text.MX_CRC_Init:00000000 MX_CRC_Init
  C:\Temp\ccFIo5dr.s:711    .text.MX_CRC_Init:00000020 $d
  C:\Temp\ccFIo5dr.s:1166   .bss.hcrc:00000000 hcrc
  C:\Temp\ccFIo5dr.s:717    .text.MX_I2S3_Init:00000000 $t
  C:\Temp\ccFIo5dr.s:723    .text.MX_I2S3_Init:00000000 MX_I2S3_Init
  C:\Temp\ccFIo5dr.s:781    .text.MX_I2S3_Init:00000030 $d
  C:\Temp\ccFIo5dr.s:787    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\ccFIo5dr.s:793    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\ccFIo5dr.s:892    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\ccFIo5dr.s:1145   .bss.htim2:00000000 htim2
  C:\Temp\ccFIo5dr.s:897    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\ccFIo5dr.s:903    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\ccFIo5dr.s:960    .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\ccFIo5dr.s:966    .text.main:00000000 $t
  C:\Temp\ccFIo5dr.s:972    .text.main:00000000 main
  C:\Temp\ccFIo5dr.s:1063   .text.main:00000068 $d
  C:\Temp\ccFIo5dr.s:1090   .bss.counter:00000000 counter
  C:\Temp\ccFIo5dr.s:1074   .bss.pcm_buffer:00000000 $d
  C:\Temp\ccFIo5dr.s:1081   .bss.pdm_buffer:00000000 $d
  C:\Temp\ccFIo5dr.s:1091   .bss.counter:00000000 $d
  C:\Temp\ccFIo5dr.s:1097   .bss.clearToSend:00000000 $d
  C:\Temp\ccFIo5dr.s:1103   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\ccFIo5dr.s:1100   .bss.bigBuffer:00000000 $d
  C:\Temp\ccFIo5dr.s:1110   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\ccFIo5dr.s:1107   .rodata.expectedTerminator:00000000 $d
  C:\Temp\ccFIo5dr.s:1117   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\ccFIo5dr.s:1114   .rodata.expectedHeader:00000000 $d
  C:\Temp\ccFIo5dr.s:1124   .bss.pcm_buffer_len:00000000 pcm_buffer_len
  C:\Temp\ccFIo5dr.s:1121   .bss.pcm_buffer_len:00000000 $d
ARM GAS  C:\Temp\ccFIo5dr.s 			page 51


  C:\Temp\ccFIo5dr.s:1131   .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
  C:\Temp\ccFIo5dr.s:1128   .bss.hdma_usart2_tx:00000000 $d
  C:\Temp\ccFIo5dr.s:1135   .bss.huart2:00000000 $d
  C:\Temp\ccFIo5dr.s:1142   .bss.htim2:00000000 $d
  C:\Temp\ccFIo5dr.s:1152   .bss.hdma_spi3_rx:00000000 hdma_spi3_rx
  C:\Temp\ccFIo5dr.s:1149   .bss.hdma_spi3_rx:00000000 $d
  C:\Temp\ccFIo5dr.s:1156   .bss.hi2s3:00000000 $d
  C:\Temp\ccFIo5dr.s:1163   .bss.hcrc:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
PDM_Filter
PDM1_filter_handler
HAL_UART_Transmit
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_CRC_Init
HAL_I2S_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
HAL_Init
MX_PDM2PCM_Init
HAL_I2S_Receive_DMA
