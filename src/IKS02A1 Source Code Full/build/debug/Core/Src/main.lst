ARM GAS  C:\Temp\cc5nzfdt.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.configureTimer,"ax",%progbits
  21              		.align	1
  22              		.global	configureTimer
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	configureTimer:
  28              	.LVL0:
  29              	.LFB134:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "iks02a1_motion_sensors.h"
  25:Core/Src/main.c **** #include "IKS02A1_Simulink.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  C:\Temp\cc5nzfdt.s 			page 2


  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart2;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel1_axis;
  51:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t gyro_axis;
  52:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t accel2_axis;
  53:Core/Src/main.c **** IKS02A1_MOTION_SENSOR_Axes_t mag_axis;
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_TIM2_Init(void);
  59:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** // #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  67:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  68:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2+2+2+1);
  69:Core/Src/main.c **** uint8_t bigBuffer[28+3+3] = {0};
  70:Core/Src/main.c **** uint8_t clearToSend = 0;
  71:Core/Src/main.c **** uint8_t calibrated = 0;
  72:Core/Src/main.c **** int32_t counter = 0;
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** extern float fastestODR;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** void configureTimer(float desired_frequency) {
  30              		.loc 1 77 46 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  78:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
  79:Core/Src/main.c ****     float clock_frequency = 100000000.0f; // 100 MHz
  35              		.loc 1 79 5 view .LVU1
  80:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc5nzfdt.s 			page 3


  81:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
  82:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
  36              		.loc 1 82 5 view .LVU2
  37              		.loc 1 82 11 is_stmt 0 view .LVU3
  38 0000 DFED137A 		vldr.32	s15, .L6
  39 0004 C7EE806A 		vdiv.f32	s13, s15, s0
  40              	.LVL1:
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
  85:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
  41              		.loc 1 85 5 is_stmt 1 view .LVU4
  42              		.loc 1 85 50 is_stmt 0 view .LVU5
  43 0008 DFED127A 		vldr.32	s15, .L6+4
  44 000c 66EEA77A 		vmul.f32	s15, s13, s15
  45              		.loc 1 85 14 view .LVU6
  46 0010 FCEEE77A 		vcvt.u32.f32	s15, s15
  47 0014 17EE903A 		vmov	r3, s15	@ int
  48              	.LVL2:
  86:Core/Src/main.c ****     if (prescaler > 65535) {
  49              		.loc 1 86 5 is_stmt 1 view .LVU7
  50              		.loc 1 86 8 is_stmt 0 view .LVU8
  51 0018 B3F5803F 		cmp	r3, #65536
  52 001c 01D3     		bcc	.L2
  87:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
  53              		.loc 1 87 19 view .LVU9
  54 001e 4FF6FF73 		movw	r3, #65535
  55              	.LVL3:
  56              	.L2:
  88:Core/Src/main.c ****     }
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
  91:Core/Src/main.c ****     uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
  57              		.loc 1 91 5 is_stmt 1 view .LVU10
  58              		.loc 1 91 57 is_stmt 0 view .LVU11
  59 0022 5A1C     		adds	r2, r3, #1
  60 0024 07EE102A 		vmov	s14, r2	@ int
  61              		.loc 1 91 44 view .LVU12
  62 0028 B8EE477A 		vcvt.f32.u32	s14, s14
  63 002c C6EE877A 		vdiv.f32	s15, s13, s14
  64              		.loc 1 91 14 view .LVU13
  65 0030 FCEEE77A 		vcvt.u32.f32	s15, s15
  66 0034 17EE902A 		vmov	r2, s15	@ int
  67              	.LVL4:
  92:Core/Src/main.c ****     if (arr > 65535) {
  68              		.loc 1 92 5 is_stmt 1 view .LVU14
  69              		.loc 1 92 8 is_stmt 0 view .LVU15
  70 0038 B2F5803F 		cmp	r2, #65536
  71 003c 01D3     		bcc	.L3
  93:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
  72              		.loc 1 93 13 view .LVU16
  73 003e 4FF6FF72 		movw	r2, #65535
  74              	.LVL5:
  75              	.L3:
  94:Core/Src/main.c ****     }
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****     // Update the timer registers
  97:Core/Src/main.c ****     TIM2->PSC = prescaler;   // Set the prescaler
ARM GAS  C:\Temp\cc5nzfdt.s 			page 4


  76              		.loc 1 97 5 is_stmt 1 view .LVU17
  77              		.loc 1 97 15 is_stmt 0 view .LVU18
  78 0042 4FF08041 		mov	r1, #1073741824
  79 0046 8B62     		str	r3, [r1, #40]
  98:Core/Src/main.c ****     TIM2->ARR = arr;         // Set the auto-reload register
  80              		.loc 1 98 5 is_stmt 1 view .LVU19
  81              		.loc 1 98 15 is_stmt 0 view .LVU20
  82 0048 CA62     		str	r2, [r1, #44]
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 101:Core/Src/main.c ****     TIM2->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
  83              		.loc 1 101 5 is_stmt 1 view .LVU21
  84              		.loc 1 101 15 is_stmt 0 view .LVU22
  85 004a 0123     		movs	r3, #1
  86              	.LVL6:
  87              		.loc 1 101 15 view .LVU23
  88 004c 4B61     		str	r3, [r1, #20]
 102:Core/Src/main.c **** }
  89              		.loc 1 102 1 view .LVU24
  90 004e 7047     		bx	lr
  91              	.L7:
  92              		.align	2
  93              	.L6:
  94 0050 20BCBE4C 		.word	1287568416
  95 0054 00008037 		.word	931135488
  96              		.cfi_endproc
  97              	.LFE134:
  99              		.section	.text.initialCalibration,"ax",%progbits
 100              		.align	1
 101              		.global	initialCalibration
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	initialCalibration:
 107              	.LFB135:
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** void initialCalibration(){
 108              		.loc 1 104 26 is_stmt 1 view -0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112 0000 10B5     		push	{r4, lr}
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 4, -8
 115              		.cfi_offset 14, -4
 105:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 116              		.loc 1 105 3 view .LVU26
 117 0002 184C     		ldr	r4, .L12
 118 0004 0123     		movs	r3, #1
 119 0006 2222     		movs	r2, #34
 120 0008 2146     		mov	r1, r4
 121 000a 1748     		ldr	r0, .L12+4
 122 000c FFF7FEFF 		bl	HAL_UART_Receive
 123              	.LVL7:
 106:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 124              		.loc 1 106 3 view .LVU27
 125              		.loc 1 106 16 is_stmt 0 view .LVU28
ARM GAS  C:\Temp\cc5nzfdt.s 			page 5


 126 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 127              		.loc 1 106 6 view .LVU29
 128 0012 4A2B     		cmp	r3, #74
 129 0014 00D0     		beq	.L11
 130              	.L8:
 107:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 108:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 109:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 110:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 111:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 112:Core/Src/main.c ****         calibrated = 1;
 113:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 114:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 115:Core/Src/main.c ****         configureTimer(fastestODR);
 116:Core/Src/main.c ****         HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 117:Core/Src/main.c ****   }
 118:Core/Src/main.c **** }
 131              		.loc 1 118 1 view .LVU30
 132 0016 10BD     		pop	{r4, pc}
 133              	.L11:
 107:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 134              		.loc 1 107 16 discriminator 1 view .LVU31
 135 0018 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 106:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 136              		.loc 1 106 41 discriminator 1 view .LVU32
 137 001a 5F2B     		cmp	r3, #95
 138 001c FBD1     		bne	.L8
 108:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 139              		.loc 1 108 16 view .LVU33
 140 001e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 107:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 141              		.loc 1 107 41 view .LVU34
 142 0020 412B     		cmp	r3, #65
 143 0022 F8D1     		bne	.L8
 109:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 144              		.loc 1 109 16 view .LVU35
 145 0024 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 108:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 146              		.loc 1 108 41 view .LVU36
 147 0026 412B     		cmp	r3, #65
 148 0028 F5D1     		bne	.L8
 110:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 149              		.loc 1 110 16 view .LVU37
 150 002a 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 109:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 151              		.loc 1 109 69 view .LVU38
 152 002e 5F2B     		cmp	r3, #95
 153 0030 F1D1     		bne	.L8
 111:Core/Src/main.c ****         calibrated = 1;
 154              		.loc 1 111 16 view .LVU39
 155 0032 94F82130 		ldrb	r3, [r4, #33]	@ zero_extendqisi2
 110:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 156              		.loc 1 110 69 view .LVU40
 157 0036 4A2B     		cmp	r3, #74
 158 0038 EDD1     		bne	.L8
 112:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 159              		.loc 1 112 9 is_stmt 1 view .LVU41
ARM GAS  C:\Temp\cc5nzfdt.s 			page 6


 112:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 160              		.loc 1 112 20 is_stmt 0 view .LVU42
 161 003a 0124     		movs	r4, #1
 162 003c 0B4B     		ldr	r3, .L12+8
 163 003e 1C70     		strb	r4, [r3]
 113:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 164              		.loc 1 113 9 is_stmt 1 view .LVU43
 165 0040 0B48     		ldr	r0, .L12+12
 166 0042 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 167              	.LVL8:
 114:Core/Src/main.c ****         configureTimer(fastestODR);
 168              		.loc 1 114 9 view .LVU44
 169 0046 0748     		ldr	r0, .L12
 170 0048 FFF7FEFF 		bl	receivedFromSimulink
 171              	.LVL9:
 115:Core/Src/main.c ****         HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,1);
 172              		.loc 1 115 9 view .LVU45
 173 004c 094B     		ldr	r3, .L12+16
 174 004e 93ED000A 		vldr.32	s0, [r3]
 175 0052 FFF7FEFF 		bl	configureTimer
 176              	.LVL10:
 116:Core/Src/main.c ****   }
 177              		.loc 1 116 9 view .LVU46
 178 0056 2246     		mov	r2, r4
 179 0058 2021     		movs	r1, #32
 180 005a 0748     		ldr	r0, .L12+20
 181 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 182              	.LVL11:
 183              		.loc 1 118 1 is_stmt 0 view .LVU47
 184 0060 D9E7     		b	.L8
 185              	.L13:
 186 0062 00BF     		.align	2
 187              	.L12:
 188 0064 00000000 		.word	bigBuffer
 189 0068 00000000 		.word	huart2
 190 006c 00000000 		.word	calibrated
 191 0070 00000000 		.word	htim2
 192 0074 00000000 		.word	fastestODR
 193 0078 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE135:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.global	MX_DMA_Init
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 204              	MX_DMA_Init:
 205              	.LFB140:
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** /* USER CODE END 0 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /**
 123:Core/Src/main.c ****   * @brief  The application entry point.
 124:Core/Src/main.c ****   * @retval int
 125:Core/Src/main.c ****   */
 126:Core/Src/main.c **** int main(void)
ARM GAS  C:\Temp\cc5nzfdt.s 			page 7


 127:Core/Src/main.c **** {
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* USER CODE END 1 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 136:Core/Src/main.c ****   HAL_Init();
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE END Init */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* Configure the system clock */
 143:Core/Src/main.c ****   SystemClock_Config();
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 146:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,0);
 147:Core/Src/main.c ****   /* USER CODE END SysInit */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* Initialize all configured peripherals */
 150:Core/Src/main.c ****   MX_GPIO_Init();
 151:Core/Src/main.c ****   MX_DMA_Init();
 152:Core/Src/main.c ****   MX_TIM2_Init();
 153:Core/Src/main.c ****   MX_USART2_UART_Init();
 154:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 155:Core/Src/main.c ****   initIKS02A1();
 156:Core/Src/main.c ****   while (calibrated != 1){
 157:Core/Src/main.c ****     initialCalibration();
 158:Core/Src/main.c ****   }
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE END 2 */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* Infinite loop */
 163:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   while (1)
 166:Core/Src/main.c ****   {
 167:Core/Src/main.c ****     getIKS02A1();    
 168:Core/Src/main.c ****     
 169:Core/Src/main.c ****     /* USER CODE END WHILE */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 172:Core/Src/main.c ****   }
 173:Core/Src/main.c ****   /* USER CODE END 3 */
 174:Core/Src/main.c **** }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** /**
 177:Core/Src/main.c ****   * @brief System Clock Configuration
 178:Core/Src/main.c ****   * @retval None
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c **** void SystemClock_Config(void)
 181:Core/Src/main.c **** {
 182:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 183:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  C:\Temp\cc5nzfdt.s 			page 8


 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 188:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 191:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 192:Core/Src/main.c ****   */
 193:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 202:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 203:Core/Src/main.c ****   {
 204:Core/Src/main.c ****     Error_Handler();
 205:Core/Src/main.c ****   }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 210:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 211:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 212:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 213:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 214:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 217:Core/Src/main.c ****   {
 218:Core/Src/main.c ****     Error_Handler();
 219:Core/Src/main.c ****   }
 220:Core/Src/main.c **** }
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /**
 223:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 224:Core/Src/main.c ****   * @param None
 225:Core/Src/main.c ****   * @retval None
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c **** static void MX_TIM2_Init(void)
 228:Core/Src/main.c **** {
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 235:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 240:Core/Src/main.c ****   htim2.Instance = TIM2;
ARM GAS  C:\Temp\cc5nzfdt.s 			page 9


 241:Core/Src/main.c ****   htim2.Init.Prescaler = 100-1;
 242:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 243:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 244:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 245:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 246:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 247:Core/Src/main.c ****   {
 248:Core/Src/main.c ****     Error_Handler();
 249:Core/Src/main.c ****   }
 250:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 251:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 252:Core/Src/main.c ****   {
 253:Core/Src/main.c ****     Error_Handler();
 254:Core/Src/main.c ****   }
 255:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 256:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 257:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 258:Core/Src/main.c ****   {
 259:Core/Src/main.c ****     Error_Handler();
 260:Core/Src/main.c ****   }
 261:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c **** }
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** /**
 268:Core/Src/main.c ****   * @brief USART2 Initialization Function
 269:Core/Src/main.c ****   * @param None
 270:Core/Src/main.c ****   * @retval None
 271:Core/Src/main.c ****   */
 272:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 273:Core/Src/main.c **** {
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 282:Core/Src/main.c ****   huart2.Instance = USART2;
 283:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 284:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 285:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 286:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 287:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 288:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 289:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 290:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 297:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc5nzfdt.s 			page 10


 298:Core/Src/main.c **** }
 299:Core/Src/main.c **** 
 300:Core/Src/main.c **** /**
 301:Core/Src/main.c ****   * Enable DMA controller clock
 302:Core/Src/main.c ****   */
 303:Core/Src/main.c **** void MX_DMA_Init(void)
 304:Core/Src/main.c **** {
 206              		.loc 1 304 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              		.cfi_def_cfa_offset 4
 212              		.cfi_offset 14, -4
 213 0002 83B0     		sub	sp, sp, #12
 214              		.cfi_def_cfa_offset 16
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* DMA controller clock enable */
 307:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 215              		.loc 1 307 3 view .LVU49
 216              	.LBB4:
 217              		.loc 1 307 3 view .LVU50
 218 0004 0021     		movs	r1, #0
 219 0006 0191     		str	r1, [sp, #4]
 220              		.loc 1 307 3 view .LVU51
 221 0008 094B     		ldr	r3, .L16
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F40012 		orr	r2, r2, #2097152
 224 0010 1A63     		str	r2, [r3, #48]
 225              		.loc 1 307 3 view .LVU52
 226 0012 1B6B     		ldr	r3, [r3, #48]
 227 0014 03F40013 		and	r3, r3, #2097152
 228 0018 0193     		str	r3, [sp, #4]
 229              		.loc 1 307 3 view .LVU53
 230 001a 019B     		ldr	r3, [sp, #4]
 231              	.LBE4:
 232              		.loc 1 307 3 view .LVU54
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* DMA interrupt init */
 310:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 311:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 233              		.loc 1 311 3 view .LVU55
 234 001c 0A46     		mov	r2, r1
 235 001e 1020     		movs	r0, #16
 236 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 237              	.LVL12:
 312:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 238              		.loc 1 312 3 view .LVU56
 239 0024 1020     		movs	r0, #16
 240 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 241              	.LVL13:
 313:Core/Src/main.c **** 
 314:Core/Src/main.c **** }
 242              		.loc 1 314 1 is_stmt 0 view .LVU57
 243 002a 03B0     		add	sp, sp, #12
 244              		.cfi_def_cfa_offset 4
 245              		@ sp needed
ARM GAS  C:\Temp\cc5nzfdt.s 			page 11


 246 002c 5DF804FB 		ldr	pc, [sp], #4
 247              	.L17:
 248              		.align	2
 249              	.L16:
 250 0030 00380240 		.word	1073887232
 251              		.cfi_endproc
 252              	.LFE140:
 254              		.section	.text.MX_GPIO_Init,"ax",%progbits
 255              		.align	1
 256              		.global	MX_GPIO_Init
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	MX_GPIO_Init:
 262              	.LFB141:
 315:Core/Src/main.c **** 
 316:Core/Src/main.c **** /**
 317:Core/Src/main.c ****   * @brief GPIO Initialization Function
 318:Core/Src/main.c ****   * @param None
 319:Core/Src/main.c ****   * @retval None
 320:Core/Src/main.c ****   */
 321:Core/Src/main.c **** void MX_GPIO_Init(void)
 322:Core/Src/main.c **** {
 263              		.loc 1 322 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 40
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 268              		.cfi_def_cfa_offset 20
 269              		.cfi_offset 4, -20
 270              		.cfi_offset 5, -16
 271              		.cfi_offset 6, -12
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 8BB0     		sub	sp, sp, #44
 275              		.cfi_def_cfa_offset 64
 323:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 276              		.loc 1 323 3 view .LVU59
 277              		.loc 1 323 20 is_stmt 0 view .LVU60
 278 0004 0024     		movs	r4, #0
 279 0006 0594     		str	r4, [sp, #20]
 280 0008 0694     		str	r4, [sp, #24]
 281 000a 0794     		str	r4, [sp, #28]
 282 000c 0894     		str	r4, [sp, #32]
 283 000e 0994     		str	r4, [sp, #36]
 324:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 325:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 328:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 284              		.loc 1 328 3 is_stmt 1 view .LVU61
 285              	.LBB5:
 286              		.loc 1 328 3 view .LVU62
 287 0010 0094     		str	r4, [sp]
 288              		.loc 1 328 3 view .LVU63
 289 0012 3E4B     		ldr	r3, .L20
 290 0014 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\Temp\cc5nzfdt.s 			page 12


 291 0016 42F00402 		orr	r2, r2, #4
 292 001a 1A63     		str	r2, [r3, #48]
 293              		.loc 1 328 3 view .LVU64
 294 001c 1A6B     		ldr	r2, [r3, #48]
 295 001e 02F00402 		and	r2, r2, #4
 296 0022 0092     		str	r2, [sp]
 297              		.loc 1 328 3 view .LVU65
 298 0024 009A     		ldr	r2, [sp]
 299              	.LBE5:
 300              		.loc 1 328 3 view .LVU66
 329:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 301              		.loc 1 329 3 view .LVU67
 302              	.LBB6:
 303              		.loc 1 329 3 view .LVU68
 304 0026 0194     		str	r4, [sp, #4]
 305              		.loc 1 329 3 view .LVU69
 306 0028 1A6B     		ldr	r2, [r3, #48]
 307 002a 42F08002 		orr	r2, r2, #128
 308 002e 1A63     		str	r2, [r3, #48]
 309              		.loc 1 329 3 view .LVU70
 310 0030 1A6B     		ldr	r2, [r3, #48]
 311 0032 02F08002 		and	r2, r2, #128
 312 0036 0192     		str	r2, [sp, #4]
 313              		.loc 1 329 3 view .LVU71
 314 0038 019A     		ldr	r2, [sp, #4]
 315              	.LBE6:
 316              		.loc 1 329 3 view .LVU72
 330:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 317              		.loc 1 330 3 view .LVU73
 318              	.LBB7:
 319              		.loc 1 330 3 view .LVU74
 320 003a 0294     		str	r4, [sp, #8]
 321              		.loc 1 330 3 view .LVU75
 322 003c 1A6B     		ldr	r2, [r3, #48]
 323 003e 42F00102 		orr	r2, r2, #1
 324 0042 1A63     		str	r2, [r3, #48]
 325              		.loc 1 330 3 view .LVU76
 326 0044 1A6B     		ldr	r2, [r3, #48]
 327 0046 02F00102 		and	r2, r2, #1
 328 004a 0292     		str	r2, [sp, #8]
 329              		.loc 1 330 3 view .LVU77
 330 004c 029A     		ldr	r2, [sp, #8]
 331              	.LBE7:
 332              		.loc 1 330 3 view .LVU78
 331:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 333              		.loc 1 331 3 view .LVU79
 334              	.LBB8:
 335              		.loc 1 331 3 view .LVU80
 336 004e 0394     		str	r4, [sp, #12]
 337              		.loc 1 331 3 view .LVU81
 338 0050 1A6B     		ldr	r2, [r3, #48]
 339 0052 42F00202 		orr	r2, r2, #2
 340 0056 1A63     		str	r2, [r3, #48]
 341              		.loc 1 331 3 view .LVU82
 342 0058 1A6B     		ldr	r2, [r3, #48]
 343 005a 02F00202 		and	r2, r2, #2
 344 005e 0392     		str	r2, [sp, #12]
ARM GAS  C:\Temp\cc5nzfdt.s 			page 13


 345              		.loc 1 331 3 view .LVU83
 346 0060 039A     		ldr	r2, [sp, #12]
 347              	.LBE8:
 348              		.loc 1 331 3 view .LVU84
 332:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 349              		.loc 1 332 3 view .LVU85
 350              	.LBB9:
 351              		.loc 1 332 3 view .LVU86
 352 0062 0494     		str	r4, [sp, #16]
 353              		.loc 1 332 3 view .LVU87
 354 0064 1A6B     		ldr	r2, [r3, #48]
 355 0066 42F00802 		orr	r2, r2, #8
 356 006a 1A63     		str	r2, [r3, #48]
 357              		.loc 1 332 3 view .LVU88
 358 006c 1B6B     		ldr	r3, [r3, #48]
 359 006e 03F00803 		and	r3, r3, #8
 360 0072 0493     		str	r3, [sp, #16]
 361              		.loc 1 332 3 view .LVU89
 362 0074 049B     		ldr	r3, [sp, #16]
 363              	.LBE9:
 364              		.loc 1 332 3 view .LVU90
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 335:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 365              		.loc 1 335 3 view .LVU91
 366 0076 264E     		ldr	r6, .L20+4
 367 0078 2246     		mov	r2, r4
 368 007a 2021     		movs	r1, #32
 369 007c 3046     		mov	r0, r6
 370 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 371              	.LVL14:
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 338:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 372              		.loc 1 338 3 view .LVU92
 373              		.loc 1 338 23 is_stmt 0 view .LVU93
 374 0082 4FF40053 		mov	r3, #8192
 375 0086 0593     		str	r3, [sp, #20]
 339:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 376              		.loc 1 339 3 is_stmt 1 view .LVU94
 377              		.loc 1 339 24 is_stmt 0 view .LVU95
 378 0088 4FF48813 		mov	r3, #1114112
 379 008c 0693     		str	r3, [sp, #24]
 340:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 380              		.loc 1 340 3 is_stmt 1 view .LVU96
 381              		.loc 1 340 24 is_stmt 0 view .LVU97
 382 008e 0794     		str	r4, [sp, #28]
 341:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 383              		.loc 1 341 3 is_stmt 1 view .LVU98
 384 0090 204F     		ldr	r7, .L20+8
 385 0092 05A9     		add	r1, sp, #20
 386 0094 3846     		mov	r0, r7
 387 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 388              	.LVL15:
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 344:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
ARM GAS  C:\Temp\cc5nzfdt.s 			page 14


 345:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 346:Core/Src/main.c ****                            PC12 */
 347:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 389              		.loc 1 347 3 view .LVU99
 390              		.loc 1 347 23 is_stmt 0 view .LVU100
 391 009a 41F6FF73 		movw	r3, #8191
 392 009e 0593     		str	r3, [sp, #20]
 348:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 349:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 350:Core/Src/main.c ****                           |GPIO_PIN_12;
 351:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 393              		.loc 1 351 3 is_stmt 1 view .LVU101
 394              		.loc 1 351 24 is_stmt 0 view .LVU102
 395 00a0 0325     		movs	r5, #3
 396 00a2 0695     		str	r5, [sp, #24]
 352:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 397              		.loc 1 352 3 is_stmt 1 view .LVU103
 398              		.loc 1 352 24 is_stmt 0 view .LVU104
 399 00a4 0794     		str	r4, [sp, #28]
 353:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 400              		.loc 1 353 3 is_stmt 1 view .LVU105
 401 00a6 05A9     		add	r1, sp, #20
 402 00a8 3846     		mov	r0, r7
 403 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 404              	.LVL16:
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA4 PA6
 356:Core/Src/main.c ****                            PA7 PA8 PA9 PA10
 357:Core/Src/main.c ****                            PA11 PA12 PA15 */
 358:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 405              		.loc 1 358 3 view .LVU106
 406              		.loc 1 358 23 is_stmt 0 view .LVU107
 407 00ae 49F6D373 		movw	r3, #40915
 408 00b2 0593     		str	r3, [sp, #20]
 359:Core/Src/main.c ****                           |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 360:Core/Src/main.c ****                           |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 361:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 409              		.loc 1 361 3 is_stmt 1 view .LVU108
 410              		.loc 1 361 24 is_stmt 0 view .LVU109
 411 00b4 0695     		str	r5, [sp, #24]
 362:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 412              		.loc 1 362 3 is_stmt 1 view .LVU110
 413              		.loc 1 362 24 is_stmt 0 view .LVU111
 414 00b6 0794     		str	r4, [sp, #28]
 363:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 415              		.loc 1 363 3 is_stmt 1 view .LVU112
 416 00b8 05A9     		add	r1, sp, #20
 417 00ba 3046     		mov	r0, r6
 418 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 419              	.LVL17:
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 366:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 420              		.loc 1 366 3 view .LVU113
 421              		.loc 1 366 23 is_stmt 0 view .LVU114
 422 00c0 2023     		movs	r3, #32
 423 00c2 0593     		str	r3, [sp, #20]
ARM GAS  C:\Temp\cc5nzfdt.s 			page 15


 367:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 424              		.loc 1 367 3 is_stmt 1 view .LVU115
 425              		.loc 1 367 24 is_stmt 0 view .LVU116
 426 00c4 0123     		movs	r3, #1
 427 00c6 0693     		str	r3, [sp, #24]
 368:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 428              		.loc 1 368 3 is_stmt 1 view .LVU117
 429              		.loc 1 368 24 is_stmt 0 view .LVU118
 430 00c8 0794     		str	r4, [sp, #28]
 369:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 431              		.loc 1 369 3 is_stmt 1 view .LVU119
 432              		.loc 1 369 25 is_stmt 0 view .LVU120
 433 00ca 0894     		str	r4, [sp, #32]
 370:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 434              		.loc 1 370 3 is_stmt 1 view .LVU121
 435 00cc 05A9     		add	r1, sp, #20
 436 00ce 3046     		mov	r0, r6
 437 00d0 FFF7FEFF 		bl	HAL_GPIO_Init
 438              	.LVL18:
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 373:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 374:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 375:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 439              		.loc 1 375 3 view .LVU122
 440              		.loc 1 375 23 is_stmt 0 view .LVU123
 441 00d4 4FF2F743 		movw	r3, #62711
 442 00d8 0593     		str	r3, [sp, #20]
 376:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 377:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 378:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 443              		.loc 1 378 3 is_stmt 1 view .LVU124
 444              		.loc 1 378 24 is_stmt 0 view .LVU125
 445 00da 0695     		str	r5, [sp, #24]
 379:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 446              		.loc 1 379 3 is_stmt 1 view .LVU126
 447              		.loc 1 379 24 is_stmt 0 view .LVU127
 448 00dc 0794     		str	r4, [sp, #28]
 380:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 449              		.loc 1 380 3 is_stmt 1 view .LVU128
 450 00de 05A9     		add	r1, sp, #20
 451 00e0 0D48     		ldr	r0, .L20+12
 452 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 453              	.LVL19:
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 383:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 454              		.loc 1 383 3 view .LVU129
 455              		.loc 1 383 23 is_stmt 0 view .LVU130
 456 00e6 0423     		movs	r3, #4
 457 00e8 0593     		str	r3, [sp, #20]
 384:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 458              		.loc 1 384 3 is_stmt 1 view .LVU131
 459              		.loc 1 384 24 is_stmt 0 view .LVU132
 460 00ea 0695     		str	r5, [sp, #24]
 385:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 461              		.loc 1 385 3 is_stmt 1 view .LVU133
ARM GAS  C:\Temp\cc5nzfdt.s 			page 16


 462              		.loc 1 385 24 is_stmt 0 view .LVU134
 463 00ec 0794     		str	r4, [sp, #28]
 386:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 464              		.loc 1 386 3 is_stmt 1 view .LVU135
 465 00ee 05A9     		add	r1, sp, #20
 466 00f0 0A48     		ldr	r0, .L20+16
 467 00f2 FFF7FEFF 		bl	HAL_GPIO_Init
 468              	.LVL20:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /* EXTI interrupt init*/
 389:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 469              		.loc 1 389 3 view .LVU136
 470 00f6 2246     		mov	r2, r4
 471 00f8 2146     		mov	r1, r4
 472 00fa 2820     		movs	r0, #40
 473 00fc FFF7FEFF 		bl	HAL_NVIC_SetPriority
 474              	.LVL21:
 390:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 475              		.loc 1 390 3 view .LVU137
 476 0100 2820     		movs	r0, #40
 477 0102 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 478              	.LVL22:
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 393:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 394:Core/Src/main.c **** }
 479              		.loc 1 394 1 is_stmt 0 view .LVU138
 480 0106 0BB0     		add	sp, sp, #44
 481              		.cfi_def_cfa_offset 20
 482              		@ sp needed
 483 0108 F0BD     		pop	{r4, r5, r6, r7, pc}
 484              	.L21:
 485 010a 00BF     		.align	2
 486              	.L20:
 487 010c 00380240 		.word	1073887232
 488 0110 00000240 		.word	1073872896
 489 0114 00080240 		.word	1073874944
 490 0118 00040240 		.word	1073873920
 491 011c 000C0240 		.word	1073875968
 492              		.cfi_endproc
 493              	.LFE141:
 495              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 496              		.align	1
 497              		.global	HAL_TIM_PeriodElapsedCallback
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 502              	HAL_TIM_PeriodElapsedCallback:
 503              	.LVL23:
 504              	.LFB142:
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** /* USER CODE END 4 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** /**
 401:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
ARM GAS  C:\Temp\cc5nzfdt.s 			page 17


 402:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 403:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 404:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 405:Core/Src/main.c ****   * @param  htim : TIM handle
 406:Core/Src/main.c ****   * @retval None
 407:Core/Src/main.c ****   */
 408:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 409:Core/Src/main.c **** {
 505              		.loc 1 409 1 is_stmt 1 view -0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		.loc 1 409 1 is_stmt 0 view .LVU140
 510 0000 08B5     		push	{r3, lr}
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 3, -8
 513              		.cfi_offset 14, -4
 410:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 413:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 514              		.loc 1 413 3 is_stmt 1 view .LVU141
 515              		.loc 1 413 11 is_stmt 0 view .LVU142
 516 0002 0268     		ldr	r2, [r0]
 517              		.loc 1 413 6 view .LVU143
 518 0004 034B     		ldr	r3, .L26
 519 0006 9A42     		cmp	r2, r3
 520 0008 00D0     		beq	.L25
 521              	.LVL24:
 522              	.L22:
 414:Core/Src/main.c ****     HAL_IncTick();
 415:Core/Src/main.c ****   }
 416:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 419:Core/Src/main.c **** }
 523              		.loc 1 419 1 view .LVU144
 524 000a 08BD     		pop	{r3, pc}
 525              	.LVL25:
 526              	.L25:
 414:Core/Src/main.c ****     HAL_IncTick();
 527              		.loc 1 414 5 is_stmt 1 view .LVU145
 528 000c FFF7FEFF 		bl	HAL_IncTick
 529              	.LVL26:
 530              		.loc 1 419 1 is_stmt 0 view .LVU146
 531 0010 FBE7     		b	.L22
 532              	.L27:
 533 0012 00BF     		.align	2
 534              	.L26:
 535 0014 00000140 		.word	1073807360
 536              		.cfi_endproc
 537              	.LFE142:
 539              		.section	.text.Error_Handler,"ax",%progbits
 540              		.align	1
 541              		.global	Error_Handler
 542              		.syntax unified
 543              		.thumb
ARM GAS  C:\Temp\cc5nzfdt.s 			page 18


 544              		.thumb_func
 546              	Error_Handler:
 547              	.LFB143:
 420:Core/Src/main.c **** 
 421:Core/Src/main.c **** /**
 422:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 423:Core/Src/main.c ****   * @retval None
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c **** void Error_Handler(void)
 426:Core/Src/main.c **** {
 548              		.loc 1 426 1 is_stmt 1 view -0
 549              		.cfi_startproc
 550              		@ Volatile: function does not return.
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 427:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 428:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 429:Core/Src/main.c ****   __disable_irq();
 554              		.loc 1 429 3 view .LVU148
 555              	.LBB10:
 556              	.LBI10:
 557              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
ARM GAS  C:\Temp\cc5nzfdt.s 			page 19


  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Temp\cc5nzfdt.s 			page 20


  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
ARM GAS  C:\Temp\cc5nzfdt.s 			page 21


 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  C:\Temp\cc5nzfdt.s 			page 22


 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc5nzfdt.s 			page 23


 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc5nzfdt.s 			page 24


 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\cc5nzfdt.s 			page 25


 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\cc5nzfdt.s 			page 26


 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  C:\Temp\cc5nzfdt.s 			page 27


 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  C:\Temp\cc5nzfdt.s 			page 28


 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
ARM GAS  C:\Temp\cc5nzfdt.s 			page 29


 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\cc5nzfdt.s 			page 30


 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
ARM GAS  C:\Temp\cc5nzfdt.s 			page 31


 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  C:\Temp\cc5nzfdt.s 			page 32


 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\cc5nzfdt.s 			page 33


 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\cc5nzfdt.s 			page 34


 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
ARM GAS  C:\Temp\cc5nzfdt.s 			page 35


 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 558              		.loc 2 960 27 view .LVU149
 559              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 560              		.loc 2 962 3 view .LVU150
 561              		.syntax unified
 562              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 563 0000 72B6     		cpsid i
 564              	@ 0 "" 2
 565              		.thumb
 566              		.syntax unified
 567              	.L29:
 568              	.LBE11:
 569              	.LBE10:
 430:Core/Src/main.c ****   while (1)
 570              		.loc 1 430 3 discriminator 1 view .LVU151
 431:Core/Src/main.c ****   {
 432:Core/Src/main.c ****   }
 571              		.loc 1 432 3 discriminator 1 view .LVU152
 430:Core/Src/main.c ****   while (1)
 572              		.loc 1 430 9 discriminator 1 view .LVU153
 573 0002 FEE7     		b	.L29
 574              		.cfi_endproc
 575              	.LFE143:
 577              		.section	.text.MX_TIM2_Init,"ax",%progbits
 578              		.align	1
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 583              	MX_TIM2_Init:
 584              	.LFB138:
 228:Core/Src/main.c **** 
 585              		.loc 1 228 1 view -0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 24
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589 0000 00B5     		push	{lr}
 590              		.cfi_def_cfa_offset 4
 591              		.cfi_offset 14, -4
 592 0002 87B0     		sub	sp, sp, #28
 593              		.cfi_def_cfa_offset 32
 234:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 594              		.loc 1 234 3 view .LVU155
ARM GAS  C:\Temp\cc5nzfdt.s 			page 36


 234:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 595              		.loc 1 234 26 is_stmt 0 view .LVU156
 596 0004 0023     		movs	r3, #0
 597 0006 0293     		str	r3, [sp, #8]
 598 0008 0393     		str	r3, [sp, #12]
 599 000a 0493     		str	r3, [sp, #16]
 600 000c 0593     		str	r3, [sp, #20]
 235:Core/Src/main.c **** 
 601              		.loc 1 235 3 is_stmt 1 view .LVU157
 235:Core/Src/main.c **** 
 602              		.loc 1 235 27 is_stmt 0 view .LVU158
 603 000e 0093     		str	r3, [sp]
 604 0010 0193     		str	r3, [sp, #4]
 240:Core/Src/main.c ****   htim2.Init.Prescaler = 100-1;
 605              		.loc 1 240 3 is_stmt 1 view .LVU159
 240:Core/Src/main.c ****   htim2.Init.Prescaler = 100-1;
 606              		.loc 1 240 18 is_stmt 0 view .LVU160
 607 0012 1448     		ldr	r0, .L38
 608 0014 4FF08042 		mov	r2, #1073741824
 609 0018 0260     		str	r2, [r0]
 241:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 610              		.loc 1 241 3 is_stmt 1 view .LVU161
 241:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 611              		.loc 1 241 24 is_stmt 0 view .LVU162
 612 001a 6322     		movs	r2, #99
 613 001c 4260     		str	r2, [r0, #4]
 242:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 614              		.loc 1 242 3 is_stmt 1 view .LVU163
 242:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 615              		.loc 1 242 26 is_stmt 0 view .LVU164
 616 001e 8360     		str	r3, [r0, #8]
 243:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 617              		.loc 1 243 3 is_stmt 1 view .LVU165
 243:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 618              		.loc 1 243 21 is_stmt 0 view .LVU166
 619 0020 40F2E732 		movw	r2, #999
 620 0024 C260     		str	r2, [r0, #12]
 244:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 621              		.loc 1 244 3 is_stmt 1 view .LVU167
 244:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 622              		.loc 1 244 28 is_stmt 0 view .LVU168
 623 0026 0361     		str	r3, [r0, #16]
 245:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 624              		.loc 1 245 3 is_stmt 1 view .LVU169
 245:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 625              		.loc 1 245 32 is_stmt 0 view .LVU170
 626 0028 8023     		movs	r3, #128
 627 002a 8361     		str	r3, [r0, #24]
 246:Core/Src/main.c ****   {
 628              		.loc 1 246 3 is_stmt 1 view .LVU171
 246:Core/Src/main.c ****   {
 629              		.loc 1 246 7 is_stmt 0 view .LVU172
 630 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 631              	.LVL27:
 246:Core/Src/main.c ****   {
 632              		.loc 1 246 6 view .LVU173
 633 0030 90B9     		cbnz	r0, .L35
ARM GAS  C:\Temp\cc5nzfdt.s 			page 37


 250:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 634              		.loc 1 250 3 is_stmt 1 view .LVU174
 250:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 635              		.loc 1 250 34 is_stmt 0 view .LVU175
 636 0032 4FF48053 		mov	r3, #4096
 637 0036 0293     		str	r3, [sp, #8]
 251:Core/Src/main.c ****   {
 638              		.loc 1 251 3 is_stmt 1 view .LVU176
 251:Core/Src/main.c ****   {
 639              		.loc 1 251 7 is_stmt 0 view .LVU177
 640 0038 02A9     		add	r1, sp, #8
 641 003a 0A48     		ldr	r0, .L38
 642 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 643              	.LVL28:
 251:Core/Src/main.c ****   {
 644              		.loc 1 251 6 view .LVU178
 645 0040 60B9     		cbnz	r0, .L36
 255:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 646              		.loc 1 255 3 is_stmt 1 view .LVU179
 255:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 647              		.loc 1 255 37 is_stmt 0 view .LVU180
 648 0042 0023     		movs	r3, #0
 649 0044 0093     		str	r3, [sp]
 256:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 650              		.loc 1 256 3 is_stmt 1 view .LVU181
 256:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 651              		.loc 1 256 33 is_stmt 0 view .LVU182
 652 0046 0193     		str	r3, [sp, #4]
 257:Core/Src/main.c ****   {
 653              		.loc 1 257 3 is_stmt 1 view .LVU183
 257:Core/Src/main.c ****   {
 654              		.loc 1 257 7 is_stmt 0 view .LVU184
 655 0048 6946     		mov	r1, sp
 656 004a 0648     		ldr	r0, .L38
 657 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 658              	.LVL29:
 257:Core/Src/main.c ****   {
 659              		.loc 1 257 6 view .LVU185
 660 0050 30B9     		cbnz	r0, .L37
 265:Core/Src/main.c **** 
 661              		.loc 1 265 1 view .LVU186
 662 0052 07B0     		add	sp, sp, #28
 663              		.cfi_remember_state
 664              		.cfi_def_cfa_offset 4
 665              		@ sp needed
 666 0054 5DF804FB 		ldr	pc, [sp], #4
 667              	.L35:
 668              		.cfi_restore_state
 248:Core/Src/main.c ****   }
 669              		.loc 1 248 5 is_stmt 1 view .LVU187
 670 0058 FFF7FEFF 		bl	Error_Handler
 671              	.LVL30:
 672              	.L36:
 253:Core/Src/main.c ****   }
 673              		.loc 1 253 5 view .LVU188
 674 005c FFF7FEFF 		bl	Error_Handler
 675              	.LVL31:
ARM GAS  C:\Temp\cc5nzfdt.s 			page 38


 676              	.L37:
 259:Core/Src/main.c ****   }
 677              		.loc 1 259 5 view .LVU189
 678 0060 FFF7FEFF 		bl	Error_Handler
 679              	.LVL32:
 680              	.L39:
 681              		.align	2
 682              	.L38:
 683 0064 00000000 		.word	htim2
 684              		.cfi_endproc
 685              	.LFE138:
 687              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 688              		.align	1
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 693              	MX_USART2_UART_Init:
 694              	.LFB139:
 273:Core/Src/main.c **** 
 695              		.loc 1 273 1 view -0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699 0000 08B5     		push	{r3, lr}
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 3, -8
 702              		.cfi_offset 14, -4
 282:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 703              		.loc 1 282 3 view .LVU191
 282:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 704              		.loc 1 282 19 is_stmt 0 view .LVU192
 705 0002 0D48     		ldr	r0, .L44
 706 0004 0D4B     		ldr	r3, .L44+4
 707 0006 0360     		str	r3, [r0]
 283:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 708              		.loc 1 283 3 is_stmt 1 view .LVU193
 283:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 709              		.loc 1 283 24 is_stmt 0 view .LVU194
 710 0008 4FF4E113 		mov	r3, #1843200
 711 000c 4360     		str	r3, [r0, #4]
 284:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 712              		.loc 1 284 3 is_stmt 1 view .LVU195
 284:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 713              		.loc 1 284 26 is_stmt 0 view .LVU196
 714 000e 4FF48053 		mov	r3, #4096
 715 0012 8360     		str	r3, [r0, #8]
 285:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 716              		.loc 1 285 3 is_stmt 1 view .LVU197
 285:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 717              		.loc 1 285 24 is_stmt 0 view .LVU198
 718 0014 4FF40053 		mov	r3, #8192
 719 0018 C360     		str	r3, [r0, #12]
 286:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 720              		.loc 1 286 3 is_stmt 1 view .LVU199
 286:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 721              		.loc 1 286 22 is_stmt 0 view .LVU200
 722 001a 4FF48063 		mov	r3, #1024
ARM GAS  C:\Temp\cc5nzfdt.s 			page 39


 723 001e 0361     		str	r3, [r0, #16]
 287:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 724              		.loc 1 287 3 is_stmt 1 view .LVU201
 287:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 725              		.loc 1 287 20 is_stmt 0 view .LVU202
 726 0020 0C23     		movs	r3, #12
 727 0022 4361     		str	r3, [r0, #20]
 288:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 728              		.loc 1 288 3 is_stmt 1 view .LVU203
 288:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 729              		.loc 1 288 25 is_stmt 0 view .LVU204
 730 0024 0023     		movs	r3, #0
 731 0026 8361     		str	r3, [r0, #24]
 289:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 732              		.loc 1 289 3 is_stmt 1 view .LVU205
 289:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 733              		.loc 1 289 28 is_stmt 0 view .LVU206
 734 0028 C361     		str	r3, [r0, #28]
 290:Core/Src/main.c ****   {
 735              		.loc 1 290 3 is_stmt 1 view .LVU207
 290:Core/Src/main.c ****   {
 736              		.loc 1 290 7 is_stmt 0 view .LVU208
 737 002a FFF7FEFF 		bl	HAL_UART_Init
 738              	.LVL33:
 290:Core/Src/main.c ****   {
 739              		.loc 1 290 6 view .LVU209
 740 002e 00B9     		cbnz	r0, .L43
 298:Core/Src/main.c **** 
 741              		.loc 1 298 1 view .LVU210
 742 0030 08BD     		pop	{r3, pc}
 743              	.L43:
 292:Core/Src/main.c ****   }
 744              		.loc 1 292 5 is_stmt 1 view .LVU211
 745 0032 FFF7FEFF 		bl	Error_Handler
 746              	.LVL34:
 747              	.L45:
 748 0036 00BF     		.align	2
 749              	.L44:
 750 0038 00000000 		.word	huart2
 751 003c 00440040 		.word	1073759232
 752              		.cfi_endproc
 753              	.LFE139:
 755              		.section	.text.SystemClock_Config,"ax",%progbits
 756              		.align	1
 757              		.global	SystemClock_Config
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 762              	SystemClock_Config:
 763              	.LFB137:
 181:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 764              		.loc 1 181 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 80
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768 0000 00B5     		push	{lr}
 769              		.cfi_def_cfa_offset 4
ARM GAS  C:\Temp\cc5nzfdt.s 			page 40


 770              		.cfi_offset 14, -4
 771 0002 95B0     		sub	sp, sp, #84
 772              		.cfi_def_cfa_offset 88
 182:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 773              		.loc 1 182 3 view .LVU213
 182:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 774              		.loc 1 182 22 is_stmt 0 view .LVU214
 775 0004 3022     		movs	r2, #48
 776 0006 0021     		movs	r1, #0
 777 0008 08A8     		add	r0, sp, #32
 778 000a FFF7FEFF 		bl	memset
 779              	.LVL35:
 183:Core/Src/main.c **** 
 780              		.loc 1 183 3 is_stmt 1 view .LVU215
 183:Core/Src/main.c **** 
 781              		.loc 1 183 22 is_stmt 0 view .LVU216
 782 000e 0023     		movs	r3, #0
 783 0010 0393     		str	r3, [sp, #12]
 784 0012 0493     		str	r3, [sp, #16]
 785 0014 0593     		str	r3, [sp, #20]
 786 0016 0693     		str	r3, [sp, #24]
 787 0018 0793     		str	r3, [sp, #28]
 187:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 788              		.loc 1 187 3 is_stmt 1 view .LVU217
 789              	.LBB12:
 187:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 790              		.loc 1 187 3 view .LVU218
 791 001a 0193     		str	r3, [sp, #4]
 187:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 792              		.loc 1 187 3 view .LVU219
 793 001c 1E4A     		ldr	r2, .L52
 794 001e 116C     		ldr	r1, [r2, #64]
 795 0020 41F08051 		orr	r1, r1, #268435456
 796 0024 1164     		str	r1, [r2, #64]
 187:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 797              		.loc 1 187 3 view .LVU220
 798 0026 126C     		ldr	r2, [r2, #64]
 799 0028 02F08052 		and	r2, r2, #268435456
 800 002c 0192     		str	r2, [sp, #4]
 187:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801              		.loc 1 187 3 view .LVU221
 802 002e 019A     		ldr	r2, [sp, #4]
 803              	.LBE12:
 187:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804              		.loc 1 187 3 view .LVU222
 188:Core/Src/main.c **** 
 805              		.loc 1 188 3 view .LVU223
 806              	.LBB13:
 188:Core/Src/main.c **** 
 807              		.loc 1 188 3 view .LVU224
 808 0030 0293     		str	r3, [sp, #8]
 188:Core/Src/main.c **** 
 809              		.loc 1 188 3 view .LVU225
 810 0032 1A4A     		ldr	r2, .L52+4
 811 0034 1168     		ldr	r1, [r2]
 812 0036 41F44041 		orr	r1, r1, #49152
 813 003a 1160     		str	r1, [r2]
ARM GAS  C:\Temp\cc5nzfdt.s 			page 41


 188:Core/Src/main.c **** 
 814              		.loc 1 188 3 view .LVU226
 815 003c 1268     		ldr	r2, [r2]
 816 003e 02F44042 		and	r2, r2, #49152
 817 0042 0292     		str	r2, [sp, #8]
 188:Core/Src/main.c **** 
 818              		.loc 1 188 3 view .LVU227
 819 0044 029A     		ldr	r2, [sp, #8]
 820              	.LBE13:
 188:Core/Src/main.c **** 
 821              		.loc 1 188 3 view .LVU228
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 822              		.loc 1 193 3 view .LVU229
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 823              		.loc 1 193 36 is_stmt 0 view .LVU230
 824 0046 0222     		movs	r2, #2
 825 0048 0892     		str	r2, [sp, #32]
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 826              		.loc 1 194 3 is_stmt 1 view .LVU231
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 827              		.loc 1 194 30 is_stmt 0 view .LVU232
 828 004a 0121     		movs	r1, #1
 829 004c 0B91     		str	r1, [sp, #44]
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 830              		.loc 1 195 3 is_stmt 1 view .LVU233
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 831              		.loc 1 195 41 is_stmt 0 view .LVU234
 832 004e 1021     		movs	r1, #16
 833 0050 0C91     		str	r1, [sp, #48]
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 834              		.loc 1 196 3 is_stmt 1 view .LVU235
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 835              		.loc 1 196 34 is_stmt 0 view .LVU236
 836 0052 0E92     		str	r2, [sp, #56]
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 837              		.loc 1 197 3 is_stmt 1 view .LVU237
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 838              		.loc 1 197 35 is_stmt 0 view .LVU238
 839 0054 0F93     		str	r3, [sp, #60]
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 840              		.loc 1 198 3 is_stmt 1 view .LVU239
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 841              		.loc 1 198 30 is_stmt 0 view .LVU240
 842 0056 0823     		movs	r3, #8
 843 0058 1093     		str	r3, [sp, #64]
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 844              		.loc 1 199 3 is_stmt 1 view .LVU241
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 845              		.loc 1 199 30 is_stmt 0 view .LVU242
 846 005a 6423     		movs	r3, #100
 847 005c 1193     		str	r3, [sp, #68]
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 848              		.loc 1 200 3 is_stmt 1 view .LVU243
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 849              		.loc 1 200 30 is_stmt 0 view .LVU244
 850 005e 1292     		str	r2, [sp, #72]
 201:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  C:\Temp\cc5nzfdt.s 			page 42


 851              		.loc 1 201 3 is_stmt 1 view .LVU245
 201:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 852              		.loc 1 201 30 is_stmt 0 view .LVU246
 853 0060 0423     		movs	r3, #4
 854 0062 1393     		str	r3, [sp, #76]
 202:Core/Src/main.c ****   {
 855              		.loc 1 202 3 is_stmt 1 view .LVU247
 202:Core/Src/main.c ****   {
 856              		.loc 1 202 7 is_stmt 0 view .LVU248
 857 0064 08A8     		add	r0, sp, #32
 858 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 859              	.LVL36:
 202:Core/Src/main.c ****   {
 860              		.loc 1 202 6 view .LVU249
 861 006a 88B9     		cbnz	r0, .L50
 209:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 862              		.loc 1 209 3 is_stmt 1 view .LVU250
 209:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 863              		.loc 1 209 31 is_stmt 0 view .LVU251
 864 006c 0F23     		movs	r3, #15
 865 006e 0393     		str	r3, [sp, #12]
 211:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 866              		.loc 1 211 3 is_stmt 1 view .LVU252
 211:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 867              		.loc 1 211 34 is_stmt 0 view .LVU253
 868 0070 0223     		movs	r3, #2
 869 0072 0493     		str	r3, [sp, #16]
 212:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 870              		.loc 1 212 3 is_stmt 1 view .LVU254
 212:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 871              		.loc 1 212 35 is_stmt 0 view .LVU255
 872 0074 0023     		movs	r3, #0
 873 0076 0593     		str	r3, [sp, #20]
 213:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 874              		.loc 1 213 3 is_stmt 1 view .LVU256
 213:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 875              		.loc 1 213 36 is_stmt 0 view .LVU257
 876 0078 4FF48052 		mov	r2, #4096
 877 007c 0692     		str	r2, [sp, #24]
 214:Core/Src/main.c **** 
 878              		.loc 1 214 3 is_stmt 1 view .LVU258
 214:Core/Src/main.c **** 
 879              		.loc 1 214 36 is_stmt 0 view .LVU259
 880 007e 0793     		str	r3, [sp, #28]
 216:Core/Src/main.c ****   {
 881              		.loc 1 216 3 is_stmt 1 view .LVU260
 216:Core/Src/main.c ****   {
 882              		.loc 1 216 7 is_stmt 0 view .LVU261
 883 0080 0321     		movs	r1, #3
 884 0082 03A8     		add	r0, sp, #12
 885 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 886              	.LVL37:
 216:Core/Src/main.c ****   {
 887              		.loc 1 216 6 view .LVU262
 888 0088 20B9     		cbnz	r0, .L51
 220:Core/Src/main.c **** 
 889              		.loc 1 220 1 view .LVU263
ARM GAS  C:\Temp\cc5nzfdt.s 			page 43


 890 008a 15B0     		add	sp, sp, #84
 891              		.cfi_remember_state
 892              		.cfi_def_cfa_offset 4
 893              		@ sp needed
 894 008c 5DF804FB 		ldr	pc, [sp], #4
 895              	.L50:
 896              		.cfi_restore_state
 204:Core/Src/main.c ****   }
 897              		.loc 1 204 5 is_stmt 1 view .LVU264
 898 0090 FFF7FEFF 		bl	Error_Handler
 899              	.LVL38:
 900              	.L51:
 218:Core/Src/main.c ****   }
 901              		.loc 1 218 5 view .LVU265
 902 0094 FFF7FEFF 		bl	Error_Handler
 903              	.LVL39:
 904              	.L53:
 905              		.align	2
 906              	.L52:
 907 0098 00380240 		.word	1073887232
 908 009c 00700040 		.word	1073770496
 909              		.cfi_endproc
 910              	.LFE137:
 912              		.section	.text.main,"ax",%progbits
 913              		.align	1
 914              		.global	main
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 919              	main:
 920              	.LFB136:
 127:Core/Src/main.c **** 
 921              		.loc 1 127 1 view -0
 922              		.cfi_startproc
 923              		@ Volatile: function does not return.
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926 0000 08B5     		push	{r3, lr}
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 3, -8
 929              		.cfi_offset 14, -4
 136:Core/Src/main.c **** 
 930              		.loc 1 136 3 view .LVU267
 931 0002 FFF7FEFF 		bl	HAL_Init
 932              	.LVL40:
 143:Core/Src/main.c **** 
 933              		.loc 1 143 3 view .LVU268
 934 0006 FFF7FEFF 		bl	SystemClock_Config
 935              	.LVL41:
 146:Core/Src/main.c ****   /* USER CODE END SysInit */
 936              		.loc 1 146 3 view .LVU269
 937 000a 0022     		movs	r2, #0
 938 000c 2021     		movs	r1, #32
 939 000e 0B48     		ldr	r0, .L59
 940 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 941              	.LVL42:
 150:Core/Src/main.c ****   MX_DMA_Init();
ARM GAS  C:\Temp\cc5nzfdt.s 			page 44


 942              		.loc 1 150 3 view .LVU270
 943 0014 FFF7FEFF 		bl	MX_GPIO_Init
 944              	.LVL43:
 151:Core/Src/main.c ****   MX_TIM2_Init();
 945              		.loc 1 151 3 view .LVU271
 946 0018 FFF7FEFF 		bl	MX_DMA_Init
 947              	.LVL44:
 152:Core/Src/main.c ****   MX_USART2_UART_Init();
 948              		.loc 1 152 3 view .LVU272
 949 001c FFF7FEFF 		bl	MX_TIM2_Init
 950              	.LVL45:
 153:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 951              		.loc 1 153 3 view .LVU273
 952 0020 FFF7FEFF 		bl	MX_USART2_UART_Init
 953              	.LVL46:
 155:Core/Src/main.c ****   while (calibrated != 1){
 954              		.loc 1 155 3 view .LVU274
 955 0024 FFF7FEFF 		bl	initIKS02A1
 956              	.LVL47:
 156:Core/Src/main.c ****     initialCalibration();
 957              		.loc 1 156 3 view .LVU275
 156:Core/Src/main.c ****     initialCalibration();
 958              		.loc 1 156 9 is_stmt 0 view .LVU276
 959 0028 01E0     		b	.L55
 960              	.L56:
 157:Core/Src/main.c ****   }
 961              		.loc 1 157 5 is_stmt 1 view .LVU277
 962 002a FFF7FEFF 		bl	initialCalibration
 963              	.LVL48:
 964              	.L55:
 156:Core/Src/main.c ****     initialCalibration();
 965              		.loc 1 156 21 view .LVU278
 966 002e 044B     		ldr	r3, .L59+4
 967 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968 0032 012B     		cmp	r3, #1
 969 0034 F9D1     		bne	.L56
 970              	.L57:
 165:Core/Src/main.c ****   {
 971              		.loc 1 165 3 discriminator 1 view .LVU279
 167:Core/Src/main.c ****     
 972              		.loc 1 167 5 discriminator 1 view .LVU280
 973 0036 FFF7FEFF 		bl	getIKS02A1
 974              	.LVL49:
 165:Core/Src/main.c ****   {
 975              		.loc 1 165 9 discriminator 1 view .LVU281
 976 003a FCE7     		b	.L57
 977              	.L60:
 978              		.align	2
 979              	.L59:
 980 003c 00000240 		.word	1073872896
 981 0040 00000000 		.word	calibrated
 982              		.cfi_endproc
 983              	.LFE136:
 985              		.global	counter
 986              		.section	.bss.counter,"aw",%nobits
 987              		.align	2
 990              	counter:
ARM GAS  C:\Temp\cc5nzfdt.s 			page 45


 991 0000 00000000 		.space	4
 992              		.global	calibrated
 993              		.section	.bss.calibrated,"aw",%nobits
 996              	calibrated:
 997 0000 00       		.space	1
 998              		.global	clearToSend
 999              		.section	.bss.clearToSend,"aw",%nobits
 1002              	clearToSend:
 1003 0000 00       		.space	1
 1004              		.global	bigBuffer
 1005              		.section	.bss.bigBuffer,"aw",%nobits
 1006              		.align	2
 1009              	bigBuffer:
 1010 0000 00000000 		.space	34
 1010      00000000 
 1010      00000000 
 1010      00000000 
 1010      00000000 
 1011              		.global	numberOfSimulinkBytes
 1012              		.section	.rodata.numberOfSimulinkBytes,"a"
 1013              		.align	2
 1016              	numberOfSimulinkBytes:
 1017 0000 1C000000 		.word	28
 1018              		.global	expectedTerminator
 1019              		.section	.rodata.expectedTerminator,"a"
 1020              		.align	2
 1023              	expectedTerminator:
 1024 0000 415F4A   		.ascii	"A_J"
 1025              		.global	expectedHeader
 1026              		.section	.rodata.expectedHeader,"a"
 1027              		.align	2
 1030              	expectedHeader:
 1031 0000 4A5F41   		.ascii	"J_A"
 1032              		.global	mag_axis
 1033              		.section	.bss.mag_axis,"aw",%nobits
 1034              		.align	2
 1037              	mag_axis:
 1038 0000 00000000 		.space	12
 1038      00000000 
 1038      00000000 
 1039              		.global	accel2_axis
 1040              		.section	.bss.accel2_axis,"aw",%nobits
 1041              		.align	2
 1044              	accel2_axis:
 1045 0000 00000000 		.space	12
 1045      00000000 
 1045      00000000 
 1046              		.global	gyro_axis
 1047              		.section	.bss.gyro_axis,"aw",%nobits
 1048              		.align	2
 1051              	gyro_axis:
 1052 0000 00000000 		.space	12
 1052      00000000 
 1052      00000000 
 1053              		.global	accel1_axis
 1054              		.section	.bss.accel1_axis,"aw",%nobits
 1055              		.align	2
ARM GAS  C:\Temp\cc5nzfdt.s 			page 46


 1058              	accel1_axis:
 1059 0000 00000000 		.space	12
 1059      00000000 
 1059      00000000 
 1060              		.global	hdma_usart2_rx
 1061              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 1062              		.align	2
 1065              	hdma_usart2_rx:
 1066 0000 00000000 		.space	96
 1066      00000000 
 1066      00000000 
 1066      00000000 
 1066      00000000 
 1067              		.global	huart2
 1068              		.section	.bss.huart2,"aw",%nobits
 1069              		.align	2
 1072              	huart2:
 1073 0000 00000000 		.space	72
 1073      00000000 
 1073      00000000 
 1073      00000000 
 1073      00000000 
 1074              		.global	htim2
 1075              		.section	.bss.htim2,"aw",%nobits
 1076              		.align	2
 1079              	htim2:
 1080 0000 00000000 		.space	72
 1080      00000000 
 1080      00000000 
 1080      00000000 
 1080      00000000 
 1081              		.text
 1082              	.Letext0:
 1083              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1084              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1085              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1086              		.file 6 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1087              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1088              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1089              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1090              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1091              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1092              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1093              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1094              		.file 14 "Drivers/BSP/IKS02A1/iks02a1_motion_sensors.h"
 1095              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1096              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1097              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1098              		.file 18 "Core/Inc/IKS02A1_Simulink.h"
 1099              		.file 19 "<built-in>"
ARM GAS  C:\Temp\cc5nzfdt.s 			page 47


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\cc5nzfdt.s:21     .text.configureTimer:00000000 $t
  C:\Temp\cc5nzfdt.s:27     .text.configureTimer:00000000 configureTimer
  C:\Temp\cc5nzfdt.s:94     .text.configureTimer:00000050 $d
  C:\Temp\cc5nzfdt.s:100    .text.initialCalibration:00000000 $t
  C:\Temp\cc5nzfdt.s:106    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\cc5nzfdt.s:188    .text.initialCalibration:00000064 $d
  C:\Temp\cc5nzfdt.s:1009   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\cc5nzfdt.s:1072   .bss.huart2:00000000 huart2
  C:\Temp\cc5nzfdt.s:996    .bss.calibrated:00000000 calibrated
  C:\Temp\cc5nzfdt.s:1079   .bss.htim2:00000000 htim2
  C:\Temp\cc5nzfdt.s:198    .text.MX_DMA_Init:00000000 $t
  C:\Temp\cc5nzfdt.s:204    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\cc5nzfdt.s:250    .text.MX_DMA_Init:00000030 $d
  C:\Temp\cc5nzfdt.s:255    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\cc5nzfdt.s:261    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\cc5nzfdt.s:487    .text.MX_GPIO_Init:0000010c $d
  C:\Temp\cc5nzfdt.s:496    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\cc5nzfdt.s:502    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\cc5nzfdt.s:535    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\cc5nzfdt.s:540    .text.Error_Handler:00000000 $t
  C:\Temp\cc5nzfdt.s:546    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\cc5nzfdt.s:578    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\cc5nzfdt.s:583    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\cc5nzfdt.s:683    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\cc5nzfdt.s:688    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\cc5nzfdt.s:693    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\cc5nzfdt.s:750    .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\cc5nzfdt.s:756    .text.SystemClock_Config:00000000 $t
  C:\Temp\cc5nzfdt.s:762    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\cc5nzfdt.s:907    .text.SystemClock_Config:00000098 $d
  C:\Temp\cc5nzfdt.s:913    .text.main:00000000 $t
  C:\Temp\cc5nzfdt.s:919    .text.main:00000000 main
  C:\Temp\cc5nzfdt.s:980    .text.main:0000003c $d
  C:\Temp\cc5nzfdt.s:990    .bss.counter:00000000 counter
  C:\Temp\cc5nzfdt.s:987    .bss.counter:00000000 $d
  C:\Temp\cc5nzfdt.s:997    .bss.calibrated:00000000 $d
  C:\Temp\cc5nzfdt.s:1002   .bss.clearToSend:00000000 clearToSend
  C:\Temp\cc5nzfdt.s:1003   .bss.clearToSend:00000000 $d
  C:\Temp\cc5nzfdt.s:1006   .bss.bigBuffer:00000000 $d
  C:\Temp\cc5nzfdt.s:1016   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\cc5nzfdt.s:1013   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\cc5nzfdt.s:1023   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\cc5nzfdt.s:1020   .rodata.expectedTerminator:00000000 $d
  C:\Temp\cc5nzfdt.s:1030   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\cc5nzfdt.s:1027   .rodata.expectedHeader:00000000 $d
  C:\Temp\cc5nzfdt.s:1037   .bss.mag_axis:00000000 mag_axis
  C:\Temp\cc5nzfdt.s:1034   .bss.mag_axis:00000000 $d
  C:\Temp\cc5nzfdt.s:1044   .bss.accel2_axis:00000000 accel2_axis
  C:\Temp\cc5nzfdt.s:1041   .bss.accel2_axis:00000000 $d
  C:\Temp\cc5nzfdt.s:1051   .bss.gyro_axis:00000000 gyro_axis
  C:\Temp\cc5nzfdt.s:1048   .bss.gyro_axis:00000000 $d
  C:\Temp\cc5nzfdt.s:1058   .bss.accel1_axis:00000000 accel1_axis
  C:\Temp\cc5nzfdt.s:1055   .bss.accel1_axis:00000000 $d
  C:\Temp\cc5nzfdt.s:1065   .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
  C:\Temp\cc5nzfdt.s:1062   .bss.hdma_usart2_rx:00000000 $d
ARM GAS  C:\Temp\cc5nzfdt.s 			page 48


  C:\Temp\cc5nzfdt.s:1069   .bss.huart2:00000000 $d
  C:\Temp\cc5nzfdt.s:1076   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
HAL_UART_Receive
HAL_TIM_Base_Start_IT
receivedFromSimulink
HAL_GPIO_WritePin
fastestODR
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_Init
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
initIKS02A1
getIKS02A1
