ARM GAS  C:\Temp\ccEkXWoY.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.global	__aeabi_f2ulz
  21              		.section	.text.configureTimer,"ax",%progbits
  22              		.align	1
  23              		.global	configureTimer
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  28              	configureTimer:
  29              	.LVL0:
  30              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "VL53L1A1_Simulink.h"
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  C:\Temp\ccEkXWoY.s 			page 2


  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** extern uint8_t L1_BUFFER_SIZE;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** const uint8_t* header = 'A_J';
  56:Core/Src/main.c **** const uint8_t* terminator = 'J_A';
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  59:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2);
  62:Core/Src/main.c **** uint8_t bigBuffer[8+3+3] = {0};
  63:Core/Src/main.c **** uint8_t clearToSend = 0;
  64:Core/Src/main.c **** uint8_t calibrated = 0;
  65:Core/Src/main.c **** int32_t counter = 0;
  66:Core/Src/main.c **** uint8_t clearToGetL1 = 0;
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** int32_t tof_fsr = 1;
  69:Core/Src/main.c **** int32_t tof_odr   = 30;
  70:Core/Src/main.c **** uint16_t rangingProfile = 1;
  71:Core/Src/main.c **** uint16_t timingBudget   = 30;
  72:Core/Src/main.c **** uint32_t pollingPeriod  = 250;
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** VL53L1_Result TOF_left_result;
  75:Core/Src/main.c **** VL53L1_Result TOF_centre_result;
  76:Core/Src/main.c **** VL53L1_Result TOF_right_result;
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** volatile int IntCount;
  79:Core/Src/main.c **** #define isInterrupt 0 /* If isInterrupt = 1 then device working in interrupt mode, else device work
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* USER CODE END PV */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  84:Core/Src/main.c **** void SystemClock_Config(void);
  85:Core/Src/main.c **** static void MX_TIM2_Init(void);
ARM GAS  C:\Temp\ccEkXWoY.s 			page 3


  86:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  87:Core/Src/main.c **** static void MX_TIM5_Init(void);
  88:Core/Src/main.c **** static void MX_I2C1_Init(void);
  89:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE END PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  94:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** void configureTimer(float desired_frequency, TIM_TypeDef* tim) {
  31              		.loc 1 96 64 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 96 64 is_stmt 0 view .LVU1
  36 0000 38B5     		push	{r3, r4, r5, lr}
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  42 0002 0546     		mov	r5, r0
  97:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
  98:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
  43              		.loc 1 98 5 is_stmt 1 view .LVU2
  44              		.loc 1 98 11 is_stmt 0 view .LVU3
  45 0004 114B     		ldr	r3, .L5
  46 0006 D3ED007A 		vldr.32	s15, [r3]	@ int
  47 000a F8EE677A 		vcvt.f32.u32	s15, s15
  48              	.LVL1:
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
 101:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
  49              		.loc 1 101 5 is_stmt 1 view .LVU4
  50              		.loc 1 101 11 is_stmt 0 view .LVU5
  51 000e 87EE807A 		vdiv.f32	s14, s15, s0
  52              	.LVL2:
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
 104:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
  53              		.loc 1 104 5 is_stmt 1 view .LVU6
  54              		.loc 1 104 50 is_stmt 0 view .LVU7
  55 0012 DFED0F7A 		vldr.32	s15, .L5+4
  56              	.LVL3:
  57              		.loc 1 104 50 view .LVU8
  58 0016 67EE277A 		vmul.f32	s15, s14, s15
  59              		.loc 1 104 14 view .LVU9
  60 001a FCEEE77A 		vcvt.u32.f32	s15, s15
  61 001e 17EE904A 		vmov	r4, s15	@ int
  62              	.LVL4:
 105:Core/Src/main.c ****     if (prescaler > 65535) {
  63              		.loc 1 105 5 is_stmt 1 view .LVU10
  64              		.loc 1 105 8 is_stmt 0 view .LVU11
  65 0022 B4F5803F 		cmp	r4, #65536
  66 0026 01D3     		bcc	.L2
 106:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
ARM GAS  C:\Temp\ccEkXWoY.s 			page 4


  67              		.loc 1 106 19 view .LVU12
  68 0028 4FF6FF74 		movw	r4, #65535
  69              	.LVL5:
  70              	.L2:
 107:Core/Src/main.c ****     }
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
 110:Core/Src/main.c ****     uint64_t arr = (uint64_t)(timer_period / (prescaler + 1));
  71              		.loc 1 110 5 is_stmt 1 view .LVU13
  72              		.loc 1 110 57 is_stmt 0 view .LVU14
  73 002c 631C     		adds	r3, r4, #1
  74              	.LVL6:
  75              		.loc 1 110 57 view .LVU15
  76 002e 07EE903A 		vmov	s15, r3	@ int
  77              		.loc 1 110 44 view .LVU16
  78 0032 F8EE677A 		vcvt.f32.u32	s15, s15
  79              		.loc 1 110 14 view .LVU17
  80 0036 C7EE277A 		vdiv.f32	s15, s14, s15
  81 003a 17EE900A 		vmov	r0, s15
  82              	.LVL7:
  83              		.loc 1 110 14 view .LVU18
  84 003e FFF7FEFF 		bl	__aeabi_f2ulz
  85              	.LVL8:
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****     // Update the timer registers
 115:Core/Src/main.c ****     tim->PSC = prescaler;   // Set the prescaler
  86              		.loc 1 115 5 is_stmt 1 view .LVU19
  87              		.loc 1 115 14 is_stmt 0 view .LVU20
  88 0042 AC62     		str	r4, [r5, #40]
 116:Core/Src/main.c ****     tim->ARR = arr;         // Set the auto-reload register
  89              		.loc 1 116 5 is_stmt 1 view .LVU21
  90              		.loc 1 116 14 is_stmt 0 view .LVU22
  91 0044 E862     		str	r0, [r5, #44]
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 119:Core/Src/main.c ****     tim->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
  92              		.loc 1 119 5 is_stmt 1 view .LVU23
  93              		.loc 1 119 14 is_stmt 0 view .LVU24
  94 0046 0123     		movs	r3, #1
  95 0048 6B61     		str	r3, [r5, #20]
 120:Core/Src/main.c **** }
  96              		.loc 1 120 1 view .LVU25
  97 004a 38BD     		pop	{r3, r4, r5, pc}
  98              	.LVL9:
  99              	.L6:
 100              		.loc 1 120 1 view .LVU26
 101              		.align	2
 102              	.L5:
 103 004c 00000000 		.word	SystemCoreClock
 104 0050 00008037 		.word	931135488
 105              		.cfi_endproc
 106              	.LFE137:
 108              		.section	.text.receivedFromSimulink,"ax",%progbits
 109              		.align	1
 110              		.global	receivedFromSimulink
ARM GAS  C:\Temp\ccEkXWoY.s 			page 5


 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 115              	receivedFromSimulink:
 116              	.LVL10:
 117              	.LFB139:
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** void initialCalibration(){
 123:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 124:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 125:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 126:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 127:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 128:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 129:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 130:Core/Src/main.c ****         calibrated = 1;
 131:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 132:Core/Src/main.c ****   }
 133:Core/Src/main.c **** }
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** void receivedFromSimulink(uint8_t* bigBuffer){
 118              		.loc 1 135 46 is_stmt 1 view -0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		.loc 1 135 46 is_stmt 0 view .LVU28
 123 0000 38B5     		push	{r3, r4, r5, lr}
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 3, -16
 126              		.cfi_offset 4, -12
 127              		.cfi_offset 5, -8
 128              		.cfi_offset 14, -4
 129 0002 0446     		mov	r4, r0
 136:Core/Src/main.c ****     tof_fsr = bytesToInt32(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuffer[3
 130              		.loc 1 136 5 is_stmt 1 view .LVU29
 131              		.loc 1 136 15 is_stmt 0 view .LVU30
 132 0004 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 133 0006 4279     		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 134 0008 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 135 000a C078     		ldrb	r0, [r0, #3]	@ zero_extendqisi2
 136              	.LVL11:
 137              		.loc 1 136 15 view .LVU31
 138 000c FFF7FEFF 		bl	bytesToInt32
 139              	.LVL12:
 140              		.loc 1 136 13 view .LVU32
 141 0010 104D     		ldr	r5, .L13
 142 0012 2860     		str	r0, [r5]
 137:Core/Src/main.c ****     tof_odr = bytesToInt32(bigBuffer[3  + 4] , bigBuffer[3  + 5] , bigBuffer[3  + 6] ,  bigBuffer[3
 143              		.loc 1 137 5 is_stmt 1 view .LVU33
 144              		.loc 1 137 15 is_stmt 0 view .LVU34
 145 0014 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 146 0016 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 147 0018 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 148 001a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 149 001c FFF7FEFF 		bl	bytesToInt32
 150              	.LVL13:
 151              		.loc 1 137 13 view .LVU35
ARM GAS  C:\Temp\ccEkXWoY.s 			page 6


 152 0020 0D4B     		ldr	r3, .L13+4
 153 0022 1860     		str	r0, [r3]
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****     if (tof_fsr == 1){
 154              		.loc 1 139 5 is_stmt 1 view .LVU36
 155              		.loc 1 139 17 is_stmt 0 view .LVU37
 156 0024 2B68     		ldr	r3, [r5]
 157              		.loc 1 139 8 view .LVU38
 158 0026 012B     		cmp	r3, #1
 159 0028 0CD0     		beq	.L11
 160              	.L8:
 140:Core/Src/main.c ****       rangingProfile = 1;
 141:Core/Src/main.c ****     }
 142:Core/Src/main.c ****     if (tof_fsr == 2){
 161              		.loc 1 142 5 is_stmt 1 view .LVU39
 162              		.loc 1 142 8 is_stmt 0 view .LVU40
 163 002a 022B     		cmp	r3, #2
 164 002c 0ED0     		beq	.L12
 165              	.L9:
 143:Core/Src/main.c ****       rangingProfile = 2;
 144:Core/Src/main.c ****     }  
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****     timingBudget = 1000/tof_odr;
 166              		.loc 1 146 5 is_stmt 1 view .LVU41
 167              		.loc 1 146 24 is_stmt 0 view .LVU42
 168 002e 4FF47A73 		mov	r3, #1000
 169 0032 93FBF0F0 		sdiv	r0, r3, r0
 170              		.loc 1 146 18 view .LVU43
 171 0036 094B     		ldr	r3, .L13+8
 172 0038 1880     		strh	r0, [r3]	@ movhi
 147:Core/Src/main.c ****     pollingPeriod = timingBudget + 10;
 173              		.loc 1 147 5 is_stmt 1 view .LVU44
 174              		.loc 1 147 34 is_stmt 0 view .LVU45
 175 003a 80B2     		uxth	r0, r0
 176 003c 0A30     		adds	r0, r0, #10
 177              		.loc 1 147 19 view .LVU46
 178 003e 084B     		ldr	r3, .L13+12
 179 0040 1860     		str	r0, [r3]
 148:Core/Src/main.c **** }
 180              		.loc 1 148 1 view .LVU47
 181 0042 38BD     		pop	{r3, r4, r5, pc}
 182              	.LVL14:
 183              	.L11:
 140:Core/Src/main.c ****     }
 184              		.loc 1 140 7 is_stmt 1 view .LVU48
 140:Core/Src/main.c ****     }
 185              		.loc 1 140 22 is_stmt 0 view .LVU49
 186 0044 074A     		ldr	r2, .L13+16
 187 0046 0121     		movs	r1, #1
 188 0048 1180     		strh	r1, [r2]	@ movhi
 189 004a EEE7     		b	.L8
 190              	.L12:
 143:Core/Src/main.c ****     }  
 191              		.loc 1 143 7 is_stmt 1 view .LVU50
 143:Core/Src/main.c ****     }  
 192              		.loc 1 143 22 is_stmt 0 view .LVU51
 193 004c 054B     		ldr	r3, .L13+16
ARM GAS  C:\Temp\ccEkXWoY.s 			page 7


 194 004e 0222     		movs	r2, #2
 195 0050 1A80     		strh	r2, [r3]	@ movhi
 196 0052 ECE7     		b	.L9
 197              	.L14:
 198              		.align	2
 199              	.L13:
 200 0054 00000000 		.word	tof_fsr
 201 0058 00000000 		.word	tof_odr
 202 005c 00000000 		.word	timingBudget
 203 0060 00000000 		.word	pollingPeriod
 204 0064 00000000 		.word	rangingProfile
 205              		.cfi_endproc
 206              	.LFE139:
 208              		.section	.text.initialCalibration,"ax",%progbits
 209              		.align	1
 210              		.global	initialCalibration
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 215              	initialCalibration:
 216              	.LFB138:
 122:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 217              		.loc 1 122 26 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 10B5     		push	{r4, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 4, -8
 224              		.cfi_offset 14, -4
 123:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 225              		.loc 1 123 3 view .LVU53
 226 0002 104C     		ldr	r4, .L19
 227 0004 0123     		movs	r3, #1
 228 0006 0E22     		movs	r2, #14
 229 0008 2146     		mov	r1, r4
 230 000a 0F48     		ldr	r0, .L19+4
 231 000c FFF7FEFF 		bl	HAL_UART_Receive
 232              	.LVL15:
 124:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 233              		.loc 1 124 3 view .LVU54
 124:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 234              		.loc 1 124 16 is_stmt 0 view .LVU55
 235 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 124:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 236              		.loc 1 124 6 view .LVU56
 237 0012 4A2B     		cmp	r3, #74
 238 0014 00D0     		beq	.L18
 239              	.L15:
 133:Core/Src/main.c **** 
 240              		.loc 1 133 1 view .LVU57
 241 0016 10BD     		pop	{r4, pc}
 242              	.L18:
 125:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 243              		.loc 1 125 16 discriminator 1 view .LVU58
 244 0018 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 124:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
ARM GAS  C:\Temp\ccEkXWoY.s 			page 8


 245              		.loc 1 124 41 discriminator 1 view .LVU59
 246 001a 5F2B     		cmp	r3, #95
 247 001c FBD1     		bne	.L15
 126:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 248              		.loc 1 126 16 view .LVU60
 249 001e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 125:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 250              		.loc 1 125 41 view .LVU61
 251 0020 412B     		cmp	r3, #65
 252 0022 F8D1     		bne	.L15
 127:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 253              		.loc 1 127 16 view .LVU62
 254 0024 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 126:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 255              		.loc 1 126 41 view .LVU63
 256 0026 412B     		cmp	r3, #65
 257 0028 F5D1     		bne	.L15
 128:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 258              		.loc 1 128 16 view .LVU64
 259 002a 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 127:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 260              		.loc 1 127 69 view .LVU65
 261 002c 5F2B     		cmp	r3, #95
 262 002e F2D1     		bne	.L15
 129:Core/Src/main.c ****         calibrated = 1;
 263              		.loc 1 129 16 view .LVU66
 264 0030 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 128:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 265              		.loc 1 128 69 view .LVU67
 266 0032 4A2B     		cmp	r3, #74
 267 0034 EFD1     		bne	.L15
 268              	.LBB4:
 130:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 269              		.loc 1 130 9 is_stmt 1 view .LVU68
 130:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 270              		.loc 1 130 20 is_stmt 0 view .LVU69
 271 0036 054B     		ldr	r3, .L19+8
 272 0038 0122     		movs	r2, #1
 273 003a 1A70     		strb	r2, [r3]
 131:Core/Src/main.c ****   }
 274              		.loc 1 131 9 is_stmt 1 view .LVU70
 275 003c 2046     		mov	r0, r4
 276 003e FFF7FEFF 		bl	receivedFromSimulink
 277              	.LVL16:
 278              	.LBE4:
 133:Core/Src/main.c **** 
 279              		.loc 1 133 1 is_stmt 0 view .LVU71
 280 0042 E8E7     		b	.L15
 281              	.L20:
 282              		.align	2
 283              	.L19:
 284 0044 00000000 		.word	bigBuffer
 285 0048 00000000 		.word	huart2
 286 004c 00000000 		.word	calibrated
 287              		.cfi_endproc
 288              	.LFE138:
 290              		.section	.text.sendToSimulink,"ax",%progbits
ARM GAS  C:\Temp\ccEkXWoY.s 			page 9


 291              		.align	1
 292              		.global	sendToSimulink
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 297              	sendToSimulink:
 298              	.LFB140:
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** void sendToSimulink(){
 299              		.loc 1 150 22 is_stmt 1 view -0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303 0000 38B5     		push	{r3, r4, r5, lr}
 304              		.cfi_def_cfa_offset 16
 305              		.cfi_offset 3, -16
 306              		.cfi_offset 4, -12
 307              		.cfi_offset 5, -8
 308              		.cfi_offset 14, -4
 151:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 309              		.loc 1 151 5 view .LVU73
 310 0002 3A4C     		ldr	r4, .L23
 311 0004 4FF0FF33 		mov	r3, #-1
 312 0008 0322     		movs	r2, #3
 313 000a 3949     		ldr	r1, .L23+4
 314 000c 2046     		mov	r0, r4
 315 000e FFF7FEFF 		bl	HAL_UART_Transmit
 316              	.LVL17:
 152:Core/Src/main.c ****     
 153:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Distance)  , 4 , HAL_MAX_DELAY);
 317              		.loc 1 153 5 view .LVU74
 318 0012 384D     		ldr	r5, .L23+8
 319 0014 4FF0FF33 		mov	r3, #-1
 320 0018 0422     		movs	r2, #4
 321 001a 2946     		mov	r1, r5
 322 001c 2046     		mov	r0, r4
 323 001e FFF7FEFF 		bl	HAL_UART_Transmit
 324              	.LVL18:
 154:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Ambient )  , 4 , HAL_MAX_DELAY);
 325              		.loc 1 154 5 view .LVU75
 326 0022 4FF0FF33 		mov	r3, #-1
 327 0026 0422     		movs	r2, #4
 328 0028 05F10801 		add	r1, r5, #8
 329 002c 2046     		mov	r0, r4
 330 002e FFF7FEFF 		bl	HAL_UART_Transmit
 331              	.LVL19:
 155:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Signal  )  , 4 , HAL_MAX_DELAY);
 332              		.loc 1 155 5 view .LVU76
 333 0032 4FF0FF33 		mov	r3, #-1
 334 0036 0422     		movs	r2, #4
 335 0038 05F10C01 		add	r1, r5, #12
 336 003c 2046     		mov	r0, r4
 337 003e FFF7FEFF 		bl	HAL_UART_Transmit
 338              	.LVL20:
 156:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, &(TOF_left_result.Status  )  , 4 , HAL_MAX_DELAY);
 339              		.loc 1 156 5 view .LVU77
 340 0042 4FF0FF33 		mov	r3, #-1
ARM GAS  C:\Temp\ccEkXWoY.s 			page 10


 341 0046 0422     		movs	r2, #4
 342 0048 A918     		adds	r1, r5, r2
 343 004a 2046     		mov	r0, r4
 344 004c FFF7FEFF 		bl	HAL_UART_Transmit
 345              	.LVL21:
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Distance)  , 4 , HAL_MAX_DELAY);
 346              		.loc 1 158 5 view .LVU78
 347 0050 294D     		ldr	r5, .L23+12
 348 0052 4FF0FF33 		mov	r3, #-1
 349 0056 0422     		movs	r2, #4
 350 0058 2946     		mov	r1, r5
 351 005a 2046     		mov	r0, r4
 352 005c FFF7FEFF 		bl	HAL_UART_Transmit
 353              	.LVL22:
 159:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Ambient )  , 4 , HAL_MAX_DELAY);
 354              		.loc 1 159 5 view .LVU79
 355 0060 4FF0FF33 		mov	r3, #-1
 356 0064 0422     		movs	r2, #4
 357 0066 05F10801 		add	r1, r5, #8
 358 006a 2046     		mov	r0, r4
 359 006c FFF7FEFF 		bl	HAL_UART_Transmit
 360              	.LVL23:
 160:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Signal  )  , 4 , HAL_MAX_DELAY);
 361              		.loc 1 160 5 view .LVU80
 362 0070 4FF0FF33 		mov	r3, #-1
 363 0074 0422     		movs	r2, #4
 364 0076 05F10C01 		add	r1, r5, #12
 365 007a 2046     		mov	r0, r4
 366 007c FFF7FEFF 		bl	HAL_UART_Transmit
 367              	.LVL24:
 161:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_centre_result.Status  )  , 4 , HAL_MAX_DELAY);
 368              		.loc 1 161 5 view .LVU81
 369 0080 4FF0FF33 		mov	r3, #-1
 370 0084 0422     		movs	r2, #4
 371 0086 A918     		adds	r1, r5, r2
 372 0088 2046     		mov	r0, r4
 373 008a FFF7FEFF 		bl	HAL_UART_Transmit
 374              	.LVL25:
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Distance)  , 4 , HAL_MAX_DELAY);
 375              		.loc 1 163 5 view .LVU82
 376 008e 1B4D     		ldr	r5, .L23+16
 377 0090 4FF0FF33 		mov	r3, #-1
 378 0094 0422     		movs	r2, #4
 379 0096 2946     		mov	r1, r5
 380 0098 2046     		mov	r0, r4
 381 009a FFF7FEFF 		bl	HAL_UART_Transmit
 382              	.LVL26:
 164:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Ambient )  , 4 , HAL_MAX_DELAY);
 383              		.loc 1 164 5 view .LVU83
 384 009e 4FF0FF33 		mov	r3, #-1
 385 00a2 0422     		movs	r2, #4
 386 00a4 05F10801 		add	r1, r5, #8
 387 00a8 2046     		mov	r0, r4
 388 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 389              	.LVL27:
ARM GAS  C:\Temp\ccEkXWoY.s 			page 11


 165:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Signal  )  , 4 , HAL_MAX_DELAY);
 390              		.loc 1 165 5 view .LVU84
 391 00ae 4FF0FF33 		mov	r3, #-1
 392 00b2 0422     		movs	r2, #4
 393 00b4 05F10C01 		add	r1, r5, #12
 394 00b8 2046     		mov	r0, r4
 395 00ba FFF7FEFF 		bl	HAL_UART_Transmit
 396              	.LVL28:
 166:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,  &(TOF_right_result.Status  )  , 4 , HAL_MAX_DELAY);
 397              		.loc 1 166 5 view .LVU85
 398 00be 4FF0FF33 		mov	r3, #-1
 399 00c2 0422     		movs	r2, #4
 400 00c4 A918     		adds	r1, r5, r2
 401 00c6 2046     		mov	r0, r4
 402 00c8 FFF7FEFF 		bl	HAL_UART_Transmit
 403              	.LVL29:
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint32_t *) &counter         ,4 , HAL_MAX_DELAY);
 404              		.loc 1 168 5 view .LVU86
 405 00cc 4FF0FF33 		mov	r3, #-1
 406 00d0 0422     		movs	r2, #4
 407 00d2 0B49     		ldr	r1, .L23+20
 408 00d4 2046     		mov	r0, r4
 409 00d6 FFF7FEFF 		bl	HAL_UART_Transmit
 410              	.LVL30:
 169:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 411              		.loc 1 169 5 view .LVU87
 412 00da 4FF0FF33 		mov	r3, #-1
 413 00de 0322     		movs	r2, #3
 414 00e0 0849     		ldr	r1, .L23+24
 415 00e2 2046     		mov	r0, r4
 416 00e4 FFF7FEFF 		bl	HAL_UART_Transmit
 417              	.LVL31:
 170:Core/Src/main.c **** }
 418              		.loc 1 170 1 is_stmt 0 view .LVU88
 419 00e8 38BD     		pop	{r3, r4, r5, pc}
 420              	.L24:
 421 00ea 00BF     		.align	2
 422              	.L23:
 423 00ec 00000000 		.word	huart2
 424 00f0 00000000 		.word	header
 425 00f4 04000000 		.word	TOF_left_result+4
 426 00f8 04000000 		.word	TOF_centre_result+4
 427 00fc 04000000 		.word	TOF_right_result+4
 428 0100 00000000 		.word	counter
 429 0104 00000000 		.word	terminator
 430              		.cfi_endproc
 431              	.LFE140:
 433              		.section	.text.MX_DMA_Init,"ax",%progbits
 434              		.align	1
 435              		.global	MX_DMA_Init
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 440              	MX_DMA_Init:
 441              	.LFB147:
 171:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccEkXWoY.s 			page 12


 172:Core/Src/main.c **** /* USER CODE END 0 */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** /**
 175:Core/Src/main.c ****   * @brief  The application entry point.
 176:Core/Src/main.c ****   * @retval int
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c **** int main(void)
 179:Core/Src/main.c **** {
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* USER CODE END 1 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 188:Core/Src/main.c ****   HAL_Init();
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE END Init */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* Configure the system clock */
 195:Core/Src/main.c ****   SystemClock_Config();
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* USER CODE END SysInit */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* Initialize all configured peripherals */
 202:Core/Src/main.c ****   MX_GPIO_Init();
 203:Core/Src/main.c ****   MX_DMA_Init();
 204:Core/Src/main.c ****   MX_TIM2_Init();
 205:Core/Src/main.c ****   MX_USART2_UART_Init();
 206:Core/Src/main.c ****   MX_TIM5_Init();
 207:Core/Src/main.c ****   MX_I2C1_Init();
 208:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   while (calibrated != 1){
 211:Core/Src/main.c ****     initialCalibration();
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   XNUCLEO53L1A1_Init(); // initializes GPIO Expanders
 215:Core/Src/main.c ****   
 216:Core/Src/main.c ****   TOF_left_result.Address = ToF_Left;
 217:Core/Src/main.c ****   TOF_centre_result.Address = ToF_Centre;
 218:Core/Src/main.c ****   TOF_right_result.Address = ToF_Right;
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_LEFT,   ToF_Left);
 221:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_CENTER, ToF_Centre);
 222:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_RIGHT,  ToF_Right);
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   configureTimer(tof_odr,TIM2);
 225:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 226:Core/Src/main.c ****   /* USER CODE END 2 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* Infinite loop */
ARM GAS  C:\Temp\ccEkXWoY.s 			page 13


 229:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 230:Core/Src/main.c ****   
 231:Core/Src/main.c ****   while (1)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     if (clearToGetL1 == 1){
 234:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 235:Core/Src/main.c ****       getVL53L1A1(&TOF_centre_result);
 236:Core/Src/main.c ****       getVL53L1A1(&TOF_right_result);
 237:Core/Src/main.c ****       clearToGetL1 = 0;
 238:Core/Src/main.c ****     }
 239:Core/Src/main.c ****     
 240:Core/Src/main.c ****     /* USER CODE END WHILE */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c ****   /* USER CODE END 3 */
 245:Core/Src/main.c **** }
 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** /**
 248:Core/Src/main.c ****   * @brief System Clock Configuration
 249:Core/Src/main.c ****   * @retval None
 250:Core/Src/main.c ****   */
 251:Core/Src/main.c **** void SystemClock_Config(void)
 252:Core/Src/main.c **** {
 253:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 254:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 259:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 262:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 266:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 84;
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 272:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 273:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 274:Core/Src/main.c ****   {
 275:Core/Src/main.c ****     Error_Handler();
 276:Core/Src/main.c ****   }
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 279:Core/Src/main.c ****   */
 280:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 281:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 283:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 285:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  C:\Temp\ccEkXWoY.s 			page 14


 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c **** }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /**
 294:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 295:Core/Src/main.c ****   * @param None
 296:Core/Src/main.c ****   * @retval None
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c **** static void MX_I2C1_Init(void)
 299:Core/Src/main.c **** {
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 308:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 309:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 310:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 311:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 312:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 313:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 314:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 315:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 316:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 317:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 318:Core/Src/main.c ****   {
 319:Core/Src/main.c ****     Error_Handler();
 320:Core/Src/main.c ****   }
 321:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 324:Core/Src/main.c **** 
 325:Core/Src/main.c **** }
 326:Core/Src/main.c **** 
 327:Core/Src/main.c **** /**
 328:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 329:Core/Src/main.c ****   * @param None
 330:Core/Src/main.c ****   * @retval None
 331:Core/Src/main.c ****   */
 332:Core/Src/main.c **** static void MX_TIM2_Init(void)
 333:Core/Src/main.c **** {
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 340:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
ARM GAS  C:\Temp\ccEkXWoY.s 			page 15


 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 345:Core/Src/main.c ****   htim2.Instance = TIM2;
 346:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 347:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 348:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 349:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 350:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 351:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 356:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 357:Core/Src/main.c ****   {
 358:Core/Src/main.c ****     Error_Handler();
 359:Core/Src/main.c ****   }
 360:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 361:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 362:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 363:Core/Src/main.c ****   {
 364:Core/Src/main.c ****     Error_Handler();
 365:Core/Src/main.c ****   }
 366:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** }
 371:Core/Src/main.c **** 
 372:Core/Src/main.c **** /**
 373:Core/Src/main.c ****   * @brief TIM5 Initialization Function
 374:Core/Src/main.c ****   * @param None
 375:Core/Src/main.c ****   * @retval None
 376:Core/Src/main.c ****   */
 377:Core/Src/main.c **** static void MX_TIM5_Init(void)
 378:Core/Src/main.c **** {
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 385:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 390:Core/Src/main.c ****   htim5.Instance = TIM5;
 391:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
 392:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 393:Core/Src/main.c ****   htim5.Init.Period = 4294967295;
 394:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 395:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 396:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****     Error_Handler();
 399:Core/Src/main.c ****   }
ARM GAS  C:\Temp\ccEkXWoY.s 			page 16


 400:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 401:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     Error_Handler();
 404:Core/Src/main.c ****   }
 405:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 406:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 407:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 408:Core/Src/main.c ****   {
 409:Core/Src/main.c ****     Error_Handler();
 410:Core/Src/main.c ****   }
 411:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** }
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** /**
 418:Core/Src/main.c ****   * @brief USART2 Initialization Function
 419:Core/Src/main.c ****   * @param None
 420:Core/Src/main.c ****   * @retval None
 421:Core/Src/main.c ****   */
 422:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 423:Core/Src/main.c **** {
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 432:Core/Src/main.c ****   huart2.Instance = USART2;
 433:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 434:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 435:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 436:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 437:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 438:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 439:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 440:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 441:Core/Src/main.c ****   {
 442:Core/Src/main.c ****     Error_Handler();
 443:Core/Src/main.c ****   }
 444:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 447:Core/Src/main.c **** 
 448:Core/Src/main.c **** }
 449:Core/Src/main.c **** 
 450:Core/Src/main.c **** /**
 451:Core/Src/main.c ****   * Enable DMA controller clock
 452:Core/Src/main.c ****   */
 453:Core/Src/main.c **** void MX_DMA_Init(void)
 454:Core/Src/main.c **** {
 442              		.loc 1 454 1 is_stmt 1 view -0
 443              		.cfi_startproc
ARM GAS  C:\Temp\ccEkXWoY.s 			page 17


 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446 0000 00B5     		push	{lr}
 447              		.cfi_def_cfa_offset 4
 448              		.cfi_offset 14, -4
 449 0002 83B0     		sub	sp, sp, #12
 450              		.cfi_def_cfa_offset 16
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /* DMA controller clock enable */
 457:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 451              		.loc 1 457 3 view .LVU90
 452              	.LBB5:
 453              		.loc 1 457 3 view .LVU91
 454 0004 0021     		movs	r1, #0
 455 0006 0191     		str	r1, [sp, #4]
 456              		.loc 1 457 3 view .LVU92
 457 0008 094B     		ldr	r3, .L27
 458 000a 1A6B     		ldr	r2, [r3, #48]
 459 000c 42F40012 		orr	r2, r2, #2097152
 460 0010 1A63     		str	r2, [r3, #48]
 461              		.loc 1 457 3 view .LVU93
 462 0012 1B6B     		ldr	r3, [r3, #48]
 463 0014 03F40013 		and	r3, r3, #2097152
 464 0018 0193     		str	r3, [sp, #4]
 465              		.loc 1 457 3 view .LVU94
 466 001a 019B     		ldr	r3, [sp, #4]
 467              	.LBE5:
 468              		.loc 1 457 3 view .LVU95
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /* DMA interrupt init */
 460:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 461:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 469              		.loc 1 461 3 view .LVU96
 470 001c 0A46     		mov	r2, r1
 471 001e 1020     		movs	r0, #16
 472 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 473              	.LVL32:
 462:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 474              		.loc 1 462 3 view .LVU97
 475 0024 1020     		movs	r0, #16
 476 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 477              	.LVL33:
 463:Core/Src/main.c **** 
 464:Core/Src/main.c **** }
 478              		.loc 1 464 1 is_stmt 0 view .LVU98
 479 002a 03B0     		add	sp, sp, #12
 480              		.cfi_def_cfa_offset 4
 481              		@ sp needed
 482 002c 5DF804FB 		ldr	pc, [sp], #4
 483              	.L28:
 484              		.align	2
 485              	.L27:
 486 0030 00380240 		.word	1073887232
 487              		.cfi_endproc
 488              	.LFE147:
 490              		.section	.text.MX_GPIO_Init,"ax",%progbits
 491              		.align	1
ARM GAS  C:\Temp\ccEkXWoY.s 			page 18


 492              		.global	MX_GPIO_Init
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 497              	MX_GPIO_Init:
 498              	.LFB148:
 465:Core/Src/main.c **** 
 466:Core/Src/main.c **** /**
 467:Core/Src/main.c ****   * @brief GPIO Initialization Function
 468:Core/Src/main.c ****   * @param None
 469:Core/Src/main.c ****   * @retval None
 470:Core/Src/main.c ****   */
 471:Core/Src/main.c **** void MX_GPIO_Init(void)
 472:Core/Src/main.c **** {
 499              		.loc 1 472 1 is_stmt 1 view -0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 40
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 504              		.cfi_def_cfa_offset 20
 505              		.cfi_offset 4, -20
 506              		.cfi_offset 5, -16
 507              		.cfi_offset 6, -12
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 8BB0     		sub	sp, sp, #44
 511              		.cfi_def_cfa_offset 64
 473:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 512              		.loc 1 473 3 view .LVU100
 513              		.loc 1 473 20 is_stmt 0 view .LVU101
 514 0004 0024     		movs	r4, #0
 515 0006 0594     		str	r4, [sp, #20]
 516 0008 0694     		str	r4, [sp, #24]
 517 000a 0794     		str	r4, [sp, #28]
 518 000c 0894     		str	r4, [sp, #32]
 519 000e 0994     		str	r4, [sp, #36]
 474:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 475:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 478:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 520              		.loc 1 478 3 is_stmt 1 view .LVU102
 521              	.LBB6:
 522              		.loc 1 478 3 view .LVU103
 523 0010 0094     		str	r4, [sp]
 524              		.loc 1 478 3 view .LVU104
 525 0012 474B     		ldr	r3, .L31
 526 0014 1A6B     		ldr	r2, [r3, #48]
 527 0016 42F00402 		orr	r2, r2, #4
 528 001a 1A63     		str	r2, [r3, #48]
 529              		.loc 1 478 3 view .LVU105
 530 001c 1A6B     		ldr	r2, [r3, #48]
 531 001e 02F00402 		and	r2, r2, #4
 532 0022 0092     		str	r2, [sp]
 533              		.loc 1 478 3 view .LVU106
 534 0024 009A     		ldr	r2, [sp]
 535              	.LBE6:
ARM GAS  C:\Temp\ccEkXWoY.s 			page 19


 536              		.loc 1 478 3 view .LVU107
 479:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 537              		.loc 1 479 3 view .LVU108
 538              	.LBB7:
 539              		.loc 1 479 3 view .LVU109
 540 0026 0194     		str	r4, [sp, #4]
 541              		.loc 1 479 3 view .LVU110
 542 0028 1A6B     		ldr	r2, [r3, #48]
 543 002a 42F08002 		orr	r2, r2, #128
 544 002e 1A63     		str	r2, [r3, #48]
 545              		.loc 1 479 3 view .LVU111
 546 0030 1A6B     		ldr	r2, [r3, #48]
 547 0032 02F08002 		and	r2, r2, #128
 548 0036 0192     		str	r2, [sp, #4]
 549              		.loc 1 479 3 view .LVU112
 550 0038 019A     		ldr	r2, [sp, #4]
 551              	.LBE7:
 552              		.loc 1 479 3 view .LVU113
 480:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 553              		.loc 1 480 3 view .LVU114
 554              	.LBB8:
 555              		.loc 1 480 3 view .LVU115
 556 003a 0294     		str	r4, [sp, #8]
 557              		.loc 1 480 3 view .LVU116
 558 003c 1A6B     		ldr	r2, [r3, #48]
 559 003e 42F00102 		orr	r2, r2, #1
 560 0042 1A63     		str	r2, [r3, #48]
 561              		.loc 1 480 3 view .LVU117
 562 0044 1A6B     		ldr	r2, [r3, #48]
 563 0046 02F00102 		and	r2, r2, #1
 564 004a 0292     		str	r2, [sp, #8]
 565              		.loc 1 480 3 view .LVU118
 566 004c 029A     		ldr	r2, [sp, #8]
 567              	.LBE8:
 568              		.loc 1 480 3 view .LVU119
 481:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 569              		.loc 1 481 3 view .LVU120
 570              	.LBB9:
 571              		.loc 1 481 3 view .LVU121
 572 004e 0394     		str	r4, [sp, #12]
 573              		.loc 1 481 3 view .LVU122
 574 0050 1A6B     		ldr	r2, [r3, #48]
 575 0052 42F00202 		orr	r2, r2, #2
 576 0056 1A63     		str	r2, [r3, #48]
 577              		.loc 1 481 3 view .LVU123
 578 0058 1A6B     		ldr	r2, [r3, #48]
 579 005a 02F00202 		and	r2, r2, #2
 580 005e 0392     		str	r2, [sp, #12]
 581              		.loc 1 481 3 view .LVU124
 582 0060 039A     		ldr	r2, [sp, #12]
 583              	.LBE9:
 584              		.loc 1 481 3 view .LVU125
 482:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 585              		.loc 1 482 3 view .LVU126
 586              	.LBB10:
 587              		.loc 1 482 3 view .LVU127
 588 0062 0494     		str	r4, [sp, #16]
ARM GAS  C:\Temp\ccEkXWoY.s 			page 20


 589              		.loc 1 482 3 view .LVU128
 590 0064 1A6B     		ldr	r2, [r3, #48]
 591 0066 42F00802 		orr	r2, r2, #8
 592 006a 1A63     		str	r2, [r3, #48]
 593              		.loc 1 482 3 view .LVU129
 594 006c 1B6B     		ldr	r3, [r3, #48]
 595 006e 03F00803 		and	r3, r3, #8
 596 0072 0493     		str	r3, [sp, #16]
 597              		.loc 1 482 3 view .LVU130
 598 0074 049B     		ldr	r3, [sp, #16]
 599              	.LBE10:
 600              		.loc 1 482 3 view .LVU131
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 485:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 601              		.loc 1 485 3 view .LVU132
 602 0076 2F4E     		ldr	r6, .L31+4
 603 0078 2246     		mov	r2, r4
 604 007a 2021     		movs	r1, #32
 605 007c 3046     		mov	r0, r6
 606 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 607              	.LVL34:
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 488:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 608              		.loc 1 488 3 view .LVU133
 609              		.loc 1 488 23 is_stmt 0 view .LVU134
 610 0082 4FF40053 		mov	r3, #8192
 611 0086 0593     		str	r3, [sp, #20]
 489:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 612              		.loc 1 489 3 is_stmt 1 view .LVU135
 613              		.loc 1 489 24 is_stmt 0 view .LVU136
 614 0088 4FF48813 		mov	r3, #1114112
 615 008c 0693     		str	r3, [sp, #24]
 490:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 616              		.loc 1 490 3 is_stmt 1 view .LVU137
 617              		.loc 1 490 24 is_stmt 0 view .LVU138
 618 008e 0794     		str	r4, [sp, #28]
 491:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 619              		.loc 1 491 3 is_stmt 1 view .LVU139
 620 0090 294F     		ldr	r7, .L31+8
 621 0092 05A9     		add	r1, sp, #20
 622 0094 3846     		mov	r0, r7
 623 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 624              	.LVL35:
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 494:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 495:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 496:Core/Src/main.c ****                            PC12 */
 497:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 625              		.loc 1 497 3 view .LVU140
 626              		.loc 1 497 23 is_stmt 0 view .LVU141
 627 009a 41F6FF73 		movw	r3, #8191
 628 009e 0593     		str	r3, [sp, #20]
 498:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 499:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
ARM GAS  C:\Temp\ccEkXWoY.s 			page 21


 500:Core/Src/main.c ****                           |GPIO_PIN_12;
 501:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 629              		.loc 1 501 3 is_stmt 1 view .LVU142
 630              		.loc 1 501 24 is_stmt 0 view .LVU143
 631 00a0 0325     		movs	r5, #3
 632 00a2 0695     		str	r5, [sp, #24]
 502:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 633              		.loc 1 502 3 is_stmt 1 view .LVU144
 634              		.loc 1 502 24 is_stmt 0 view .LVU145
 635 00a4 0794     		str	r4, [sp, #28]
 503:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 636              		.loc 1 503 3 is_stmt 1 view .LVU146
 637 00a6 05A9     		add	r1, sp, #20
 638 00a8 3846     		mov	r0, r7
 639 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 640              	.LVL36:
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA6 PA7
 506:Core/Src/main.c ****                            PA8 PA9 PA10 PA11
 507:Core/Src/main.c ****                            PA12 PA15 */
 508:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 641              		.loc 1 508 3 view .LVU147
 642              		.loc 1 508 23 is_stmt 0 view .LVU148
 643 00ae 49F6C373 		movw	r3, #40899
 644 00b2 0593     		str	r3, [sp, #20]
 509:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 510:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_15;
 511:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 645              		.loc 1 511 3 is_stmt 1 view .LVU149
 646              		.loc 1 511 24 is_stmt 0 view .LVU150
 647 00b4 0695     		str	r5, [sp, #24]
 512:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 648              		.loc 1 512 3 is_stmt 1 view .LVU151
 649              		.loc 1 512 24 is_stmt 0 view .LVU152
 650 00b6 0794     		str	r4, [sp, #28]
 513:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 651              		.loc 1 513 3 is_stmt 1 view .LVU153
 652 00b8 05A9     		add	r1, sp, #20
 653 00ba 3046     		mov	r0, r6
 654 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 655              	.LVL37:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /*Configure GPIO pin : VL53L1X_INT_Pin */
 516:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 656              		.loc 1 516 3 view .LVU154
 657              		.loc 1 516 23 is_stmt 0 view .LVU155
 658 00c0 1023     		movs	r3, #16
 659 00c2 0593     		str	r3, [sp, #20]
 517:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 660              		.loc 1 517 3 is_stmt 1 view .LVU156
 661              		.loc 1 517 24 is_stmt 0 view .LVU157
 662 00c4 4FF40413 		mov	r3, #2162688
 663 00c8 0693     		str	r3, [sp, #24]
 518:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 664              		.loc 1 518 3 is_stmt 1 view .LVU158
 665              		.loc 1 518 24 is_stmt 0 view .LVU159
 666 00ca 0127     		movs	r7, #1
ARM GAS  C:\Temp\ccEkXWoY.s 			page 22


 667 00cc 0797     		str	r7, [sp, #28]
 519:Core/Src/main.c ****   HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 668              		.loc 1 519 3 is_stmt 1 view .LVU160
 669 00ce 05A9     		add	r1, sp, #20
 670 00d0 3046     		mov	r0, r6
 671 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 672              	.LVL38:
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 522:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 673              		.loc 1 522 3 view .LVU161
 674              		.loc 1 522 23 is_stmt 0 view .LVU162
 675 00d6 2023     		movs	r3, #32
 676 00d8 0593     		str	r3, [sp, #20]
 523:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 677              		.loc 1 523 3 is_stmt 1 view .LVU163
 678              		.loc 1 523 24 is_stmt 0 view .LVU164
 679 00da 0697     		str	r7, [sp, #24]
 524:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 680              		.loc 1 524 3 is_stmt 1 view .LVU165
 681              		.loc 1 524 24 is_stmt 0 view .LVU166
 682 00dc 0794     		str	r4, [sp, #28]
 525:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 683              		.loc 1 525 3 is_stmt 1 view .LVU167
 684              		.loc 1 525 25 is_stmt 0 view .LVU168
 685 00de 0894     		str	r4, [sp, #32]
 526:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 686              		.loc 1 526 3 is_stmt 1 view .LVU169
 687 00e0 05A9     		add	r1, sp, #20
 688 00e2 3046     		mov	r0, r6
 689 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 690              	.LVL39:
 527:Core/Src/main.c **** 
 528:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 529:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 530:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 531:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 691              		.loc 1 531 3 view .LVU170
 692              		.loc 1 531 23 is_stmt 0 view .LVU171
 693 00e8 4FF2F743 		movw	r3, #62711
 694 00ec 0593     		str	r3, [sp, #20]
 532:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 533:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 534:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 695              		.loc 1 534 3 is_stmt 1 view .LVU172
 696              		.loc 1 534 24 is_stmt 0 view .LVU173
 697 00ee 0695     		str	r5, [sp, #24]
 535:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 698              		.loc 1 535 3 is_stmt 1 view .LVU174
 699              		.loc 1 535 24 is_stmt 0 view .LVU175
 700 00f0 0794     		str	r4, [sp, #28]
 536:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 701              		.loc 1 536 3 is_stmt 1 view .LVU176
 702 00f2 05A9     		add	r1, sp, #20
 703 00f4 1148     		ldr	r0, .L31+12
 704 00f6 FFF7FEFF 		bl	HAL_GPIO_Init
 705              	.LVL40:
ARM GAS  C:\Temp\ccEkXWoY.s 			page 23


 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 539:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 706              		.loc 1 539 3 view .LVU177
 707              		.loc 1 539 23 is_stmt 0 view .LVU178
 708 00fa 0423     		movs	r3, #4
 709 00fc 0593     		str	r3, [sp, #20]
 540:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 710              		.loc 1 540 3 is_stmt 1 view .LVU179
 711              		.loc 1 540 24 is_stmt 0 view .LVU180
 712 00fe 0695     		str	r5, [sp, #24]
 541:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 713              		.loc 1 541 3 is_stmt 1 view .LVU181
 714              		.loc 1 541 24 is_stmt 0 view .LVU182
 715 0100 0794     		str	r4, [sp, #28]
 542:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 716              		.loc 1 542 3 is_stmt 1 view .LVU183
 717 0102 05A9     		add	r1, sp, #20
 718 0104 0E48     		ldr	r0, .L31+16
 719 0106 FFF7FEFF 		bl	HAL_GPIO_Init
 720              	.LVL41:
 543:Core/Src/main.c **** 
 544:Core/Src/main.c ****   /* EXTI interrupt init*/
 545:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 721              		.loc 1 545 3 view .LVU184
 722 010a 2246     		mov	r2, r4
 723 010c 2146     		mov	r1, r4
 724 010e 0A20     		movs	r0, #10
 725 0110 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 726              	.LVL42:
 546:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 727              		.loc 1 546 3 view .LVU185
 728 0114 0A20     		movs	r0, #10
 729 0116 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 730              	.LVL43:
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 731              		.loc 1 548 3 view .LVU186
 732 011a 2246     		mov	r2, r4
 733 011c 2146     		mov	r1, r4
 734 011e 2820     		movs	r0, #40
 735 0120 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 736              	.LVL44:
 549:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 737              		.loc 1 549 3 view .LVU187
 738 0124 2820     		movs	r0, #40
 739 0126 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 740              	.LVL45:
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 552:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 553:Core/Src/main.c **** }
 741              		.loc 1 553 1 is_stmt 0 view .LVU188
 742 012a 0BB0     		add	sp, sp, #44
 743              		.cfi_def_cfa_offset 20
 744              		@ sp needed
 745 012c F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  C:\Temp\ccEkXWoY.s 			page 24


 746              	.L32:
 747 012e 00BF     		.align	2
 748              	.L31:
 749 0130 00380240 		.word	1073887232
 750 0134 00000240 		.word	1073872896
 751 0138 00080240 		.word	1073874944
 752 013c 00040240 		.word	1073873920
 753 0140 000C0240 		.word	1073875968
 754              		.cfi_endproc
 755              	.LFE148:
 757              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 758              		.align	1
 759              		.global	HAL_TIM_PeriodElapsedCallback
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 764              	HAL_TIM_PeriodElapsedCallback:
 765              	.LVL46:
 766              	.LFB149:
 554:Core/Src/main.c **** 
 555:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 556:Core/Src/main.c **** 
 557:Core/Src/main.c **** /* USER CODE END 4 */
 558:Core/Src/main.c **** 
 559:Core/Src/main.c **** /**
 560:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 561:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 562:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 563:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 564:Core/Src/main.c ****   * @param  htim : TIM handle
 565:Core/Src/main.c ****   * @retval None
 566:Core/Src/main.c ****   */
 567:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 568:Core/Src/main.c **** {
 767              		.loc 1 568 1 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		.loc 1 568 1 is_stmt 0 view .LVU190
 772 0000 08B5     		push	{r3, lr}
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 3, -8
 775              		.cfi_offset 14, -4
 569:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 572:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 776              		.loc 1 572 3 is_stmt 1 view .LVU191
 777              		.loc 1 572 11 is_stmt 0 view .LVU192
 778 0002 0268     		ldr	r2, [r0]
 779              		.loc 1 572 6 view .LVU193
 780 0004 034B     		ldr	r3, .L37
 781 0006 9A42     		cmp	r2, r3
 782 0008 00D0     		beq	.L36
 783              	.LVL47:
 784              	.L33:
 573:Core/Src/main.c ****     HAL_IncTick();
ARM GAS  C:\Temp\ccEkXWoY.s 			page 25


 574:Core/Src/main.c ****   }
 575:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 578:Core/Src/main.c **** }
 785              		.loc 1 578 1 view .LVU194
 786 000a 08BD     		pop	{r3, pc}
 787              	.LVL48:
 788              	.L36:
 573:Core/Src/main.c ****     HAL_IncTick();
 789              		.loc 1 573 5 is_stmt 1 view .LVU195
 790 000c FFF7FEFF 		bl	HAL_IncTick
 791              	.LVL49:
 792              		.loc 1 578 1 is_stmt 0 view .LVU196
 793 0010 FBE7     		b	.L33
 794              	.L38:
 795 0012 00BF     		.align	2
 796              	.L37:
 797 0014 00000140 		.word	1073807360
 798              		.cfi_endproc
 799              	.LFE149:
 801              		.section	.text.Error_Handler,"ax",%progbits
 802              		.align	1
 803              		.global	Error_Handler
 804              		.syntax unified
 805              		.thumb
 806              		.thumb_func
 808              	Error_Handler:
 809              	.LFB150:
 579:Core/Src/main.c **** 
 580:Core/Src/main.c **** /**
 581:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 582:Core/Src/main.c ****   * @retval None
 583:Core/Src/main.c ****   */
 584:Core/Src/main.c **** void Error_Handler(void)
 585:Core/Src/main.c **** {
 810              		.loc 1 585 1 is_stmt 1 view -0
 811              		.cfi_startproc
 812              		@ Volatile: function does not return.
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 586:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 587:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 588:Core/Src/main.c ****   __disable_irq();
 816              		.loc 1 588 3 view .LVU198
 817              	.LBB11:
 818              	.LBI11:
 819              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
ARM GAS  C:\Temp\ccEkXWoY.s 			page 26


   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  C:\Temp\ccEkXWoY.s 			page 27


  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
ARM GAS  C:\Temp\ccEkXWoY.s 			page 28


 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\ccEkXWoY.s 			page 29


 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccEkXWoY.s 			page 30


 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\ccEkXWoY.s 			page 31


 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  C:\Temp\ccEkXWoY.s 			page 32


 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
ARM GAS  C:\Temp\ccEkXWoY.s 			page 33


 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
ARM GAS  C:\Temp\ccEkXWoY.s 			page 34


 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
ARM GAS  C:\Temp\ccEkXWoY.s 			page 35


 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
ARM GAS  C:\Temp\ccEkXWoY.s 			page 36


 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
ARM GAS  C:\Temp\ccEkXWoY.s 			page 37


 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Temp\ccEkXWoY.s 			page 38


 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Temp\ccEkXWoY.s 			page 39


 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Temp\ccEkXWoY.s 			page 40


 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
ARM GAS  C:\Temp\ccEkXWoY.s 			page 41


 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Temp\ccEkXWoY.s 			page 42


 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 820              		.loc 2 960 27 view .LVU199
 821              	.LBB12:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 822              		.loc 2 962 3 view .LVU200
 823              		.syntax unified
 824              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 825 0000 72B6     		cpsid i
 826              	@ 0 "" 2
 827              		.thumb
 828              		.syntax unified
 829              	.L40:
 830              	.LBE12:
 831              	.LBE11:
 589:Core/Src/main.c ****   while (1)
 832              		.loc 1 589 3 discriminator 1 view .LVU201
 590:Core/Src/main.c ****   {
ARM GAS  C:\Temp\ccEkXWoY.s 			page 43


 591:Core/Src/main.c ****   }
 833              		.loc 1 591 3 discriminator 1 view .LVU202
 589:Core/Src/main.c ****   while (1)
 834              		.loc 1 589 9 discriminator 1 view .LVU203
 835 0002 FEE7     		b	.L40
 836              		.cfi_endproc
 837              	.LFE150:
 839              		.section	.text.MX_TIM2_Init,"ax",%progbits
 840              		.align	1
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 845              	MX_TIM2_Init:
 846              	.LFB144:
 333:Core/Src/main.c **** 
 847              		.loc 1 333 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 24
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851 0000 00B5     		push	{lr}
 852              		.cfi_def_cfa_offset 4
 853              		.cfi_offset 14, -4
 854 0002 87B0     		sub	sp, sp, #28
 855              		.cfi_def_cfa_offset 32
 339:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 856              		.loc 1 339 3 view .LVU205
 339:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 857              		.loc 1 339 26 is_stmt 0 view .LVU206
 858 0004 0023     		movs	r3, #0
 859 0006 0293     		str	r3, [sp, #8]
 860 0008 0393     		str	r3, [sp, #12]
 861 000a 0493     		str	r3, [sp, #16]
 862 000c 0593     		str	r3, [sp, #20]
 340:Core/Src/main.c **** 
 863              		.loc 1 340 3 is_stmt 1 view .LVU207
 340:Core/Src/main.c **** 
 864              		.loc 1 340 27 is_stmt 0 view .LVU208
 865 000e 0093     		str	r3, [sp]
 866 0010 0193     		str	r3, [sp, #4]
 345:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 867              		.loc 1 345 3 is_stmt 1 view .LVU209
 345:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 868              		.loc 1 345 18 is_stmt 0 view .LVU210
 869 0012 1448     		ldr	r0, .L49
 870 0014 4FF08042 		mov	r2, #1073741824
 871 0018 0260     		str	r2, [r0]
 346:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 872              		.loc 1 346 3 is_stmt 1 view .LVU211
 346:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 873              		.loc 1 346 24 is_stmt 0 view .LVU212
 874 001a 40F2E732 		movw	r2, #999
 875 001e 4260     		str	r2, [r0, #4]
 347:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 876              		.loc 1 347 3 is_stmt 1 view .LVU213
 347:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 877              		.loc 1 347 26 is_stmt 0 view .LVU214
 878 0020 8360     		str	r3, [r0, #8]
ARM GAS  C:\Temp\ccEkXWoY.s 			page 44


 348:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 879              		.loc 1 348 3 is_stmt 1 view .LVU215
 348:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 880              		.loc 1 348 21 is_stmt 0 view .LVU216
 881 0022 C260     		str	r2, [r0, #12]
 349:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 882              		.loc 1 349 3 is_stmt 1 view .LVU217
 349:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 883              		.loc 1 349 28 is_stmt 0 view .LVU218
 884 0024 0361     		str	r3, [r0, #16]
 350:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 885              		.loc 1 350 3 is_stmt 1 view .LVU219
 350:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 886              		.loc 1 350 32 is_stmt 0 view .LVU220
 887 0026 8023     		movs	r3, #128
 888 0028 8361     		str	r3, [r0, #24]
 351:Core/Src/main.c ****   {
 889              		.loc 1 351 3 is_stmt 1 view .LVU221
 351:Core/Src/main.c ****   {
 890              		.loc 1 351 7 is_stmt 0 view .LVU222
 891 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 892              	.LVL50:
 351:Core/Src/main.c ****   {
 893              		.loc 1 351 6 view .LVU223
 894 002e 90B9     		cbnz	r0, .L46
 355:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 895              		.loc 1 355 3 is_stmt 1 view .LVU224
 355:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 896              		.loc 1 355 34 is_stmt 0 view .LVU225
 897 0030 4FF48053 		mov	r3, #4096
 898 0034 0293     		str	r3, [sp, #8]
 356:Core/Src/main.c ****   {
 899              		.loc 1 356 3 is_stmt 1 view .LVU226
 356:Core/Src/main.c ****   {
 900              		.loc 1 356 7 is_stmt 0 view .LVU227
 901 0036 02A9     		add	r1, sp, #8
 902 0038 0A48     		ldr	r0, .L49
 903 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 904              	.LVL51:
 356:Core/Src/main.c ****   {
 905              		.loc 1 356 6 view .LVU228
 906 003e 60B9     		cbnz	r0, .L47
 360:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 907              		.loc 1 360 3 is_stmt 1 view .LVU229
 360:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 908              		.loc 1 360 37 is_stmt 0 view .LVU230
 909 0040 0023     		movs	r3, #0
 910 0042 0093     		str	r3, [sp]
 361:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 911              		.loc 1 361 3 is_stmt 1 view .LVU231
 361:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 912              		.loc 1 361 33 is_stmt 0 view .LVU232
 913 0044 0193     		str	r3, [sp, #4]
 362:Core/Src/main.c ****   {
 914              		.loc 1 362 3 is_stmt 1 view .LVU233
 362:Core/Src/main.c ****   {
 915              		.loc 1 362 7 is_stmt 0 view .LVU234
ARM GAS  C:\Temp\ccEkXWoY.s 			page 45


 916 0046 6946     		mov	r1, sp
 917 0048 0648     		ldr	r0, .L49
 918 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 919              	.LVL52:
 362:Core/Src/main.c ****   {
 920              		.loc 1 362 6 view .LVU235
 921 004e 30B9     		cbnz	r0, .L48
 370:Core/Src/main.c **** 
 922              		.loc 1 370 1 view .LVU236
 923 0050 07B0     		add	sp, sp, #28
 924              		.cfi_remember_state
 925              		.cfi_def_cfa_offset 4
 926              		@ sp needed
 927 0052 5DF804FB 		ldr	pc, [sp], #4
 928              	.L46:
 929              		.cfi_restore_state
 353:Core/Src/main.c ****   }
 930              		.loc 1 353 5 is_stmt 1 view .LVU237
 931 0056 FFF7FEFF 		bl	Error_Handler
 932              	.LVL53:
 933              	.L47:
 358:Core/Src/main.c ****   }
 934              		.loc 1 358 5 view .LVU238
 935 005a FFF7FEFF 		bl	Error_Handler
 936              	.LVL54:
 937              	.L48:
 364:Core/Src/main.c ****   }
 938              		.loc 1 364 5 view .LVU239
 939 005e FFF7FEFF 		bl	Error_Handler
 940              	.LVL55:
 941              	.L50:
 942 0062 00BF     		.align	2
 943              	.L49:
 944 0064 00000000 		.word	htim2
 945              		.cfi_endproc
 946              	.LFE144:
 948              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 949              		.align	1
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 954              	MX_USART2_UART_Init:
 955              	.LFB146:
 423:Core/Src/main.c **** 
 956              		.loc 1 423 1 view -0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960 0000 08B5     		push	{r3, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 3, -8
 963              		.cfi_offset 14, -4
 432:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 964              		.loc 1 432 3 view .LVU241
 432:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 965              		.loc 1 432 19 is_stmt 0 view .LVU242
 966 0002 0D48     		ldr	r0, .L55
ARM GAS  C:\Temp\ccEkXWoY.s 			page 46


 967 0004 0D4B     		ldr	r3, .L55+4
 968 0006 0360     		str	r3, [r0]
 433:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 969              		.loc 1 433 3 is_stmt 1 view .LVU243
 433:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 970              		.loc 1 433 24 is_stmt 0 view .LVU244
 971 0008 4FF4E113 		mov	r3, #1843200
 972 000c 4360     		str	r3, [r0, #4]
 434:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 973              		.loc 1 434 3 is_stmt 1 view .LVU245
 434:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 974              		.loc 1 434 26 is_stmt 0 view .LVU246
 975 000e 4FF48053 		mov	r3, #4096
 976 0012 8360     		str	r3, [r0, #8]
 435:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 977              		.loc 1 435 3 is_stmt 1 view .LVU247
 435:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 978              		.loc 1 435 24 is_stmt 0 view .LVU248
 979 0014 4FF40053 		mov	r3, #8192
 980 0018 C360     		str	r3, [r0, #12]
 436:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 981              		.loc 1 436 3 is_stmt 1 view .LVU249
 436:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 982              		.loc 1 436 22 is_stmt 0 view .LVU250
 983 001a 4FF48063 		mov	r3, #1024
 984 001e 0361     		str	r3, [r0, #16]
 437:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 985              		.loc 1 437 3 is_stmt 1 view .LVU251
 437:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 986              		.loc 1 437 20 is_stmt 0 view .LVU252
 987 0020 0C23     		movs	r3, #12
 988 0022 4361     		str	r3, [r0, #20]
 438:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 989              		.loc 1 438 3 is_stmt 1 view .LVU253
 438:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 990              		.loc 1 438 25 is_stmt 0 view .LVU254
 991 0024 0023     		movs	r3, #0
 992 0026 8361     		str	r3, [r0, #24]
 439:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 993              		.loc 1 439 3 is_stmt 1 view .LVU255
 439:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 994              		.loc 1 439 28 is_stmt 0 view .LVU256
 995 0028 C361     		str	r3, [r0, #28]
 440:Core/Src/main.c ****   {
 996              		.loc 1 440 3 is_stmt 1 view .LVU257
 440:Core/Src/main.c ****   {
 997              		.loc 1 440 7 is_stmt 0 view .LVU258
 998 002a FFF7FEFF 		bl	HAL_UART_Init
 999              	.LVL56:
 440:Core/Src/main.c ****   {
 1000              		.loc 1 440 6 view .LVU259
 1001 002e 00B9     		cbnz	r0, .L54
 448:Core/Src/main.c **** 
 1002              		.loc 1 448 1 view .LVU260
 1003 0030 08BD     		pop	{r3, pc}
 1004              	.L54:
 442:Core/Src/main.c ****   }
ARM GAS  C:\Temp\ccEkXWoY.s 			page 47


 1005              		.loc 1 442 5 is_stmt 1 view .LVU261
 1006 0032 FFF7FEFF 		bl	Error_Handler
 1007              	.LVL57:
 1008              	.L56:
 1009 0036 00BF     		.align	2
 1010              	.L55:
 1011 0038 00000000 		.word	huart2
 1012 003c 00440040 		.word	1073759232
 1013              		.cfi_endproc
 1014              	.LFE146:
 1016              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1017              		.align	1
 1018              		.syntax unified
 1019              		.thumb
 1020              		.thumb_func
 1022              	MX_TIM5_Init:
 1023              	.LFB145:
 378:Core/Src/main.c **** 
 1024              		.loc 1 378 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 24
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028 0000 00B5     		push	{lr}
 1029              		.cfi_def_cfa_offset 4
 1030              		.cfi_offset 14, -4
 1031 0002 87B0     		sub	sp, sp, #28
 1032              		.cfi_def_cfa_offset 32
 384:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1033              		.loc 1 384 3 view .LVU263
 384:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1034              		.loc 1 384 26 is_stmt 0 view .LVU264
 1035 0004 0023     		movs	r3, #0
 1036 0006 0293     		str	r3, [sp, #8]
 1037 0008 0393     		str	r3, [sp, #12]
 1038 000a 0493     		str	r3, [sp, #16]
 1039 000c 0593     		str	r3, [sp, #20]
 385:Core/Src/main.c **** 
 1040              		.loc 1 385 3 is_stmt 1 view .LVU265
 385:Core/Src/main.c **** 
 1041              		.loc 1 385 27 is_stmt 0 view .LVU266
 1042 000e 0093     		str	r3, [sp]
 1043 0010 0193     		str	r3, [sp, #4]
 390:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
 1044              		.loc 1 390 3 is_stmt 1 view .LVU267
 390:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
 1045              		.loc 1 390 18 is_stmt 0 view .LVU268
 1046 0012 1348     		ldr	r0, .L65
 1047 0014 134A     		ldr	r2, .L65+4
 1048 0016 0260     		str	r2, [r0]
 391:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1049              		.loc 1 391 3 is_stmt 1 view .LVU269
 391:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1050              		.loc 1 391 24 is_stmt 0 view .LVU270
 1051 0018 4360     		str	r3, [r0, #4]
 392:Core/Src/main.c ****   htim5.Init.Period = 4294967295;
 1052              		.loc 1 392 3 is_stmt 1 view .LVU271
 392:Core/Src/main.c ****   htim5.Init.Period = 4294967295;
ARM GAS  C:\Temp\ccEkXWoY.s 			page 48


 1053              		.loc 1 392 26 is_stmt 0 view .LVU272
 1054 001a 8360     		str	r3, [r0, #8]
 393:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1055              		.loc 1 393 3 is_stmt 1 view .LVU273
 393:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1056              		.loc 1 393 21 is_stmt 0 view .LVU274
 1057 001c 4FF0FF32 		mov	r2, #-1
 1058 0020 C260     		str	r2, [r0, #12]
 394:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1059              		.loc 1 394 3 is_stmt 1 view .LVU275
 394:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1060              		.loc 1 394 28 is_stmt 0 view .LVU276
 1061 0022 0361     		str	r3, [r0, #16]
 395:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 1062              		.loc 1 395 3 is_stmt 1 view .LVU277
 395:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 1063              		.loc 1 395 32 is_stmt 0 view .LVU278
 1064 0024 8023     		movs	r3, #128
 1065 0026 8361     		str	r3, [r0, #24]
 396:Core/Src/main.c ****   {
 1066              		.loc 1 396 3 is_stmt 1 view .LVU279
 396:Core/Src/main.c ****   {
 1067              		.loc 1 396 7 is_stmt 0 view .LVU280
 1068 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1069              	.LVL58:
 396:Core/Src/main.c ****   {
 1070              		.loc 1 396 6 view .LVU281
 1071 002c 90B9     		cbnz	r0, .L62
 400:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 1072              		.loc 1 400 3 is_stmt 1 view .LVU282
 400:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 1073              		.loc 1 400 34 is_stmt 0 view .LVU283
 1074 002e 4FF48053 		mov	r3, #4096
 1075 0032 0293     		str	r3, [sp, #8]
 401:Core/Src/main.c ****   {
 1076              		.loc 1 401 3 is_stmt 1 view .LVU284
 401:Core/Src/main.c ****   {
 1077              		.loc 1 401 7 is_stmt 0 view .LVU285
 1078 0034 02A9     		add	r1, sp, #8
 1079 0036 0A48     		ldr	r0, .L65
 1080 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1081              	.LVL59:
 401:Core/Src/main.c ****   {
 1082              		.loc 1 401 6 view .LVU286
 1083 003c 60B9     		cbnz	r0, .L63
 405:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1084              		.loc 1 405 3 is_stmt 1 view .LVU287
 405:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1085              		.loc 1 405 37 is_stmt 0 view .LVU288
 1086 003e 0023     		movs	r3, #0
 1087 0040 0093     		str	r3, [sp]
 406:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1088              		.loc 1 406 3 is_stmt 1 view .LVU289
 406:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1089              		.loc 1 406 33 is_stmt 0 view .LVU290
 1090 0042 0193     		str	r3, [sp, #4]
 407:Core/Src/main.c ****   {
ARM GAS  C:\Temp\ccEkXWoY.s 			page 49


 1091              		.loc 1 407 3 is_stmt 1 view .LVU291
 407:Core/Src/main.c ****   {
 1092              		.loc 1 407 7 is_stmt 0 view .LVU292
 1093 0044 6946     		mov	r1, sp
 1094 0046 0648     		ldr	r0, .L65
 1095 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1096              	.LVL60:
 407:Core/Src/main.c ****   {
 1097              		.loc 1 407 6 view .LVU293
 1098 004c 30B9     		cbnz	r0, .L64
 415:Core/Src/main.c **** 
 1099              		.loc 1 415 1 view .LVU294
 1100 004e 07B0     		add	sp, sp, #28
 1101              		.cfi_remember_state
 1102              		.cfi_def_cfa_offset 4
 1103              		@ sp needed
 1104 0050 5DF804FB 		ldr	pc, [sp], #4
 1105              	.L62:
 1106              		.cfi_restore_state
 398:Core/Src/main.c ****   }
 1107              		.loc 1 398 5 is_stmt 1 view .LVU295
 1108 0054 FFF7FEFF 		bl	Error_Handler
 1109              	.LVL61:
 1110              	.L63:
 403:Core/Src/main.c ****   }
 1111              		.loc 1 403 5 view .LVU296
 1112 0058 FFF7FEFF 		bl	Error_Handler
 1113              	.LVL62:
 1114              	.L64:
 409:Core/Src/main.c ****   }
 1115              		.loc 1 409 5 view .LVU297
 1116 005c FFF7FEFF 		bl	Error_Handler
 1117              	.LVL63:
 1118              	.L66:
 1119              		.align	2
 1120              	.L65:
 1121 0060 00000000 		.word	htim5
 1122 0064 000C0040 		.word	1073744896
 1123              		.cfi_endproc
 1124              	.LFE145:
 1126              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1127              		.align	1
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
 1132              	MX_I2C1_Init:
 1133              	.LFB143:
 299:Core/Src/main.c **** 
 1134              		.loc 1 299 1 view -0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138 0000 08B5     		push	{r3, lr}
 1139              		.cfi_def_cfa_offset 8
 1140              		.cfi_offset 3, -8
 1141              		.cfi_offset 14, -4
 308:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
ARM GAS  C:\Temp\ccEkXWoY.s 			page 50


 1142              		.loc 1 308 3 view .LVU299
 308:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 1143              		.loc 1 308 18 is_stmt 0 view .LVU300
 1144 0002 0A48     		ldr	r0, .L71
 1145 0004 0A4B     		ldr	r3, .L71+4
 1146 0006 0360     		str	r3, [r0]
 309:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1147              		.loc 1 309 3 is_stmt 1 view .LVU301
 309:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1148              		.loc 1 309 25 is_stmt 0 view .LVU302
 1149 0008 0A4B     		ldr	r3, .L71+8
 1150 000a 4360     		str	r3, [r0, #4]
 310:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1151              		.loc 1 310 3 is_stmt 1 view .LVU303
 310:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1152              		.loc 1 310 24 is_stmt 0 view .LVU304
 1153 000c 0023     		movs	r3, #0
 1154 000e 8360     		str	r3, [r0, #8]
 311:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1155              		.loc 1 311 3 is_stmt 1 view .LVU305
 311:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1156              		.loc 1 311 26 is_stmt 0 view .LVU306
 1157 0010 C360     		str	r3, [r0, #12]
 312:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1158              		.loc 1 312 3 is_stmt 1 view .LVU307
 312:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1159              		.loc 1 312 29 is_stmt 0 view .LVU308
 1160 0012 4FF48042 		mov	r2, #16384
 1161 0016 0261     		str	r2, [r0, #16]
 313:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1162              		.loc 1 313 3 is_stmt 1 view .LVU309
 313:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1163              		.loc 1 313 30 is_stmt 0 view .LVU310
 1164 0018 4361     		str	r3, [r0, #20]
 314:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1165              		.loc 1 314 3 is_stmt 1 view .LVU311
 314:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1166              		.loc 1 314 26 is_stmt 0 view .LVU312
 1167 001a 8361     		str	r3, [r0, #24]
 315:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1168              		.loc 1 315 3 is_stmt 1 view .LVU313
 315:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1169              		.loc 1 315 30 is_stmt 0 view .LVU314
 1170 001c C361     		str	r3, [r0, #28]
 316:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1171              		.loc 1 316 3 is_stmt 1 view .LVU315
 316:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1172              		.loc 1 316 28 is_stmt 0 view .LVU316
 1173 001e 0362     		str	r3, [r0, #32]
 317:Core/Src/main.c ****   {
 1174              		.loc 1 317 3 is_stmt 1 view .LVU317
 317:Core/Src/main.c ****   {
 1175              		.loc 1 317 7 is_stmt 0 view .LVU318
 1176 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1177              	.LVL64:
 317:Core/Src/main.c ****   {
 1178              		.loc 1 317 6 view .LVU319
ARM GAS  C:\Temp\ccEkXWoY.s 			page 51


 1179 0024 00B9     		cbnz	r0, .L70
 325:Core/Src/main.c **** 
 1180              		.loc 1 325 1 view .LVU320
 1181 0026 08BD     		pop	{r3, pc}
 1182              	.L70:
 319:Core/Src/main.c ****   }
 1183              		.loc 1 319 5 is_stmt 1 view .LVU321
 1184 0028 FFF7FEFF 		bl	Error_Handler
 1185              	.LVL65:
 1186              	.L72:
 1187              		.align	2
 1188              	.L71:
 1189 002c 00000000 		.word	hi2c1
 1190 0030 00540040 		.word	1073763328
 1191 0034 801A0600 		.word	400000
 1192              		.cfi_endproc
 1193              	.LFE143:
 1195              		.section	.text.SystemClock_Config,"ax",%progbits
 1196              		.align	1
 1197              		.global	SystemClock_Config
 1198              		.syntax unified
 1199              		.thumb
 1200              		.thumb_func
 1202              	SystemClock_Config:
 1203              	.LFB142:
 252:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1204              		.loc 1 252 1 view -0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 80
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208 0000 00B5     		push	{lr}
 1209              		.cfi_def_cfa_offset 4
 1210              		.cfi_offset 14, -4
 1211 0002 95B0     		sub	sp, sp, #84
 1212              		.cfi_def_cfa_offset 88
 253:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1213              		.loc 1 253 3 view .LVU323
 253:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1214              		.loc 1 253 22 is_stmt 0 view .LVU324
 1215 0004 3022     		movs	r2, #48
 1216 0006 0021     		movs	r1, #0
 1217 0008 08A8     		add	r0, sp, #32
 1218 000a FFF7FEFF 		bl	memset
 1219              	.LVL66:
 254:Core/Src/main.c **** 
 1220              		.loc 1 254 3 is_stmt 1 view .LVU325
 254:Core/Src/main.c **** 
 1221              		.loc 1 254 22 is_stmt 0 view .LVU326
 1222 000e 0023     		movs	r3, #0
 1223 0010 0393     		str	r3, [sp, #12]
 1224 0012 0493     		str	r3, [sp, #16]
 1225 0014 0593     		str	r3, [sp, #20]
 1226 0016 0693     		str	r3, [sp, #24]
 1227 0018 0793     		str	r3, [sp, #28]
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1228              		.loc 1 258 3 is_stmt 1 view .LVU327
 1229              	.LBB13:
ARM GAS  C:\Temp\ccEkXWoY.s 			page 52


 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1230              		.loc 1 258 3 view .LVU328
 1231 001a 0193     		str	r3, [sp, #4]
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1232              		.loc 1 258 3 view .LVU329
 1233 001c 1E4A     		ldr	r2, .L79
 1234 001e 116C     		ldr	r1, [r2, #64]
 1235 0020 41F08051 		orr	r1, r1, #268435456
 1236 0024 1164     		str	r1, [r2, #64]
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1237              		.loc 1 258 3 view .LVU330
 1238 0026 126C     		ldr	r2, [r2, #64]
 1239 0028 02F08052 		and	r2, r2, #268435456
 1240 002c 0192     		str	r2, [sp, #4]
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1241              		.loc 1 258 3 view .LVU331
 1242 002e 019A     		ldr	r2, [sp, #4]
 1243              	.LBE13:
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1244              		.loc 1 258 3 view .LVU332
 259:Core/Src/main.c **** 
 1245              		.loc 1 259 3 view .LVU333
 1246              	.LBB14:
 259:Core/Src/main.c **** 
 1247              		.loc 1 259 3 view .LVU334
 1248 0030 0293     		str	r3, [sp, #8]
 259:Core/Src/main.c **** 
 1249              		.loc 1 259 3 view .LVU335
 1250 0032 1A4A     		ldr	r2, .L79+4
 1251 0034 1168     		ldr	r1, [r2]
 1252 0036 41F44041 		orr	r1, r1, #49152
 1253 003a 1160     		str	r1, [r2]
 259:Core/Src/main.c **** 
 1254              		.loc 1 259 3 view .LVU336
 1255 003c 1268     		ldr	r2, [r2]
 1256 003e 02F44042 		and	r2, r2, #49152
 1257 0042 0292     		str	r2, [sp, #8]
 259:Core/Src/main.c **** 
 1258              		.loc 1 259 3 view .LVU337
 1259 0044 029A     		ldr	r2, [sp, #8]
 1260              	.LBE14:
 259:Core/Src/main.c **** 
 1261              		.loc 1 259 3 view .LVU338
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1262              		.loc 1 264 3 view .LVU339
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1263              		.loc 1 264 36 is_stmt 0 view .LVU340
 1264 0046 0222     		movs	r2, #2
 1265 0048 0892     		str	r2, [sp, #32]
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1266              		.loc 1 265 3 is_stmt 1 view .LVU341
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1267              		.loc 1 265 30 is_stmt 0 view .LVU342
 1268 004a 0121     		movs	r1, #1
 1269 004c 0B91     		str	r1, [sp, #44]
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1270              		.loc 1 266 3 is_stmt 1 view .LVU343
ARM GAS  C:\Temp\ccEkXWoY.s 			page 53


 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1271              		.loc 1 266 41 is_stmt 0 view .LVU344
 1272 004e 1021     		movs	r1, #16
 1273 0050 0C91     		str	r1, [sp, #48]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1274              		.loc 1 267 3 is_stmt 1 view .LVU345
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1275              		.loc 1 267 34 is_stmt 0 view .LVU346
 1276 0052 0E92     		str	r2, [sp, #56]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1277              		.loc 1 268 3 is_stmt 1 view .LVU347
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1278              		.loc 1 268 35 is_stmt 0 view .LVU348
 1279 0054 0F93     		str	r3, [sp, #60]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 84;
 1280              		.loc 1 269 3 is_stmt 1 view .LVU349
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 84;
 1281              		.loc 1 269 30 is_stmt 0 view .LVU350
 1282 0056 0823     		movs	r3, #8
 1283 0058 1093     		str	r3, [sp, #64]
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1284              		.loc 1 270 3 is_stmt 1 view .LVU351
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1285              		.loc 1 270 30 is_stmt 0 view .LVU352
 1286 005a 5423     		movs	r3, #84
 1287 005c 1193     		str	r3, [sp, #68]
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1288              		.loc 1 271 3 is_stmt 1 view .LVU353
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1289              		.loc 1 271 30 is_stmt 0 view .LVU354
 1290 005e 1292     		str	r2, [sp, #72]
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1291              		.loc 1 272 3 is_stmt 1 view .LVU355
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1292              		.loc 1 272 30 is_stmt 0 view .LVU356
 1293 0060 0423     		movs	r3, #4
 1294 0062 1393     		str	r3, [sp, #76]
 273:Core/Src/main.c ****   {
 1295              		.loc 1 273 3 is_stmt 1 view .LVU357
 273:Core/Src/main.c ****   {
 1296              		.loc 1 273 7 is_stmt 0 view .LVU358
 1297 0064 08A8     		add	r0, sp, #32
 1298 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1299              	.LVL67:
 273:Core/Src/main.c ****   {
 1300              		.loc 1 273 6 view .LVU359
 1301 006a 80B9     		cbnz	r0, .L77
 280:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1302              		.loc 1 280 3 is_stmt 1 view .LVU360
 280:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1303              		.loc 1 280 31 is_stmt 0 view .LVU361
 1304 006c 0F23     		movs	r3, #15
 1305 006e 0393     		str	r3, [sp, #12]
 282:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1306              		.loc 1 282 3 is_stmt 1 view .LVU362
 282:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1307              		.loc 1 282 34 is_stmt 0 view .LVU363
ARM GAS  C:\Temp\ccEkXWoY.s 			page 54


 1308 0070 0221     		movs	r1, #2
 1309 0072 0491     		str	r1, [sp, #16]
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1310              		.loc 1 283 3 is_stmt 1 view .LVU364
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1311              		.loc 1 283 35 is_stmt 0 view .LVU365
 1312 0074 0023     		movs	r3, #0
 1313 0076 0593     		str	r3, [sp, #20]
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1314              		.loc 1 284 3 is_stmt 1 view .LVU366
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1315              		.loc 1 284 36 is_stmt 0 view .LVU367
 1316 0078 4FF48052 		mov	r2, #4096
 1317 007c 0692     		str	r2, [sp, #24]
 285:Core/Src/main.c **** 
 1318              		.loc 1 285 3 is_stmt 1 view .LVU368
 285:Core/Src/main.c **** 
 1319              		.loc 1 285 36 is_stmt 0 view .LVU369
 1320 007e 0793     		str	r3, [sp, #28]
 287:Core/Src/main.c ****   {
 1321              		.loc 1 287 3 is_stmt 1 view .LVU370
 287:Core/Src/main.c ****   {
 1322              		.loc 1 287 7 is_stmt 0 view .LVU371
 1323 0080 03A8     		add	r0, sp, #12
 1324 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1325              	.LVL68:
 287:Core/Src/main.c ****   {
 1326              		.loc 1 287 6 view .LVU372
 1327 0086 20B9     		cbnz	r0, .L78
 291:Core/Src/main.c **** 
 1328              		.loc 1 291 1 view .LVU373
 1329 0088 15B0     		add	sp, sp, #84
 1330              		.cfi_remember_state
 1331              		.cfi_def_cfa_offset 4
 1332              		@ sp needed
 1333 008a 5DF804FB 		ldr	pc, [sp], #4
 1334              	.L77:
 1335              		.cfi_restore_state
 275:Core/Src/main.c ****   }
 1336              		.loc 1 275 5 is_stmt 1 view .LVU374
 1337 008e FFF7FEFF 		bl	Error_Handler
 1338              	.LVL69:
 1339              	.L78:
 289:Core/Src/main.c ****   }
 1340              		.loc 1 289 5 view .LVU375
 1341 0092 FFF7FEFF 		bl	Error_Handler
 1342              	.LVL70:
 1343              	.L80:
 1344 0096 00BF     		.align	2
 1345              	.L79:
 1346 0098 00380240 		.word	1073887232
 1347 009c 00700040 		.word	1073770496
 1348              		.cfi_endproc
 1349              	.LFE142:
 1351              		.section	.text.main,"ax",%progbits
 1352              		.align	1
 1353              		.global	main
ARM GAS  C:\Temp\ccEkXWoY.s 			page 55


 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1358              	main:
 1359              	.LFB141:
 179:Core/Src/main.c **** 
 1360              		.loc 1 179 1 view -0
 1361              		.cfi_startproc
 1362              		@ Volatile: function does not return.
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365 0000 08B5     		push	{r3, lr}
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 3, -8
 1368              		.cfi_offset 14, -4
 188:Core/Src/main.c **** 
 1369              		.loc 1 188 3 view .LVU377
 1370 0002 FFF7FEFF 		bl	HAL_Init
 1371              	.LVL71:
 195:Core/Src/main.c **** 
 1372              		.loc 1 195 3 view .LVU378
 1373 0006 FFF7FEFF 		bl	SystemClock_Config
 1374              	.LVL72:
 202:Core/Src/main.c ****   MX_DMA_Init();
 1375              		.loc 1 202 3 view .LVU379
 1376 000a FFF7FEFF 		bl	MX_GPIO_Init
 1377              	.LVL73:
 203:Core/Src/main.c ****   MX_TIM2_Init();
 1378              		.loc 1 203 3 view .LVU380
 1379 000e FFF7FEFF 		bl	MX_DMA_Init
 1380              	.LVL74:
 204:Core/Src/main.c ****   MX_USART2_UART_Init();
 1381              		.loc 1 204 3 view .LVU381
 1382 0012 FFF7FEFF 		bl	MX_TIM2_Init
 1383              	.LVL75:
 205:Core/Src/main.c ****   MX_TIM5_Init();
 1384              		.loc 1 205 3 view .LVU382
 1385 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 1386              	.LVL76:
 206:Core/Src/main.c ****   MX_I2C1_Init();
 1387              		.loc 1 206 3 view .LVU383
 1388 001a FFF7FEFF 		bl	MX_TIM5_Init
 1389              	.LVL77:
 207:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1390              		.loc 1 207 3 view .LVU384
 1391 001e FFF7FEFF 		bl	MX_I2C1_Init
 1392              	.LVL78:
 210:Core/Src/main.c ****     initialCalibration();
 1393              		.loc 1 210 3 view .LVU385
 1394              	.L82:
 210:Core/Src/main.c ****     initialCalibration();
 1395              		.loc 1 210 21 view .LVU386
 1396 0022 1D4B     		ldr	r3, .L88
 1397 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1398 0026 012B     		cmp	r3, #1
 1399 0028 02D0     		beq	.L87
 211:Core/Src/main.c ****   }
ARM GAS  C:\Temp\ccEkXWoY.s 			page 56


 1400              		.loc 1 211 5 view .LVU387
 1401 002a FFF7FEFF 		bl	initialCalibration
 1402              	.LVL79:
 1403 002e F8E7     		b	.L82
 1404              	.L87:
 214:Core/Src/main.c ****   
 1405              		.loc 1 214 3 view .LVU388
 1406 0030 FFF7FEFF 		bl	XNUCLEO53L1A1_Init
 1407              	.LVL80:
 216:Core/Src/main.c ****   TOF_centre_result.Address = ToF_Centre;
 1408              		.loc 1 216 3 view .LVU389
 216:Core/Src/main.c ****   TOF_centre_result.Address = ToF_Centre;
 1409              		.loc 1 216 27 is_stmt 0 view .LVU390
 1410 0034 5421     		movs	r1, #84
 1411 0036 194B     		ldr	r3, .L88+4
 1412 0038 1980     		strh	r1, [r3]	@ movhi
 217:Core/Src/main.c ****   TOF_right_result.Address = ToF_Right;
 1413              		.loc 1 217 3 is_stmt 1 view .LVU391
 217:Core/Src/main.c ****   TOF_right_result.Address = ToF_Right;
 1414              		.loc 1 217 29 is_stmt 0 view .LVU392
 1415 003a 5625     		movs	r5, #86
 1416 003c 184B     		ldr	r3, .L88+8
 1417 003e 1D80     		strh	r5, [r3]	@ movhi
 218:Core/Src/main.c **** 
 1418              		.loc 1 218 3 is_stmt 1 view .LVU393
 218:Core/Src/main.c **** 
 1419              		.loc 1 218 28 is_stmt 0 view .LVU394
 1420 0040 5824     		movs	r4, #88
 1421 0042 184B     		ldr	r3, .L88+12
 1422 0044 1C80     		strh	r4, [r3]	@ movhi
 220:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_CENTER, ToF_Centre);
 1423              		.loc 1 220 3 is_stmt 1 view .LVU395
 1424 0046 0020     		movs	r0, #0
 1425 0048 FFF7FEFF 		bl	initVL53L1A1
 1426              	.LVL81:
 221:Core/Src/main.c ****   initVL53L1A1(XNUCLEO53L1A1_DEV_RIGHT,  ToF_Right);
 1427              		.loc 1 221 3 view .LVU396
 1428 004c 2946     		mov	r1, r5
 1429 004e 0120     		movs	r0, #1
 1430 0050 FFF7FEFF 		bl	initVL53L1A1
 1431              	.LVL82:
 222:Core/Src/main.c **** 
 1432              		.loc 1 222 3 view .LVU397
 1433 0054 2146     		mov	r1, r4
 1434 0056 0220     		movs	r0, #2
 1435 0058 FFF7FEFF 		bl	initVL53L1A1
 1436              	.LVL83:
 224:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 1437              		.loc 1 224 3 view .LVU398
 1438 005c 124B     		ldr	r3, .L88+16
 1439 005e 93ED000A 		vldr.32	s0, [r3]	@ int
 1440 0062 4FF08040 		mov	r0, #1073741824
 1441 0066 B8EEC00A 		vcvt.f32.s32	s0, s0
 1442 006a FFF7FEFF 		bl	configureTimer
 1443              	.LVL84:
 225:Core/Src/main.c ****   /* USER CODE END 2 */
 1444              		.loc 1 225 3 view .LVU399
ARM GAS  C:\Temp\ccEkXWoY.s 			page 57


 1445 006e 0F48     		ldr	r0, .L88+20
 1446 0070 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1447              	.LVL85:
 1448              	.L84:
 231:Core/Src/main.c ****   {
 1449              		.loc 1 231 3 view .LVU400
 233:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 1450              		.loc 1 233 5 view .LVU401
 233:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 1451              		.loc 1 233 22 is_stmt 0 view .LVU402
 1452 0074 0E4B     		ldr	r3, .L88+24
 1453 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 233:Core/Src/main.c ****       getVL53L1A1(&TOF_left_result);
 1454              		.loc 1 233 8 view .LVU403
 1455 0078 012B     		cmp	r3, #1
 1456 007a FBD1     		bne	.L84
 234:Core/Src/main.c ****       getVL53L1A1(&TOF_centre_result);
 1457              		.loc 1 234 7 is_stmt 1 view .LVU404
 1458 007c 0748     		ldr	r0, .L88+4
 1459 007e FFF7FEFF 		bl	getVL53L1A1
 1460              	.LVL86:
 235:Core/Src/main.c ****       getVL53L1A1(&TOF_right_result);
 1461              		.loc 1 235 7 view .LVU405
 1462 0082 0748     		ldr	r0, .L88+8
 1463 0084 FFF7FEFF 		bl	getVL53L1A1
 1464              	.LVL87:
 236:Core/Src/main.c ****       clearToGetL1 = 0;
 1465              		.loc 1 236 7 view .LVU406
 1466 0088 0648     		ldr	r0, .L88+12
 1467 008a FFF7FEFF 		bl	getVL53L1A1
 1468              	.LVL88:
 237:Core/Src/main.c ****     }
 1469              		.loc 1 237 7 view .LVU407
 237:Core/Src/main.c ****     }
 1470              		.loc 1 237 20 is_stmt 0 view .LVU408
 1471 008e 084B     		ldr	r3, .L88+24
 1472 0090 0022     		movs	r2, #0
 1473 0092 1A70     		strb	r2, [r3]
 1474 0094 EEE7     		b	.L84
 1475              	.L89:
 1476 0096 00BF     		.align	2
 1477              	.L88:
 1478 0098 00000000 		.word	calibrated
 1479 009c 00000000 		.word	TOF_left_result
 1480 00a0 00000000 		.word	TOF_centre_result
 1481 00a4 00000000 		.word	TOF_right_result
 1482 00a8 00000000 		.word	tof_odr
 1483 00ac 00000000 		.word	htim2
 1484 00b0 00000000 		.word	clearToGetL1
 1485              		.cfi_endproc
 1486              	.LFE141:
 1488              		.global	IntCount
 1489              		.section	.bss.IntCount,"aw",%nobits
 1490              		.align	2
 1493              	IntCount:
 1494 0000 00000000 		.space	4
 1495              		.global	TOF_right_result
ARM GAS  C:\Temp\ccEkXWoY.s 			page 58


 1496              		.section	.bss.TOF_right_result,"aw",%nobits
 1497              		.align	2
 1500              	TOF_right_result:
 1501 0000 00000000 		.space	20
 1501      00000000 
 1501      00000000 
 1501      00000000 
 1501      00000000 
 1502              		.global	TOF_centre_result
 1503              		.section	.bss.TOF_centre_result,"aw",%nobits
 1504              		.align	2
 1507              	TOF_centre_result:
 1508 0000 00000000 		.space	20
 1508      00000000 
 1508      00000000 
 1508      00000000 
 1508      00000000 
 1509              		.global	TOF_left_result
 1510              		.section	.bss.TOF_left_result,"aw",%nobits
 1511              		.align	2
 1514              	TOF_left_result:
 1515 0000 00000000 		.space	20
 1515      00000000 
 1515      00000000 
 1515      00000000 
 1515      00000000 
 1516              		.global	pollingPeriod
 1517              		.section	.data.pollingPeriod,"aw"
 1518              		.align	2
 1521              	pollingPeriod:
 1522 0000 FA000000 		.word	250
 1523              		.global	timingBudget
 1524              		.section	.data.timingBudget,"aw"
 1525              		.align	1
 1528              	timingBudget:
 1529 0000 1E00     		.short	30
 1530              		.global	rangingProfile
 1531              		.section	.data.rangingProfile,"aw"
 1532              		.align	1
 1535              	rangingProfile:
 1536 0000 0100     		.short	1
 1537              		.global	tof_odr
 1538              		.section	.data.tof_odr,"aw"
 1539              		.align	2
 1542              	tof_odr:
 1543 0000 1E000000 		.word	30
 1544              		.global	tof_fsr
 1545              		.section	.data.tof_fsr,"aw"
 1546              		.align	2
 1549              	tof_fsr:
 1550 0000 01000000 		.word	1
 1551              		.global	clearToGetL1
 1552              		.section	.bss.clearToGetL1,"aw",%nobits
 1555              	clearToGetL1:
 1556 0000 00       		.space	1
 1557              		.global	counter
 1558              		.section	.bss.counter,"aw",%nobits
ARM GAS  C:\Temp\ccEkXWoY.s 			page 59


 1559              		.align	2
 1562              	counter:
 1563 0000 00000000 		.space	4
 1564              		.global	calibrated
 1565              		.section	.bss.calibrated,"aw",%nobits
 1568              	calibrated:
 1569 0000 00       		.space	1
 1570              		.global	clearToSend
 1571              		.section	.bss.clearToSend,"aw",%nobits
 1574              	clearToSend:
 1575 0000 00       		.space	1
 1576              		.global	bigBuffer
 1577              		.section	.bss.bigBuffer,"aw",%nobits
 1578              		.align	2
 1581              	bigBuffer:
 1582 0000 00000000 		.space	14
 1582      00000000 
 1582      00000000 
 1582      0000
 1583              		.global	numberOfSimulinkBytes
 1584              		.section	.rodata.numberOfSimulinkBytes,"a"
 1585              		.align	2
 1588              	numberOfSimulinkBytes:
 1589 0000 08000000 		.word	8
 1590              		.global	expectedTerminator
 1591              		.section	.rodata.expectedTerminator,"a"
 1592              		.align	2
 1595              	expectedTerminator:
 1596 0000 415F4A   		.ascii	"A_J"
 1597              		.global	expectedHeader
 1598              		.section	.rodata.expectedHeader,"a"
 1599              		.align	2
 1602              	expectedHeader:
 1603 0000 4A5F41   		.ascii	"J_A"
 1604              		.global	terminator
 1605              		.section	.data.terminator,"aw"
 1606              		.align	2
 1609              	terminator:
 1610 0000 415F4A00 		.word	4874049
 1611              		.global	header
 1612              		.section	.data.header,"aw"
 1613              		.align	2
 1616              	header:
 1617 0000 4A5F4100 		.word	4284234
 1618              		.global	hdma_usart2_rx
 1619              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 1620              		.align	2
 1623              	hdma_usart2_rx:
 1624 0000 00000000 		.space	96
 1624      00000000 
 1624      00000000 
 1624      00000000 
 1624      00000000 
 1625              		.global	huart2
 1626              		.section	.bss.huart2,"aw",%nobits
 1627              		.align	2
 1630              	huart2:
ARM GAS  C:\Temp\ccEkXWoY.s 			page 60


 1631 0000 00000000 		.space	72
 1631      00000000 
 1631      00000000 
 1631      00000000 
 1631      00000000 
 1632              		.global	htim5
 1633              		.section	.bss.htim5,"aw",%nobits
 1634              		.align	2
 1637              	htim5:
 1638 0000 00000000 		.space	72
 1638      00000000 
 1638      00000000 
 1638      00000000 
 1638      00000000 
 1639              		.global	htim2
 1640              		.section	.bss.htim2,"aw",%nobits
 1641              		.align	2
 1644              	htim2:
 1645 0000 00000000 		.space	72
 1645      00000000 
 1645      00000000 
 1645      00000000 
 1645      00000000 
 1646              		.global	hi2c1
 1647              		.section	.bss.hi2c1,"aw",%nobits
 1648              		.align	2
 1651              	hi2c1:
 1652 0000 00000000 		.space	84
 1652      00000000 
 1652      00000000 
 1652      00000000 
 1652      00000000 
 1653              		.text
 1654              	.Letext0:
 1655              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1656              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1657              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1658              		.file 6 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1659              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1660              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1661              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1662              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1663              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1664              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1665              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1666              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1667              		.file 15 "Core/Inc/VL53L1A1_Simulink.h"
 1668              		.file 16 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1669              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1670              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1671              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1672              		.file 20 "<built-in>"
ARM GAS  C:\Temp\ccEkXWoY.s 			page 61


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\ccEkXWoY.s:22     .text.configureTimer:00000000 $t
  C:\Temp\ccEkXWoY.s:28     .text.configureTimer:00000000 configureTimer
  C:\Temp\ccEkXWoY.s:103    .text.configureTimer:0000004c $d
  C:\Temp\ccEkXWoY.s:109    .text.receivedFromSimulink:00000000 $t
  C:\Temp\ccEkXWoY.s:115    .text.receivedFromSimulink:00000000 receivedFromSimulink
  C:\Temp\ccEkXWoY.s:200    .text.receivedFromSimulink:00000054 $d
  C:\Temp\ccEkXWoY.s:1549   .data.tof_fsr:00000000 tof_fsr
  C:\Temp\ccEkXWoY.s:1542   .data.tof_odr:00000000 tof_odr
  C:\Temp\ccEkXWoY.s:1528   .data.timingBudget:00000000 timingBudget
  C:\Temp\ccEkXWoY.s:1521   .data.pollingPeriod:00000000 pollingPeriod
  C:\Temp\ccEkXWoY.s:1535   .data.rangingProfile:00000000 rangingProfile
  C:\Temp\ccEkXWoY.s:209    .text.initialCalibration:00000000 $t
  C:\Temp\ccEkXWoY.s:215    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\ccEkXWoY.s:284    .text.initialCalibration:00000044 $d
  C:\Temp\ccEkXWoY.s:1581   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\ccEkXWoY.s:1630   .bss.huart2:00000000 huart2
  C:\Temp\ccEkXWoY.s:1568   .bss.calibrated:00000000 calibrated
  C:\Temp\ccEkXWoY.s:291    .text.sendToSimulink:00000000 $t
  C:\Temp\ccEkXWoY.s:297    .text.sendToSimulink:00000000 sendToSimulink
  C:\Temp\ccEkXWoY.s:423    .text.sendToSimulink:000000ec $d
  C:\Temp\ccEkXWoY.s:1616   .data.header:00000000 header
  C:\Temp\ccEkXWoY.s:1514   .bss.TOF_left_result:00000000 TOF_left_result
  C:\Temp\ccEkXWoY.s:1507   .bss.TOF_centre_result:00000000 TOF_centre_result
  C:\Temp\ccEkXWoY.s:1500   .bss.TOF_right_result:00000000 TOF_right_result
  C:\Temp\ccEkXWoY.s:1562   .bss.counter:00000000 counter
  C:\Temp\ccEkXWoY.s:1609   .data.terminator:00000000 terminator
  C:\Temp\ccEkXWoY.s:434    .text.MX_DMA_Init:00000000 $t
  C:\Temp\ccEkXWoY.s:440    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\ccEkXWoY.s:486    .text.MX_DMA_Init:00000030 $d
  C:\Temp\ccEkXWoY.s:491    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\ccEkXWoY.s:497    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\ccEkXWoY.s:749    .text.MX_GPIO_Init:00000130 $d
  C:\Temp\ccEkXWoY.s:758    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\ccEkXWoY.s:764    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\ccEkXWoY.s:797    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\ccEkXWoY.s:802    .text.Error_Handler:00000000 $t
  C:\Temp\ccEkXWoY.s:808    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\ccEkXWoY.s:840    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\ccEkXWoY.s:845    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\ccEkXWoY.s:944    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\ccEkXWoY.s:1644   .bss.htim2:00000000 htim2
  C:\Temp\ccEkXWoY.s:949    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\ccEkXWoY.s:954    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\ccEkXWoY.s:1011   .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\ccEkXWoY.s:1017   .text.MX_TIM5_Init:00000000 $t
  C:\Temp\ccEkXWoY.s:1022   .text.MX_TIM5_Init:00000000 MX_TIM5_Init
  C:\Temp\ccEkXWoY.s:1121   .text.MX_TIM5_Init:00000060 $d
  C:\Temp\ccEkXWoY.s:1637   .bss.htim5:00000000 htim5
  C:\Temp\ccEkXWoY.s:1127   .text.MX_I2C1_Init:00000000 $t
  C:\Temp\ccEkXWoY.s:1132   .text.MX_I2C1_Init:00000000 MX_I2C1_Init
  C:\Temp\ccEkXWoY.s:1189   .text.MX_I2C1_Init:0000002c $d
  C:\Temp\ccEkXWoY.s:1651   .bss.hi2c1:00000000 hi2c1
  C:\Temp\ccEkXWoY.s:1196   .text.SystemClock_Config:00000000 $t
  C:\Temp\ccEkXWoY.s:1202   .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\ccEkXWoY.s:1346   .text.SystemClock_Config:00000098 $d
ARM GAS  C:\Temp\ccEkXWoY.s 			page 62


  C:\Temp\ccEkXWoY.s:1352   .text.main:00000000 $t
  C:\Temp\ccEkXWoY.s:1358   .text.main:00000000 main
  C:\Temp\ccEkXWoY.s:1478   .text.main:00000098 $d
  C:\Temp\ccEkXWoY.s:1555   .bss.clearToGetL1:00000000 clearToGetL1
  C:\Temp\ccEkXWoY.s:1493   .bss.IntCount:00000000 IntCount
  C:\Temp\ccEkXWoY.s:1490   .bss.IntCount:00000000 $d
  C:\Temp\ccEkXWoY.s:1497   .bss.TOF_right_result:00000000 $d
  C:\Temp\ccEkXWoY.s:1504   .bss.TOF_centre_result:00000000 $d
  C:\Temp\ccEkXWoY.s:1511   .bss.TOF_left_result:00000000 $d
  C:\Temp\ccEkXWoY.s:1518   .data.pollingPeriod:00000000 $d
  C:\Temp\ccEkXWoY.s:1525   .data.timingBudget:00000000 $d
  C:\Temp\ccEkXWoY.s:1532   .data.rangingProfile:00000000 $d
  C:\Temp\ccEkXWoY.s:1539   .data.tof_odr:00000000 $d
  C:\Temp\ccEkXWoY.s:1546   .data.tof_fsr:00000000 $d
  C:\Temp\ccEkXWoY.s:1556   .bss.clearToGetL1:00000000 $d
  C:\Temp\ccEkXWoY.s:1559   .bss.counter:00000000 $d
  C:\Temp\ccEkXWoY.s:1569   .bss.calibrated:00000000 $d
  C:\Temp\ccEkXWoY.s:1574   .bss.clearToSend:00000000 clearToSend
  C:\Temp\ccEkXWoY.s:1575   .bss.clearToSend:00000000 $d
  C:\Temp\ccEkXWoY.s:1578   .bss.bigBuffer:00000000 $d
  C:\Temp\ccEkXWoY.s:1588   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\ccEkXWoY.s:1585   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\ccEkXWoY.s:1595   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\ccEkXWoY.s:1592   .rodata.expectedTerminator:00000000 $d
  C:\Temp\ccEkXWoY.s:1602   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\ccEkXWoY.s:1599   .rodata.expectedHeader:00000000 $d
  C:\Temp\ccEkXWoY.s:1606   .data.terminator:00000000 $d
  C:\Temp\ccEkXWoY.s:1613   .data.header:00000000 $d
  C:\Temp\ccEkXWoY.s:1623   .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
  C:\Temp\ccEkXWoY.s:1620   .bss.hdma_usart2_rx:00000000 $d
  C:\Temp\ccEkXWoY.s:1627   .bss.huart2:00000000 $d
  C:\Temp\ccEkXWoY.s:1634   .bss.htim5:00000000 $d
  C:\Temp\ccEkXWoY.s:1641   .bss.htim2:00000000 $d
  C:\Temp\ccEkXWoY.s:1648   .bss.hi2c1:00000000 $d

UNDEFINED SYMBOLS
__aeabi_f2ulz
SystemCoreClock
bytesToInt32
HAL_UART_Receive
HAL_UART_Transmit
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
HAL_I2C_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
XNUCLEO53L1A1_Init
initVL53L1A1
ARM GAS  C:\Temp\ccEkXWoY.s 			page 63


HAL_TIM_Base_Start_IT
getVL53L1A1
