ARM GAS  C:\Temp\ccnYm66b.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.global	__aeabi_f2ulz
  21              		.section	.text.configureTimer,"ax",%progbits
  22              		.align	1
  23              		.global	configureTimer
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  28              	configureTimer:
  29              	.LVL0:
  30              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "VL53L1A1_Simulink.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  C:\Temp\ccnYm66b.s 			page 2


  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  44:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart2;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_left;
  51:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_centre;
  52:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_right;
  53:Core/Src/main.c **** RANGING_SENSOR_ProfileConfig_t Profile;
  54:Core/Src/main.c **** extern float tof_odr;
  55:Core/Src/main.c **** extern uint8_t L1_BUFFER_SIZE;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  58:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2);
  61:Core/Src/main.c **** uint8_t bigBuffer[8+3+3] = {0};
  62:Core/Src/main.c **** uint8_t clearToSend = 0;
  63:Core/Src/main.c **** uint8_t calibrated = 0;
  64:Core/Src/main.c **** int32_t counter = 0;
  65:Core/Src/main.c **** uint8_t clearToGetL1 = 0;
  66:Core/Src/main.c **** /* USER CODE END PV */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  69:Core/Src/main.c **** void SystemClock_Config(void);
  70:Core/Src/main.c **** static void MX_TIM2_Init(void);
  71:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  72:Core/Src/main.c **** static void MX_TIM5_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** void configureTimer(float desired_frequency, TIM_TypeDef* tim) {
  31              		.loc 1 81 64 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Temp\ccnYm66b.s 			page 3


  35              		.loc 1 81 64 is_stmt 0 view .LVU1
  36 0000 38B5     		push	{r3, r4, r5, lr}
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  42 0002 0546     		mov	r5, r0
  82:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
  83:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
  43              		.loc 1 83 5 is_stmt 1 view .LVU2
  44              		.loc 1 83 11 is_stmt 0 view .LVU3
  45 0004 114B     		ldr	r3, .L5
  46 0006 D3ED007A 		vldr.32	s15, [r3]	@ int
  47 000a F8EE677A 		vcvt.f32.u32	s15, s15
  48              	.LVL1:
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
  86:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
  49              		.loc 1 86 5 is_stmt 1 view .LVU4
  50              		.loc 1 86 11 is_stmt 0 view .LVU5
  51 000e 87EE807A 		vdiv.f32	s14, s15, s0
  52              	.LVL2:
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
  89:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
  53              		.loc 1 89 5 is_stmt 1 view .LVU6
  54              		.loc 1 89 50 is_stmt 0 view .LVU7
  55 0012 DFED0F7A 		vldr.32	s15, .L5+4
  56              	.LVL3:
  57              		.loc 1 89 50 view .LVU8
  58 0016 67EE277A 		vmul.f32	s15, s14, s15
  59              		.loc 1 89 14 view .LVU9
  60 001a FCEEE77A 		vcvt.u32.f32	s15, s15
  61 001e 17EE904A 		vmov	r4, s15	@ int
  62              	.LVL4:
  90:Core/Src/main.c ****     if (prescaler > 65535) {
  63              		.loc 1 90 5 is_stmt 1 view .LVU10
  64              		.loc 1 90 8 is_stmt 0 view .LVU11
  65 0022 B4F5803F 		cmp	r4, #65536
  66 0026 01D3     		bcc	.L2
  91:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
  67              		.loc 1 91 19 view .LVU12
  68 0028 4FF6FF74 		movw	r4, #65535
  69              	.LVL5:
  70              	.L2:
  92:Core/Src/main.c ****     }
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
  95:Core/Src/main.c ****     uint64_t arr = (uint64_t)(timer_period / (prescaler + 1));
  71              		.loc 1 95 5 is_stmt 1 view .LVU13
  72              		.loc 1 95 57 is_stmt 0 view .LVU14
  73 002c 631C     		adds	r3, r4, #1
  74              	.LVL6:
  75              		.loc 1 95 57 view .LVU15
  76 002e 07EE903A 		vmov	s15, r3	@ int
  77              		.loc 1 95 44 view .LVU16
ARM GAS  C:\Temp\ccnYm66b.s 			page 4


  78 0032 F8EE677A 		vcvt.f32.u32	s15, s15
  79              		.loc 1 95 14 view .LVU17
  80 0036 C7EE277A 		vdiv.f32	s15, s14, s15
  81 003a 17EE900A 		vmov	r0, s15
  82              	.LVL7:
  83              		.loc 1 95 14 view .LVU18
  84 003e FFF7FEFF 		bl	__aeabi_f2ulz
  85              	.LVL8:
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****     // Update the timer registers
 100:Core/Src/main.c ****     tim->PSC = prescaler;   // Set the prescaler
  86              		.loc 1 100 5 is_stmt 1 view .LVU19
  87              		.loc 1 100 14 is_stmt 0 view .LVU20
  88 0042 AC62     		str	r4, [r5, #40]
 101:Core/Src/main.c ****     tim->ARR = arr;         // Set the auto-reload register
  89              		.loc 1 101 5 is_stmt 1 view .LVU21
  90              		.loc 1 101 14 is_stmt 0 view .LVU22
  91 0044 E862     		str	r0, [r5, #44]
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 104:Core/Src/main.c ****     tim->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
  92              		.loc 1 104 5 is_stmt 1 view .LVU23
  93              		.loc 1 104 14 is_stmt 0 view .LVU24
  94 0046 0123     		movs	r3, #1
  95 0048 6B61     		str	r3, [r5, #20]
 105:Core/Src/main.c **** }
  96              		.loc 1 105 1 view .LVU25
  97 004a 38BD     		pop	{r3, r4, r5, pc}
  98              	.LVL9:
  99              	.L6:
 100              		.loc 1 105 1 view .LVU26
 101              		.align	2
 102              	.L5:
 103 004c 00000000 		.word	SystemCoreClock
 104 0050 00008037 		.word	931135488
 105              		.cfi_endproc
 106              	.LFE137:
 108              		.section	.text.initialCalibration,"ax",%progbits
 109              		.align	1
 110              		.global	initialCalibration
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 115              	initialCalibration:
 116              	.LFB138:
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** void initialCalibration(){
 117              		.loc 1 108 26 is_stmt 1 view -0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121 0000 10B5     		push	{r4, lr}
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 4, -8
ARM GAS  C:\Temp\ccnYm66b.s 			page 5


 124              		.cfi_offset 14, -4
 109:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 125              		.loc 1 109 3 view .LVU28
 126 0002 154C     		ldr	r4, .L11
 127 0004 0123     		movs	r3, #1
 128 0006 0E22     		movs	r2, #14
 129 0008 2146     		mov	r1, r4
 130 000a 1448     		ldr	r0, .L11+4
 131 000c FFF7FEFF 		bl	HAL_UART_Receive
 132              	.LVL10:
 110:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 133              		.loc 1 110 3 view .LVU29
 134              		.loc 1 110 16 is_stmt 0 view .LVU30
 135 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 136              		.loc 1 110 6 view .LVU31
 137 0012 4A2B     		cmp	r3, #74
 138 0014 00D0     		beq	.L10
 139              	.L7:
 111:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 112:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 113:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 114:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 115:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 116:Core/Src/main.c ****         calibrated = 1;
 117:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 118:Core/Src/main.c ****         configureTimer(tof_odr,TIM2);
 119:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 120:Core/Src/main.c ****   }
 121:Core/Src/main.c **** }
 140              		.loc 1 121 1 view .LVU32
 141 0016 10BD     		pop	{r4, pc}
 142              	.L10:
 111:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 143              		.loc 1 111 16 discriminator 1 view .LVU33
 144 0018 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 110:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 145              		.loc 1 110 41 discriminator 1 view .LVU34
 146 001a 5F2B     		cmp	r3, #95
 147 001c FBD1     		bne	.L7
 112:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 148              		.loc 1 112 16 view .LVU35
 149 001e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 111:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 150              		.loc 1 111 41 view .LVU36
 151 0020 412B     		cmp	r3, #65
 152 0022 F8D1     		bne	.L7
 113:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 153              		.loc 1 113 16 view .LVU37
 154 0024 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 112:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 155              		.loc 1 112 41 view .LVU38
 156 0026 412B     		cmp	r3, #65
 157 0028 F5D1     		bne	.L7
 114:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 158              		.loc 1 114 16 view .LVU39
 159 002a 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 113:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
ARM GAS  C:\Temp\ccnYm66b.s 			page 6


 160              		.loc 1 113 69 view .LVU40
 161 002c 5F2B     		cmp	r3, #95
 162 002e F2D1     		bne	.L7
 115:Core/Src/main.c ****         calibrated = 1;
 163              		.loc 1 115 16 view .LVU41
 164 0030 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 114:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 165              		.loc 1 114 69 view .LVU42
 166 0032 4A2B     		cmp	r3, #74
 167 0034 EFD1     		bne	.L7
 116:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 168              		.loc 1 116 9 is_stmt 1 view .LVU43
 116:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 169              		.loc 1 116 20 is_stmt 0 view .LVU44
 170 0036 0A4B     		ldr	r3, .L11+8
 171 0038 0122     		movs	r2, #1
 172 003a 1A70     		strb	r2, [r3]
 117:Core/Src/main.c ****         configureTimer(tof_odr,TIM2);
 173              		.loc 1 117 9 is_stmt 1 view .LVU45
 174 003c 2046     		mov	r0, r4
 175 003e FFF7FEFF 		bl	receivedFromSimulink
 176              	.LVL11:
 118:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 177              		.loc 1 118 9 view .LVU46
 178 0042 4FF08040 		mov	r0, #1073741824
 179 0046 074B     		ldr	r3, .L11+12
 180 0048 93ED000A 		vldr.32	s0, [r3]
 181 004c FFF7FEFF 		bl	configureTimer
 182              	.LVL12:
 119:Core/Src/main.c ****   }
 183              		.loc 1 119 9 view .LVU47
 184 0050 0548     		ldr	r0, .L11+16
 185 0052 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 186              	.LVL13:
 187              		.loc 1 121 1 is_stmt 0 view .LVU48
 188 0056 DEE7     		b	.L7
 189              	.L12:
 190              		.align	2
 191              	.L11:
 192 0058 00000000 		.word	bigBuffer
 193 005c 00000000 		.word	huart2
 194 0060 00000000 		.word	calibrated
 195 0064 00000000 		.word	tof_odr
 196 0068 00000000 		.word	htim2
 197              		.cfi_endproc
 198              	.LFE138:
 200              		.section	.text.MX_DMA_Init,"ax",%progbits
 201              		.align	1
 202              		.global	MX_DMA_Init
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 207              	MX_DMA_Init:
 208              	.LFB144:
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccnYm66b.s 			page 7


 125:Core/Src/main.c **** /* USER CODE END 0 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /**
 128:Core/Src/main.c ****   * @brief  The application entry point.
 129:Core/Src/main.c ****   * @retval int
 130:Core/Src/main.c ****   */
 131:Core/Src/main.c **** int main(void)
 132:Core/Src/main.c **** {
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE END 1 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 141:Core/Src/main.c ****   HAL_Init();
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE END Init */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* Configure the system clock */
 148:Core/Src/main.c ****   SystemClock_Config();
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE END SysInit */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* Initialize all configured peripherals */
 155:Core/Src/main.c ****   MX_GPIO_Init();
 156:Core/Src/main.c ****   MX_DMA_Init();
 157:Core/Src/main.c ****   MX_TIM2_Init();
 158:Core/Src/main.c ****   MX_USART2_UART_Init();
 159:Core/Src/main.c ****   MX_TIM5_Init();
 160:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 161:Core/Src/main.c ****   while (calibrated != 1){
 162:Core/Src/main.c ****     initialCalibration();
 163:Core/Src/main.c ****   }
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   initVL53L1A1();
 166:Core/Src/main.c ****   /* USER CODE END 2 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* Infinite loop */
 169:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 170:Core/Src/main.c ****   
 171:Core/Src/main.c ****   while (1)
 172:Core/Src/main.c ****   {
 173:Core/Src/main.c ****     if (clearToGetL1 == 1){
 174:Core/Src/main.c ****       getVL53L1A1();
 175:Core/Src/main.c ****       clearToGetL1 = 0;
 176:Core/Src/main.c ****     }
 177:Core/Src/main.c ****     
 178:Core/Src/main.c ****     /* USER CODE END WHILE */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 181:Core/Src/main.c ****   }
ARM GAS  C:\Temp\ccnYm66b.s 			page 8


 182:Core/Src/main.c ****   /* USER CODE END 3 */
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief System Clock Configuration
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** void SystemClock_Config(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 195:Core/Src/main.c ****   */
 196:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 200:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 203:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 204:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 211:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 212:Core/Src/main.c ****   {
 213:Core/Src/main.c ****     Error_Handler();
 214:Core/Src/main.c ****   }
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 219:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 220:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 221:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 222:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 223:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 226:Core/Src/main.c ****   {
 227:Core/Src/main.c ****     Error_Handler();
 228:Core/Src/main.c ****   }
 229:Core/Src/main.c **** }
 230:Core/Src/main.c **** 
 231:Core/Src/main.c **** /**
 232:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 233:Core/Src/main.c ****   * @param None
 234:Core/Src/main.c ****   * @retval None
 235:Core/Src/main.c ****   */
 236:Core/Src/main.c **** static void MX_TIM2_Init(void)
 237:Core/Src/main.c **** {
 238:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccnYm66b.s 			page 9


 239:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 244:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 249:Core/Src/main.c ****   htim2.Instance = TIM2;
 250:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 251:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 252:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 253:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 254:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 255:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 256:Core/Src/main.c ****   {
 257:Core/Src/main.c ****     Error_Handler();
 258:Core/Src/main.c ****   }
 259:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 260:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 261:Core/Src/main.c ****   {
 262:Core/Src/main.c ****     Error_Handler();
 263:Core/Src/main.c ****   }
 264:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 265:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 266:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 267:Core/Src/main.c ****   {
 268:Core/Src/main.c ****     Error_Handler();
 269:Core/Src/main.c ****   }
 270:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** }
 275:Core/Src/main.c **** 
 276:Core/Src/main.c **** /**
 277:Core/Src/main.c ****   * @brief TIM5 Initialization Function
 278:Core/Src/main.c ****   * @param None
 279:Core/Src/main.c ****   * @retval None
 280:Core/Src/main.c ****   */
 281:Core/Src/main.c **** static void MX_TIM5_Init(void)
 282:Core/Src/main.c **** {
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 289:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 294:Core/Src/main.c ****   htim5.Instance = TIM5;
 295:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
ARM GAS  C:\Temp\ccnYm66b.s 			page 10


 296:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 297:Core/Src/main.c ****   htim5.Init.Period = 4294967295;
 298:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 299:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 300:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 305:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 306:Core/Src/main.c ****   {
 307:Core/Src/main.c ****     Error_Handler();
 308:Core/Src/main.c ****   }
 309:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 310:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 311:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 312:Core/Src/main.c ****   {
 313:Core/Src/main.c ****     Error_Handler();
 314:Core/Src/main.c ****   }
 315:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c **** }
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** /**
 322:Core/Src/main.c ****   * @brief USART2 Initialization Function
 323:Core/Src/main.c ****   * @param None
 324:Core/Src/main.c ****   * @retval None
 325:Core/Src/main.c ****   */
 326:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 327:Core/Src/main.c **** {
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 336:Core/Src/main.c ****   huart2.Instance = USART2;
 337:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 338:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 339:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 340:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 341:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 342:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 343:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 344:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 345:Core/Src/main.c ****   {
 346:Core/Src/main.c ****     Error_Handler();
 347:Core/Src/main.c ****   }
 348:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c **** }
ARM GAS  C:\Temp\ccnYm66b.s 			page 11


 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** /**
 355:Core/Src/main.c ****   * Enable DMA controller clock
 356:Core/Src/main.c ****   */
 357:Core/Src/main.c **** void MX_DMA_Init(void)
 358:Core/Src/main.c **** {
 209              		.loc 1 358 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 8
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 00B5     		push	{lr}
 214              		.cfi_def_cfa_offset 4
 215              		.cfi_offset 14, -4
 216 0002 83B0     		sub	sp, sp, #12
 217              		.cfi_def_cfa_offset 16
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* DMA controller clock enable */
 361:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 218              		.loc 1 361 3 view .LVU50
 219              	.LBB4:
 220              		.loc 1 361 3 view .LVU51
 221 0004 0021     		movs	r1, #0
 222 0006 0191     		str	r1, [sp, #4]
 223              		.loc 1 361 3 view .LVU52
 224 0008 094B     		ldr	r3, .L15
 225 000a 1A6B     		ldr	r2, [r3, #48]
 226 000c 42F40012 		orr	r2, r2, #2097152
 227 0010 1A63     		str	r2, [r3, #48]
 228              		.loc 1 361 3 view .LVU53
 229 0012 1B6B     		ldr	r3, [r3, #48]
 230 0014 03F40013 		and	r3, r3, #2097152
 231 0018 0193     		str	r3, [sp, #4]
 232              		.loc 1 361 3 view .LVU54
 233 001a 019B     		ldr	r3, [sp, #4]
 234              	.LBE4:
 235              		.loc 1 361 3 view .LVU55
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* DMA interrupt init */
 364:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 365:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 236              		.loc 1 365 3 view .LVU56
 237 001c 0A46     		mov	r2, r1
 238 001e 1020     		movs	r0, #16
 239 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 240              	.LVL14:
 366:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 241              		.loc 1 366 3 view .LVU57
 242 0024 1020     		movs	r0, #16
 243 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL15:
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** }
 245              		.loc 1 368 1 is_stmt 0 view .LVU58
 246 002a 03B0     		add	sp, sp, #12
 247              		.cfi_def_cfa_offset 4
 248              		@ sp needed
 249 002c 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  C:\Temp\ccnYm66b.s 			page 12


 250              	.L16:
 251              		.align	2
 252              	.L15:
 253 0030 00380240 		.word	1073887232
 254              		.cfi_endproc
 255              	.LFE144:
 257              		.section	.text.MX_GPIO_Init,"ax",%progbits
 258              		.align	1
 259              		.global	MX_GPIO_Init
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 264              	MX_GPIO_Init:
 265              	.LFB145:
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** /**
 371:Core/Src/main.c ****   * @brief GPIO Initialization Function
 372:Core/Src/main.c ****   * @param None
 373:Core/Src/main.c ****   * @retval None
 374:Core/Src/main.c ****   */
 375:Core/Src/main.c **** void MX_GPIO_Init(void)
 376:Core/Src/main.c **** {
 266              		.loc 1 376 1 is_stmt 1 view -0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 40
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 271              		.cfi_def_cfa_offset 20
 272              		.cfi_offset 4, -20
 273              		.cfi_offset 5, -16
 274              		.cfi_offset 6, -12
 275              		.cfi_offset 7, -8
 276              		.cfi_offset 14, -4
 277 0002 8BB0     		sub	sp, sp, #44
 278              		.cfi_def_cfa_offset 64
 377:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 279              		.loc 1 377 3 view .LVU60
 280              		.loc 1 377 20 is_stmt 0 view .LVU61
 281 0004 0024     		movs	r4, #0
 282 0006 0594     		str	r4, [sp, #20]
 283 0008 0694     		str	r4, [sp, #24]
 284 000a 0794     		str	r4, [sp, #28]
 285 000c 0894     		str	r4, [sp, #32]
 286 000e 0994     		str	r4, [sp, #36]
 378:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 379:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 382:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 287              		.loc 1 382 3 is_stmt 1 view .LVU62
 288              	.LBB5:
 289              		.loc 1 382 3 view .LVU63
 290 0010 0094     		str	r4, [sp]
 291              		.loc 1 382 3 view .LVU64
 292 0012 474B     		ldr	r3, .L19
 293 0014 1A6B     		ldr	r2, [r3, #48]
 294 0016 42F00402 		orr	r2, r2, #4
ARM GAS  C:\Temp\ccnYm66b.s 			page 13


 295 001a 1A63     		str	r2, [r3, #48]
 296              		.loc 1 382 3 view .LVU65
 297 001c 1A6B     		ldr	r2, [r3, #48]
 298 001e 02F00402 		and	r2, r2, #4
 299 0022 0092     		str	r2, [sp]
 300              		.loc 1 382 3 view .LVU66
 301 0024 009A     		ldr	r2, [sp]
 302              	.LBE5:
 303              		.loc 1 382 3 view .LVU67
 383:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 304              		.loc 1 383 3 view .LVU68
 305              	.LBB6:
 306              		.loc 1 383 3 view .LVU69
 307 0026 0194     		str	r4, [sp, #4]
 308              		.loc 1 383 3 view .LVU70
 309 0028 1A6B     		ldr	r2, [r3, #48]
 310 002a 42F08002 		orr	r2, r2, #128
 311 002e 1A63     		str	r2, [r3, #48]
 312              		.loc 1 383 3 view .LVU71
 313 0030 1A6B     		ldr	r2, [r3, #48]
 314 0032 02F08002 		and	r2, r2, #128
 315 0036 0192     		str	r2, [sp, #4]
 316              		.loc 1 383 3 view .LVU72
 317 0038 019A     		ldr	r2, [sp, #4]
 318              	.LBE6:
 319              		.loc 1 383 3 view .LVU73
 384:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 320              		.loc 1 384 3 view .LVU74
 321              	.LBB7:
 322              		.loc 1 384 3 view .LVU75
 323 003a 0294     		str	r4, [sp, #8]
 324              		.loc 1 384 3 view .LVU76
 325 003c 1A6B     		ldr	r2, [r3, #48]
 326 003e 42F00102 		orr	r2, r2, #1
 327 0042 1A63     		str	r2, [r3, #48]
 328              		.loc 1 384 3 view .LVU77
 329 0044 1A6B     		ldr	r2, [r3, #48]
 330 0046 02F00102 		and	r2, r2, #1
 331 004a 0292     		str	r2, [sp, #8]
 332              		.loc 1 384 3 view .LVU78
 333 004c 029A     		ldr	r2, [sp, #8]
 334              	.LBE7:
 335              		.loc 1 384 3 view .LVU79
 385:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 336              		.loc 1 385 3 view .LVU80
 337              	.LBB8:
 338              		.loc 1 385 3 view .LVU81
 339 004e 0394     		str	r4, [sp, #12]
 340              		.loc 1 385 3 view .LVU82
 341 0050 1A6B     		ldr	r2, [r3, #48]
 342 0052 42F00202 		orr	r2, r2, #2
 343 0056 1A63     		str	r2, [r3, #48]
 344              		.loc 1 385 3 view .LVU83
 345 0058 1A6B     		ldr	r2, [r3, #48]
 346 005a 02F00202 		and	r2, r2, #2
 347 005e 0392     		str	r2, [sp, #12]
 348              		.loc 1 385 3 view .LVU84
ARM GAS  C:\Temp\ccnYm66b.s 			page 14


 349 0060 039A     		ldr	r2, [sp, #12]
 350              	.LBE8:
 351              		.loc 1 385 3 view .LVU85
 386:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 352              		.loc 1 386 3 view .LVU86
 353              	.LBB9:
 354              		.loc 1 386 3 view .LVU87
 355 0062 0494     		str	r4, [sp, #16]
 356              		.loc 1 386 3 view .LVU88
 357 0064 1A6B     		ldr	r2, [r3, #48]
 358 0066 42F00802 		orr	r2, r2, #8
 359 006a 1A63     		str	r2, [r3, #48]
 360              		.loc 1 386 3 view .LVU89
 361 006c 1B6B     		ldr	r3, [r3, #48]
 362 006e 03F00803 		and	r3, r3, #8
 363 0072 0493     		str	r3, [sp, #16]
 364              		.loc 1 386 3 view .LVU90
 365 0074 049B     		ldr	r3, [sp, #16]
 366              	.LBE9:
 367              		.loc 1 386 3 view .LVU91
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 389:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 368              		.loc 1 389 3 view .LVU92
 369 0076 2F4E     		ldr	r6, .L19+4
 370 0078 2246     		mov	r2, r4
 371 007a 2021     		movs	r1, #32
 372 007c 3046     		mov	r0, r6
 373 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 374              	.LVL16:
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 392:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 375              		.loc 1 392 3 view .LVU93
 376              		.loc 1 392 23 is_stmt 0 view .LVU94
 377 0082 4FF40053 		mov	r3, #8192
 378 0086 0593     		str	r3, [sp, #20]
 393:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 379              		.loc 1 393 3 is_stmt 1 view .LVU95
 380              		.loc 1 393 24 is_stmt 0 view .LVU96
 381 0088 4FF48813 		mov	r3, #1114112
 382 008c 0693     		str	r3, [sp, #24]
 394:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 383              		.loc 1 394 3 is_stmt 1 view .LVU97
 384              		.loc 1 394 24 is_stmt 0 view .LVU98
 385 008e 0794     		str	r4, [sp, #28]
 395:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 386              		.loc 1 395 3 is_stmt 1 view .LVU99
 387 0090 294F     		ldr	r7, .L19+8
 388 0092 05A9     		add	r1, sp, #20
 389 0094 3846     		mov	r0, r7
 390 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 391              	.LVL17:
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 398:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 399:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
ARM GAS  C:\Temp\ccnYm66b.s 			page 15


 400:Core/Src/main.c ****                            PC12 */
 401:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 392              		.loc 1 401 3 view .LVU100
 393              		.loc 1 401 23 is_stmt 0 view .LVU101
 394 009a 41F6FF73 		movw	r3, #8191
 395 009e 0593     		str	r3, [sp, #20]
 402:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 403:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 404:Core/Src/main.c ****                           |GPIO_PIN_12;
 405:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 396              		.loc 1 405 3 is_stmt 1 view .LVU102
 397              		.loc 1 405 24 is_stmt 0 view .LVU103
 398 00a0 0325     		movs	r5, #3
 399 00a2 0695     		str	r5, [sp, #24]
 406:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 400              		.loc 1 406 3 is_stmt 1 view .LVU104
 401              		.loc 1 406 24 is_stmt 0 view .LVU105
 402 00a4 0794     		str	r4, [sp, #28]
 407:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 403              		.loc 1 407 3 is_stmt 1 view .LVU106
 404 00a6 05A9     		add	r1, sp, #20
 405 00a8 3846     		mov	r0, r7
 406 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 407              	.LVL18:
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA6 PA7
 410:Core/Src/main.c ****                            PA8 PA9 PA10 PA11
 411:Core/Src/main.c ****                            PA12 PA15 */
 412:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 408              		.loc 1 412 3 view .LVU107
 409              		.loc 1 412 23 is_stmt 0 view .LVU108
 410 00ae 49F6C373 		movw	r3, #40899
 411 00b2 0593     		str	r3, [sp, #20]
 413:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 414:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_15;
 415:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 412              		.loc 1 415 3 is_stmt 1 view .LVU109
 413              		.loc 1 415 24 is_stmt 0 view .LVU110
 414 00b4 0695     		str	r5, [sp, #24]
 416:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 415              		.loc 1 416 3 is_stmt 1 view .LVU111
 416              		.loc 1 416 24 is_stmt 0 view .LVU112
 417 00b6 0794     		str	r4, [sp, #28]
 417:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 418              		.loc 1 417 3 is_stmt 1 view .LVU113
 419 00b8 05A9     		add	r1, sp, #20
 420 00ba 3046     		mov	r0, r6
 421 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 422              	.LVL19:
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /*Configure GPIO pin : VL53L1X_INT_Pin */
 420:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 423              		.loc 1 420 3 view .LVU114
 424              		.loc 1 420 23 is_stmt 0 view .LVU115
 425 00c0 1023     		movs	r3, #16
 426 00c2 0593     		str	r3, [sp, #20]
 421:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
ARM GAS  C:\Temp\ccnYm66b.s 			page 16


 427              		.loc 1 421 3 is_stmt 1 view .LVU116
 428              		.loc 1 421 24 is_stmt 0 view .LVU117
 429 00c4 4FF40413 		mov	r3, #2162688
 430 00c8 0693     		str	r3, [sp, #24]
 422:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 431              		.loc 1 422 3 is_stmt 1 view .LVU118
 432              		.loc 1 422 24 is_stmt 0 view .LVU119
 433 00ca 0127     		movs	r7, #1
 434 00cc 0797     		str	r7, [sp, #28]
 423:Core/Src/main.c ****   HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 435              		.loc 1 423 3 is_stmt 1 view .LVU120
 436 00ce 05A9     		add	r1, sp, #20
 437 00d0 3046     		mov	r0, r6
 438 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 439              	.LVL20:
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 426:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 440              		.loc 1 426 3 view .LVU121
 441              		.loc 1 426 23 is_stmt 0 view .LVU122
 442 00d6 2023     		movs	r3, #32
 443 00d8 0593     		str	r3, [sp, #20]
 427:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 444              		.loc 1 427 3 is_stmt 1 view .LVU123
 445              		.loc 1 427 24 is_stmt 0 view .LVU124
 446 00da 0697     		str	r7, [sp, #24]
 428:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 447              		.loc 1 428 3 is_stmt 1 view .LVU125
 448              		.loc 1 428 24 is_stmt 0 view .LVU126
 449 00dc 0794     		str	r4, [sp, #28]
 429:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 450              		.loc 1 429 3 is_stmt 1 view .LVU127
 451              		.loc 1 429 25 is_stmt 0 view .LVU128
 452 00de 0894     		str	r4, [sp, #32]
 430:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 453              		.loc 1 430 3 is_stmt 1 view .LVU129
 454 00e0 05A9     		add	r1, sp, #20
 455 00e2 3046     		mov	r0, r6
 456 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 457              	.LVL21:
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 433:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 434:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 435:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 458              		.loc 1 435 3 view .LVU130
 459              		.loc 1 435 23 is_stmt 0 view .LVU131
 460 00e8 4FF2F743 		movw	r3, #62711
 461 00ec 0593     		str	r3, [sp, #20]
 436:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 437:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 438:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 462              		.loc 1 438 3 is_stmt 1 view .LVU132
 463              		.loc 1 438 24 is_stmt 0 view .LVU133
 464 00ee 0695     		str	r5, [sp, #24]
 439:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 465              		.loc 1 439 3 is_stmt 1 view .LVU134
ARM GAS  C:\Temp\ccnYm66b.s 			page 17


 466              		.loc 1 439 24 is_stmt 0 view .LVU135
 467 00f0 0794     		str	r4, [sp, #28]
 440:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 468              		.loc 1 440 3 is_stmt 1 view .LVU136
 469 00f2 05A9     		add	r1, sp, #20
 470 00f4 1148     		ldr	r0, .L19+12
 471 00f6 FFF7FEFF 		bl	HAL_GPIO_Init
 472              	.LVL22:
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 443:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 473              		.loc 1 443 3 view .LVU137
 474              		.loc 1 443 23 is_stmt 0 view .LVU138
 475 00fa 0423     		movs	r3, #4
 476 00fc 0593     		str	r3, [sp, #20]
 444:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 477              		.loc 1 444 3 is_stmt 1 view .LVU139
 478              		.loc 1 444 24 is_stmt 0 view .LVU140
 479 00fe 0695     		str	r5, [sp, #24]
 445:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 480              		.loc 1 445 3 is_stmt 1 view .LVU141
 481              		.loc 1 445 24 is_stmt 0 view .LVU142
 482 0100 0794     		str	r4, [sp, #28]
 446:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 483              		.loc 1 446 3 is_stmt 1 view .LVU143
 484 0102 05A9     		add	r1, sp, #20
 485 0104 0E48     		ldr	r0, .L19+16
 486 0106 FFF7FEFF 		bl	HAL_GPIO_Init
 487              	.LVL23:
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* EXTI interrupt init*/
 449:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 488              		.loc 1 449 3 view .LVU144
 489 010a 2246     		mov	r2, r4
 490 010c 2146     		mov	r1, r4
 491 010e 0A20     		movs	r0, #10
 492 0110 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 493              	.LVL24:
 450:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 494              		.loc 1 450 3 view .LVU145
 495 0114 0A20     		movs	r0, #10
 496 0116 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 497              	.LVL25:
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 498              		.loc 1 452 3 view .LVU146
 499 011a 2246     		mov	r2, r4
 500 011c 2146     		mov	r1, r4
 501 011e 2820     		movs	r0, #40
 502 0120 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 503              	.LVL26:
 453:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 504              		.loc 1 453 3 view .LVU147
 505 0124 2820     		movs	r0, #40
 506 0126 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 507              	.LVL27:
 454:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccnYm66b.s 			page 18


 455:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 456:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 457:Core/Src/main.c **** }
 508              		.loc 1 457 1 is_stmt 0 view .LVU148
 509 012a 0BB0     		add	sp, sp, #44
 510              		.cfi_def_cfa_offset 20
 511              		@ sp needed
 512 012c F0BD     		pop	{r4, r5, r6, r7, pc}
 513              	.L20:
 514 012e 00BF     		.align	2
 515              	.L19:
 516 0130 00380240 		.word	1073887232
 517 0134 00000240 		.word	1073872896
 518 0138 00080240 		.word	1073874944
 519 013c 00040240 		.word	1073873920
 520 0140 000C0240 		.word	1073875968
 521              		.cfi_endproc
 522              	.LFE145:
 524              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 525              		.align	1
 526              		.global	HAL_TIM_PeriodElapsedCallback
 527              		.syntax unified
 528              		.thumb
 529              		.thumb_func
 531              	HAL_TIM_PeriodElapsedCallback:
 532              	.LVL28:
 533              	.LFB146:
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 460:Core/Src/main.c **** 
 461:Core/Src/main.c **** /* USER CODE END 4 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c **** /**
 464:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 465:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 466:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 467:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 468:Core/Src/main.c ****   * @param  htim : TIM handle
 469:Core/Src/main.c ****   * @retval None
 470:Core/Src/main.c ****   */
 471:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 472:Core/Src/main.c **** {
 534              		.loc 1 472 1 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              		.loc 1 472 1 is_stmt 0 view .LVU150
 539 0000 08B5     		push	{r3, lr}
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 3, -8
 542              		.cfi_offset 14, -4
 473:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 476:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 543              		.loc 1 476 3 is_stmt 1 view .LVU151
 544              		.loc 1 476 11 is_stmt 0 view .LVU152
ARM GAS  C:\Temp\ccnYm66b.s 			page 19


 545 0002 0268     		ldr	r2, [r0]
 546              		.loc 1 476 6 view .LVU153
 547 0004 034B     		ldr	r3, .L25
 548 0006 9A42     		cmp	r2, r3
 549 0008 00D0     		beq	.L24
 550              	.LVL29:
 551              	.L21:
 477:Core/Src/main.c ****     HAL_IncTick();
 478:Core/Src/main.c ****   }
 479:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 482:Core/Src/main.c **** }
 552              		.loc 1 482 1 view .LVU154
 553 000a 08BD     		pop	{r3, pc}
 554              	.LVL30:
 555              	.L24:
 477:Core/Src/main.c ****     HAL_IncTick();
 556              		.loc 1 477 5 is_stmt 1 view .LVU155
 557 000c FFF7FEFF 		bl	HAL_IncTick
 558              	.LVL31:
 559              		.loc 1 482 1 is_stmt 0 view .LVU156
 560 0010 FBE7     		b	.L21
 561              	.L26:
 562 0012 00BF     		.align	2
 563              	.L25:
 564 0014 00000140 		.word	1073807360
 565              		.cfi_endproc
 566              	.LFE146:
 568              		.section	.text.Error_Handler,"ax",%progbits
 569              		.align	1
 570              		.global	Error_Handler
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	Error_Handler:
 576              	.LFB147:
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** /**
 485:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 486:Core/Src/main.c ****   * @retval None
 487:Core/Src/main.c ****   */
 488:Core/Src/main.c **** void Error_Handler(void)
 489:Core/Src/main.c **** {
 577              		.loc 1 489 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ Volatile: function does not return.
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 490:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 491:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 492:Core/Src/main.c ****   __disable_irq();
 583              		.loc 1 492 3 view .LVU158
 584              	.LBB10:
 585              	.LBI10:
 586              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  C:\Temp\ccnYm66b.s 			page 20


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\ccnYm66b.s 			page 21


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  C:\Temp\ccnYm66b.s 			page 22


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\ccnYm66b.s 			page 23


 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
ARM GAS  C:\Temp\ccnYm66b.s 			page 24


 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccnYm66b.s 			page 25


 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
ARM GAS  C:\Temp\ccnYm66b.s 			page 26


 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
ARM GAS  C:\Temp\ccnYm66b.s 			page 27


 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Temp\ccnYm66b.s 			page 28


 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccnYm66b.s 			page 29


 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\ccnYm66b.s 			page 30


 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Temp\ccnYm66b.s 			page 31


 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccnYm66b.s 			page 32


 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
ARM GAS  C:\Temp\ccnYm66b.s 			page 33


 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Temp\ccnYm66b.s 			page 34


 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Temp\ccnYm66b.s 			page 35


 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  C:\Temp\ccnYm66b.s 			page 36


 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 587              		.loc 2 960 27 view .LVU159
 588              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 589              		.loc 2 962 3 view .LVU160
 590              		.syntax unified
 591              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 592 0000 72B6     		cpsid i
 593              	@ 0 "" 2
ARM GAS  C:\Temp\ccnYm66b.s 			page 37


 594              		.thumb
 595              		.syntax unified
 596              	.L28:
 597              	.LBE11:
 598              	.LBE10:
 493:Core/Src/main.c ****   while (1)
 599              		.loc 1 493 3 discriminator 1 view .LVU161
 494:Core/Src/main.c ****   {
 495:Core/Src/main.c ****   }
 600              		.loc 1 495 3 discriminator 1 view .LVU162
 493:Core/Src/main.c ****   while (1)
 601              		.loc 1 493 9 discriminator 1 view .LVU163
 602 0002 FEE7     		b	.L28
 603              		.cfi_endproc
 604              	.LFE147:
 606              		.section	.text.MX_TIM2_Init,"ax",%progbits
 607              		.align	1
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 612              	MX_TIM2_Init:
 613              	.LFB141:
 237:Core/Src/main.c **** 
 614              		.loc 1 237 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 24
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618 0000 00B5     		push	{lr}
 619              		.cfi_def_cfa_offset 4
 620              		.cfi_offset 14, -4
 621 0002 87B0     		sub	sp, sp, #28
 622              		.cfi_def_cfa_offset 32
 243:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 623              		.loc 1 243 3 view .LVU165
 243:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 624              		.loc 1 243 26 is_stmt 0 view .LVU166
 625 0004 0023     		movs	r3, #0
 626 0006 0293     		str	r3, [sp, #8]
 627 0008 0393     		str	r3, [sp, #12]
 628 000a 0493     		str	r3, [sp, #16]
 629 000c 0593     		str	r3, [sp, #20]
 244:Core/Src/main.c **** 
 630              		.loc 1 244 3 is_stmt 1 view .LVU167
 244:Core/Src/main.c **** 
 631              		.loc 1 244 27 is_stmt 0 view .LVU168
 632 000e 0093     		str	r3, [sp]
 633 0010 0193     		str	r3, [sp, #4]
 249:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 634              		.loc 1 249 3 is_stmt 1 view .LVU169
 249:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 635              		.loc 1 249 18 is_stmt 0 view .LVU170
 636 0012 1448     		ldr	r0, .L37
 637 0014 4FF08042 		mov	r2, #1073741824
 638 0018 0260     		str	r2, [r0]
 250:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 639              		.loc 1 250 3 is_stmt 1 view .LVU171
 250:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  C:\Temp\ccnYm66b.s 			page 38


 640              		.loc 1 250 24 is_stmt 0 view .LVU172
 641 001a 40F2E732 		movw	r2, #999
 642 001e 4260     		str	r2, [r0, #4]
 251:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 643              		.loc 1 251 3 is_stmt 1 view .LVU173
 251:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 644              		.loc 1 251 26 is_stmt 0 view .LVU174
 645 0020 8360     		str	r3, [r0, #8]
 252:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 646              		.loc 1 252 3 is_stmt 1 view .LVU175
 252:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 647              		.loc 1 252 21 is_stmt 0 view .LVU176
 648 0022 C260     		str	r2, [r0, #12]
 253:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 649              		.loc 1 253 3 is_stmt 1 view .LVU177
 253:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 650              		.loc 1 253 28 is_stmt 0 view .LVU178
 651 0024 0361     		str	r3, [r0, #16]
 254:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 652              		.loc 1 254 3 is_stmt 1 view .LVU179
 254:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 653              		.loc 1 254 32 is_stmt 0 view .LVU180
 654 0026 8023     		movs	r3, #128
 655 0028 8361     		str	r3, [r0, #24]
 255:Core/Src/main.c ****   {
 656              		.loc 1 255 3 is_stmt 1 view .LVU181
 255:Core/Src/main.c ****   {
 657              		.loc 1 255 7 is_stmt 0 view .LVU182
 658 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 659              	.LVL32:
 255:Core/Src/main.c ****   {
 660              		.loc 1 255 6 view .LVU183
 661 002e 90B9     		cbnz	r0, .L34
 259:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 662              		.loc 1 259 3 is_stmt 1 view .LVU184
 259:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 663              		.loc 1 259 34 is_stmt 0 view .LVU185
 664 0030 4FF48053 		mov	r3, #4096
 665 0034 0293     		str	r3, [sp, #8]
 260:Core/Src/main.c ****   {
 666              		.loc 1 260 3 is_stmt 1 view .LVU186
 260:Core/Src/main.c ****   {
 667              		.loc 1 260 7 is_stmt 0 view .LVU187
 668 0036 02A9     		add	r1, sp, #8
 669 0038 0A48     		ldr	r0, .L37
 670 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 671              	.LVL33:
 260:Core/Src/main.c ****   {
 672              		.loc 1 260 6 view .LVU188
 673 003e 60B9     		cbnz	r0, .L35
 264:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 674              		.loc 1 264 3 is_stmt 1 view .LVU189
 264:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 675              		.loc 1 264 37 is_stmt 0 view .LVU190
 676 0040 0023     		movs	r3, #0
 677 0042 0093     		str	r3, [sp]
 265:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
ARM GAS  C:\Temp\ccnYm66b.s 			page 39


 678              		.loc 1 265 3 is_stmt 1 view .LVU191
 265:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 679              		.loc 1 265 33 is_stmt 0 view .LVU192
 680 0044 0193     		str	r3, [sp, #4]
 266:Core/Src/main.c ****   {
 681              		.loc 1 266 3 is_stmt 1 view .LVU193
 266:Core/Src/main.c ****   {
 682              		.loc 1 266 7 is_stmt 0 view .LVU194
 683 0046 6946     		mov	r1, sp
 684 0048 0648     		ldr	r0, .L37
 685 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 686              	.LVL34:
 266:Core/Src/main.c ****   {
 687              		.loc 1 266 6 view .LVU195
 688 004e 30B9     		cbnz	r0, .L36
 274:Core/Src/main.c **** 
 689              		.loc 1 274 1 view .LVU196
 690 0050 07B0     		add	sp, sp, #28
 691              		.cfi_remember_state
 692              		.cfi_def_cfa_offset 4
 693              		@ sp needed
 694 0052 5DF804FB 		ldr	pc, [sp], #4
 695              	.L34:
 696              		.cfi_restore_state
 257:Core/Src/main.c ****   }
 697              		.loc 1 257 5 is_stmt 1 view .LVU197
 698 0056 FFF7FEFF 		bl	Error_Handler
 699              	.LVL35:
 700              	.L35:
 262:Core/Src/main.c ****   }
 701              		.loc 1 262 5 view .LVU198
 702 005a FFF7FEFF 		bl	Error_Handler
 703              	.LVL36:
 704              	.L36:
 268:Core/Src/main.c ****   }
 705              		.loc 1 268 5 view .LVU199
 706 005e FFF7FEFF 		bl	Error_Handler
 707              	.LVL37:
 708              	.L38:
 709 0062 00BF     		.align	2
 710              	.L37:
 711 0064 00000000 		.word	htim2
 712              		.cfi_endproc
 713              	.LFE141:
 715              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 716              		.align	1
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 721              	MX_USART2_UART_Init:
 722              	.LFB143:
 327:Core/Src/main.c **** 
 723              		.loc 1 327 1 view -0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Temp\ccnYm66b.s 			page 40


 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 3, -8
 730              		.cfi_offset 14, -4
 336:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 731              		.loc 1 336 3 view .LVU201
 336:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 732              		.loc 1 336 19 is_stmt 0 view .LVU202
 733 0002 0D48     		ldr	r0, .L43
 734 0004 0D4B     		ldr	r3, .L43+4
 735 0006 0360     		str	r3, [r0]
 337:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 736              		.loc 1 337 3 is_stmt 1 view .LVU203
 337:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 737              		.loc 1 337 24 is_stmt 0 view .LVU204
 738 0008 4FF4E113 		mov	r3, #1843200
 739 000c 4360     		str	r3, [r0, #4]
 338:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 740              		.loc 1 338 3 is_stmt 1 view .LVU205
 338:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 741              		.loc 1 338 26 is_stmt 0 view .LVU206
 742 000e 4FF48053 		mov	r3, #4096
 743 0012 8360     		str	r3, [r0, #8]
 339:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 744              		.loc 1 339 3 is_stmt 1 view .LVU207
 339:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 745              		.loc 1 339 24 is_stmt 0 view .LVU208
 746 0014 4FF40053 		mov	r3, #8192
 747 0018 C360     		str	r3, [r0, #12]
 340:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 748              		.loc 1 340 3 is_stmt 1 view .LVU209
 340:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 749              		.loc 1 340 22 is_stmt 0 view .LVU210
 750 001a 4FF48063 		mov	r3, #1024
 751 001e 0361     		str	r3, [r0, #16]
 341:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 752              		.loc 1 341 3 is_stmt 1 view .LVU211
 341:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 753              		.loc 1 341 20 is_stmt 0 view .LVU212
 754 0020 0C23     		movs	r3, #12
 755 0022 4361     		str	r3, [r0, #20]
 342:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 756              		.loc 1 342 3 is_stmt 1 view .LVU213
 342:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 757              		.loc 1 342 25 is_stmt 0 view .LVU214
 758 0024 0023     		movs	r3, #0
 759 0026 8361     		str	r3, [r0, #24]
 343:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 760              		.loc 1 343 3 is_stmt 1 view .LVU215
 343:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 761              		.loc 1 343 28 is_stmt 0 view .LVU216
 762 0028 C361     		str	r3, [r0, #28]
 344:Core/Src/main.c ****   {
 763              		.loc 1 344 3 is_stmt 1 view .LVU217
 344:Core/Src/main.c ****   {
 764              		.loc 1 344 7 is_stmt 0 view .LVU218
 765 002a FFF7FEFF 		bl	HAL_UART_Init
 766              	.LVL38:
ARM GAS  C:\Temp\ccnYm66b.s 			page 41


 344:Core/Src/main.c ****   {
 767              		.loc 1 344 6 view .LVU219
 768 002e 00B9     		cbnz	r0, .L42
 352:Core/Src/main.c **** 
 769              		.loc 1 352 1 view .LVU220
 770 0030 08BD     		pop	{r3, pc}
 771              	.L42:
 346:Core/Src/main.c ****   }
 772              		.loc 1 346 5 is_stmt 1 view .LVU221
 773 0032 FFF7FEFF 		bl	Error_Handler
 774              	.LVL39:
 775              	.L44:
 776 0036 00BF     		.align	2
 777              	.L43:
 778 0038 00000000 		.word	huart2
 779 003c 00440040 		.word	1073759232
 780              		.cfi_endproc
 781              	.LFE143:
 783              		.section	.text.MX_TIM5_Init,"ax",%progbits
 784              		.align	1
 785              		.syntax unified
 786              		.thumb
 787              		.thumb_func
 789              	MX_TIM5_Init:
 790              	.LFB142:
 282:Core/Src/main.c **** 
 791              		.loc 1 282 1 view -0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 24
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795 0000 00B5     		push	{lr}
 796              		.cfi_def_cfa_offset 4
 797              		.cfi_offset 14, -4
 798 0002 87B0     		sub	sp, sp, #28
 799              		.cfi_def_cfa_offset 32
 288:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 800              		.loc 1 288 3 view .LVU223
 288:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 801              		.loc 1 288 26 is_stmt 0 view .LVU224
 802 0004 0023     		movs	r3, #0
 803 0006 0293     		str	r3, [sp, #8]
 804 0008 0393     		str	r3, [sp, #12]
 805 000a 0493     		str	r3, [sp, #16]
 806 000c 0593     		str	r3, [sp, #20]
 289:Core/Src/main.c **** 
 807              		.loc 1 289 3 is_stmt 1 view .LVU225
 289:Core/Src/main.c **** 
 808              		.loc 1 289 27 is_stmt 0 view .LVU226
 809 000e 0093     		str	r3, [sp]
 810 0010 0193     		str	r3, [sp, #4]
 294:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
 811              		.loc 1 294 3 is_stmt 1 view .LVU227
 294:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
 812              		.loc 1 294 18 is_stmt 0 view .LVU228
 813 0012 1348     		ldr	r0, .L53
 814 0014 134A     		ldr	r2, .L53+4
 815 0016 0260     		str	r2, [r0]
ARM GAS  C:\Temp\ccnYm66b.s 			page 42


 295:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 816              		.loc 1 295 3 is_stmt 1 view .LVU229
 295:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 817              		.loc 1 295 24 is_stmt 0 view .LVU230
 818 0018 4360     		str	r3, [r0, #4]
 296:Core/Src/main.c ****   htim5.Init.Period = 4294967295;
 819              		.loc 1 296 3 is_stmt 1 view .LVU231
 296:Core/Src/main.c ****   htim5.Init.Period = 4294967295;
 820              		.loc 1 296 26 is_stmt 0 view .LVU232
 821 001a 8360     		str	r3, [r0, #8]
 297:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 822              		.loc 1 297 3 is_stmt 1 view .LVU233
 297:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 823              		.loc 1 297 21 is_stmt 0 view .LVU234
 824 001c 4FF0FF32 		mov	r2, #-1
 825 0020 C260     		str	r2, [r0, #12]
 298:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 826              		.loc 1 298 3 is_stmt 1 view .LVU235
 298:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 827              		.loc 1 298 28 is_stmt 0 view .LVU236
 828 0022 0361     		str	r3, [r0, #16]
 299:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 829              		.loc 1 299 3 is_stmt 1 view .LVU237
 299:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 830              		.loc 1 299 32 is_stmt 0 view .LVU238
 831 0024 8023     		movs	r3, #128
 832 0026 8361     		str	r3, [r0, #24]
 300:Core/Src/main.c ****   {
 833              		.loc 1 300 3 is_stmt 1 view .LVU239
 300:Core/Src/main.c ****   {
 834              		.loc 1 300 7 is_stmt 0 view .LVU240
 835 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 836              	.LVL40:
 300:Core/Src/main.c ****   {
 837              		.loc 1 300 6 view .LVU241
 838 002c 90B9     		cbnz	r0, .L50
 304:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 839              		.loc 1 304 3 is_stmt 1 view .LVU242
 304:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 840              		.loc 1 304 34 is_stmt 0 view .LVU243
 841 002e 4FF48053 		mov	r3, #4096
 842 0032 0293     		str	r3, [sp, #8]
 305:Core/Src/main.c ****   {
 843              		.loc 1 305 3 is_stmt 1 view .LVU244
 305:Core/Src/main.c ****   {
 844              		.loc 1 305 7 is_stmt 0 view .LVU245
 845 0034 02A9     		add	r1, sp, #8
 846 0036 0A48     		ldr	r0, .L53
 847 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 848              	.LVL41:
 305:Core/Src/main.c ****   {
 849              		.loc 1 305 6 view .LVU246
 850 003c 60B9     		cbnz	r0, .L51
 309:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 851              		.loc 1 309 3 is_stmt 1 view .LVU247
 309:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 852              		.loc 1 309 37 is_stmt 0 view .LVU248
ARM GAS  C:\Temp\ccnYm66b.s 			page 43


 853 003e 0023     		movs	r3, #0
 854 0040 0093     		str	r3, [sp]
 310:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 855              		.loc 1 310 3 is_stmt 1 view .LVU249
 310:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 856              		.loc 1 310 33 is_stmt 0 view .LVU250
 857 0042 0193     		str	r3, [sp, #4]
 311:Core/Src/main.c ****   {
 858              		.loc 1 311 3 is_stmt 1 view .LVU251
 311:Core/Src/main.c ****   {
 859              		.loc 1 311 7 is_stmt 0 view .LVU252
 860 0044 6946     		mov	r1, sp
 861 0046 0648     		ldr	r0, .L53
 862 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 863              	.LVL42:
 311:Core/Src/main.c ****   {
 864              		.loc 1 311 6 view .LVU253
 865 004c 30B9     		cbnz	r0, .L52
 319:Core/Src/main.c **** 
 866              		.loc 1 319 1 view .LVU254
 867 004e 07B0     		add	sp, sp, #28
 868              		.cfi_remember_state
 869              		.cfi_def_cfa_offset 4
 870              		@ sp needed
 871 0050 5DF804FB 		ldr	pc, [sp], #4
 872              	.L50:
 873              		.cfi_restore_state
 302:Core/Src/main.c ****   }
 874              		.loc 1 302 5 is_stmt 1 view .LVU255
 875 0054 FFF7FEFF 		bl	Error_Handler
 876              	.LVL43:
 877              	.L51:
 307:Core/Src/main.c ****   }
 878              		.loc 1 307 5 view .LVU256
 879 0058 FFF7FEFF 		bl	Error_Handler
 880              	.LVL44:
 881              	.L52:
 313:Core/Src/main.c ****   }
 882              		.loc 1 313 5 view .LVU257
 883 005c FFF7FEFF 		bl	Error_Handler
 884              	.LVL45:
 885              	.L54:
 886              		.align	2
 887              	.L53:
 888 0060 00000000 		.word	htim5
 889 0064 000C0040 		.word	1073744896
 890              		.cfi_endproc
 891              	.LFE142:
 893              		.section	.text.SystemClock_Config,"ax",%progbits
 894              		.align	1
 895              		.global	SystemClock_Config
 896              		.syntax unified
 897              		.thumb
 898              		.thumb_func
 900              	SystemClock_Config:
 901              	.LFB140:
 190:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  C:\Temp\ccnYm66b.s 			page 44


 902              		.loc 1 190 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 80
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906 0000 00B5     		push	{lr}
 907              		.cfi_def_cfa_offset 4
 908              		.cfi_offset 14, -4
 909 0002 95B0     		sub	sp, sp, #84
 910              		.cfi_def_cfa_offset 88
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 911              		.loc 1 191 3 view .LVU259
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 912              		.loc 1 191 22 is_stmt 0 view .LVU260
 913 0004 3022     		movs	r2, #48
 914 0006 0021     		movs	r1, #0
 915 0008 08A8     		add	r0, sp, #32
 916 000a FFF7FEFF 		bl	memset
 917              	.LVL46:
 192:Core/Src/main.c **** 
 918              		.loc 1 192 3 is_stmt 1 view .LVU261
 192:Core/Src/main.c **** 
 919              		.loc 1 192 22 is_stmt 0 view .LVU262
 920 000e 0023     		movs	r3, #0
 921 0010 0393     		str	r3, [sp, #12]
 922 0012 0493     		str	r3, [sp, #16]
 923 0014 0593     		str	r3, [sp, #20]
 924 0016 0693     		str	r3, [sp, #24]
 925 0018 0793     		str	r3, [sp, #28]
 196:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 926              		.loc 1 196 3 is_stmt 1 view .LVU263
 927              	.LBB12:
 196:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 928              		.loc 1 196 3 view .LVU264
 929 001a 0193     		str	r3, [sp, #4]
 196:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 930              		.loc 1 196 3 view .LVU265
 931 001c 1E4A     		ldr	r2, .L61
 932 001e 116C     		ldr	r1, [r2, #64]
 933 0020 41F08051 		orr	r1, r1, #268435456
 934 0024 1164     		str	r1, [r2, #64]
 196:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 935              		.loc 1 196 3 view .LVU266
 936 0026 126C     		ldr	r2, [r2, #64]
 937 0028 02F08052 		and	r2, r2, #268435456
 938 002c 0192     		str	r2, [sp, #4]
 196:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 939              		.loc 1 196 3 view .LVU267
 940 002e 019A     		ldr	r2, [sp, #4]
 941              	.LBE12:
 196:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 942              		.loc 1 196 3 view .LVU268
 197:Core/Src/main.c **** 
 943              		.loc 1 197 3 view .LVU269
 944              	.LBB13:
 197:Core/Src/main.c **** 
 945              		.loc 1 197 3 view .LVU270
 946 0030 0293     		str	r3, [sp, #8]
ARM GAS  C:\Temp\ccnYm66b.s 			page 45


 197:Core/Src/main.c **** 
 947              		.loc 1 197 3 view .LVU271
 948 0032 1A4A     		ldr	r2, .L61+4
 949 0034 1168     		ldr	r1, [r2]
 950 0036 41F44041 		orr	r1, r1, #49152
 951 003a 1160     		str	r1, [r2]
 197:Core/Src/main.c **** 
 952              		.loc 1 197 3 view .LVU272
 953 003c 1268     		ldr	r2, [r2]
 954 003e 02F44042 		and	r2, r2, #49152
 955 0042 0292     		str	r2, [sp, #8]
 197:Core/Src/main.c **** 
 956              		.loc 1 197 3 view .LVU273
 957 0044 029A     		ldr	r2, [sp, #8]
 958              	.LBE13:
 197:Core/Src/main.c **** 
 959              		.loc 1 197 3 view .LVU274
 202:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 960              		.loc 1 202 3 view .LVU275
 202:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 961              		.loc 1 202 36 is_stmt 0 view .LVU276
 962 0046 0222     		movs	r2, #2
 963 0048 0892     		str	r2, [sp, #32]
 203:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 964              		.loc 1 203 3 is_stmt 1 view .LVU277
 203:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 965              		.loc 1 203 30 is_stmt 0 view .LVU278
 966 004a 0121     		movs	r1, #1
 967 004c 0B91     		str	r1, [sp, #44]
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 968              		.loc 1 204 3 is_stmt 1 view .LVU279
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 969              		.loc 1 204 41 is_stmt 0 view .LVU280
 970 004e 1021     		movs	r1, #16
 971 0050 0C91     		str	r1, [sp, #48]
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 972              		.loc 1 205 3 is_stmt 1 view .LVU281
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 973              		.loc 1 205 34 is_stmt 0 view .LVU282
 974 0052 0E92     		str	r2, [sp, #56]
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 975              		.loc 1 206 3 is_stmt 1 view .LVU283
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 976              		.loc 1 206 35 is_stmt 0 view .LVU284
 977 0054 0F93     		str	r3, [sp, #60]
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 978              		.loc 1 207 3 is_stmt 1 view .LVU285
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 979              		.loc 1 207 30 is_stmt 0 view .LVU286
 980 0056 0823     		movs	r3, #8
 981 0058 1093     		str	r3, [sp, #64]
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 982              		.loc 1 208 3 is_stmt 1 view .LVU287
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 983              		.loc 1 208 30 is_stmt 0 view .LVU288
 984 005a 6423     		movs	r3, #100
 985 005c 1193     		str	r3, [sp, #68]
ARM GAS  C:\Temp\ccnYm66b.s 			page 46


 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 986              		.loc 1 209 3 is_stmt 1 view .LVU289
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 987              		.loc 1 209 30 is_stmt 0 view .LVU290
 988 005e 1292     		str	r2, [sp, #72]
 210:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 989              		.loc 1 210 3 is_stmt 1 view .LVU291
 210:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 990              		.loc 1 210 30 is_stmt 0 view .LVU292
 991 0060 0423     		movs	r3, #4
 992 0062 1393     		str	r3, [sp, #76]
 211:Core/Src/main.c ****   {
 993              		.loc 1 211 3 is_stmt 1 view .LVU293
 211:Core/Src/main.c ****   {
 994              		.loc 1 211 7 is_stmt 0 view .LVU294
 995 0064 08A8     		add	r0, sp, #32
 996 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 997              	.LVL47:
 211:Core/Src/main.c ****   {
 998              		.loc 1 211 6 view .LVU295
 999 006a 88B9     		cbnz	r0, .L59
 218:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1000              		.loc 1 218 3 is_stmt 1 view .LVU296
 218:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1001              		.loc 1 218 31 is_stmt 0 view .LVU297
 1002 006c 0F23     		movs	r3, #15
 1003 006e 0393     		str	r3, [sp, #12]
 220:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1004              		.loc 1 220 3 is_stmt 1 view .LVU298
 220:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1005              		.loc 1 220 34 is_stmt 0 view .LVU299
 1006 0070 0223     		movs	r3, #2
 1007 0072 0493     		str	r3, [sp, #16]
 221:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1008              		.loc 1 221 3 is_stmt 1 view .LVU300
 221:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1009              		.loc 1 221 35 is_stmt 0 view .LVU301
 1010 0074 0023     		movs	r3, #0
 1011 0076 0593     		str	r3, [sp, #20]
 222:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1012              		.loc 1 222 3 is_stmt 1 view .LVU302
 222:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1013              		.loc 1 222 36 is_stmt 0 view .LVU303
 1014 0078 4FF48052 		mov	r2, #4096
 1015 007c 0692     		str	r2, [sp, #24]
 223:Core/Src/main.c **** 
 1016              		.loc 1 223 3 is_stmt 1 view .LVU304
 223:Core/Src/main.c **** 
 1017              		.loc 1 223 36 is_stmt 0 view .LVU305
 1018 007e 0793     		str	r3, [sp, #28]
 225:Core/Src/main.c ****   {
 1019              		.loc 1 225 3 is_stmt 1 view .LVU306
 225:Core/Src/main.c ****   {
 1020              		.loc 1 225 7 is_stmt 0 view .LVU307
 1021 0080 0321     		movs	r1, #3
 1022 0082 03A8     		add	r0, sp, #12
 1023 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  C:\Temp\ccnYm66b.s 			page 47


 1024              	.LVL48:
 225:Core/Src/main.c ****   {
 1025              		.loc 1 225 6 view .LVU308
 1026 0088 20B9     		cbnz	r0, .L60
 229:Core/Src/main.c **** 
 1027              		.loc 1 229 1 view .LVU309
 1028 008a 15B0     		add	sp, sp, #84
 1029              		.cfi_remember_state
 1030              		.cfi_def_cfa_offset 4
 1031              		@ sp needed
 1032 008c 5DF804FB 		ldr	pc, [sp], #4
 1033              	.L59:
 1034              		.cfi_restore_state
 213:Core/Src/main.c ****   }
 1035              		.loc 1 213 5 is_stmt 1 view .LVU310
 1036 0090 FFF7FEFF 		bl	Error_Handler
 1037              	.LVL49:
 1038              	.L60:
 227:Core/Src/main.c ****   }
 1039              		.loc 1 227 5 view .LVU311
 1040 0094 FFF7FEFF 		bl	Error_Handler
 1041              	.LVL50:
 1042              	.L62:
 1043              		.align	2
 1044              	.L61:
 1045 0098 00380240 		.word	1073887232
 1046 009c 00700040 		.word	1073770496
 1047              		.cfi_endproc
 1048              	.LFE140:
 1050              		.section	.text.main,"ax",%progbits
 1051              		.align	1
 1052              		.global	main
 1053              		.syntax unified
 1054              		.thumb
 1055              		.thumb_func
 1057              	main:
 1058              	.LFB139:
 132:Core/Src/main.c **** 
 1059              		.loc 1 132 1 view -0
 1060              		.cfi_startproc
 1061              		@ Volatile: function does not return.
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064 0000 08B5     		push	{r3, lr}
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 3, -8
 1067              		.cfi_offset 14, -4
 141:Core/Src/main.c **** 
 1068              		.loc 1 141 3 view .LVU313
 1069 0002 FFF7FEFF 		bl	HAL_Init
 1070              	.LVL51:
 148:Core/Src/main.c **** 
 1071              		.loc 1 148 3 view .LVU314
 1072 0006 FFF7FEFF 		bl	SystemClock_Config
 1073              	.LVL52:
 155:Core/Src/main.c ****   MX_DMA_Init();
 1074              		.loc 1 155 3 view .LVU315
ARM GAS  C:\Temp\ccnYm66b.s 			page 48


 1075 000a FFF7FEFF 		bl	MX_GPIO_Init
 1076              	.LVL53:
 156:Core/Src/main.c ****   MX_TIM2_Init();
 1077              		.loc 1 156 3 view .LVU316
 1078 000e FFF7FEFF 		bl	MX_DMA_Init
 1079              	.LVL54:
 157:Core/Src/main.c ****   MX_USART2_UART_Init();
 1080              		.loc 1 157 3 view .LVU317
 1081 0012 FFF7FEFF 		bl	MX_TIM2_Init
 1082              	.LVL55:
 158:Core/Src/main.c ****   MX_TIM5_Init();
 1083              		.loc 1 158 3 view .LVU318
 1084 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 1085              	.LVL56:
 159:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1086              		.loc 1 159 3 view .LVU319
 1087 001a FFF7FEFF 		bl	MX_TIM5_Init
 1088              	.LVL57:
 161:Core/Src/main.c ****     initialCalibration();
 1089              		.loc 1 161 3 view .LVU320
 1090              	.L64:
 161:Core/Src/main.c ****     initialCalibration();
 1091              		.loc 1 161 21 view .LVU321
 1092 001e 094B     		ldr	r3, .L70
 1093 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1094 0022 012B     		cmp	r3, #1
 1095 0024 02D0     		beq	.L69
 162:Core/Src/main.c ****   }
 1096              		.loc 1 162 5 view .LVU322
 1097 0026 FFF7FEFF 		bl	initialCalibration
 1098              	.LVL58:
 1099 002a F8E7     		b	.L64
 1100              	.L69:
 165:Core/Src/main.c ****   /* USER CODE END 2 */
 1101              		.loc 1 165 3 view .LVU323
 1102 002c FFF7FEFF 		bl	initVL53L1A1
 1103              	.LVL59:
 1104              	.L66:
 171:Core/Src/main.c ****   {
 1105              		.loc 1 171 3 view .LVU324
 173:Core/Src/main.c ****       getVL53L1A1();
 1106              		.loc 1 173 5 view .LVU325
 173:Core/Src/main.c ****       getVL53L1A1();
 1107              		.loc 1 173 22 is_stmt 0 view .LVU326
 1108 0030 054B     		ldr	r3, .L70+4
 1109 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 173:Core/Src/main.c ****       getVL53L1A1();
 1110              		.loc 1 173 8 view .LVU327
 1111 0034 012B     		cmp	r3, #1
 1112 0036 FBD1     		bne	.L66
 174:Core/Src/main.c ****       clearToGetL1 = 0;
 1113              		.loc 1 174 7 is_stmt 1 view .LVU328
 1114 0038 FFF7FEFF 		bl	getVL53L1A1
 1115              	.LVL60:
 175:Core/Src/main.c ****     }
 1116              		.loc 1 175 7 view .LVU329
 175:Core/Src/main.c ****     }
ARM GAS  C:\Temp\ccnYm66b.s 			page 49


 1117              		.loc 1 175 20 is_stmt 0 view .LVU330
 1118 003c 024B     		ldr	r3, .L70+4
 1119 003e 0022     		movs	r2, #0
 1120 0040 1A70     		strb	r2, [r3]
 1121 0042 F5E7     		b	.L66
 1122              	.L71:
 1123              		.align	2
 1124              	.L70:
 1125 0044 00000000 		.word	calibrated
 1126 0048 00000000 		.word	clearToGetL1
 1127              		.cfi_endproc
 1128              	.LFE139:
 1130              		.global	clearToGetL1
 1131              		.section	.bss.clearToGetL1,"aw",%nobits
 1134              	clearToGetL1:
 1135 0000 00       		.space	1
 1136              		.global	counter
 1137              		.section	.bss.counter,"aw",%nobits
 1138              		.align	2
 1141              	counter:
 1142 0000 00000000 		.space	4
 1143              		.global	calibrated
 1144              		.section	.bss.calibrated,"aw",%nobits
 1147              	calibrated:
 1148 0000 00       		.space	1
 1149              		.global	clearToSend
 1150              		.section	.bss.clearToSend,"aw",%nobits
 1153              	clearToSend:
 1154 0000 00       		.space	1
 1155              		.global	bigBuffer
 1156              		.section	.bss.bigBuffer,"aw",%nobits
 1157              		.align	2
 1160              	bigBuffer:
 1161 0000 00000000 		.space	14
 1161      00000000 
 1161      00000000 
 1161      0000
 1162              		.global	numberOfSimulinkBytes
 1163              		.section	.rodata.numberOfSimulinkBytes,"a"
 1164              		.align	2
 1167              	numberOfSimulinkBytes:
 1168 0000 08000000 		.word	8
 1169              		.global	expectedTerminator
 1170              		.section	.rodata.expectedTerminator,"a"
 1171              		.align	2
 1174              	expectedTerminator:
 1175 0000 415F4A   		.ascii	"A_J"
 1176              		.global	expectedHeader
 1177              		.section	.rodata.expectedHeader,"a"
 1178              		.align	2
 1181              	expectedHeader:
 1182 0000 4A5F41   		.ascii	"J_A"
 1183              		.global	Profile
 1184              		.section	.bss.Profile,"aw",%nobits
 1185              		.align	2
 1188              	Profile:
 1189 0000 00000000 		.space	20
ARM GAS  C:\Temp\ccnYm66b.s 			page 50


 1189      00000000 
 1189      00000000 
 1189      00000000 
 1189      00000000 
 1190              		.global	TOF_right
 1191              		.section	.bss.TOF_right,"aw",%nobits
 1192              		.align	2
 1195              	TOF_right:
 1196 0000 00000000 		.space	72
 1196      00000000 
 1196      00000000 
 1196      00000000 
 1196      00000000 
 1197              		.global	TOF_centre
 1198              		.section	.bss.TOF_centre,"aw",%nobits
 1199              		.align	2
 1202              	TOF_centre:
 1203 0000 00000000 		.space	72
 1203      00000000 
 1203      00000000 
 1203      00000000 
 1203      00000000 
 1204              		.global	TOF_left
 1205              		.section	.bss.TOF_left,"aw",%nobits
 1206              		.align	2
 1209              	TOF_left:
 1210 0000 00000000 		.space	72
 1210      00000000 
 1210      00000000 
 1210      00000000 
 1210      00000000 
 1211              		.global	hdma_usart2_rx
 1212              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 1213              		.align	2
 1216              	hdma_usart2_rx:
 1217 0000 00000000 		.space	96
 1217      00000000 
 1217      00000000 
 1217      00000000 
 1217      00000000 
 1218              		.global	huart2
 1219              		.section	.bss.huart2,"aw",%nobits
 1220              		.align	2
 1223              	huart2:
 1224 0000 00000000 		.space	72
 1224      00000000 
 1224      00000000 
 1224      00000000 
 1224      00000000 
 1225              		.global	htim5
 1226              		.section	.bss.htim5,"aw",%nobits
 1227              		.align	2
 1230              	htim5:
 1231 0000 00000000 		.space	72
 1231      00000000 
 1231      00000000 
 1231      00000000 
ARM GAS  C:\Temp\ccnYm66b.s 			page 51


 1231      00000000 
 1232              		.global	htim2
 1233              		.section	.bss.htim2,"aw",%nobits
 1234              		.align	2
 1237              	htim2:
 1238 0000 00000000 		.space	72
 1238      00000000 
 1238      00000000 
 1238      00000000 
 1238      00000000 
 1239              		.text
 1240              	.Letext0:
 1241              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1242              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1243              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1244              		.file 6 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1245              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1246              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1247              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1248              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1249              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1250              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1251              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1252              		.file 14 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 1253              		.file 15 "Drivers/BSP/53L1A2/53l1a2_ranging_sensor.h"
 1254              		.file 16 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1255              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1256              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1257              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1258              		.file 20 "Core/Inc/VL53L1A1_Simulink.h"
 1259              		.file 21 "<built-in>"
ARM GAS  C:\Temp\ccnYm66b.s 			page 52


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\ccnYm66b.s:22     .text.configureTimer:00000000 $t
  C:\Temp\ccnYm66b.s:28     .text.configureTimer:00000000 configureTimer
  C:\Temp\ccnYm66b.s:103    .text.configureTimer:0000004c $d
  C:\Temp\ccnYm66b.s:109    .text.initialCalibration:00000000 $t
  C:\Temp\ccnYm66b.s:115    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\ccnYm66b.s:192    .text.initialCalibration:00000058 $d
  C:\Temp\ccnYm66b.s:1160   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\ccnYm66b.s:1223   .bss.huart2:00000000 huart2
  C:\Temp\ccnYm66b.s:1147   .bss.calibrated:00000000 calibrated
  C:\Temp\ccnYm66b.s:1237   .bss.htim2:00000000 htim2
  C:\Temp\ccnYm66b.s:201    .text.MX_DMA_Init:00000000 $t
  C:\Temp\ccnYm66b.s:207    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\ccnYm66b.s:253    .text.MX_DMA_Init:00000030 $d
  C:\Temp\ccnYm66b.s:258    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\ccnYm66b.s:264    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\ccnYm66b.s:516    .text.MX_GPIO_Init:00000130 $d
  C:\Temp\ccnYm66b.s:525    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\ccnYm66b.s:531    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\ccnYm66b.s:564    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\ccnYm66b.s:569    .text.Error_Handler:00000000 $t
  C:\Temp\ccnYm66b.s:575    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\ccnYm66b.s:607    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\ccnYm66b.s:612    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\ccnYm66b.s:711    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\ccnYm66b.s:716    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\ccnYm66b.s:721    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\ccnYm66b.s:778    .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\ccnYm66b.s:784    .text.MX_TIM5_Init:00000000 $t
  C:\Temp\ccnYm66b.s:789    .text.MX_TIM5_Init:00000000 MX_TIM5_Init
  C:\Temp\ccnYm66b.s:888    .text.MX_TIM5_Init:00000060 $d
  C:\Temp\ccnYm66b.s:1230   .bss.htim5:00000000 htim5
  C:\Temp\ccnYm66b.s:894    .text.SystemClock_Config:00000000 $t
  C:\Temp\ccnYm66b.s:900    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\ccnYm66b.s:1045   .text.SystemClock_Config:00000098 $d
  C:\Temp\ccnYm66b.s:1051   .text.main:00000000 $t
  C:\Temp\ccnYm66b.s:1057   .text.main:00000000 main
  C:\Temp\ccnYm66b.s:1125   .text.main:00000044 $d
  C:\Temp\ccnYm66b.s:1134   .bss.clearToGetL1:00000000 clearToGetL1
  C:\Temp\ccnYm66b.s:1135   .bss.clearToGetL1:00000000 $d
  C:\Temp\ccnYm66b.s:1141   .bss.counter:00000000 counter
  C:\Temp\ccnYm66b.s:1138   .bss.counter:00000000 $d
  C:\Temp\ccnYm66b.s:1148   .bss.calibrated:00000000 $d
  C:\Temp\ccnYm66b.s:1153   .bss.clearToSend:00000000 clearToSend
  C:\Temp\ccnYm66b.s:1154   .bss.clearToSend:00000000 $d
  C:\Temp\ccnYm66b.s:1157   .bss.bigBuffer:00000000 $d
  C:\Temp\ccnYm66b.s:1167   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\ccnYm66b.s:1164   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\ccnYm66b.s:1174   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\ccnYm66b.s:1171   .rodata.expectedTerminator:00000000 $d
  C:\Temp\ccnYm66b.s:1181   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\ccnYm66b.s:1178   .rodata.expectedHeader:00000000 $d
  C:\Temp\ccnYm66b.s:1188   .bss.Profile:00000000 Profile
  C:\Temp\ccnYm66b.s:1185   .bss.Profile:00000000 $d
  C:\Temp\ccnYm66b.s:1195   .bss.TOF_right:00000000 TOF_right
  C:\Temp\ccnYm66b.s:1192   .bss.TOF_right:00000000 $d
ARM GAS  C:\Temp\ccnYm66b.s 			page 53


  C:\Temp\ccnYm66b.s:1202   .bss.TOF_centre:00000000 TOF_centre
  C:\Temp\ccnYm66b.s:1199   .bss.TOF_centre:00000000 $d
  C:\Temp\ccnYm66b.s:1209   .bss.TOF_left:00000000 TOF_left
  C:\Temp\ccnYm66b.s:1206   .bss.TOF_left:00000000 $d
  C:\Temp\ccnYm66b.s:1216   .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
  C:\Temp\ccnYm66b.s:1213   .bss.hdma_usart2_rx:00000000 $d
  C:\Temp\ccnYm66b.s:1220   .bss.huart2:00000000 $d
  C:\Temp\ccnYm66b.s:1227   .bss.htim5:00000000 $d
  C:\Temp\ccnYm66b.s:1234   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
__aeabi_f2ulz
SystemCoreClock
HAL_UART_Receive
receivedFromSimulink
HAL_TIM_Base_Start_IT
tof_odr
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
initVL53L1A1
getVL53L1A1
