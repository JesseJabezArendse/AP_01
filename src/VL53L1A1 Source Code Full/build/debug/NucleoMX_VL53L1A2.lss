
build/debug/NucleoMX_VL53L1A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec50  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800ede8  0800ede8  0000fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee20  0800ee20  0000fe20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee28  0800ee28  0000fe28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ee2c  0800ee2c  0000fe2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800ee30  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00015400  20000078  0800eea8  00010078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20015478  0800eea8  00010478  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
 10 .comment      00000039  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00069c93  00000000  00000000  000100e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000064f2  00000000  00000000  00079d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0002e7a6  00000000  00000000  00080266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  000aea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c73  00000000  00000000  000b0f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036823  00000000  00000000  000b2b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000143b8  00000000  00000000  000e93b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007184  00000000  00000000  000fd770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000191  00000000  00000000  001048f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_ldivmod>:
 8000198:	b97b      	cbnz	r3, 80001ba <__aeabi_ldivmod+0x22>
 800019a:	b972      	cbnz	r2, 80001ba <__aeabi_ldivmod+0x22>
 800019c:	2900      	cmp	r1, #0
 800019e:	bfbe      	ittt	lt
 80001a0:	2000      	movlt	r0, #0
 80001a2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001a6:	e006      	blt.n	80001b6 <__aeabi_ldivmod+0x1e>
 80001a8:	bf08      	it	eq
 80001aa:	2800      	cmpeq	r0, #0
 80001ac:	bf1c      	itt	ne
 80001ae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001b2:	f04f 30ff 	movne.w	r0, #4294967295
 80001b6:	f000 b981 	b.w	80004bc <__aeabi_idiv0>
 80001ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80001be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c2:	2900      	cmp	r1, #0
 80001c4:	db09      	blt.n	80001da <__aeabi_ldivmod+0x42>
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	db1a      	blt.n	8000200 <__aeabi_ldivmod+0x68>
 80001ca:	f00e fca3 	bl	800eb14 <__udivmoddi4>
 80001ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d6:	b004      	add	sp, #16
 80001d8:	4770      	bx	lr
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	db1b      	blt.n	800021c <__aeabi_ldivmod+0x84>
 80001e4:	f00e fc96 	bl	800eb14 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	4252      	negs	r2, r2
 80001fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fe:	4770      	bx	lr
 8000200:	4252      	negs	r2, r2
 8000202:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000206:	f00e fc85 	bl	800eb14 <__udivmoddi4>
 800020a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000212:	b004      	add	sp, #16
 8000214:	4240      	negs	r0, r0
 8000216:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800021a:	4770      	bx	lr
 800021c:	4252      	negs	r2, r2
 800021e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000222:	f00e fc77 	bl	800eb14 <__udivmoddi4>
 8000226:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022e:	b004      	add	sp, #16
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b936 	b.w	80004bc <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f00e fc5c 	bl	800eb14 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__aeabi_dmul>:
 8000268:	b570      	push	{r4, r5, r6, lr}
 800026a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800026e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000272:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000276:	bf1d      	ittte	ne
 8000278:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800027c:	ea94 0f0c 	teqne	r4, ip
 8000280:	ea95 0f0c 	teqne	r5, ip
 8000284:	f000 f8de 	bleq	8000444 <__aeabi_dmul+0x1dc>
 8000288:	442c      	add	r4, r5
 800028a:	ea81 0603 	eor.w	r6, r1, r3
 800028e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000292:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000296:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800029a:	bf18      	it	ne
 800029c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002a8:	d038      	beq.n	800031c <__aeabi_dmul+0xb4>
 80002aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ae:	f04f 0500 	mov.w	r5, #0
 80002b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002be:	f04f 0600 	mov.w	r6, #0
 80002c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002c6:	f09c 0f00 	teq	ip, #0
 80002ca:	bf18      	it	ne
 80002cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002dc:	d204      	bcs.n	80002e8 <__aeabi_dmul+0x80>
 80002de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002e2:	416d      	adcs	r5, r5
 80002e4:	eb46 0606 	adc.w	r6, r6, r6
 80002e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000300:	bf88      	it	hi
 8000302:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000306:	d81e      	bhi.n	8000346 <__aeabi_dmul+0xde>
 8000308:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000320:	ea46 0101 	orr.w	r1, r6, r1
 8000324:	ea40 0002 	orr.w	r0, r0, r2
 8000328:	ea81 0103 	eor.w	r1, r1, r3
 800032c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000330:	bfc2      	ittt	gt
 8000332:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800033a:	bd70      	popgt	{r4, r5, r6, pc}
 800033c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000340:	f04f 0e00 	mov.w	lr, #0
 8000344:	3c01      	subs	r4, #1
 8000346:	f300 80ab 	bgt.w	80004a0 <__aeabi_dmul+0x238>
 800034a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800034e:	bfde      	ittt	le
 8000350:	2000      	movle	r0, #0
 8000352:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000356:	bd70      	pople	{r4, r5, r6, pc}
 8000358:	f1c4 0400 	rsb	r4, r4, #0
 800035c:	3c20      	subs	r4, #32
 800035e:	da35      	bge.n	80003cc <__aeabi_dmul+0x164>
 8000360:	340c      	adds	r4, #12
 8000362:	dc1b      	bgt.n	800039c <__aeabi_dmul+0x134>
 8000364:	f104 0414 	add.w	r4, r4, #20
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f305 	lsl.w	r3, r0, r5
 8000370:	fa20 f004 	lsr.w	r0, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000380:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000388:	fa21 f604 	lsr.w	r6, r1, r4
 800038c:	eb42 0106 	adc.w	r1, r2, r6
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 040c 	rsb	r4, r4, #12
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f304 	lsl.w	r3, r0, r4
 80003a8:	fa20 f005 	lsr.w	r0, r0, r5
 80003ac:	fa01 f204 	lsl.w	r2, r1, r4
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f1c4 0520 	rsb	r5, r4, #32
 80003d0:	fa00 f205 	lsl.w	r2, r0, r5
 80003d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003d8:	fa20 f304 	lsr.w	r3, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea43 0302 	orr.w	r3, r3, r2
 80003e4:	fa21 f004 	lsr.w	r0, r1, r4
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	fa21 f204 	lsr.w	r2, r1, r4
 80003f0:	ea20 0002 	bic.w	r0, r0, r2
 80003f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f094 0f00 	teq	r4, #0
 8000408:	d10f      	bne.n	800042a <__aeabi_dmul+0x1c2>
 800040a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800040e:	0040      	lsls	r0, r0, #1
 8000410:	eb41 0101 	adc.w	r1, r1, r1
 8000414:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000418:	bf08      	it	eq
 800041a:	3c01      	subeq	r4, #1
 800041c:	d0f7      	beq.n	800040e <__aeabi_dmul+0x1a6>
 800041e:	ea41 0106 	orr.w	r1, r1, r6
 8000422:	f095 0f00 	teq	r5, #0
 8000426:	bf18      	it	ne
 8000428:	4770      	bxne	lr
 800042a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800042e:	0052      	lsls	r2, r2, #1
 8000430:	eb43 0303 	adc.w	r3, r3, r3
 8000434:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000438:	bf08      	it	eq
 800043a:	3d01      	subeq	r5, #1
 800043c:	d0f7      	beq.n	800042e <__aeabi_dmul+0x1c6>
 800043e:	ea43 0306 	orr.w	r3, r3, r6
 8000442:	4770      	bx	lr
 8000444:	ea94 0f0c 	teq	r4, ip
 8000448:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800044c:	bf18      	it	ne
 800044e:	ea95 0f0c 	teqne	r5, ip
 8000452:	d00c      	beq.n	800046e <__aeabi_dmul+0x206>
 8000454:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000458:	bf18      	it	ne
 800045a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800045e:	d1d1      	bne.n	8000404 <__aeabi_dmul+0x19c>
 8000460:	ea81 0103 	eor.w	r1, r1, r3
 8000464:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd70      	pop	{r4, r5, r6, pc}
 800046e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000472:	bf06      	itte	eq
 8000474:	4610      	moveq	r0, r2
 8000476:	4619      	moveq	r1, r3
 8000478:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800047c:	d019      	beq.n	80004b2 <__aeabi_dmul+0x24a>
 800047e:	ea94 0f0c 	teq	r4, ip
 8000482:	d102      	bne.n	800048a <__aeabi_dmul+0x222>
 8000484:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000488:	d113      	bne.n	80004b2 <__aeabi_dmul+0x24a>
 800048a:	ea95 0f0c 	teq	r5, ip
 800048e:	d105      	bne.n	800049c <__aeabi_dmul+0x234>
 8000490:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000494:	bf1c      	itt	ne
 8000496:	4610      	movne	r0, r2
 8000498:	4619      	movne	r1, r3
 800049a:	d10a      	bne.n	80004b2 <__aeabi_dmul+0x24a>
 800049c:	ea81 0103 	eor.w	r1, r1, r3
 80004a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ac:	f04f 0000 	mov.w	r0, #0
 80004b0:	bd70      	pop	{r4, r5, r6, pc}
 80004b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004ba:	bd70      	pop	{r4, r5, r6, pc}

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__aeabi_drsub>:
 80004c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c4:	e002      	b.n	80004cc <__adddf3>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dsub>:
 80004c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004cc <__adddf3>:
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	bf1f      	itttt	ne
 80004e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f2:	f000 80e2 	beq.w	80006ba <__adddf3+0x1ee>
 80004f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004fe:	bfb8      	it	lt
 8000500:	426d      	neglt	r5, r5
 8000502:	dd0c      	ble.n	800051e <__adddf3+0x52>
 8000504:	442c      	add	r4, r5
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	ea82 0000 	eor.w	r0, r2, r0
 8000512:	ea83 0101 	eor.w	r1, r3, r1
 8000516:	ea80 0202 	eor.w	r2, r0, r2
 800051a:	ea81 0303 	eor.w	r3, r1, r3
 800051e:	2d36      	cmp	r5, #54	@ 0x36
 8000520:	bf88      	it	hi
 8000522:	bd30      	pophi	{r4, r5, pc}
 8000524:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000528:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800052c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000530:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000534:	d002      	beq.n	800053c <__adddf3+0x70>
 8000536:	4240      	negs	r0, r0
 8000538:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000540:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000544:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x84>
 800054a:	4252      	negs	r2, r2
 800054c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000550:	ea94 0f05 	teq	r4, r5
 8000554:	f000 80a7 	beq.w	80006a6 <__adddf3+0x1da>
 8000558:	f1a4 0401 	sub.w	r4, r4, #1
 800055c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000560:	db0d      	blt.n	800057e <__adddf3+0xb2>
 8000562:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000566:	fa22 f205 	lsr.w	r2, r2, r5
 800056a:	1880      	adds	r0, r0, r2
 800056c:	f141 0100 	adc.w	r1, r1, #0
 8000570:	fa03 f20e 	lsl.w	r2, r3, lr
 8000574:	1880      	adds	r0, r0, r2
 8000576:	fa43 f305 	asr.w	r3, r3, r5
 800057a:	4159      	adcs	r1, r3
 800057c:	e00e      	b.n	800059c <__adddf3+0xd0>
 800057e:	f1a5 0520 	sub.w	r5, r5, #32
 8000582:	f10e 0e20 	add.w	lr, lr, #32
 8000586:	2a01      	cmp	r2, #1
 8000588:	fa03 fc0e 	lsl.w	ip, r3, lr
 800058c:	bf28      	it	cs
 800058e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000592:	fa43 f305 	asr.w	r3, r3, r5
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a0:	d507      	bpl.n	80005b2 <__adddf3+0xe6>
 80005a2:	f04f 0e00 	mov.w	lr, #0
 80005a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005b6:	d31b      	bcc.n	80005f0 <__adddf3+0x124>
 80005b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005bc:	d30c      	bcc.n	80005d8 <__adddf3+0x10c>
 80005be:	0849      	lsrs	r1, r1, #1
 80005c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005c8:	f104 0401 	add.w	r4, r4, #1
 80005cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d4:	f080 809a 	bcs.w	800070c <__adddf3+0x240>
 80005d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	ea41 0105 	orr.w	r1, r1, r5
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f4:	4140      	adcs	r0, r0
 80005f6:	eb41 0101 	adc.w	r1, r1, r1
 80005fa:	3c01      	subs	r4, #1
 80005fc:	bf28      	it	cs
 80005fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000602:	d2e9      	bcs.n	80005d8 <__adddf3+0x10c>
 8000604:	f091 0f00 	teq	r1, #0
 8000608:	bf04      	itt	eq
 800060a:	4601      	moveq	r1, r0
 800060c:	2000      	moveq	r0, #0
 800060e:	fab1 f381 	clz	r3, r1
 8000612:	bf08      	it	eq
 8000614:	3320      	addeq	r3, #32
 8000616:	f1a3 030b 	sub.w	r3, r3, #11
 800061a:	f1b3 0220 	subs.w	r2, r3, #32
 800061e:	da0c      	bge.n	800063a <__adddf3+0x16e>
 8000620:	320c      	adds	r2, #12
 8000622:	dd08      	ble.n	8000636 <__adddf3+0x16a>
 8000624:	f102 0c14 	add.w	ip, r2, #20
 8000628:	f1c2 020c 	rsb	r2, r2, #12
 800062c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000630:	fa21 f102 	lsr.w	r1, r1, r2
 8000634:	e00c      	b.n	8000650 <__adddf3+0x184>
 8000636:	f102 0214 	add.w	r2, r2, #20
 800063a:	bfd8      	it	le
 800063c:	f1c2 0c20 	rsble	ip, r2, #32
 8000640:	fa01 f102 	lsl.w	r1, r1, r2
 8000644:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000648:	bfdc      	itt	le
 800064a:	ea41 010c 	orrle.w	r1, r1, ip
 800064e:	4090      	lslle	r0, r2
 8000650:	1ae4      	subs	r4, r4, r3
 8000652:	bfa2      	ittt	ge
 8000654:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000658:	4329      	orrge	r1, r5
 800065a:	bd30      	popge	{r4, r5, pc}
 800065c:	ea6f 0404 	mvn.w	r4, r4
 8000660:	3c1f      	subs	r4, #31
 8000662:	da1c      	bge.n	800069e <__adddf3+0x1d2>
 8000664:	340c      	adds	r4, #12
 8000666:	dc0e      	bgt.n	8000686 <__adddf3+0x1ba>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0220 	rsb	r2, r4, #32
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f302 	lsl.w	r3, r1, r2
 8000678:	ea40 0003 	orr.w	r0, r0, r3
 800067c:	fa21 f304 	lsr.w	r3, r1, r4
 8000680:	ea45 0103 	orr.w	r1, r5, r3
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	f1c4 040c 	rsb	r4, r4, #12
 800068a:	f1c4 0220 	rsb	r2, r4, #32
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	fa01 f304 	lsl.w	r3, r1, r4
 8000696:	ea40 0003 	orr.w	r0, r0, r3
 800069a:	4629      	mov	r1, r5
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	fa21 f004 	lsr.w	r0, r1, r4
 80006a2:	4629      	mov	r1, r5
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	f094 0f00 	teq	r4, #0
 80006aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ae:	bf06      	itte	eq
 80006b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b4:	3401      	addeq	r4, #1
 80006b6:	3d01      	subne	r5, #1
 80006b8:	e74e      	b.n	8000558 <__adddf3+0x8c>
 80006ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006be:	bf18      	it	ne
 80006c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c4:	d029      	beq.n	800071a <__adddf3+0x24e>
 80006c6:	ea94 0f05 	teq	r4, r5
 80006ca:	bf08      	it	eq
 80006cc:	ea90 0f02 	teqeq	r0, r2
 80006d0:	d005      	beq.n	80006de <__adddf3+0x212>
 80006d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006d6:	bf04      	itt	eq
 80006d8:	4619      	moveq	r1, r3
 80006da:	4610      	moveq	r0, r2
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea91 0f03 	teq	r1, r3
 80006e2:	bf1e      	ittt	ne
 80006e4:	2100      	movne	r1, #0
 80006e6:	2000      	movne	r0, #0
 80006e8:	bd30      	popne	{r4, r5, pc}
 80006ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ee:	d105      	bne.n	80006fc <__adddf3+0x230>
 80006f0:	0040      	lsls	r0, r0, #1
 80006f2:	4149      	adcs	r1, r1
 80006f4:	bf28      	it	cs
 80006f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000700:	bf3c      	itt	cc
 8000702:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000706:	bd30      	popcc	{r4, r5, pc}
 8000708:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800070c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071e:	bf1a      	itte	ne
 8000720:	4619      	movne	r1, r3
 8000722:	4610      	movne	r0, r2
 8000724:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000728:	bf1c      	itt	ne
 800072a:	460b      	movne	r3, r1
 800072c:	4602      	movne	r2, r0
 800072e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000732:	bf06      	itte	eq
 8000734:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000738:	ea91 0f03 	teqeq	r1, r3
 800073c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	bf00      	nop

08000744 <__aeabi_ui2d>:
 8000744:	f090 0f00 	teq	r0, #0
 8000748:	bf04      	itt	eq
 800074a:	2100      	moveq	r1, #0
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000754:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000758:	f04f 0500 	mov.w	r5, #0
 800075c:	f04f 0100 	mov.w	r1, #0
 8000760:	e750      	b.n	8000604 <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_i2d>:
 8000764:	f090 0f00 	teq	r0, #0
 8000768:	bf04      	itt	eq
 800076a:	2100      	moveq	r1, #0
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000774:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000778:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800077c:	bf48      	it	mi
 800077e:	4240      	negmi	r0, r0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e73e      	b.n	8000604 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_f2d>:
 8000788:	0042      	lsls	r2, r0, #1
 800078a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800078e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000792:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000796:	bf1f      	itttt	ne
 8000798:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800079c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a4:	4770      	bxne	lr
 80007a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007aa:	bf08      	it	eq
 80007ac:	4770      	bxeq	lr
 80007ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b2:	bf04      	itt	eq
 80007b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	e71c      	b.n	8000604 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_ul2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f04f 0500 	mov.w	r5, #0
 80007da:	e00a      	b.n	80007f2 <__aeabi_l2d+0x16>

080007dc <__aeabi_l2d>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	b530      	push	{r4, r5, lr}
 80007e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ea:	d502      	bpl.n	80007f2 <__aeabi_l2d+0x16>
 80007ec:	4240      	negs	r0, r0
 80007ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007fe:	f43f aed8 	beq.w	80005b2 <__adddf3+0xe6>
 8000802:	f04f 0203 	mov.w	r2, #3
 8000806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080a:	bf18      	it	ne
 800080c:	3203      	addne	r2, #3
 800080e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000812:	bf18      	it	ne
 8000814:	3203      	addne	r2, #3
 8000816:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081a:	f1c2 0320 	rsb	r3, r2, #32
 800081e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	fa01 fe03 	lsl.w	lr, r1, r3
 800082a:	ea40 000e 	orr.w	r0, r0, lr
 800082e:	fa21 f102 	lsr.w	r1, r1, r2
 8000832:	4414      	add	r4, r2
 8000834:	e6bd      	b.n	80005b2 <__adddf3+0xe6>
 8000836:	bf00      	nop

08000838 <__aeabi_d2uiz>:
 8000838:	004a      	lsls	r2, r1, #1
 800083a:	d211      	bcs.n	8000860 <__aeabi_d2uiz+0x28>
 800083c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000840:	d211      	bcs.n	8000866 <__aeabi_d2uiz+0x2e>
 8000842:	d50d      	bpl.n	8000860 <__aeabi_d2uiz+0x28>
 8000844:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000848:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800084c:	d40e      	bmi.n	800086c <__aeabi_d2uiz+0x34>
 800084e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000852:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000856:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085a:	fa23 f002 	lsr.w	r0, r3, r2
 800085e:	4770      	bx	lr
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	4770      	bx	lr
 8000866:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086a:	d102      	bne.n	8000872 <__aeabi_d2uiz+0x3a>
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	4770      	bx	lr
 8000872:	f04f 0000 	mov.w	r0, #0
 8000876:	4770      	bx	lr

08000878 <__do_global_dtors_aux>:
 8000878:	b510      	push	{r4, lr}
 800087a:	4c05      	ldr	r4, [pc, #20]	@ (8000890 <__do_global_dtors_aux+0x18>)
 800087c:	7823      	ldrb	r3, [r4, #0]
 800087e:	b933      	cbnz	r3, 800088e <__do_global_dtors_aux+0x16>
 8000880:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <__do_global_dtors_aux+0x1c>)
 8000882:	b113      	cbz	r3, 800088a <__do_global_dtors_aux+0x12>
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <__do_global_dtors_aux+0x20>)
 8000886:	f3af 8000 	nop.w
 800088a:	2301      	movs	r3, #1
 800088c:	7023      	strb	r3, [r4, #0]
 800088e:	bd10      	pop	{r4, pc}
 8000890:	20000078 	.word	0x20000078
 8000894:	00000000 	.word	0x00000000
 8000898:	0800edd0 	.word	0x0800edd0

0800089c <frame_dummy>:
 800089c:	b508      	push	{r3, lr}
 800089e:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <frame_dummy+0x10>)
 80008a0:	b11b      	cbz	r3, 80008aa <frame_dummy+0xe>
 80008a2:	4903      	ldr	r1, [pc, #12]	@ (80008b0 <frame_dummy+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <frame_dummy+0x18>)
 80008a6:	f3af 8000 	nop.w
 80008aa:	bd08      	pop	{r3, pc}
 80008ac:	00000000 	.word	0x00000000
 80008b0:	2000007c 	.word	0x2000007c
 80008b4:	0800edd0 	.word	0x0800edd0

080008b8 <_I2cFailRecover>:
  uint8_t i;
  uint8_t retry_cnt = 0;
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80008b8:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <_I2cFailRecover+0xd8>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d062      	beq.n	8000986 <_I2cFailRecover+0xce>
{
 80008c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008c4:	b087      	sub	sp, #28
  {
    return BSP_ERROR_NONE;
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2600      	movs	r6, #0
 80008c8:	9600      	str	r6, [sp, #0]
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <_I2cFailRecover+0xdc>)
 80008cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008ce:	f042 0202 	orr.w	r2, r2, #2
 80008d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80008de:	f44f 7880 	mov.w	r8, #256	@ 0x100
 80008e2:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008e6:	f04f 0911 	mov.w	r9, #17
 80008ea:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	2501      	movs	r5, #1
 80008f0:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80008f2:	4c29      	ldr	r4, [pc, #164]	@ (8000998 <_I2cFailRecover+0xe0>)
 80008f4:	a901      	add	r1, sp, #4
 80008f6:	4620      	mov	r0, r4
 80008f8:	f001 f8da 	bl	8001ab0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 80008fc:	f44f 7700 	mov.w	r7, #512	@ 0x200
 8000900:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000902:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000908:	a901      	add	r1, sp, #4
 800090a:	4620      	mov	r0, r4
 800090c:	f001 f8d0 	bl	8001ab0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8000910:	462a      	mov	r2, r5
 8000912:	4641      	mov	r1, r8
 8000914:	4620      	mov	r0, r4
 8000916:	f001 fa3e 	bl	8001d96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 800091a:	462a      	mov	r2, r5
 800091c:	4639      	mov	r1, r7
 800091e:	4620      	mov	r0, r4
 8000920:	f001 fa39 	bl	8001d96 <HAL_GPIO_WritePin>
 8000924:	e020      	b.n	8000968 <_I2cFailRecover+0xb0>

  do
  {
    for (i = 0; i < 10U; i++)
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8000926:	4d1c      	ldr	r5, [pc, #112]	@ (8000998 <_I2cFailRecover+0xe0>)
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800092e:	4628      	mov	r0, r5
 8000930:	f001 fa31 	bl	8001d96 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fe81 	bl	800163c <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000940:	4628      	mov	r0, r5
 8000942:	f001 fa28 	bl	8001d96 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000946:	2001      	movs	r0, #1
 8000948:	f000 fe78 	bl	800163c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800094c:	3401      	adds	r4, #1
 800094e:	b2e4      	uxtb	r4, r4
 8000950:	2c09      	cmp	r4, #9
 8000952:	d9e8      	bls.n	8000926 <_I2cFailRecover+0x6e>
    }
    retry_cnt++;
 8000954:	3601      	adds	r6, #1
 8000956:	b2f6      	uxtb	r6, r6
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8000958:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095c:	480e      	ldr	r0, [pc, #56]	@ (8000998 <_I2cFailRecover+0xe0>)
 800095e:	f001 fa13 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000962:	b918      	cbnz	r0, 800096c <_I2cFailRecover+0xb4>
 8000964:	2e06      	cmp	r6, #6
 8000966:	d801      	bhi.n	800096c <_I2cFailRecover+0xb4>
    for (i = 0; i < 10U; i++)
 8000968:	2400      	movs	r4, #0
 800096a:	e7f1      	b.n	8000950 <_I2cFailRecover+0x98>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 800096c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <_I2cFailRecover+0xe0>)
 8000972:	f001 fa09 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000976:	b140      	cbz	r0, 800098a <_I2cFailRecover+0xd2>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  is_already_init = 1U;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <_I2cFailRecover+0xd8>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800097e:	2000      	movs	r0, #0
}
 8000980:	b007      	add	sp, #28
 8000982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BSP_ERROR_NONE;
 8000986:	2000      	movs	r0, #0
}
 8000988:	4770      	bx	lr
    return BSP_ERROR_COMPONENT_FAILURE;
 800098a:	f06f 0004 	mvn.w	r0, #4
 800098e:	e7f7      	b.n	8000980 <_I2cFailRecover+0xc8>
 8000990:	20000094 	.word	0x20000094
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400

0800099c <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	4616      	mov	r6, r2
 80009a2:	461d      	mov	r5, r3
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80009a4:	f88d 100f 	strb.w	r1, [sp, #15]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_HI2C, I2cExpAddr, &RegAddr, 1, 100);
 80009a8:	b284      	uxth	r4, r0
 80009aa:	2164      	movs	r1, #100	@ 0x64
 80009ac:	9100      	str	r1, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	f10d 020f 	add.w	r2, sp, #15
 80009b4:	4621      	mov	r1, r4
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <_ExpanderRd+0x3c>)
 80009b8:	f001 fd64 	bl	8002484 <HAL_I2C_Master_Transmit>

    if (status)
 80009bc:	b108      	cbz	r0, 80009c2 <_ExpanderRd+0x26>
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
}
 80009be:	b004      	add	sp, #16
 80009c0:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_I2C_Master_Receive(&VL53L1A2_HI2C, I2cExpAddr, data, n_data, n_data * 100);
 80009c2:	2364      	movs	r3, #100	@ 0x64
 80009c4:	fb05 f303 	mul.w	r3, r5, r3
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	b2ab      	uxth	r3, r5
 80009cc:	4632      	mov	r2, r6
 80009ce:	4621      	mov	r1, r4
 80009d0:	4801      	ldr	r0, [pc, #4]	@ (80009d8 <_ExpanderRd+0x3c>)
 80009d2:	f001 fe13 	bl	80025fc <HAL_I2C_Master_Receive>
  return status;
 80009d6:	e7f2      	b.n	80009be <_ExpanderRd+0x22>
 80009d8:	200152a4 	.word	0x200152a4

080009dc <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80009dc:	b530      	push	{r4, r5, lr}
 80009de:	b087      	sub	sp, #28
 80009e0:	4605      	mov	r5, r0
 80009e2:	4608      	mov	r0, r1
 80009e4:	4611      	mov	r1, r2
 80009e6:	461c      	mov	r4, r3
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80009e8:	f88d 0008 	strb.w	r0, [sp, #8]
  memcpy(RegAddr + 1, data, n_data);
 80009ec:	461a      	mov	r2, r3
 80009ee:	f10d 0009 	add.w	r0, sp, #9
 80009f2:	f00e f861 	bl	800eab8 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_HI2C, I2cExpAddr, RegAddr, n_data + 1, 100);
 80009f6:	1c63      	adds	r3, r4, #1
 80009f8:	2264      	movs	r2, #100	@ 0x64
 80009fa:	9200      	str	r2, [sp, #0]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	aa02      	add	r2, sp, #8
 8000a00:	b2a9      	uxth	r1, r5
 8000a02:	4802      	ldr	r0, [pc, #8]	@ (8000a0c <_ExpanderWR+0x30>)
 8000a04:	f001 fd3e 	bl	8002484 <HAL_I2C_Master_Transmit>
  VL53L1A2_PutI2cBus();

  return status;
}
 8000a08:	b007      	add	sp, #28
 8000a0a:	bd30      	pop	{r4, r5, pc}
 8000a0c:	200152a4 	.word	0x200152a4

08000a10 <_ExpandersSetAllIO>:
{
 8000a10:	b508      	push	{r3, lr}
  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8000a12:	2302      	movs	r3, #2
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <_ExpandersSetAllIO+0x20>)
 8000a16:	2112      	movs	r1, #18
 8000a18:	2086      	movs	r0, #134	@ 0x86
 8000a1a:	f7ff ffdf 	bl	80009dc <_ExpanderWR>
  if (status)
 8000a1e:	b100      	cbz	r0, 8000a22 <_ExpandersSetAllIO+0x12>
}
 8000a20:	bd08      	pop	{r3, pc}
  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8000a22:	2302      	movs	r3, #2
 8000a24:	4a03      	ldr	r2, [pc, #12]	@ (8000a34 <_ExpandersSetAllIO+0x24>)
 8000a26:	2112      	movs	r1, #18
 8000a28:	2084      	movs	r0, #132	@ 0x84
 8000a2a:	f7ff ffd7 	bl	80009dc <_ExpanderWR>
  return status;
 8000a2e:	e7f7      	b.n	8000a20 <_ExpandersSetAllIO+0x10>
 8000a30:	20000098 	.word	0x20000098
 8000a34:	2000009a 	.word	0x2000009a

08000a38 <VL53L1A2_Init>:
  if (InitCounter++ == 0U)
 8000a38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae8 <VL53L1A2_Init+0xb0>)
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	1c59      	adds	r1, r3, #1
 8000a3e:	6011      	str	r1, [r2, #0]
 8000a40:	b10b      	cbz	r3, 8000a46 <VL53L1A2_Init+0xe>
  int32_t status = 0;
 8000a42:	2000      	movs	r0, #0
}
 8000a44:	4770      	bx	lr
{
 8000a46:	b510      	push	{r4, lr}
 8000a48:	b082      	sub	sp, #8
    status |= _I2cFailRecover();
 8000a4a:	f7ff ff35 	bl	80008b8 <_I2cFailRecover>
 8000a4e:	4604      	mov	r4, r0
    status |= VL53L1A2_I2C_INIT();
 8000a50:	f003 f92a 	bl	8003ca8 <BSP_I2C1_Init>
    if (status != BSP_ERROR_NONE)
 8000a54:	4320      	orrs	r0, r4
 8000a56:	d001      	beq.n	8000a5c <VL53L1A2_Init+0x24>
}
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd10      	pop	{r4, pc}
	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	aa01      	add	r2, sp, #4
 8000a60:	2100      	movs	r1, #0
 8000a62:	2086      	movs	r0, #134	@ 0x86
 8000a64:	f7ff ff9a 	bl	800099c <_ExpanderRd>
	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d1f5      	bne.n	8000a58 <VL53L1A2_Init+0x20>
 8000a6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f1      	bne.n	8000a58 <VL53L1A2_Init+0x20>
 8000a74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000a78:	2b16      	cmp	r3, #22
 8000a7a:	d1ed      	bne.n	8000a58 <VL53L1A2_Init+0x20>
	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	aa01      	add	r2, sp, #4
 8000a80:	2100      	movs	r1, #0
 8000a82:	2084      	movs	r0, #132	@ 0x84
 8000a84:	f7ff ff8a 	bl	800099c <_ExpanderRd>
	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d1e5      	bne.n	8000a58 <VL53L1A2_Init+0x20>
 8000a8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1e1      	bne.n	8000a58 <VL53L1A2_Init+0x20>
 8000a94:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000a98:	2b16      	cmp	r3, #22
 8000a9a:	d1dd      	bne.n	8000a58 <VL53L1A2_Init+0x20>
	  CurIOVal.u32 = 0x0U;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <VL53L1A2_Init+0xb4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	  ExpanderData[0] = 0xFFU;
 8000aa2:	23ff      	movs	r3, #255	@ 0xff
 8000aa4:	f88d 3004 	strb.w	r3, [sp, #4]
	  ExpanderData[1] = 0xFFU;
 8000aa8:	f88d 3005 	strb.w	r3, [sp, #5]
	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8000aac:	2302      	movs	r3, #2
 8000aae:	aa01      	add	r2, sp, #4
 8000ab0:	2114      	movs	r1, #20
 8000ab2:	2086      	movs	r0, #134	@ 0x86
 8000ab4:	f7ff ff92 	bl	80009dc <_ExpanderWR>
	  if (status)
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d1cd      	bne.n	8000a58 <VL53L1A2_Init+0x20>
	  ExpanderData[0] = 0xFFU;
 8000abc:	23ff      	movs	r3, #255	@ 0xff
 8000abe:	f88d 3004 	strb.w	r3, [sp, #4]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8000ac2:	23bf      	movs	r3, #191	@ 0xbf
 8000ac4:	f88d 3005 	strb.w	r3, [sp, #5]
	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8000ac8:	2302      	movs	r3, #2
 8000aca:	aa01      	add	r2, sp, #4
 8000acc:	2114      	movs	r1, #20
 8000ace:	2084      	movs	r0, #132	@ 0x84
 8000ad0:	f7ff ff84 	bl	80009dc <_ExpanderWR>
	  if (status)
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	d1bf      	bne.n	8000a58 <VL53L1A2_Init+0x20>
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <VL53L1A2_Init+0xb4>)
 8000ada:	f06f 22c0 	mvn.w	r2, #3221274624	@ 0xc000c000
 8000ade:	601a      	str	r2, [r3, #0]
	  status = _ExpandersSetAllIO();
 8000ae0:	f7ff ff96 	bl	8000a10 <_ExpandersSetAllIO>
done_err:
 8000ae4:	e7b8      	b.n	8000a58 <VL53L1A2_Init+0x20>
 8000ae6:	bf00      	nop
 8000ae8:	2000009c 	.word	0x2000009c
 8000aec:	20000098 	.word	0x20000098

08000af0 <VL53L1A2_ResetId>:
{
 8000af0:	b508      	push	{r3, lr}
  switch (DevNo)
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d005      	beq.n	8000b02 <VL53L1A2_ResetId+0x12>
 8000af6:	2802      	cmp	r0, #2
 8000af8:	d023      	beq.n	8000b42 <VL53L1A2_ResetId+0x52>
 8000afa:	b190      	cbz	r0, 8000b22 <VL53L1A2_ResetId+0x32>
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000b00:	bd08      	pop	{r3, pc}
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8000b02:	4a18      	ldr	r2, [pc, #96]	@ (8000b64 <VL53L1A2_ResetId+0x74>)
 8000b04:	78d3      	ldrb	r3, [r2, #3]
 8000b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b0a:	70d3      	strb	r3, [r2, #3]
      if (state)
 8000b0c:	b111      	cbz	r1, 8000b14 <VL53L1A2_ResetId+0x24>
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8000b0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b12:	70d3      	strb	r3, [r2, #3]
      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8000b14:	2301      	movs	r3, #1
 8000b16:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <VL53L1A2_ResetId+0x78>)
 8000b18:	2113      	movs	r1, #19
 8000b1a:	2084      	movs	r0, #132	@ 0x84
 8000b1c:	f7ff ff5e 	bl	80009dc <_ExpanderWR>
      break;
 8000b20:	e7ee      	b.n	8000b00 <VL53L1A2_ResetId+0x10>
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <VL53L1A2_ResetId+0x74>)
 8000b24:	7853      	ldrb	r3, [r2, #1]
 8000b26:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 8000b2a:	7053      	strb	r3, [r2, #1]
      if (state)
 8000b2c:	b111      	cbz	r1, 8000b34 <VL53L1A2_ResetId+0x44>
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b32:	7053      	strb	r3, [r2, #1]
      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8000b34:	2301      	movs	r3, #1
 8000b36:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <VL53L1A2_ResetId+0x7c>)
 8000b38:	2113      	movs	r1, #19
 8000b3a:	2086      	movs	r0, #134	@ 0x86
 8000b3c:	f7ff ff4e 	bl	80009dc <_ExpanderWR>
      break;
 8000b40:	e7de      	b.n	8000b00 <VL53L1A2_ResetId+0x10>
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <VL53L1A2_ResetId+0x74>)
 8000b44:	7853      	ldrb	r3, [r2, #1]
 8000b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4a:	7053      	strb	r3, [r2, #1]
      if (state)
 8000b4c:	b111      	cbz	r1, 8000b54 <VL53L1A2_ResetId+0x64>
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8000b4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b52:	7053      	strb	r3, [r2, #1]
      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8000b54:	2301      	movs	r3, #1
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <VL53L1A2_ResetId+0x7c>)
 8000b58:	2113      	movs	r1, #19
 8000b5a:	2086      	movs	r0, #134	@ 0x86
 8000b5c:	f7ff ff3e 	bl	80009dc <_ExpanderWR>
  return status;
 8000b60:	e7ce      	b.n	8000b00 <VL53L1A2_ResetId+0x10>
 8000b62:	bf00      	nop
 8000b64:	20000098 	.word	0x20000098
 8000b68:	2000009b 	.word	0x2000009b
 8000b6c:	20000099 	.word	0x20000099

08000b70 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8000b70:	b530      	push	{r4, r5, lr}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	4605      	mov	r5, r0
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8000b76:	2352      	movs	r3, #82	@ 0x52
 8000b78:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = VL53L1A2_I2C_INIT;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <VL53L1CB_Probe+0x90>)
 8000b7e:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = VL53L1A2_I2C_DEINIT;
 8000b80:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <VL53L1CB_Probe+0x94>)
 8000b82:	9303      	str	r3, [sp, #12]
  IOCtx.WriteReg    = VL53L1A2_I2C_WRITEREG;
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <VL53L1CB_Probe+0x98>)
 8000b86:	9305      	str	r3, [sp, #20]
  IOCtx.ReadReg     = VL53L1A2_I2C_READREG;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <VL53L1CB_Probe+0x9c>)
 8000b8a:	9306      	str	r3, [sp, #24]
  IOCtx.GetTick     = VL53L1A2_GETTICK;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <VL53L1CB_Probe+0xa0>)
 8000b8e:	9307      	str	r3, [sp, #28]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8000b90:	f646 7378 	movw	r3, #28536	@ 0x6f78
 8000b94:	4c1f      	ldr	r4, [pc, #124]	@ (8000c14 <VL53L1CB_Probe+0xa4>)
 8000b96:	fb03 4400 	mla	r4, r3, r0, r4
 8000b9a:	a902      	add	r1, sp, #8
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f00d ff0a 	bl	800e9b6 <VL53L1CB_RegisterBusIO>
 8000ba2:	bb08      	cbnz	r0, 8000be8 <VL53L1CB_Probe+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8000ba4:	a901      	add	r1, sp, #4
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f00d fd0c 	bl	800e5c4 <VL53L1CB_ReadID>
 8000bac:	b9f8      	cbnz	r0, 8000bee <VL53L1CB_Probe+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if (id != VL53L1CB_ID)
 8000bae:	9a01      	ldr	r2, [sp, #4]
 8000bb0:	f64e 23cc 	movw	r3, #60108	@ 0xeacc
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d11d      	bne.n	8000bf4 <VL53L1CB_Probe+0x84>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <VL53L1CB_Probe+0xa8>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <VL53L1CB_Probe+0xac>)
 8000bbc:	6013      	str	r3, [r2, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8000bbe:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <VL53L1CB_Probe+0xb0>)
 8000bc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	4798      	blx	r3
 8000bca:	b9b0      	cbnz	r0, 8000bfa <VL53L1CB_Probe+0x8a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <VL53L1CB_Probe+0xac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	4914      	ldr	r1, [pc, #80]	@ (8000c24 <VL53L1CB_Probe+0xb4>)
 8000bd4:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <VL53L1CB_Probe+0xb0>)
 8000bd6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8000bda:	4798      	blx	r3
 8000bdc:	b908      	cbnz	r0, 8000be2 <VL53L1CB_Probe+0x72>
      }
    }
  }

  return ret;
}
 8000bde:	b009      	add	sp, #36	@ 0x24
 8000be0:	bd30      	pop	{r4, r5, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8000be2:	f06f 0004 	mvn.w	r0, #4
 8000be6:	e7fa      	b.n	8000bde <VL53L1CB_Probe+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000be8:	f06f 0004 	mvn.w	r0, #4
 8000bec:	e7f7      	b.n	8000bde <VL53L1CB_Probe+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000bee:	f06f 0004 	mvn.w	r0, #4
 8000bf2:	e7f4      	b.n	8000bde <VL53L1CB_Probe+0x6e>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000bf4:	f06f 0006 	mvn.w	r0, #6
 8000bf8:	e7f1      	b.n	8000bde <VL53L1CB_Probe+0x6e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8000bfa:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8000bfe:	e7ee      	b.n	8000bde <VL53L1CB_Probe+0x6e>
 8000c00:	08003ca9 	.word	0x08003ca9
 8000c04:	08003bc1 	.word	0x08003bc1
 8000c08:	08003bf9 	.word	0x08003bf9
 8000c0c:	08003c35 	.word	0x08003c35
 8000c10:	08003c71 	.word	0x08003c71
 8000c14:	200000a0 	.word	0x200000a0
 8000c18:	20000040 	.word	0x20000040
 8000c1c:	20014f18 	.word	0x20014f18
 8000c20:	20014f1c 	.word	0x20014f1c
 8000c24:	20014f08 	.word	0x20014f08

08000c28 <VL53L1A2_RANGING_SENSOR_ReadID>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000c28:	2802      	cmp	r0, #2
 8000c2a:	d80e      	bhi.n	8000c4a <VL53L1A2_RANGING_SENSOR_ReadID+0x22>
{
 8000c2c:	b508      	push	{r3, lr}
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <VL53L1A2_RANGING_SENSOR_ReadID+0x28>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <VL53L1A2_RANGING_SENSOR_ReadID+0x2c>)
 8000c36:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000c3a:	4798      	blx	r3
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	db01      	blt.n	8000c44 <VL53L1A2_RANGING_SENSOR_ReadID+0x1c>
    ret = BSP_ERROR_NONE;
 8000c40:	2000      	movs	r0, #0
}
 8000c42:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000c44:	f06f 0004 	mvn.w	r0, #4
 8000c48:	e7fb      	b.n	8000c42 <VL53L1A2_RANGING_SENSOR_ReadID+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8000c4a:	f06f 0001 	mvn.w	r0, #1
}
 8000c4e:	4770      	bx	lr
 8000c50:	20014f18 	.word	0x20014f18
 8000c54:	20014f1c 	.word	0x20014f1c

08000c58 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d80e      	bhi.n	8000c7a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x22>
{
 8000c5c:	b508      	push	{r3, lr}
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x28>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x2c>)
 8000c66:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000c6a:	4798      	blx	r3
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	db01      	blt.n	8000c74 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x1c>
    ret = BSP_ERROR_NONE;
 8000c70:	2000      	movs	r0, #0
}
 8000c72:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000c74:	f06f 0004 	mvn.w	r0, #4
 8000c78:	e7fb      	b.n	8000c72 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8000c7a:	f06f 0001 	mvn.w	r0, #1
}
 8000c7e:	4770      	bx	lr
 8000c80:	20014f18 	.word	0x20014f18
 8000c84:	20014f1c 	.word	0x20014f1c

08000c88 <VL53L1A2_RANGING_SENSOR_ConfigROI>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d811      	bhi.n	8000cb0 <VL53L1A2_RANGING_SENSOR_ConfigROI+0x28>
{
 8000c8c:	b508      	push	{r3, lr}
  else if (VL53L1A2_RANGING_SENSOR_Cap.CustomROI == 0U)
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <VL53L1A2_RANGING_SENSOR_ConfigROI+0x34>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	b183      	cbz	r3, 8000cb6 <VL53L1A2_RANGING_SENSOR_ConfigROI+0x2e>
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigROI(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <VL53L1A2_RANGING_SENSOR_ConfigROI+0x38>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <VL53L1A2_RANGING_SENSOR_ConfigROI+0x3c>)
 8000c9c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000ca0:	4798      	blx	r3
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	db01      	blt.n	8000caa <VL53L1A2_RANGING_SENSOR_ConfigROI+0x22>
    ret = BSP_ERROR_NONE;
 8000ca6:	2000      	movs	r0, #0
}
 8000ca8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000caa:	f06f 0004 	mvn.w	r0, #4
 8000cae:	e7fb      	b.n	8000ca8 <VL53L1A2_RANGING_SENSOR_ConfigROI+0x20>
    ret = BSP_ERROR_WRONG_PARAM;
 8000cb0:	f06f 0001 	mvn.w	r0, #1
}
 8000cb4:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000cb6:	f06f 000a 	mvn.w	r0, #10
 8000cba:	e7f5      	b.n	8000ca8 <VL53L1A2_RANGING_SENSOR_ConfigROI+0x20>
 8000cbc:	20014f08 	.word	0x20014f08
 8000cc0:	20014f18 	.word	0x20014f18
 8000cc4:	20014f1c 	.word	0x20014f1c

08000cc8 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000cc8:	2802      	cmp	r0, #2
 8000cca:	d80e      	bhi.n	8000cea <VL53L1A2_RANGING_SENSOR_GetDistance+0x22>
{
 8000ccc:	b508      	push	{r3, lr}
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <VL53L1A2_RANGING_SENSOR_GetDistance+0x28>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <VL53L1A2_RANGING_SENSOR_GetDistance+0x2c>)
 8000cd6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000cda:	4798      	blx	r3
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	db01      	blt.n	8000ce4 <VL53L1A2_RANGING_SENSOR_GetDistance+0x1c>
    ret = BSP_ERROR_NONE;
 8000ce0:	2000      	movs	r0, #0
}
 8000ce2:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000ce4:	f06f 0004 	mvn.w	r0, #4
 8000ce8:	e7fb      	b.n	8000ce2 <VL53L1A2_RANGING_SENSOR_GetDistance+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8000cea:	f06f 0001 	mvn.w	r0, #1
}
 8000cee:	4770      	bx	lr
 8000cf0:	20014f18 	.word	0x20014f18
 8000cf4:	20014f1c 	.word	0x20014f1c

08000cf8 <VL53L1A2_RANGING_SENSOR_Start>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000cf8:	2802      	cmp	r0, #2
 8000cfa:	d80e      	bhi.n	8000d1a <VL53L1A2_RANGING_SENSOR_Start+0x22>
{
 8000cfc:	b508      	push	{r3, lr}
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <VL53L1A2_RANGING_SENSOR_Start+0x28>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <VL53L1A2_RANGING_SENSOR_Start+0x2c>)
 8000d06:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d0a:	4798      	blx	r3
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	db01      	blt.n	8000d14 <VL53L1A2_RANGING_SENSOR_Start+0x1c>
    ret = BSP_ERROR_NONE;
 8000d10:	2000      	movs	r0, #0
}
 8000d12:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000d14:	f06f 0004 	mvn.w	r0, #4
 8000d18:	e7fb      	b.n	8000d12 <VL53L1A2_RANGING_SENSOR_Start+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8000d1a:	f06f 0001 	mvn.w	r0, #1
}
 8000d1e:	4770      	bx	lr
 8000d20:	20014f18 	.word	0x20014f18
 8000d24:	20014f1c 	.word	0x20014f1c

08000d28 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000d28:	2802      	cmp	r0, #2
 8000d2a:	d80e      	bhi.n	8000d4a <VL53L1A2_RANGING_SENSOR_SetAddress+0x22>
{
 8000d2c:	b508      	push	{r3, lr}
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <VL53L1A2_RANGING_SENSOR_SetAddress+0x28>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <VL53L1A2_RANGING_SENSOR_SetAddress+0x2c>)
 8000d36:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d3a:	4798      	blx	r3
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	db01      	blt.n	8000d44 <VL53L1A2_RANGING_SENSOR_SetAddress+0x1c>
    ret = BSP_ERROR_NONE;
 8000d40:	2000      	movs	r0, #0
}
 8000d42:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000d44:	f06f 0004 	mvn.w	r0, #4
 8000d48:	e7fb      	b.n	8000d42 <VL53L1A2_RANGING_SENSOR_SetAddress+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8000d4a:	f06f 0001 	mvn.w	r0, #1
}
 8000d4e:	4770      	bx	lr
 8000d50:	20014f18 	.word	0x20014f18
 8000d54:	20014f1c 	.word	0x20014f1c

08000d58 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000d58:	2802      	cmp	r0, #2
 8000d5a:	d819      	bhi.n	8000d90 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
{
 8000d5c:	b508      	push	{r3, lr}
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8000d5e:	b161      	cbz	r1, 8000d7a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x22>
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8000d60:	2901      	cmp	r1, #1
 8000d62:	d11b      	bne.n	8000d9c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8000d64:	2100      	movs	r1, #0
 8000d66:	b2c0      	uxtb	r0, r0
 8000d68:	f7ff fec2 	bl	8000af0 <VL53L1A2_ResetId>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	db18      	blt.n	8000da2 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x4a>
      HAL_Delay(2);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f000 fc63 	bl	800163c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8000d76:	2000      	movs	r0, #0
}
 8000d78:	bd08      	pop	{r3, pc}
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	b2c0      	uxtb	r0, r0
 8000d7e:	f7ff feb7 	bl	8000af0 <VL53L1A2_ResetId>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	db07      	blt.n	8000d96 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x3e>
      HAL_Delay(2);
 8000d86:	2002      	movs	r0, #2
 8000d88:	f000 fc58 	bl	800163c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e7f3      	b.n	8000d78 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x20>
    ret = BSP_ERROR_WRONG_PARAM;
 8000d90:	f06f 0001 	mvn.w	r0, #1
}
 8000d94:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d96:	f06f 0003 	mvn.w	r0, #3
 8000d9a:	e7ed      	b.n	8000d78 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x20>
    ret = BSP_ERROR_WRONG_PARAM;
 8000d9c:	f06f 0001 	mvn.w	r0, #1
 8000da0:	e7ea      	b.n	8000d78 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x20>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000da2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8000da6:	e7e7      	b.n	8000d78 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x20>

08000da8 <VL53L1A2_RANGING_SENSOR_Init>:
  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000da8:	2802      	cmp	r0, #2
 8000daa:	d810      	bhi.n	8000dce <VL53L1A2_RANGING_SENSOR_Init+0x26>
{
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4604      	mov	r4, r0
  else if (VL53L1A2_Init() != 0)
 8000db0:	f7ff fe42 	bl	8000a38 <VL53L1A2_Init>
 8000db4:	b970      	cbnz	r0, 8000dd4 <VL53L1A2_RANGING_SENSOR_Init+0x2c>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8000db6:	2101      	movs	r1, #1
 8000db8:	4620      	mov	r0, r4
 8000dba:	f7ff ffcd 	bl	8000d58 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff ffc9 	bl	8000d58 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    ret = VL53L1CB_Probe(Instance);
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff fed2 	bl	8000b70 <VL53L1CB_Probe>
}
 8000dcc:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000dce:	f06f 0001 	mvn.w	r0, #1
}
 8000dd2:	4770      	bx	lr
    ret = BSP_ERROR_PERIPH_FAILURE;
 8000dd4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8000dd8:	e7f8      	b.n	8000dcc <VL53L1A2_RANGING_SENSOR_Init+0x24>
	...

08000ddc <initVL53L1A1>:
RANGING_SENSOR_Result_t TOF_right_array[60];
// mask options from BSP/Components/<IC_reg.h>

// Functions /////////////////////////////////////////////

void initVL53L1A1(){
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	b083      	sub	sp, #12
    uint8_t device;
    uint16_t i2c_addr;
    uint32_t id;

    /* put all the devices in shutdown mode */
    for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000de0:	2400      	movs	r4, #0
 8000de2:	e005      	b.n	8000df0 <initVL53L1A1+0x14>
    {
        VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8000de4:	2101      	movs	r1, #1
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff ffb6 	bl	8000d58 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000dec:	3401      	adds	r4, #1
 8000dee:	b2e4      	uxtb	r4, r4
 8000df0:	2c02      	cmp	r4, #2
 8000df2:	d9f7      	bls.n	8000de4 <initVL53L1A1+0x8>

    /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
    for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000df4:	2400      	movs	r4, #0
 8000df6:	e001      	b.n	8000dfc <initVL53L1A1+0x20>
 8000df8:	3401      	adds	r4, #1
 8000dfa:	b2e4      	uxtb	r4, r4
 8000dfc:	2c02      	cmp	r4, #2
 8000dfe:	d81b      	bhi.n	8000e38 <initVL53L1A1+0x5c>
    {
        VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8000e00:	2100      	movs	r1, #0
 8000e02:	4620      	mov	r0, r4
 8000e04:	f7ff ffa8 	bl	8000d58 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
        status = VL53L1A2_RANGING_SENSOR_Init(device);
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f7ff ffcd 	bl	8000da8 <VL53L1A2_RANGING_SENSOR_Init>
 8000e0e:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <initVL53L1A1+0xd8>)
 8000e10:	6018      	str	r0, [r3, #0]

        /* 0: not detected, 1: detected */
        ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8000e12:	fab0 f080 	clz	r0, r0
 8000e16:	0940      	lsrs	r0, r0, #5
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <initVL53L1A1+0xdc>)
 8000e1a:	5518      	strb	r0, [r3, r4]

        /* skip this device if init not successful */
        if (ToF_Present[device] == 0) { continue; }
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d0eb      	beq.n	8000df8 <initVL53L1A1+0x1c>

        /* left: 0x54, center: 0x56, right: 0x58 */
        i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 8000e20:	f104 012a 	add.w	r1, r4, #42	@ 0x2a
 8000e24:	0049      	lsls	r1, r1, #1
 8000e26:	b289      	uxth	r1, r1
        VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff7d 	bl	8000d28 <VL53L1A2_RANGING_SENSOR_SetAddress>

        /* check the communication with the device reading the ID */
        VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 8000e2e:	a901      	add	r1, sp, #4
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff fef9 	bl	8000c28 <VL53L1A2_RANGING_SENSOR_ReadID>
 8000e36:	e7df      	b.n	8000df8 <initVL53L1A1+0x1c>
    }

    
    Profile.TimingBudget = 1000/tof_odr;
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <initVL53L1A1+0xe0>)
 8000e3a:	ed93 7a00 	vldr	s14, [r3]
 8000e3e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000ec0 <initVL53L1A1+0xe4>
 8000e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e46:	4d1f      	ldr	r5, [pc, #124]	@ (8000ec4 <initVL53L1A1+0xe8>)
 8000e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4c:	edc5 7a01 	vstr	s15, [r5, #4]
    Profile.Frequency = 0;
 8000e50:	2700      	movs	r7, #0
 8000e52:	60af      	str	r7, [r5, #8]
    Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000e54:	2601      	movs	r6, #1
 8000e56:	60ee      	str	r6, [r5, #12]
    Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8000e58:	612e      	str	r6, [r5, #16]

    ROI.TopLeftX  = 8; 
 8000e5a:	4c1b      	ldr	r4, [pc, #108]	@ (8000ec8 <initVL53L1A1+0xec>)
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	7023      	strb	r3, [r4, #0]
    ROI.TopLeftY  = 12; 
 8000e60:	220c      	movs	r2, #12
 8000e62:	7062      	strb	r2, [r4, #1]
    ROI.BotRightX = 12;
 8000e64:	70a2      	strb	r2, [r4, #2]
    ROI.BotRightY = 8;
 8000e66:	70e3      	strb	r3, [r4, #3]

    VL53L1A2_RANGING_SENSOR_ConfigProfile(INSTANCE_TOF_LEFT   , &Profile);
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4638      	mov	r0, r7
 8000e6c:	f7ff fef4 	bl	8000c58 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    VL53L1A2_RANGING_SENSOR_ConfigProfile(INSTANCE_TOF_CENTRE , &Profile);
 8000e70:	4629      	mov	r1, r5
 8000e72:	4630      	mov	r0, r6
 8000e74:	f7ff fef0 	bl	8000c58 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    VL53L1A2_RANGING_SENSOR_ConfigProfile(INSTANCE_TOF_RIGHT  , &Profile);
 8000e78:	4629      	mov	r1, r5
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff feec 	bl	8000c58 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

    VL53L1A2_RANGING_SENSOR_ConfigROI(INSTANCE_TOF_LEFT   , &ROI);
 8000e80:	4621      	mov	r1, r4
 8000e82:	4638      	mov	r0, r7
 8000e84:	f7ff ff00 	bl	8000c88 <VL53L1A2_RANGING_SENSOR_ConfigROI>
    VL53L1A2_RANGING_SENSOR_ConfigROI(INSTANCE_TOF_CENTRE , &ROI);
 8000e88:	4621      	mov	r1, r4
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	f7ff fefc 	bl	8000c88 <VL53L1A2_RANGING_SENSOR_ConfigROI>
    VL53L1A2_RANGING_SENSOR_ConfigROI(INSTANCE_TOF_RIGHT  , &ROI);
 8000e90:	4621      	mov	r1, r4
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fef8 	bl	8000c88 <VL53L1A2_RANGING_SENSOR_ConfigROI>

    VL53L1A2_RANGING_SENSOR_Start(INSTANCE_TOF_LEFT   , RS_MODE_ASYNC_CONTINUOUS);
 8000e98:	2103      	movs	r1, #3
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f7ff ff2c 	bl	8000cf8 <VL53L1A2_RANGING_SENSOR_Start>
    VL53L1A2_RANGING_SENSOR_Start(INSTANCE_TOF_CENTRE , RS_MODE_ASYNC_CONTINUOUS);
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f7ff ff28 	bl	8000cf8 <VL53L1A2_RANGING_SENSOR_Start>
    VL53L1A2_RANGING_SENSOR_Start(INSTANCE_TOF_RIGHT  , RS_MODE_ASYNC_CONTINUOUS);
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff ff24 	bl	8000cf8 <VL53L1A2_RANGING_SENSOR_Start>
}
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	20015004 	.word	0x20015004
 8000eb8:	20015000 	.word	0x20015000
 8000ebc:	2001500c 	.word	0x2001500c
 8000ec0:	447a0000 	.word	0x447a0000
 8000ec4:	20015030 	.word	0x20015030
 8000ec8:	20015008 	.word	0x20015008

08000ecc <bytesToFloat>:

float bytesToFloat(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4) {
 8000ecc:	b082      	sub	sp, #8
    float result;
    uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 8000ece:	f88d 0004 	strb.w	r0, [sp, #4]
 8000ed2:	f88d 1005 	strb.w	r1, [sp, #5]
 8000ed6:	f88d 2006 	strb.w	r2, [sp, #6]
 8000eda:	f88d 3007 	strb.w	r3, [sp, #7]

    // Use memcpy to copy the 4 bytes into a float (this preserves the binary representation)
    memcpy(&result, bytes, sizeof(float));

    return result;
}
 8000ede:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000ee2:	b002      	add	sp, #8
 8000ee4:	4770      	bx	lr

08000ee6 <bytesToInt32>:

int32_t bytesToInt32(uint8_t byte1 , uint8_t byte2 , uint8_t byte3 , uint8_t byte4)  {
 8000ee6:	b082      	sub	sp, #8
    int32_t result;
    uint8_t bytes[4] = {byte1,byte2,byte3,byte4};
 8000ee8:	f88d 0004 	strb.w	r0, [sp, #4]
 8000eec:	f88d 1005 	strb.w	r1, [sp, #5]
 8000ef0:	f88d 2006 	strb.w	r2, [sp, #6]
 8000ef4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Use memcpy to copy the 4 bytes into a int32_t (this preserves the binary representation)
    memcpy(&result, bytes, sizeof(int32_t));

    return result;
}
 8000ef8:	9801      	ldr	r0, [sp, #4]
 8000efa:	b002      	add	sp, #8
 8000efc:	4770      	bx	lr
	...

08000f00 <getVL53L1A1>:
    else{
        return 0;
    }
}

void getVL53L1A1(){
 8000f00:	b538      	push	{r3, r4, r5, lr}
    VL53L1A2_RANGING_SENSOR_GetDistance(INSTANCE_TOF_LEFT   , &temp_TOF_left   );
 8000f02:	492d      	ldr	r1, [pc, #180]	@ (8000fb8 <getVL53L1A1+0xb8>)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fedf 	bl	8000cc8 <VL53L1A2_RANGING_SENSOR_GetDistance>
    VL53L1A2_RANGING_SENSOR_GetDistance(INSTANCE_TOF_CENTRE , &temp_TOF_centre );
 8000f0a:	492c      	ldr	r1, [pc, #176]	@ (8000fbc <getVL53L1A1+0xbc>)
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fedb 	bl	8000cc8 <VL53L1A2_RANGING_SENSOR_GetDistance>
    VL53L1A2_RANGING_SENSOR_GetDistance(INSTANCE_TOF_RIGHT  , &temp_TOF_right  );
 8000f12:	492b      	ldr	r1, [pc, #172]	@ (8000fc0 <getVL53L1A1+0xc0>)
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff fed7 	bl	8000cc8 <VL53L1A2_RANGING_SENSOR_GetDistance>

    for (int i = 0 ; i < 4 ; i++){
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	e002      	b.n	8000f24 <getVL53L1A1+0x24>
        if (((temp_TOF_left   .ZoneResult[0]) .Status  [i]) == 0){
            TOF_left = temp_TOF_left;
        }
        if (((temp_TOF_left   .ZoneResult[0]) .Status  [i]) == 255){
 8000f1e:	2dff      	cmp	r5, #255	@ 0xff
 8000f20:	d00f      	beq.n	8000f42 <getVL53L1A1+0x42>
    for (int i = 0 ; i < 4 ; i++){
 8000f22:	3401      	adds	r4, #1
 8000f24:	2c03      	cmp	r4, #3
 8000f26:	dc12      	bgt.n	8000f4e <getVL53L1A1+0x4e>
        if (((temp_TOF_left   .ZoneResult[0]) .Status  [i]) == 0){
 8000f28:	1d22      	adds	r2, r4, #4
 8000f2a:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <getVL53L1A1+0xb8>)
 8000f2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f30:	689d      	ldr	r5, [r3, #8]
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	d1f3      	bne.n	8000f1e <getVL53L1A1+0x1e>
            TOF_left = temp_TOF_left;
 8000f36:	2248      	movs	r2, #72	@ 0x48
 8000f38:	491f      	ldr	r1, [pc, #124]	@ (8000fb8 <getVL53L1A1+0xb8>)
 8000f3a:	4822      	ldr	r0, [pc, #136]	@ (8000fc4 <getVL53L1A1+0xc4>)
 8000f3c:	f00d fdbc 	bl	800eab8 <memcpy>
 8000f40:	e7ed      	b.n	8000f1e <getVL53L1A1+0x1e>
            TOF_left = temp_TOF_left;
 8000f42:	2248      	movs	r2, #72	@ 0x48
 8000f44:	491c      	ldr	r1, [pc, #112]	@ (8000fb8 <getVL53L1A1+0xb8>)
 8000f46:	481f      	ldr	r0, [pc, #124]	@ (8000fc4 <getVL53L1A1+0xc4>)
 8000f48:	f00d fdb6 	bl	800eab8 <memcpy>
 8000f4c:	e7e9      	b.n	8000f22 <getVL53L1A1+0x22>
        }
    }

    for (int i = 0 ; i < 4 ; i++){
 8000f4e:	2400      	movs	r4, #0
 8000f50:	e002      	b.n	8000f58 <getVL53L1A1+0x58>
        if (((temp_TOF_centre   .ZoneResult[0]) .Status  [i]) == 0){
            TOF_centre = temp_TOF_centre;
        }
        if (((temp_TOF_centre   .ZoneResult[0]) .Status  [i]) == 255){
 8000f52:	2dff      	cmp	r5, #255	@ 0xff
 8000f54:	d00f      	beq.n	8000f76 <getVL53L1A1+0x76>
    for (int i = 0 ; i < 4 ; i++){
 8000f56:	3401      	adds	r4, #1
 8000f58:	2c03      	cmp	r4, #3
 8000f5a:	dc12      	bgt.n	8000f82 <getVL53L1A1+0x82>
        if (((temp_TOF_centre   .ZoneResult[0]) .Status  [i]) == 0){
 8000f5c:	1d22      	adds	r2, r4, #4
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <getVL53L1A1+0xbc>)
 8000f60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f64:	689d      	ldr	r5, [r3, #8]
 8000f66:	2d00      	cmp	r5, #0
 8000f68:	d1f3      	bne.n	8000f52 <getVL53L1A1+0x52>
            TOF_centre = temp_TOF_centre;
 8000f6a:	2248      	movs	r2, #72	@ 0x48
 8000f6c:	4913      	ldr	r1, [pc, #76]	@ (8000fbc <getVL53L1A1+0xbc>)
 8000f6e:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <getVL53L1A1+0xc8>)
 8000f70:	f00d fda2 	bl	800eab8 <memcpy>
 8000f74:	e7ed      	b.n	8000f52 <getVL53L1A1+0x52>
            TOF_centre = temp_TOF_centre;
 8000f76:	2248      	movs	r2, #72	@ 0x48
 8000f78:	4910      	ldr	r1, [pc, #64]	@ (8000fbc <getVL53L1A1+0xbc>)
 8000f7a:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <getVL53L1A1+0xc8>)
 8000f7c:	f00d fd9c 	bl	800eab8 <memcpy>
 8000f80:	e7e9      	b.n	8000f56 <getVL53L1A1+0x56>
        }
    }

    for (int i = 0 ; i < 4 ; i++){
 8000f82:	2400      	movs	r4, #0
 8000f84:	e002      	b.n	8000f8c <getVL53L1A1+0x8c>
        if (((temp_TOF_right   .ZoneResult[0]) .Status  [i]) == 0){
            TOF_right = temp_TOF_right;
        }
        if (((temp_TOF_right   .ZoneResult[0]) .Status  [i]) == 255){
 8000f86:	2dff      	cmp	r5, #255	@ 0xff
 8000f88:	d00f      	beq.n	8000faa <getVL53L1A1+0xaa>
    for (int i = 0 ; i < 4 ; i++){
 8000f8a:	3401      	adds	r4, #1
 8000f8c:	2c03      	cmp	r4, #3
 8000f8e:	dc12      	bgt.n	8000fb6 <getVL53L1A1+0xb6>
        if (((temp_TOF_right   .ZoneResult[0]) .Status  [i]) == 0){
 8000f90:	1d22      	adds	r2, r4, #4
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <getVL53L1A1+0xc0>)
 8000f94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f98:	689d      	ldr	r5, [r3, #8]
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d1f3      	bne.n	8000f86 <getVL53L1A1+0x86>
            TOF_right = temp_TOF_right;
 8000f9e:	2248      	movs	r2, #72	@ 0x48
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <getVL53L1A1+0xc0>)
 8000fa2:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <getVL53L1A1+0xcc>)
 8000fa4:	f00d fd88 	bl	800eab8 <memcpy>
 8000fa8:	e7ed      	b.n	8000f86 <getVL53L1A1+0x86>
            TOF_right = temp_TOF_right;
 8000faa:	2248      	movs	r2, #72	@ 0x48
 8000fac:	4904      	ldr	r1, [pc, #16]	@ (8000fc0 <getVL53L1A1+0xc0>)
 8000fae:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <getVL53L1A1+0xcc>)
 8000fb0:	f00d fd82 	bl	800eab8 <memcpy>
 8000fb4:	e7e9      	b.n	8000f8a <getVL53L1A1+0x8a>
        }
    }
}
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	20014fb8 	.word	0x20014fb8
 8000fbc:	20014f70 	.word	0x20014f70
 8000fc0:	20014f28 	.word	0x20014f28
 8000fc4:	200150d4 	.word	0x200150d4
 8000fc8:	2001508c 	.word	0x2001508c
 8000fcc:	20015044 	.word	0x20015044

08000fd0 <sendToSimulink>:
    tof_odr = bytesToFloat(bigBuffer[3  + 4] , bigBuffer[3  + 5] , bigBuffer[3  + 6] ,  bigBuffer[3  + 7] );

    calibrate_VL53L1A1();
}

void sendToSimulink(){
 8000fd0:	b538      	push	{r3, r4, r5, lr}

    HAL_UART_Transmit(&huart2, (uint8_t *) &header           ,3 , HAL_MAX_DELAY);
 8000fd2:	4c4f      	ldr	r4, [pc, #316]	@ (8001110 <sendToSimulink+0x140>)
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2203      	movs	r2, #3
 8000fda:	494e      	ldr	r1, [pc, #312]	@ (8001114 <sendToSimulink+0x144>)
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f002 fc7e 	bl	80038de <HAL_UART_Transmit>
    
    HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_left   .ZoneResult[0]) .Distance  [TOF_left.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8000fe2:	4d4d      	ldr	r5, [pc, #308]	@ (8001118 <sendToSimulink+0x148>)
 8000fe4:	6869      	ldr	r1, [r5, #4]
 8000fe6:	3901      	subs	r1, #1
 8000fe8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	3108      	adds	r1, #8
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f002 fc72 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Ambient   [TOF_left.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8000ffa:	6869      	ldr	r1, [r5, #4]
 8000ffc:	3107      	adds	r1, #7
 8000ffe:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2204      	movs	r2, #4
 8001008:	3108      	adds	r1, #8
 800100a:	4620      	mov	r0, r4
 800100c:	f002 fc67 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Signal    [TOF_left.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8001010:	6869      	ldr	r1, [r5, #4]
 8001012:	310b      	adds	r1, #11
 8001014:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2204      	movs	r2, #4
 800101e:	3108      	adds	r1, #8
 8001020:	4620      	mov	r0, r4
 8001022:	f002 fc5c 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_left   .ZoneResult[0]) .Status    [TOF_left.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8001026:	686b      	ldr	r3, [r5, #4]
 8001028:	3303      	adds	r3, #3
 800102a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2204      	movs	r2, #4
 8001034:	3108      	adds	r1, #8
 8001036:	4620      	mov	r0, r4
 8001038:	f002 fc51 	bl	80038de <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_centre .ZoneResult[0]) .Distance  [TOF_centre.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 800103c:	4d37      	ldr	r5, [pc, #220]	@ (800111c <sendToSimulink+0x14c>)
 800103e:	6869      	ldr	r1, [r5, #4]
 8001040:	3901      	subs	r1, #1
 8001042:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2204      	movs	r2, #4
 800104c:	3108      	adds	r1, #8
 800104e:	4620      	mov	r0, r4
 8001050:	f002 fc45 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Ambient   [TOF_centre.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8001054:	6869      	ldr	r1, [r5, #4]
 8001056:	3107      	adds	r1, #7
 8001058:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	2204      	movs	r2, #4
 8001062:	3108      	adds	r1, #8
 8001064:	4620      	mov	r0, r4
 8001066:	f002 fc3a 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Signal    [TOF_centre.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 800106a:	6869      	ldr	r1, [r5, #4]
 800106c:	310b      	adds	r1, #11
 800106e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2204      	movs	r2, #4
 8001078:	3108      	adds	r1, #8
 800107a:	4620      	mov	r0, r4
 800107c:	f002 fc2f 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_centre .ZoneResult[0]) .Status    [TOF_centre.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8001080:	686b      	ldr	r3, [r5, #4]
 8001082:	3303      	adds	r3, #3
 8001084:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	2204      	movs	r2, #4
 800108e:	3108      	adds	r1, #8
 8001090:	4620      	mov	r0, r4
 8001092:	f002 fc24 	bl	80038de <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint32_t *) &((TOF_right  .ZoneResult[0]) .Distance  [TOF_right.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 8001096:	4d22      	ldr	r5, [pc, #136]	@ (8001120 <sendToSimulink+0x150>)
 8001098:	6869      	ldr	r1, [r5, #4]
 800109a:	3901      	subs	r1, #1
 800109c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	2204      	movs	r2, #4
 80010a6:	3108      	adds	r1, #8
 80010a8:	4620      	mov	r0, r4
 80010aa:	f002 fc18 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Ambient   [TOF_right.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 80010ae:	6869      	ldr	r1, [r5, #4]
 80010b0:	3107      	adds	r1, #7
 80010b2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	2204      	movs	r2, #4
 80010bc:	3108      	adds	r1, #8
 80010be:	4620      	mov	r0, r4
 80010c0:	f002 fc0d 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Signal    [TOF_right.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 80010c4:	6869      	ldr	r1, [r5, #4]
 80010c6:	310b      	adds	r1, #11
 80010c8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	2204      	movs	r2, #4
 80010d2:	3108      	adds	r1, #8
 80010d4:	4620      	mov	r0, r4
 80010d6:	f002 fc02 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (float_t *)  &((TOF_right  .ZoneResult[0]) .Status    [TOF_right.ZoneResult[0].NumberOfTargets -1])  , 4 , HAL_MAX_DELAY);
 80010da:	686b      	ldr	r3, [r5, #4]
 80010dc:	3303      	adds	r3, #3
 80010de:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	2204      	movs	r2, #4
 80010e8:	3108      	adds	r1, #8
 80010ea:	4620      	mov	r0, r4
 80010ec:	f002 fbf7 	bl	80038de <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint32_t *) &counter         ,4 , HAL_MAX_DELAY);
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2204      	movs	r2, #4
 80010f6:	490b      	ldr	r1, [pc, #44]	@ (8001124 <sendToSimulink+0x154>)
 80010f8:	4620      	mov	r0, r4
 80010fa:	f002 fbf0 	bl	80038de <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *) &terminator       ,3 , HAL_MAX_DELAY);
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	2203      	movs	r2, #3
 8001104:	4908      	ldr	r1, [pc, #32]	@ (8001128 <sendToSimulink+0x158>)
 8001106:	4620      	mov	r0, r4
 8001108:	f002 fbe9 	bl	80038de <HAL_UART_Transmit>
}
 800110c:	bd38      	pop	{r3, r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	2001517c 	.word	0x2001517c
 8001114:	20000004 	.word	0x20000004
 8001118:	200150d4 	.word	0x200150d4
 800111c:	2001508c 	.word	0x2001508c
 8001120:	20015044 	.word	0x20015044
 8001124:	20015018 	.word	0x20015018
 8001128:	20000000 	.word	0x20000000

0800112c <calibrate_VL53L1A1>:

// functions from BSP/<boards>
// parameters from BSP/<boards>
void calibrate_VL53L1A1(){

    if (tof_fsr == 1){
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <calibrate_VL53L1A1+0x2c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d004      	beq.n	800113e <calibrate_VL53L1A1+0x12>
        Profile.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
    }
    if (tof_fsr == 2){
 8001134:	2b02      	cmp	r3, #2
 8001136:	d006      	beq.n	8001146 <calibrate_VL53L1A1+0x1a>
        Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
    }
    if (tof_fsr == 3){
 8001138:	2b03      	cmp	r3, #3
 800113a:	d008      	beq.n	800114e <calibrate_VL53L1A1+0x22>
        Profile.RangingProfile = RS_MULTI_TARGET_LONG_RANGE;
    }
 800113c:	4770      	bx	lr
        Profile.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800113e:	4a07      	ldr	r2, [pc, #28]	@ (800115c <calibrate_VL53L1A1+0x30>)
 8001140:	2101      	movs	r1, #1
 8001142:	6011      	str	r1, [r2, #0]
 8001144:	e7f6      	b.n	8001134 <calibrate_VL53L1A1+0x8>
        Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <calibrate_VL53L1A1+0x30>)
 8001148:	2102      	movs	r1, #2
 800114a:	6011      	str	r1, [r2, #0]
 800114c:	e7f4      	b.n	8001138 <calibrate_VL53L1A1+0xc>
        Profile.RangingProfile = RS_MULTI_TARGET_LONG_RANGE;
 800114e:	4b03      	ldr	r3, [pc, #12]	@ (800115c <calibrate_VL53L1A1+0x30>)
 8001150:	2203      	movs	r2, #3
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e7f2      	b.n	800113c <calibrate_VL53L1A1+0x10>
 8001156:	bf00      	nop
 8001158:	20015010 	.word	0x20015010
 800115c:	20015030 	.word	0x20015030

08001160 <receivedFromSimulink>:
void receivedFromSimulink(uint8_t* bigBuffer){
 8001160:	b510      	push	{r4, lr}
 8001162:	4604      	mov	r4, r0
    tof_fsr = bytesToInt32(bigBuffer[3  + 0] , bigBuffer[3  + 1] , bigBuffer[3  + 2] ,  bigBuffer[3  + 3] );
 8001164:	7983      	ldrb	r3, [r0, #6]
 8001166:	7942      	ldrb	r2, [r0, #5]
 8001168:	7901      	ldrb	r1, [r0, #4]
 800116a:	78c0      	ldrb	r0, [r0, #3]
 800116c:	f7ff febb 	bl	8000ee6 <bytesToInt32>
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <receivedFromSimulink+0x2c>)
 8001172:	6018      	str	r0, [r3, #0]
    tof_odr = bytesToFloat(bigBuffer[3  + 4] , bigBuffer[3  + 5] , bigBuffer[3  + 6] ,  bigBuffer[3  + 7] );
 8001174:	7aa3      	ldrb	r3, [r4, #10]
 8001176:	7a62      	ldrb	r2, [r4, #9]
 8001178:	7a21      	ldrb	r1, [r4, #8]
 800117a:	79e0      	ldrb	r0, [r4, #7]
 800117c:	f7ff fea6 	bl	8000ecc <bytesToFloat>
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <receivedFromSimulink+0x30>)
 8001182:	ed83 0a00 	vstr	s0, [r3]
    calibrate_VL53L1A1();
 8001186:	f7ff ffd1 	bl	800112c <calibrate_VL53L1A1>
}
 800118a:	bd10      	pop	{r4, pc}
 800118c:	20015010 	.word	0x20015010
 8001190:	2001500c 	.word	0x2001500c

08001194 <configureTimer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void configureTimer(float desired_frequency, TIM_TypeDef* tim) {
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4605      	mov	r5, r0
    // Assuming the clock frequency driving the timer is 100 MHz
    float clock_frequency = SystemCoreClock; // 100 MHz
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <configureTimer+0x4c>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15

    // Calculate the required total timer period in timer clock cycles
    float timer_period = clock_frequency / desired_frequency;
 80011a2:	ee87 7a80 	vdiv.f32	s14, s15, s0

    // Choose a suitable prescaler (PSC) to fit the period within ARR's range
    uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 80011a6:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80011e4 <configureTimer+0x50>
 80011aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b2:	ee17 4a90 	vmov	r4, s15
    if (prescaler > 65535) {
 80011b6:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 80011ba:	d301      	bcc.n	80011c0 <configureTimer+0x2c>
        prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 80011bc:	f64f 74ff 	movw	r4, #65535	@ 0xffff
    }

    // Calculate the ARR based on the chosen PSC
    uint64_t arr = (uint64_t)(timer_period / (prescaler + 1));
 80011c0:	1c63      	adds	r3, r4, #1
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80011ce:	ee17 0a90 	vmov	r0, s15
 80011d2:	f00d fc7f 	bl	800ead4 <__aeabi_f2ulz>



    // Update the timer registers
    tim->PSC = prescaler;   // Set the prescaler
 80011d6:	62ac      	str	r4, [r5, #40]	@ 0x28
    tim->ARR = arr;         // Set the auto-reload register
 80011d8:	62e8      	str	r0, [r5, #44]	@ 0x2c

    // Reload the timer settings to apply the changes immediately
    tim->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 80011da:	2301      	movs	r3, #1
 80011dc:	616b      	str	r3, [r5, #20]
}
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	20000010 	.word	0x20000010
 80011e4:	37800000 	.word	0x37800000

080011e8 <initialCalibration>:


void initialCalibration(){
 80011e8:	b510      	push	{r4, lr}
  HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 80011ea:	4c15      	ldr	r4, [pc, #84]	@ (8001240 <initialCalibration+0x58>)
 80011ec:	2301      	movs	r3, #1
 80011ee:	220e      	movs	r2, #14
 80011f0:	4621      	mov	r1, r4
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <initialCalibration+0x5c>)
 80011f4:	f002 fbd9 	bl	80039aa <HAL_UART_Receive>
  if (bigBuffer[0] == expectedHeader[0] &&
 80011f8:	7823      	ldrb	r3, [r4, #0]
 80011fa:	2b4a      	cmp	r3, #74	@ 0x4a
 80011fc:	d000      	beq.n	8001200 <initialCalibration+0x18>
        calibrated = 1;
        receivedFromSimulink(&bigBuffer);
        configureTimer(tof_odr,TIM2);
        HAL_TIM_Base_Start_IT(&htim2);
  }
}
 80011fe:	bd10      	pop	{r4, pc}
      bigBuffer[1] == expectedHeader[1] &&
 8001200:	7863      	ldrb	r3, [r4, #1]
  if (bigBuffer[0] == expectedHeader[0] &&
 8001202:	2b5f      	cmp	r3, #95	@ 0x5f
 8001204:	d1fb      	bne.n	80011fe <initialCalibration+0x16>
      bigBuffer[2] == expectedHeader[2] &&
 8001206:	78a3      	ldrb	r3, [r4, #2]
      bigBuffer[1] == expectedHeader[1] &&
 8001208:	2b41      	cmp	r3, #65	@ 0x41
 800120a:	d1f8      	bne.n	80011fe <initialCalibration+0x16>
      bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 800120c:	7ae3      	ldrb	r3, [r4, #11]
      bigBuffer[2] == expectedHeader[2] &&
 800120e:	2b41      	cmp	r3, #65	@ 0x41
 8001210:	d1f5      	bne.n	80011fe <initialCalibration+0x16>
      bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 8001212:	7b23      	ldrb	r3, [r4, #12]
      bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 8001214:	2b5f      	cmp	r3, #95	@ 0x5f
 8001216:	d1f2      	bne.n	80011fe <initialCalibration+0x16>
      bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 8001218:	7b63      	ldrb	r3, [r4, #13]
      bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 800121a:	2b4a      	cmp	r3, #74	@ 0x4a
 800121c:	d1ef      	bne.n	80011fe <initialCalibration+0x16>
        calibrated = 1;
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <initialCalibration+0x60>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
        receivedFromSimulink(&bigBuffer);
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff ff9b 	bl	8001160 <receivedFromSimulink>
        configureTimer(tof_odr,TIM2);
 800122a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <initialCalibration+0x64>)
 8001230:	ed93 0a00 	vldr	s0, [r3]
 8001234:	f7ff ffae 	bl	8001194 <configureTimer>
        HAL_TIM_Base_Start_IT(&htim2);
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <initialCalibration+0x68>)
 800123a:	f001 ff9f 	bl	800317c <HAL_TIM_Base_Start_IT>
}
 800123e:	e7de      	b.n	80011fe <initialCalibration+0x16>
 8001240:	20015020 	.word	0x20015020
 8001244:	2001517c 	.word	0x2001517c
 8001248:	2001501c 	.word	0x2001501c
 800124c:	2001500c 	.word	0x2001500c
 8001250:	2001520c 	.word	0x2001520c

08001254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001254:	b500      	push	{lr}
 8001256:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001258:	2100      	movs	r1, #0
 800125a:	9101      	str	r1, [sp, #4]
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_DMA_Init+0x30>)
 800125e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001260:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001264:	631a      	str	r2, [r3, #48]	@ 0x30
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001270:	460a      	mov	r2, r1
 8001272:	2010      	movs	r0, #16
 8001274:	f000 fa4a 	bl	800170c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001278:	2010      	movs	r0, #16
 800127a:	f000 fa57 	bl	800172c <HAL_NVIC_EnableIRQ>

}
 800127e:	b003      	add	sp, #12
 8001280:	f85d fb04 	ldr.w	pc, [sp], #4
 8001284:	40023800 	.word	0x40023800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	2400      	movs	r4, #0
 800128e:	9405      	str	r4, [sp, #20]
 8001290:	9406      	str	r4, [sp, #24]
 8001292:	9407      	str	r4, [sp, #28]
 8001294:	9408      	str	r4, [sp, #32]
 8001296:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	9400      	str	r4, [sp, #0]
 800129a:	4b47      	ldr	r3, [pc, #284]	@ (80013b8 <MX_GPIO_Init+0x130>)
 800129c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800129e:	f042 0204 	orr.w	r2, r2, #4
 80012a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012a6:	f002 0204 	and.w	r2, r2, #4
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	9401      	str	r4, [sp, #4]
 80012b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ba:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012be:	9201      	str	r2, [sp, #4]
 80012c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	9402      	str	r4, [sp, #8]
 80012c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80012cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ce:	f002 0201 	and.w	r2, r2, #1
 80012d2:	9202      	str	r2, [sp, #8]
 80012d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	9403      	str	r4, [sp, #12]
 80012d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012da:	f042 0202 	orr.w	r2, r2, #2
 80012de:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e2:	f002 0202 	and.w	r2, r2, #2
 80012e6:	9203      	str	r2, [sp, #12]
 80012e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	9404      	str	r4, [sp, #16]
 80012ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ee:	f042 0208 	orr.w	r2, r2, #8
 80012f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80012fe:	4e2f      	ldr	r6, [pc, #188]	@ (80013bc <MX_GPIO_Init+0x134>)
 8001300:	4622      	mov	r2, r4
 8001302:	2120      	movs	r1, #32
 8001304:	4630      	mov	r0, r6
 8001306:	f000 fd46 	bl	8001d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800130a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001310:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001314:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001318:	4f29      	ldr	r7, [pc, #164]	@ (80013c0 <MX_GPIO_Init+0x138>)
 800131a:	a905      	add	r1, sp, #20
 800131c:	4638      	mov	r0, r7
 800131e:	f000 fbc7 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001322:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001326:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001328:	2503      	movs	r5, #3
 800132a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	a905      	add	r1, sp, #20
 8001330:	4638      	mov	r0, r7
 8001332:	f000 fbbd 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8001336:	f649 73c3 	movw	r3, #40899	@ 0x9fc3
 800133a:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	a905      	add	r1, sp, #20
 8001342:	4630      	mov	r0, r6
 8001344:	f000 fbb4 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L1X_INT_Pin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 8001348:	2310      	movs	r3, #16
 800134a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001350:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001352:	2701      	movs	r7, #1
 8001354:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 8001356:	a905      	add	r1, sp, #20
 8001358:	4630      	mov	r0, r6
 800135a:	f000 fba9 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800135e:	2320      	movs	r3, #32
 8001360:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001368:	a905      	add	r1, sp, #20
 800136a:	4630      	mov	r0, r6
 800136c:	f000 fba0 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001370:	f24f 43f7 	movw	r3, #62711	@ 0xf4f7
 8001374:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	a905      	add	r1, sp, #20
 800137c:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <MX_GPIO_Init+0x13c>)
 800137e:	f000 fb97 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	a905      	add	r1, sp, #20
 800138c:	480e      	ldr	r0, [pc, #56]	@ (80013c8 <MX_GPIO_Init+0x140>)
 800138e:	f000 fb8f 	bl	8001ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001392:	4622      	mov	r2, r4
 8001394:	4621      	mov	r1, r4
 8001396:	200a      	movs	r0, #10
 8001398:	f000 f9b8 	bl	800170c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800139c:	200a      	movs	r0, #10
 800139e:	f000 f9c5 	bl	800172c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013a2:	4622      	mov	r2, r4
 80013a4:	4621      	mov	r1, r4
 80013a6:	2028      	movs	r0, #40	@ 0x28
 80013a8:	f000 f9b0 	bl	800170c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ac:	2028      	movs	r0, #40	@ 0x28
 80013ae:	f000 f9bd 	bl	800172c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b2:	b00b      	add	sp, #44	@ 0x2c
 80013b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020c00 	.word	0x40020c00

080013cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013ce:	6802      	ldr	r2, [r0, #0]
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d000      	beq.n	80013d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80013d8:	f000 f91e 	bl	8001618 <HAL_IncTick>
}
 80013dc:	e7fb      	b.n	80013d6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80013de:	bf00      	nop
 80013e0:	40010000 	.word	0x40010000

080013e4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <Error_Handler+0x2>

080013e8 <MX_TIM2_Init>:
{
 80013e8:	b500      	push	{lr}
 80013ea:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ec:	2300      	movs	r3, #0
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	9303      	str	r3, [sp, #12]
 80013f2:	9304      	str	r3, [sp, #16]
 80013f4:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 80013fa:	4814      	ldr	r0, [pc, #80]	@ (800144c <MX_TIM2_Init+0x64>)
 80013fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001400:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1000-1;
 8001402:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001406:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000-1;
 800140a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001412:	f001 fff9 	bl	8003408 <HAL_TIM_Base_Init>
 8001416:	b990      	cbnz	r0, 800143e <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141e:	a902      	add	r1, sp, #8
 8001420:	480a      	ldr	r0, [pc, #40]	@ (800144c <MX_TIM2_Init+0x64>)
 8001422:	f002 f82a 	bl	800347a <HAL_TIM_ConfigClockSource>
 8001426:	b960      	cbnz	r0, 8001442 <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142e:	4669      	mov	r1, sp
 8001430:	4806      	ldr	r0, [pc, #24]	@ (800144c <MX_TIM2_Init+0x64>)
 8001432:	f002 f8a1 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	b930      	cbnz	r0, 8001446 <MX_TIM2_Init+0x5e>
}
 8001438:	b007      	add	sp, #28
 800143a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800143e:	f7ff ffd1 	bl	80013e4 <Error_Handler>
    Error_Handler();
 8001442:	f7ff ffcf 	bl	80013e4 <Error_Handler>
    Error_Handler();
 8001446:	f7ff ffcd 	bl	80013e4 <Error_Handler>
 800144a:	bf00      	nop
 800144c:	2001520c 	.word	0x2001520c

08001450 <MX_USART2_UART_Init>:
{
 8001450:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001452:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_USART2_UART_Init+0x38>)
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <MX_USART2_UART_Init+0x3c>)
 8001456:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1843200;
 8001458:	f44f 13e1 	mov.w	r3, #1843200	@ 0x1c2000
 800145c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800145e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001462:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001468:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	230c      	movs	r3, #12
 8001472:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147a:	f002 fa00 	bl	800387e <HAL_UART_Init>
 800147e:	b900      	cbnz	r0, 8001482 <MX_USART2_UART_Init+0x32>
}
 8001480:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001482:	f7ff ffaf 	bl	80013e4 <Error_Handler>
 8001486:	bf00      	nop
 8001488:	2001517c 	.word	0x2001517c
 800148c:	40004400 	.word	0x40004400

08001490 <MX_TIM5_Init>:
{
 8001490:	b500      	push	{lr}
 8001492:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001494:	2300      	movs	r3, #0
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	9304      	str	r3, [sp, #16]
 800149c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	9301      	str	r3, [sp, #4]
  htim5.Instance = TIM5;
 80014a2:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <MX_TIM5_Init+0x60>)
 80014a4:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <MX_TIM5_Init+0x64>)
 80014a6:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 80014a8:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014b8:	f001 ffa6 	bl	8003408 <HAL_TIM_Base_Init>
 80014bc:	b990      	cbnz	r0, 80014e4 <MX_TIM5_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014c4:	a902      	add	r1, sp, #8
 80014c6:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <MX_TIM5_Init+0x60>)
 80014c8:	f001 ffd7 	bl	800347a <HAL_TIM_ConfigClockSource>
 80014cc:	b960      	cbnz	r0, 80014e8 <MX_TIM5_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014d4:	4669      	mov	r1, sp
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM5_Init+0x60>)
 80014d8:	f002 f84e 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	b930      	cbnz	r0, 80014ec <MX_TIM5_Init+0x5c>
}
 80014de:	b007      	add	sp, #28
 80014e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014e4:	f7ff ff7e 	bl	80013e4 <Error_Handler>
    Error_Handler();
 80014e8:	f7ff ff7c 	bl	80013e4 <Error_Handler>
    Error_Handler();
 80014ec:	f7ff ff7a 	bl	80013e4 <Error_Handler>
 80014f0:	200151c4 	.word	0x200151c4
 80014f4:	40000c00 	.word	0x40000c00

080014f8 <SystemClock_Config>:
{
 80014f8:	b500      	push	{lr}
 80014fa:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fc:	2230      	movs	r2, #48	@ 0x30
 80014fe:	2100      	movs	r1, #0
 8001500:	a808      	add	r0, sp, #32
 8001502:	f00d fa9a 	bl	800ea3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001506:	2300      	movs	r3, #0
 8001508:	9303      	str	r3, [sp, #12]
 800150a:	9304      	str	r3, [sp, #16]
 800150c:	9305      	str	r3, [sp, #20]
 800150e:	9306      	str	r3, [sp, #24]
 8001510:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <SystemClock_Config+0x98>)
 8001516:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001518:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800151c:	6411      	str	r1, [r2, #64]	@ 0x40
 800151e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001520:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001524:	9201      	str	r2, [sp, #4]
 8001526:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <SystemClock_Config+0x9c>)
 800152c:	6811      	ldr	r1, [r2, #0]
 800152e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001532:	6011      	str	r1, [r2, #0]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800153a:	9202      	str	r2, [sp, #8]
 800153c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2202      	movs	r2, #2
 8001540:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2101      	movs	r1, #1
 8001544:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001546:	2110      	movs	r1, #16
 8001548:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800154c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800154e:	2308      	movs	r3, #8
 8001550:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001552:	2364      	movs	r3, #100	@ 0x64
 8001554:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001556:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001558:	2304      	movs	r3, #4
 800155a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	a808      	add	r0, sp, #32
 800155e:	f001 fa7f 	bl	8002a60 <HAL_RCC_OscConfig>
 8001562:	b988      	cbnz	r0, 8001588 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001574:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001578:	2103      	movs	r1, #3
 800157a:	a803      	add	r0, sp, #12
 800157c:	f001 fcda 	bl	8002f34 <HAL_RCC_ClockConfig>
 8001580:	b920      	cbnz	r0, 800158c <SystemClock_Config+0x94>
}
 8001582:	b015      	add	sp, #84	@ 0x54
 8001584:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001588:	f7ff ff2c 	bl	80013e4 <Error_Handler>
    Error_Handler();
 800158c:	f7ff ff2a 	bl	80013e4 <Error_Handler>
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <main>:
{
 8001598:	b508      	push	{r3, lr}
  HAL_Init();
 800159a:	f000 f823 	bl	80015e4 <HAL_Init>
  SystemClock_Config();
 800159e:	f7ff ffab 	bl	80014f8 <SystemClock_Config>
  MX_GPIO_Init();
 80015a2:	f7ff fe71 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a6:	f7ff fe55 	bl	8001254 <MX_DMA_Init>
  MX_TIM2_Init();
 80015aa:	f7ff ff1d 	bl	80013e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80015ae:	f7ff ff4f 	bl	8001450 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80015b2:	f7ff ff6d 	bl	8001490 <MX_TIM5_Init>
  while (calibrated != 1){
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <main+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d002      	beq.n	80015c4 <main+0x2c>
    initialCalibration();
 80015be:	f7ff fe13 	bl	80011e8 <initialCalibration>
 80015c2:	e7f8      	b.n	80015b6 <main+0x1e>
  initVL53L1A1();
 80015c4:	f7ff fc0a 	bl	8000ddc <initVL53L1A1>
    if (clearToGetL1 == 1){
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <main+0x48>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d1fb      	bne.n	80015c8 <main+0x30>
      getVL53L1A1();
 80015d0:	f7ff fc96 	bl	8000f00 <getVL53L1A1>
      clearToGetL1 = 0;
 80015d4:	4b02      	ldr	r3, [pc, #8]	@ (80015e0 <main+0x48>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e7f5      	b.n	80015c8 <main+0x30>
 80015dc:	2001501c 	.word	0x2001501c
 80015e0:	20015014 	.word	0x20015014

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_Init+0x30>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ee:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015f6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f871 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	2003      	movs	r0, #3
 8001608:	f001 fff6 	bl	80035f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f001 f97a 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001610:	2000      	movs	r0, #0
 8001612:	bd08      	pop	{r3, pc}
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001618:	4a03      	ldr	r2, [pc, #12]	@ (8001628 <HAL_IncTick+0x10>)
 800161a:	6811      	ldr	r1, [r2, #0]
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_IncTick+0x14>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	440b      	add	r3, r1
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20015254 	.word	0x20015254
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001630:	4b01      	ldr	r3, [pc, #4]	@ (8001638 <HAL_GetTick+0x8>)
 8001632:	6818      	ldr	r0, [r3, #0]
}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20015254 	.word	0x20015254

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff fff6 	bl	8001630 <HAL_GetTick>
 8001644:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	f1b4 3fff 	cmp.w	r4, #4294967295
 800164a:	d002      	beq.n	8001652 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_Delay+0x24>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	f7ff ffed 	bl	8001630 <HAL_GetTick>
 8001656:	1b40      	subs	r0, r0, r5
 8001658:	42a0      	cmp	r0, r4
 800165a:	d3fa      	bcc.n	8001652 <HAL_Delay+0x16>
  {
  }
}
 800165c:	bd38      	pop	{r3, r4, r5, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001664:	2800      	cmp	r0, #0
 8001666:	db07      	blt.n	8001678 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001668:	f000 021f 	and.w	r2, r0, #31
 800166c:	0940      	lsrs	r0, r0, #5
 800166e:	2301      	movs	r3, #1
 8001670:	4093      	lsls	r3, r2
 8001672:	4a02      	ldr	r2, [pc, #8]	@ (800167c <__NVIC_EnableIRQ+0x18>)
 8001674:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001680:	2800      	cmp	r0, #0
 8001682:	db08      	blt.n	8001696 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	0109      	lsls	r1, r1, #4
 8001686:	b2c9      	uxtb	r1, r1
 8001688:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800168c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001690:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001694:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	f000 000f 	and.w	r0, r0, #15
 800169a:	0109      	lsls	r1, r1, #4
 800169c:	b2c9      	uxtb	r1, r1
 800169e:	4b01      	ldr	r3, [pc, #4]	@ (80016a4 <__NVIC_SetPriority+0x24>)
 80016a0:	5419      	strb	r1, [r3, r0]
  }
}
 80016a2:	4770      	bx	lr
 80016a4:	e000ed14 	.word	0xe000ed14

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016aa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ae:	f1c0 0c07 	rsb	ip, r0, #7
 80016b2:	f1bc 0f04 	cmp.w	ip, #4
 80016b6:	bf28      	it	cs
 80016b8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016bc:	1d03      	adds	r3, r0, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d90f      	bls.n	80016e2 <NVIC_EncodePriority+0x3a>
 80016c2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 3eff 	mov.w	lr, #4294967295
 80016c8:	fa0e f00c 	lsl.w	r0, lr, ip
 80016cc:	ea21 0100 	bic.w	r1, r1, r0
 80016d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80016d6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80016da:	ea41 0002 	orr.w	r0, r1, r2
 80016de:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	2300      	movs	r3, #0
 80016e4:	e7ee      	b.n	80016c4 <NVIC_EncodePriority+0x1c>
	...

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	0200      	lsls	r0, r0, #8
 80016f6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001704:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170c:	b510      	push	{r4, lr}
 800170e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_NVIC_SetPriority+0x1c>)
 8001712:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001714:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001718:	f7ff ffc6 	bl	80016a8 <NVIC_EncodePriority>
 800171c:	4601      	mov	r1, r0
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff ffae 	bl	8001680 <__NVIC_SetPriority>
}
 8001724:	bd10      	pop	{r4, pc}
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172e:	f7ff ff99 	bl	8001664 <__NVIC_EnableIRQ>
}
 8001732:	bd08      	pop	{r3, pc}

08001734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001734:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001736:	6803      	ldr	r3, [r0, #0]
 8001738:	b2d9      	uxtb	r1, r3
 800173a:	3910      	subs	r1, #16
 800173c:	4a0c      	ldr	r2, [pc, #48]	@ (8001770 <DMA_CalcBaseAndBitshift+0x3c>)
 800173e:	fba2 4201 	umull	r4, r2, r2, r1
 8001742:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001744:	4c0b      	ldr	r4, [pc, #44]	@ (8001774 <DMA_CalcBaseAndBitshift+0x40>)
 8001746:	5ca2      	ldrb	r2, [r4, r2]
 8001748:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800174a:	295f      	cmp	r1, #95	@ 0x5f
 800174c:	d909      	bls.n	8001762 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	3304      	adds	r3, #4
 8001758:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800175a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 800175c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001760:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001762:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	6583      	str	r3, [r0, #88]	@ 0x58
 800176c:	e7f5      	b.n	800175a <DMA_CalcBaseAndBitshift+0x26>
 800176e:	bf00      	nop
 8001770:	aaaaaaab 	.word	0xaaaaaaab
 8001774:	0800ede8 	.word	0x0800ede8

08001778 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001778:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177a:	6982      	ldr	r2, [r0, #24]
 800177c:	b992      	cbnz	r2, 80017a4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800177e:	2b01      	cmp	r3, #1
 8001780:	d00a      	beq.n	8001798 <DMA_CheckFifoParam+0x20>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d002      	beq.n	800178c <DMA_CheckFifoParam+0x14>
 8001786:	b10b      	cbz	r3, 800178c <DMA_CheckFifoParam+0x14>
 8001788:	2000      	movs	r0, #0
 800178a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800178e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001792:	d128      	bne.n	80017e6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2000      	movs	r0, #0
 8001796:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001798:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800179a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800179e:	d024      	beq.n	80017ea <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2000      	movs	r0, #0
 80017a2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017a4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80017a8:	d009      	beq.n	80017be <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d925      	bls.n	80017fa <DMA_CheckFifoParam+0x82>
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d125      	bne.n	80017fe <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80017b4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80017b8:	d123      	bne.n	8001802 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2000      	movs	r0, #0
 80017bc:	4770      	bx	lr
    switch (tmp)
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d803      	bhi.n	80017ca <DMA_CheckFifoParam+0x52>
 80017c2:	e8df f003 	tbb	[pc, r3]
 80017c6:	0414      	.short	0x0414
 80017c8:	0a14      	.short	0x0a14
 80017ca:	2000      	movs	r0, #0
 80017cc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80017d0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80017d4:	d10d      	bne.n	80017f2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80017d6:	2000      	movs	r0, #0
 80017d8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017da:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80017dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017e0:	d009      	beq.n	80017f6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80017e2:	2000      	movs	r0, #0
 80017e4:	4770      	bx	lr
        status = HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
 80017e8:	4770      	bx	lr
        status = HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
 80017ec:	4770      	bx	lr
      status = HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
 80017f0:	4770      	bx	lr
        status = HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	4770      	bx	lr
        status = HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	4770      	bx	lr
      status = HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	4770      	bx	lr
    switch (tmp)
 80017fe:	2000      	movs	r0, #0
 8001800:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001802:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001804:	4770      	bx	lr
	...

08001808 <HAL_DMA_Init>:
{
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ff10 	bl	8001630 <HAL_GetTick>
  if(hdma == NULL)
 8001810:	2c00      	cmp	r4, #0
 8001812:	d05b      	beq.n	80018cc <HAL_DMA_Init+0xc4>
 8001814:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001816:	2302      	movs	r3, #2
 8001818:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800181c:	2300      	movs	r3, #0
 800181e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	f012 0f01 	tst.w	r2, #1
 8001834:	d00a      	beq.n	800184c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001836:	f7ff fefb 	bl	8001630 <HAL_GetTick>
 800183a:	1b43      	subs	r3, r0, r5
 800183c:	2b05      	cmp	r3, #5
 800183e:	d9f5      	bls.n	800182c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001840:	2320      	movs	r3, #32
 8001842:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001844:	2003      	movs	r0, #3
 8001846:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800184a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800184c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800184e:	4920      	ldr	r1, [pc, #128]	@ (80018d0 <HAL_DMA_Init+0xc8>)
 8001850:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001852:	6862      	ldr	r2, [r4, #4]
 8001854:	68a0      	ldr	r0, [r4, #8]
 8001856:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001858:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	6920      	ldr	r0, [r4, #16]
 800185e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001860:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001862:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001864:	69a0      	ldr	r0, [r4, #24]
 8001866:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800186c:	6a20      	ldr	r0, [r4, #32]
 800186e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001870:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001872:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001874:	2904      	cmp	r1, #4
 8001876:	d01e      	beq.n	80018b6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001878:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800187a:	6826      	ldr	r6, [r4, #0]
 800187c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800187e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001882:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001884:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001886:	2b04      	cmp	r3, #4
 8001888:	d107      	bne.n	800189a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800188a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800188c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800188e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001890:	b11b      	cbz	r3, 800189a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff ff70 	bl	8001778 <DMA_CheckFifoParam>
 8001898:	b990      	cbnz	r0, 80018c0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800189a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff ff49 	bl	8001734 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80018a4:	233f      	movs	r3, #63	@ 0x3f
 80018a6:	4093      	lsls	r3, r2
 80018a8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	2000      	movs	r0, #0
 80018ac:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80018b4:	e7c9      	b.n	800184a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80018b8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80018ba:	4301      	orrs	r1, r0
 80018bc:	430a      	orrs	r2, r1
 80018be:	e7db      	b.n	8001878 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c0:	2340      	movs	r3, #64	@ 0x40
 80018c2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80018c4:	2001      	movs	r0, #1
 80018c6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80018ca:	e7be      	b.n	800184a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80018cc:	2001      	movs	r0, #1
 80018ce:	e7bc      	b.n	800184a <HAL_DMA_Init+0x42>
 80018d0:	f010803f 	.word	0xf010803f

080018d4 <HAL_DMA_IRQHandler>:
{
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b083      	sub	sp, #12
 80018d8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018de:	4b72      	ldr	r3, [pc, #456]	@ (8001aa8 <HAL_DMA_IRQHandler+0x1d4>)
 80018e0:	681d      	ldr	r5, [r3, #0]
 80018e2:	4b72      	ldr	r3, [pc, #456]	@ (8001aac <HAL_DMA_IRQHandler+0x1d8>)
 80018e4:	fba3 3505 	umull	r3, r5, r3, r5
 80018e8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ea:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80018ec:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ee:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80018f0:	2308      	movs	r3, #8
 80018f2:	4093      	lsls	r3, r2
 80018f4:	4233      	tst	r3, r6
 80018f6:	d010      	beq.n	800191a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018f8:	6803      	ldr	r3, [r0, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f012 0f04 	tst.w	r2, #4
 8001900:	d00b      	beq.n	800191a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f022 0204 	bic.w	r2, r2, #4
 8001908:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800190a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800190c:	2308      	movs	r3, #8
 800190e:	4093      	lsls	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001912:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800191c:	2301      	movs	r3, #1
 800191e:	4093      	lsls	r3, r2
 8001920:	4233      	tst	r3, r6
 8001922:	d009      	beq.n	8001938 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001924:	6822      	ldr	r2, [r4, #0]
 8001926:	6952      	ldr	r2, [r2, #20]
 8001928:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800192c:	d004      	beq.n	8001938 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800192e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001930:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800193a:	2304      	movs	r3, #4
 800193c:	4093      	lsls	r3, r2
 800193e:	4233      	tst	r3, r6
 8001940:	d009      	beq.n	8001956 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	f012 0f02 	tst.w	r2, #2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800194c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800194e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001956:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001958:	2310      	movs	r3, #16
 800195a:	4093      	lsls	r3, r2
 800195c:	4233      	tst	r3, r6
 800195e:	d024      	beq.n	80019aa <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f012 0f08 	tst.w	r2, #8
 8001968:	d01f      	beq.n	80019aa <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001974:	d00d      	beq.n	8001992 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800197c:	d104      	bne.n	8001988 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800197e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001980:	b19b      	cbz	r3, 80019aa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001982:	4620      	mov	r0, r4
 8001984:	4798      	blx	r3
 8001986:	e010      	b.n	80019aa <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001988:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800198a:	b173      	cbz	r3, 80019aa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800198c:	4620      	mov	r0, r4
 800198e:	4798      	blx	r3
 8001990:	e00b      	b.n	80019aa <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001998:	d103      	bne.n	80019a2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f022 0208 	bic.w	r2, r2, #8
 80019a0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019a4:	b10b      	cbz	r3, 80019aa <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80019a6:	4620      	mov	r0, r4
 80019a8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80019ac:	2320      	movs	r3, #32
 80019ae:	4093      	lsls	r3, r2
 80019b0:	4233      	tst	r3, r6
 80019b2:	d055      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	f012 0f10 	tst.w	r2, #16
 80019bc:	d050      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019be:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019c0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d00e      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80019d2:	d033      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80019da:	d12a      	bne.n	8001a32 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80019dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03e      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80019e2:	4620      	mov	r0, r4
 80019e4:	4798      	blx	r3
 80019e6:	e03b      	b.n	8001a60 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	f023 0316 	bic.w	r3, r3, #22
 80019f0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f2:	6822      	ldr	r2, [r4, #0]
 80019f4:	6953      	ldr	r3, [r2, #20]
 80019f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019fa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019fe:	b1a3      	cbz	r3, 8001a2a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	f023 0308 	bic.w	r3, r3, #8
 8001a08:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a0c:	233f      	movs	r3, #63	@ 0x3f
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001a1e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03f      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a24:	4620      	mov	r0, r4
 8001a26:	4798      	blx	r3
        return;
 8001a28:	e03c      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1e7      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x12c>
 8001a30:	e7eb      	b.n	8001a0a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001a32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a34:	b1a3      	cbz	r3, 8001a60 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001a36:	4620      	mov	r0, r4
 8001a38:	4798      	blx	r3
 8001a3a:	e011      	b.n	8001a60 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001a42:	d109      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	f022 0210 	bic.w	r2, r2, #16
 8001a4a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001a52:	2300      	movs	r3, #0
 8001a54:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001a58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a5a:	b10b      	cbz	r3, 8001a60 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a62:	b1fb      	cbz	r3, 8001aa4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a66:	f013 0f01 	tst.w	r3, #1
 8001a6a:	d017      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	42ab      	cmp	r3, r5
 8001a84:	d804      	bhi.n	8001a90 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f013 0f01 	tst.w	r3, #1
 8001a8e:	d1f5      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001a96:	2300      	movs	r3, #0
 8001a98:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001a9c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001a9e:	b10b      	cbz	r3, 8001aa4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4798      	blx	r3
}
 8001aa4:	b003      	add	sp, #12
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa8:	20000010 	.word	0x20000010
 8001aac:	1b4e81b5 	.word	0x1b4e81b5

08001ab0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f200 80d7 	bhi.w	8001c66 <HAL_GPIO_Init+0x1b6>
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	e065      	b.n	8001b8a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001abe:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001ac4:	2403      	movs	r4, #3
 8001ac6:	fa04 f40e 	lsl.w	r4, r4, lr
 8001aca:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	68cc      	ldr	r4, [r1, #12]
 8001ad0:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ad4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001ad6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ada:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	684a      	ldr	r2, [r1, #4]
 8001ae0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001ae8:	6042      	str	r2, [r0, #4]
 8001aea:	e05c      	b.n	8001ba6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aec:	08dc      	lsrs	r4, r3, #3
 8001aee:	3408      	adds	r4, #8
 8001af0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af4:	f003 0507 	and.w	r5, r3, #7
 8001af8:	00ad      	lsls	r5, r5, #2
 8001afa:	f04f 0e0f 	mov.w	lr, #15
 8001afe:	fa0e fe05 	lsl.w	lr, lr, r5
 8001b02:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b06:	690a      	ldr	r2, [r1, #16]
 8001b08:	40aa      	lsls	r2, r5
 8001b0a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b12:	e05c      	b.n	8001bce <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b14:	2204      	movs	r2, #4
 8001b16:	e000      	b.n	8001b1a <HAL_GPIO_Init+0x6a>
 8001b18:	2200      	movs	r2, #0
 8001b1a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b1e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	3402      	adds	r4, #2
 8001b22:	4d51      	ldr	r5, [pc, #324]	@ (8001c68 <HAL_GPIO_Init+0x1b8>)
 8001b24:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b28:	4a50      	ldr	r2, [pc, #320]	@ (8001c6c <HAL_GPIO_Init+0x1bc>)
 8001b2a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	ea6f 020c 	mvn.w	r2, ip
 8001b30:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b34:	684e      	ldr	r6, [r1, #4]
 8001b36:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001b3a:	d001      	beq.n	8001b40 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001b3c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001b40:	4c4a      	ldr	r4, [pc, #296]	@ (8001c6c <HAL_GPIO_Init+0x1bc>)
 8001b42:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001b44:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b4a:	684e      	ldr	r6, [r1, #4]
 8001b4c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001b50:	d001      	beq.n	8001b56 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001b52:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001b56:	4c45      	ldr	r4, [pc, #276]	@ (8001c6c <HAL_GPIO_Init+0x1bc>)
 8001b58:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001b5a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b60:	684e      	ldr	r6, [r1, #4]
 8001b62:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001b66:	d001      	beq.n	8001b6c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001b68:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001b6c:	4c3f      	ldr	r4, [pc, #252]	@ (8001c6c <HAL_GPIO_Init+0x1bc>)
 8001b6e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b70:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b74:	684d      	ldr	r5, [r1, #4]
 8001b76:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001b7a:	d001      	beq.n	8001b80 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001b7c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001b80:	4c3a      	ldr	r4, [pc, #232]	@ (8001c6c <HAL_GPIO_Init+0x1bc>)
 8001b82:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b84:	3301      	adds	r3, #1
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	d86b      	bhi.n	8001c62 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	680c      	ldr	r4, [r1, #0]
 8001b90:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001b94:	ea32 0404 	bics.w	r4, r2, r4
 8001b98:	d1f4      	bne.n	8001b84 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	684c      	ldr	r4, [r1, #4]
 8001b9c:	f004 0403 	and.w	r4, r4, #3
 8001ba0:	3c01      	subs	r4, #1
 8001ba2:	2c01      	cmp	r4, #1
 8001ba4:	d98b      	bls.n	8001abe <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba6:	684a      	ldr	r2, [r1, #4]
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	2a03      	cmp	r2, #3
 8001bae:	d009      	beq.n	8001bc4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001bb0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	005d      	lsls	r5, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	40aa      	lsls	r2, r5
 8001bb8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	688a      	ldr	r2, [r1, #8]
 8001bbe:	40aa      	lsls	r2, r5
 8001bc0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001bc2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	684a      	ldr	r2, [r1, #4]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	2a02      	cmp	r2, #2
 8001bcc:	d08e      	beq.n	8001aec <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001bce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001bda:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bde:	684a      	ldr	r2, [r1, #4]
 8001be0:	f002 0203 	and.w	r2, r2, #3
 8001be4:	fa02 f20e 	lsl.w	r2, r2, lr
 8001be8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001bea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bec:	684a      	ldr	r2, [r1, #4]
 8001bee:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001bf2:	d0c7      	beq.n	8001b84 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	9201      	str	r2, [sp, #4]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <HAL_GPIO_Init+0x1c0>)
 8001bfa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001bfc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001c00:	6454      	str	r4, [r2, #68]	@ 0x44
 8001c02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c04:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c08:	9201      	str	r2, [sp, #4]
 8001c0a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0c:	089c      	lsrs	r4, r3, #2
 8001c0e:	1ca5      	adds	r5, r4, #2
 8001c10:	4a15      	ldr	r2, [pc, #84]	@ (8001c68 <HAL_GPIO_Init+0x1b8>)
 8001c12:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c16:	f003 0e03 	and.w	lr, r3, #3
 8001c1a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c24:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c28:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <HAL_GPIO_Init+0x1c4>)
 8001c2a:	4290      	cmp	r0, r2
 8001c2c:	f43f af74 	beq.w	8001b18 <HAL_GPIO_Init+0x68>
 8001c30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c34:	4290      	cmp	r0, r2
 8001c36:	d00e      	beq.n	8001c56 <HAL_GPIO_Init+0x1a6>
 8001c38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c3c:	4290      	cmp	r0, r2
 8001c3e:	d00c      	beq.n	8001c5a <HAL_GPIO_Init+0x1aa>
 8001c40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c44:	4290      	cmp	r0, r2
 8001c46:	d00a      	beq.n	8001c5e <HAL_GPIO_Init+0x1ae>
 8001c48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	f43f af61 	beq.w	8001b14 <HAL_GPIO_Init+0x64>
 8001c52:	2207      	movs	r2, #7
 8001c54:	e761      	b.n	8001b1a <HAL_GPIO_Init+0x6a>
 8001c56:	2201      	movs	r2, #1
 8001c58:	e75f      	b.n	8001b1a <HAL_GPIO_Init+0x6a>
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	e75d      	b.n	8001b1a <HAL_GPIO_Init+0x6a>
 8001c5e:	2203      	movs	r2, #3
 8001c60:	e75b      	b.n	8001b1a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001c62:	b002      	add	sp, #8
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	4770      	bx	lr
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40013c00 	.word	0x40013c00
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	d87c      	bhi.n	8001d78 <HAL_GPIO_DeInit+0x100>
{
 8001c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c80:	e02d      	b.n	8001cde <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c82:	2504      	movs	r5, #4
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_DeInit+0x10>
 8001c86:	2500      	movs	r5, #0
 8001c88:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c8c:	42a5      	cmp	r5, r4
 8001c8e:	d057      	beq.n	8001d40 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c90:	6804      	ldr	r4, [r0, #0]
 8001c92:	005d      	lsls	r5, r3, #1
 8001c94:	f04f 0c03 	mov.w	ip, #3
 8001c98:	fa0c fc05 	lsl.w	ip, ip, r5
 8001c9c:	ea24 040c 	bic.w	r4, r4, ip
 8001ca0:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001ca6:	f10e 0e08 	add.w	lr, lr, #8
 8001caa:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8001cae:	f003 0607 	and.w	r6, r3, #7
 8001cb2:	00b6      	lsls	r6, r6, #2
 8001cb4:	250f      	movs	r5, #15
 8001cb6:	40b5      	lsls	r5, r6
 8001cb8:	ea24 0405 	bic.w	r4, r4, r5
 8001cbc:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc0:	68c4      	ldr	r4, [r0, #12]
 8001cc2:	ea24 040c 	bic.w	r4, r4, ip
 8001cc6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	6844      	ldr	r4, [r0, #4]
 8001cca:	ea24 0202 	bic.w	r2, r4, r2
 8001cce:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	6882      	ldr	r2, [r0, #8]
 8001cd2:	ea22 020c 	bic.w	r2, r2, ip
 8001cd6:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd8:	3301      	adds	r3, #1
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	d84b      	bhi.n	8001d76 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8001ce2:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8001ce6:	ea32 0401 	bics.w	r4, r2, r1
 8001cea:	d1f5      	bne.n	8001cd8 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001cec:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8001cf0:	f10e 0502 	add.w	r5, lr, #2
 8001cf4:	4c21      	ldr	r4, [pc, #132]	@ (8001d7c <HAL_GPIO_DeInit+0x104>)
 8001cf6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001cfa:	f003 0c03 	and.w	ip, r3, #3
 8001cfe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001d02:	250f      	movs	r5, #15
 8001d04:	fa05 f70c 	lsl.w	r7, r5, ip
 8001d08:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d0a:	4d1d      	ldr	r5, [pc, #116]	@ (8001d80 <HAL_GPIO_DeInit+0x108>)
 8001d0c:	42a8      	cmp	r0, r5
 8001d0e:	d0ba      	beq.n	8001c86 <HAL_GPIO_DeInit+0xe>
 8001d10:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001d14:	42a8      	cmp	r0, r5
 8001d16:	d00d      	beq.n	8001d34 <HAL_GPIO_DeInit+0xbc>
 8001d18:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001d1c:	42a8      	cmp	r0, r5
 8001d1e:	d00b      	beq.n	8001d38 <HAL_GPIO_DeInit+0xc0>
 8001d20:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001d24:	42a8      	cmp	r0, r5
 8001d26:	d009      	beq.n	8001d3c <HAL_GPIO_DeInit+0xc4>
 8001d28:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001d2c:	42a8      	cmp	r0, r5
 8001d2e:	d0a8      	beq.n	8001c82 <HAL_GPIO_DeInit+0xa>
 8001d30:	2507      	movs	r5, #7
 8001d32:	e7a9      	b.n	8001c88 <HAL_GPIO_DeInit+0x10>
 8001d34:	2501      	movs	r5, #1
 8001d36:	e7a7      	b.n	8001c88 <HAL_GPIO_DeInit+0x10>
 8001d38:	2502      	movs	r5, #2
 8001d3a:	e7a5      	b.n	8001c88 <HAL_GPIO_DeInit+0x10>
 8001d3c:	2503      	movs	r5, #3
 8001d3e:	e7a3      	b.n	8001c88 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d40:	4c10      	ldr	r4, [pc, #64]	@ (8001d84 <HAL_GPIO_DeInit+0x10c>)
 8001d42:	6825      	ldr	r5, [r4, #0]
 8001d44:	ea25 0506 	bic.w	r5, r5, r6
 8001d48:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d4a:	6865      	ldr	r5, [r4, #4]
 8001d4c:	ea25 0506 	bic.w	r5, r5, r6
 8001d50:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d52:	68e5      	ldr	r5, [r4, #12]
 8001d54:	ea25 0506 	bic.w	r5, r5, r6
 8001d58:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d5a:	68a5      	ldr	r5, [r4, #8]
 8001d5c:	ea25 0506 	bic.w	r5, r5, r6
 8001d60:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d62:	4e06      	ldr	r6, [pc, #24]	@ (8001d7c <HAL_GPIO_DeInit+0x104>)
 8001d64:	f10e 0402 	add.w	r4, lr, #2
 8001d68:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8001d6c:	ea25 0507 	bic.w	r5, r5, r7
 8001d70:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8001d74:	e78c      	b.n	8001c90 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d88:	6903      	ldr	r3, [r0, #16]
 8001d8a:	4219      	tst	r1, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8e:	2001      	movs	r0, #1
 8001d90:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001d94:	4770      	bx	lr

08001d96 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d96:	b10a      	cbz	r2, 8001d9c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d98:	6181      	str	r1, [r0, #24]
 8001d9a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9c:	0409      	lsls	r1, r1, #16
 8001d9e:	6181      	str	r1, [r0, #24]
  }
}
 8001da0:	4770      	bx	lr

08001da2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da4:	ea01 0203 	and.w	r2, r1, r3
 8001da8:	ea21 0103 	bic.w	r1, r1, r3
 8001dac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001db0:	6181      	str	r1, [r0, #24]
}
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001db8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4203      	tst	r3, r0
 8001dc0:	d100      	bne.n	8001dc4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001dc2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc4:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001dc6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc8:	f7ff fff4 	bl	8001db4 <HAL_GPIO_EXTI_Callback>
}
 8001dcc:	e7f9      	b.n	8001dc2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001dce:	bf00      	nop
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001ddc:	d101      	bne.n	8001de2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001dde:	2000      	movs	r0, #0
}
 8001de0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001de6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dec:	2220      	movs	r2, #32
 8001dee:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001df6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001df8:	f042 0204 	orr.w	r2, r2, #4
 8001dfc:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001dfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	4770      	bx	lr

08001e06 <I2C_WaitOnFlagUntilTimeout>:
{
 8001e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0a:	4606      	mov	r6, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	4617      	mov	r7, r2
 8001e10:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e12:	e03b      	b.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e14:	f7ff fc0c 	bl	8001630 <HAL_GetTick>
 8001e18:	9b06      	ldr	r3, [sp, #24]
 8001e1a:	1ac0      	subs	r0, r0, r3
 8001e1c:	4540      	cmp	r0, r8
 8001e1e:	d802      	bhi.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0x20>
 8001e20:	f1b8 0f00 	cmp.w	r8, #0
 8001e24:	d132      	bne.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e26:	2d01      	cmp	r5, #1
 8001e28:	d018      	beq.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e2a:	6833      	ldr	r3, [r6, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	ea24 0303 	bic.w	r3, r4, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	429f      	cmp	r7, r3
 8001e3c:	d126      	bne.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e42:	2220      	movs	r2, #32
 8001e44:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e48:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e4c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001e54:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001e58:	2001      	movs	r0, #1
 8001e5a:	e027      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e5c:	6833      	ldr	r3, [r6, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	ea24 0303 	bic.w	r3, r4, r3
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	e7e5      	b.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6e:	6833      	ldr	r3, [r6, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	ea24 0c03 	bic.w	ip, r4, r3
 8001e76:	fa1f fc8c 	uxth.w	ip, ip
 8001e7a:	fabc fc8c 	clz	ip, ip
 8001e7e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001e82:	4567      	cmp	r7, ip
 8001e84:	d111      	bne.n	8001eaa <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001e8a:	d1c3      	bne.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001e90:	2d01      	cmp	r5, #1
 8001e92:	d0ec      	beq.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x68>
 8001e94:	6833      	ldr	r3, [r6, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	ea24 0c03 	bic.w	ip, r4, r3
 8001e9c:	fa1f fc8c 	uxth.w	ip, ip
 8001ea0:	fabc fc8c 	clz	ip, ip
 8001ea4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001ea8:	e7eb      	b.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001eaa:	2000      	movs	r0, #0
}
 8001eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb4:	4605      	mov	r5, r0
 8001eb6:	460e      	mov	r6, r1
 8001eb8:	4690      	mov	r8, r2
 8001eba:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ebc:	e053      	b.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ecc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001edc:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001ede:	f042 0204 	orr.w	r2, r2, #4
 8001ee2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001ee4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
 8001eea:	e04a      	b.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7ff fba0 	bl	8001630 <HAL_GetTick>
 8001ef0:	eba0 0009 	sub.w	r0, r0, r9
 8001ef4:	4540      	cmp	r0, r8
 8001ef6:	d802      	bhi.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001ef8:	f1b8 0f00 	cmp.w	r8, #0
 8001efc:	d133      	bne.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001efe:	2f01      	cmp	r7, #1
 8001f00:	d017      	beq.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	ea26 0303 	bic.w	r3, r6, r3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b00      	subs	r3, #0
 8001f0e:	bf18      	it	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	b343      	cbz	r3, 8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f22:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001f2a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e027      	b.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	ea26 0303 	bic.w	r3, r6, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b00      	subs	r3, #0
 8001f3e:	bf18      	it	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	e7e6      	b.n	8001f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	699c      	ldr	r4, [r3, #24]
 8001f48:	ea26 0404 	bic.w	r4, r6, r4
 8001f4c:	b2a4      	uxth	r4, r4
 8001f4e:	3c00      	subs	r4, #0
 8001f50:	bf18      	it	ne
 8001f52:	2401      	movne	r4, #1
 8001f54:	b1a4      	cbz	r4, 8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f56:	682b      	ldr	r3, [r5, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001f5e:	d1ae      	bne.n	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001f60:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001f64:	d1c2      	bne.n	8001eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f66:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001f6a:	2f01      	cmp	r7, #1
 8001f6c:	d1ea      	bne.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	695c      	ldr	r4, [r3, #20]
 8001f72:	ea26 0404 	bic.w	r4, r6, r4
 8001f76:	b2a4      	uxth	r4, r4
 8001f78:	3c00      	subs	r4, #0
 8001f7a:	bf18      	it	ne
 8001f7c:	2401      	movne	r4, #1
 8001f7e:	e7e9      	b.n	8001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001f80:	2000      	movs	r0, #0
}
 8001f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001f88 <I2C_MasterRequestWrite>:
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	4616      	mov	r6, r2
 8001f92:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f94:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d00d      	beq.n	8001fb6 <I2C_MasterRequestWrite+0x2e>
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d00b      	beq.n	8001fb6 <I2C_MasterRequestWrite+0x2e>
 8001f9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fa2:	d008      	beq.n	8001fb6 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fa4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d10a      	bne.n	8001fc0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001faa:	6802      	ldr	r2, [r0, #0]
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e004      	b.n	8001fc0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc0:	9700      	str	r7, [sp, #0]
 8001fc2:	4633      	mov	r3, r6
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff ff1b 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	b980      	cbnz	r0, 8001ff4 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd2:	6923      	ldr	r3, [r4, #16]
 8001fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fd8:	d116      	bne.n	8002008 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001fe0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	4632      	mov	r2, r6
 8001fe6:	4913      	ldr	r1, [pc, #76]	@ (8002034 <I2C_MasterRequestWrite+0xac>)
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff ff61 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fee:	b9f8      	cbnz	r0, 8002030 <I2C_MasterRequestWrite+0xa8>
}
 8001ff0:	b003      	add	sp, #12
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001ffc:	d002      	beq.n	8002004 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002002:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002004:	2003      	movs	r0, #3
 8002006:	e7f3      	b.n	8001ff0 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002008:	11eb      	asrs	r3, r5, #7
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	f003 0306 	and.w	r3, r3, #6
 8002010:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8002014:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	4632      	mov	r2, r6
 800201a:	4907      	ldr	r1, [pc, #28]	@ (8002038 <I2C_MasterRequestWrite+0xb0>)
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ff47 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002022:	b918      	cbnz	r0, 800202c <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	b2ed      	uxtb	r5, r5
 8002028:	611d      	str	r5, [r3, #16]
 800202a:	e7da      	b.n	8001fe2 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 800202c:	2001      	movs	r0, #1
 800202e:	e7df      	b.n	8001ff0 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8002030:	2001      	movs	r0, #1
 8002032:	e7dd      	b.n	8001ff0 <I2C_MasterRequestWrite+0x68>
 8002034:	00010002 	.word	0x00010002
 8002038:	00010008 	.word	0x00010008

0800203c <I2C_MasterRequestRead>:
{
 800203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	4604      	mov	r4, r0
 8002044:	460d      	mov	r5, r1
 8002046:	4616      	mov	r6, r2
 8002048:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800204a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204c:	6801      	ldr	r1, [r0, #0]
 800204e:	680b      	ldr	r3, [r1, #0]
 8002050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002054:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002056:	2a08      	cmp	r2, #8
 8002058:	d00d      	beq.n	8002076 <I2C_MasterRequestRead+0x3a>
 800205a:	2a01      	cmp	r2, #1
 800205c:	d00b      	beq.n	8002076 <I2C_MasterRequestRead+0x3a>
 800205e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002062:	d008      	beq.n	8002076 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002064:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002066:	2b11      	cmp	r3, #17
 8002068:	d10a      	bne.n	8002080 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206a:	6802      	ldr	r2, [r0, #0]
 800206c:	6813      	ldr	r3, [r2, #0]
 800206e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e004      	b.n	8002080 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	6813      	ldr	r3, [r2, #0]
 800207a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002080:	9700      	str	r7, [sp, #0]
 8002082:	4633      	mov	r3, r6
 8002084:	2200      	movs	r2, #0
 8002086:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff febb 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 8002090:	b998      	cbnz	r0, 80020ba <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002098:	d119      	bne.n	80020ce <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	f045 0501 	orr.w	r5, r5, #1
 80020a0:	b2ed      	uxtb	r5, r5
 80020a2:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	4632      	mov	r2, r6
 80020a8:	492a      	ldr	r1, [pc, #168]	@ (8002154 <I2C_MasterRequestRead+0x118>)
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff ff00 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d14c      	bne.n	800214e <I2C_MasterRequestRead+0x112>
}
 80020b4:	b004      	add	sp, #16
 80020b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020c2:	d002      	beq.n	80020ca <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c8:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80020ca:	2003      	movs	r0, #3
 80020cc:	e7f2      	b.n	80020b4 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020ce:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80020d2:	f008 0806 	and.w	r8, r8, #6
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 80020dc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020de:	463b      	mov	r3, r7
 80020e0:	4632      	mov	r2, r6
 80020e2:	491d      	ldr	r1, [pc, #116]	@ (8002158 <I2C_MasterRequestRead+0x11c>)
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff fee3 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ea:	b108      	cbz	r0, 80020f0 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 80020ec:	2001      	movs	r0, #1
 80020ee:	e7e1      	b.n	80020b4 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	b2ed      	uxtb	r5, r5
 80020f4:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020f6:	463b      	mov	r3, r7
 80020f8:	4632      	mov	r2, r6
 80020fa:	4916      	ldr	r1, [pc, #88]	@ (8002154 <I2C_MasterRequestRead+0x118>)
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff fed7 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002102:	b108      	cbz	r0, 8002108 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 8002104:	2001      	movs	r0, #1
 8002106:	e7d5      	b.n	80020b4 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002108:	2200      	movs	r2, #0
 800210a:	9203      	str	r2, [sp, #12]
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	6959      	ldr	r1, [r3, #20]
 8002110:	9103      	str	r1, [sp, #12]
 8002112:	6999      	ldr	r1, [r3, #24]
 8002114:	9103      	str	r1, [sp, #12]
 8002116:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800211e:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	9700      	str	r7, [sp, #0]
 8002122:	4633      	mov	r3, r6
 8002124:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff fe6c 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 800212e:	b920      	cbnz	r0, 800213a <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 8002136:	6113      	str	r3, [r2, #16]
 8002138:	e7b4      	b.n	80020a4 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002142:	d002      	beq.n	800214a <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002148:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 800214a:	2003      	movs	r0, #3
 800214c:	e7b2      	b.n	80020b4 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 800214e:	2001      	movs	r0, #1
 8002150:	e7b0      	b.n	80020b4 <I2C_MasterRequestRead+0x78>
 8002152:	bf00      	nop
 8002154:	00010002 	.word	0x00010002
 8002158:	00010008 	.word	0x00010008

0800215c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800216c:	d121      	bne.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff fe30 	bl	8001dd4 <I2C_IsAcknowledgeFailed>
 8002174:	b9f8      	cbnz	r0, 80021b6 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002176:	f1b5 3fff 	cmp.w	r5, #4294967295
 800217a:	d0f3      	beq.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7ff fa58 	bl	8001630 <HAL_GetTick>
 8002180:	1b80      	subs	r0, r0, r6
 8002182:	42a8      	cmp	r0, r5
 8002184:	d801      	bhi.n	800218a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002186:	2d00      	cmp	r5, #0
 8002188:	d1ec      	bne.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002192:	d1e7      	bne.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002198:	2220      	movs	r2, #32
 800219a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80021aa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
 80021b0:	e000      	b.n	80021b4 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80021b2:	2000      	movs	r0, #0
}
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
 80021b8:	e7fc      	b.n	80021b4 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080021ba <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80021ba:	b570      	push	{r4, r5, r6, lr}
 80021bc:	4604      	mov	r4, r0
 80021be:	460d      	mov	r5, r1
 80021c0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f013 0f04 	tst.w	r3, #4
 80021ca:	d121      	bne.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff fe01 	bl	8001dd4 <I2C_IsAcknowledgeFailed>
 80021d2:	b9f8      	cbnz	r0, 8002214 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80021d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021d8:	d0f3      	beq.n	80021c2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff fa29 	bl	8001630 <HAL_GetTick>
 80021de:	1b80      	subs	r0, r0, r6
 80021e0:	42a8      	cmp	r0, r5
 80021e2:	d801      	bhi.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80021e4:	2d00      	cmp	r5, #0
 80021e6:	d1ec      	bne.n	80021c2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f013 0f04 	tst.w	r3, #4
 80021f0:	d1e7      	bne.n	80021c2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021f6:	2220      	movs	r2, #32
 80021f8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002208:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800220c:	2001      	movs	r0, #1
 800220e:	e000      	b.n	8002212 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002210:	2000      	movs	r0, #0
}
 8002212:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002214:	2001      	movs	r0, #1
 8002216:	e7fc      	b.n	8002212 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08002218 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	4604      	mov	r4, r0
 800221c:	460d      	mov	r5, r1
 800221e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002220:	e014      	b.n	800224c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002222:	f06f 0210 	mvn.w	r2, #16
 8002226:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002228:	2300      	movs	r3, #0
 800222a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800222c:	2220      	movs	r2, #32
 800222e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002232:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002236:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002238:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800223a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
 8002240:	e025      	b.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800224a:	d010      	beq.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	6958      	ldr	r0, [r3, #20]
 8002250:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002254:	d11a      	bne.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002256:	6958      	ldr	r0, [r3, #20]
 8002258:	f010 0f10 	tst.w	r0, #16
 800225c:	d1e1      	bne.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7ff f9e7 	bl	8001630 <HAL_GetTick>
 8002262:	1b80      	subs	r0, r0, r6
 8002264:	42a8      	cmp	r0, r5
 8002266:	d8ec      	bhi.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8002268:	2d00      	cmp	r5, #0
 800226a:	d1ef      	bne.n	800224c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 800226c:	e7e9      	b.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	2300      	movs	r3, #0
 8002270:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002272:	2220      	movs	r2, #32
 8002274:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002284:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	e000      	b.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 800228c:	2000      	movs	r0, #0
}
 800228e:	bd70      	pop	{r4, r5, r6, pc}

08002290 <HAL_I2C_MspInit>:
}
 8002290:	4770      	bx	lr
	...

08002294 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002294:	2800      	cmp	r0, #0
 8002296:	f000 80cc 	beq.w	8002432 <HAL_I2C_Init+0x19e>
{
 800229a:	b570      	push	{r4, r5, r6, lr}
 800229c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d077      	beq.n	8002396 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a6:	2324      	movs	r3, #36	@ 0x24
 80022a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022be:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80022c8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ca:	f000 fee9 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	4b5a      	ldr	r3, [pc, #360]	@ (800243c <HAL_I2C_Init+0x1a8>)
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d864      	bhi.n	80023a0 <HAL_I2C_Init+0x10c>
 80022d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002440 <HAL_I2C_Init+0x1ac>)
 80022d8:	4298      	cmp	r0, r3
 80022da:	bf8c      	ite	hi
 80022dc:	2300      	movhi	r3, #0
 80022de:	2301      	movls	r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 80a8 	bne.w	8002436 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80022e6:	4957      	ldr	r1, [pc, #348]	@ (8002444 <HAL_I2C_Init+0x1b0>)
 80022e8:	fba1 3100 	umull	r3, r1, r1, r0
 80022ec:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ee:	6825      	ldr	r5, [r4, #0]
 80022f0:	686a      	ldr	r2, [r5, #4]
 80022f2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80022f6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80022fa:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fc:	6821      	ldr	r1, [r4, #0]
 80022fe:	6a0a      	ldr	r2, [r1, #32]
 8002300:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002304:	6866      	ldr	r6, [r4, #4]
 8002306:	4d4d      	ldr	r5, [pc, #308]	@ (800243c <HAL_I2C_Init+0x1a8>)
 8002308:	42ae      	cmp	r6, r5
 800230a:	d84f      	bhi.n	80023ac <HAL_I2C_Init+0x118>
 800230c:	3301      	adds	r3, #1
 800230e:	4313      	orrs	r3, r2
 8002310:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002312:	6821      	ldr	r1, [r4, #0]
 8002314:	69ca      	ldr	r2, [r1, #28]
 8002316:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800231a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800231e:	6865      	ldr	r5, [r4, #4]
 8002320:	4b46      	ldr	r3, [pc, #280]	@ (800243c <HAL_I2C_Init+0x1a8>)
 8002322:	429d      	cmp	r5, r3
 8002324:	d84c      	bhi.n	80023c0 <HAL_I2C_Init+0x12c>
 8002326:	1e43      	subs	r3, r0, #1
 8002328:	006d      	lsls	r5, r5, #1
 800232a:	fbb3 f3f5 	udiv	r3, r3, r5
 800232e:	3301      	adds	r3, #1
 8002330:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002334:	4203      	tst	r3, r0
 8002336:	d078      	beq.n	800242a <HAL_I2C_Init+0x196>
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	431a      	orrs	r2, r3
 800233e:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002340:	6821      	ldr	r1, [r4, #0]
 8002342:	680b      	ldr	r3, [r1, #0]
 8002344:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002348:	69e2      	ldr	r2, [r4, #28]
 800234a:	6a20      	ldr	r0, [r4, #32]
 800234c:	4302      	orrs	r2, r0
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002352:	6821      	ldr	r1, [r4, #0]
 8002354:	688b      	ldr	r3, [r1, #8]
 8002356:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800235a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800235e:	6922      	ldr	r2, [r4, #16]
 8002360:	68e0      	ldr	r0, [r4, #12]
 8002362:	4302      	orrs	r2, r0
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002368:	6821      	ldr	r1, [r4, #0]
 800236a:	68cb      	ldr	r3, [r1, #12]
 800236c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002370:	6962      	ldr	r2, [r4, #20]
 8002372:	69a0      	ldr	r0, [r4, #24]
 8002374:	4302      	orrs	r2, r0
 8002376:	4313      	orrs	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	2000      	movs	r0, #0
 8002386:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002388:	2320      	movs	r3, #32
 800238a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8002394:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800239a:	f7ff ff79 	bl	8002290 <HAL_I2C_MspInit>
 800239e:	e782      	b.n	80022a6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023a0:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_I2C_Init+0x1b4>)
 80023a2:	4298      	cmp	r0, r3
 80023a4:	bf8c      	ite	hi
 80023a6:	2300      	movhi	r3, #0
 80023a8:	2301      	movls	r3, #1
 80023aa:	e799      	b.n	80022e0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ac:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80023b0:	fb05 f303 	mul.w	r3, r5, r3
 80023b4:	4d25      	ldr	r5, [pc, #148]	@ (800244c <HAL_I2C_Init+0x1b8>)
 80023b6:	fba5 5303 	umull	r5, r3, r5, r3
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	3301      	adds	r3, #1
 80023be:	e7a6      	b.n	800230e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023c0:	68a6      	ldr	r6, [r4, #8]
 80023c2:	b9be      	cbnz	r6, 80023f4 <HAL_I2C_Init+0x160>
 80023c4:	1e43      	subs	r3, r0, #1
 80023c6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80023ca:	fbb3 f3fc 	udiv	r3, r3, ip
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	bb43      	cbnz	r3, 800242e <HAL_I2C_Init+0x19a>
 80023dc:	b9c6      	cbnz	r6, 8002410 <HAL_I2C_Init+0x17c>
 80023de:	1e43      	subs	r3, r0, #1
 80023e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023e4:	fbb3 f3f5 	udiv	r3, r3, r5
 80023e8:	3301      	adds	r3, #1
 80023ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f2:	e7a3      	b.n	800233c <HAL_I2C_Init+0xa8>
 80023f4:	1e43      	subs	r3, r0, #1
 80023f6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80023fa:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80023fe:	fbb3 f3fc 	udiv	r3, r3, ip
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	e7e4      	b.n	80023da <HAL_I2C_Init+0x146>
 8002410:	1e43      	subs	r3, r0, #1
 8002412:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002416:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800241a:	fbb3 f3f5 	udiv	r3, r3, r5
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002428:	e788      	b.n	800233c <HAL_I2C_Init+0xa8>
 800242a:	2304      	movs	r3, #4
 800242c:	e786      	b.n	800233c <HAL_I2C_Init+0xa8>
 800242e:	2301      	movs	r3, #1
 8002430:	e784      	b.n	800233c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002432:	2001      	movs	r0, #1
}
 8002434:	4770      	bx	lr
    return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
 8002438:	e7ac      	b.n	8002394 <HAL_I2C_Init+0x100>
 800243a:	bf00      	nop
 800243c:	000186a0 	.word	0x000186a0
 8002440:	001e847f 	.word	0x001e847f
 8002444:	431bde83 	.word	0x431bde83
 8002448:	003d08ff 	.word	0x003d08ff
 800244c:	10624dd3 	.word	0x10624dd3

08002450 <HAL_I2C_MspDeInit>:
}
 8002450:	4770      	bx	lr

08002452 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002452:	b1a8      	cbz	r0, 8002480 <HAL_I2C_DeInit+0x2e>
{
 8002454:	b510      	push	{r4, lr}
 8002456:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	2324      	movs	r3, #36	@ 0x24
 800245a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800245e:	6802      	ldr	r2, [r0, #0]
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002468:	f7ff fff2 	bl	8002450 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800246c:	2000      	movs	r0, #0
 800246e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002470:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002474:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002476:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 800247a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800247e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002480:	2001      	movs	r0, #1
}
 8002482:	4770      	bx	lr

08002484 <HAL_I2C_Master_Transmit>:
{
 8002484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002488:	b085      	sub	sp, #20
 800248a:	4604      	mov	r4, r0
 800248c:	460f      	mov	r7, r1
 800248e:	4691      	mov	r9, r2
 8002490:	4698      	mov	r8, r3
 8002492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff f8cc 	bl	8001630 <HAL_GetTick>
 8002498:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800249e:	b2c0      	uxtb	r0, r0
 80024a0:	2820      	cmp	r0, #32
 80024a2:	d004      	beq.n	80024ae <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80024a4:	2702      	movs	r7, #2
}
 80024a6:	4638      	mov	r0, r7
 80024a8:	b005      	add	sp, #20
 80024aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ae:	9500      	str	r5, [sp, #0]
 80024b0:	2319      	movs	r3, #25
 80024b2:	2201      	movs	r2, #1
 80024b4:	494f      	ldr	r1, [pc, #316]	@ (80025f4 <HAL_I2C_Master_Transmit+0x170>)
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff fca5 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	2800      	cmp	r0, #0
 80024be:	f040 8092 	bne.w	80025e6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80024c2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	f000 808f 	beq.w	80025ea <HAL_I2C_Master_Transmit+0x166>
 80024cc:	2301      	movs	r3, #1
 80024ce:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f012 0f01 	tst.w	r2, #1
 80024da:	d103      	bne.n	80024e4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	6822      	ldr	r2, [r4, #0]
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024ec:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ee:	2321      	movs	r3, #33	@ 0x21
 80024f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024f4:	2310      	movs	r3, #16
 80024f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80024fe:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002502:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002506:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002508:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_I2C_Master_Transmit+0x174>)
 800250c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800250e:	462b      	mov	r3, r5
 8002510:	4632      	mov	r2, r6
 8002512:	4639      	mov	r1, r7
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fd37 	bl	8001f88 <I2C_MasterRequestWrite>
 800251a:	4607      	mov	r7, r0
 800251c:	2800      	cmp	r0, #0
 800251e:	d166      	bne.n	80025ee <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002520:	2300      	movs	r3, #0
 8002522:	9303      	str	r3, [sp, #12]
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	9203      	str	r2, [sp, #12]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	9303      	str	r3, [sp, #12]
 800252e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002530:	e011      	b.n	8002556 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002534:	2b04      	cmp	r3, #4
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8002538:	2701      	movs	r7, #1
 800253a:	e7b4      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	6822      	ldr	r2, [r4, #0]
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e7f7      	b.n	8002538 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002548:	462a      	mov	r2, r5
 800254a:	4631      	mov	r1, r6
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff fe34 	bl	80021ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002552:	2800      	cmp	r0, #0
 8002554:	d12e      	bne.n	80025b4 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8002556:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d036      	beq.n	80025ca <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	462a      	mov	r2, r5
 800255e:	4631      	mov	r1, r6
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff fdfb 	bl	800215c <I2C_WaitOnTXEFlagUntilTimeout>
 8002566:	2800      	cmp	r0, #0
 8002568:	d1e3      	bne.n	8002532 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002572:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002574:	1c43      	adds	r3, r0, #1
 8002576:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002578:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 800257a:	b289      	uxth	r1, r1
 800257c:	3901      	subs	r1, #1
 800257e:	b289      	uxth	r1, r1
 8002580:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002582:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29b      	uxth	r3, r3
 8002588:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	6951      	ldr	r1, [r2, #20]
 800258e:	f011 0f04 	tst.w	r1, #4
 8002592:	d0d9      	beq.n	8002548 <HAL_I2C_Master_Transmit+0xc4>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0d7      	beq.n	8002548 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002598:	7843      	ldrb	r3, [r0, #1]
 800259a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800259c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80025a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 80025ac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025ae:	3b01      	subs	r3, #1
 80025b0:	8523      	strh	r3, [r4, #40]	@ 0x28
 80025b2:	e7c9      	b.n	8002548 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 80025ba:	2701      	movs	r7, #1
 80025bc:	e773      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e7f7      	b.n	80025ba <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	2320      	movs	r3, #32
 80025d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80025e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80025e4:	e75f      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80025e6:	2702      	movs	r7, #2
 80025e8:	e75d      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80025ea:	2702      	movs	r7, #2
 80025ec:	e75b      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80025ee:	2701      	movs	r7, #1
 80025f0:	e759      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x22>
 80025f2:	bf00      	nop
 80025f4:	00100002 	.word	0x00100002
 80025f8:	ffff0000 	.word	0xffff0000

080025fc <HAL_I2C_Master_Receive>:
{
 80025fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002600:	b087      	sub	sp, #28
 8002602:	4604      	mov	r4, r0
 8002604:	460f      	mov	r7, r1
 8002606:	4691      	mov	r9, r2
 8002608:	4698      	mov	r8, r3
 800260a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff f810 	bl	8001630 <HAL_GetTick>
 8002610:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002612:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002616:	b2c0      	uxtb	r0, r0
 8002618:	2820      	cmp	r0, #32
 800261a:	d004      	beq.n	8002626 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 800261c:	2702      	movs	r7, #2
}
 800261e:	4638      	mov	r0, r7
 8002620:	b007      	add	sp, #28
 8002622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002626:	9500      	str	r5, [sp, #0]
 8002628:	2319      	movs	r3, #25
 800262a:	2201      	movs	r2, #1
 800262c:	4989      	ldr	r1, [pc, #548]	@ (8002854 <HAL_I2C_Master_Receive+0x258>)
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff fbe9 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 8002634:	2800      	cmp	r0, #0
 8002636:	f040 814f 	bne.w	80028d8 <HAL_I2C_Master_Receive+0x2dc>
    __HAL_LOCK(hi2c);
 800263a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	f000 814c 	beq.w	80028dc <HAL_I2C_Master_Receive+0x2e0>
 8002644:	2301      	movs	r3, #1
 8002646:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f012 0f01 	tst.w	r2, #1
 8002652:	d103      	bne.n	800265c <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002664:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002666:	2322      	movs	r3, #34	@ 0x22
 8002668:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800266c:	2310      	movs	r3, #16
 800266e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002672:	2300      	movs	r3, #0
 8002674:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002676:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800267a:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002680:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002682:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <HAL_I2C_Master_Receive+0x25c>)
 8002684:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002686:	462b      	mov	r3, r5
 8002688:	4632      	mov	r2, r6
 800268a:	4639      	mov	r1, r7
 800268c:	4620      	mov	r0, r4
 800268e:	f7ff fcd5 	bl	800203c <I2C_MasterRequestRead>
 8002692:	4607      	mov	r7, r0
 8002694:	2800      	cmp	r0, #0
 8002696:	f040 8123 	bne.w	80028e0 <HAL_I2C_Master_Receive+0x2e4>
    if (hi2c->XferSize == 0U)
 800269a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800269c:	b95b      	cbnz	r3, 80026b6 <HAL_I2C_Master_Receive+0xba>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	9202      	str	r2, [sp, #8]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	9202      	str	r2, [sp, #8]
 80026aa:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e07a      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
    else if (hi2c->XferSize == 1U)
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d00f      	beq.n	80026da <HAL_I2C_Master_Receive+0xde>
    else if (hi2c->XferSize == 2U)
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d01f      	beq.n	80026fe <HAL_I2C_Master_Receive+0x102>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	6813      	ldr	r3, [r2, #0]
 80026c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026c6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c8:	2300      	movs	r3, #0
 80026ca:	9305      	str	r3, [sp, #20]
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	9205      	str	r2, [sp, #20]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	9305      	str	r3, [sp, #20]
 80026d6:	9b05      	ldr	r3, [sp, #20]
 80026d8:	e068      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	6813      	ldr	r3, [r2, #0]
 80026de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026e2:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	9203      	str	r2, [sp, #12]
 80026f2:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e056      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	6813      	ldr	r3, [r2, #0]
 8002702:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002706:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002710:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	9304      	str	r3, [sp, #16]
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	9204      	str	r2, [sp, #16]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	9b04      	ldr	r3, [sp, #16]
 8002722:	e043      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002724:	462a      	mov	r2, r5
 8002726:	4631      	mov	r1, r6
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff fd75 	bl	8002218 <I2C_WaitOnRXNEFlagUntilTimeout>
 800272e:	2800      	cmp	r0, #0
 8002730:	f040 80d8 	bne.w	80028e4 <HAL_I2C_Master_Receive+0x2e8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800273a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800273c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800273e:	3301      	adds	r3, #1
 8002740:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002742:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002748:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002752:	e02b      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002754:	9500      	str	r5, [sp, #0]
 8002756:	4633      	mov	r3, r6
 8002758:	2200      	movs	r2, #0
 800275a:	4940      	ldr	r1, [pc, #256]	@ (800285c <HAL_I2C_Master_Receive+0x260>)
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff fb52 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 8002762:	2800      	cmp	r0, #0
 8002764:	f040 80c0 	bne.w	80028e8 <HAL_I2C_Master_Receive+0x2ec>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	6822      	ldr	r2, [r4, #0]
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002770:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002778:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800277a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800277c:	1c53      	adds	r3, r2, #1
 800277e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002780:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002786:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002796:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002798:	3301      	adds	r3, #1
 800279a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800279c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80027a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027ac:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80027ae:	2900      	cmp	r1, #0
 80027b0:	f000 8089 	beq.w	80028c6 <HAL_I2C_Master_Receive+0x2ca>
      if (hi2c->XferSize <= 3U)
 80027b4:	2903      	cmp	r1, #3
 80027b6:	d853      	bhi.n	8002860 <HAL_I2C_Master_Receive+0x264>
        if (hi2c->XferSize == 1U)
 80027b8:	2901      	cmp	r1, #1
 80027ba:	d0b3      	beq.n	8002724 <HAL_I2C_Master_Receive+0x128>
        else if (hi2c->XferSize == 2U)
 80027bc:	2902      	cmp	r1, #2
 80027be:	d0c9      	beq.n	8002754 <HAL_I2C_Master_Receive+0x158>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c0:	9500      	str	r5, [sp, #0]
 80027c2:	4633      	mov	r3, r6
 80027c4:	2200      	movs	r2, #0
 80027c6:	4925      	ldr	r1, [pc, #148]	@ (800285c <HAL_I2C_Master_Receive+0x260>)
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fb1c 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	f040 808c 	bne.w	80028ec <HAL_I2C_Master_Receive+0x2f0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d4:	6822      	ldr	r2, [r4, #0]
 80027d6:	6813      	ldr	r3, [r2, #0]
 80027d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027dc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027e8:	3301      	adds	r3, #1
 80027ea:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80027ec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80027f2:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80027f4:	b289      	uxth	r1, r1
 80027f6:	3901      	subs	r1, #1
 80027f8:	b289      	uxth	r1, r1
 80027fa:	8561      	strh	r1, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027fc:	9500      	str	r5, [sp, #0]
 80027fe:	4633      	mov	r3, r6
 8002800:	2200      	movs	r2, #0
 8002802:	4916      	ldr	r1, [pc, #88]	@ (800285c <HAL_I2C_Master_Receive+0x260>)
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff fafe 	bl	8001e06 <I2C_WaitOnFlagUntilTimeout>
 800280a:	2800      	cmp	r0, #0
 800280c:	d170      	bne.n	80028f0 <HAL_I2C_Master_Receive+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	6813      	ldr	r3, [r2, #0]
 8002812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002816:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800281e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002822:	1c53      	adds	r3, r2, #1
 8002824:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002826:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800282c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800283c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800283e:	3301      	adds	r3, #1
 8002840:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002842:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002848:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29b      	uxth	r3, r3
 8002850:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002852:	e7ab      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
 8002854:	00100002 	.word	0x00100002
 8002858:	ffff0000 	.word	0xffff0000
 800285c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002860:	462a      	mov	r2, r5
 8002862:	4631      	mov	r1, r6
 8002864:	4620      	mov	r0, r4
 8002866:	f7ff fcd7 	bl	8002218 <I2C_WaitOnRXNEFlagUntilTimeout>
 800286a:	2800      	cmp	r0, #0
 800286c:	d142      	bne.n	80028f4 <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002874:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002876:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002878:	3301      	adds	r3, #1
 800287a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800287c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800287e:	3a01      	subs	r2, #1
 8002880:	b292      	uxth	r2, r2
 8002882:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002884:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	6959      	ldr	r1, [r3, #20]
 8002892:	f011 0f04 	tst.w	r1, #4
 8002896:	d089      	beq.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
          if (hi2c->XferSize == 3U)
 8002898:	2a03      	cmp	r2, #3
 800289a:	d00f      	beq.n	80028bc <HAL_I2C_Master_Receive+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028a2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80028a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028a6:	3301      	adds	r3, #1
 80028a8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80028aa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80028b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80028ba:	e777      	b.n	80027ac <HAL_I2C_Master_Receive+0x1b0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e7ea      	b.n	800289c <HAL_I2C_Master_Receive+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	2320      	movs	r3, #32
 80028c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80028d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80028d6:	e6a2      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 80028d8:	2702      	movs	r7, #2
 80028da:	e6a0      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 80028dc:	2702      	movs	r7, #2
 80028de:	e69e      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 80028e0:	2701      	movs	r7, #1
 80028e2:	e69c      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80028e4:	2701      	movs	r7, #1
 80028e6:	e69a      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80028e8:	2701      	movs	r7, #1
 80028ea:	e698      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80028ec:	2701      	movs	r7, #1
 80028ee:	e696      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80028f0:	2701      	movs	r7, #1
 80028f2:	e694      	b.n	800261e <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 80028f4:	2701      	movs	r7, #1
 80028f6:	e692      	b.n	800261e <HAL_I2C_Master_Receive+0x22>

080028f8 <HAL_I2C_GetState>:
  return hi2c->State;
 80028f8:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 80028fc:	4770      	bx	lr

080028fe <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80028fe:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
 8002900:	4770      	bx	lr
	...

08002904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b500      	push	{lr}
 8002906:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	2100      	movs	r1, #0
 800290a:	9100      	str	r1, [sp, #0]
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_MspInit+0x3c>)
 800290e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002914:	645a      	str	r2, [r3, #68]	@ 0x44
 8002916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002918:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800291c:	9200      	str	r2, [sp, #0]
 800291e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	9101      	str	r1, [sp, #4]
 8002922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002924:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002934:	2005      	movs	r0, #5
 8002936:	f7fe fed7 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293a:	b003      	add	sp, #12
 800293c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002944:	b500      	push	{lr}
 8002946:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8002948:	6803      	ldr	r3, [r0, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294e:	d005      	beq.n	800295c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8002950:	4a17      	ldr	r2, [pc, #92]	@ (80029b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d017      	beq.n	8002986 <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002956:	b003      	add	sp, #12
 8002958:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800295c:	2100      	movs	r1, #0
 800295e:	9100      	str	r1, [sp, #0]
 8002960:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8002964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002976:	460a      	mov	r2, r1
 8002978:	201c      	movs	r0, #28
 800297a:	f7fe fec7 	bl	800170c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800297e:	201c      	movs	r0, #28
 8002980:	f7fe fed4 	bl	800172c <HAL_NVIC_EnableIRQ>
 8002984:	e7e7      	b.n	8002956 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002986:	2100      	movs	r1, #0
 8002988:	9101      	str	r1, [sp, #4]
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_TIM_Base_MspInit+0x70>)
 800298c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800299e:	460a      	mov	r2, r1
 80029a0:	2032      	movs	r0, #50	@ 0x32
 80029a2:	f7fe feb3 	bl	800170c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029a6:	2032      	movs	r0, #50	@ 0x32
 80029a8:	f7fe fec0 	bl	800172c <HAL_NVIC_EnableIRQ>
}
 80029ac:	e7d3      	b.n	8002956 <HAL_TIM_Base_MspInit+0x12>
 80029ae:	bf00      	nop
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b8:	b530      	push	{r4, r5, lr}
 80029ba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	2300      	movs	r3, #0
 80029be:	9303      	str	r3, [sp, #12]
 80029c0:	9304      	str	r3, [sp, #16]
 80029c2:	9305      	str	r3, [sp, #20]
 80029c4:	9306      	str	r3, [sp, #24]
 80029c6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80029c8:	6802      	ldr	r2, [r0, #0]
 80029ca:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_UART_MspInit+0x98>)
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80029d0:	b009      	add	sp, #36	@ 0x24
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d6:	2500      	movs	r5, #0
 80029d8:	9501      	str	r5, [sp, #4]
 80029da:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80029de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80029e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e8:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f0:	9502      	str	r5, [sp, #8]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a04:	230c      	movs	r3, #12
 8002a06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	a903      	add	r1, sp, #12
 8002a12:	4810      	ldr	r0, [pc, #64]	@ (8002a54 <HAL_UART_MspInit+0x9c>)
 8002a14:	f7ff f84c 	bl	8001ab0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002a18:	480f      	ldr	r0, [pc, #60]	@ (8002a58 <HAL_UART_MspInit+0xa0>)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <HAL_UART_MspInit+0xa4>)
 8002a1c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a22:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a24:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a26:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a2c:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a2e:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a30:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a36:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a38:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a3a:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a3c:	f7fe fee4 	bl	8001808 <HAL_DMA_Init>
 8002a40:	b918      	cbnz	r0, 8002a4a <HAL_UART_MspInit+0x92>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_UART_MspInit+0xa0>)
 8002a44:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002a46:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8002a48:	e7c2      	b.n	80029d0 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002a4a:	f7fe fccb 	bl	80013e4 <Error_Handler>
 8002a4e:	e7f8      	b.n	8002a42 <HAL_UART_MspInit+0x8a>
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40020000 	.word	0x40020000
 8002a58:	2001511c 	.word	0x2001511c
 8002a5c:	40026088 	.word	0x40026088

08002a60 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	2800      	cmp	r0, #0
 8002a62:	f000 81e0 	beq.w	8002e26 <HAL_RCC_OscConfig+0x3c6>
{
 8002a66:	b570      	push	{r4, r5, r6, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6c:	6803      	ldr	r3, [r0, #0]
 8002a6e:	f013 0f01 	tst.w	r3, #1
 8002a72:	d03b      	beq.n	8002aec <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a74:	4b9f      	ldr	r3, [pc, #636]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d02c      	beq.n	8002ada <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a80:	4b9c      	ldr	r3, [pc, #624]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d021      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8c:	6863      	ldr	r3, [r4, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a92:	d04f      	beq.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a98:	d052      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe0>
 8002a9a:	4b96      	ldr	r3, [pc, #600]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d050      	beq.n	8002b54 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fdbd 	bl	8001630 <HAL_GetTick>
 8002ab6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ac0:	d114      	bne.n	8002aec <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fdb5 	bl	8001630 <HAL_GetTick>
 8002ac6:	1b40      	subs	r0, r0, r5
 8002ac8:	2864      	cmp	r0, #100	@ 0x64
 8002aca:	d9f5      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e1b1      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad0:	4b88      	ldr	r3, [pc, #544]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002ad8:	d0d8      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ada:	4b86      	ldr	r3, [pc, #536]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ae2:	d003      	beq.n	8002aec <HAL_RCC_OscConfig+0x8c>
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 819f 	beq.w	8002e2a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	f013 0f02 	tst.w	r3, #2
 8002af2:	d054      	beq.n	8002b9e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002af4:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f013 0f0c 	tst.w	r3, #12
 8002afc:	d03e      	beq.n	8002b7c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d033      	beq.n	8002b72 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b0a:	68e3      	ldr	r3, [r4, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d068      	beq.n	8002be2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b79      	ldr	r3, [pc, #484]	@ (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fd8b 	bl	8001630 <HAL_GetTick>
 8002b1a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b75      	ldr	r3, [pc, #468]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f013 0f02 	tst.w	r3, #2
 8002b24:	d154      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe fd83 	bl	8001630 <HAL_GetTick>
 8002b2a:	1b40      	subs	r0, r0, r5
 8002b2c:	2802      	cmp	r0, #2
 8002b2e:	d9f5      	bls.n	8002b1c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002b30:	2003      	movs	r0, #3
 8002b32:	e17f      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b36:	6813      	ldr	r3, [r2, #0]
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e7b5      	b.n	8002aac <HAL_RCC_OscConfig+0x4c>
 8002b40:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e7ab      	b.n	8002aac <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002b54:	f7fe fd6c 	bl	8001630 <HAL_GetTick>
 8002b58:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b66      	ldr	r3, [pc, #408]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002b62:	d0c3      	beq.n	8002aec <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe fd64 	bl	8001630 <HAL_GetTick>
 8002b68:	1b40      	subs	r0, r0, r5
 8002b6a:	2864      	cmp	r0, #100	@ 0x64
 8002b6c:	d9f5      	bls.n	8002b5a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002b6e:	2003      	movs	r0, #3
 8002b70:	e160      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b60      	ldr	r3, [pc, #384]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002b7a:	d1c6      	bne.n	8002b0a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f013 0f02 	tst.w	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_OscConfig+0x12e>
 8002b86:	68e3      	ldr	r3, [r4, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 8150 	bne.w	8002e2e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4a59      	ldr	r2, [pc, #356]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002b96:	6921      	ldr	r1, [r4, #16]
 8002b98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b9c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	f013 0f08 	tst.w	r3, #8
 8002ba4:	d042      	beq.n	8002c2c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ba6:	6963      	ldr	r3, [r4, #20]
 8002ba8:	b36b      	cbz	r3, 8002c06 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b53      	ldr	r3, [pc, #332]	@ (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fd3d 	bl	8001630 <HAL_GetTick>
 8002bb6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbc:	f013 0f02 	tst.w	r3, #2
 8002bc0:	d134      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fd35 	bl	8001630 <HAL_GetTick>
 8002bc6:	1b40      	subs	r0, r0, r5
 8002bc8:	2802      	cmp	r0, #2
 8002bca:	d9f5      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e131      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4a48      	ldr	r2, [pc, #288]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002bd8:	6921      	ldr	r1, [r4, #16]
 8002bda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e7dd      	b.n	8002b9e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b45      	ldr	r3, [pc, #276]	@ (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002be8:	f7fe fd22 	bl	8001630 <HAL_GetTick>
 8002bec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f013 0f02 	tst.w	r3, #2
 8002bf6:	d0d2      	beq.n	8002b9e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fd1a 	bl	8001630 <HAL_GetTick>
 8002bfc:	1b40      	subs	r0, r0, r5
 8002bfe:	2802      	cmp	r0, #2
 8002c00:	d9f5      	bls.n	8002bee <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002c02:	2003      	movs	r0, #3
 8002c04:	e116      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c06:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fd0f 	bl	8001630 <HAL_GetTick>
 8002c12:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b37      	ldr	r3, [pc, #220]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c18:	f013 0f02 	tst.w	r3, #2
 8002c1c:	d006      	beq.n	8002c2c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fd07 	bl	8001630 <HAL_GetTick>
 8002c22:	1b40      	subs	r0, r0, r5
 8002c24:	2802      	cmp	r0, #2
 8002c26:	d9f5      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	e103      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	f013 0f04 	tst.w	r3, #4
 8002c32:	d077      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c34:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002c3c:	d133      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c46:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c56:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_RCC_OscConfig+0x29c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c60:	d023      	beq.n	8002caa <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	68a3      	ldr	r3, [r4, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d034      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x272>
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d038      	beq.n	8002cde <HAL_RCC_OscConfig+0x27e>
 8002c6c:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002c6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c78:	f022 0204 	bic.w	r2, r2, #4
 8002c7c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7e:	68a3      	ldr	r3, [r4, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03d      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fcd4 	bl	8001630 <HAL_GetTick>
 8002c88:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f013 0f02 	tst.w	r3, #2
 8002c92:	d146      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fccc 	bl	8001630 <HAL_GetTick>
 8002c98:	1b80      	subs	r0, r0, r6
 8002c9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c9e:	4298      	cmp	r0, r3
 8002ca0:	d9f3      	bls.n	8002c8a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	e0c6      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2500      	movs	r5, #0
 8002ca8:	e7d6      	b.n	8002c58 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_RCC_OscConfig+0x29c>)
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fcbc 	bl	8001630 <HAL_GetTick>
 8002cb8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_RCC_OscConfig+0x29c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002cc2:	d1ce      	bne.n	8002c62 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc4:	f7fe fcb4 	bl	8001630 <HAL_GetTick>
 8002cc8:	1b80      	subs	r0, r0, r6
 8002cca:	2802      	cmp	r0, #2
 8002ccc:	d9f5      	bls.n	8002cba <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002cce:	2003      	movs	r0, #3
 8002cd0:	e0b0      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002cd4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cdc:	e7cf      	b.n	8002c7e <HAL_RCC_OscConfig+0x21e>
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_OscConfig+0x294>)
 8002ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ce2:	f042 0204 	orr.w	r2, r2, #4
 8002ce6:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ce8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	671a      	str	r2, [r3, #112]	@ 0x70
 8002cf0:	e7c5      	b.n	8002c7e <HAL_RCC_OscConfig+0x21e>
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	42470000 	.word	0x42470000
 8002cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7fe fc96 	bl	8001630 <HAL_GetTick>
 8002d04:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	4b52      	ldr	r3, [pc, #328]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	f013 0f02 	tst.w	r3, #2
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe fc8e 	bl	8001630 <HAL_GetTick>
 8002d14:	1b80      	subs	r0, r0, r6
 8002d16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d1a:	4298      	cmp	r0, r3
 8002d1c:	d9f3      	bls.n	8002d06 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002d1e:	2003      	movs	r0, #3
 8002d20:	e088      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d22:	b9ed      	cbnz	r5, 8002d60 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d24:	69a3      	ldr	r3, [r4, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8083 	beq.w	8002e32 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2c:	4a48      	ldr	r2, [pc, #288]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	f002 020c 	and.w	r2, r2, #12
 8002d34:	2a08      	cmp	r2, #8
 8002d36:	d051      	beq.n	8002ddc <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d017      	beq.n	8002d6c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b45      	ldr	r3, [pc, #276]	@ (8002e54 <HAL_RCC_OscConfig+0x3f4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe fc75 	bl	8001630 <HAL_GetTick>
 8002d46:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d50:	d042      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe fc6d 	bl	8001630 <HAL_GetTick>
 8002d56:	1b00      	subs	r0, r0, r4
 8002d58:	2802      	cmp	r0, #2
 8002d5a:	d9f5      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d5c:	2003      	movs	r0, #3
 8002d5e:	e069      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d60:	4a3b      	ldr	r2, [pc, #236]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002d62:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	e7db      	b.n	8002d24 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <HAL_RCC_OscConfig+0x3f4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002d72:	f7fe fc5d 	bl	8001630 <HAL_GetTick>
 8002d76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d78:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d80:	d006      	beq.n	8002d90 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe fc55 	bl	8001630 <HAL_GetTick>
 8002d86:	1b40      	subs	r0, r0, r5
 8002d88:	2802      	cmp	r0, #2
 8002d8a:	d9f5      	bls.n	8002d78 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	e051      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d90:	69e3      	ldr	r3, [r4, #28]
 8002d92:	6a22      	ldr	r2, [r4, #32]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d9c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002d9e:	0852      	lsrs	r2, r2, #1
 8002da0:	3a01      	subs	r2, #1
 8002da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002da6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002da8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dac:	4a28      	ldr	r2, [pc, #160]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002dae:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <HAL_RCC_OscConfig+0x3f4>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002db6:	f7fe fc3b 	bl	8001630 <HAL_GetTick>
 8002dba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe fc33 	bl	8001630 <HAL_GetTick>
 8002dca:	1b00      	subs	r0, r0, r4
 8002dcc:	2802      	cmp	r0, #2
 8002dce:	d9f5      	bls.n	8002dbc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	e02f      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e02d      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e02b      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d02b      	beq.n	8002e38 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCC_OscConfig+0x3f0>)
 8002de2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002de8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	4291      	cmp	r1, r2
 8002dec:	d126      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002df2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df4:	428a      	cmp	r2, r1
 8002df6:	d123      	bne.n	8002e40 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfa:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002dfe:	401a      	ands	r2, r3
 8002e00:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002e04:	d11e      	bne.n	8002e44 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e06:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002e0a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002e0c:	0852      	lsrs	r2, r2, #1
 8002e0e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e10:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002e14:	d118      	bne.n	8002e48 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e16:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002e1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002e20:	d114      	bne.n	8002e4c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002e22:	2000      	movs	r0, #0
 8002e24:	e006      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
}
 8002e28:	4770      	bx	lr
        return HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	e002      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
 8002e30:	e000      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002e32:	2000      	movs	r0, #0
}
 8002e34:	b002      	add	sp, #8
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002e38:	2001      	movs	r0, #1
 8002e3a:	e7fb      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	e7f9      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
 8002e40:	2001      	movs	r0, #1
 8002e42:	e7f7      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
 8002e44:	2001      	movs	r0, #1
 8002e46:	e7f5      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
 8002e48:	2001      	movs	r0, #1
 8002e4a:	e7f3      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	e7f1      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d4>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470000 	.word	0x42470000

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5a:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d05b      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0xc6>
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d15b      	bne.n	8002f22 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002e78:	d02c      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e7c:	6858      	ldr	r0, [r3, #4]
 8002e7e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002e82:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002e86:	ebbc 0c00 	subs.w	ip, ip, r0
 8002e8a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002e8e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002e92:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002e96:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002e9a:	ebb1 010c 	subs.w	r1, r1, ip
 8002e9e:	eb63 030e 	sbc.w	r3, r3, lr
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea8:	00c9      	lsls	r1, r1, #3
 8002eaa:	eb11 0c00 	adds.w	ip, r1, r0
 8002eae:	f143 0300 	adc.w	r3, r3, #0
 8002eb2:	0259      	lsls	r1, r3, #9
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002eba:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002ebe:	f7fd f9bb 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ec2:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002ece:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002ed2:	e027      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ed6:	6858      	ldr	r0, [r3, #4]
 8002ed8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002edc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002ee0:	ebbc 0c00 	subs.w	ip, ip, r0
 8002ee4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002ee8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002eec:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002ef0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002ef4:	ebb1 010c 	subs.w	r1, r1, ip
 8002ef8:	eb63 030e 	sbc.w	r3, r3, lr
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	00c9      	lsls	r1, r1, #3
 8002f04:	eb11 0c00 	adds.w	ip, r1, r0
 8002f08:	f143 0300 	adc.w	r3, r3, #0
 8002f0c:	0299      	lsls	r1, r3, #10
 8002f0e:	2300      	movs	r3, #0
 8002f10:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002f14:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002f18:	f7fd f98e 	bl	8000238 <__aeabi_uldivmod>
 8002f1c:	e7d1      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002f1e:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f22:	4803      	ldr	r0, [pc, #12]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f24:	bd08      	pop	{r3, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	00f42400 	.word	0x00f42400

08002f34 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f34:	2800      	cmp	r0, #0
 8002f36:	f000 809b 	beq.w	8003070 <HAL_RCC_ClockConfig+0x13c>
{
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b4f      	ldr	r3, [pc, #316]	@ (8003080 <HAL_RCC_ClockConfig+0x14c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d208      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	b2cb      	uxtb	r3, r1
 8002f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003080 <HAL_RCC_ClockConfig+0x14c>)
 8002f50:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	f040 808b 	bne.w	8003074 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	f013 0f02 	tst.w	r3, #2
 8002f64:	d017      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f66:	f013 0f04 	tst.w	r3, #4
 8002f6a:	d004      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4a45      	ldr	r2, [pc, #276]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002f6e:	6893      	ldr	r3, [r2, #8]
 8002f70:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f74:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	f013 0f08 	tst.w	r3, #8
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7e:	4a41      	ldr	r2, [pc, #260]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002f80:	6893      	ldr	r3, [r2, #8]
 8002f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f86:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4a3e      	ldr	r2, [pc, #248]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002f8a:	6893      	ldr	r3, [r2, #8]
 8002f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f90:	68a1      	ldr	r1, [r4, #8]
 8002f92:	430b      	orrs	r3, r1
 8002f94:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	f013 0f01 	tst.w	r3, #1
 8002f9c:	d032      	beq.n	8003004 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	6863      	ldr	r3, [r4, #4]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d021      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa4:	1e9a      	subs	r2, r3, #2
 8002fa6:	2a01      	cmp	r2, #1
 8002fa8:	d925      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	4a36      	ldr	r2, [pc, #216]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f012 0f02 	tst.w	r2, #2
 8002fb2:	d061      	beq.n	8003078 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb4:	4933      	ldr	r1, [pc, #204]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002fb6:	688a      	ldr	r2, [r1, #8]
 8002fb8:	f022 0203 	bic.w	r2, r2, #3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fb36 	bl	8001630 <HAL_GetTick>
 8002fc4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	6862      	ldr	r2, [r4, #4]
 8002fd0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fd4:	d016      	beq.n	8003004 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd6:	f7fe fb2b 	bl	8001630 <HAL_GetTick>
 8002fda:	1b80      	subs	r0, r0, r6
 8002fdc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fe0:	4298      	cmp	r0, r3
 8002fe2:	d9f0      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	e042      	b.n	800306e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe8:	4a26      	ldr	r2, [pc, #152]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002ff0:	d1e0      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	e03b      	b.n	800306e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4a23      	ldr	r2, [pc, #140]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002ffe:	d1d9      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003000:	2001      	movs	r0, #1
 8003002:	e034      	b.n	800306e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003004:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_RCC_ClockConfig+0x14c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	42ab      	cmp	r3, r5
 800300e:	d907      	bls.n	8003020 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003010:	b2ea      	uxtb	r2, r5
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_ClockConfig+0x14c>)
 8003014:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	42ab      	cmp	r3, r5
 800301e:	d12d      	bne.n	800307c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f013 0f04 	tst.w	r3, #4
 8003026:	d006      	beq.n	8003036 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4a16      	ldr	r2, [pc, #88]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 800302a:	6893      	ldr	r3, [r2, #8]
 800302c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003030:	68e1      	ldr	r1, [r4, #12]
 8003032:	430b      	orrs	r3, r1
 8003034:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	f013 0f08 	tst.w	r3, #8
 800303c:	d007      	beq.n	800304e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303e:	4a11      	ldr	r2, [pc, #68]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8003040:	6893      	ldr	r3, [r2, #8]
 8003042:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003046:	6921      	ldr	r1, [r4, #16]
 8003048:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800304c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800304e:	f7ff ff03 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8003052:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <HAL_RCC_ClockConfig+0x150>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800305a:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_RCC_ClockConfig+0x154>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	40d8      	lsrs	r0, r3
 8003060:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_RCC_ClockConfig+0x158>)
 8003062:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003064:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <HAL_RCC_ClockConfig+0x15c>)
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	f000 fac6 	bl	80035f8 <HAL_InitTick>
  return HAL_OK;
 800306c:	2000      	movs	r0, #0
}
 800306e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003070:	2001      	movs	r0, #1
}
 8003072:	4770      	bx	lr
      return HAL_ERROR;
 8003074:	2001      	movs	r0, #1
 8003076:	e7fa      	b.n	800306e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
 800307a:	e7f8      	b.n	800306e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800307c:	2001      	movs	r0, #1
 800307e:	e7f6      	b.n	800306e <HAL_RCC_ClockConfig+0x13a>
 8003080:	40023c00 	.word	0x40023c00
 8003084:	40023800 	.word	0x40023800
 8003088:	0800edf8 	.word	0x0800edf8
 800308c:	20000010 	.word	0x20000010
 8003090:	2000000c 	.word	0x2000000c

08003094 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003094:	4b01      	ldr	r3, [pc, #4]	@ (800309c <HAL_RCC_GetHCLKFreq+0x8>)
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000010 	.word	0x20000010

080030a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a2:	f7ff fff7 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030a6:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80030ae:	4a03      	ldr	r2, [pc, #12]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80030b2:	40d8      	lsrs	r0, r3
 80030b4:	bd08      	pop	{r3, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	0800edf0 	.word	0x0800edf0

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c2:	f7ff ffe7 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030c6:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80030ce:	4a03      	ldr	r2, [pc, #12]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80030d2:	40d8      	lsrs	r0, r3
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	0800edf0 	.word	0x0800edf0

080030e0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030e0:	230f      	movs	r3, #15
 80030e2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_RCC_GetClockConfig+0x34>)
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	f002 0203 	and.w	r2, r2, #3
 80030ec:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80030f4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80030fc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003106:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003108:	4b03      	ldr	r3, [pc, #12]	@ (8003118 <HAL_RCC_GetClockConfig+0x38>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	600b      	str	r3, [r1, #0]
}
 8003112:	4770      	bx	lr
 8003114:	40023800 	.word	0x40023800
 8003118:	40023c00 	.word	0x40023c00

0800311c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800311e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003120:	6a04      	ldr	r4, [r0, #32]
 8003122:	f024 0401 	bic.w	r4, r4, #1
 8003126:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003128:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800312e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003132:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003136:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003138:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800313a:	6203      	str	r3, [r0, #32]
}
 800313c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003140:	4770      	bx	lr

08003142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003142:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003144:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003146:	6a04      	ldr	r4, [r0, #32]
 8003148:	f024 0410 	bic.w	r4, r4, #16
 800314c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003150:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003154:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003158:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800315c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003160:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003162:	6203      	str	r3, [r0, #32]
}
 8003164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003168:	4770      	bx	lr

0800316a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800316a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003170:	430b      	orrs	r3, r1
 8003172:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003176:	6083      	str	r3, [r0, #8]
}
 8003178:	4770      	bx	lr
	...

0800317c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d12f      	bne.n	80031e6 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	68d3      	ldr	r3, [r2, #12]
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003196:	6803      	ldr	r3, [r0, #0]
 8003198:	4a15      	ldr	r2, [pc, #84]	@ (80031f0 <HAL_TIM_Base_Start_IT+0x74>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d018      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x54>
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a2:	d015      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x54>
 80031a4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d011      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x54>
 80031ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00d      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x54>
 80031b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x54>
 80031bc:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d005      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031cc:	2000      	movs	r0, #0
 80031ce:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d6:	2a06      	cmp	r2, #6
 80031d8:	d007      	beq.n	80031ea <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031e2:	2000      	movs	r0, #0
 80031e4:	4770      	bx	lr
    return HAL_ERROR;
 80031e6:	2001      	movs	r0, #1
 80031e8:	4770      	bx	lr
  return HAL_OK;
 80031ea:	2000      	movs	r0, #0
}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000

080031f4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_IC_CaptureCallback>:
}
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_TriggerCallback>:
}
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_IRQHandler>:
{
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003204:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003206:	f015 0f02 	tst.w	r5, #2
 800320a:	d010      	beq.n	800322e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800320c:	f016 0f02 	tst.w	r6, #2
 8003210:	d00d      	beq.n	800322e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003212:	f06f 0202 	mvn.w	r2, #2
 8003216:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003218:	2301      	movs	r3, #1
 800321a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800321c:	6803      	ldr	r3, [r0, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f013 0f03 	tst.w	r3, #3
 8003224:	d05e      	beq.n	80032e4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003226:	f7ff ffe6 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	2300      	movs	r3, #0
 800322c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800322e:	f015 0f04 	tst.w	r5, #4
 8003232:	d012      	beq.n	800325a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003234:	f016 0f04 	tst.w	r6, #4
 8003238:	d00f      	beq.n	800325a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	f06f 0204 	mvn.w	r2, #4
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003242:	2302      	movs	r3, #2
 8003244:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800324e:	d04f      	beq.n	80032f0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff ffd0 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	2300      	movs	r3, #0
 8003258:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800325a:	f015 0f08 	tst.w	r5, #8
 800325e:	d012      	beq.n	8003286 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003260:	f016 0f08 	tst.w	r6, #8
 8003264:	d00f      	beq.n	8003286 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f06f 0208 	mvn.w	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326e:	2304      	movs	r3, #4
 8003270:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f013 0f03 	tst.w	r3, #3
 800327a:	d040      	beq.n	80032fe <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff ffba 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	2300      	movs	r3, #0
 8003284:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003286:	f015 0f10 	tst.w	r5, #16
 800328a:	d012      	beq.n	80032b2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800328c:	f016 0f10 	tst.w	r6, #16
 8003290:	d00f      	beq.n	80032b2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329a:	2308      	movs	r3, #8
 800329c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80032a6:	d031      	beq.n	800330c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7ff ffa4 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	2300      	movs	r3, #0
 80032b0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032b2:	f015 0f01 	tst.w	r5, #1
 80032b6:	d002      	beq.n	80032be <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032b8:	f016 0f01 	tst.w	r6, #1
 80032bc:	d12d      	bne.n	800331a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032be:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80032c2:	d002      	beq.n	80032ca <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032c4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80032c8:	d12f      	bne.n	800332a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032ca:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80032ce:	d002      	beq.n	80032d6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032d0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80032d4:	d131      	bne.n	800333a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032d6:	f015 0f20 	tst.w	r5, #32
 80032da:	d002      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032dc:	f016 0f20 	tst.w	r6, #32
 80032e0:	d133      	bne.n	800334a <HAL_TIM_IRQHandler+0x14e>
}
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e4:	f7ff ff86 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff85 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80032ee:	e79c      	b.n	800322a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff7f 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ff7e 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80032fc:	e7ab      	b.n	8003256 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff ff78 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff ff77 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800330a:	e7ba      	b.n	8003282 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff ff71 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003312:	4620      	mov	r0, r4
 8003314:	f7ff ff70 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003318:	e7c9      	b.n	80032ae <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f06f 0201 	mvn.w	r2, #1
 8003320:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003322:	4620      	mov	r0, r4
 8003324:	f7fe f852 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
 8003328:	e7c9      	b.n	80032be <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003330:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003332:	4620      	mov	r0, r4
 8003334:	f000 f95f 	bl	80035f6 <HAL_TIMEx_BreakCallback>
 8003338:	e7c7      	b.n	80032ca <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003340:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff ff59 	bl	80031fa <HAL_TIM_TriggerCallback>
 8003348:	e7c5      	b.n	80032d6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	f06f 0220 	mvn.w	r2, #32
 8003350:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003352:	4620      	mov	r0, r4
 8003354:	f000 f94e 	bl	80035f4 <HAL_TIMEx_CommutCallback>
}
 8003358:	e7c3      	b.n	80032e2 <HAL_TIM_IRQHandler+0xe6>
	...

0800335c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800335c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800335e:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <TIM_Base_SetConfig+0xa8>)
 8003360:	4290      	cmp	r0, r2
 8003362:	d00e      	beq.n	8003382 <TIM_Base_SetConfig+0x26>
 8003364:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003368:	d00b      	beq.n	8003382 <TIM_Base_SetConfig+0x26>
 800336a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800336e:	4290      	cmp	r0, r2
 8003370:	d007      	beq.n	8003382 <TIM_Base_SetConfig+0x26>
 8003372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003376:	4290      	cmp	r0, r2
 8003378:	d003      	beq.n	8003382 <TIM_Base_SetConfig+0x26>
 800337a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800337e:	4290      	cmp	r0, r2
 8003380:	d103      	bne.n	800338a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003386:	684a      	ldr	r2, [r1, #4]
 8003388:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338a:	4a1e      	ldr	r2, [pc, #120]	@ (8003404 <TIM_Base_SetConfig+0xa8>)
 800338c:	4290      	cmp	r0, r2
 800338e:	d01a      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 8003390:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003394:	d017      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 8003396:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800339a:	4290      	cmp	r0, r2
 800339c:	d013      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 800339e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033a2:	4290      	cmp	r0, r2
 80033a4:	d00f      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 80033a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033aa:	4290      	cmp	r0, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 80033ae:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80033b2:	4290      	cmp	r0, r2
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 80033b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033ba:	4290      	cmp	r0, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0x6a>
 80033be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033c2:	4290      	cmp	r0, r2
 80033c4:	d103      	bne.n	80033ce <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ca:	68ca      	ldr	r2, [r1, #12]
 80033cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d2:	694a      	ldr	r2, [r1, #20]
 80033d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80033d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	688b      	ldr	r3, [r1, #8]
 80033da:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80033dc:	680b      	ldr	r3, [r1, #0]
 80033de:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <TIM_Base_SetConfig+0xa8>)
 80033e2:	4298      	cmp	r0, r3
 80033e4:	d00a      	beq.n	80033fc <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 80033e6:	2301      	movs	r3, #1
 80033e8:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ea:	6903      	ldr	r3, [r0, #16]
 80033ec:	f013 0f01 	tst.w	r3, #1
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	6903      	ldr	r3, [r0, #16]
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6103      	str	r3, [r0, #16]
}
 80033fa:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	690b      	ldr	r3, [r1, #16]
 80033fe:	6303      	str	r3, [r0, #48]	@ 0x30
 8003400:	e7f1      	b.n	80033e6 <TIM_Base_SetConfig+0x8a>
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000

08003408 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003408:	b340      	cbz	r0, 800345c <HAL_TIM_Base_Init+0x54>
{
 800340a:	b510      	push	{r4, lr}
 800340c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003412:	b1f3      	cbz	r3, 8003452 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341a:	4621      	mov	r1, r4
 800341c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003420:	f7ff ff9c 	bl	800335c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	2301      	movs	r3, #1
 8003426:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800342e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003432:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003436:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800343e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003442:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003446:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800344a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800344e:	2000      	movs	r0, #0
}
 8003450:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003452:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003456:	f7ff fa75 	bl	8002944 <HAL_TIM_Base_MspInit>
 800345a:	e7db      	b.n	8003414 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800345c:	2001      	movs	r0, #1
}
 800345e:	4770      	bx	lr

08003460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003460:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003462:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003468:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800346c:	430a      	orrs	r2, r1
 800346e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	6082      	str	r2, [r0, #8]
}
 8003474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800347a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d078      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003486:	2301      	movs	r3, #1
 8003488:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	2302      	movs	r3, #2
 800348e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003492:	6802      	ldr	r2, [r0, #0]
 8003494:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003496:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800349a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800349e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80034a0:	680b      	ldr	r3, [r1, #0]
 80034a2:	2b60      	cmp	r3, #96	@ 0x60
 80034a4:	d04c      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0xc6>
 80034a6:	d829      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x82>
 80034a8:	2b40      	cmp	r3, #64	@ 0x40
 80034aa:	d054      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xdc>
 80034ac:	d90c      	bls.n	80034c8 <HAL_TIM_ConfigClockSource+0x4e>
 80034ae:	2b50      	cmp	r3, #80	@ 0x50
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	68ca      	ldr	r2, [r1, #12]
 80034b4:	6849      	ldr	r1, [r1, #4]
 80034b6:	6800      	ldr	r0, [r0, #0]
 80034b8:	f7ff fe30 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034bc:	2150      	movs	r1, #80	@ 0x50
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f7ff fe53 	bl	800316a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2000      	movs	r0, #0
      break;
 80034c6:	e005      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d00d      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x6e>
 80034cc:	d909      	bls.n	80034e2 <HAL_TIM_ConfigClockSource+0x68>
 80034ce:	2b30      	cmp	r3, #48	@ 0x30
 80034d0:	d00a      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80034da:	2300      	movs	r3, #0
 80034dc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80034e0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80034e2:	b10b      	cbz	r3, 80034e8 <HAL_TIM_ConfigClockSource+0x6e>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d105      	bne.n	80034f4 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e8:	4619      	mov	r1, r3
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	f7ff fe3d 	bl	800316a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2000      	movs	r0, #0
      break;
 80034f2:	e7ef      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80034f4:	2001      	movs	r0, #1
 80034f6:	e7ed      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
 80034f8:	2001      	movs	r0, #1
 80034fa:	e7eb      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003500:	d034      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xf2>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003506:	d10c      	bne.n	8003522 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8003508:	68cb      	ldr	r3, [r1, #12]
 800350a:	684a      	ldr	r2, [r1, #4]
 800350c:	6889      	ldr	r1, [r1, #8]
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	f7ff ffa6 	bl	8003460 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	6893      	ldr	r3, [r2, #8]
 8003518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800351c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2000      	movs	r0, #0
      break;
 8003520:	e7d8      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003522:	2b70      	cmp	r3, #112	@ 0x70
 8003524:	d124      	bne.n	8003570 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	68cb      	ldr	r3, [r1, #12]
 8003528:	684a      	ldr	r2, [r1, #4]
 800352a:	6889      	ldr	r1, [r1, #8]
 800352c:	6800      	ldr	r0, [r0, #0]
 800352e:	f7ff ff97 	bl	8003460 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003536:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800353a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2000      	movs	r0, #0
      break;
 800353e:	e7c9      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003540:	68ca      	ldr	r2, [r1, #12]
 8003542:	6849      	ldr	r1, [r1, #4]
 8003544:	6800      	ldr	r0, [r0, #0]
 8003546:	f7ff fdfc 	bl	8003142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800354a:	2160      	movs	r1, #96	@ 0x60
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	f7ff fe0c 	bl	800316a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2000      	movs	r0, #0
      break;
 8003554:	e7be      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	68ca      	ldr	r2, [r1, #12]
 8003558:	6849      	ldr	r1, [r1, #4]
 800355a:	6800      	ldr	r0, [r0, #0]
 800355c:	f7ff fdde 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003560:	2140      	movs	r1, #64	@ 0x40
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	f7ff fe01 	bl	800316a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2000      	movs	r0, #0
      break;
 800356a:	e7b3      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800356c:	2000      	movs	r0, #0
 800356e:	e7b1      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003570:	2001      	movs	r0, #1
 8003572:	e7af      	b.n	80034d4 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003574:	2002      	movs	r0, #2
}
 8003576:	4770      	bx	lr

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003578:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800357c:	2a01      	cmp	r2, #1
 800357e:	d035      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8003580:	b410      	push	{r4}
 8003582:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003584:	2201      	movs	r2, #1
 8003586:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358a:	2202      	movs	r2, #2
 800358c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	6802      	ldr	r2, [r0, #0]
 8003592:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003594:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003596:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800359a:	6808      	ldr	r0, [r1, #0]
 800359c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4812      	ldr	r0, [pc, #72]	@ (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80035a6:	4282      	cmp	r2, r0
 80035a8:	d012      	beq.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035aa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80035ae:	d00f      	beq.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035b0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80035b4:	4282      	cmp	r2, r0
 80035b6:	d00b      	beq.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035b8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80035bc:	4282      	cmp	r2, r0
 80035be:	d007      	beq.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035c0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80035c4:	4282      	cmp	r2, r0
 80035c6:	d003      	beq.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035c8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80035cc:	4282      	cmp	r2, r0
 80035ce:	d104      	bne.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d4:	6849      	ldr	r1, [r1, #4]
 80035d6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80035e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80035ec:	2002      	movs	r0, #2
}
 80035ee:	4770      	bx	lr
 80035f0:	40010000 	.word	0x40010000

080035f4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f6:	4770      	bx	lr

080035f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f8:	b530      	push	{r4, r5, lr}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80035fe:	2400      	movs	r4, #0
 8003600:	9401      	str	r4, [sp, #4]
 8003602:	4b1d      	ldr	r3, [pc, #116]	@ (8003678 <HAL_InitTick+0x80>)
 8003604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003616:	a902      	add	r1, sp, #8
 8003618:	a803      	add	r0, sp, #12
 800361a:	f7ff fd61 	bl	80030e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800361e:	f7ff fd4f 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003622:	4a16      	ldr	r2, [pc, #88]	@ (800367c <HAL_InitTick+0x84>)
 8003624:	fba2 2300 	umull	r2, r3, r2, r0
 8003628:	0c9b      	lsrs	r3, r3, #18
 800362a:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800362c:	4814      	ldr	r0, [pc, #80]	@ (8003680 <HAL_InitTick+0x88>)
 800362e:	4a15      	ldr	r2, [pc, #84]	@ (8003684 <HAL_InitTick+0x8c>)
 8003630:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003632:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003636:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003638:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800363a:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363c:	6084      	str	r4, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800363e:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003640:	f7ff fee2 	bl	8003408 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003644:	4604      	mov	r4, r0
 8003646:	b110      	cbz	r0, 800364e <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8003648:	4620      	mov	r0, r4
 800364a:	b009      	add	sp, #36	@ 0x24
 800364c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 800364e:	480c      	ldr	r0, [pc, #48]	@ (8003680 <HAL_InitTick+0x88>)
 8003650:	f7ff fd94 	bl	800317c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003654:	4604      	mov	r4, r0
 8003656:	2800      	cmp	r0, #0
 8003658:	d1f6      	bne.n	8003648 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800365a:	2019      	movs	r0, #25
 800365c:	f7fe f866 	bl	800172c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003660:	2d0f      	cmp	r5, #15
 8003662:	d901      	bls.n	8003668 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8003664:	2401      	movs	r4, #1
 8003666:	e7ef      	b.n	8003648 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003668:	2200      	movs	r2, #0
 800366a:	4629      	mov	r1, r5
 800366c:	2019      	movs	r0, #25
 800366e:	f7fe f84d 	bl	800170c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_InitTick+0x90>)
 8003674:	601d      	str	r5, [r3, #0]
 8003676:	e7e7      	b.n	8003648 <HAL_InitTick+0x50>
 8003678:	40023800 	.word	0x40023800
 800367c:	431bde83 	.word	0x431bde83
 8003680:	20015258 	.word	0x20015258
 8003684:	40010000 	.word	0x40010000
 8003688:	2000000c 	.word	0x2000000c

0800368c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	f102 030c 	add.w	r3, r2, #12
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	320c      	adds	r2, #12
 800369c:	e842 3100 	strex	r1, r3, [r2]
 80036a0:	2900      	cmp	r1, #0
 80036a2:	d1f3      	bne.n	800368c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	f102 0314 	add.w	r3, r2, #20
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	3214      	adds	r2, #20
 80036b4:	e842 3100 	strex	r1, r3, [r2]
 80036b8:	2900      	cmp	r1, #0
 80036ba:	d1f3      	bne.n	80036a4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d005      	beq.n	80036ce <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c2:	2320      	movs	r3, #32
 80036c4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c8:	2300      	movs	r3, #0
 80036ca:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80036cc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	f102 030c 	add.w	r3, r2, #12
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	320c      	adds	r2, #12
 80036de:	e842 3100 	strex	r1, r3, [r2]
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d1f3      	bne.n	80036ce <UART_EndRxTransfer+0x42>
 80036e6:	e7ec      	b.n	80036c2 <UART_EndRxTransfer+0x36>

080036e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	6802      	ldr	r2, [r0, #0]
 80036ee:	6913      	ldr	r3, [r2, #16]
 80036f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036f4:	68c1      	ldr	r1, [r0, #12]
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036fa:	6883      	ldr	r3, [r0, #8]
 80036fc:	6902      	ldr	r2, [r0, #16]
 80036fe:	431a      	orrs	r2, r3
 8003700:	6943      	ldr	r3, [r0, #20]
 8003702:	431a      	orrs	r2, r3
 8003704:	69c3      	ldr	r3, [r0, #28]
 8003706:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003708:	6801      	ldr	r1, [r0, #0]
 800370a:	68cb      	ldr	r3, [r1, #12]
 800370c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003710:	f023 030c 	bic.w	r3, r3, #12
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003718:	6802      	ldr	r2, [r0, #0]
 800371a:	6953      	ldr	r3, [r2, #20]
 800371c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003720:	6981      	ldr	r1, [r0, #24]
 8003722:	430b      	orrs	r3, r1
 8003724:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003726:	6803      	ldr	r3, [r0, #0]
 8003728:	4a31      	ldr	r2, [pc, #196]	@ (80037f0 <UART_SetConfig+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d006      	beq.n	800373c <UART_SetConfig+0x54>
 800372e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003732:	4293      	cmp	r3, r2
 8003734:	d002      	beq.n	800373c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003736:	f7ff fcb3 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 800373a:	e001      	b.n	8003740 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800373c:	f7ff fcc0 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003740:	69e3      	ldr	r3, [r4, #28]
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003746:	d029      	beq.n	800379c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003748:	2100      	movs	r1, #0
 800374a:	1803      	adds	r3, r0, r0
 800374c:	4149      	adcs	r1, r1
 800374e:	181b      	adds	r3, r3, r0
 8003750:	f141 0100 	adc.w	r1, r1, #0
 8003754:	00c9      	lsls	r1, r1, #3
 8003756:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1818      	adds	r0, r3, r0
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003764:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003768:	f141 0100 	adc.w	r1, r1, #0
 800376c:	f7fc fd64 	bl	8000238 <__aeabi_uldivmod>
 8003770:	4a20      	ldr	r2, [pc, #128]	@ (80037f4 <UART_SetConfig+0x10c>)
 8003772:	fba2 3100 	umull	r3, r1, r2, r0
 8003776:	0949      	lsrs	r1, r1, #5
 8003778:	2364      	movs	r3, #100	@ 0x64
 800377a:	fb03 0311 	mls	r3, r3, r1, r0
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	3332      	adds	r3, #50	@ 0x32
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800378c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	4413      	add	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }
}
 800379a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800379c:	2300      	movs	r3, #0
 800379e:	1802      	adds	r2, r0, r0
 80037a0:	eb43 0103 	adc.w	r1, r3, r3
 80037a4:	1812      	adds	r2, r2, r0
 80037a6:	f141 0100 	adc.w	r1, r1, #0
 80037aa:	00c9      	lsls	r1, r1, #3
 80037ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b0:	00d2      	lsls	r2, r2, #3
 80037b2:	1810      	adds	r0, r2, r0
 80037b4:	f141 0100 	adc.w	r1, r1, #0
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	1892      	adds	r2, r2, r2
 80037bc:	415b      	adcs	r3, r3
 80037be:	f7fc fd3b 	bl	8000238 <__aeabi_uldivmod>
 80037c2:	4a0c      	ldr	r2, [pc, #48]	@ (80037f4 <UART_SetConfig+0x10c>)
 80037c4:	fba2 3100 	umull	r3, r1, r2, r0
 80037c8:	0949      	lsrs	r1, r1, #5
 80037ca:	2364      	movs	r3, #100	@ 0x64
 80037cc:	fb03 0311 	mls	r3, r3, r1, r0
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	3332      	adds	r3, #50	@ 0x32
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	005a      	lsls	r2, r3, #1
 80037dc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80037e0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	6821      	ldr	r1, [r4, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
 80037ee:	e7d4      	b.n	800379a <UART_SetConfig+0xb2>
 80037f0:	40011000 	.word	0x40011000
 80037f4:	51eb851f 	.word	0x51eb851f

080037f8 <UART_WaitOnFlagUntilTimeout>:
{
 80037f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037fc:	b083      	sub	sp, #12
 80037fe:	4605      	mov	r5, r0
 8003800:	460e      	mov	r6, r1
 8003802:	4617      	mov	r7, r2
 8003804:	4699      	mov	r9, r3
 8003806:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	ea36 0404 	bics.w	r4, r6, r4
 8003812:	bf0c      	ite	eq
 8003814:	2401      	moveq	r4, #1
 8003816:	2400      	movne	r4, #0
 8003818:	42bc      	cmp	r4, r7
 800381a:	d128      	bne.n	800386e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800381c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003820:	d0f3      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fd ff05 	bl	8001630 <HAL_GetTick>
 8003826:	eba0 0009 	sub.w	r0, r0, r9
 800382a:	4540      	cmp	r0, r8
 800382c:	d823      	bhi.n	8003876 <UART_WaitOnFlagUntilTimeout+0x7e>
 800382e:	f1b8 0f00 	cmp.w	r8, #0
 8003832:	d022      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	f012 0f04 	tst.w	r2, #4
 800383c:	d0e5      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
 800383e:	2e80      	cmp	r6, #128	@ 0x80
 8003840:	d0e3      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
 8003842:	2e40      	cmp	r6, #64	@ 0x40
 8003844:	d0e1      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	f012 0f08 	tst.w	r2, #8
 800384c:	d0dd      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800384e:	2400      	movs	r4, #0
 8003850:	9401      	str	r4, [sp, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	9201      	str	r2, [sp, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800385c:	4628      	mov	r0, r5
 800385e:	f7ff ff15 	bl	800368c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003862:	2308      	movs	r3, #8
 8003864:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003866:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800386a:	2001      	movs	r0, #1
 800386c:	e000      	b.n	8003870 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
}
 8003870:	b003      	add	sp, #12
 8003872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003876:	2003      	movs	r0, #3
 8003878:	e7fa      	b.n	8003870 <UART_WaitOnFlagUntilTimeout+0x78>
 800387a:	2003      	movs	r0, #3
 800387c:	e7f8      	b.n	8003870 <UART_WaitOnFlagUntilTimeout+0x78>

0800387e <HAL_UART_Init>:
  if (huart == NULL)
 800387e:	b360      	cbz	r0, 80038da <HAL_UART_Init+0x5c>
{
 8003880:	b510      	push	{r4, lr}
 8003882:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003884:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003888:	b313      	cbz	r3, 80038d0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800388a:	2324      	movs	r3, #36	@ 0x24
 800388c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	68d3      	ldr	r3, [r2, #12]
 8003894:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003898:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ff24 	bl	80036e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6913      	ldr	r3, [r2, #16]
 80038a4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80038a8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	6953      	ldr	r3, [r2, #20]
 80038ae:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80038b2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80038b4:	6822      	ldr	r2, [r4, #0]
 80038b6:	68d3      	ldr	r3, [r2, #12]
 80038b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038bc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	2000      	movs	r0, #0
 80038c0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038c2:	2320      	movs	r3, #32
 80038c4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80038ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80038d0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80038d4:	f7ff f870 	bl	80029b8 <HAL_UART_MspInit>
 80038d8:	e7d7      	b.n	800388a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80038da:	2001      	movs	r0, #1
}
 80038dc:	4770      	bx	lr

080038de <HAL_UART_Transmit>:
{
 80038de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80038e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d156      	bne.n	800399e <HAL_UART_Transmit+0xc0>
 80038f0:	4604      	mov	r4, r0
 80038f2:	460d      	mov	r5, r1
 80038f4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d055      	beq.n	80039a6 <HAL_UART_Transmit+0xc8>
 80038fa:	b90a      	cbnz	r2, 8003900 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
 80038fe:	e04f      	b.n	80039a0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003904:	2321      	movs	r3, #33	@ 0x21
 8003906:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800390a:	f7fd fe91 	bl	8001630 <HAL_GetTick>
 800390e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003910:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003914:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	68a3      	ldr	r3, [r4, #8]
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391e:	d002      	beq.n	8003926 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003920:	f04f 0800 	mov.w	r8, #0
 8003924:	e014      	b.n	8003950 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	b32b      	cbz	r3, 8003976 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800392a:	f04f 0800 	mov.w	r8, #0
 800392e:	e00f      	b.n	8003950 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003930:	2320      	movs	r3, #32
 8003932:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003936:	2003      	movs	r0, #3
 8003938:	e032      	b.n	80039a0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800393a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003946:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003948:	b292      	uxth	r2, r2
 800394a:	3a01      	subs	r2, #1
 800394c:	b292      	uxth	r2, r2
 800394e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003950:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	b193      	cbz	r3, 800397c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	9600      	str	r6, [sp, #0]
 8003958:	463b      	mov	r3, r7
 800395a:	2200      	movs	r2, #0
 800395c:	2180      	movs	r1, #128	@ 0x80
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff ff4a 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 8003964:	2800      	cmp	r0, #0
 8003966:	d1e3      	bne.n	8003930 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003968:	2d00      	cmp	r5, #0
 800396a:	d0e6      	beq.n	800393a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800396c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003974:	e7e7      	b.n	8003946 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003976:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003978:	2500      	movs	r5, #0
 800397a:	e7e9      	b.n	8003950 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800397c:	9600      	str	r6, [sp, #0]
 800397e:	463b      	mov	r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	2140      	movs	r1, #64	@ 0x40
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff ff37 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 800398a:	b918      	cbnz	r0, 8003994 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800398c:	2320      	movs	r3, #32
 800398e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003992:	e005      	b.n	80039a0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003994:	2320      	movs	r3, #32
 8003996:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800399a:	2003      	movs	r0, #3
 800399c:	e000      	b.n	80039a0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800399e:	2002      	movs	r0, #2
}
 80039a0:	b002      	add	sp, #8
 80039a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
 80039a8:	e7fa      	b.n	80039a0 <HAL_UART_Transmit+0xc2>

080039aa <HAL_UART_Receive>:
{
 80039aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d159      	bne.n	8003a70 <HAL_UART_Receive+0xc6>
 80039bc:	4604      	mov	r4, r0
 80039be:	460d      	mov	r5, r1
 80039c0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80039c2:	2900      	cmp	r1, #0
 80039c4:	d058      	beq.n	8003a78 <HAL_UART_Receive+0xce>
 80039c6:	b90a      	cbnz	r2, 80039cc <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
 80039ca:	e052      	b.n	8003a72 <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d0:	2222      	movs	r2, #34	@ 0x22
 80039d2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d6:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 80039d8:	f7fd fe2a 	bl	8001630 <HAL_GetTick>
 80039dc:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80039de:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80039e2:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e6:	68a3      	ldr	r3, [r4, #8]
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 80039ee:	f04f 0800 	mov.w	r8, #0
 80039f2:	e01c      	b.n	8003a2e <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	6923      	ldr	r3, [r4, #16]
 80039f6:	b113      	cbz	r3, 80039fe <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80039f8:	f04f 0800 	mov.w	r8, #0
 80039fc:	e017      	b.n	8003a2e <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 80039fe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003a00:	2500      	movs	r5, #0
 8003a02:	e014      	b.n	8003a2e <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 8003a04:	2320      	movs	r3, #32
 8003a06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	e031      	b.n	8003a72 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8003a1a:	e003      	b.n	8003a24 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8003a22:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8003a24:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8003a26:	b292      	uxth	r2, r2
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	b292      	uxth	r2, r2
 8003a2c:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003a2e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	b1c3      	cbz	r3, 8003a66 <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a34:	9600      	str	r6, [sp, #0]
 8003a36:	463b      	mov	r3, r7
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2120      	movs	r1, #32
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff fedb 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d1de      	bne.n	8003a04 <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	d0e1      	beq.n	8003a0e <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a4a:	68a3      	ldr	r3, [r4, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a50:	d0e4      	beq.n	8003a1c <HAL_UART_Receive+0x72>
 8003a52:	b913      	cbnz	r3, 8003a5a <HAL_UART_Receive+0xb0>
 8003a54:	6923      	ldr	r3, [r4, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0e0      	beq.n	8003a1c <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a62:	702b      	strb	r3, [r5, #0]
 8003a64:	e7dd      	b.n	8003a22 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8003a66:	2320      	movs	r3, #32
 8003a68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8003a70:	2002      	movs	r0, #2
}
 8003a72:	b002      	add	sp, #8
 8003a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
 8003a7a:	e7fa      	b.n	8003a72 <HAL_UART_Receive+0xc8>

08003a7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a7c:	e7fe      	b.n	8003a7c <NMI_Handler>

08003a7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a7e:	e7fe      	b.n	8003a7e <HardFault_Handler>

08003a80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a80:	e7fe      	b.n	8003a80 <MemManage_Handler>

08003a82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <BusFault_Handler>

08003a84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <UsageFault_Handler>

08003a86 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a88:	4770      	bx	lr

08003a8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a8a:	4770      	bx	lr

08003a8c <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a8c:	4770      	bx	lr

08003a8e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a8e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL53L1X_INT_Pin);
 8003a90:	2010      	movs	r0, #16
 8003a92:	f7fe f991 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a96:	bd08      	pop	{r3, pc}

08003a98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a9a:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <DMA1_Stream5_IRQHandler+0xc>)
 8003a9c:	f7fd ff1a 	bl	80018d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003aa0:	bd08      	pop	{r3, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2001511c 	.word	0x2001511c

08003aa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003aaa:	4802      	ldr	r0, [pc, #8]	@ (8003ab4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003aac:	f7ff fba6 	bl	80031fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ab0:	bd08      	pop	{r3, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20015258 	.word	0x20015258

08003ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ab8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  clearToSend = 1;
 8003aba:	4c0a      	ldr	r4, [pc, #40]	@ (8003ae4 <TIM2_IRQHandler+0x2c>)
 8003abc:	2301      	movs	r3, #1
 8003abe:	7023      	strb	r3, [r4, #0]
  if (clearToSend == 1){
    clearToGetL1 = 1;
 8003ac0:	4a09      	ldr	r2, [pc, #36]	@ (8003ae8 <TIM2_IRQHandler+0x30>)
 8003ac2:	7013      	strb	r3, [r2, #0]
    counter++;
 8003ac4:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <TIM2_IRQHandler+0x34>)
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 8003acc:	2120      	movs	r1, #32
 8003ace:	4808      	ldr	r0, [pc, #32]	@ (8003af0 <TIM2_IRQHandler+0x38>)
 8003ad0:	f7fe f967 	bl	8001da2 <HAL_GPIO_TogglePin>
    sendToSimulink();
 8003ad4:	f7fd fa7c 	bl	8000fd0 <sendToSimulink>
    clearToSend = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	7023      	strb	r3, [r4, #0]
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003adc:	4805      	ldr	r0, [pc, #20]	@ (8003af4 <TIM2_IRQHandler+0x3c>)
 8003ade:	f7ff fb8d 	bl	80031fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	2001501d 	.word	0x2001501d
 8003ae8:	20015014 	.word	0x20015014
 8003aec:	20015018 	.word	0x20015018
 8003af0:	40020000 	.word	0x40020000
 8003af4:	2001520c 	.word	0x2001520c

08003af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003af8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003afa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003afe:	f7fe f95b 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b02:	bd08      	pop	{r3, pc}

08003b04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b06:	4802      	ldr	r0, [pc, #8]	@ (8003b10 <TIM5_IRQHandler+0xc>)
 8003b08:	f7ff fb78 	bl	80031fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b0c:	bd08      	pop	{r3, pc}
 8003b0e:	bf00      	nop
 8003b10:	200151c4 	.word	0x200151c4

08003b14 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b18:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	9501      	str	r5, [sp, #4]
 8003b1e:	4c1b      	ldr	r4, [pc, #108]	@ (8003b8c <I2C1_MspInit+0x78>)
 8003b20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b38:	f04f 0912 	mov.w	r9, #18
 8003b3c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b42:	f04f 0803 	mov.w	r8, #3
 8003b46:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003b4a:	2704      	movs	r7, #4
 8003b4c:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003b4e:	4e10      	ldr	r6, [pc, #64]	@ (8003b90 <I2C1_MspInit+0x7c>)
 8003b50:	a903      	add	r1, sp, #12
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7fd ffac 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b5e:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003b68:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003b6a:	a903      	add	r1, sp, #12
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f7fd ff9f 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b72:	9502      	str	r5, [sp, #8]
 8003b74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b7a:	6423      	str	r3, [r4, #64]	@ 0x40
 8003b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003b86:	b009      	add	sp, #36	@ 0x24
 8003b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40020400 	.word	0x40020400

08003b94 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003b96:	4a08      	ldr	r2, [pc, #32]	@ (8003bb8 <I2C1_MspDeInit+0x24>)
 8003b98:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003b9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b9e:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003ba0:	4c06      	ldr	r4, [pc, #24]	@ (8003bbc <I2C1_MspDeInit+0x28>)
 8003ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7fe f866 	bl	8001c78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003bac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7fe f861 	bl	8001c78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003bb6:	bd10      	pop	{r4, pc}
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40020400 	.word	0x40020400

08003bc0 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <BSP_I2C1_DeInit+0x30>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b17b      	cbz	r3, 8003be6 <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <BSP_I2C1_DeInit+0x30>)
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	b10b      	cbz	r3, 8003bd2 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8003bce:	2000      	movs	r0, #0
}
 8003bd0:	4770      	bx	lr
{
 8003bd2:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 8003bd4:	4c07      	ldr	r4, [pc, #28]	@ (8003bf4 <BSP_I2C1_DeInit+0x34>)
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff ffdc 	bl	8003b94 <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7fe fc38 	bl	8002452 <HAL_I2C_DeInit>
 8003be2:	b910      	cbnz	r0, 8003bea <BSP_I2C1_DeInit+0x2a>
}
 8003be4:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 8003be6:	2000      	movs	r0, #0
 8003be8:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 8003bea:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003bee:	e7f9      	b.n	8003be4 <BSP_I2C1_DeInit+0x24>
 8003bf0:	200152a0 	.word	0x200152a0
 8003bf4:	200152a4 	.word	0x200152a4

08003bf8 <BSP_I2C1_Send>:
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8003bf8:	b500      	push	{lr}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	4613      	mov	r3, r2
  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003bfe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c02:	9200      	str	r2, [sp, #0]
 8003c04:	460a      	mov	r2, r1
 8003c06:	4601      	mov	r1, r0
 8003c08:	4809      	ldr	r0, [pc, #36]	@ (8003c30 <BSP_I2C1_Send+0x38>)
 8003c0a:	f7fe fc3b 	bl	8002484 <HAL_I2C_Master_Transmit>
 8003c0e:	b918      	cbnz	r0, 8003c18 <BSP_I2C1_Send+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8003c10:	2000      	movs	r0, #0
}
 8003c12:	b003      	add	sp, #12
 8003c14:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8003c18:	4805      	ldr	r0, [pc, #20]	@ (8003c30 <BSP_I2C1_Send+0x38>)
 8003c1a:	f7fe fe70 	bl	80028fe <HAL_I2C_GetError>
 8003c1e:	2804      	cmp	r0, #4
 8003c20:	d002      	beq.n	8003c28 <BSP_I2C1_Send+0x30>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003c22:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8003c26:	e7f4      	b.n	8003c12 <BSP_I2C1_Send+0x1a>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003c28:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003c2c:	e7f1      	b.n	8003c12 <BSP_I2C1_Send+0x1a>
 8003c2e:	bf00      	nop
 8003c30:	200152a4 	.word	0x200152a4

08003c34 <BSP_I2C1_Recv>:
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8003c34:	b500      	push	{lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	4613      	mov	r3, r2
  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003c3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c3e:	9200      	str	r2, [sp, #0]
 8003c40:	460a      	mov	r2, r1
 8003c42:	4601      	mov	r1, r0
 8003c44:	4809      	ldr	r0, [pc, #36]	@ (8003c6c <BSP_I2C1_Recv+0x38>)
 8003c46:	f7fe fcd9 	bl	80025fc <HAL_I2C_Master_Receive>
 8003c4a:	b918      	cbnz	r0, 8003c54 <BSP_I2C1_Recv+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8003c4c:	2000      	movs	r0, #0
}
 8003c4e:	b003      	add	sp, #12
 8003c50:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8003c54:	4805      	ldr	r0, [pc, #20]	@ (8003c6c <BSP_I2C1_Recv+0x38>)
 8003c56:	f7fe fe52 	bl	80028fe <HAL_I2C_GetError>
 8003c5a:	2804      	cmp	r0, #4
 8003c5c:	d002      	beq.n	8003c64 <BSP_I2C1_Recv+0x30>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003c5e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8003c62:	e7f4      	b.n	8003c4e <BSP_I2C1_Recv+0x1a>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003c64:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003c68:	e7f1      	b.n	8003c4e <BSP_I2C1_Recv+0x1a>
 8003c6a:	bf00      	nop
 8003c6c:	200152a4 	.word	0x200152a4

08003c70 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8003c70:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003c72:	f7fd fcdd 	bl	8001630 <HAL_GetTick>
}
 8003c76:	bd08      	pop	{r3, pc}

08003c78 <MX_I2C1_Init>:
{
 8003c78:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <MX_I2C1_Init+0x28>)
 8003c7c:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 8003c7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <MX_I2C1_Init+0x2c>)
 8003c80:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c82:	2200      	movs	r2, #0
 8003c84:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 8003c86:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c8c:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c8e:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 8003c90:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c92:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c94:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003c96:	f7fe fafd 	bl	8002294 <HAL_I2C_Init>
 8003c9a:	b100      	cbz	r0, 8003c9e <MX_I2C1_Init+0x26>
    ret = HAL_ERROR;
 8003c9c:	2001      	movs	r0, #1
}
 8003c9e:	bd08      	pop	{r3, pc}
 8003ca0:	40005400 	.word	0x40005400
 8003ca4:	00061a80 	.word	0x00061a80

08003ca8 <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <BSP_I2C1_Init+0x3c>)
 8003caa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce8 <BSP_I2C1_Init+0x40>)
 8003cac:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 8003cae:	4a0f      	ldr	r2, [pc, #60]	@ (8003cec <BSP_I2C1_Init+0x44>)
 8003cb0:	6813      	ldr	r3, [r2, #0]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	b10b      	cbz	r3, 8003cbc <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8003cb8:	2000      	movs	r0, #0
}
 8003cba:	4770      	bx	lr
{
 8003cbc:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003cbe:	4809      	ldr	r0, [pc, #36]	@ (8003ce4 <BSP_I2C1_Init+0x3c>)
 8003cc0:	f7fe fe1a 	bl	80028f8 <HAL_I2C_GetState>
 8003cc4:	b108      	cbz	r0, 8003cca <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8003cc6:	2000      	movs	r0, #0
}
 8003cc8:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 8003cca:	4c06      	ldr	r4, [pc, #24]	@ (8003ce4 <BSP_I2C1_Init+0x3c>)
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff ff21 	bl	8003b14 <I2C1_MspInit>
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff ffd0 	bl	8003c78 <MX_I2C1_Init>
 8003cd8:	b908      	cbnz	r0, 8003cde <BSP_I2C1_Init+0x36>
          ret = BSP_ERROR_NONE;
 8003cda:	2000      	movs	r0, #0
  return ret;
 8003cdc:	e7f4      	b.n	8003cc8 <BSP_I2C1_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 8003cde:	f06f 0007 	mvn.w	r0, #7
 8003ce2:	e7f1      	b.n	8003cc8 <BSP_I2C1_Init+0x20>
 8003ce4:	200152a4 	.word	0x200152a4
 8003ce8:	40005400 	.word	0x40005400
 8003cec:	200152a0 	.word	0x200152a0

08003cf0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf0:	4a03      	ldr	r2, [pc, #12]	@ (8003d00 <SystemInit+0x10>)
 8003cf2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003cf6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8003d04:	b082      	sub	sp, #8
 8003d06:	9001      	str	r0, [sp, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8003d08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d80d      	bhi.n	8003d2c <CheckValidRectRoi+0x28>
 8003d10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003d14:	2a0f      	cmp	r2, #15
 8003d16:	d817      	bhi.n	8003d48 <CheckValidRectRoi+0x44>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8003d18:	f89d 2006 	ldrb.w	r2, [sp, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8003d1c:	2a0f      	cmp	r2, #15
 8003d1e:	d816      	bhi.n	8003d4e <CheckValidRectRoi+0x4a>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8003d20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003d24:	2a0f      	cmp	r2, #15
 8003d26:	d815      	bhi.n	8003d54 <CheckValidRectRoi+0x50>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e001      	b.n	8003d30 <CheckValidRectRoi+0x2c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003d2c:	f06f 0003 	mvn.w	r0, #3

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8003d30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d810      	bhi.n	8003d5a <CheckValidRectRoi+0x56>
 8003d38:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d30d      	bcc.n	8003d60 <CheckValidRectRoi+0x5c>
		Status = VL53L1_ERROR_INVALID_PARAMS;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003d44:	b002      	add	sp, #8
 8003d46:	4770      	bx	lr
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003d48:	f06f 0003 	mvn.w	r0, #3
 8003d4c:	e7f0      	b.n	8003d30 <CheckValidRectRoi+0x2c>
 8003d4e:	f06f 0003 	mvn.w	r0, #3
 8003d52:	e7ed      	b.n	8003d30 <CheckValidRectRoi+0x2c>
 8003d54:	f06f 0003 	mvn.w	r0, #3
 8003d58:	e7ea      	b.n	8003d30 <CheckValidRectRoi+0x2c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003d5a:	f06f 0003 	mvn.w	r0, #3
 8003d5e:	e7f1      	b.n	8003d44 <CheckValidRectRoi+0x40>
 8003d60:	f06f 0003 	mvn.w	r0, #3
 8003d64:	e7ee      	b.n	8003d44 <CheckValidRectRoi+0x40>
	...

08003d68 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8003d68:	b086      	sub	sp, #24
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8003d6a:	4b33      	ldr	r3, [pc, #204]	@ (8003e38 <ComputeDevicePresetMode+0xd0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f88d 3016 	strb.w	r3, [sp, #22]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8003d78:	4b30      	ldr	r3, [pc, #192]	@ (8003e3c <ComputeDevicePresetMode+0xd4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f88d 3012 	strb.w	r3, [sp, #18]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8003d86:	4b2e      	ldr	r3, [pc, #184]	@ (8003e40 <ComputeDevicePresetMode+0xd8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	f88d 300e 	strb.w	r3, [sp, #14]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8003d94:	4b2b      	ldr	r3, [pc, #172]	@ (8003e44 <ComputeDevicePresetMode+0xdc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8ad 3008 	strh.w	r3, [sp, #8]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	f88d 300a 	strb.w	r3, [sp, #10]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8003da2:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <ComputeDevicePresetMode+0xe0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f88d 3006 	strb.w	r3, [sp, #6]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8003db0:	2301      	movs	r3, #1
 8003db2:	7013      	strb	r3, [r2, #0]

	switch (DistanceMode) {
 8003db4:	4299      	cmp	r1, r3
 8003db6:	d00b      	beq.n	8003dd0 <ComputeDevicePresetMode+0x68>
 8003db8:	2902      	cmp	r1, #2
 8003dba:	d10b      	bne.n	8003dd4 <ComputeDevicePresetMode+0x6c>
		break;
	default:
		DistIdx = 2;
	}

	switch (PresetMode) {
 8003dbc:	3801      	subs	r0, #1
 8003dbe:	2808      	cmp	r0, #8
 8003dc0:	d836      	bhi.n	8003e30 <ComputeDevicePresetMode+0xc8>
 8003dc2:	e8df f000 	tbb	[pc, r0]
 8003dc6:	1811      	.short	0x1811
 8003dc8:	3535091f 	.word	0x3535091f
 8003dcc:	262d      	.short	0x262d
 8003dce:	31          	.byte	0x31
 8003dcf:	00          	.byte	0x00
	switch (DistanceMode) {
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e7f3      	b.n	8003dbc <ComputeDevicePresetMode+0x54>
		DistIdx = 2;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e7f1      	b.n	8003dbc <ComputeDevicePresetMode+0x54>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8003dd8:	3318      	adds	r3, #24
 8003dda:	446b      	add	r3, sp
 8003ddc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8003de0:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003de2:	2000      	movs	r0, #0

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
	}

	return Status;
}
 8003de4:	b006      	add	sp, #24
 8003de6:	4770      	bx	lr
		*pDevicePresetMode = RangingModes[DistIdx];
 8003de8:	3318      	adds	r3, #24
 8003dea:	446b      	add	r3, sp
 8003dec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003df0:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003df2:	2000      	movs	r0, #0
		break;
 8003df4:	e7f6      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
		*pDevicePresetMode = ScanningModes[DistIdx];
 8003df6:	3318      	adds	r3, #24
 8003df8:	446b      	add	r3, sp
 8003dfa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003dfe:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e00:	2000      	movs	r0, #0
		break;
 8003e02:	e7ef      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
		*pDevicePresetMode = TimedModes[DistIdx];
 8003e04:	3318      	adds	r3, #24
 8003e06:	446b      	add	r3, sp
 8003e08:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003e0c:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e0e:	2000      	movs	r0, #0
		break;
 8003e10:	e7e8      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8003e12:	3318      	adds	r3, #24
 8003e14:	446b      	add	r3, sp
 8003e16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003e1a:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e1c:	2000      	movs	r0, #0
		break;
 8003e1e:	e7e1      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8003e20:	2311      	movs	r3, #17
 8003e22:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e24:	2000      	movs	r0, #0
		break;
 8003e26:	e7dd      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
		*pDevicePresetMode =
 8003e28:	2327      	movs	r3, #39	@ 0x27
 8003e2a:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e2c:	2000      	movs	r0, #0
		break;
 8003e2e:	e7d9      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
	switch (PresetMode) {
 8003e30:	f06f 0007 	mvn.w	r0, #7
 8003e34:	e7d6      	b.n	8003de4 <ComputeDevicePresetMode+0x7c>
 8003e36:	bf00      	nop
 8003e38:	0800ee08 	.word	0x0800ee08
 8003e3c:	0800ee0c 	.word	0x0800ee0c
 8003e40:	0800ee10 	.word	0x0800ee10
 8003e44:	0800ee14 	.word	0x0800ee14
 8003e48:	0800ee18 	.word	0x0800ee18

08003e4c <GenNewPresetMode>:
	uint16_t HRLI = 600;
	uint16_t HRLH = 700;
	uint16_t MRLI = 1400;
	uint16_t MRLH = 1500;

	switch (InternalDistanceMode) {
 8003e4c:	2901      	cmp	r1, #1
 8003e4e:	d007      	beq.n	8003e60 <GenNewPresetMode+0x14>
 8003e50:	2902      	cmp	r1, #2
 8003e52:	d012      	beq.n	8003e7a <GenNewPresetMode+0x2e>
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
	default:

		if (RefRange < HRLI)
 8003e54:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 8003e58:	da1c      	bge.n	8003e94 <GenNewPresetMode+0x48>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	7013      	strb	r3, [r2, #0]
 8003e5e:	4770      	bx	lr
		if (RefRange > MRLH)
 8003e60:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003e64:	4298      	cmp	r0, r3
 8003e66:	dd02      	ble.n	8003e6e <GenNewPresetMode+0x22>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	7013      	strb	r3, [r2, #0]
 8003e6c:	4770      	bx	lr
		else if (RefRange > HRLH)
 8003e6e:	f5b0 7f2f 	cmp.w	r0, #700	@ 0x2bc
 8003e72:	dd14      	ble.n	8003e9e <GenNewPresetMode+0x52>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003e74:	2302      	movs	r3, #2
 8003e76:	7013      	strb	r3, [r2, #0]
 8003e78:	4770      	bx	lr
		if (RefRange > MRLH)
 8003e7a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	dd02      	ble.n	8003e88 <GenNewPresetMode+0x3c>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003e82:	2303      	movs	r3, #3
 8003e84:	7013      	strb	r3, [r2, #0]
 8003e86:	4770      	bx	lr
		else if (RefRange < HRLI)
 8003e88:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 8003e8c:	da07      	bge.n	8003e9e <GenNewPresetMode+0x52>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	7013      	strb	r3, [r2, #0]
 8003e92:	4770      	bx	lr
		else if (RefRange < MRLI)
 8003e94:	f5b0 6faf 	cmp.w	r0, #1400	@ 0x578
 8003e98:	da01      	bge.n	8003e9e <GenNewPresetMode+0x52>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	7013      	strb	r3, [r2, #0]
		break;
	}
}
 8003e9e:	4770      	bx	lr

08003ea0 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	4684      	mov	ip, r0
 8003ea4:	468e      	mov	lr, r1
 8003ea6:	4610      	mov	r0, r2
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8003ea8:	7dcc      	ldrb	r4, [r1, #23]
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8003eaa:	4915      	ldr	r1, [pc, #84]	@ (8003f00 <CheckAndChangeDistanceMode+0x60>)
 8003eac:	690a      	ldr	r2, [r1, #16]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	int32_t  tmpint32;


	switch (RangeStatus) {
 8003eae:	2c0c      	cmp	r4, #12
 8003eb0:	d80c      	bhi.n	8003ecc <CheckAndChangeDistanceMode+0x2c>
 8003eb2:	2c0a      	cmp	r4, #10
 8003eb4:	d20c      	bcs.n	8003ed0 <CheckAndChangeDistanceMode+0x30>
 8003eb6:	1fa1      	subs	r1, r4, #6
 8003eb8:	b2c9      	uxtb	r1, r1
 8003eba:	2901      	cmp	r1, #1
 8003ebc:	d908      	bls.n	8003ed0 <CheckAndChangeDistanceMode+0x30>

		break;
	}

	DmaxValid = 1;
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8003ebe:	f8dc 14c8 	ldr.w	r1, [ip, #1224]	@ 0x4c8
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8003ec2:	428a      	cmp	r2, r1
 8003ec4:	dc05      	bgt.n	8003ed2 <CheckAndChangeDistanceMode+0x32>
 8003ec6:	b178      	cbz	r0, 8003ee8 <CheckAndChangeDistanceMode+0x48>
	DmaxValid = 1;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	e003      	b.n	8003ed4 <CheckAndChangeDistanceMode+0x34>
	switch (RangeStatus) {
 8003ecc:	2cff      	cmp	r4, #255	@ 0xff
 8003ece:	d1f6      	bne.n	8003ebe <CheckAndChangeDistanceMode+0x1e>
			GenNewPresetMode(Ambient100DmaxMm,
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
	}
}
 8003ed0:	bd10      	pop	{r4, pc}
		DmaxValid = 0;
 8003ed2:	2200      	movs	r2, #0
	DistanceMode = VL53L1DevDataGet(Dev,
 8003ed4:	f50c 4cc0 	add.w	ip, ip, #24576	@ 0x6000
 8003ed8:	f89c 1f56 	ldrb.w	r1, [ip, #3926]	@ 0xf56
	*pNewDistanceMode = DistanceMode;
 8003edc:	7019      	strb	r1, [r3, #0]
	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003ede:	b12c      	cbz	r4, 8003eec <CheckAndChangeDistanceMode+0x4c>
		if (DmaxValid)
 8003ee0:	b952      	cbnz	r2, 8003ef8 <CheckAndChangeDistanceMode+0x58>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e7f3      	b.n	8003ed0 <CheckAndChangeDistanceMode+0x30>
		DmaxValid = 0;
 8003ee8:	2200      	movs	r2, #0
 8003eea:	e7f3      	b.n	8003ed4 <CheckAndChangeDistanceMode+0x34>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8003eec:	461a      	mov	r2, r3
 8003eee:	f9be 0014 	ldrsh.w	r0, [lr, #20]
 8003ef2:	f7ff ffab 	bl	8003e4c <GenNewPresetMode>
 8003ef6:	e7eb      	b.n	8003ed0 <CheckAndChangeDistanceMode+0x30>
			GenNewPresetMode(Ambient100DmaxMm,
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f7ff ffa7 	bl	8003e4c <GenNewPresetMode>
 8003efe:	e7e7      	b.n	8003ed0 <CheckAndChangeDistanceMode+0x30>
 8003f00:	20000014 	.word	0x20000014

08003f04 <ComputeRQL>:
	FixPoint1616_t LRAP = 6554;
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8003f04:	b3a0      	cbz	r0, 8003f70 <ComputeRQL+0x6c>
		returnvalue = 0;
	else if (((presults_data->max_range_mm -
 8003f06:	f9b2 3048 	ldrsh.w	r3, [r2, #72]	@ 0x48
			presults_data->min_range_mm) >= T_Wide) ||
 8003f0a:	f9b2 0044 	ldrsh.w	r0, [r2, #68]	@ 0x44
	else if (((presults_data->max_range_mm -
 8003f0e:	1a1b      	subs	r3, r3, r0
 8003f10:	2b95      	cmp	r3, #149	@ 0x95
 8003f12:	dc28      	bgt.n	8003f66 <ComputeRQL+0x62>
			presults_data->min_range_mm) >= T_Wide) ||
 8003f14:	2907      	cmp	r1, #7
 8003f16:	d028      	beq.n	8003f6a <ComputeRQL+0x66>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
	else {
		if (presults_data->median_range_mm < SRL)
 8003f18:	f9b2 3046 	ldrsh.w	r3, [r2, #70]	@ 0x46
 8003f1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003f20:	db07      	blt.n	8003f32 <ComputeRQL+0x2e>
			RAS = SRAS * 65536;
		else
			RAS = LRAP * presults_data->median_range_mm;
 8003f22:	f641 119a 	movw	r1, #6554	@ 0x199a
 8003f26:	fb01 f303 	mul.w	r3, r1, r3


		if (RAS != 0) {
 8003f2a:	b923      	cbnz	r3, 8003f36 <ComputeRQL+0x32>
			if (partial <= GI)
				SRQL = GI - partial;
			else
				SRQL = 50 * 65536;
		} else
			SRQL = 100 * 65536;
 8003f2c:	f44f 00c8 	mov.w	r0, #6553600	@ 0x640000
 8003f30:	e00e      	b.n	8003f50 <ComputeRQL+0x4c>
			RAS = SRAS * 65536;
 8003f32:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
			partial = (GGm * presults_data->VL53L1_p_005);
 8003f36:	8f91      	ldrh	r1, [r2, #60]	@ 0x3c
			partial = partial + (RAS >> 1);
 8003f38:	085a      	lsrs	r2, r3, #1
 8003f3a:	480e      	ldr	r0, [pc, #56]	@ (8003f74 <ComputeRQL+0x70>)
 8003f3c:	fb00 2201 	mla	r2, r0, r1, r2
			partial = partial / RAS;
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
			partial = partial * 65536;
 8003f44:	0419      	lsls	r1, r3, #16
			if (partial <= GI)
 8003f46:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <ComputeRQL+0x74>)
 8003f48:	ebb2 4f03 	cmp.w	r2, r3, lsl #16
 8003f4c:	d308      	bcc.n	8003f60 <ComputeRQL+0x5c>
				SRQL = GI - partial;
 8003f4e:	1a50      	subs	r0, r2, r1

		finalvalue = (uint8_t)(SRQL >> 16);
 8003f50:	f3c0 4007 	ubfx	r0, r0, #16, #8
		returnvalue = MAX(50, MIN(100, finalvalue));
 8003f54:	2832      	cmp	r0, #50	@ 0x32
 8003f56:	d90a      	bls.n	8003f6e <ComputeRQL+0x6a>
 8003f58:	2864      	cmp	r0, #100	@ 0x64
 8003f5a:	bf28      	it	cs
 8003f5c:	2064      	movcs	r0, #100	@ 0x64
 8003f5e:	4770      	bx	lr
				SRQL = 50 * 65536;
 8003f60:	f44f 1048 	mov.w	r0, #3276800	@ 0x320000
 8003f64:	e7f4      	b.n	8003f50 <ComputeRQL+0x4c>
		returnvalue = 50;
 8003f66:	2032      	movs	r0, #50	@ 0x32
 8003f68:	4770      	bx	lr
 8003f6a:	2032      	movs	r0, #50	@ 0x32
 8003f6c:	4770      	bx	lr
		returnvalue = MAX(50, MIN(100, finalvalue));
 8003f6e:	2032      	movs	r0, #50	@ 0x32
	}

	return returnvalue;
}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	0030cccd 	.word	0x0030cccd
 8003f78:	0075b333 	.word	0x0075b333

08003f7c <ConvertStatusLite>:

static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003f7c:	1f03      	subs	r3, r0, #4
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d817      	bhi.n	8003fb2 <ConvertStatusLite+0x36>
 8003f82:	e8df f003 	tbb	[pc, r3]
 8003f86:	0a0c      	.short	0x0a0c
 8003f88:	1412190e 	.word	0x1412190e
 8003f8c:	16101616 	.word	0x16101616
 8003f90:	16161616 	.word	0x16161616
 8003f94:	1808      	.short	0x1808
 8003f96:	200a      	movs	r0, #10
 8003f98:	4770      	bx	lr
		break;
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003f9a:	2004      	movs	r0, #4
		break;
 8003f9c:	4770      	bx	lr
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8003f9e:	2002      	movs	r0, #2
		break;
 8003fa0:	4770      	bx	lr
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003fa2:	2001      	movs	r0, #1
		break;
 8003fa4:	4770      	bx	lr
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8003fa6:	2009      	movs	r0, #9
		break;
 8003fa8:	4770      	bx	lr
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8003faa:	2003      	movs	r0, #3
		break;
 8003fac:	4770      	bx	lr
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003fae:	2000      	movs	r0, #0
		break;
 8003fb0:	4770      	bx	lr
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003fb2:	20ff      	movs	r0, #255	@ 0xff
 8003fb4:	4770      	bx	lr
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003fb6:	2006      	movs	r0, #6
	}

	return RangeStatus;
}
 8003fb8:	4770      	bx	lr

08003fba <ConvertStatusHisto>:

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003fba:	1f43      	subs	r3, r0, #5
 8003fbc:	2b12      	cmp	r3, #18
 8003fbe:	d817      	bhi.n	8003ff0 <ConvertStatusHisto+0x36>
 8003fc0:	e8df f003 	tbb	[pc, r3]
 8003fc4:	1619180a 	.word	0x1619180a
 8003fc8:	16161614 	.word	0x16161614
 8003fcc:	16161616 	.word	0x16161616
 8003fd0:	100c1616 	.word	0x100c1616
 8003fd4:	1216      	.short	0x1216
 8003fd6:	0e          	.byte	0x0e
 8003fd7:	00          	.byte	0x00
 8003fd8:	2004      	movs	r0, #4
 8003fda:	4770      	bx	lr
		break;
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003fdc:	2006      	movs	r0, #6
		break;
 8003fde:	4770      	bx	lr
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
		break;
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003fe0:	200c      	movs	r0, #12
		break;
 8003fe2:	4770      	bx	lr
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003fe4:	2007      	movs	r0, #7
		break;
 8003fe6:	4770      	bx	lr
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8003fe8:	200b      	movs	r0, #11
		break;
 8003fea:	4770      	bx	lr
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003fec:	2000      	movs	r0, #0
		break;
 8003fee:	4770      	bx	lr
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003ff0:	20ff      	movs	r0, #255	@ 0xff
 8003ff2:	4770      	bx	lr
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003ff4:	2001      	movs	r0, #1
	}

	return RangeStatus;
}
 8003ff6:	4770      	bx	lr

08003ff8 <SetPresetMode>:
{
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	460d      	mov	r5, r1
 8004000:	4611      	mov	r1, r2
 8004002:	461e      	mov	r6, r3
	uint16_t dss_config__target_total_rate_mcps = 0;
 8004004:	2000      	movs	r0, #0
 8004006:	f8ad 001c 	strh.w	r0, [sp, #28]
	uint32_t phasecal_config_timeout_us = 0;
 800400a:	9006      	str	r0, [sp, #24]
	uint32_t mm_config_timeout_us = 0;
 800400c:	9005      	str	r0, [sp, #20]
	uint32_t lld_range_config_timeout_us = 0;
 800400e:	9004      	str	r0, [sp, #16]
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004010:	2d03      	cmp	r5, #3
 8004012:	d019      	beq.n	8004048 <SetPresetMode+0x50>
 8004014:	2d08      	cmp	r5, #8
 8004016:	d015      	beq.n	8004044 <SetPresetMode+0x4c>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004018:	2720      	movs	r7, #32
	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800401a:	f10d 021f 	add.w	r2, sp, #31
 800401e:	4628      	mov	r0, r5
 8004020:	f7ff fea2 	bl	8003d68 <ComputeDevicePresetMode>
	if (Status == VL53L1_ERROR_NONE)
 8004024:	4602      	mov	r2, r0
 8004026:	b188      	cbz	r0, 800404c <SetPresetMode+0x54>
	if (Status == VL53L1_ERROR_NONE)
 8004028:	b922      	cbnz	r2, 8004034 <SetPresetMode+0x3c>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800402a:	76e7      	strb	r7, [r4, #27]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800402c:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 8004030:	f883 5f54 	strb.w	r5, [r3, #3924]	@ 0xf54
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8004034:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 8004038:	2301      	movs	r3, #1
 800403a:	f884 3f55 	strb.w	r3, [r4, #3925]	@ 0xf55
}
 800403e:	4610      	mov	r0, r2
 8004040:	b009      	add	sp, #36	@ 0x24
 8004042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8004044:	2740      	movs	r7, #64	@ 0x40
 8004046:	e7e8      	b.n	800401a <SetPresetMode+0x22>
 8004048:	2740      	movs	r7, #64	@ 0x40
 800404a:	e7e6      	b.n	800401a <SetPresetMode+0x22>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800404c:	ab04      	add	r3, sp, #16
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	ab05      	add	r3, sp, #20
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	ab06      	add	r3, sp, #24
 8004056:	aa07      	add	r2, sp, #28
 8004058:	f89d 101f 	ldrb.w	r1, [sp, #31]
 800405c:	4620      	mov	r0, r4
 800405e:	f001 fb88 	bl	8005772 <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 8004062:	4602      	mov	r2, r0
 8004064:	2800      	cmp	r0, #0
 8004066:	d1e5      	bne.n	8004034 <SetPresetMode+0x3c>
		Status = VL53L1_set_preset_mode(
 8004068:	9602      	str	r6, [sp, #8]
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	9b05      	ldr	r3, [sp, #20]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	9b06      	ldr	r3, [sp, #24]
 8004074:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004078:	f89d 101f 	ldrb.w	r1, [sp, #31]
 800407c:	4620      	mov	r0, r4
 800407e:	f001 fc58 	bl	8005932 <VL53L1_set_preset_mode>
 8004082:	4602      	mov	r2, r0
 8004084:	e7d0      	b.n	8004028 <SetPresetMode+0x30>

08004086 <SetLimitValue>:
{
 8004086:	b508      	push	{r3, lr}
	switch (LimitCheckId) {
 8004088:	b121      	cbz	r1, 8004094 <SetLimitValue+0xe>
 800408a:	2901      	cmp	r1, #1
 800408c:	d008      	beq.n	80040a0 <SetLimitValue+0x1a>
 800408e:	f06f 0003 	mvn.w	r0, #3
}
 8004092:	bd08      	pop	{r3, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004094:	f3c2 318f 	ubfx	r1, r2, #14, #16
 8004098:	f002 f802 	bl	80060a0 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800409c:	2000      	movs	r0, #0
		break;
 800409e:	e7f8      	b.n	8004092 <SetLimitValue+0xc>
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80040a0:	f3c2 214f 	ubfx	r1, r2, #9, #16
 80040a4:	f002 f805 	bl	80060b2 <VL53L1_set_lite_min_count_rate>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040a8:	2000      	movs	r0, #0
		break;
 80040aa:	e7f2      	b.n	8004092 <SetLimitValue+0xc>

080040ac <VL53L1_SetDeviceAddress>:
{
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 80040b0:	084c      	lsrs	r4, r1, #1
 80040b2:	4622      	mov	r2, r4
 80040b4:	2101      	movs	r1, #1
 80040b6:	f009 f933 	bl	800d320 <VL53L1_WrByte>
	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80040ba:	f885 4338 	strb.w	r4, [r5, #824]	@ 0x338
}
 80040be:	bd38      	pop	{r3, r4, r5, pc}

080040c0 <VL53L1_WaitDeviceBooted>:
{
 80040c0:	b508      	push	{r3, lr}
	Status = VL53L1_poll_for_boot_completion(Dev,
 80040c2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80040c6:	f00a f825 	bl	800e114 <VL53L1_poll_for_boot_completion>
}
 80040ca:	bd08      	pop	{r3, pc}

080040cc <VL53L1_SetDistanceMode>:
{
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	b09f      	sub	sp, #124	@ 0x7c
 80040d0:	4604      	mov	r4, r0
 80040d2:	460d      	mov	r5, r1
	uint32_t TimingBudget = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	931d      	str	r3, [sp, #116]	@ 0x74
	uint32_t MmTimeoutUs = 0;
 80040d8:	931c      	str	r3, [sp, #112]	@ 0x70
	uint32_t PhaseCalTimeoutUs = 0;
 80040da:	931b      	str	r3, [sp, #108]	@ 0x6c
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80040dc:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 80040e0:	f893 6f54 	ldrb.w	r6, [r3, #3924]	@ 0xf54
	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 80040e4:	2e09      	cmp	r6, #9
 80040e6:	d00b      	beq.n	8004100 <VL53L1_SetDistanceMode+0x34>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80040e8:	1e4b      	subs	r3, r1, #1
 80040ea:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d82f      	bhi.n	8004150 <VL53L1_SetDistanceMode+0x84>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 80040f0:	4669      	mov	r1, sp
 80040f2:	4620      	mov	r0, r4
 80040f4:	f001 fb33 	bl	800575e <VL53L1_get_zone_config>
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80040f8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
	if (Status == VL53L1_ERROR_NONE)
 80040fa:	b130      	cbz	r0, 800410a <VL53L1_SetDistanceMode+0x3e>
}
 80040fc:	b01f      	add	sp, #124	@ 0x7c
 80040fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8004100:	2901      	cmp	r1, #1
 8004102:	d0f5      	beq.n	80040f0 <VL53L1_SetDistanceMode+0x24>
		return VL53L1_ERROR_INVALID_PARAMS;
 8004104:	f06f 0003 	mvn.w	r0, #3
 8004108:	e7f8      	b.n	80040fc <VL53L1_SetDistanceMode+0x30>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800410a:	ab1d      	add	r3, sp, #116	@ 0x74
 800410c:	aa1c      	add	r2, sp, #112	@ 0x70
 800410e:	a91b      	add	r1, sp, #108	@ 0x6c
 8004110:	4620      	mov	r0, r4
 8004112:	f001 f9b9 	bl	8005488 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8004116:	2800      	cmp	r0, #0
 8004118:	d1f0      	bne.n	80040fc <VL53L1_SetDistanceMode+0x30>
		Status = SetPresetMode(Dev,
 800411a:	463b      	mov	r3, r7
 800411c:	462a      	mov	r2, r5
 800411e:	4631      	mov	r1, r6
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff ff69 	bl	8003ff8 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8004126:	2800      	cmp	r0, #0
 8004128:	d1e8      	bne.n	80040fc <VL53L1_SetDistanceMode+0x30>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800412a:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800412e:	f883 5f56 	strb.w	r5, [r3, #3926]	@ 0xf56
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004132:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004134:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004136:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8004138:	4620      	mov	r0, r4
 800413a:	f001 f989 	bl	8005450 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 800413e:	2800      	cmp	r0, #0
 8004140:	d1dc      	bne.n	80040fc <VL53L1_SetDistanceMode+0x30>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004142:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004144:	62a3      	str	r3, [r4, #40]	@ 0x28
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8004146:	4669      	mov	r1, sp
 8004148:	4620      	mov	r0, r4
 800414a:	f001 fad7 	bl	80056fc <VL53L1_set_zone_config>
 800414e:	e7d5      	b.n	80040fc <VL53L1_SetDistanceMode+0x30>
		return VL53L1_ERROR_INVALID_PARAMS;
 8004150:	f06f 0003 	mvn.w	r0, #3
 8004154:	e7d2      	b.n	80040fc <VL53L1_SetDistanceMode+0x30>
	...

08004158 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
{
 8004158:	b508      	push	{r3, lr}
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	4a03      	ldr	r2, [pc, #12]	@ (800416c <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x14>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004162:	eb01 1193 	add.w	r1, r1, r3, lsr #6
 8004166:	f001 f955 	bl	8005414 <VL53L1_set_inter_measurement_period_ms>
}
 800416a:	bd08      	pop	{r3, pc}
 800416c:	10624dd3 	.word	0x10624dd3

08004170 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 8004170:	b510      	push	{r4, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004176:	a901      	add	r1, sp, #4
 8004178:	f001 f95b 	bl	8005432 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800417c:	9b01      	ldr	r3, [sp, #4]
 800417e:	019a      	lsls	r2, r3, #6
 8004180:	4904      	ldr	r1, [pc, #16]	@ (8004194 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x24>)
 8004182:	fba1 1202 	umull	r1, r2, r1, r2
 8004186:	eba3 1392 	sub.w	r3, r3, r2, lsr #6
 800418a:	9301      	str	r3, [sp, #4]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800418c:	6023      	str	r3, [r4, #0]
}
 800418e:	b002      	add	sp, #8
 8004190:	bd10      	pop	{r4, pc}
 8004192:	bf00      	nop
 8004194:	10624dd3 	.word	0x10624dd3

08004198 <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004198:	2901      	cmp	r1, #1
 800419a:	d819      	bhi.n	80041d0 <VL53L1_SetLimitCheckEnable+0x38>
{
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4605      	mov	r5, r0
 80041a0:	460c      	mov	r4, r1
 80041a2:	4616      	mov	r6, r2
		if (LimitCheckEnable == 0)
 80041a4:	b132      	cbz	r2, 80041b4 <VL53L1_SetLimitCheckEnable+0x1c>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80041a6:	f501 53de 	add.w	r3, r1, #7104	@ 0x1bc0
 80041aa:	3316      	adds	r3, #22
 80041ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	e000      	b.n	80041b6 <VL53L1_SetLimitCheckEnable+0x1e>
			TempFix1616 = 0;
 80041b4:	2200      	movs	r2, #0
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80041b6:	4621      	mov	r1, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7ff ff64 	bl	8004086 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 80041be:	b930      	cbnz	r0, 80041ce <VL53L1_SetLimitCheckEnable+0x36>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041c0:	3e00      	subs	r6, #0
 80041c2:	bf18      	it	ne
 80041c4:	2601      	movne	r6, #1
 80041c6:	4425      	add	r5, r4
 80041c8:	f646 735c 	movw	r3, #28508	@ 0x6f5c
 80041cc:	54ee      	strb	r6, [r5, r3]
}
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80041d0:	f06f 0003 	mvn.w	r0, #3
}
 80041d4:	4770      	bx	lr

080041d6 <VL53L1_DataInit>:
{
 80041d6:	b570      	push	{r4, r5, r6, lr}
 80041d8:	4606      	mov	r6, r0
		Status = VL53L1_data_init(Dev, 1);
 80041da:	2101      	movs	r1, #1
 80041dc:	f001 fe62 	bl	8005ea4 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 80041e0:	4605      	mov	r5, r0
 80041e2:	b170      	cbz	r0, 8004202 <VL53L1_DataInit+0x2c>
{
 80041e4:	2400      	movs	r4, #0
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041e6:	2c01      	cmp	r4, #1
 80041e8:	d81a      	bhi.n	8004220 <VL53L1_DataInit+0x4a>
		if (Status == VL53L1_ERROR_NONE)
 80041ea:	b9cd      	cbnz	r5, 8004220 <VL53L1_DataInit+0x4a>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80041ec:	2201      	movs	r2, #1
 80041ee:	4621      	mov	r1, r4
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff ffd1 	bl	8004198 <VL53L1_SetLimitCheckEnable>
 80041f6:	ea45 0300 	orr.w	r3, r5, r0
 80041fa:	b25d      	sxtb	r5, r3
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041fc:	3401      	adds	r4, #1
 80041fe:	b2e4      	uxtb	r4, r4
 8004200:	e7f1      	b.n	80041e6 <VL53L1_DataInit+0x10>
		memset(&pdev->per_vcsel_cal_data, 0,
 8004202:	f106 0018 	add.w	r0, r6, #24
 8004206:	f641 5178 	movw	r1, #7544	@ 0x1d78
 800420a:	1842      	adds	r2, r0, r1
 800420c:	2300      	movs	r3, #0
 800420e:	5043      	str	r3, [r0, r1]
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	6093      	str	r3, [r2, #8]
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8004214:	f506 43c0 	add.w	r3, r6, #24576	@ 0x6000
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2f50 	strb.w	r2, [r3, #3920]	@ 0xf50
 800421e:	e7e1      	b.n	80041e4 <VL53L1_DataInit+0xe>
	if (Status == VL53L1_ERROR_NONE) {
 8004220:	b10d      	cbz	r5, 8004226 <VL53L1_DataInit+0x50>
}
 8004222:	4628      	mov	r0, r5
 8004224:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_set_dmax_mode(Dev,
 8004226:	2102      	movs	r1, #2
 8004228:	4630      	mov	r0, r6
 800422a:	f002 f9d0 	bl	80065ce <VL53L1_set_dmax_mode>
 800422e:	4605      	mov	r5, r0
 8004230:	e7f7      	b.n	8004222 <VL53L1_DataInit+0x4c>

08004232 <VL53L1_GetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004232:	2901      	cmp	r1, #1
 8004234:	d806      	bhi.n	8004244 <VL53L1_GetLimitCheckEnable+0x12>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004236:	4408      	add	r0, r1
 8004238:	f646 735c 	movw	r3, #28508	@ 0x6f5c
 800423c:	5cc3      	ldrb	r3, [r0, r3]
		*pLimitCheckEnable = Temp8;
 800423e:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004240:	2000      	movs	r0, #0
}
 8004242:	4770      	bx	lr
		*pLimitCheckEnable = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	7013      	strb	r3, [r2, #0]
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004248:	f06f 0003 	mvn.w	r0, #3
 800424c:	4770      	bx	lr

0800424e <VL53L1_GetLimitCheckValue>:
{
 800424e:	b570      	push	{r4, r5, r6, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	4604      	mov	r4, r0
 8004254:	4615      	mov	r5, r2
	switch (LimitCheckId) {
 8004256:	460e      	mov	r6, r1
 8004258:	b129      	cbz	r1, 8004266 <VL53L1_GetLimitCheckValue+0x18>
 800425a:	2901      	cmp	r1, #1
 800425c:	d019      	beq.n	8004292 <VL53L1_GetLimitCheckValue+0x44>
 800425e:	f06f 0003 	mvn.w	r0, #3
}
 8004262:	b002      	add	sp, #8
 8004264:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004266:	a901      	add	r1, sp, #4
 8004268:	f001 ff15 	bl	8006096 <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800426c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004270:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 8004272:	2800      	cmp	r0, #0
 8004274:	d1f5      	bne.n	8004262 <VL53L1_GetLimitCheckValue+0x14>
		if (TempFix1616 == 0) {
 8004276:	b9a3      	cbnz	r3, 80042a2 <VL53L1_GetLimitCheckValue+0x54>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8004278:	f506 53de 	add.w	r3, r6, #7104	@ 0x1bc0
 800427c:	3316      	adds	r3, #22
 800427e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004282:	689b      	ldr	r3, [r3, #8]
			*pLimitCheckValue = TempFix1616;
 8004284:	602b      	str	r3, [r5, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004286:	4426      	add	r6, r4
 8004288:	f646 735c 	movw	r3, #28508	@ 0x6f5c
 800428c:	2200      	movs	r2, #0
 800428e:	54f2      	strb	r2, [r6, r3]
 8004290:	e7e7      	b.n	8004262 <VL53L1_GetLimitCheckValue+0x14>
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004292:	f10d 0106 	add.w	r1, sp, #6
 8004296:	f001 ff07 	bl	80060a8 <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800429a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800429e:	025b      	lsls	r3, r3, #9
		break;
 80042a0:	e7e7      	b.n	8004272 <VL53L1_GetLimitCheckValue+0x24>
			*pLimitCheckValue = TempFix1616;
 80042a2:	602b      	str	r3, [r5, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80042a4:	f506 52de 	add.w	r2, r6, #7104	@ 0x1bc0
 80042a8:	3216      	adds	r2, #22
 80042aa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80042ae:	6093      	str	r3, [r2, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80042b0:	4434      	add	r4, r6
 80042b2:	f646 735c 	movw	r3, #28508	@ 0x6f5c
 80042b6:	2201      	movs	r2, #1
 80042b8:	54e2      	strb	r2, [r4, r3]
 80042ba:	e7d2      	b.n	8004262 <VL53L1_GetLimitCheckValue+0x14>

080042bc <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 80042bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c0:	b089      	sub	sp, #36	@ 0x24
 80042c2:	4605      	mov	r5, r0
 80042c4:	4689      	mov	r9, r1
 80042c6:	9201      	str	r2, [sp, #4]
 80042c8:	461f      	mov	r7, r3
 80042ca:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80042cc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
			&(pdev->tuning_parms);
	uint8_t roi = pdev->ll_state.rd_zone_id;
 80042ce:	f890 a051 	ldrb.w	sl, [r0, #81]	@ 0x51
	uint8_t timing = pdev->hist_data.number_of_ambient_bins / 4;
 80042d2:	f890 842f 	ldrb.w	r8, [r0, #1071]	@ 0x42f
 80042d6:	ea4f 0898 	mov.w	r8, r8, lsr #2
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	9305      	str	r3, [sp, #20]
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;
	uint8_t histo_merge_nb;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80042de:	f896 b04a 	ldrb.w	fp, [r6, #74]	@ 0x4a
 80042e2:	f00b 0b1f 	and.w	fp, fp, #31

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80042e6:	4632      	mov	r2, r6
 80042e8:	4659      	mov	r1, fp
 80042ea:	4648      	mov	r0, r9
 80042ec:	f7ff fe0a 	bl	8003f04 <ComputeRQL>
 80042f0:	7020      	strb	r0, [r4, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80042f2:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 80042f4:	025b      	lsls	r3, r3, #9
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80042f6:	60a3      	str	r3, [r4, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80042f8:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 80042fa:	025b      	lsls	r3, r3, #9
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80042fc:	60e3      	str	r3, [r4, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80042fe:	8fb3      	ldrh	r3, [r6, #60]	@ 0x3c
 8004300:	025b      	lsls	r3, r3, #9
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8004302:	6123      	str	r3, [r4, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8004304:	f9b6 3046 	ldrsh.w	r3, [r6, #70]	@ 0x46
 8004308:	82a3      	strh	r3, [r4, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800430a:	f9b6 3048 	ldrsh.w	r3, [r6, #72]	@ 0x48
 800430e:	8063      	strh	r3, [r4, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8004310:	f9b6 3044 	ldrsh.w	r3, [r6, #68]	@ 0x44
 8004314:	80a3      	strh	r3, [r4, #4]

	pRangeData->RangeFractionalPart = 0;
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	75a3      	strb	r3, [r4, #22]


	switch (device_status) {
 800431c:	2f0d      	cmp	r7, #13
 800431e:	d02b      	beq.n	8004378 <SetTargetData+0xbc>
 8004320:	d904      	bls.n	800432c <SetTargetData+0x70>
 8004322:	2f11      	cmp	r7, #17
 8004324:	d006      	beq.n	8004334 <SetTargetData+0x78>
		break;
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
		break;
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004326:	2300      	movs	r3, #0
 8004328:	75e3      	strb	r3, [r4, #23]
 800432a:	e005      	b.n	8004338 <SetTargetData+0x7c>
	switch (device_status) {
 800432c:	3f01      	subs	r7, #1
 800432e:	b2ff      	uxtb	r7, r7
 8004330:	2f02      	cmp	r7, #2
 8004332:	d8f8      	bhi.n	8004326 <SetTargetData+0x6a>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8004334:	2305      	movs	r3, #5
 8004336:	75e3      	strb	r3, [r4, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004338:	7de3      	ldrb	r3, [r4, #23]
 800433a:	b963      	cbnz	r3, 8004356 <SetTargetData+0x9a>
 800433c:	f1b9 0f00 	cmp.w	r9, #0
 8004340:	d109      	bne.n	8004356 <SetTargetData+0x9a>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8004342:	23ff      	movs	r3, #255	@ 0xff
 8004344:	75e3      	strb	r3, [r4, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	60a3      	str	r3, [r4, #8]
		pRangeData->SigmaMilliMeter = 0;
 800434a:	6123      	str	r3, [r4, #16]
		pRangeData->RangeMilliMeter = 8191;
 800434c:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004350:	82a3      	strh	r3, [r4, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8004352:	8063      	strh	r3, [r4, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8004354:	80a3      	strh	r3, [r4, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8004356:	7de3      	ldrb	r3, [r4, #23]
 8004358:	b9ab      	cbnz	r3, 8004386 <SetTargetData+0xca>
		PresetMode = VL53L1DevDataGet(Dev,
 800435a:	f505 43c0 	add.w	r3, r5, #24576	@ 0x6000
 800435e:	f893 2f54 	ldrb.w	r2, [r3, #3924]	@ 0xf54
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8004362:	1e53      	subs	r3, r2, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d909      	bls.n	800437e <SetTargetData+0xc2>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 800436a:	2a09      	cmp	r2, #9
 800436c:	d007      	beq.n	800437e <SetTargetData+0xc2>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800436e:	4658      	mov	r0, fp
 8004370:	f7ff fe04 	bl	8003f7c <ConvertStatusLite>
			pRangeData->RangeStatus =
 8004374:	75e0      	strb	r0, [r4, #23]
 8004376:	e006      	b.n	8004386 <SetTargetData+0xca>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8004378:	230d      	movs	r3, #13
 800437a:	75e3      	strb	r3, [r4, #23]
		break;
 800437c:	e7dc      	b.n	8004338 <SetTargetData+0x7c>
				ConvertStatusHisto(FilteredRangeStatus);
 800437e:	4658      	mov	r0, fp
 8004380:	f7ff fe1b 	bl	8003fba <ConvertStatusHisto>
			pRangeData->RangeStatus =
 8004384:	75e0      	strb	r0, [r4, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004386:	8fb3      	ldrh	r3, [r6, #60]	@ 0x3c
 8004388:	025b      	lsls	r3, r3, #9
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800438a:	f505 42c0 	add.w	r2, r5, #24576	@ 0x6000
 800438e:	f8c2 3f68 	str.w	r3, [r2, #3944]	@ 0xf68
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004392:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8004394:	025b      	lsls	r3, r3, #9
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004396:	f8c2 3f6c 	str.w	r3, [r2, #3948]	@ 0xf6c
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 800439a:	aa06      	add	r2, sp, #24
 800439c:	2100      	movs	r1, #0
 800439e:	4628      	mov	r0, r5
 80043a0:	f7ff ff55 	bl	800424e <VL53L1_GetLimitCheckValue>

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;

	VL53L1_GetLimitCheckEnable(Dev,
 80043a4:	f10d 021f 	add.w	r2, sp, #31
 80043a8:	2100      	movs	r1, #0
 80043aa:	4628      	mov	r0, r5
 80043ac:	f7ff ff41 	bl	8004232 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80043b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f000 808c 	beq.w	80044d2 <SetTargetData+0x216>
 80043ba:	2200      	movs	r2, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80043bc:	f505 43c0 	add.w	r3, r5, #24576	@ 0x6000
 80043c0:	f883 2f5e 	strb.w	r2, [r3, #3934]	@ 0xf5e
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 80043c4:	aa06      	add	r2, sp, #24
 80043c6:	2101      	movs	r1, #1
 80043c8:	4628      	mov	r0, r5
 80043ca:	f7ff ff40 	bl	800424e <VL53L1_GetLimitCheckValue>

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;

	VL53L1_GetLimitCheckEnable(Dev,
 80043ce:	f10d 021f 	add.w	r2, sp, #31
 80043d2:	2101      	movs	r1, #1
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7ff ff2c 	bl	8004232 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80043da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d07e      	beq.n	80044e0 <SetTargetData+0x224>
 80043e2:	2200      	movs	r2, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80043e4:	f505 43c0 	add.w	r3, r5, #24576	@ 0x6000
 80043e8:	f883 2f5f 	strb.w	r2, [r3, #3935]	@ 0xf5f
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80043ec:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80043f0:	7de3      	ldrb	r3, [r4, #23]
 80043f2:	b90b      	cbnz	r3, 80043f8 <SetTargetData+0x13c>
 80043f4:	2a00      	cmp	r2, #0
 80043f6:	db7a      	blt.n	80044ee <SetTargetData+0x232>
		else
			pRangeData->RangeMilliMeter = 0;
	}


	VL53L1_get_tuning_parm(Dev,
 80043f8:	aa04      	add	r2, sp, #16
 80043fa:	f248 01be 	movw	r1, #32958	@ 0x80be
 80043fe:	4628      	mov	r0, r5
 8004400:	f002 f922 	bl	8006648 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8004404:	9b04      	ldr	r3, [sp, #16]
	if ((iteration > 0) &&
 8004406:	9a01      	ldr	r2, [sp, #4]
 8004408:	b132      	cbz	r2, 8004418 <SetTargetData+0x15c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 800440a:	7de2      	ldrb	r2, [r4, #23]
	if ((iteration > 0) &&
 800440c:	b922      	cbnz	r2, 8004418 <SetTargetData+0x15c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 800440e:	68a2      	ldr	r2, [r4, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004410:	429a      	cmp	r2, r3
 8004412:	d201      	bcs.n	8004418 <SetTargetData+0x15c>
		pRangeData->RangeStatus =
 8004414:	230c      	movs	r3, #12
 8004416:	75e3      	strb	r3, [r4, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;



	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8004418:	aa05      	add	r2, sp, #20
 800441a:	f248 0191 	movw	r1, #32913	@ 0x8091
 800441e:	4628      	mov	r0, r5
 8004420:	f002 f912 	bl	8006648 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = 1 - pdev->hist_data.number_of_ambient_bins / 4;
 8004424:	f895 342f 	ldrb.w	r3, [r5, #1071]	@ 0x42f
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	f1c3 0301 	rsb	r3, r3, #1
 800442e:	b2de      	uxtb	r6, r3
	uwr_status = 0;
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8004430:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
	AddOffset = 0;

	pRangeData->ExtendedRange = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	7623      	strb	r3, [r4, #24]

	if (pRangeData->AmbientRateRtnMegaCps > MAX_AMBIENT)
 8004438:	68e3      	ldr	r3, [r4, #12]
 800443a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800443e:	d901      	bls.n	8004444 <SetTargetData+0x188>
		ExtendedRangeEnabled = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	9305      	str	r3, [sp, #20]


	if ((active_results != 1) ||
 8004444:	f1b9 0f01 	cmp.w	r9, #1
 8004448:	d05b      	beq.n	8004502 <SetTargetData+0x246>
	   (pdev->PreviousRangeActiveResults[roi] != 1))
		ExtendedRangeEnabled = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	9305      	str	r3, [sp, #20]


	Status = VL53L1_compute_nb_frame_in_buffer(Dev,
 800444e:	4643      	mov	r3, r8
 8004450:	4652      	mov	r2, sl
 8004452:	f10d 010f 	add.w	r1, sp, #15
 8004456:	4628      	mov	r0, r5
 8004458:	f006 fbdc 	bl	800ac14 <VL53L1_compute_nb_frame_in_buffer>
		&histo_merge_nb, roi, timing);
	if (histo_merge_nb < 2)
 800445c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d956      	bls.n	8004512 <SetTargetData+0x256>
	{
		ExtendedRangeEnabled = 0;
	}
	Status = VL53L1_compute_nb_frame_in_buffer(Dev,
 8004464:	f1c8 0301 	rsb	r3, r8, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4652      	mov	r2, sl
 800446c:	f10d 010f 	add.w	r1, sp, #15
 8004470:	4628      	mov	r0, r5
 8004472:	f006 fbcf 	bl	800ac14 <VL53L1_compute_nb_frame_in_buffer>
		&histo_merge_nb, roi, 1 - timing);
	if (histo_merge_nb < 2)
 8004476:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d94c      	bls.n	8004518 <SetTargetData+0x25c>
	{
		ExtendedRangeEnabled = 0;
	}


	if ((pRangeData->RangeMaxMilliMeter -
 800447e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	     pRangeData->RangeMinMilliMeter) > MAX_RANGE_DIFF)
 8004482:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
	if ((pRangeData->RangeMaxMilliMeter -
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800448c:	dd05      	ble.n	800449a <SetTargetData+0x1de>
	{
		if (pRangeData->RangeStatus != 0)
 800448e:	7de3      	ldrb	r3, [r4, #23]
 8004490:	b11b      	cbz	r3, 800449a <SetTargetData+0x1de>
		{
			pRangeData->RangeStatus = 255;
 8004492:	23ff      	movs	r3, #255	@ 0xff
 8004494:	75e3      	strb	r3, [r4, #23]
			ExtendedRangeEnabled = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	9305      	str	r3, [sp, #20]
		}
	}

	if (ExtendedRangeEnabled &&
 800449a:	9b05      	ldr	r3, [sp, #20]
 800449c:	b123      	cbz	r3, 80044a8 <SetTargetData+0x1ec>
		(pRangeData->RangeStatus ==
 800449e:	7de3      	ldrb	r3, [r4, #23]
	if (ExtendedRangeEnabled &&
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	d03c      	beq.n	800451e <SetTargetData+0x262>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d03a      	beq.n	800451e <SetTargetData+0x262>
			pRangeData->RangeStatus = 0;
		}

	}

	pdev->PreviousRangeMilliMeter[roi] = RangeMillimeterInit;
 80044a8:	f50a 534b 	add.w	r3, sl, #12992	@ 0x32c0
 80044ac:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80044b0:	839f      	strh	r7, [r3, #28]
	pdev->PreviousRangeStatus[roi] = pRangeData->RangeStatus;
 80044b2:	7de2      	ldrb	r2, [r4, #23]
 80044b4:	4455      	add	r5, sl
 80044b6:	f246 53bc 	movw	r3, #26044	@ 0x65bc
 80044ba:	54ea      	strb	r2, [r5, r3]
	pdev->PreviousExtendedRange[roi] = pRangeData->ExtendedRange;
 80044bc:	7e22      	ldrb	r2, [r4, #24]
 80044be:	f246 53cc 	movw	r3, #26060	@ 0x65cc
 80044c2:	54ea      	strb	r2, [r5, r3]
	pdev->PreviousRangeActiveResults[roi] = active_results;
 80044c4:	f246 53dc 	movw	r3, #26076	@ 0x65dc
 80044c8:	f805 9003 	strb.w	r9, [r5, r3]

	return Status;
}
 80044cc:	b009      	add	sp, #36	@ 0x24
 80044ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80044d2:	f1bb 0f06 	cmp.w	fp, #6
 80044d6:	d001      	beq.n	80044dc <SetTargetData+0x220>
 80044d8:	2200      	movs	r2, #0
 80044da:	e76f      	b.n	80043bc <SetTargetData+0x100>
 80044dc:	2201      	movs	r2, #1
 80044de:	e76d      	b.n	80043bc <SetTargetData+0x100>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80044e0:	f1bb 0f04 	cmp.w	fp, #4
 80044e4:	d001      	beq.n	80044ea <SetTargetData+0x22e>
 80044e6:	2200      	movs	r2, #0
 80044e8:	e77c      	b.n	80043e4 <SetTargetData+0x128>
 80044ea:	2201      	movs	r2, #1
 80044ec:	e77a      	b.n	80043e4 <SetTargetData+0x128>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80044ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004788 <SetTargetData+0x4cc>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	da02      	bge.n	80044fc <SetTargetData+0x240>
			pRangeData->RangeStatus =
 80044f6:	230e      	movs	r3, #14
 80044f8:	75e3      	strb	r3, [r4, #23]
 80044fa:	e77d      	b.n	80043f8 <SetTargetData+0x13c>
			pRangeData->RangeMilliMeter = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	82a3      	strh	r3, [r4, #20]
 8004500:	e77a      	b.n	80043f8 <SetTargetData+0x13c>
	   (pdev->PreviousRangeActiveResults[roi] != 1))
 8004502:	eb05 030a 	add.w	r3, r5, sl
 8004506:	f246 52dc 	movw	r2, #26076	@ 0x65dc
 800450a:	5c9b      	ldrb	r3, [r3, r2]
	if ((active_results != 1) ||
 800450c:	2b01      	cmp	r3, #1
 800450e:	d19c      	bne.n	800444a <SetTargetData+0x18e>
 8004510:	e79d      	b.n	800444e <SetTargetData+0x192>
		ExtendedRangeEnabled = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	e7a5      	b.n	8004464 <SetTargetData+0x1a8>
		ExtendedRangeEnabled = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	9305      	str	r3, [sp, #20]
 800451c:	e7af      	b.n	800447e <SetTargetData+0x1c2>
		&& (pdev->PreviousRangeStatus[roi] ==
 800451e:	eb05 030a 	add.w	r3, r5, sl
 8004522:	f246 51bc 	movw	r1, #26044	@ 0x65bc
 8004526:	5c59      	ldrb	r1, [r3, r1]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8004528:	1f8b      	subs	r3, r1, #6
 800452a:	b2db      	uxtb	r3, r3
		&& (pdev->PreviousRangeStatus[roi] ==
 800452c:	2b01      	cmp	r3, #1
 800452e:	d90a      	bls.n	8004546 <SetTargetData+0x28a>
			VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL ||
 8004530:	2904      	cmp	r1, #4
 8004532:	d008      	beq.n	8004546 <SetTargetData+0x28a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8004534:	2900      	cmp	r1, #0
 8004536:	d1b7      	bne.n	80044a8 <SetTargetData+0x1ec>
			pdev->PreviousExtendedRange[roi] == 1)))
 8004538:	eb05 030a 	add.w	r3, r5, sl
 800453c:	f246 51cc 	movw	r1, #26060	@ 0x65cc
 8004540:	5c5b      	ldrb	r3, [r3, r1]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8004542:	2b01      	cmp	r3, #1
 8004544:	d1b0      	bne.n	80044a8 <SetTargetData+0x1ec>
		if (((pdev->PreviousStreamCount) ==
 8004546:	f505 43c0 	add.w	r3, r5, #24576	@ 0x6000
 800454a:	f893 15ec 	ldrb.w	r1, [r3, #1516]	@ 0x5ec
			(pdev->hist_data.result__stream_count - 1 ))
 800454e:	f895 349f 	ldrb.w	r3, [r5, #1183]	@ 0x49f
 8004552:	f103 3cff 	add.w	ip, r3, #4294967295
		if (((pdev->PreviousStreamCount) ==
 8004556:	4561      	cmp	r1, ip
 8004558:	d002      	beq.n	8004560 <SetTargetData+0x2a4>
			(pdev->hist_data.result__stream_count + 127)))
 800455a:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800455c:	4299      	cmp	r1, r3
 800455e:	d1a3      	bne.n	80044a8 <SetTargetData+0x1ec>
		RangeDiff = pRangeData->RangeMilliMeter -
 8004560:	f8b4 c014 	ldrh.w	ip, [r4, #20]
			pdev->PreviousRangeMilliMeter[roi];
 8004564:	f50a 534b 	add.w	r3, sl, #12992	@ 0x32c0
 8004568:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800456c:	8b9b      	ldrh	r3, [r3, #28]
		RangeDiff = pRangeData->RangeMilliMeter -
 800456e:	ebac 0303 	sub.w	r3, ip, r3
 8004572:	b21b      	sxth	r3, r3
		switch (pdev->preset_mode) {
 8004574:	7e69      	ldrb	r1, [r5, #25]
 8004576:	3918      	subs	r1, #24
 8004578:	2906      	cmp	r1, #6
 800457a:	d895      	bhi.n	80044a8 <SetTargetData+0x1ec>
 800457c:	f20f 0e04 	addw	lr, pc, #4
 8004580:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
 8004584:	08004671 	.word	0x08004671
 8004588:	080044a9 	.word	0x080044a9
 800458c:	080045a1 	.word	0x080045a1
 8004590:	080048a5 	.word	0x080048a5
 8004594:	080044a9 	.word	0x080044a9
 8004598:	080044a9 	.word	0x080044a9
 800459c:	0800478d 	.word	0x0800478d
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80045a0:	f9b5 1206 	ldrsh.w	r1, [r5, #518]	@ 0x206
 80045a4:	4299      	cmp	r1, r3
 80045a6:	da07      	bge.n	80045b8 <SetTargetData+0x2fc>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80045a8:	f9b5 e208 	ldrsh.w	lr, [r5, #520]	@ 0x208
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80045ac:	459e      	cmp	lr, r3
 80045ae:	dd03      	ble.n	80045b8 <SetTargetData+0x2fc>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80045b0:	b916      	cbnz	r6, 80045b8 <SetTargetData+0x2fc>
					AddOffset =
 80045b2:	f9b5 321a 	ldrsh.w	r3, [r5, #538]	@ 0x21a
		if (uwr_status) {
 80045b6:	e02f      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80045b8:	4249      	negs	r1, r1
 80045ba:	428b      	cmp	r3, r1
 80045bc:	da06      	bge.n	80045cc <SetTargetData+0x310>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80045be:	f9b5 1208 	ldrsh.w	r1, [r5, #520]	@ 0x208
 80045c2:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80045c4:	428b      	cmp	r3, r1
 80045c6:	dd01      	ble.n	80045cc <SetTargetData+0x310>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80045c8:	2e01      	cmp	r6, #1
 80045ca:	d015      	beq.n	80045f8 <SetTargetData+0x33c>
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80045cc:	f9b5 120a 	ldrsh.w	r1, [r5, #522]	@ 0x20a
 80045d0:	4299      	cmp	r1, r3
 80045d2:	da05      	bge.n	80045e0 <SetTargetData+0x324>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80045d4:	f9b5 e20c 	ldrsh.w	lr, [r5, #524]	@ 0x20c
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80045d8:	459e      	cmp	lr, r3
 80045da:	dd01      	ble.n	80045e0 <SetTargetData+0x324>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80045dc:	2e01      	cmp	r6, #1
 80045de:	d00e      	beq.n	80045fe <SetTargetData+0x342>
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80045e0:	4249      	negs	r1, r1
 80045e2:	428b      	cmp	r3, r1
 80045e4:	da0e      	bge.n	8004604 <SetTargetData+0x348>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80045e6:	f9b5 120c 	ldrsh.w	r1, [r5, #524]	@ 0x20c
 80045ea:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80045ec:	428b      	cmp	r3, r1
 80045ee:	dd09      	ble.n	8004604 <SetTargetData+0x348>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80045f0:	b946      	cbnz	r6, 8004604 <SetTargetData+0x348>
					AddOffset =
 80045f2:	f9b5 321e 	ldrsh.w	r3, [r5, #542]	@ 0x21e
		if (uwr_status) {
 80045f6:	e00f      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 80045f8:	f9b5 321c 	ldrsh.w	r3, [r5, #540]	@ 0x21c
		if (uwr_status) {
 80045fc:	e00c      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 80045fe:	f9b5 3220 	ldrsh.w	r3, [r5, #544]	@ 0x220
		if (uwr_status) {
 8004602:	e009      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8004604:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8004608:	4299      	cmp	r1, r3
 800460a:	dd14      	ble.n	8004636 <SetTargetData+0x37a>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 800460c:	f9b5 120e 	ldrsh.w	r1, [r5, #526]	@ 0x20e
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8004610:	4299      	cmp	r1, r3
 8004612:	da10      	bge.n	8004636 <SetTargetData+0x37a>
					AddOffset =
 8004614:	f9b5 3222 	ldrsh.w	r3, [r5, #546]	@ 0x222
			pRangeData->RangeMilliMeter += AddOffset;
 8004618:	b29b      	uxth	r3, r3
 800461a:	449c      	add	ip, r3
 800461c:	f8a4 c014 	strh.w	ip, [r4, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8004620:	fa13 f282 	uxtah	r2, r3, r2
 8004624:	80a2      	strh	r2, [r4, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8004626:	8862      	ldrh	r2, [r4, #2]
 8004628:	4413      	add	r3, r2
 800462a:	8063      	strh	r3, [r4, #2]
			pRangeData->ExtendedRange = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	7623      	strb	r3, [r4, #24]
			pRangeData->RangeStatus = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	75e3      	strb	r3, [r4, #23]
 8004634:	e738      	b.n	80044a8 <SetTargetData+0x1ec>
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8004636:	f9b5 1212 	ldrsh.w	r1, [r5, #530]	@ 0x212
 800463a:	4299      	cmp	r1, r3
 800463c:	da05      	bge.n	800464a <SetTargetData+0x38e>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800463e:	f9b5 e214 	ldrsh.w	lr, [r5, #532]	@ 0x214
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8004642:	459e      	cmp	lr, r3
 8004644:	dd01      	ble.n	800464a <SetTargetData+0x38e>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004646:	2e01      	cmp	r6, #1
 8004648:	d00f      	beq.n	800466a <SetTargetData+0x3ae>
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 800464a:	4249      	negs	r1, r1
 800464c:	428b      	cmp	r3, r1
 800464e:	f6bf af2b 	bge.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004652:	f9b5 1214 	ldrsh.w	r1, [r5, #532]	@ 0x214
 8004656:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004658:	428b      	cmp	r3, r1
 800465a:	f77f af25 	ble.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 800465e:	2e00      	cmp	r6, #0
 8004660:	f47f af22 	bne.w	80044a8 <SetTargetData+0x1ec>
					AddOffset =
 8004664:	f9b5 3226 	ldrsh.w	r3, [r5, #550]	@ 0x226
		if (uwr_status) {
 8004668:	e7d6      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 800466a:	f9b5 3228 	ldrsh.w	r3, [r5, #552]	@ 0x228
		if (uwr_status) {
 800466e:	e7d3      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8004670:	f9b5 11d6 	ldrsh.w	r1, [r5, #470]	@ 0x1d6
 8004674:	4299      	cmp	r1, r3
 8004676:	da05      	bge.n	8004684 <SetTargetData+0x3c8>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004678:	f9b5 e1d8 	ldrsh.w	lr, [r5, #472]	@ 0x1d8
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800467c:	459e      	cmp	lr, r3
 800467e:	dd01      	ble.n	8004684 <SetTargetData+0x3c8>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004680:	2e01      	cmp	r6, #1
 8004682:	d00b      	beq.n	800469c <SetTargetData+0x3e0>
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004684:	4249      	negs	r1, r1
 8004686:	428b      	cmp	r3, r1
 8004688:	da0b      	bge.n	80046a2 <SetTargetData+0x3e6>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800468a:	f9b5 11d8 	ldrsh.w	r1, [r5, #472]	@ 0x1d8
 800468e:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004690:	428b      	cmp	r3, r1
 8004692:	dd06      	ble.n	80046a2 <SetTargetData+0x3e6>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004694:	b92e      	cbnz	r6, 80046a2 <SetTargetData+0x3e6>
					AddOffset =
 8004696:	f9b5 31ee 	ldrsh.w	r3, [r5, #494]	@ 0x1ee
		if (uwr_status) {
 800469a:	e7bd      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 800469c:	f9b5 31f0 	ldrsh.w	r3, [r5, #496]	@ 0x1f0
		if (uwr_status) {
 80046a0:	e7ba      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80046a2:	f9b5 11da 	ldrsh.w	r1, [r5, #474]	@ 0x1da
 80046a6:	4299      	cmp	r1, r3
 80046a8:	da07      	bge.n	80046ba <SetTargetData+0x3fe>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80046aa:	f9b5 e1dc 	ldrsh.w	lr, [r5, #476]	@ 0x1dc
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80046ae:	459e      	cmp	lr, r3
 80046b0:	dd03      	ble.n	80046ba <SetTargetData+0x3fe>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80046b2:	b916      	cbnz	r6, 80046ba <SetTargetData+0x3fe>
					AddOffset =
 80046b4:	f9b5 31f2 	ldrsh.w	r3, [r5, #498]	@ 0x1f2
		if (uwr_status) {
 80046b8:	e7ae      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80046ba:	4249      	negs	r1, r1
 80046bc:	428b      	cmp	r3, r1
 80046be:	da06      	bge.n	80046ce <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80046c0:	f9b5 11dc 	ldrsh.w	r1, [r5, #476]	@ 0x1dc
 80046c4:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80046c6:	428b      	cmp	r3, r1
 80046c8:	dd01      	ble.n	80046ce <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80046ca:	2e01      	cmp	r6, #1
 80046cc:	d015      	beq.n	80046fa <SetTargetData+0x43e>
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80046ce:	f9b5 11de 	ldrsh.w	r1, [r5, #478]	@ 0x1de
 80046d2:	4299      	cmp	r1, r3
 80046d4:	da05      	bge.n	80046e2 <SetTargetData+0x426>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80046d6:	f9b5 e1e0 	ldrsh.w	lr, [r5, #480]	@ 0x1e0
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80046da:	459e      	cmp	lr, r3
 80046dc:	dd01      	ble.n	80046e2 <SetTargetData+0x426>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80046de:	2e01      	cmp	r6, #1
 80046e0:	d00e      	beq.n	8004700 <SetTargetData+0x444>
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80046e2:	4249      	negs	r1, r1
 80046e4:	428b      	cmp	r3, r1
 80046e6:	da0e      	bge.n	8004706 <SetTargetData+0x44a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80046e8:	f9b5 11e0 	ldrsh.w	r1, [r5, #480]	@ 0x1e0
 80046ec:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80046ee:	428b      	cmp	r3, r1
 80046f0:	dd09      	ble.n	8004706 <SetTargetData+0x44a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80046f2:	b946      	cbnz	r6, 8004706 <SetTargetData+0x44a>
					AddOffset =
 80046f4:	f9b5 31f6 	ldrsh.w	r3, [r5, #502]	@ 0x1f6
		if (uwr_status) {
 80046f8:	e78e      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 80046fa:	f9b5 31f4 	ldrsh.w	r3, [r5, #500]	@ 0x1f4
		if (uwr_status) {
 80046fe:	e78b      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004700:	f9b5 31f8 	ldrsh.w	r3, [r5, #504]	@ 0x1f8
		if (uwr_status) {
 8004704:	e788      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004706:	f9b5 11e2 	ldrsh.w	r1, [r5, #482]	@ 0x1e2
 800470a:	4299      	cmp	r1, r3
 800470c:	da07      	bge.n	800471e <SetTargetData+0x462>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800470e:	f9b5 e1e4 	ldrsh.w	lr, [r5, #484]	@ 0x1e4
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004712:	459e      	cmp	lr, r3
 8004714:	dd03      	ble.n	800471e <SetTargetData+0x462>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8004716:	b916      	cbnz	r6, 800471e <SetTargetData+0x462>
					AddOffset =
 8004718:	f9b5 31fa 	ldrsh.w	r3, [r5, #506]	@ 0x1fa
		if (uwr_status) {
 800471c:	e77c      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800471e:	4249      	negs	r1, r1
 8004720:	428b      	cmp	r3, r1
 8004722:	da06      	bge.n	8004732 <SetTargetData+0x476>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8004724:	f9b5 11e4 	ldrsh.w	r1, [r5, #484]	@ 0x1e4
 8004728:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800472a:	428b      	cmp	r3, r1
 800472c:	dd01      	ble.n	8004732 <SetTargetData+0x476>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800472e:	2e01      	cmp	r6, #1
 8004730:	d00a      	beq.n	8004748 <SetTargetData+0x48c>
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8004732:	f9b5 11e8 	ldrsh.w	r1, [r5, #488]	@ 0x1e8
 8004736:	4299      	cmp	r1, r3
 8004738:	dd09      	ble.n	800474e <SetTargetData+0x492>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800473a:	f9b5 11e6 	ldrsh.w	r1, [r5, #486]	@ 0x1e6
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800473e:	4299      	cmp	r1, r3
 8004740:	da05      	bge.n	800474e <SetTargetData+0x492>
					AddOffset =
 8004742:	f9b5 31fe 	ldrsh.w	r3, [r5, #510]	@ 0x1fe
		if (uwr_status) {
 8004746:	e767      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004748:	f9b5 31fc 	ldrsh.w	r3, [r5, #508]	@ 0x1fc
		if (uwr_status) {
 800474c:	e764      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800474e:	f9b5 11ea 	ldrsh.w	r1, [r5, #490]	@ 0x1ea
 8004752:	4299      	cmp	r1, r3
 8004754:	da05      	bge.n	8004762 <SetTargetData+0x4a6>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8004756:	f9b5 e1ec 	ldrsh.w	lr, [r5, #492]	@ 0x1ec
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800475a:	459e      	cmp	lr, r3
 800475c:	dd01      	ble.n	8004762 <SetTargetData+0x4a6>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 800475e:	2e01      	cmp	r6, #1
 8004760:	d00f      	beq.n	8004782 <SetTargetData+0x4c6>
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8004762:	4249      	negs	r1, r1
 8004764:	428b      	cmp	r3, r1
 8004766:	f6bf ae9f 	bge.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800476a:	f9b5 11ec 	ldrsh.w	r1, [r5, #492]	@ 0x1ec
 800476e:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8004770:	428b      	cmp	r3, r1
 8004772:	f77f ae99 	ble.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8004776:	2e00      	cmp	r6, #0
 8004778:	f47f ae96 	bne.w	80044a8 <SetTargetData+0x1ec>
					AddOffset =
 800477c:	f9b5 3202 	ldrsh.w	r3, [r5, #514]	@ 0x202
		if (uwr_status) {
 8004780:	e74a      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004782:	f9b5 3204 	ldrsh.w	r3, [r5, #516]	@ 0x204
		if (uwr_status) {
 8004786:	e747      	b.n	8004618 <SetTargetData+0x35c>
 8004788:	20000014 	.word	0x20000014
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800478c:	f9b5 11d6 	ldrsh.w	r1, [r5, #470]	@ 0x1d6
 8004790:	4299      	cmp	r1, r3
 8004792:	da05      	bge.n	80047a0 <SetTargetData+0x4e4>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004794:	f9b5 e1d8 	ldrsh.w	lr, [r5, #472]	@ 0x1d8
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8004798:	459e      	cmp	lr, r3
 800479a:	dd01      	ble.n	80047a0 <SetTargetData+0x4e4>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800479c:	2e01      	cmp	r6, #1
 800479e:	d00b      	beq.n	80047b8 <SetTargetData+0x4fc>
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80047a0:	4249      	negs	r1, r1
 80047a2:	428b      	cmp	r3, r1
 80047a4:	da0b      	bge.n	80047be <SetTargetData+0x502>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80047a6:	f9b5 11d8 	ldrsh.w	r1, [r5, #472]	@ 0x1d8
 80047aa:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80047ac:	428b      	cmp	r3, r1
 80047ae:	dd06      	ble.n	80047be <SetTargetData+0x502>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80047b0:	b92e      	cbnz	r6, 80047be <SetTargetData+0x502>
					AddOffset =
 80047b2:	f9b5 31ee 	ldrsh.w	r3, [r5, #494]	@ 0x1ee
		if (uwr_status) {
 80047b6:	e72f      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 80047b8:	f9b5 31f0 	ldrsh.w	r3, [r5, #496]	@ 0x1f0
		if (uwr_status) {
 80047bc:	e72c      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80047be:	f9b5 11da 	ldrsh.w	r1, [r5, #474]	@ 0x1da
 80047c2:	4299      	cmp	r1, r3
 80047c4:	da07      	bge.n	80047d6 <SetTargetData+0x51a>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80047c6:	f9b5 e1dc 	ldrsh.w	lr, [r5, #476]	@ 0x1dc
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80047ca:	459e      	cmp	lr, r3
 80047cc:	dd03      	ble.n	80047d6 <SetTargetData+0x51a>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80047ce:	b916      	cbnz	r6, 80047d6 <SetTargetData+0x51a>
					AddOffset =
 80047d0:	f9b5 31f2 	ldrsh.w	r3, [r5, #498]	@ 0x1f2
		if (uwr_status) {
 80047d4:	e720      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80047d6:	4249      	negs	r1, r1
 80047d8:	428b      	cmp	r3, r1
 80047da:	da06      	bge.n	80047ea <SetTargetData+0x52e>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80047dc:	f9b5 11dc 	ldrsh.w	r1, [r5, #476]	@ 0x1dc
 80047e0:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80047e2:	428b      	cmp	r3, r1
 80047e4:	dd01      	ble.n	80047ea <SetTargetData+0x52e>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80047e6:	2e01      	cmp	r6, #1
 80047e8:	d015      	beq.n	8004816 <SetTargetData+0x55a>
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80047ea:	f9b5 11de 	ldrsh.w	r1, [r5, #478]	@ 0x1de
 80047ee:	4299      	cmp	r1, r3
 80047f0:	da05      	bge.n	80047fe <SetTargetData+0x542>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80047f2:	f9b5 e1e0 	ldrsh.w	lr, [r5, #480]	@ 0x1e0
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80047f6:	459e      	cmp	lr, r3
 80047f8:	dd01      	ble.n	80047fe <SetTargetData+0x542>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80047fa:	2e01      	cmp	r6, #1
 80047fc:	d00e      	beq.n	800481c <SetTargetData+0x560>
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80047fe:	4249      	negs	r1, r1
 8004800:	428b      	cmp	r3, r1
 8004802:	da0e      	bge.n	8004822 <SetTargetData+0x566>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8004804:	f9b5 11e0 	ldrsh.w	r1, [r5, #480]	@ 0x1e0
 8004808:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800480a:	428b      	cmp	r3, r1
 800480c:	dd09      	ble.n	8004822 <SetTargetData+0x566>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800480e:	b946      	cbnz	r6, 8004822 <SetTargetData+0x566>
					AddOffset =
 8004810:	f9b5 31f6 	ldrsh.w	r3, [r5, #502]	@ 0x1f6
		if (uwr_status) {
 8004814:	e700      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004816:	f9b5 31f4 	ldrsh.w	r3, [r5, #500]	@ 0x1f4
		if (uwr_status) {
 800481a:	e6fd      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 800481c:	f9b5 31f8 	ldrsh.w	r3, [r5, #504]	@ 0x1f8
		if (uwr_status) {
 8004820:	e6fa      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004822:	f9b5 11e2 	ldrsh.w	r1, [r5, #482]	@ 0x1e2
 8004826:	4299      	cmp	r1, r3
 8004828:	da07      	bge.n	800483a <SetTargetData+0x57e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800482a:	f9b5 e1e4 	ldrsh.w	lr, [r5, #484]	@ 0x1e4
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800482e:	459e      	cmp	lr, r3
 8004830:	dd03      	ble.n	800483a <SetTargetData+0x57e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8004832:	b916      	cbnz	r6, 800483a <SetTargetData+0x57e>
					AddOffset =
 8004834:	f9b5 31fa 	ldrsh.w	r3, [r5, #506]	@ 0x1fa
		if (uwr_status) {
 8004838:	e6ee      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800483a:	4249      	negs	r1, r1
 800483c:	428b      	cmp	r3, r1
 800483e:	da06      	bge.n	800484e <SetTargetData+0x592>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8004840:	f9b5 11e4 	ldrsh.w	r1, [r5, #484]	@ 0x1e4
 8004844:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8004846:	428b      	cmp	r3, r1
 8004848:	dd01      	ble.n	800484e <SetTargetData+0x592>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800484a:	2e01      	cmp	r6, #1
 800484c:	d00a      	beq.n	8004864 <SetTargetData+0x5a8>
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800484e:	f9b5 11e8 	ldrsh.w	r1, [r5, #488]	@ 0x1e8
 8004852:	4299      	cmp	r1, r3
 8004854:	dd09      	ble.n	800486a <SetTargetData+0x5ae>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8004856:	f9b5 11e6 	ldrsh.w	r1, [r5, #486]	@ 0x1e6
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800485a:	4299      	cmp	r1, r3
 800485c:	da05      	bge.n	800486a <SetTargetData+0x5ae>
					AddOffset =
 800485e:	f9b5 31fe 	ldrsh.w	r3, [r5, #510]	@ 0x1fe
		if (uwr_status) {
 8004862:	e6d9      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004864:	f9b5 31fc 	ldrsh.w	r3, [r5, #508]	@ 0x1fc
		if (uwr_status) {
 8004868:	e6d6      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800486a:	f9b5 11ea 	ldrsh.w	r1, [r5, #490]	@ 0x1ea
 800486e:	4299      	cmp	r1, r3
 8004870:	da05      	bge.n	800487e <SetTargetData+0x5c2>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8004872:	f9b5 e1ec 	ldrsh.w	lr, [r5, #492]	@ 0x1ec
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8004876:	459e      	cmp	lr, r3
 8004878:	dd01      	ble.n	800487e <SetTargetData+0x5c2>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 800487a:	2e01      	cmp	r6, #1
 800487c:	d00f      	beq.n	800489e <SetTargetData+0x5e2>
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800487e:	4249      	negs	r1, r1
 8004880:	428b      	cmp	r3, r1
 8004882:	f6bf ae11 	bge.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8004886:	f9b5 11ec 	ldrsh.w	r1, [r5, #492]	@ 0x1ec
 800488a:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800488c:	428b      	cmp	r3, r1
 800488e:	f77f ae0b 	ble.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8004892:	2e00      	cmp	r6, #0
 8004894:	f47f ae08 	bne.w	80044a8 <SetTargetData+0x1ec>
					AddOffset =
 8004898:	f9b5 3202 	ldrsh.w	r3, [r5, #514]	@ 0x202
		if (uwr_status) {
 800489c:	e6bc      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 800489e:	f9b5 3204 	ldrsh.w	r3, [r5, #516]	@ 0x204
		if (uwr_status) {
 80048a2:	e6b9      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80048a4:	f9b5 1206 	ldrsh.w	r1, [r5, #518]	@ 0x206
 80048a8:	4299      	cmp	r1, r3
 80048aa:	da07      	bge.n	80048bc <SetTargetData+0x600>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80048ac:	f9b5 e208 	ldrsh.w	lr, [r5, #520]	@ 0x208
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80048b0:	459e      	cmp	lr, r3
 80048b2:	dd03      	ble.n	80048bc <SetTargetData+0x600>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80048b4:	b916      	cbnz	r6, 80048bc <SetTargetData+0x600>
					AddOffset =
 80048b6:	f9b5 321a 	ldrsh.w	r3, [r5, #538]	@ 0x21a
		if (uwr_status) {
 80048ba:	e6ad      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80048bc:	4249      	negs	r1, r1
 80048be:	428b      	cmp	r3, r1
 80048c0:	da06      	bge.n	80048d0 <SetTargetData+0x614>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80048c2:	f9b5 1208 	ldrsh.w	r1, [r5, #520]	@ 0x208
 80048c6:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80048c8:	428b      	cmp	r3, r1
 80048ca:	dd01      	ble.n	80048d0 <SetTargetData+0x614>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80048cc:	2e01      	cmp	r6, #1
 80048ce:	d015      	beq.n	80048fc <SetTargetData+0x640>
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80048d0:	f9b5 120a 	ldrsh.w	r1, [r5, #522]	@ 0x20a
 80048d4:	4299      	cmp	r1, r3
 80048d6:	da05      	bge.n	80048e4 <SetTargetData+0x628>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80048d8:	f9b5 e20c 	ldrsh.w	lr, [r5, #524]	@ 0x20c
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80048dc:	459e      	cmp	lr, r3
 80048de:	dd01      	ble.n	80048e4 <SetTargetData+0x628>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80048e0:	2e01      	cmp	r6, #1
 80048e2:	d00e      	beq.n	8004902 <SetTargetData+0x646>
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80048e4:	4249      	negs	r1, r1
 80048e6:	428b      	cmp	r3, r1
 80048e8:	da0e      	bge.n	8004908 <SetTargetData+0x64c>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80048ea:	f9b5 120c 	ldrsh.w	r1, [r5, #524]	@ 0x20c
 80048ee:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80048f0:	428b      	cmp	r3, r1
 80048f2:	dd09      	ble.n	8004908 <SetTargetData+0x64c>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80048f4:	b946      	cbnz	r6, 8004908 <SetTargetData+0x64c>
					AddOffset =
 80048f6:	f9b5 321e 	ldrsh.w	r3, [r5, #542]	@ 0x21e
		if (uwr_status) {
 80048fa:	e68d      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 80048fc:	f9b5 321c 	ldrsh.w	r3, [r5, #540]	@ 0x21c
		if (uwr_status) {
 8004900:	e68a      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004902:	f9b5 3220 	ldrsh.w	r3, [r5, #544]	@ 0x220
		if (uwr_status) {
 8004906:	e687      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8004908:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800490c:	4299      	cmp	r1, r3
 800490e:	dd06      	ble.n	800491e <SetTargetData+0x662>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8004910:	f9b5 120e 	ldrsh.w	r1, [r5, #526]	@ 0x20e
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8004914:	4299      	cmp	r1, r3
 8004916:	da02      	bge.n	800491e <SetTargetData+0x662>
					AddOffset =
 8004918:	f9b5 3222 	ldrsh.w	r3, [r5, #546]	@ 0x222
		if (uwr_status) {
 800491c:	e67c      	b.n	8004618 <SetTargetData+0x35c>
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800491e:	f9b5 1212 	ldrsh.w	r1, [r5, #530]	@ 0x212
 8004922:	4299      	cmp	r1, r3
 8004924:	da05      	bge.n	8004932 <SetTargetData+0x676>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004926:	f9b5 e214 	ldrsh.w	lr, [r5, #532]	@ 0x214
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800492a:	459e      	cmp	lr, r3
 800492c:	dd01      	ble.n	8004932 <SetTargetData+0x676>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800492e:	2e01      	cmp	r6, #1
 8004930:	d00f      	beq.n	8004952 <SetTargetData+0x696>
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004932:	4249      	negs	r1, r1
 8004934:	428b      	cmp	r3, r1
 8004936:	f6bf adb7 	bge.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 800493a:	f9b5 1214 	ldrsh.w	r1, [r5, #532]	@ 0x214
 800493e:	4249      	negs	r1, r1
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004940:	428b      	cmp	r3, r1
 8004942:	f77f adb1 	ble.w	80044a8 <SetTargetData+0x1ec>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004946:	2e00      	cmp	r6, #0
 8004948:	f47f adae 	bne.w	80044a8 <SetTargetData+0x1ec>
					AddOffset =
 800494c:	f9b5 3226 	ldrsh.w	r3, [r5, #550]	@ 0x226
		if (uwr_status) {
 8004950:	e662      	b.n	8004618 <SetTargetData+0x35c>
					AddOffset =
 8004952:	f9b5 3228 	ldrsh.w	r3, [r5, #552]	@ 0x228
		if (uwr_status) {
 8004956:	e65f      	b.n	8004618 <SetTargetData+0x35c>

08004958 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	b085      	sub	sp, #20
 800495e:	4681      	mov	r9, r0
 8004960:	460f      	mov	r7, r1
 8004962:	4616      	mov	r6, r2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint8_t Furthest_idx = 0;
	int16_t Furthest_range = 0;
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8004964:	7c8b      	ldrb	r3, [r1, #18]
 8004966:	7193      	strb	r3, [r2, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8004968:	788b      	ldrb	r3, [r1, #2]
 800496a:	7153      	strb	r3, [r2, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 800496c:	f891 3196 	ldrb.w	r3, [r1, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8004970:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8004974:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8004978:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
 800497c:	4293      	cmp	r3, r2
 800497e:	bfa8      	it	ge
 8004980:	4613      	movge	r3, r2
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 8004982:	f8a6 307c 	strh.w	r3, [r6, #124]	@ 0x7c


	pMultiRangingData->TimeStamp = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	6033      	str	r3, [r6, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800498a:	78cb      	ldrb	r3, [r1, #3]
 800498c:	7133      	strb	r3, [r6, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 800498e:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 8004992:	f893 3f56 	ldrb.w	r3, [r3, #3926]	@ 0xf56
	pMultiRangingData->RecommendedDistanceMode =
 8004996:	f886 307e 	strb.w	r3, [r6, #126]	@ 0x7e
	ActiveResults = presults->active_results;
 800499a:	f891 b012 	ldrb.w	fp, [r1, #18]
	if (ActiveResults < 1)
 800499e:	f1bb 0f00 	cmp.w	fp, #0
 80049a2:	d108      	bne.n	80049b6 <SetMeasurementData+0x5e>

		iteration = 1;
 80049a4:	f04f 0a01 	mov.w	sl, #1
	int16_t Furthest_range = 0;
 80049a8:	2300      	movs	r3, #0
	uint8_t Furthest_idx = 0;
 80049aa:	9303      	str	r3, [sp, #12]
	else
		iteration = ActiveResults;
	for (i = 0; i < iteration; i++) {
 80049ac:	461c      	mov	r4, r3
 80049ae:	4618      	mov	r0, r3
 80049b0:	46c8      	mov	r8, r9
 80049b2:	4699      	mov	r9, r3
 80049b4:	e00c      	b.n	80049d0 <SetMeasurementData+0x78>
		iteration = ActiveResults;
 80049b6:	46da      	mov	sl, fp
 80049b8:	e7f6      	b.n	80049a8 <SetMeasurementData+0x50>
		pRangeData = &(pMultiRangingData->RangeData[i]);

		presults_data = &(presults->VL53L1_p_002[i]);
		if (Status == VL53L1_ERROR_NONE)
			Status = SetTargetData(Dev, ActiveResults,
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	7c3b      	ldrb	r3, [r7, #16]
 80049c0:	4622      	mov	r2, r4
 80049c2:	4659      	mov	r1, fp
 80049c4:	4640      	mov	r0, r8
 80049c6:	f7ff fc79 	bl	80042bc <SetTargetData>
 80049ca:	e011      	b.n	80049f0 <SetMeasurementData+0x98>
	for (i = 0; i < iteration; i++) {
 80049cc:	3401      	adds	r4, #1
 80049ce:	b2e4      	uxtb	r4, r4
 80049d0:	4554      	cmp	r4, sl
 80049d2:	d225      	bcs.n	8004a20 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80049d4:	4625      	mov	r5, r4
 80049d6:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80049da:	0092      	lsls	r2, r2, #2
 80049dc:	3208      	adds	r2, #8
 80049de:	4432      	add	r2, r6
		presults_data = &(presults->VL53L1_p_002[i]);
 80049e0:	234c      	movs	r3, #76	@ 0x4c
 80049e2:	fb04 f303 	mul.w	r3, r4, r3
 80049e6:	3310      	adds	r3, #16
 80049e8:	443b      	add	r3, r7
 80049ea:	3304      	adds	r3, #4
		if (Status == VL53L1_ERROR_NONE)
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d0e4      	beq.n	80049ba <SetMeasurementData+0x62>
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 80049f0:	234c      	movs	r3, #76	@ 0x4c
 80049f2:	fb03 7305 	mla	r3, r3, r5, r7
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
		pMultiRangingData->EffectiveSpadRtnCount =
 80049f8:	f8a6 307a 	strh.w	r3, [r6, #122]	@ 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 80049fc:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8004a00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a04:	7fdb      	ldrb	r3, [r3, #31]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e0      	bne.n	80049cc <SetMeasurementData+0x74>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8004a0a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8004a0e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8004a12:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
 8004a16:	454b      	cmp	r3, r9
 8004a18:	ddd8      	ble.n	80049cc <SetMeasurementData+0x74>
			Furthest_range = pRangeData->RangeMilliMeter;
 8004a1a:	4699      	mov	r9, r3
			Furthest_idx = i;
 8004a1c:	9403      	str	r4, [sp, #12]
 8004a1e:	e7d5      	b.n	80049cc <SetMeasurementData+0x74>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8004a20:	46c1      	mov	r9, r8
 8004a22:	4680      	mov	r8, r0
 8004a24:	f899 249f 	ldrb.w	r2, [r9, #1183]	@ 0x49f
 8004a28:	f509 43c0 	add.w	r3, r9, #24576	@ 0x6000
 8004a2c:	f883 25ec 	strb.w	r2, [r3, #1516]	@ 0x5ec

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8004a30:	b910      	cbnz	r0, 8004a38 <SetMeasurementData+0xe0>
 8004a32:	f1bb 0f00 	cmp.w	fp, #0
 8004a36:	d103      	bne.n	8004a40 <SetMeasurementData+0xe8>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
}
 8004a38:	4640      	mov	r0, r8
 8004a3a:	b005      	add	sp, #20
 8004a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8004a46:	0089      	lsls	r1, r1, #2
 8004a48:	3108      	adds	r1, #8
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8004a4a:	f106 037e 	add.w	r3, r6, #126	@ 0x7e
 8004a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a52:	4431      	add	r1, r6
 8004a54:	4648      	mov	r0, r9
 8004a56:	f7ff fa23 	bl	8003ea0 <CheckAndChangeDistanceMode>
 8004a5a:	e7ed      	b.n	8004a38 <SetMeasurementData+0xe0>

08004a5c <VL53L1_SetROI>:
{
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	b09c      	sub	sp, #112	@ 0x70
 8004a62:	4607      	mov	r7, r0
 8004a64:	460e      	mov	r6, r1
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004a66:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 8004a6a:	f893 3f54 	ldrb.w	r3, [r3, #3924]	@ 0xf54
	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d043      	beq.n	8004afa <VL53L1_SetROI+0x9e>
	uint8_t MaxNumberOfROI = 1;
 8004a72:	2201      	movs	r2, #1
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8004a74:	7833      	ldrb	r3, [r6, #0]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d853      	bhi.n	8004b22 <VL53L1_SetROI+0xc6>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d054      	beq.n	8004b28 <VL53L1_SetROI+0xcc>
		zone_cfg.max_zones = MaxNumberOfROI;
 8004a7e:	f88d 2004 	strb.w	r2, [sp, #4]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8004a82:	3b01      	subs	r3, #1
 8004a84:	f88d 3005 	strb.w	r3, [sp, #5]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8004a88:	2500      	movs	r5, #0
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a8a:	46a8      	mov	r8, r5
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8004a8c:	7833      	ldrb	r3, [r6, #0]
 8004a8e:	42ab      	cmp	r3, r5
 8004a90:	d937      	bls.n	8004b02 <VL53L1_SetROI+0xa6>
			CurrROI = pRoiConfig->UserRois[i];
 8004a92:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8004a96:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8004a9a:	9000      	str	r0, [sp, #0]
			Status = CheckValidRectRoi(CurrROI);
 8004a9c:	f7ff f932 	bl	8003d04 <CheckValidRectRoi>
			if (Status != VL53L1_ERROR_NONE)
 8004aa0:	4680      	mov	r8, r0
 8004aa2:	bb70      	cbnz	r0, 8004b02 <VL53L1_SetROI+0xa6>
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8004aa4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004aa8:	f89d 2000 	ldrb.w	r2, [sp]
 8004aac:	eb03 0e02 	add.w	lr, r3, r2
					/ 2;
 8004ab0:	f10e 0e01 	add.w	lr, lr, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8004ab4:	f3ce 0e47 	ubfx	lr, lr, #1, #8
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8004ab8:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8004abc:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004ac0:	eb01 0c00 	add.w	ip, r1, r0
					/ 2;
 8004ac4:	f10c 0c01 	add.w	ip, ip, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8004ac8:	f3cc 0c47 	ubfx	ip, ip, #1, #8
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	b2da      	uxtb	r2, r3
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8004ad0:	1a09      	subs	r1, r1, r0
 8004ad2:	b2c9      	uxtb	r1, r1
			if ((width < 3) || (height < 3)) {
 8004ad4:	2a02      	cmp	r2, #2
 8004ad6:	d912      	bls.n	8004afe <VL53L1_SetROI+0xa2>
 8004ad8:	2902      	cmp	r1, #2
 8004ada:	d919      	bls.n	8004b10 <VL53L1_SetROI+0xb4>
			zone_cfg.user_zones[i].x_centre = x_centre;
 8004adc:	1dab      	adds	r3, r5, #6
 8004ade:	a81c      	add	r0, sp, #112	@ 0x70
 8004ae0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ae4:	f803 ec68 	strb.w	lr, [r3, #-104]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8004ae8:	f803 cc67 	strb.w	ip, [r3, #-103]
			zone_cfg.user_zones[i].width = width;
 8004aec:	f803 2c66 	strb.w	r2, [r3, #-102]
			zone_cfg.user_zones[i].height = height;
 8004af0:	f803 1c65 	strb.w	r1, [r3, #-101]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8004af4:	3501      	adds	r5, #1
 8004af6:	b2ed      	uxtb	r5, r5
 8004af8:	e7c8      	b.n	8004a8c <VL53L1_SetROI+0x30>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8004afa:	2210      	movs	r2, #16
 8004afc:	e7ba      	b.n	8004a74 <VL53L1_SetROI+0x18>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004afe:	f06f 0803 	mvn.w	r8, #3
	if (Status == VL53L1_ERROR_NONE)
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	d006      	beq.n	8004b16 <VL53L1_SetROI+0xba>
}
 8004b08:	4640      	mov	r0, r8
 8004b0a:	b01c      	add	sp, #112	@ 0x70
 8004b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004b10:	f06f 0803 	mvn.w	r8, #3
 8004b14:	e7f5      	b.n	8004b02 <VL53L1_SetROI+0xa6>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8004b16:	a901      	add	r1, sp, #4
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f000 fdef 	bl	80056fc <VL53L1_set_zone_config>
 8004b1e:	4680      	mov	r8, r0
 8004b20:	e7f2      	b.n	8004b08 <VL53L1_SetROI+0xac>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004b22:	f06f 0803 	mvn.w	r8, #3
 8004b26:	e7ef      	b.n	8004b08 <VL53L1_SetROI+0xac>
 8004b28:	f06f 0803 	mvn.w	r8, #3
 8004b2c:	e7ec      	b.n	8004b08 <VL53L1_SetROI+0xac>

08004b2e <VL53L1_GetSequenceStepEnable>:
{
 8004b2e:	b508      	push	{r3, lr}
	Status = VL53L1_get_sequence_config_bit(Dev,
 8004b30:	f000 fce2 	bl	80054f8 <VL53L1_get_sequence_config_bit>
}
 8004b34:	bd08      	pop	{r3, pc}
	...

08004b38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	b086      	sub	sp, #24
	uint8_t Mm1Enabled = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t Mm2Enabled = 0;
 8004b42:	f88d 3016 	strb.w	r3, [sp, #22]
	uint32_t TimingBudget = 0;
 8004b46:	9304      	str	r3, [sp, #16]
	uint32_t MmTimeoutUs = 0;
 8004b48:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 8004b4a:	9302      	str	r3, [sp, #8]
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004b4c:	4b52      	ldr	r3, [pc, #328]	@ (8004c98 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x160>)
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	f200 8099 	bhi.w	8004c86 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14e>
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004b58:	f10d 0217 	add.w	r2, sp, #23
 8004b5c:	2105      	movs	r1, #5
 8004b5e:	f7ff ffe6 	bl	8004b2e <VL53L1_GetSequenceStepEnable>
	if (Status == VL53L1_ERROR_NONE) {
 8004b62:	4606      	mov	r6, r0
 8004b64:	b110      	cbz	r0, 8004b6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
}
 8004b66:	4630      	mov	r0, r6
 8004b68:	b006      	add	sp, #24
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004b6c:	f10d 0216 	add.w	r2, sp, #22
 8004b70:	2106      	movs	r1, #6
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff ffdb 	bl	8004b2e <VL53L1_GetSequenceStepEnable>
	if (Status == VL53L1_ERROR_NONE)
 8004b78:	4606      	mov	r6, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1f3      	bne.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53L1_get_timeouts_us(Dev,
 8004b7e:	ab04      	add	r3, sp, #16
 8004b80:	aa03      	add	r2, sp, #12
 8004b82:	a902      	add	r1, sp, #8
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 fc7f 	bl	8005488 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d1ea      	bne.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		PresetMode = VL53L1DevDataGet(Dev,
 8004b90:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 8004b94:	f893 3f54 	ldrb.w	r3, [r3, #3924]	@ 0xf54
		switch (PresetMode) {
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d863      	bhi.n	8004c66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12e>
 8004b9e:	e8df f003 	tbb	[pc, r3]
 8004ba2:	0505      	.short	0x0505
 8004ba4:	62622335 	.word	0x62622335
 8004ba8:	475b      	.short	0x475b
 8004baa:	05          	.byte	0x05
 8004bab:	00          	.byte	0x00
 8004bac:	4b3b      	ldr	r3, [pc, #236]	@ (8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x164>)
 8004bae:	2106      	movs	r1, #6
 8004bb0:	f240 62a4 	movw	r2, #1700	@ 0x6a4
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8004bb4:	42aa      	cmp	r2, r5
 8004bb6:	d269      	bcs.n	8004c8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x154>
					- TimingGuard);
 8004bb8:	1aaa      	subs	r2, r5, r2
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8004bba:	9204      	str	r2, [sp, #16]
		if (Status == VL53L1_ERROR_NONE) {
 8004bbc:	2e00      	cmp	r6, #0
 8004bbe:	d1d2      	bne.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d866      	bhi.n	8004c92 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15a>
				TimingBudget /= divisor;
 8004bc4:	fbb2 f3f1 	udiv	r3, r2, r1
 8004bc8:	9304      	str	r3, [sp, #16]
				Status = VL53L1_set_timeouts_us(
 8004bca:	9a03      	ldr	r2, [sp, #12]
 8004bcc:	9902      	ldr	r1, [sp, #8]
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 fc3e 	bl	8005450 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d1c5      	bne.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
				VL53L1DevDataSet(Dev,
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	62a3      	str	r3, [r4, #40]	@ 0x28
		VL53L1DevDataSet(Dev,
 8004bde:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 8004be2:	f8c4 5f58 	str.w	r5, [r4, #3928]	@ 0xf58
 8004be6:	e7be      	b.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004be8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d040      	beq.n	8004c72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8004bf0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d004      	beq.n	8004c02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xca>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004bf8:	4b28      	ldr	r3, [pc, #160]	@ (8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x164>)
		divisor = 1;
 8004bfa:	2101      	movs	r1, #1
				TimingGuard = 1000;
 8004bfc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c00:	e7d8      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004c02:	4b26      	ldr	r3, [pc, #152]	@ (8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x164>)
		divisor = 1;
 8004c04:	2101      	movs	r1, #1
				TimingGuard = 5000;
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	e7d3      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004c0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d033      	beq.n	8004c7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
 8004c14:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d004      	beq.n	8004c26 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xee>
			FDAMaxTimingBudgetUs *= 2;
 8004c1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ca0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x168>)
			divisor = 2;
 8004c1e:	2102      	movs	r1, #2
				TimingGuard = 21600;
 8004c20:	f245 4260 	movw	r2, #21600	@ 0x5460
 8004c24:	e7c6      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
			FDAMaxTimingBudgetUs *= 2;
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x168>)
			divisor = 2;
 8004c28:	2102      	movs	r1, #2
				TimingGuard = 26600;
 8004c2a:	f246 72e8 	movw	r2, #26600	@ 0x67e8
 8004c2e:	e7c1      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
			VL53L1_get_tuning_parm(Dev,
 8004c30:	aa01      	add	r2, sp, #4
 8004c32:	f248 0188 	movw	r1, #32904	@ 0x8088
 8004c36:	4620      	mov	r0, r4
 8004c38:	f001 fd06 	bl	8006648 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8004c3c:	9b01      	ldr	r3, [sp, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd08      	ble.n	8004c54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
				vhv += vhv_loops *
 8004c42:	22f5      	movs	r2, #245	@ 0xf5
 8004c44:	fb03 f202 	mul.w	r2, r3, r2
 8004c48:	32f5      	adds	r2, #245	@ 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004c4a:	f602 52dc 	addw	r2, r2, #3548	@ 0xddc
			FDAMaxTimingBudgetUs *= 2;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x168>)
			divisor = 2;
 8004c50:	2102      	movs	r1, #2
		break;
 8004c52:	e7af      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004c54:	22f5      	movs	r2, #245	@ 0xf5
 8004c56:	e7f8      	b.n	8004c4a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x112>
			TimingGuard = MmTimeoutUs + 5000;
 8004c58:	9a03      	ldr	r2, [sp, #12]
 8004c5a:	f502 529c 	add.w	r2, r2, #4992	@ 0x1380
 8004c5e:	3208      	adds	r2, #8
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004c60:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x164>)
		divisor = 1;
 8004c62:	2101      	movs	r1, #1
		break;
 8004c64:	e7a6      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x164>)
		divisor = 1;
 8004c68:	2101      	movs	r1, #1
		TimingGuard = 0;
 8004c6a:	2200      	movs	r2, #0
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004c6c:	f06f 0607 	mvn.w	r6, #7
 8004c70:	e7a0      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004c72:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x164>)
		divisor = 1;
 8004c74:	2101      	movs	r1, #1
				TimingGuard = 5000;
 8004c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7a:	e79b      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
			FDAMaxTimingBudgetUs *= 2;
 8004c7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x168>)
			divisor = 2;
 8004c7e:	2102      	movs	r1, #2
				TimingGuard = 26600;
 8004c80:	f246 72e8 	movw	r2, #26600	@ 0x67e8
 8004c84:	e796      	b.n	8004bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c86:	f06f 0603 	mvn.w	r6, #3
 8004c8a:	e76c      	b.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c8c:	f06f 0603 	mvn.w	r6, #3
 8004c90:	e769      	b.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c92:	f06f 0603 	mvn.w	r6, #3
 8004c96:	e766      	b.n	8004b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x2e>
 8004c98:	00989680 	.word	0x00989680
 8004c9c:	00086470 	.word	0x00086470
 8004ca0:	0010c8e0 	.word	0x0010c8e0

08004ca4 <VL53L1_SetPresetMode>:
{
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	460c      	mov	r4, r1
	Status = VL53L1_low_power_auto_data_init(Dev);
 8004caa:	f005 ff56 	bl	800ab5a <VL53L1_low_power_auto_data_init>
	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8004cae:	2c09      	cmp	r4, #9
 8004cb0:	d014      	beq.n	8004cdc <VL53L1_SetPresetMode+0x38>
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004cb2:	2203      	movs	r2, #3
	Status = SetPresetMode(Dev,
 8004cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f7ff f99c 	bl	8003ff8 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8004cc0:	b958      	cbnz	r0, 8004cda <VL53L1_SetPresetMode+0x36>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8004cc2:	1ee3      	subs	r3, r4, #3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d901      	bls.n	8004cce <VL53L1_SetPresetMode+0x2a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004cca:	2c08      	cmp	r4, #8
 8004ccc:	d108      	bne.n	8004ce0 <VL53L1_SetPresetMode+0x3c>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004cce:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7ff ff30 	bl	8004b38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 8004cd8:	b140      	cbz	r0, 8004cec <VL53L1_SetPresetMode+0x48>
}
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8004cdc:	2201      	movs	r2, #1
 8004cde:	e7e9      	b.n	8004cb4 <VL53L1_SetPresetMode+0x10>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004ce0:	f248 2135 	movw	r1, #33333	@ 0x8235
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f7ff ff27 	bl	8004b38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004cea:	e7f5      	b.n	8004cd8 <VL53L1_SetPresetMode+0x34>
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004cec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7ff fa31 	bl	8004158 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004cf6:	e7f0      	b.n	8004cda <VL53L1_SetPresetMode+0x36>

08004cf8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	460c      	mov	r4, r1
	uint8_t Mm1Enabled = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t Mm2Enabled = 0;
 8004d06:	f88d 3016 	strb.w	r3, [sp, #22]
	uint32_t  MmTimeoutUs = 0;
 8004d0a:	9304      	str	r3, [sp, #16]
	uint32_t  RangeTimeoutUs = 0;
 8004d0c:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 8004d0e:	9302      	str	r3, [sp, #8]
	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004d10:	600b      	str	r3, [r1, #0]
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004d12:	f10d 0217 	add.w	r2, sp, #23
 8004d16:	2105      	movs	r1, #5
 8004d18:	f7ff ff09 	bl	8004b2e <VL53L1_GetSequenceStepEnable>
	if (Status == VL53L1_ERROR_NONE)
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b178      	cbz	r0, 8004d40 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x48>
	if (Status == VL53L1_ERROR_NONE) {
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	d156      	bne.n	8004dd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
		PresetMode = VL53L1DevDataGet(Dev,
 8004d24:	f506 43c0 	add.w	r3, r6, #24576	@ 0x6000
 8004d28:	f893 3f54 	ldrb.w	r3, [r3, #3924]	@ 0xf54
		switch (PresetMode) {
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d862      	bhi.n	8004df8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x100>
 8004d32:	e8df f003 	tbb	[pc, r3]
 8004d36:	5353      	.short	0x5353
 8004d38:	61611627 	.word	0x61611627
 8004d3c:	3b5a      	.short	0x3b5a
 8004d3e:	53          	.byte	0x53
 8004d3f:	00          	.byte	0x00
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004d40:	f10d 0216 	add.w	r2, sp, #22
 8004d44:	2106      	movs	r1, #6
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff fef1 	bl	8004b2e <VL53L1_GetSequenceStepEnable>
	if (Status == VL53L1_ERROR_NONE)
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d13f      	bne.n	8004dd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
		Status = VL53L1_get_timeouts_us(Dev,
 8004d52:	ab03      	add	r3, sp, #12
 8004d54:	aa04      	add	r2, sp, #16
 8004d56:	a902      	add	r1, sp, #8
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f000 fb95 	bl	8005488 <VL53L1_get_timeouts_us>
 8004d5e:	4605      	mov	r5, r0
 8004d60:	e7de      	b.n	8004d20 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004d62:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d007      	beq.n	8004d7a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x82>
 8004d6a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d003      	beq.n	8004d7a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x82>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004d78:	e02a      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8004d80:	3308      	adds	r3, #8
 8004d82:	e025      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004d84:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d009      	beq.n	8004da0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa8>
 8004d8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d005      	beq.n	8004da0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 8004d9a:	3330      	adds	r3, #48	@ 0x30
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	e017      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 8004da6:	3334      	adds	r3, #52	@ 0x34
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	e011      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
			VL53L1_get_tuning_parm(Dev,
 8004dac:	aa01      	add	r2, sp, #4
 8004dae:	f248 0188 	movw	r1, #32904	@ 0x8088
 8004db2:	4630      	mov	r0, r6
 8004db4:	f001 fc48 	bl	8006648 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dd0c      	ble.n	8004dd8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe0>
				vhv += vhv_loops *
 8004dbe:	22f5      	movs	r2, #245	@ 0xf5
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	4413      	add	r3, r2
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004dc6:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004dca:	9a03      	ldr	r2, [sp, #12]
 8004dcc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004dd0:	6023      	str	r3, [r4, #0]
}
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	b006      	add	sp, #24
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004dd8:	23f5      	movs	r3, #245	@ 0xf5
 8004dda:	e7f4      	b.n	8004dc6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	f203 63a4 	addw	r3, r3, #1700	@ 0x6a4
		break;
 8004de8:	e7f2      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	9a04      	ldr	r2, [sp, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8004df4:	3308      	adds	r3, #8
		break;
 8004df6:	e7eb      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
		switch (PresetMode) {
 8004df8:	f06f 0507 	mvn.w	r5, #7
 8004dfc:	e7e9      	b.n	8004dd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
	...

08004e00 <VL53L1_StartMeasurement>:
{
 8004e00:	b530      	push	{r4, r5, lr}
 8004e02:	b083      	sub	sp, #12
 8004e04:	4604      	mov	r4, r0
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004e06:	7ec5      	ldrb	r5, [r0, #27]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004e08:	2d40      	cmp	r5, #64	@ 0x40
 8004e0a:	d101      	bne.n	8004e10 <VL53L1_StartMeasurement+0x10>
{
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e02e      	b.n	8004e6e <VL53L1_StartMeasurement+0x6e>
		VL53L1_load_patch(Dev);
 8004e10:	f002 f8d5 	bl	8006fbe <VL53L1_load_patch>
 8004e14:	e7fa      	b.n	8004e0c <VL53L1_StartMeasurement+0xc>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8004e16:	f503 514b 	add.w	r1, r3, #12992	@ 0x32c0
 8004e1a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004e1e:	2200      	movs	r2, #0
 8004e20:	838a      	strh	r2, [r1, #28]
		pdev->PreviousRangeStatus[i] = 255;
 8004e22:	18e1      	adds	r1, r4, r3
 8004e24:	f246 50bc 	movw	r0, #26044	@ 0x65bc
 8004e28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004e2c:	f801 c000 	strb.w	ip, [r1, r0]
		pdev->PreviousExtendedRange[i] = 0;
 8004e30:	f246 50cc 	movw	r0, #26060	@ 0x65cc
 8004e34:	540a      	strb	r2, [r1, r0]
		pdev->PreviousRangeActiveResults[i] = 0;
 8004e36:	f246 50dc 	movw	r0, #26076	@ 0x65dc
 8004e3a:	540a      	strb	r2, [r1, r0]
		pdev->smudge_corrector_internals.previous_xtalk[i] = 0;
 8004e3c:	f203 514a 	addw	r1, r3, #1354	@ 0x54a
 8004e40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004e44:	618a      	str	r2, [r1, #24]
		pdev->smudge_corrector_internals.current_samples[i] = 0;
 8004e46:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 8004e4a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004e4e:	618a      	str	r2, [r1, #24]
		pdev->smudge_corrector_internals.accumulator[i] = 0;
 8004e50:	f203 218d 	addw	r1, r3, #653	@ 0x28d
 8004e54:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8004e58:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8004f10 <VL53L1_StartMeasurement+0x110>
 8004e5c:	ed81 7b06 	vstr	d7, [r1, #24]
		pdev->smudge_corrector_internals.nodetect_counter[i] = 0;
 8004e60:	f203 513a 	addw	r1, r3, #1338	@ 0x53a
 8004e64:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004e68:	618a      	str	r2, [r1, #24]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b0f      	cmp	r3, #15
 8004e70:	d9d1      	bls.n	8004e16 <VL53L1_StartMeasurement+0x16>
	pdev->PreviousStreamCount = 0;
 8004e72:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 25ec 	strb.w	r2, [r3, #1516]	@ 0x5ec
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004e7c:	f893 3f50 	ldrb.w	r3, [r3, #3920]	@ 0xf50
	switch (CurrPalState) {
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d01a      	beq.n	8004eba <VL53L1_StartMeasurement+0xba>
 8004e84:	d907      	bls.n	8004e96 <VL53L1_StartMeasurement+0x96>
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d80d      	bhi.n	8004ea6 <VL53L1_StartMeasurement+0xa6>
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d208      	bcs.n	8004ea0 <VL53L1_StartMeasurement+0xa0>
 8004e8e:	f06f 0002 	mvn.w	r0, #2
}
 8004e92:	b003      	add	sp, #12
 8004e94:	bd30      	pop	{r4, r5, pc}
	switch (CurrPalState) {
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d934      	bls.n	8004f04 <VL53L1_StartMeasurement+0x104>
 8004e9a:	f06f 0002 	mvn.w	r0, #2
 8004e9e:	e7f8      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004ea0:	f06f 000d 	mvn.w	r0, #13
 8004ea4:	e7f5      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
	switch (CurrPalState) {
 8004ea6:	3b62      	subs	r3, #98	@ 0x62
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d802      	bhi.n	8004eb4 <VL53L1_StartMeasurement+0xb4>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004eae:	f06f 000d 	mvn.w	r0, #13
 8004eb2:	e7ee      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
	switch (CurrPalState) {
 8004eb4:	f06f 0002 	mvn.w	r0, #2
 8004eb8:	e7eb      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
	if ((Status == VL53L1_ERROR_NONE) &&
 8004eba:	2d40      	cmp	r5, #64	@ 0x40
 8004ebc:	d00c      	beq.n	8004ed8 <VL53L1_StartMeasurement+0xd8>
		Status = VL53L1_init_and_start_range(
 8004ebe:	2206      	movs	r2, #6
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f001 fa46 	bl	8006354 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d1e2      	bne.n	8004e92 <VL53L1_StartMeasurement+0x92>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004ecc:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f884 3f50 	strb.w	r3, [r4, #3920]	@ 0xf50
 8004ed6:	e7dc      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004ed8:	a901      	add	r1, sp, #4
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff ff0c 	bl	8004cf8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		MTBus /= 1000;
 8004ee0:	9b01      	ldr	r3, [sp, #4]
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <VL53L1_StartMeasurement+0x118>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	9301      	str	r3, [sp, #4]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004eec:	4669      	mov	r1, sp
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f7ff f93e 	bl	8004170 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8004ef4:	9b01      	ldr	r3, [sp, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	9a00      	ldr	r2, [sp, #0]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d9df      	bls.n	8004ebe <VL53L1_StartMeasurement+0xbe>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004efe:	f06f 0003 	mvn.w	r0, #3
 8004f02:	e7c6      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004f04:	f06f 000d 	mvn.w	r0, #13
 8004f08:	e7c3      	b.n	8004e92 <VL53L1_StartMeasurement+0x92>
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w
	...
 8004f18:	10624dd3 	.word	0x10624dd3

08004f1c <VL53L1_StopMeasurement>:
{
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4604      	mov	r4, r0
	Status = VL53L1_stop_range(Dev);
 8004f20:	f001 f8cb 	bl	80060ba <VL53L1_stop_range>
 8004f24:	4605      	mov	r5, r0
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004f26:	7ee3      	ldrb	r3, [r4, #27]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d107      	bne.n	8004f3c <VL53L1_StopMeasurement+0x20>
	if (Status == VL53L1_ERROR_NONE)
 8004f2c:	b925      	cbnz	r5, 8004f38 <VL53L1_StopMeasurement+0x1c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8004f2e:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 8004f32:	2303      	movs	r3, #3
 8004f34:	f884 3f50 	strb.w	r3, [r4, #3920]	@ 0xf50
}
 8004f38:	4628      	mov	r0, r5
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_unload_patch(Dev);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 fa50 	bl	80053e2 <VL53L1_unload_patch>
 8004f42:	e7f3      	b.n	8004f2c <VL53L1_StopMeasurement+0x10>

08004f44 <VL53L1_ClearInterruptAndStartMeasurement>:
{
 8004f44:	b508      	push	{r3, lr}
	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8004f46:	7ec1      	ldrb	r1, [r0, #27]
 8004f48:	f001 fb3c 	bl	80065c4 <VL53L1_clear_interrupt_and_enable_next_range>
}
 8004f4c:	bd08      	pop	{r3, pc}

08004f4e <VL53L1_GetMeasurementDataReady>:
{
 8004f4e:	b508      	push	{r3, lr}
	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8004f50:	f009 f8c0 	bl	800e0d4 <VL53L1_is_new_data_ready>
}
 8004f54:	bd08      	pop	{r3, pc}

08004f56 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004f56:	b570      	push	{r4, r5, r6, lr}
 8004f58:	4604      	mov	r4, r0
 8004f5a:	460d      	mov	r5, r1
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8004f5c:	f500 56ac 	add.w	r6, r0, #5504	@ 0x1580
 8004f60:	3610      	adds	r6, #16
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8004f62:	2280      	movs	r2, #128	@ 0x80
 8004f64:	21ff      	movs	r1, #255	@ 0xff
 8004f66:	4628      	mov	r0, r5
 8004f68:	f009 fd67 	bl	800ea3a <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4620      	mov	r0, r4
 8004f72:	f002 fa97 	bl	80074a4 <VL53L1_get_device_results>
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8004f76:	b988      	cbnz	r0, 8004f9c <VL53L1_GetMultiRangingData+0x46>
		switch (presults->rd_device_state) {
 8004f78:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8004f7c:	f893 3591 	ldrb.w	r3, [r3, #1425]	@ 0x591
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	d004      	beq.n	8004f8e <VL53L1_GetMultiRangingData+0x38>
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00a      	beq.n	8004f9e <VL53L1_GetMultiRangingData+0x48>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
					VL53L1_ROISTATUS_VALID_LAST;
			break;
		default:
			pMultiRangingData->RoiStatus =
 8004f88:	2300      	movs	r3, #0
 8004f8a:	71eb      	strb	r3, [r5, #7]
 8004f8c:	e001      	b.n	8004f92 <VL53L1_GetMultiRangingData+0x3c>
			pMultiRangingData->RoiStatus =
 8004f8e:	2301      	movs	r3, #1
 8004f90:	71eb      	strb	r3, [r5, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8004f92:	462a      	mov	r2, r5
 8004f94:	4631      	mov	r1, r6
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff fcde 	bl	8004958 <SetMeasurementData>

	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
			pMultiRangingData->RoiStatus =
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	71eb      	strb	r3, [r5, #7]
			break;
 8004fa2:	e7f6      	b.n	8004f92 <VL53L1_GetMultiRangingData+0x3c>

08004fa4 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	4604      	mov	r4, r0
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8004faa:	f240 3305 	movw	r3, #773	@ 0x305
 8004fae:	f8ad 3000 	strh.w	r3, [sp]
	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	pc = &pdev->customer;

	PresetMode = VL53L1DevDataGet(Dev,
 8004fb2:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 8004fb6:	f893 6f54 	ldrb.w	r6, [r3, #3924]	@ 0xf54
			CurrentParameters.PresetMode);

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8004fba:	f10d 011f 	add.w	r1, sp, #31
 8004fbe:	f000 f8f4 	bl	80051aa <VL53L1_run_ref_spad_char>
 8004fc2:	4605      	mov	r5, r0

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8004fc4:	f110 0f1d 	cmn.w	r0, #29
 8004fc8:	d006      	beq.n	8004fd8 <VL53L1_PerformRefSpadManagement+0x34>
			pc->global_config__spad_enables_ref_5 = commbuf[5];
		}

	}

	VL53L1_SetPresetMode(Dev, PresetMode);
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7ff fe69 	bl	8004ca4 <VL53L1_SetPresetMode>
#endif

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	b008      	add	sp, #32
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_read_nvm_raw_data(Dev,
 8004fd8:	ab01      	add	r3, sp, #4
 8004fda:	2206      	movs	r2, #6
 8004fdc:	2128      	movs	r1, #40	@ 0x28
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f008 f8eb 	bl	800d1ba <VL53L1_read_nvm_raw_data>
		if (Status == VL53L1_ERROR_NONE)
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	b318      	cbz	r0, 8005030 <VL53L1_PerformRefSpadManagement+0x8c>
		if (Status == VL53L1_ERROR_NONE)
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	d1ee      	bne.n	8004fca <VL53L1_PerformRefSpadManagement+0x26>
			Status = VL53L1_WriteMulti(Dev,
 8004fec:	2306      	movs	r3, #6
 8004fee:	aa05      	add	r2, sp, #20
 8004ff0:	210d      	movs	r1, #13
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f008 f956 	bl	800d2a4 <VL53L1_WriteMulti>
		if (Status == VL53L1_ERROR_NONE) {
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d1e5      	bne.n	8004fca <VL53L1_PerformRefSpadManagement+0x26>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8004ffe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005002:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8005006:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800500a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 800500e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005012:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8005016:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800501a:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800501e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005022:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8005026:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800502a:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
 800502e:	e7cc      	b.n	8004fca <VL53L1_PerformRefSpadManagement+0x26>
			Status = VL53L1_WriteMulti(Dev,
 8005030:	2302      	movs	r3, #2
 8005032:	466a      	mov	r2, sp
 8005034:	2114      	movs	r1, #20
 8005036:	4620      	mov	r0, r4
 8005038:	f008 f934 	bl	800d2a4 <VL53L1_WriteMulti>
		if (Status == VL53L1_ERROR_NONE) {
 800503c:	4605      	mov	r5, r0
 800503e:	2800      	cmp	r0, #0
 8005040:	d1c3      	bne.n	8004fca <VL53L1_PerformRefSpadManagement+0x26>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8005042:	f89d 3000 	ldrb.w	r3, [sp]
 8005046:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
			pc->ref_spad_man__ref_location = numloc[1];
 800504a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800504e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8005052:	e7c9      	b.n	8004fe8 <VL53L1_PerformRefSpadManagement+0x44>

08005054 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4604      	mov	r4, r0
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
	VL53L1_Error s3 = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	switch (Mode) {
 8005058:	2903      	cmp	r1, #3
 800505a:	d83b      	bhi.n	80050d4 <VL53L1_SmudgeCorrectionEnable+0x80>
 800505c:	e8df f001 	tbb	[pc, r1]
 8005060:	2d201302 	.word	0x2d201302
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8005064:	f002 fd19 	bl	8007a9a <VL53L1_dynamic_xtalk_correction_disable>
 8005068:	4605      	mov	r5, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800506a:	4620      	mov	r0, r4
 800506c:	f002 fd22 	bl	8007ab4 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8005070:	4606      	mov	r6, r0
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8005072:	4620      	mov	r0, r4
 8005074:	f002 fd2b 	bl	8007ace <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8005078:	4603      	mov	r3, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800507a:	2000      	movs	r0, #0
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
		break;
	}

	if (Status == VL53L1_ERROR_NONE) {
 800507c:	bb88      	cbnz	r0, 80050e2 <VL53L1_SmudgeCorrectionEnable+0x8e>
		Status = s1;
		if (Status == VL53L1_ERROR_NONE)
 800507e:	bb7d      	cbnz	r5, 80050e0 <VL53L1_SmudgeCorrectionEnable+0x8c>
			Status = s2;
		if (Status == VL53L1_ERROR_NONE)
 8005080:	b386      	cbz	r6, 80050e4 <VL53L1_SmudgeCorrectionEnable+0x90>
			Status = s2;
 8005082:	4630      	mov	r0, r6
 8005084:	e02d      	b.n	80050e2 <VL53L1_SmudgeCorrectionEnable+0x8e>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8005086:	f002 fd01 	bl	8007a8c <VL53L1_dynamic_xtalk_correction_enable>
 800508a:	4605      	mov	r5, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800508c:	4620      	mov	r0, r4
 800508e:	f002 fd0a 	bl	8007aa6 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8005092:	4606      	mov	r6, r0
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8005094:	4620      	mov	r0, r4
 8005096:	f002 fd1a 	bl	8007ace <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800509a:	4603      	mov	r3, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800509c:	2000      	movs	r0, #0
		break;
 800509e:	e7ed      	b.n	800507c <VL53L1_SmudgeCorrectionEnable+0x28>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80050a0:	f002 fcf4 	bl	8007a8c <VL53L1_dynamic_xtalk_correction_enable>
 80050a4:	4605      	mov	r5, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 80050a6:	4620      	mov	r0, r4
 80050a8:	f002 fcfd 	bl	8007aa6 <VL53L1_dynamic_xtalk_correction_apply_enable>
 80050ac:	4606      	mov	r6, r0
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 80050ae:	4620      	mov	r0, r4
 80050b0:	f002 fd06 	bl	8007ac0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 80050b4:	4603      	mov	r3, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80050b6:	2000      	movs	r0, #0
		break;
 80050b8:	e7e0      	b.n	800507c <VL53L1_SmudgeCorrectionEnable+0x28>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80050ba:	f002 fce7 	bl	8007a8c <VL53L1_dynamic_xtalk_correction_enable>
 80050be:	4605      	mov	r5, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80050c0:	4620      	mov	r0, r4
 80050c2:	f002 fcf7 	bl	8007ab4 <VL53L1_dynamic_xtalk_correction_apply_disable>
 80050c6:	4606      	mov	r6, r0
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80050c8:	4620      	mov	r0, r4
 80050ca:	f002 fd00 	bl	8007ace <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80050ce:	4603      	mov	r3, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80050d0:	2000      	movs	r0, #0
		break;
 80050d2:	e7d3      	b.n	800507c <VL53L1_SmudgeCorrectionEnable+0x28>
	switch (Mode) {
 80050d4:	2300      	movs	r3, #0
 80050d6:	461e      	mov	r6, r3
 80050d8:	461d      	mov	r5, r3
 80050da:	f06f 0003 	mvn.w	r0, #3
 80050de:	e7cd      	b.n	800507c <VL53L1_SmudgeCorrectionEnable+0x28>
		Status = s1;
 80050e0:	4628      	mov	r0, r5
			Status = s3;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
			Status = s3;
 80050e4:	4618      	mov	r0, r3
 80050e6:	e7fc      	b.n	80050e2 <VL53L1_SmudgeCorrectionEnable+0x8e>

080050e8 <VL53L1_StaticInit>:
{
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4604      	mov	r4, r0
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80050ec:	f500 46c0 	add.w	r6, r0, #24576	@ 0x6000
 80050f0:	2303      	movs	r3, #3
 80050f2:	f886 3f50 	strb.w	r3, [r6, #3920]	@ 0xf50
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80050f6:	2320      	movs	r3, #32
 80050f8:	76c3      	strb	r3, [r0, #27]
	Status = VL53L1_SetPresetMode(Dev,
 80050fa:	2101      	movs	r1, #1
 80050fc:	f7ff fdd2 	bl	8004ca4 <VL53L1_SetPresetMode>
 8005100:	4605      	mov	r5, r0
	VL53L1_SetDistanceMode(Dev,
 8005102:	2102      	movs	r1, #2
 8005104:	4620      	mov	r0, r4
 8005106:	f7fe ffe1 	bl	80040cc <VL53L1_SetDistanceMode>
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 800510a:	2301      	movs	r3, #1
 800510c:	f886 3f55 	strb.w	r3, [r6, #3925]	@ 0xf55
	VL53L1_SmudgeCorrectionEnable(Dev,
 8005110:	2100      	movs	r1, #0
 8005112:	4620      	mov	r0, r4
 8005114:	f7ff ff9e 	bl	8005054 <VL53L1_SmudgeCorrectionEnable>
}
 8005118:	4628      	mov	r0, r5
 800511a:	bd70      	pop	{r4, r5, r6, pc}

0800511c <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 800511c:	b530      	push	{r4, r5, lr}
 800511e:	b083      	sub	sp, #12
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	f88d 3003 	strb.w	r3, [sp, #3]



	if (status == VL53L1_ERROR_NONE)
		status =
			VL53L1_RdByte(
 800512a:	f10d 0203 	add.w	r2, sp, #3
 800512e:	2130      	movs	r1, #48	@ 0x30
 8005130:	f008 f920 	bl	800d374 <VL53L1_RdByte>
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8005134:	4603      	mov	r3, r0
 8005136:	b150      	cbz	r0, 800514e <VL53L1_run_device_test+0x32>
		status = VL53L1_start_test(
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8005138:	b19b      	cbz	r3, 8005162 <VL53L1_run_device_test+0x46>
		pdev->sys_results.result__report_status = comms_buffer[1];
	}



	pdev->sys_results.result__range_status &=
 800513a:	f894 23c7 	ldrb.w	r2, [r4, #967]	@ 0x3c7
 800513e:	f002 021f 	and.w	r2, r2, #31
 8005142:	f884 23c7 	strb.w	r2, [r4, #967]	@ 0x3c7
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8005146:	b323      	cbz	r3, 8005192 <VL53L1_run_device_test+0x76>
				0x00);

	LOG_FUNCTION_END(status);

	return status;
}
 8005148:	4618      	mov	r0, r3
 800514a:	b003      	add	sp, #12
 800514c:	bd30      	pop	{r4, r5, pc}
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 800514e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005152:	f884 336a 	strb.w	r3, [r4, #874]	@ 0x36a
		status = VL53L1_start_test(
 8005156:	4629      	mov	r1, r5
 8005158:	4620      	mov	r0, r4
 800515a:	f004 faa1 	bl	80096a0 <VL53L1_start_test>
 800515e:	4603      	mov	r3, r0
 8005160:	e7ea      	b.n	8005138 <VL53L1_run_device_test+0x1c>
		status = VL53L1_wait_for_test_completion(Dev);
 8005162:	4620      	mov	r0, r4
 8005164:	f009 f806 	bl	800e174 <VL53L1_wait_for_test_completion>
	if (status == VL53L1_ERROR_NONE)
 8005168:	4603      	mov	r3, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d1e5      	bne.n	800513a <VL53L1_run_device_test+0x1e>
			VL53L1_ReadMulti(
 800516e:	2302      	movs	r3, #2
 8005170:	aa01      	add	r2, sp, #4
 8005172:	2189      	movs	r1, #137	@ 0x89
 8005174:	4620      	mov	r0, r4
 8005176:	f008 f8b5 	bl	800d2e4 <VL53L1_ReadMulti>
	if (status == VL53L1_ERROR_NONE) {
 800517a:	4603      	mov	r3, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1dc      	bne.n	800513a <VL53L1_run_device_test+0x1e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8005180:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005184:	f884 23c7 	strb.w	r2, [r4, #967]	@ 0x3c7
		pdev->sys_results.result__report_status = comms_buffer[1];
 8005188:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800518c:	f884 23c8 	strb.w	r2, [r4, #968]	@ 0x3c8
 8005190:	e7d3      	b.n	800513a <VL53L1_run_device_test+0x1e>
			status = VL53L1_clear_interrupt(Dev);
 8005192:	4620      	mov	r0, r4
 8005194:	f004 faae 	bl	80096f4 <VL53L1_clear_interrupt>
	if (status == VL53L1_ERROR_NONE)
 8005198:	4603      	mov	r3, r0
 800519a:	2800      	cmp	r0, #0
 800519c:	d1d4      	bne.n	8005148 <VL53L1_run_device_test+0x2c>
			VL53L1_start_test(
 800519e:	2100      	movs	r1, #0
 80051a0:	4620      	mov	r0, r4
 80051a2:	f004 fa7d 	bl	80096a0 <VL53L1_start_test>
 80051a6:	4603      	mov	r3, r0
 80051a8:	e7ce      	b.n	8005148 <VL53L1_run_device_test+0x2c>

080051aa <VL53L1_run_ref_spad_char>:
{
 80051aa:	b530      	push	{r4, r5, lr}
 80051ac:	b087      	sub	sp, #28
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
		status = VL53L1_enable_powerforce(Dev);
 80051b2:	f004 fa95 	bl	80096e0 <VL53L1_enable_powerforce>
	if (status == VL53L1_ERROR_NONE)
 80051b6:	4603      	mov	r3, r0
 80051b8:	b120      	cbz	r0, 80051c4 <VL53L1_run_ref_spad_char+0x1a>
	if (status == VL53L1_ERROR_NONE)
 80051ba:	b1fb      	cbz	r3, 80051fc <VL53L1_run_ref_spad_char+0x52>
	*pcal_status = status;
 80051bc:	702b      	strb	r3, [r5, #0]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	b007      	add	sp, #28
 80051c2:	bd30      	pop	{r4, r5, pc}
		VL53L1_set_ref_spad_char_config(
 80051c4:	f8b4 333e 	ldrh.w	r3, [r4, #830]	@ 0x33e
 80051c8:	9302      	str	r3, [sp, #8]
 80051ca:	f8b4 3262 	ldrh.w	r3, [r4, #610]	@ 0x262
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	f8b4 3260 	ldrh.w	r3, [r4, #608]	@ 0x260
 80051da:	f8d4 225c 	ldr.w	r2, [r4, #604]	@ 0x25c
 80051de:	f894 1259 	ldrb.w	r1, [r4, #601]	@ 0x259
 80051e2:	4620      	mov	r0, r4
 80051e4:	f005 fb32 	bl	800a84c <VL53L1_set_ref_spad_char_config>
	if (status == VL53L1_ERROR_NONE)
 80051e8:	4603      	mov	r3, r0
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d1e6      	bne.n	80051bc <VL53L1_run_ref_spad_char+0x12>
		status = VL53L1_run_device_test(
 80051ee:	f894 1258 	ldrb.w	r1, [r4, #600]	@ 0x258
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7ff ff92 	bl	800511c <VL53L1_run_device_test>
 80051f8:	4603      	mov	r3, r0
 80051fa:	e7de      	b.n	80051ba <VL53L1_run_ref_spad_char+0x10>
		VL53L1_ReadMulti(
 80051fc:	2302      	movs	r3, #2
 80051fe:	aa04      	add	r2, sp, #16
 8005200:	21d9      	movs	r1, #217	@ 0xd9
 8005202:	4620      	mov	r0, r4
 8005204:	f008 f86e 	bl	800d2e4 <VL53L1_ReadMulti>
	if (status == VL53L1_ERROR_NONE) {
 8005208:	4603      	mov	r3, r0
 800520a:	2800      	cmp	r0, #0
 800520c:	d1d6      	bne.n	80051bc <VL53L1_run_ref_spad_char+0x12>
				comms_buffer[0];
 800520e:	f89d 2010 	ldrb.w	r2, [sp, #16]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8005212:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8005216:	f883 23bf 	strb.w	r2, [r3, #959]	@ 0x3bf
				comms_buffer[1];
 800521a:	f89d 2011 	ldrb.w	r2, [sp, #17]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 800521e:	f883 23c0 	strb.w	r2, [r3, #960]	@ 0x3c0
			VL53L1_WriteMulti(
 8005222:	2302      	movs	r3, #2
 8005224:	aa04      	add	r2, sp, #16
 8005226:	2114      	movs	r1, #20
 8005228:	4620      	mov	r0, r4
 800522a:	f008 f83b 	bl	800d2a4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 800522e:	4603      	mov	r3, r0
 8005230:	2800      	cmp	r0, #0
 8005232:	d1c3      	bne.n	80051bc <VL53L1_run_ref_spad_char+0x12>
				comms_buffer[0];
 8005234:	f89d 3010 	ldrb.w	r3, [sp, #16]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8005238:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
				comms_buffer[1];
 800523c:	f89d 3011 	ldrb.w	r3, [sp, #17]
		pdev->customer.ref_spad_man__ref_location =
 8005240:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
			VL53L1_ReadMulti(
 8005244:	2306      	movs	r3, #6
 8005246:	aa04      	add	r2, sp, #16
 8005248:	21ac      	movs	r1, #172	@ 0xac
 800524a:	4620      	mov	r0, r4
 800524c:	f008 f84a 	bl	800d2e4 <VL53L1_ReadMulti>
	if (status == VL53L1_ERROR_NONE)
 8005250:	4603      	mov	r3, r0
 8005252:	2800      	cmp	r0, #0
 8005254:	d1b2      	bne.n	80051bc <VL53L1_run_ref_spad_char+0x12>
			VL53L1_WriteMulti(
 8005256:	2306      	movs	r3, #6
 8005258:	aa04      	add	r2, sp, #16
 800525a:	210d      	movs	r1, #13
 800525c:	4620      	mov	r0, r4
 800525e:	f008 f821 	bl	800d2a4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 8005262:	4603      	mov	r3, r0
 8005264:	2800      	cmp	r0, #0
 8005266:	d1a9      	bne.n	80051bc <VL53L1_run_ref_spad_char+0x12>
				comms_buffer[0];
 8005268:	f89d 2010 	ldrb.w	r2, [sp, #16]
		pdev->customer.global_config__spad_enables_ref_0 =
 800526c:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
				comms_buffer[1];
 8005270:	f89d 2011 	ldrb.w	r2, [sp, #17]
		pdev->customer.global_config__spad_enables_ref_1 =
 8005274:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
				comms_buffer[2];
 8005278:	f89d 2012 	ldrb.w	r2, [sp, #18]
		pdev->customer.global_config__spad_enables_ref_2 =
 800527c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
				comms_buffer[3];
 8005280:	f89d 2013 	ldrb.w	r2, [sp, #19]
		pdev->customer.global_config__spad_enables_ref_3 =
 8005284:	f884 2063 	strb.w	r2, [r4, #99]	@ 0x63
				comms_buffer[4];
 8005288:	f89d 2014 	ldrb.w	r2, [sp, #20]
		pdev->customer.global_config__spad_enables_ref_4 =
 800528c:	f884 2064 	strb.w	r2, [r4, #100]	@ 0x64
				comms_buffer[5];
 8005290:	f89d 2015 	ldrb.w	r2, [sp, #21]
		pdev->customer.global_config__spad_enables_ref_5 =
 8005294:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
		switch (pdev->sys_results.result__range_status) {
 8005298:	f894 23c7 	ldrb.w	r2, [r4, #967]	@ 0x3c7
 800529c:	2a0f      	cmp	r2, #15
 800529e:	d006      	beq.n	80052ae <VL53L1_run_ref_spad_char+0x104>
 80052a0:	2a10      	cmp	r2, #16
 80052a2:	d007      	beq.n	80052b4 <VL53L1_run_ref_spad_char+0x10a>
 80052a4:	2a0e      	cmp	r2, #14
 80052a6:	d189      	bne.n	80051bc <VL53L1_run_ref_spad_char+0x12>
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 80052a8:	f06f 031b 	mvn.w	r3, #27
 80052ac:	e786      	b.n	80051bc <VL53L1_run_ref_spad_char+0x12>
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 80052ae:	f06f 031c 	mvn.w	r3, #28
 80052b2:	e783      	b.n	80051bc <VL53L1_run_ref_spad_char+0x12>
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80052b4:	f06f 031d 	mvn.w	r3, #29
 80052b8:	e780      	b.n	80051bc <VL53L1_run_ref_spad_char+0x12>

080052ba <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 80052ba:	4603      	mov	r3, r0
	VL53L1_Error status = VL53L1_ERROR_NONE;
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80052bc:	7842      	ldrb	r2, [r0, #1]
 80052be:	2a1e      	cmp	r2, #30
 80052c0:	d01e      	beq.n	8005300 <select_offset_per_vcsel+0x46>
 80052c2:	2a21      	cmp	r2, #33	@ 0x21
 80052c4:	d00c      	beq.n	80052e0 <select_offset_per_vcsel+0x26>
 80052c6:	2a1b      	cmp	r2, #27
 80052c8:	d022      	beq.n	8005310 <select_offset_per_vcsel+0x56>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
		break;
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80052ca:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 80052ce:	f9b2 cd80 	ldrsh.w	ip, [r2, #3456]	@ 0xd80
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80052d2:	f9b2 2d82 	ldrsh.w	r2, [r2, #3458]	@ 0xd82
		status = VL53L1_ERROR_INVALID_PARAMS;
		*poffset = 0;
 80052d6:	2000      	movs	r0, #0
 80052d8:	8008      	strh	r0, [r1, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80052da:	f06f 0003 	mvn.w	r0, #3
		break;
 80052de:	e006      	b.n	80052ee <select_offset_per_vcsel+0x34>
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80052e0:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 80052e4:	f9b2 cd78 	ldrsh.w	ip, [r2, #3448]	@ 0xd78
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80052e8:	f9b2 2d7a 	ldrsh.w	r2, [r2, #3450]	@ 0xd7a
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80052ec:	2000      	movs	r0, #0
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 80052ee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	if (status == VL53L1_ERROR_NONE)
 80052f2:	b920      	cbnz	r0, 80052fe <select_offset_per_vcsel+0x44>
		*poffset = (isc & 0x01) ? tA : tB;
 80052f4:	f013 0f01 	tst.w	r3, #1
 80052f8:	d000      	beq.n	80052fc <select_offset_per_vcsel+0x42>
 80052fa:	4662      	mov	r2, ip
 80052fc:	800a      	strh	r2, [r1, #0]

	return status;
}
 80052fe:	4770      	bx	lr
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8005300:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 8005304:	f9b2 cd7c 	ldrsh.w	ip, [r2, #3452]	@ 0xd7c
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8005308:	f9b2 2d7e 	ldrsh.w	r2, [r2, #3454]	@ 0xd7e
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800530c:	2000      	movs	r0, #0
		break;
 800530e:	e7ee      	b.n	80052ee <select_offset_per_vcsel+0x34>
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8005310:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 8005314:	f9b2 cd80 	ldrsh.w	ip, [r2, #3456]	@ 0xd80
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8005318:	f9b2 2d82 	ldrsh.w	r2, [r2, #3458]	@ 0xd82
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800531c:	2000      	movs	r0, #0
		break;
 800531e:	e7e6      	b.n	80052ee <select_offset_per_vcsel+0x34>

08005320 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	468b      	mov	fp, r1
 8005326:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 800532a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
	uint16_t   bin                      = 0;
	int32_t    total_rate_pre = 0;
	int32_t    total_rate_cur = 0;
	int32_t    PrevBin, CurrBin;
	uint8_t    roi = pdev->ll_state.rd_zone_id;
 800532e:	f890 e039 	ldrb.w	lr, [r0, #57]	@ 0x39

	total_rate_pre = 0;
	total_rate_cur = 0;
	*pdiff_histo_stddev = 0;
 8005332:	2400      	movs	r4, #0
 8005334:	f8c8 4000 	str.w	r4, [r8]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8005338:	0097      	lsls	r7, r2, #2
 800533a:	46b9      	mov	r9, r7
	total_rate_cur = 0;
 800533c:	4626      	mov	r6, r4
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800533e:	e01c      	b.n	800537a <vl53l1_diff_histo_stddev+0x5a>
		total_rate_pre +=
		pdev->multi_bins_rec[roi][prev_pos][timing][bin];
 8005340:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
 8005344:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8005348:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800534c:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
 8005350:	eb0e 0ace 	add.w	sl, lr, lr, lsl #3
 8005354:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 8005358:	44cc      	add	ip, r9
 800535a:	f50c 6cec 	add.w	ip, ip, #1888	@ 0x760
 800535e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005362:	f8dc c004 	ldr.w	ip, [ip, #4]
		total_rate_pre +=
 8005366:	4464      	add	r4, ip
		total_rate_cur += pdata->bin_data[bin];
 8005368:	f109 0c06 	add.w	ip, r9, #6
 800536c:	f85b c02c 	ldr.w	ip, [fp, ip, lsl #2]
 8005370:	4466      	add	r6, ip
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8005372:	f109 0901 	add.w	r9, r9, #1
 8005376:	fa1f f989 	uxth.w	r9, r9
 800537a:	454b      	cmp	r3, r9
 800537c:	d8e0      	bhi.n	8005340 <vl53l1_diff_histo_stddev+0x20>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800537e:	b104      	cbz	r4, 8005382 <vl53l1_diff_histo_stddev+0x62>
 8005380:	bb66      	cbnz	r6, 80053dc <vl53l1_diff_histo_stddev+0xbc>
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
					(PrevBin - CurrBin);
	}

}
 8005382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			PrevBin = pdev->multi_bins_rec[roi][prev_pos][timing][bin];
 8005386:	eb02 0942 	add.w	r9, r2, r2, lsl #1
 800538a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800538e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005392:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8005396:	eb0e 09ce 	add.w	r9, lr, lr, lsl #3
 800539a:	eb0c 1c49 	add.w	ip, ip, r9, lsl #5
 800539e:	44bc      	add	ip, r7
 80053a0:	f50c 6cec 	add.w	ip, ip, #1888	@ 0x760
 80053a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80053a8:	f8dc c004 	ldr.w	ip, [ip, #4]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80053ac:	f44f 7a7a 	mov.w	sl, #1000	@ 0x3e8
 80053b0:	fb0a fc0c 	mul.w	ip, sl, ip
 80053b4:	fb9c fcf4 	sdiv	ip, ip, r4
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80053b8:	f107 0906 	add.w	r9, r7, #6
 80053bc:	f85b 9029 	ldr.w	r9, [fp, r9, lsl #2]
 80053c0:	fb0a f909 	mul.w	r9, sl, r9
 80053c4:	fb99 f9f6 	sdiv	r9, r9, r6
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80053c8:	ebac 0c09 	sub.w	ip, ip, r9
 80053cc:	f8d8 1000 	ldr.w	r1, [r8]
 80053d0:	fb0c 1c0c 	mla	ip, ip, ip, r1
 80053d4:	f8c8 c000 	str.w	ip, [r8]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80053d8:	3701      	adds	r7, #1
 80053da:	b2bf      	uxth	r7, r7
 80053dc:	42bb      	cmp	r3, r7
 80053de:	d8d2      	bhi.n	8005386 <vl53l1_diff_histo_stddev+0x66>
 80053e0:	e7cf      	b.n	8005382 <vl53l1_diff_histo_stddev+0x62>

080053e2 <VL53L1_unload_patch>:

	return status;
}

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 80053e2:	b510      	push	{r4, lr}
 80053e4:	4604      	mov	r4, r0
	VL53L1_Error status = VL53L1_ERROR_NONE;

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WrByte(Dev,
 80053e6:	2200      	movs	r2, #0
 80053e8:	2185      	movs	r1, #133	@ 0x85
 80053ea:	f007 ff99 	bl	800d320 <VL53L1_WrByte>
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80053ee:	b108      	cbz	r0, 80053f4 <VL53L1_unload_patch+0x12>

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WrByte(Dev,
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80053f0:	b150      	cbz	r0, 8005408 <VL53L1_unload_patch+0x26>
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
}
 80053f2:	bd10      	pop	{r4, pc}
		VL53L1_disable_powerforce(Dev);
 80053f4:	4620      	mov	r0, r4
 80053f6:	f004 f978 	bl	80096ea <VL53L1_disable_powerforce>
		status = VL53L1_WrByte(Dev,
 80053fa:	2200      	movs	r2, #0
 80053fc:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8005400:	4620      	mov	r0, r4
 8005402:	f007 ff8d 	bl	800d320 <VL53L1_WrByte>
 8005406:	e7f3      	b.n	80053f0 <VL53L1_unload_patch+0xe>
		status = VL53L1_WrByte(Dev,
 8005408:	2201      	movs	r2, #1
 800540a:	2185      	movs	r1, #133	@ 0x85
 800540c:	4620      	mov	r0, r4
 800540e:	f007 ff87 	bl	800d320 <VL53L1_WrByte>
 8005412:	e7ee      	b.n	80053f2 <VL53L1_unload_patch+0x10>

08005414 <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005414:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8005418:	f8b3 33c4 	ldrh.w	r3, [r3, #964]	@ 0x3c4
 800541c:	b133      	cbz	r3, 800542c <VL53L1_set_inter_measurement_period_ms+0x18>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800541e:	62c1      	str	r1, [r0, #44]	@ 0x2c
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
 8005420:	fb01 f303 	mul.w	r3, r1, r3
		pdev->tim_cfg.system__intermeasurement_period =
 8005424:	f8c0 33a4 	str.w	r3, [r0, #932]	@ 0x3a4
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800542c:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005430:	4770      	bx	lr

08005432 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005432:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8005436:	f8b3 23c4 	ldrh.w	r2, [r3, #964]	@ 0x3c4
 800543a:	b132      	cbz	r2, 800544a <VL53L1_get_inter_measurement_period_ms+0x18>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE)
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 800543c:	f8d0 33a4 	ldr.w	r3, [r0, #932]	@ 0x3a4
 8005440:	fbb3 f3f2 	udiv	r3, r3, r2
		*pinter_measurement_period_ms =
 8005444:	600b      	str	r3, [r1, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005446:	2000      	movs	r0, #0
 8005448:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800544a:	f06f 000e 	mvn.w	r0, #14


	LOG_FUNCTION_END(status);

	return status;
}
 800544e:	4770      	bx	lr

08005450 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005450:	4684      	mov	ip, r0
 8005452:	4608      	mov	r0, r1
 8005454:	4611      	mov	r1, r2
 8005456:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005458:	f8bc 333e 	ldrh.w	r3, [ip, #830]	@ 0x33e
 800545c:	b18b      	cbz	r3, 8005482 <VL53L1_set_timeouts_us+0x32>
{
 800545e:	b510      	push	{r4, lr}
 8005460:	b082      	sub	sp, #8
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005462:	f8cc 0020 	str.w	r0, [ip, #32]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8005466:	f8cc 1024 	str.w	r1, [ip, #36]	@ 0x24
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800546a:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28

		status =
		VL53L1_calc_timeout_register_values(
 800546e:	f50c 7465 	add.w	r4, ip, #916	@ 0x394
 8005472:	9401      	str	r4, [sp, #4]
 8005474:	f20c 347e 	addw	r4, ip, #894	@ 0x37e
 8005478:	9400      	str	r4, [sp, #0]
 800547a:	f004 f9d0 	bl	800981e <VL53L1_calc_timeout_register_values>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800547e:	b002      	add	sp, #8
 8005480:	bd10      	pop	{r4, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005482:	f06f 000e 	mvn.w	r0, #14
}
 8005486:	4770      	bx	lr

08005488 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	4604      	mov	r4, r0
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800548e:	f8b0 033e 	ldrh.w	r0, [r0, #830]	@ 0x33e
 8005492:	b370      	cbz	r0, 80054f2 <VL53L1_get_timeouts_us+0x6a>
 8005494:	4688      	mov	r8, r1
 8005496:	4617      	mov	r7, r2
 8005498:	461e      	mov	r6, r3

	if (status == VL53L1_ERROR_NONE) {


		macro_period_us =
			VL53L1_calc_macro_period_us(
 800549a:	f894 139a 	ldrb.w	r1, [r4, #922]	@ 0x39a
 800549e:	f004 f931 	bl	8009704 <VL53L1_calc_macro_period_us>
 80054a2:	4605      	mov	r5, r0
			pdev->tim_cfg.range_config__vcsel_period_a);



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 80054a4:	4601      	mov	r1, r0
 80054a6:	f894 0385 	ldrb.w	r0, [r4, #901]	@ 0x385
 80054aa:	f004 f97c 	bl	80097a6 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 80054ae:	f8c8 0000 	str.w	r0, [r8]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80054b2:	f894 3394 	ldrb.w	r3, [r4, #916]	@ 0x394
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80054b6:	f894 0395 	ldrb.w	r0, [r4, #917]	@ 0x395
		timeout_encoded = (timeout_encoded << 8) +
 80054ba:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80054be:	4629      	mov	r1, r5
 80054c0:	b280      	uxth	r0, r0
 80054c2:	f004 f9a4 	bl	800980e <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 80054c6:	6038      	str	r0, [r7, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80054c8:	f894 3398 	ldrb.w	r3, [r4, #920]	@ 0x398
		timeout_encoded = (timeout_encoded << 8) +
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80054cc:	f894 0399 	ldrb.w	r0, [r4, #921]	@ 0x399
		timeout_encoded = (timeout_encoded << 8) +
 80054d0:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80054d4:	4629      	mov	r1, r5
 80054d6:	b280      	uxth	r0, r0
 80054d8:	f004 f999 	bl	800980e <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 80054dc:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80054de:	f8d8 3000 	ldr.w	r3, [r8]
 80054e2:	6223      	str	r3, [r4, #32]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	6263      	str	r3, [r4, #36]	@ 0x24
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80054e8:	6833      	ldr	r3, [r6, #0]
 80054ea:	62a3      	str	r3, [r4, #40]	@ 0x28
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80054ec:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80054ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80054f2:	f06f 000e 	mvn.w	r0, #14
 80054f6:	e7fa      	b.n	80054ee <VL53L1_get_timeouts_us+0x66>

080054f8 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80054f8:	2907      	cmp	r1, #7
 80054fa:	d813      	bhi.n	8005524 <VL53L1_get_sequence_config_bit+0x2c>

		if (bit_id > 0)
 80054fc:	b131      	cbz	r1, 800550c <VL53L1_get_sequence_config_bit+0x14>
			bit_mask  = 0x01 << bit_id;
 80054fe:	f04f 0c01 	mov.w	ip, #1
 8005502:	fa0c fc01 	lsl.w	ip, ip, r1
 8005506:	fa5f fc8c 	uxtb.w	ip, ip
 800550a:	e001      	b.n	8005510 <VL53L1_get_sequence_config_bit+0x18>
	uint8_t  bit_mask        = 0x01;
 800550c:	f04f 0c01 	mov.w	ip, #1

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005510:	f890 33bd 	ldrb.w	r3, [r0, #957]	@ 0x3bd
		*pvalue =
 8005514:	ea03 030c 	and.w	r3, r3, ip
 8005518:	7013      	strb	r3, [r2, #0]

		if (bit_id > 0)
 800551a:	b131      	cbz	r1, 800552a <VL53L1_get_sequence_config_bit+0x32>
			*pvalue  = *pvalue >> bit_id;
 800551c:	410b      	asrs	r3, r1
 800551e:	7013      	strb	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005520:	2000      	movs	r0, #0
 8005522:	4770      	bx	lr

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005524:	f06f 0003 	mvn.w	r0, #3
 8005528:	4770      	bx	lr
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800552a:	2000      	movs	r0, #0
	}

	return status;
}
 800552c:	4770      	bx	lr

0800552e <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800552e:	b538      	push	{r3, r4, r5, lr}
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8005534:	f200 32bb 	addw	r2, r0, #955	@ 0x3bb
 8005538:	7809      	ldrb	r1, [r1, #0]
 800553a:	7860      	ldrb	r0, [r4, #1]
 800553c:	f004 fcdb 	bl	8009ef6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8005540:	f505 726f 	add.w	r2, r5, #956	@ 0x3bc
 8005544:	78e1      	ldrb	r1, [r4, #3]
 8005546:	78a0      	ldrb	r0, [r4, #2]
 8005548:	f004 fceb 	bl	8009f22 <VL53L1_encode_zone_size>


	LOG_FUNCTION_END(status);

	return status;
}
 800554c:	2000      	movs	r0, #0
 800554e:	bd38      	pop	{r3, r4, r5, pc}

08005550 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	4605      	mov	r5, r0
 8005556:	460c      	mov	r4, r1


	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 8005558:	2600      	movs	r6, #0
 800555a:	f88d 6007 	strb.w	r6, [sp, #7]
	uint8_t  y       = 0;
 800555e:	f88d 6006 	strb.w	r6, [sp, #6]
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8005562:	f10d 0207 	add.w	r2, sp, #7
 8005566:	f10d 0106 	add.w	r1, sp, #6
 800556a:	f890 0422 	ldrb.w	r0, [r0, #1058]	@ 0x422
 800556e:	f006 f8d0 	bl	800b712 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005572:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005576:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8005578:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800557c:	7063      	strb	r3, [r4, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800557e:	f895 3423 	ldrb.w	r3, [r5, #1059]	@ 0x423

	pmm_roi->height = xy_size >> 4;
 8005582:	091a      	lsrs	r2, r3, #4
 8005584:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	70a3      	strb	r3, [r4, #2]

	LOG_FUNCTION_END(status);

	return status;
}
 800558c:	4630      	mov	r0, r6
 800558e:	b002      	add	sp, #8
 8005590:	bd70      	pop	{r4, r5, r6, pc}

08005592 <VL53L1_read_p2p_data>:
{
 8005592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005594:	b089      	sub	sp, #36	@ 0x24
 8005596:	4604      	mov	r4, r0
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8005598:	f100 06b4 	add.w	r6, r0, #180	@ 0xb4
		status = VL53L1_get_static_nvm_managed(
 800559c:	f500 714e 	add.w	r1, r0, #824	@ 0x338
 80055a0:	f008 f801 	bl	800d5a6 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 80055a4:	4605      	mov	r5, r0
 80055a6:	b1e0      	cbz	r0, 80055e2 <VL53L1_read_p2p_data+0x50>
	if (status == VL53L1_ERROR_NONE) {
 80055a8:	b395      	cbz	r5, 8005610 <VL53L1_read_p2p_data+0x7e>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80055aa:	f8b4 333e 	ldrh.w	r3, [r4, #830]	@ 0x33e
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b2:	d203      	bcs.n	80055bc <VL53L1_read_p2p_data+0x2a>
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80055b4:	f64b 43cc 	movw	r3, #48332	@ 0xbccc
 80055b8:	f8a4 333e 	strh.w	r3, [r4, #830]	@ 0x33e
	if (status == VL53L1_ERROR_NONE)
 80055bc:	2d00      	cmp	r5, #0
 80055be:	f000 8096 	beq.w	80056ee <VL53L1_read_p2p_data+0x15c>
	if (pdev->optical_centre.x_centre == 0 &&
 80055c2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	@ 0xd8
 80055c6:	b94b      	cbnz	r3, 80055dc <VL53L1_read_p2p_data+0x4a>
				pdev->mm_roi.x_centre << 4;
 80055c8:	f894 30d4 	ldrb.w	r3, [r4, #212]	@ 0xd4
 80055cc:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 80055ce:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
				pdev->mm_roi.y_centre << 4;
 80055d2:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 80055d6:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 80055d8:	f884 30d9 	strb.w	r3, [r4, #217]	@ 0xd9
}
 80055dc:	4628      	mov	r0, r5
 80055de:	b009      	add	sp, #36	@ 0x24
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = VL53L1_get_customer_nvm_managed(
 80055e2:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 80055e6:	4620      	mov	r0, r4
 80055e8:	f008 f88d 	bl	800d706 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 80055ec:	4605      	mov	r5, r0
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d1db      	bne.n	80055aa <VL53L1_read_p2p_data+0x18>
		status = VL53L1_get_nvm_copy_data(
 80055f2:	f204 37f2 	addw	r7, r4, #1010	@ 0x3f2
 80055f6:	4639      	mov	r1, r7
 80055f8:	4620      	mov	r0, r4
 80055fa:	f008 fc57 	bl	800deac <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 80055fe:	4605      	mov	r5, r0
 8005600:	2800      	cmp	r0, #0
 8005602:	d1d2      	bne.n	80055aa <VL53L1_read_p2p_data+0x18>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8005604:	f504 710e 	add.w	r1, r4, #568	@ 0x238
 8005608:	4638      	mov	r0, r7
 800560a:	f003 fe70 	bl	80092ee <VL53L1_copy_rtn_good_spads_to_buffer>
 800560e:	e7cb      	b.n	80055a8 <VL53L1_read_p2p_data+0x16>
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8005610:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005614:	f8c4 32a0 	str.w	r3, [r4, #672]	@ 0x2a0
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005618:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800561c:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005620:	f9b4 306e 	ldrsh.w	r3, [r4, #110]	@ 0x6e
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005624:	f8a4 32a6 	strh.w	r3, [r4, #678]	@ 0x2a6
			VL53L1_read_nvm_optical_centre(
 8005628:	f104 01d8 	add.w	r1, r4, #216	@ 0xd8
 800562c:	4620      	mov	r0, r4
 800562e:	f007 fddb 	bl	800d1e8 <VL53L1_read_nvm_optical_centre>
	if (status == VL53L1_ERROR_NONE)
 8005632:	4605      	mov	r5, r0
 8005634:	2800      	cmp	r0, #0
 8005636:	d1b8      	bne.n	80055aa <VL53L1_read_p2p_data+0x18>
			VL53L1_read_nvm_cal_peak_rate_map(
 8005638:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 800563c:	4620      	mov	r0, r4
 800563e:	f007 fde4 	bl	800d20a <VL53L1_read_nvm_cal_peak_rate_map>
	if (status == VL53L1_ERROR_NONE) {
 8005642:	4605      	mov	r5, r0
 8005644:	2800      	cmp	r0, #0
 8005646:	d1b0      	bne.n	80055aa <VL53L1_read_p2p_data+0x18>
			VL53L1_read_nvm_additional_offset_cal_data(
 8005648:	4631      	mov	r1, r6
 800564a:	4620      	mov	r0, r4
 800564c:	f007 fdee 	bl	800d22c <VL53L1_read_nvm_additional_offset_cal_data>
 8005650:	4605      	mov	r5, r0
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005652:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	@ 0xb8
 8005656:	b913      	cbnz	r3, 800565e <VL53L1_read_p2p_data+0xcc>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8005658:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	@ 0xba
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800565c:	b343      	cbz	r3, 80056b0 <VL53L1_read_p2p_data+0x11e>
	if (status == VL53L1_ERROR_NONE) {
 800565e:	2d00      	cmp	r5, #0
 8005660:	d1a3      	bne.n	80055aa <VL53L1_read_p2p_data+0x18>
			VL53L1_read_nvm_fmt_range_results_data(
 8005662:	aa04      	add	r2, sp, #16
 8005664:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005668:	4620      	mov	r0, r4
 800566a:	f007 fdf0 	bl	800d24e <VL53L1_read_nvm_fmt_range_results_data>
		if (status == VL53L1_ERROR_NONE) {
 800566e:	4605      	mov	r5, r0
 8005670:	2800      	cmp	r0, #0
 8005672:	d19a      	bne.n	80055aa <VL53L1_read_p2p_data+0x18>
			fmt_rrd.result__actual_effective_rtn_spads;
 8005674:	f8bd 3010 	ldrh.w	r3, [sp, #16]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8005678:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800567c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8005680:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
			fmt_rrd.measured_distance_mm;
 8005684:	f8bd 301c 	ldrh.w	r3, [sp, #28]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8005688:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800568c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	@ 0x7a
 8005690:	b34b      	cbz	r3, 80056e6 <VL53L1_read_p2p_data+0x154>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8005692:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8005696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800569a:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
			VL53L1_RdWord(
 800569e:	f504 529e 	add.w	r2, r4, #5056	@ 0x13c0
 80056a2:	3204      	adds	r2, #4
 80056a4:	21de      	movs	r1, #222	@ 0xde
 80056a6:	4620      	mov	r0, r4
 80056a8:	f007 fe80 	bl	800d3ac <VL53L1_RdWord>
 80056ac:	4605      	mov	r5, r0
 80056ae:	e77c      	b.n	80055aa <VL53L1_read_p2p_data+0x18>
					= 0x0080;
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
					= 0x0180;
 80056b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80056ba:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
			VL53L1_calc_mm_effective_spads(
 80056be:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 80056c2:	f104 02b6 	add.w	r2, r4, #182	@ 0xb6
 80056c6:	9203      	str	r2, [sp, #12]
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	2338      	movs	r3, #56	@ 0x38
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	23ff      	movs	r3, #255	@ 0xff
 80056d6:	22c7      	movs	r2, #199	@ 0xc7
 80056d8:	f894 1423 	ldrb.w	r1, [r4, #1059]	@ 0x423
 80056dc:	f894 0422 	ldrb.w	r0, [r4, #1058]	@ 0x422
 80056e0:	f004 fce5 	bl	800a0ae <VL53L1_calc_mm_effective_spads>
 80056e4:	e7bb      	b.n	800565e <VL53L1_read_p2p_data+0xcc>
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80056e6:	2314      	movs	r3, #20
 80056e8:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 80056ec:	e7d3      	b.n	8005696 <VL53L1_read_p2p_data+0x104>
			VL53L1_get_mode_mitigation_roi(
 80056ee:	f104 01d4 	add.w	r1, r4, #212	@ 0xd4
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff ff2c 	bl	8005550 <VL53L1_get_mode_mitigation_roi>
 80056f8:	4605      	mov	r5, r0
 80056fa:	e762      	b.n	80055c2 <VL53L1_read_p2p_data+0x30>

080056fc <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	4604      	mov	r4, r0
 8005700:	460d      	mov	r5, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8005702:	f101 031c 	add.w	r3, r1, #28
 8005706:	f100 02f6 	add.w	r2, r0, #246	@ 0xf6
 800570a:	315c      	adds	r1, #92	@ 0x5c
 800570c:	681e      	ldr	r6, [r3, #0]
 800570e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8005712:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8005716:	68d8      	ldr	r0, [r3, #12]
 8005718:	6016      	str	r6, [r2, #0]
 800571a:	f8c2 e004 	str.w	lr, [r2, #4]
 800571e:	f8c2 c008 	str.w	ip, [r2, #8]
 8005722:	60d0      	str	r0, [r2, #12]
 8005724:	3310      	adds	r3, #16
 8005726:	3210      	adds	r2, #16
 8005728:	428b      	cmp	r3, r1
 800572a:	d1ef      	bne.n	800570c <VL53L1_set_zone_config+0x10>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 800572c:	782b      	ldrb	r3, [r5, #0]
 800572e:	f884 30da 	strb.w	r3, [r4, #218]	@ 0xda
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8005732:	786b      	ldrb	r3, [r5, #1]
 8005734:	f884 30db 	strb.w	r3, [r4, #219]	@ 0xdb

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8005738:	f104 00da 	add.w	r0, r4, #218	@ 0xda
 800573c:	f008 fe4c 	bl	800e3d8 <VL53L1_init_zone_config_histogram_bins>



	if (pzone_cfg->active_zones == 0)
 8005740:	786b      	ldrb	r3, [r5, #1]
 8005742:	b913      	cbnz	r3, 800574a <VL53L1_set_zone_config+0x4e>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8005744:	f884 337f 	strb.w	r3, [r4, #895]	@ 0x37f

	LOG_FUNCTION_END(status);

	return status;

}
 8005748:	bd70      	pop	{r4, r5, r6, pc}
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 800574a:	2b0f      	cmp	r3, #15
 800574c:	d803      	bhi.n	8005756 <VL53L1_set_zone_config+0x5a>
				pzone_cfg->active_zones + 1;
 800574e:	3301      	adds	r3, #1
		pdev->gen_cfg.global_config__stream_divider =
 8005750:	f884 337f 	strb.w	r3, [r4, #895]	@ 0x37f
 8005754:	e7f8      	b.n	8005748 <VL53L1_set_zone_config+0x4c>
		pdev->gen_cfg.global_config__stream_divider =
 8005756:	2311      	movs	r3, #17
 8005758:	f884 337f 	strb.w	r3, [r4, #895]	@ 0x37f
 800575c:	e7f4      	b.n	8005748 <VL53L1_set_zone_config+0x4c>

0800575e <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800575e:	b508      	push	{r3, lr}
 8005760:	460b      	mov	r3, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8005762:	226c      	movs	r2, #108	@ 0x6c
 8005764:	f100 01da 	add.w	r1, r0, #218	@ 0xda
 8005768:	4618      	mov	r0, r3
 800576a:	f009 f9a5 	bl	800eab8 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
}
 800576e:	2000      	movs	r0, #0
 8005770:	bd08      	pop	{r3, pc}

08005772 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8005772:	3901      	subs	r1, #1
 8005774:	2926      	cmp	r1, #38	@ 0x26
 8005776:	f200 80d9 	bhi.w	800592c <VL53L1_get_preset_mode_timing_cfg+0x1ba>
 800577a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800577e:	0027      	.short	0x0027
 8005780:	00270027 	.word	0x00270027
 8005784:	00270027 	.word	0x00270027
 8005788:	00370037 	.word	0x00370037
 800578c:	00d70037 	.word	0x00d70037
 8005790:	005700d7 	.word	0x005700d7
 8005794:	00570097 	.word	0x00570097
 8005798:	00d700d7 	.word	0x00d700d7
 800579c:	002700d7 	.word	0x002700d7
 80057a0:	00570037 	.word	0x00570037
 80057a4:	00570057 	.word	0x00570057
 80057a8:	00570057 	.word	0x00570057
 80057ac:	00770067 	.word	0x00770067
 80057b0:	00570087 	.word	0x00570087
 80057b4:	00570057 	.word	0x00570057
 80057b8:	00a700a7 	.word	0x00a700a7
 80057bc:	00b700a7 	.word	0x00b700a7
 80057c0:	00b700b7 	.word	0x00b700b7
 80057c4:	00470047 	.word	0x00470047
 80057c8:	00c70047 	.word	0x00c70047
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 80057cc:	f8b0 1174 	ldrh.w	r1, [r0, #372]	@ 0x174
		*pdss_config__target_total_rate_mcps =
 80057d0:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80057d2:	f8d0 2180 	ldr.w	r2, [r0, #384]	@ 0x180
		*pphasecal_config_timeout_us =
 80057d6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 80057d8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
		*pmm_config_timeout_us =
 80057dc:	9a00      	ldr	r2, [sp, #0]
 80057de:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 80057e0:	f8d0 31b4 	ldr.w	r3, [r0, #436]	@ 0x1b4
		*prange_config_timeout_us =
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80057e8:	2000      	movs	r0, #0
	break;
 80057ea:	4770      	bx	lr
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80057ec:	f8b0 117a 	ldrh.w	r1, [r0, #378]	@ 0x17a
		*pdss_config__target_total_rate_mcps =
 80057f0:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80057f2:	f8d0 219c 	ldr.w	r2, [r0, #412]	@ 0x19c
		*pphasecal_config_timeout_us =
 80057f6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 80057f8:	f8d0 31ac 	ldr.w	r3, [r0, #428]	@ 0x1ac
		*pmm_config_timeout_us =
 80057fc:	9a00      	ldr	r2, [sp, #0]
 80057fe:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8005800:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
		*prange_config_timeout_us =
 8005804:	9a01      	ldr	r2, [sp, #4]
 8005806:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005808:	2000      	movs	r0, #0
	break;
 800580a:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 800580c:	f8b0 117a 	ldrh.w	r1, [r0, #378]	@ 0x17a
		*pdss_config__target_total_rate_mcps =
 8005810:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005812:	f8d0 219c 	ldr.w	r2, [r0, #412]	@ 0x19c
		*pphasecal_config_timeout_us =
 8005816:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005818:	f8d0 31b0 	ldr.w	r3, [r0, #432]	@ 0x1b0
		*pmm_config_timeout_us =
 800581c:	9a00      	ldr	r2, [sp, #0]
 800581e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005820:	f8d0 31c4 	ldr.w	r3, [r0, #452]	@ 0x1c4
		*prange_config_timeout_us =
 8005824:	9a01      	ldr	r2, [sp, #4]
 8005826:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005828:	2000      	movs	r0, #0
	break;
 800582a:	4770      	bx	lr
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800582c:	f8b0 1176 	ldrh.w	r1, [r0, #374]	@ 0x176
		*pdss_config__target_total_rate_mcps =
 8005830:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005832:	f8d0 2184 	ldr.w	r2, [r0, #388]	@ 0x184
		*pphasecal_config_timeout_us =
 8005836:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005838:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
		*pmm_config_timeout_us =
 800583c:	9a00      	ldr	r2, [sp, #0]
 800583e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005840:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
		*prange_config_timeout_us =
 8005844:	9a01      	ldr	r2, [sp, #4]
 8005846:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005848:	2000      	movs	r0, #0

	break;
 800584a:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800584c:	f8b0 1178 	ldrh.w	r1, [r0, #376]	@ 0x178
		*pdss_config__target_total_rate_mcps =
 8005850:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005852:	f8d0 2194 	ldr.w	r2, [r0, #404]	@ 0x194
		*pphasecal_config_timeout_us =
 8005856:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005858:	f8d0 31a8 	ldr.w	r3, [r0, #424]	@ 0x1a8
		*pmm_config_timeout_us =
 800585c:	9a00      	ldr	r2, [sp, #0]
 800585e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005860:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
		*prange_config_timeout_us =
 8005864:	9a01      	ldr	r2, [sp, #4]
 8005866:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005868:	2000      	movs	r0, #0
	break;
 800586a:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800586c:	f8b0 1178 	ldrh.w	r1, [r0, #376]	@ 0x178
		*pdss_config__target_total_rate_mcps =
 8005870:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005872:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
		*pphasecal_config_timeout_us =
 8005876:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005878:	f8d0 31a8 	ldr.w	r3, [r0, #424]	@ 0x1a8
		*pmm_config_timeout_us =
 800587c:	9a00      	ldr	r2, [sp, #0]
 800587e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005880:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
		*prange_config_timeout_us =
 8005884:	9a01      	ldr	r2, [sp, #4]
 8005886:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005888:	2000      	movs	r0, #0
	break;
 800588a:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800588c:	f8b0 1178 	ldrh.w	r1, [r0, #376]	@ 0x178
		*pdss_config__target_total_rate_mcps =
 8005890:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005892:	f8d0 2190 	ldr.w	r2, [r0, #400]	@ 0x190
		*pphasecal_config_timeout_us =
 8005896:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005898:	f8d0 31a8 	ldr.w	r3, [r0, #424]	@ 0x1a8
		*pmm_config_timeout_us =
 800589c:	9a00      	ldr	r2, [sp, #0]
 800589e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80058a0:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
		*prange_config_timeout_us =
 80058a4:	9a01      	ldr	r2, [sp, #4]
 80058a6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058a8:	2000      	movs	r0, #0
	break;
 80058aa:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80058ac:	f8b0 1176 	ldrh.w	r1, [r0, #374]	@ 0x176
		*pdss_config__target_total_rate_mcps =
 80058b0:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80058b2:	f8d0 218c 	ldr.w	r2, [r0, #396]	@ 0x18c
		*pphasecal_config_timeout_us =
 80058b6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80058b8:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
		*pmm_config_timeout_us =
 80058bc:	9a00      	ldr	r2, [sp, #0]
 80058be:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80058c0:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
		*prange_config_timeout_us =
 80058c4:	9a01      	ldr	r2, [sp, #4]
 80058c6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058c8:	2000      	movs	r0, #0
	break;
 80058ca:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80058cc:	f8b0 1176 	ldrh.w	r1, [r0, #374]	@ 0x176
		*pdss_config__target_total_rate_mcps =
 80058d0:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80058d2:	f8d0 2188 	ldr.w	r2, [r0, #392]	@ 0x188
		*pphasecal_config_timeout_us =
 80058d6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80058d8:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
		*pmm_config_timeout_us =
 80058dc:	9a00      	ldr	r2, [sp, #0]
 80058de:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80058e0:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
		*prange_config_timeout_us =
 80058e4:	9a01      	ldr	r2, [sp, #4]
 80058e6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058e8:	2000      	movs	r0, #0
	break;
 80058ea:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80058ec:	f8b0 1176 	ldrh.w	r1, [r0, #374]	@ 0x176
		*pdss_config__target_total_rate_mcps =
 80058f0:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80058f2:	f8d0 218c 	ldr.w	r2, [r0, #396]	@ 0x18c
		*pphasecal_config_timeout_us =
 80058f6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80058f8:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
		*pmm_config_timeout_us =
 80058fc:	9a00      	ldr	r2, [sp, #0]
 80058fe:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8005900:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
		*prange_config_timeout_us =
 8005904:	9a01      	ldr	r2, [sp, #4]
 8005906:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005908:	2000      	movs	r0, #0
	break;
 800590a:	4770      	bx	lr

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800590c:	f8b0 117c 	ldrh.w	r1, [r0, #380]	@ 0x17c
		*pdss_config__target_total_rate_mcps =
 8005910:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005912:	f8d0 218c 	ldr.w	r2, [r0, #396]	@ 0x18c
		*pphasecal_config_timeout_us =
 8005916:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005918:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
		*pmm_config_timeout_us =
 800591c:	9a00      	ldr	r2, [sp, #0]
 800591e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005920:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
		*prange_config_timeout_us =
 8005924:	9a01      	ldr	r2, [sp, #4]
 8005926:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005928:	2000      	movs	r0, #0
	break;
 800592a:	4770      	bx	lr
	switch (device_preset_mode) {
 800592c:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005930:	4770      	bx	lr

08005932 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005936:	b08d      	sub	sp, #52	@ 0x34
 8005938:	4604      	mov	r4, r0
 800593a:	460d      	mov	r5, r1
 800593c:	9209      	str	r2, [sp, #36]	@ 0x24
 800593e:	930a      	str	r3, [sp, #40]	@ 0x28
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8005940:	f500 731d 	add.w	r3, r0, #628	@ 0x274
 8005944:	9308      	str	r3, [sp, #32]
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005946:	f200 335e 	addw	r3, r0, #862	@ 0x35e
 800594a:	9306      	str	r3, [sp, #24]
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 800594c:	f500 7351 	add.w	r3, r0, #836	@ 0x344
 8005950:	9307      	str	r3, [sp, #28]
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005952:	f200 387e 	addw	r8, r0, #894	@ 0x37e
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005956:	f500 7b65 	add.w	fp, r0, #916	@ 0x394
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800595a:	f500 766b 	add.w	r6, r0, #940	@ 0x3ac
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800595e:	f500 7770 	add.w	r7, r0, #960	@ 0x3c0
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8005962:	f100 0ada 	add.w	sl, r0, #218	@ 0xda
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005966:	f500 79a4 	add.w	r9, r0, #328	@ 0x148
	VL53L1_low_power_auto_data_t  *plpadata      =
 800596a:	f500 53ac 	add.w	r3, r0, #5504	@ 0x1580
 800596e:	930b      	str	r3, [sp, #44]	@ 0x2c
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8005970:	7641      	strb	r1, [r0, #25]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005972:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005974:	6243      	str	r3, [r0, #36]	@ 0x24
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005976:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005978:	6283      	str	r3, [r0, #40]	@ 0x28
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800597a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800597c:	62c3      	str	r3, [r0, #44]	@ 0x2c



	VL53L1_init_ll_driver_state(
 800597e:	2103      	movs	r1, #3
 8005980:	f003 fc43 	bl	800920a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8005984:	3d01      	subs	r5, #1
 8005986:	2d26      	cmp	r5, #38	@ 0x26
 8005988:	f200 8279 	bhi.w	8005e7e <VL53L1_set_preset_mode+0x54c>
 800598c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005990:	00490027 	.word	0x00490027
 8005994:	00650057 	.word	0x00650057
 8005998:	00810073 	.word	0x00810073
 800599c:	009d008f 	.word	0x009d008f
 80059a0:	02770277 	.word	0x02770277
 80059a4:	013b00ab 	.word	0x013b00ab
 80059a8:	01eb01db 	.word	0x01eb01db
 80059ac:	020b01fb 	.word	0x020b01fb
 80059b0:	0229021b 	.word	0x0229021b
 80059b4:	00bb012b 	.word	0x00bb012b
 80059b8:	00db00cb 	.word	0x00db00cb
 80059bc:	00fb00eb 	.word	0x00fb00eb
 80059c0:	011b010b 	.word	0x011b010b
 80059c4:	015b014b 	.word	0x015b014b
 80059c8:	017b016b 	.word	0x017b016b
 80059cc:	019b018b 	.word	0x019b018b
 80059d0:	01bb01ab 	.word	0x01bb01ab
 80059d4:	023701cb 	.word	0x023701cb
 80059d8:	02570247 	.word	0x02570247
 80059dc:	0267      	.short	0x0267

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80059de:	f8cd a00c 	str.w	sl, [sp, #12]
 80059e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80059e6:	9701      	str	r7, [sp, #4]
 80059e8:	9600      	str	r6, [sp, #0]
 80059ea:	465b      	mov	r3, fp
 80059ec:	4642      	mov	r2, r8
 80059ee:	9907      	ldr	r1, [sp, #28]
 80059f0:	9806      	ldr	r0, [sp, #24]
 80059f2:	f002 fa67 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
 80059f6:	4605      	mov	r5, r0

	}



	if (status == VL53L1_ERROR_NONE) {
 80059f8:	b935      	cbnz	r5, 8005a08 <VL53L1_set_preset_mode+0xd6>

		pstatic->dss_config__target_total_rate_mcps =
 80059fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059fc:	f8a4 335e 	strh.w	r3, [r4, #862]	@ 0x35e
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005a00:	8623      	strh	r3, [r4, #48]	@ 0x30

	}



	if (status == VL53L1_ERROR_NONE)
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	f000 823e 	beq.w	8005e84 <VL53L1_set_preset_mode+0x552>
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005a08:	f894 00db 	ldrb.w	r0, [r4, #219]	@ 0xdb
	V53L1_init_zone_results_structure(
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f504 41d0 	add.w	r1, r4, #26624	@ 0x6800
 8005a12:	3134      	adds	r1, #52	@ 0x34
 8005a14:	b2c0      	uxtb	r0, r0
 8005a16:	f003 fcd8 	bl	80093ca <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
}
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	b00d      	add	sp, #52	@ 0x34
 8005a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005a22:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a26:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a2a:	9701      	str	r7, [sp, #4]
 8005a2c:	9600      	str	r6, [sp, #0]
 8005a2e:	465b      	mov	r3, fp
 8005a30:	4642      	mov	r2, r8
 8005a32:	9907      	ldr	r1, [sp, #28]
 8005a34:	9806      	ldr	r0, [sp, #24]
 8005a36:	f002 fb4b 	bl	80080d0 <VL53L1_preset_mode_standard_ranging_short_range>
 8005a3a:	4605      	mov	r5, r0
		break;
 8005a3c:	e7dc      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005a3e:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a42:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a46:	9701      	str	r7, [sp, #4]
 8005a48:	9600      	str	r6, [sp, #0]
 8005a4a:	465b      	mov	r3, fp
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	9907      	ldr	r1, [sp, #28]
 8005a50:	9806      	ldr	r0, [sp, #24]
 8005a52:	f002 fb5f 	bl	8008114 <VL53L1_preset_mode_standard_ranging_long_range>
 8005a56:	4605      	mov	r5, r0
		break;
 8005a58:	e7ce      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8005a5a:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a62:	9701      	str	r7, [sp, #4]
 8005a64:	9600      	str	r6, [sp, #0]
 8005a66:	465b      	mov	r3, fp
 8005a68:	4642      	mov	r2, r8
 8005a6a:	9907      	ldr	r1, [sp, #28]
 8005a6c:	9806      	ldr	r0, [sp, #24]
 8005a6e:	f002 fb73 	bl	8008158 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005a72:	4605      	mov	r5, r0
		break;
 8005a74:	e7c0      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005a76:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a7e:	9701      	str	r7, [sp, #4]
 8005a80:	9600      	str	r6, [sp, #0]
 8005a82:	465b      	mov	r3, fp
 8005a84:	4642      	mov	r2, r8
 8005a86:	9907      	ldr	r1, [sp, #28]
 8005a88:	9806      	ldr	r0, [sp, #24]
 8005a8a:	f002 fb79 	bl	8008180 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005a8e:	4605      	mov	r5, r0
		break;
 8005a90:	e7b2      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_timed_ranging(
 8005a92:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a96:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a9a:	9701      	str	r7, [sp, #4]
 8005a9c:	9600      	str	r6, [sp, #0]
 8005a9e:	465b      	mov	r3, fp
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	9907      	ldr	r1, [sp, #28]
 8005aa4:	9806      	ldr	r0, [sp, #24]
 8005aa6:	f002 fb7f 	bl	80081a8 <VL53L1_preset_mode_timed_ranging>
 8005aaa:	4605      	mov	r5, r0
		break;
 8005aac:	e7a4      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005aae:	f8cd a00c 	str.w	sl, [sp, #12]
 8005ab2:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ab6:	9701      	str	r7, [sp, #4]
 8005ab8:	9600      	str	r6, [sp, #0]
 8005aba:	465b      	mov	r3, fp
 8005abc:	4642      	mov	r2, r8
 8005abe:	9907      	ldr	r1, [sp, #28]
 8005ac0:	9806      	ldr	r0, [sp, #24]
 8005ac2:	f002 fb94 	bl	80081ee <VL53L1_preset_mode_timed_ranging_short_range>
 8005ac6:	4605      	mov	r5, r0
		break;
 8005ac8:	e796      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005aca:	f8cd a00c 	str.w	sl, [sp, #12]
 8005ace:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ad2:	9701      	str	r7, [sp, #4]
 8005ad4:	9600      	str	r6, [sp, #0]
 8005ad6:	465b      	mov	r3, fp
 8005ad8:	4642      	mov	r2, r8
 8005ada:	9907      	ldr	r1, [sp, #28]
 8005adc:	9806      	ldr	r0, [sp, #24]
 8005ade:	f002 fbaa 	bl	8008236 <VL53L1_preset_mode_timed_ranging_long_range>
 8005ae2:	4605      	mov	r5, r0
		break;
 8005ae4:	e788      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging(
 8005ae6:	f8cd a010 	str.w	sl, [sp, #16]
 8005aea:	f8cd 900c 	str.w	r9, [sp, #12]
 8005aee:	9702      	str	r7, [sp, #8]
 8005af0:	9601      	str	r6, [sp, #4]
 8005af2:	f8cd b000 	str.w	fp, [sp]
 8005af6:	4643      	mov	r3, r8
 8005af8:	9a07      	ldr	r2, [sp, #28]
 8005afa:	9906      	ldr	r1, [sp, #24]
 8005afc:	9808      	ldr	r0, [sp, #32]
 8005afe:	f002 fc82 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
 8005b02:	4605      	mov	r5, r0
		break;
 8005b04:	e778      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8005b06:	f8cd a010 	str.w	sl, [sp, #16]
 8005b0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b0e:	9702      	str	r7, [sp, #8]
 8005b10:	9601      	str	r6, [sp, #4]
 8005b12:	f8cd b000 	str.w	fp, [sp]
 8005b16:	4643      	mov	r3, r8
 8005b18:	9a07      	ldr	r2, [sp, #28]
 8005b1a:	9906      	ldr	r1, [sp, #24]
 8005b1c:	9808      	ldr	r0, [sp, #32]
 8005b1e:	f002 fd0a 	bl	8008536 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8005b22:	4605      	mov	r5, r0
		break;
 8005b24:	e768      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8005b26:	f8cd a010 	str.w	sl, [sp, #16]
 8005b2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b2e:	9702      	str	r7, [sp, #8]
 8005b30:	9601      	str	r6, [sp, #4]
 8005b32:	f8cd b000 	str.w	fp, [sp]
 8005b36:	4643      	mov	r3, r8
 8005b38:	9a07      	ldr	r2, [sp, #28]
 8005b3a:	9906      	ldr	r1, [sp, #24]
 8005b3c:	9808      	ldr	r0, [sp, #32]
 8005b3e:	f002 fd57 	bl	80085f0 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8005b42:	4605      	mov	r5, r0
		break;
 8005b44:	e758      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8005b46:	f8cd a010 	str.w	sl, [sp, #16]
 8005b4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b4e:	9702      	str	r7, [sp, #8]
 8005b50:	9601      	str	r6, [sp, #4]
 8005b52:	f8cd b000 	str.w	fp, [sp]
 8005b56:	4643      	mov	r3, r8
 8005b58:	9a07      	ldr	r2, [sp, #28]
 8005b5a:	9906      	ldr	r1, [sp, #24]
 8005b5c:	9808      	ldr	r0, [sp, #32]
 8005b5e:	f002 fd5a 	bl	8008616 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8005b62:	4605      	mov	r5, r0
		break;
 8005b64:	e748      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8005b66:	f8cd a010 	str.w	sl, [sp, #16]
 8005b6a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b6e:	9702      	str	r7, [sp, #8]
 8005b70:	9601      	str	r6, [sp, #4]
 8005b72:	f8cd b000 	str.w	fp, [sp]
 8005b76:	4643      	mov	r3, r8
 8005b78:	9a07      	ldr	r2, [sp, #28]
 8005b7a:	9906      	ldr	r1, [sp, #24]
 8005b7c:	9808      	ldr	r0, [sp, #32]
 8005b7e:	f002 fda5 	bl	80086cc <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8005b82:	4605      	mov	r5, r0
		break;
 8005b84:	e738      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_multizone(
 8005b86:	f8cd a010 	str.w	sl, [sp, #16]
 8005b8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b8e:	9702      	str	r7, [sp, #8]
 8005b90:	9601      	str	r6, [sp, #4]
 8005b92:	f8cd b000 	str.w	fp, [sp]
 8005b96:	4643      	mov	r3, r8
 8005b98:	9a07      	ldr	r2, [sp, #28]
 8005b9a:	9906      	ldr	r1, [sp, #24]
 8005b9c:	9808      	ldr	r0, [sp, #32]
 8005b9e:	f003 f9c9 	bl	8008f34 <VL53L1_preset_mode_histogram_multizone>
 8005ba2:	4605      	mov	r5, r0
		break;
 8005ba4:	e728      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8005ba6:	f8cd a010 	str.w	sl, [sp, #16]
 8005baa:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bae:	9702      	str	r7, [sp, #8]
 8005bb0:	9601      	str	r6, [sp, #4]
 8005bb2:	f8cd b000 	str.w	fp, [sp]
 8005bb6:	4643      	mov	r3, r8
 8005bb8:	9a07      	ldr	r2, [sp, #28]
 8005bba:	9906      	ldr	r1, [sp, #24]
 8005bbc:	9808      	ldr	r0, [sp, #32]
 8005bbe:	f003 f9f2 	bl	8008fa6 <VL53L1_preset_mode_histogram_multizone_short_range>
 8005bc2:	4605      	mov	r5, r0
		break;
 8005bc4:	e718      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8005bc6:	f8cd a010 	str.w	sl, [sp, #16]
 8005bca:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bce:	9702      	str	r7, [sp, #8]
 8005bd0:	9601      	str	r6, [sp, #4]
 8005bd2:	f8cd b000 	str.w	fp, [sp]
 8005bd6:	4643      	mov	r3, r8
 8005bd8:	9a07      	ldr	r2, [sp, #28]
 8005bda:	9906      	ldr	r1, [sp, #24]
 8005bdc:	9808      	ldr	r0, [sp, #32]
 8005bde:	f003 fa1b 	bl	8009018 <VL53L1_preset_mode_histogram_multizone_long_range>
 8005be2:	4605      	mov	r5, r0
		break;
 8005be4:	e708      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8005be6:	f8cd a010 	str.w	sl, [sp, #16]
 8005bea:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bee:	9702      	str	r7, [sp, #8]
 8005bf0:	9601      	str	r6, [sp, #4]
 8005bf2:	f8cd b000 	str.w	fp, [sp]
 8005bf6:	4643      	mov	r3, r8
 8005bf8:	9a07      	ldr	r2, [sp, #28]
 8005bfa:	9906      	ldr	r1, [sp, #24]
 8005bfc:	9808      	ldr	r0, [sp, #32]
 8005bfe:	f003 fad6 	bl	80091ae <VL53L1_preset_mode_histogram_ranging_ref>
 8005c02:	4605      	mov	r5, r0
		break;
 8005c04:	e6f8      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005c06:	f8cd a010 	str.w	sl, [sp, #16]
 8005c0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c0e:	9702      	str	r7, [sp, #8]
 8005c10:	9601      	str	r6, [sp, #4]
 8005c12:	f8cd b000 	str.w	fp, [sp]
 8005c16:	4643      	mov	r3, r8
 8005c18:	9a07      	ldr	r2, [sp, #28]
 8005c1a:	9906      	ldr	r1, [sp, #24]
 8005c1c:	9808      	ldr	r0, [sp, #32]
 8005c1e:	f002 fd68 	bl	80086f2 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005c22:	4605      	mov	r5, r0
		break;
 8005c24:	e6e8      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_long_range(
 8005c26:	f8cd a010 	str.w	sl, [sp, #16]
 8005c2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c2e:	9702      	str	r7, [sp, #8]
 8005c30:	9601      	str	r6, [sp, #4]
 8005c32:	f8cd b000 	str.w	fp, [sp]
 8005c36:	4643      	mov	r3, r8
 8005c38:	9a07      	ldr	r2, [sp, #28]
 8005c3a:	9906      	ldr	r1, [sp, #24]
 8005c3c:	9808      	ldr	r0, [sp, #32]
 8005c3e:	f002 fdcd 	bl	80087dc <VL53L1_preset_mode_histogram_long_range>
 8005c42:	4605      	mov	r5, r0
		break;
 8005c44:	e6d8      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8005c46:	f8cd a010 	str.w	sl, [sp, #16]
 8005c4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c4e:	9702      	str	r7, [sp, #8]
 8005c50:	9601      	str	r6, [sp, #4]
 8005c52:	f8cd b000 	str.w	fp, [sp]
 8005c56:	4643      	mov	r3, r8
 8005c58:	9a07      	ldr	r2, [sp, #28]
 8005c5a:	9906      	ldr	r1, [sp, #24]
 8005c5c:	9808      	ldr	r0, [sp, #32]
 8005c5e:	f002 fe42 	bl	80088e6 <VL53L1_preset_mode_histogram_long_range_mm1>
 8005c62:	4605      	mov	r5, r0
		break;
 8005c64:	e6c8      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8005c66:	f8cd a010 	str.w	sl, [sp, #16]
 8005c6a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c6e:	9702      	str	r7, [sp, #8]
 8005c70:	9601      	str	r6, [sp, #4]
 8005c72:	f8cd b000 	str.w	fp, [sp]
 8005c76:	4643      	mov	r3, r8
 8005c78:	9a07      	ldr	r2, [sp, #28]
 8005c7a:	9906      	ldr	r1, [sp, #24]
 8005c7c:	9808      	ldr	r0, [sp, #32]
 8005c7e:	f002 fe88 	bl	8008992 <VL53L1_preset_mode_histogram_long_range_mm2>
 8005c82:	4605      	mov	r5, r0
		break;
 8005c84:	e6b8      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_medium_range(
 8005c86:	f8cd a010 	str.w	sl, [sp, #16]
 8005c8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c8e:	9702      	str	r7, [sp, #8]
 8005c90:	9601      	str	r6, [sp, #4]
 8005c92:	f8cd b000 	str.w	fp, [sp]
 8005c96:	4643      	mov	r3, r8
 8005c98:	9a07      	ldr	r2, [sp, #28]
 8005c9a:	9906      	ldr	r1, [sp, #24]
 8005c9c:	9808      	ldr	r0, [sp, #32]
 8005c9e:	f002 fe8b 	bl	80089b8 <VL53L1_preset_mode_histogram_medium_range>
 8005ca2:	4605      	mov	r5, r0
		break;
 8005ca4:	e6a8      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8005ca6:	f8cd a010 	str.w	sl, [sp, #16]
 8005caa:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cae:	9702      	str	r7, [sp, #8]
 8005cb0:	9601      	str	r6, [sp, #4]
 8005cb2:	f8cd b000 	str.w	fp, [sp]
 8005cb6:	4643      	mov	r3, r8
 8005cb8:	9a07      	ldr	r2, [sp, #28]
 8005cba:	9906      	ldr	r1, [sp, #24]
 8005cbc:	9808      	ldr	r0, [sp, #32]
 8005cbe:	f002 feff 	bl	8008ac0 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8005cc2:	4605      	mov	r5, r0
		break;
 8005cc4:	e698      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8005cc6:	f8cd a010 	str.w	sl, [sp, #16]
 8005cca:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cce:	9702      	str	r7, [sp, #8]
 8005cd0:	9601      	str	r6, [sp, #4]
 8005cd2:	f8cd b000 	str.w	fp, [sp]
 8005cd6:	4643      	mov	r3, r8
 8005cd8:	9a07      	ldr	r2, [sp, #28]
 8005cda:	9906      	ldr	r1, [sp, #24]
 8005cdc:	9808      	ldr	r0, [sp, #32]
 8005cde:	f002 ff45 	bl	8008b6c <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005ce2:	4605      	mov	r5, r0
		break;
 8005ce4:	e688      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_short_range(
 8005ce6:	f8cd a010 	str.w	sl, [sp, #16]
 8005cea:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cee:	9702      	str	r7, [sp, #8]
 8005cf0:	9601      	str	r6, [sp, #4]
 8005cf2:	f8cd b000 	str.w	fp, [sp]
 8005cf6:	4643      	mov	r3, r8
 8005cf8:	9a07      	ldr	r2, [sp, #28]
 8005cfa:	9906      	ldr	r1, [sp, #24]
 8005cfc:	9808      	ldr	r0, [sp, #32]
 8005cfe:	f002 ff48 	bl	8008b92 <VL53L1_preset_mode_histogram_short_range>
 8005d02:	4605      	mov	r5, r0
		break;
 8005d04:	e678      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8005d06:	f8cd a010 	str.w	sl, [sp, #16]
 8005d0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d0e:	9702      	str	r7, [sp, #8]
 8005d10:	9601      	str	r6, [sp, #4]
 8005d12:	f8cd b000 	str.w	fp, [sp]
 8005d16:	4643      	mov	r3, r8
 8005d18:	9a07      	ldr	r2, [sp, #28]
 8005d1a:	9906      	ldr	r1, [sp, #24]
 8005d1c:	9808      	ldr	r0, [sp, #32]
 8005d1e:	f003 f81b 	bl	8008d58 <VL53L1_preset_mode_histogram_short_range_mm1>
 8005d22:	4605      	mov	r5, r0
		break;
 8005d24:	e668      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8005d26:	f8cd a010 	str.w	sl, [sp, #16]
 8005d2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d2e:	9702      	str	r7, [sp, #8]
 8005d30:	9601      	str	r6, [sp, #4]
 8005d32:	f8cd b000 	str.w	fp, [sp]
 8005d36:	4643      	mov	r3, r8
 8005d38:	9a07      	ldr	r2, [sp, #28]
 8005d3a:	9906      	ldr	r1, [sp, #24]
 8005d3c:	9808      	ldr	r0, [sp, #32]
 8005d3e:	f003 f85c 	bl	8008dfa <VL53L1_preset_mode_histogram_short_range_mm2>
 8005d42:	4605      	mov	r5, r0
		break;
 8005d44:	e658      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_characterisation(
 8005d46:	f8cd a010 	str.w	sl, [sp, #16]
 8005d4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d4e:	9702      	str	r7, [sp, #8]
 8005d50:	9601      	str	r6, [sp, #4]
 8005d52:	f8cd b000 	str.w	fp, [sp]
 8005d56:	4643      	mov	r3, r8
 8005d58:	9a07      	ldr	r2, [sp, #28]
 8005d5a:	9906      	ldr	r1, [sp, #24]
 8005d5c:	9808      	ldr	r0, [sp, #32]
 8005d5e:	f002 fbd1 	bl	8008504 <VL53L1_preset_mode_histogram_characterisation>
 8005d62:	4605      	mov	r5, r0
		break;
 8005d64:	e648      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8005d66:	f8cd a010 	str.w	sl, [sp, #16]
 8005d6a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d6e:	9702      	str	r7, [sp, #8]
 8005d70:	9601      	str	r6, [sp, #4]
 8005d72:	f8cd b000 	str.w	fp, [sp]
 8005d76:	4643      	mov	r3, r8
 8005d78:	9a07      	ldr	r2, [sp, #28]
 8005d7a:	9906      	ldr	r1, [sp, #24]
 8005d7c:	9808      	ldr	r0, [sp, #32]
 8005d7e:	f003 f984 	bl	800908a <VL53L1_preset_mode_histogram_xtalk_planar>
 8005d82:	4605      	mov	r5, r0
		break;
 8005d84:	e638      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8005d86:	f8cd a010 	str.w	sl, [sp, #16]
 8005d8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d8e:	9702      	str	r7, [sp, #8]
 8005d90:	9601      	str	r6, [sp, #4]
 8005d92:	f8cd b000 	str.w	fp, [sp]
 8005d96:	4643      	mov	r3, r8
 8005d98:	9a07      	ldr	r2, [sp, #28]
 8005d9a:	9906      	ldr	r1, [sp, #24]
 8005d9c:	9808      	ldr	r0, [sp, #32]
 8005d9e:	f003 f83f 	bl	8008e20 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005da2:	4605      	mov	r5, r0
		break;
 8005da4:	e628      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8005da6:	f8cd a010 	str.w	sl, [sp, #16]
 8005daa:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dae:	9702      	str	r7, [sp, #8]
 8005db0:	9601      	str	r6, [sp, #4]
 8005db2:	f8cd b000 	str.w	fp, [sp]
 8005db6:	4643      	mov	r3, r8
 8005db8:	9a07      	ldr	r2, [sp, #28]
 8005dba:	9906      	ldr	r1, [sp, #24]
 8005dbc:	9808      	ldr	r0, [sp, #32]
 8005dbe:	f003 f8a7 	bl	8008f10 <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005dc2:	4605      	mov	r5, r0
		break;
 8005dc4:	e618      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_olt(
 8005dc6:	f8cd a00c 	str.w	sl, [sp, #12]
 8005dca:	f8cd 9008 	str.w	r9, [sp, #8]
 8005dce:	9701      	str	r7, [sp, #4]
 8005dd0:	9600      	str	r6, [sp, #0]
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	9907      	ldr	r1, [sp, #28]
 8005dd8:	9806      	ldr	r0, [sp, #24]
 8005dda:	f002 fab1 	bl	8008340 <VL53L1_preset_mode_olt>
 8005dde:	4605      	mov	r5, r0
		break;
 8005de0:	e60a      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_singleshot_ranging(
 8005de2:	f8cd a00c 	str.w	sl, [sp, #12]
 8005de6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005dea:	9701      	str	r7, [sp, #4]
 8005dec:	9600      	str	r6, [sp, #0]
 8005dee:	465b      	mov	r3, fp
 8005df0:	4642      	mov	r2, r8
 8005df2:	9907      	ldr	r1, [sp, #28]
 8005df4:	9806      	ldr	r0, [sp, #24]
 8005df6:	f002 fa83 	bl	8008300 <VL53L1_preset_mode_singleshot_ranging>
 8005dfa:	4605      	mov	r5, r0
		break;
 8005dfc:	e5fc      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	f8cd a00c 	str.w	sl, [sp, #12]
 8005e06:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e0a:	9701      	str	r7, [sp, #4]
 8005e0c:	9600      	str	r6, [sp, #0]
 8005e0e:	465b      	mov	r3, fp
 8005e10:	4642      	mov	r2, r8
 8005e12:	9907      	ldr	r1, [sp, #28]
 8005e14:	9806      	ldr	r0, [sp, #24]
 8005e16:	f002 fa47 	bl	80082a8 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005e1a:	4605      	mov	r5, r0
		break;
 8005e1c:	e5ec      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	f8cd a00c 	str.w	sl, [sp, #12]
 8005e26:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e2a:	9701      	str	r7, [sp, #4]
 8005e2c:	9600      	str	r6, [sp, #0]
 8005e2e:	465b      	mov	r3, fp
 8005e30:	4642      	mov	r2, r8
 8005e32:	9907      	ldr	r1, [sp, #28]
 8005e34:	9806      	ldr	r0, [sp, #24]
 8005e36:	f002 fa21 	bl	800827c <VL53L1_preset_mode_low_power_auto_ranging>
 8005e3a:	4605      	mov	r5, r0
		break;
 8005e3c:	e5dc      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	f8cd a00c 	str.w	sl, [sp, #12]
 8005e46:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e4a:	9701      	str	r7, [sp, #4]
 8005e4c:	9600      	str	r6, [sp, #0]
 8005e4e:	465b      	mov	r3, fp
 8005e50:	4642      	mov	r2, r8
 8005e52:	9907      	ldr	r1, [sp, #28]
 8005e54:	9806      	ldr	r0, [sp, #24]
 8005e56:	f002 fa3d 	bl	80082d4 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005e5a:	4605      	mov	r5, r0
		break;
 8005e5c:	e5cc      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_special_histogram_short_range(
 8005e5e:	f8cd a010 	str.w	sl, [sp, #16]
 8005e62:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e66:	9702      	str	r7, [sp, #8]
 8005e68:	9601      	str	r6, [sp, #4]
 8005e6a:	f8cd b000 	str.w	fp, [sp]
 8005e6e:	4643      	mov	r3, r8
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	9906      	ldr	r1, [sp, #24]
 8005e74:	9808      	ldr	r0, [sp, #32]
 8005e76:	f002 ff05 	bl	8008c84 <VL53L1_preset_mode_special_histogram_short_range>
 8005e7a:	4605      	mov	r5, r0
	break;
 8005e7c:	e5bc      	b.n	80059f8 <VL53L1_set_preset_mode+0xc6>
	switch (device_preset_mode) {
 8005e7e:	f06f 0503 	mvn.w	r5, #3
 8005e82:	e5be      	b.n	8005a02 <VL53L1_set_preset_mode+0xd0>
			VL53L1_set_timeouts_us(
 8005e84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005e88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fae0 	bl	8005450 <VL53L1_set_timeouts_us>
	if (status == VL53L1_ERROR_NONE)
 8005e90:	4605      	mov	r5, r0
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f47f adb8 	bne.w	8005a08 <VL53L1_set_preset_mode+0xd6>
			VL53L1_set_inter_measurement_period_ms(
 8005e98:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff faba 	bl	8005414 <VL53L1_set_inter_measurement_period_ms>
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	e5b1      	b.n	8005a08 <VL53L1_set_preset_mode+0xd6>

08005ea4 <VL53L1_data_init>:
{
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8005eac:	2162      	movs	r1, #98	@ 0x62
 8005eae:	f003 f9ac 	bl	800920a <VL53L1_init_ll_driver_state>
	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8005eb2:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	f882 3601 	strb.w	r3, [r2, #1537]	@ 0x601
	pres->range_results.active_results = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f882 3602 	strb.w	r3, [r2, #1538]	@ 0x602
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	f882 1834 	strb.w	r1, [r2, #2100]	@ 0x834
	pres->zone_results.active_zones    = 0;
 8005ec8:	f882 3835 	strb.w	r3, [r2, #2101]	@ 0x835
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005ecc:	e014      	b.n	8005ef8 <VL53L1_data_init+0x54>
		pobjects->xmonitor.VL53L1_p_020 = 0;
 8005ece:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 8005ed2:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8005ed6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005eda:	2000      	movs	r0, #0
 8005edc:	f8c1 0870 	str.w	r0, [r1, #2160]	@ 0x870
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8005ee0:	f8c1 0874 	str.w	r0, [r1, #2164]	@ 0x874
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8005ee4:	f8a1 0878 	strh.w	r0, [r1, #2168]	@ 0x878
		pobjects->xmonitor.range_status =
 8005ee8:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8005eec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005ef0:	f882 087a 	strb.w	r0, [r2, #2170]	@ 0x87a
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b0f      	cmp	r3, #15
 8005efa:	d9e8      	bls.n	8005ece <VL53L1_data_init+0x2a>
	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8005efc:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 8005f00:	2110      	movs	r1, #16
 8005f02:	f882 1c78 	strb.w	r1, [r2, #3192]	@ 0xc78
	pres->zone_hists.active_zones      = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	f882 3c79 	strb.w	r3, [r2, #3193]	@ 0xc79
	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8005f0c:	f882 1d8b 	strb.w	r1, [r2, #3467]	@ 0xd8b
	pres->zone_cal.active_zones        = 0;
 8005f10:	f882 3d8c 	strb.w	r3, [r2, #3468]	@ 0xd8c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005f14:	e016      	b.n	8005f44 <VL53L1_data_init+0xa0>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8005f16:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 8005f1a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8005f1e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005f22:	2000      	movs	r0, #0
 8005f24:	f8c1 0d90 	str.w	r0, [r1, #3472]	@ 0xd90
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8005f28:	f8c1 0d94 	str.w	r0, [r1, #3476]	@ 0xd94
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8005f2c:	f8c1 0d98 	str.w	r0, [r1, #3480]	@ 0xd98
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 8005f30:	f8c1 0da4 	str.w	r0, [r1, #3492]	@ 0xda4
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8005f34:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8005f38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005f3c:	f8c2 0da8 	str.w	r0, [r2, #3496]	@ 0xda8
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d9e6      	bls.n	8005f16 <VL53L1_data_init+0x72>
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8005f48:	2600      	movs	r6, #0
 8005f4a:	7626      	strb	r6, [r4, #24]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	7663      	strb	r3, [r4, #25]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8005f50:	76a6      	strb	r6, [r4, #26]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8005f52:	76e6      	strb	r6, [r4, #27]
	pdev->offset_calibration_mode =
 8005f54:	7723      	strb	r3, [r4, #28]
	pdev->offset_correction_mode  =
 8005f56:	7763      	strb	r3, [r4, #29]
	pdev->dmax_mode  =
 8005f58:	77a3      	strb	r3, [r4, #30]
	pdev->phasecal_config_timeout_us  =  1000;
 8005f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f5e:	6223      	str	r3, [r4, #32]
	pdev->mm_config_timeout_us        =  2000;
 8005f60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005f64:	6263      	str	r3, [r4, #36]	@ 0x24
	pdev->range_config_timeout_us     = 13000;
 8005f66:	f243 23c8 	movw	r3, #13000	@ 0x32c8
 8005f6a:	62a3      	str	r3, [r4, #40]	@ 0x28
	pdev->inter_measurement_period_ms =   100;
 8005f6c:	2364      	movs	r3, #100	@ 0x64
 8005f6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8005f70:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005f74:	8623      	strh	r3, [r4, #48]	@ 0x30
	pdev->debug_mode                  =  0x00;
 8005f76:	f884 6039 	strb.w	r6, [r4, #57]	@ 0x39
	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 8005f7a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8005f7e:	2203      	movs	r2, #3
 8005f80:	f883 2342 	strb.w	r2, [r3, #834]	@ 0x342
	pdev->offset_results.active_results = 0;
 8005f84:	f883 6343 	strb.w	r6, [r3, #835]	@ 0x343
	pdev->gain_cal.standard_ranging_gain_factor =
 8005f88:	f240 73db 	movw	r3, #2011	@ 0x7db
 8005f8c:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
	pdev->gain_cal.histogram_ranging_gain_factor =
 8005f90:	f240 73c3 	movw	r3, #1987	@ 0x7c3
 8005f94:	f8a4 30d2 	strh.w	r3, [r4, #210]	@ 0xd2
	VL53L1_init_version(Dev);
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f003 f92a 	bl	80091f2 <VL53L1_init_version>
	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005f9e:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	f504 50ec 	add.w	r0, r4, #7552	@ 0x1d80
 8005fa8:	301c      	adds	r0, #28
 8005faa:	f008 fd46 	bl	800ea3a <memset>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8005fae:	b125      	cbz	r5, 8005fba <VL53L1_data_init+0x116>
		status = VL53L1_read_p2p_data(Dev);
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff faee 	bl	8005592 <VL53L1_read_p2p_data>
	if (status == VL53L1_ERROR_NONE)
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_refspadchar_config_struct(
 8005fba:	f504 7016 	add.w	r0, r4, #600	@ 0x258
 8005fbe:	f001 fd8c 	bl	8007ada <VL53L1_init_refspadchar_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	b1e8      	cbz	r0, 8006002 <VL53L1_data_init+0x15e>
	VL53L1_init_histogram_bin_data_struct(
 8005fc6:	f204 4224 	addw	r2, r4, #1060	@ 0x424
 8005fca:	2118      	movs	r1, #24
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f005 fb4a 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
	VL53L1_init_histogram_bin_data_struct(
 8005fd2:	f504 629a 	add.w	r2, r4, #1232	@ 0x4d0
 8005fd6:	2118      	movs	r1, #24
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f005 fb44 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
	VL53L1_init_xtalk_bin_data_struct(
 8005fde:	f204 527c 	addw	r2, r4, #1404	@ 0x57c
 8005fe2:	210c      	movs	r1, #12
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f003 fac2 	bl	800956e <VL53L1_init_xtalk_bin_data_struct>
	VL53L1_xtalk_cal_data_init(
 8005fea:	4620      	mov	r0, r4
 8005fec:	f004 fda0 	bl	800ab30 <VL53L1_xtalk_cal_data_init>
	VL53L1_dynamic_xtalk_correction_data_init(
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f004 fd25 	bl	800aa40 <VL53L1_dynamic_xtalk_correction_data_init>
	VL53L1_low_power_auto_data_init(
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f004 fdaf 	bl	800ab5a <VL53L1_low_power_auto_data_init>
}
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	b004      	add	sp, #16
 8006000:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_init_ssc_config_struct(
 8006002:	f504 701a 	add.w	r0, r4, #616	@ 0x268
 8006006:	f001 fd7a 	bl	8007afe <VL53L1_init_ssc_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800600a:	4605      	mov	r5, r0
 800600c:	2800      	cmp	r0, #0
 800600e:	d1da      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_xtalk_config_struct(
 8006010:	f504 713b 	add.w	r1, r4, #748	@ 0x2ec
 8006014:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8006018:	f001 fd80 	bl	8007b1c <VL53L1_init_xtalk_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800601c:	4605      	mov	r5, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d1d1      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_xtalk_extract_config_struct(
 8006022:	f504 7034 	add.w	r0, r4, #720	@ 0x2d0
 8006026:	f001 fdb0 	bl	8007b8a <VL53L1_init_xtalk_extract_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800602a:	4605      	mov	r5, r0
 800602c:	2800      	cmp	r0, #0
 800602e:	d1ca      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_offset_cal_config_struct(
 8006030:	f504 7044 	add.w	r0, r4, #784	@ 0x310
 8006034:	f001 fdc3 	bl	8007bbe <VL53L1_init_offset_cal_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8006038:	4605      	mov	r5, r0
 800603a:	2800      	cmp	r0, #0
 800603c:	d1c3      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_zone_cal_config_struct(
 800603e:	f504 7049 	add.w	r0, r4, #804	@ 0x324
 8006042:	f001 fdce 	bl	8007be2 <VL53L1_init_zone_cal_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8006046:	4605      	mov	r5, r0
 8006048:	2800      	cmp	r0, #0
 800604a:	d1bc      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_hist_post_process_config_struct(
 800604c:	f504 711d 	add.w	r1, r4, #628	@ 0x274
 8006050:	f894 02fc 	ldrb.w	r0, [r4, #764]	@ 0x2fc
 8006054:	f001 fdd7 	bl	8007c06 <VL53L1_init_hist_post_process_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8006058:	4605      	mov	r5, r0
 800605a:	2800      	cmp	r0, #0
 800605c:	d1b3      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 800605e:	f504 702d 	add.w	r0, r4, #692	@ 0x2b4
 8006062:	f001 ff11 	bl	8007e88 <VL53L1_init_hist_gen3_dmax_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8006066:	4605      	mov	r5, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d1ac      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_init_tuning_parm_storage_struct(
 800606c:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 8006070:	f001 fe0c 	bl	8007c8c <VL53L1_init_tuning_parm_storage_struct>
	if (status == VL53L1_ERROR_NONE)
 8006074:	4605      	mov	r5, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	d1a5      	bne.n	8005fc6 <VL53L1_data_init+0x122>
		status = VL53L1_set_preset_mode(
 800607a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800607c:	9302      	str	r3, [sp, #8]
 800607e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	6a23      	ldr	r3, [r4, #32]
 8006088:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800608a:	7e61      	ldrb	r1, [r4, #25]
 800608c:	4620      	mov	r0, r4
 800608e:	f7ff fc50 	bl	8005932 <VL53L1_set_preset_mode>
 8006092:	4605      	mov	r5, r0
 8006094:	e797      	b.n	8005fc6 <VL53L1_data_init+0x122>

08006096 <VL53L1_get_lite_sigma_threshold>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8006096:	f8b0 339e 	ldrh.w	r3, [r0, #926]	@ 0x39e
	*plite_sigma =
 800609a:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;

}
 800609c:	2000      	movs	r0, #0
 800609e:	4770      	bx	lr

080060a0 <VL53L1_set_lite_sigma_threshold>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80060a0:	f8a0 139e 	strh.w	r1, [r0, #926]	@ 0x39e

	LOG_FUNCTION_END(status);

	return status;

}
 80060a4:	2000      	movs	r0, #0
 80060a6:	4770      	bx	lr

080060a8 <VL53L1_get_lite_min_count_rate>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80060a8:	f8b0 33a0 	ldrh.w	r3, [r0, #928]	@ 0x3a0
	*plite_mincountrate =
 80060ac:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;

}
 80060ae:	2000      	movs	r0, #0
 80060b0:	4770      	bx	lr

080060b2 <VL53L1_set_lite_min_count_rate>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80060b2:	f8a0 13a0 	strh.w	r1, [r0, #928]	@ 0x3a0

	LOG_FUNCTION_END(status);

	return status;

}
 80060b6:	2000      	movs	r0, #0
 80060b8:	4770      	bx	lr

080060ba <VL53L1_stop_range>:
}


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80060ba:	b538      	push	{r3, r4, r5, lr}
 80060bc:	4604      	mov	r4, r0
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80060be:	f890 33c4 	ldrb.w	r3, [r0, #964]	@ 0x3c4
	pdev->sys_ctrl.system__mode_start =
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060ca:	f880 33c4 	strb.w	r3, [r0, #964]	@ 0x3c4
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80060ce:	f500 7170 	add.w	r1, r0, #960	@ 0x3c0
 80060d2:	f007 fc91 	bl	800d9f8 <VL53L1_set_system_control>
 80060d6:	4605      	mov	r5, r0
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80060d8:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 80060dc:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 80060e0:	f884 33c4 	strb.w	r3, [r4, #964]	@ 0x3c4
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 80060e4:	2103      	movs	r1, #3
 80060e6:	4620      	mov	r0, r4
 80060e8:	f003 f88f 	bl	800920a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80060ec:	f894 00db 	ldrb.w	r0, [r4, #219]	@ 0xdb
	V53L1_init_zone_results_structure(
 80060f0:	3001      	adds	r0, #1
 80060f2:	f504 41d0 	add.w	r1, r4, #26624	@ 0x6800
 80060f6:	3134      	adds	r1, #52	@ 0x34
 80060f8:	b2c0      	uxtb	r0, r0
 80060fa:	f003 f966 	bl	80093ca <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80060fe:	4620      	mov	r0, r4
 8006100:	f003 f97c 	bl	80093fc <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8006104:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8006108:	f893 3581 	ldrb.w	r3, [r3, #1409]	@ 0x581
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <VL53L1_stop_range+0x5a>
		VL53L1_low_power_auto_data_stop_range(Dev);

	return status;
}
 8006110:	4628      	mov	r0, r5
 8006112:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_low_power_auto_data_stop_range(Dev);
 8006114:	4620      	mov	r0, r4
 8006116:	f004 fd37 	bl	800ab88 <VL53L1_low_power_auto_data_stop_range>
 800611a:	e7f9      	b.n	8006110 <VL53L1_stop_range+0x56>

0800611c <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800611c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611e:	b0c1      	sub	sp, #260	@ 0x104
 8006120:	460c      	mov	r4, r1
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8006122:	f100 0518 	add.w	r5, r0, #24
 8006126:	f200 36c6 	addw	r6, r0, #966	@ 0x3c6
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800612a:	f505 579c 	add.w	r7, r5, #4992	@ 0x1380
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800612e:	f505 559d 	add.w	r5, r5, #5024	@ 0x13a0
 8006132:	3504      	adds	r5, #4

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8006134:	2901      	cmp	r1, #1
 8006136:	d013      	beq.n	8006160 <VL53L1_get_measurement_results+0x44>
 8006138:	2902      	cmp	r1, #2
 800613a:	d113      	bne.n	8006164 <VL53L1_get_measurement_results+0x48>
 800613c:	2386      	movs	r3, #134	@ 0x86



	if (status == VL53L1_ERROR_NONE)
		status =
			VL53L1_ReadMulti(
 800613e:	466a      	mov	r2, sp
 8006140:	2188      	movs	r1, #136	@ 0x88
 8006142:	f007 f8cf 	bl	800d2e4 <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8006146:	2c01      	cmp	r4, #1
 8006148:	d900      	bls.n	800614c <VL53L1_get_measurement_results+0x30>
 800614a:	b168      	cbz	r0, 8006168 <VL53L1_get_measurement_results+0x4c>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800614c:	b12c      	cbz	r4, 800615a <VL53L1_get_measurement_results+0x3e>
 800614e:	b928      	cbnz	r0, 800615c <VL53L1_get_measurement_results+0x40>

		i2c_buffer_offset_bytes =
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
 8006150:	463a      	mov	r2, r7
 8006152:	a90b      	add	r1, sp, #44	@ 0x2c
 8006154:	2021      	movs	r0, #33	@ 0x21
 8006156:	f007 fcf0 	bl	800db3a <VL53L1_i2c_decode_core_results>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800615a:	b160      	cbz	r0, 8006176 <VL53L1_get_measurement_results+0x5a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800615c:	b041      	add	sp, #260	@ 0x104
 800615e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i2c_buffer_size_bytes =
 8006160:	234d      	movs	r3, #77	@ 0x4d
 8006162:	e7ec      	b.n	800613e <VL53L1_get_measurement_results+0x22>
		i2c_buffer_size_bytes =
 8006164:	232c      	movs	r3, #44	@ 0x2c
 8006166:	e7ea      	b.n	800613e <VL53L1_get_measurement_results+0x22>
			VL53L1_i2c_decode_debug_results(
 8006168:	462a      	mov	r2, r5
 800616a:	f10d 014e 	add.w	r1, sp, #78	@ 0x4e
 800616e:	2038      	movs	r0, #56	@ 0x38
 8006170:	f007 fd1e 	bl	800dbb0 <VL53L1_i2c_decode_debug_results>
 8006174:	e7ea      	b.n	800614c <VL53L1_get_measurement_results+0x30>
			VL53L1_i2c_decode_system_results(
 8006176:	4632      	mov	r2, r6
 8006178:	4669      	mov	r1, sp
 800617a:	202c      	movs	r0, #44	@ 0x2c
 800617c:	f007 fc4e 	bl	800da1c <VL53L1_i2c_decode_system_results>
 8006180:	e7ec      	b.n	800615c <VL53L1_get_measurement_results+0x40>
	...

08006184 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006186:	2400      	movs	r4, #0
 8006188:	709c      	strb	r4, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800618a:	78cd      	ldrb	r5, [r1, #3]
 800618c:	70dd      	strb	r5, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800618e:	81dc      	strh	r4, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8006190:	2504      	movs	r5, #4
 8006192:	745d      	strb	r5, [r3, #17]
	presults->active_results  = 1;
 8006194:	2501      	movs	r5, #1
 8006196:	749d      	strb	r5, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006198:	f8b1 e010 	ldrh.w	lr, [r1, #16]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800619c:	8a8e      	ldrh	r6, [r1, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800619e:	8a4d      	ldrh	r5, [r1, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80061a0:	e007      	b.n	80061b2 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>
		presults->VL53L1_p_007[i] = 0;
 80061a2:	eb03 0744 	add.w	r7, r3, r4, lsl #1
 80061a6:	f04f 0c00 	mov.w	ip, #0
 80061aa:	f8a7 c004 	strh.w	ip, [r7, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80061ae:	3401      	adds	r4, #1
 80061b0:	b2e4      	uxtb	r4, r4
 80061b2:	2c04      	cmp	r4, #4
 80061b4:	d9f5      	bls.n	80061a2 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e>

	pdata = &(presults->VL53L1_p_002[0]);
 80061b6:	f103 0c14 	add.w	ip, r3, #20

	for (i = 0; i < 2; i++) {
 80061ba:	2400      	movs	r4, #0
 80061bc:	e024      	b.n	8006208 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80061be:	784f      	ldrb	r7, [r1, #1]
 80061c0:	f007 071f 	and.w	r7, r7, #31
			pdata->range_status =
 80061c4:	f88c 704a 	strb.w	r7, [ip, #74]	@ 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 80061c8:	2700      	movs	r7, #0
 80061ca:	f88c 7008 	strb.w	r7, [ip, #8]
		pdata->VL53L1_p_022    = 0;
 80061ce:	f88c 7009 	strb.w	r7, [ip, #9]
		pdata->VL53L1_p_025   = 0;
 80061d2:	f88c 700a 	strb.w	r7, [ip, #10]
		pdata->VL53L1_p_026     = 0;
 80061d6:	f88c 700b 	strb.w	r7, [ip, #11]
		pdata->VL53L1_p_016   = 0;
 80061da:	f88c 700c 	strb.w	r7, [ip, #12]
		pdata->VL53L1_p_027    = 0;
 80061de:	f88c 700d 	strb.w	r7, [ip, #13]

		switch (i) {
 80061e2:	b324      	cbz	r4, 800622e <VL53L1_copy_sys_and_core_results_to_range_results+0xaa>
 80061e4:	2c01      	cmp	r4, #1
 80061e6:	d05e      	beq.n	80062a6 <VL53L1_copy_sys_and_core_results_to_range_results+0x122>

			break;
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 80061e8:	f8bc 7040 	ldrh.w	r7, [ip, #64]	@ 0x40
 80061ec:	f8ac 703e 	strh.w	r7, [ip, #62]	@ 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 80061f0:	f8ac 7042 	strh.w	r7, [ip, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80061f4:	f9bc 7046 	ldrsh.w	r7, [ip, #70]	@ 0x46
 80061f8:	f8ac 7044 	strh.w	r7, [ip, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80061fc:	f8ac 7048 	strh.w	r7, [ip, #72]	@ 0x48

		pdata++;
 8006200:	f10c 0c4c 	add.w	ip, ip, #76	@ 0x4c
	for (i = 0; i < 2; i++) {
 8006204:	3401      	adds	r4, #1
 8006206:	b2e4      	uxtb	r4, r4
 8006208:	2c01      	cmp	r4, #1
 800620a:	d87f      	bhi.n	800630c <VL53L1_copy_sys_and_core_results_to_range_results+0x188>
		pdata->range_id     = i;
 800620c:	f88c 4000 	strb.w	r4, [ip]
		pdata->time_stamp   = 0;
 8006210:	2700      	movs	r7, #0
 8006212:	f8cc 7004 	str.w	r7, [ip, #4]
		if ((psys->result__stream_count == 0) &&
 8006216:	78cf      	ldrb	r7, [r1, #3]
 8006218:	2f00      	cmp	r7, #0
 800621a:	d1d0      	bne.n	80061be <VL53L1_copy_sys_and_core_results_to_range_results+0x3a>
			((psys->result__range_status &
 800621c:	784f      	ldrb	r7, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 800621e:	f007 071f 	and.w	r7, r7, #31
 8006222:	2f09      	cmp	r7, #9
 8006224:	d1cb      	bne.n	80061be <VL53L1_copy_sys_and_core_results_to_range_results+0x3a>
			pdata->range_status =
 8006226:	2713      	movs	r7, #19
 8006228:	f88c 704a 	strb.w	r7, [ip, #74]	@ 0x4a
 800622c:	e7cc      	b.n	80061c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x44>
			if (psys->result__report_status ==
 800622e:	788f      	ldrb	r7, [r1, #2]
 8006230:	2f07      	cmp	r7, #7
 8006232:	d02f      	beq.n	8006294 <VL53L1_copy_sys_and_core_results_to_range_results+0x110>
			else if (psys->result__report_status ==
 8006234:	2f08      	cmp	r7, #8
 8006236:	d030      	beq.n	800629a <VL53L1_copy_sys_and_core_results_to_range_results+0x116>
				psys->result__dss_actual_effective_spads_sd0;
 8006238:	888f      	ldrh	r7, [r1, #4]
				pdata->VL53L1_p_006 =
 800623a:	f8ac 7016 	strh.w	r7, [ip, #22]
			pdata->peak_signal_count_rate_mcps =
 800623e:	f8ac e030 	strh.w	lr, [ip, #48]	@ 0x30
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006242:	8acf      	ldrh	r7, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 8006244:	f8ac 7032 	strh.w	r7, [ip, #50]	@ 0x32
				psys->result__ambient_count_rate_mcps_sd0;
 8006248:	890f      	ldrh	r7, [r1, #8]
			pdata->ambient_count_rate_mcps =
 800624a:	f8ac 7034 	strh.w	r7, [ip, #52]	@ 0x34
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800624e:	894f      	ldrh	r7, [r1, #10]
 8006250:	017f      	lsls	r7, r7, #5
			if (tmpu32 > 0xFFFF)
 8006252:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8006256:	d301      	bcc.n	800625c <VL53L1_copy_sys_and_core_results_to_range_results+0xd8>
				tmpu32 = 0xFFFF;
 8006258:	f64f 77ff 	movw	r7, #65535	@ 0xffff
			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 800625c:	f8ac 703c 	strh.w	r7, [ip, #60]	@ 0x3c
				psys->result__phase_sd0;
 8006260:	898f      	ldrh	r7, [r1, #12]
			pdata->VL53L1_p_014 =
 8006262:	f8ac 7040 	strh.w	r7, [ip, #64]	@ 0x40
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006266:	89cf      	ldrh	r7, [r1, #14]
			range_mm *= gain_factor;
 8006268:	fb00 f707 	mul.w	r7, r0, r7
			range_mm /= 0x0800;
 800626c:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 8006270:	d416      	bmi.n	80062a0 <VL53L1_copy_sys_and_core_results_to_range_results+0x11c>
			pdata->median_range_mm = (int16_t)range_mm;
 8006272:	f347 27cf 	sbfx	r7, r7, #11, #16
 8006276:	f8ac 7046 	strh.w	r7, [ip, #70]	@ 0x46
			pdata->VL53L1_p_021 =
 800627a:	6857      	ldr	r7, [r2, #4]
 800627c:	f8cc 7028 	str.w	r7, [ip, #40]	@ 0x28
			pdata->VL53L1_p_013 =
 8006280:	6897      	ldr	r7, [r2, #8]
 8006282:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
			pdata->total_periods_elapsed =
 8006286:	68d7      	ldr	r7, [r2, #12]
 8006288:	f8cc 7018 	str.w	r7, [ip, #24]
			pdata->VL53L1_p_020 =
 800628c:	6817      	ldr	r7, [r2, #0]
 800628e:	f8cc 7024 	str.w	r7, [ip, #36]	@ 0x24
			break;
 8006292:	e7a9      	b.n	80061e8 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
				pdata->VL53L1_p_006 =
 8006294:	f8ac 5016 	strh.w	r5, [ip, #22]
 8006298:	e7d1      	b.n	800623e <VL53L1_copy_sys_and_core_results_to_range_results+0xba>
				pdata->VL53L1_p_006 =
 800629a:	f8ac 6016 	strh.w	r6, [ip, #22]
 800629e:	e7ce      	b.n	800623e <VL53L1_copy_sys_and_core_results_to_range_results+0xba>
			range_mm /= 0x0800;
 80062a0:	f207 77ff 	addw	r7, r7, #2047	@ 0x7ff
 80062a4:	e7e5      	b.n	8006272 <VL53L1_copy_sys_and_core_results_to_range_results+0xee>
				psys->result__dss_actual_effective_spads_sd1;
 80062a6:	8b0f      	ldrh	r7, [r1, #24]
			pdata->VL53L1_p_006 =
 80062a8:	f8ac 7016 	strh.w	r7, [ip, #22]
				psys->result__peak_signal_count_rate_mcps_sd1;
 80062ac:	8b4f      	ldrh	r7, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 80062ae:	f8ac 7030 	strh.w	r7, [ip, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 80062b2:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80062b6:	f8ac 7032 	strh.w	r7, [ip, #50]	@ 0x32
				psys->result__ambient_count_rate_mcps_sd1;
 80062ba:	8b8f      	ldrh	r7, [r1, #28]
			pdata->ambient_count_rate_mcps =
 80062bc:	f8ac 7034 	strh.w	r7, [ip, #52]	@ 0x34
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80062c0:	8bcf      	ldrh	r7, [r1, #30]
 80062c2:	017f      	lsls	r7, r7, #5
			if (tmpu32 > 0xFFFF)
 80062c4:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 80062c8:	d301      	bcc.n	80062ce <VL53L1_copy_sys_and_core_results_to_range_results+0x14a>
				tmpu32 = 0xFFFF;
 80062ca:	f64f 77ff 	movw	r7, #65535	@ 0xffff
			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80062ce:	f8ac 703c 	strh.w	r7, [ip, #60]	@ 0x3c
				psys->result__phase_sd1;
 80062d2:	8c0f      	ldrh	r7, [r1, #32]
			pdata->VL53L1_p_014 =
 80062d4:	f8ac 7040 	strh.w	r7, [ip, #64]	@ 0x40
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80062d8:	8c4f      	ldrh	r7, [r1, #34]	@ 0x22
			range_mm *= gain_factor;
 80062da:	fb00 f707 	mul.w	r7, r0, r7
			range_mm /= 0x0800;
 80062de:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 80062e2:	d410      	bmi.n	8006306 <VL53L1_copy_sys_and_core_results_to_range_results+0x182>
			pdata->median_range_mm = (int16_t)range_mm;
 80062e4:	f347 27cf 	sbfx	r7, r7, #11, #16
 80062e8:	f8ac 7046 	strh.w	r7, [ip, #70]	@ 0x46
			pdata->VL53L1_p_021 =
 80062ec:	6957      	ldr	r7, [r2, #20]
 80062ee:	f8cc 7028 	str.w	r7, [ip, #40]	@ 0x28
			pdata->VL53L1_p_013 =
 80062f2:	6997      	ldr	r7, [r2, #24]
 80062f4:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
 80062f8:	69d7      	ldr	r7, [r2, #28]
 80062fa:	f8cc 7018 	str.w	r7, [ip, #24]
			pdata->VL53L1_p_020 =
 80062fe:	6917      	ldr	r7, [r2, #16]
 8006300:	f8cc 7024 	str.w	r7, [ip, #36]	@ 0x24
			break;
 8006304:	e770      	b.n	80061e8 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
			range_mm /= 0x0800;
 8006306:	f207 77ff 	addw	r7, r7, #2047	@ 0x7ff
 800630a:	e7eb      	b.n	80062e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x160>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800630c:	2200      	movs	r2, #0
 800630e:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8006310:	784a      	ldrb	r2, [r1, #1]
 8006312:	f002 021f 	and.w	r2, r2, #31
 8006316:	2a11      	cmp	r2, #17
 8006318:	d804      	bhi.n	8006324 <VL53L1_copy_sys_and_core_results_to_range_results+0x1a0>
 800631a:	4905      	ldr	r1, [pc, #20]	@ (8006330 <VL53L1_copy_sys_and_core_results_to_range_results+0x1ac>)
 800631c:	40d1      	lsrs	r1, r2
 800631e:	f011 0f01 	tst.w	r1, #1
 8006322:	d100      	bne.n	8006326 <VL53L1_copy_sys_and_core_results_to_range_results+0x1a2>
	break;

	}

	LOG_FUNCTION_END(0);
}
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		presults->device_status = (psys->result__range_status &
 8006326:	741a      	strb	r2, [r3, #16]
		presults->VL53L1_p_002[0].range_status =
 8006328:	2200      	movs	r2, #0
 800632a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 800632e:	e7f9      	b.n	8006324 <VL53L1_copy_sys_and_core_results_to_range_results+0x1a0>
 8006330:	0002200e 	.word	0x0002200e

08006334 <VL53L1_set_zone_dss_config>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8006334:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8006338:	2b05      	cmp	r3, #5
 800633a:	d004      	beq.n	8006346 <VL53L1_set_zone_dss_config+0x12>
		pdev->gen_cfg.dss_config__roi_mode_control =
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800633c:	2301      	movs	r3, #1
 800633e:	f880 3388 	strb.w	r3, [r0, #904]	@ 0x388
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
}
 8006342:	2000      	movs	r0, #0
 8006344:	4770      	bx	lr
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006346:	2302      	movs	r3, #2
 8006348:	f880 3388 	strb.w	r3, [r0, #904]	@ 0x388
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800634c:	888b      	ldrh	r3, [r1, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800634e:	f8a0 338e 	strh.w	r3, [r0, #910]	@ 0x38e
 8006352:	e7f6      	b.n	8006342 <VL53L1_set_zone_dss_config+0xe>

08006354 <VL53L1_init_and_start_range>:
{
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	b0c5      	sub	sp, #276	@ 0x114
 800635a:	4604      	mov	r4, r0
 800635c:	4616      	mov	r6, r2
	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800635e:	f100 0318 	add.w	r3, r0, #24
 8006362:	f500 7b4e 	add.w	fp, r0, #824	@ 0x338
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8006366:	f100 0260 	add.w	r2, r0, #96	@ 0x60
 800636a:	9201      	str	r2, [sp, #4]
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800636c:	f200 325e 	addw	r2, r0, #862	@ 0x35e
 8006370:	9202      	str	r2, [sp, #8]
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006372:	f200 327e 	addw	r2, r0, #894	@ 0x37e
 8006376:	9203      	str	r2, [sp, #12]
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006378:	f500 7a65 	add.w	sl, r0, #916	@ 0x394
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800637c:	f500 796b 	add.w	r9, r0, #940	@ 0x3ac
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006380:	f500 7870 	add.w	r8, r0, #960	@ 0x3c0
	pdev->measurement_mode = measurement_mode;
 8006384:	76c1      	strb	r1, [r0, #27]
		(psystem->system__mode_start &
 8006386:	f890 23c4 	ldrb.w	r2, [r0, #964]	@ 0x3c4
	psystem->system__mode_start =
 800638a:	f002 020f 	and.w	r2, r2, #15
 800638e:	4311      	orrs	r1, r2
 8006390:	f880 13c4 	strb.w	r1, [r0, #964]	@ 0x3c4
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8006394:	f890 204a 	ldrb.w	r2, [r0, #74]	@ 0x4a
		VL53L1_set_user_zone(
 8006398:	3236      	adds	r2, #54	@ 0x36
 800639a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800639e:	3106      	adds	r1, #6
 80063a0:	f7ff f8c5 	bl	800552e <VL53L1_set_user_zone>
	if (pdev->zone_cfg.active_zones > 0) {
 80063a4:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
 80063a8:	bb73      	cbnz	r3, 8006408 <VL53L1_init_and_start_range+0xb4>
	if (((pdev->sys_ctrl.system__mode_start &
 80063aa:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 80063ae:	f013 0f02 	tst.w	r3, #2
 80063b2:	d103      	bne.n	80063bc <VL53L1_init_and_start_range+0x68>
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80063b4:	f894 32fc 	ldrb.w	r3, [r4, #764]	@ 0x2fc
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d035      	beq.n	8006428 <VL53L1_init_and_start_range+0xd4>
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80063bc:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80063c0:	f893 3582 	ldrb.w	r3, [r3, #1410]	@ 0x582
 80063c4:	2bff      	cmp	r3, #255	@ 0xff
 80063c6:	d034      	beq.n	8006432 <VL53L1_init_and_start_range+0xde>
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80063c8:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80063cc:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
 80063d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063dc:	d02f      	beq.n	800643e <VL53L1_init_and_start_range+0xea>
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80063de:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80063e2:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
 80063e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063ee:	4a74      	ldr	r2, [pc, #464]	@ (80065c0 <VL53L1_init_and_start_range+0x26c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d03f      	beq.n	8006474 <VL53L1_init_and_start_range+0x120>
	if (status == VL53L1_ERROR_NONE)
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d045      	beq.n	8006484 <VL53L1_init_and_start_range+0x130>
	switch (device_config_level) {
 80063f8:	1e73      	subs	r3, r6, #1
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d855      	bhi.n	80064aa <VL53L1_init_and_start_range+0x156>
 80063fe:	e8df f003 	tbb	[pc, r3]
 8006402:	5052      	.short	0x5052
 8006404:	45564c4e 	.word	0x45564c4e
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8006408:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
		VL53L1_set_zone_dss_config(
 800640c:	f504 41cb 	add.w	r1, r4, #25984	@ 0x6580
 8006410:	3170      	adds	r1, #112	@ 0x70
 8006412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800641c:	4419      	add	r1, r3
 800641e:	3102      	adds	r1, #2
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff ff87 	bl	8006334 <VL53L1_set_zone_dss_config>
 8006426:	e7c0      	b.n	80063aa <VL53L1_init_and_start_range+0x56>
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8006428:	f8b4 3304 	ldrh.w	r3, [r4, #772]	@ 0x304
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800642c:	f8a4 3376 	strh.w	r3, [r4, #886]	@ 0x376
 8006430:	e7c4      	b.n	80063bc <VL53L1_init_and_start_range+0x68>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8006432:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2582 	strb.w	r2, [r3, #1410]	@ 0x582
 800643c:	e7c4      	b.n	80063c8 <VL53L1_init_and_start_range+0x74>
			pdev->gen_cfg.system__interrupt_config_gpio;
 800643e:	f894 2380 	ldrb.w	r2, [r4, #896]	@ 0x380
		pdev->low_power_auto_data.saved_interrupt_config =
 8006442:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8006446:	f883 2583 	strb.w	r2, [r3, #1411]	@ 0x583
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800644a:	2320      	movs	r3, #32
 800644c:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
		if ((pdev->dyn_cfg.system__sequence_config & (
 8006450:	f894 33bd 	ldrb.w	r3, [r4, #957]	@ 0x3bd
 8006454:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8006458:	d108      	bne.n	800646c <VL53L1_init_and_start_range+0x118>
			(pN->mm_config__outer_offset_mm << 2);
 800645a:	f9b4 3076 	ldrsh.w	r3, [r4, #118]	@ 0x76
 800645e:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8006460:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
		if (device_config_level <
 8006464:	2e04      	cmp	r6, #4
 8006466:	d8ba      	bhi.n	80063de <VL53L1_init_and_start_range+0x8a>
			device_config_level =
 8006468:	2605      	movs	r6, #5
 800646a:	e7b8      	b.n	80063de <VL53L1_init_and_start_range+0x8a>
			pN->algo__part_to_part_range_offset_mm = 0x0;
 800646c:	2300      	movs	r3, #0
 800646e:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 8006472:	e7f7      	b.n	8006464 <VL53L1_init_and_start_range+0x110>
			pdev->low_power_auto_data.saved_interrupt_config;
 8006474:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8006478:	f893 3583 	ldrb.w	r3, [r3, #1411]	@ 0x583
		pdev->gen_cfg.system__interrupt_config_gpio =
 800647c:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8006480:	2606      	movs	r6, #6
 8006482:	e7b7      	b.n	80063f4 <VL53L1_init_and_start_range+0xa0>
		status = VL53L1_save_cfg_data(Dev);
 8006484:	4620      	mov	r0, r4
 8006486:	f003 ff57 	bl	800a338 <VL53L1_save_cfg_data>
 800648a:	e7b5      	b.n	80063f8 <VL53L1_init_and_start_range+0xa4>
	switch (device_config_level) {
 800648c:	2701      	movs	r7, #1
	i2c_buffer_size_bytes =
 800648e:	f1c7 0588 	rsb	r5, r7, #136	@ 0x88
 8006492:	b2ad      	uxth	r5, r5
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006494:	2200      	movs	r2, #0
	pbuffer = &buffer[0];
 8006496:	ab04      	add	r3, sp, #16
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006498:	e010      	b.n	80064bc <VL53L1_init_and_start_range+0x168>
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800649a:	2724      	movs	r7, #36	@ 0x24
		break;
 800649c:	e7f7      	b.n	800648e <VL53L1_init_and_start_range+0x13a>
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800649e:	2744      	movs	r7, #68	@ 0x44
		break;
 80064a0:	e7f5      	b.n	800648e <VL53L1_init_and_start_range+0x13a>
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80064a2:	275a      	movs	r7, #90	@ 0x5a
		break;
 80064a4:	e7f3      	b.n	800648e <VL53L1_init_and_start_range+0x13a>
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80064a6:	2771      	movs	r7, #113	@ 0x71
		break;
 80064a8:	e7f1      	b.n	800648e <VL53L1_init_and_start_range+0x13a>
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80064aa:	2783      	movs	r7, #131	@ 0x83
		break;
 80064ac:	e7ef      	b.n	800648e <VL53L1_init_and_start_range+0x13a>
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80064ae:	270d      	movs	r7, #13
 80064b0:	e7ed      	b.n	800648e <VL53L1_init_and_start_range+0x13a>
		*pbuffer++ = 0;
 80064b2:	2100      	movs	r1, #0
 80064b4:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80064b8:	3201      	adds	r2, #1
 80064ba:	b292      	uxth	r2, r2
 80064bc:	42aa      	cmp	r2, r5
 80064be:	d3f8      	bcc.n	80064b2 <VL53L1_init_and_start_range+0x15e>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80064c0:	2e05      	cmp	r6, #5
 80064c2:	d900      	bls.n	80064c6 <VL53L1_init_and_start_range+0x172>
 80064c4:	b370      	cbz	r0, 8006524 <VL53L1_init_and_start_range+0x1d0>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80064c6:	2e04      	cmp	r6, #4
 80064c8:	d901      	bls.n	80064ce <VL53L1_init_and_start_range+0x17a>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d034      	beq.n	8006538 <VL53L1_init_and_start_range+0x1e4>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80064ce:	2e03      	cmp	r6, #3
 80064d0:	d901      	bls.n	80064d6 <VL53L1_init_and_start_range+0x182>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d03a      	beq.n	800654c <VL53L1_init_and_start_range+0x1f8>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80064d6:	2e02      	cmp	r6, #2
 80064d8:	d901      	bls.n	80064de <VL53L1_init_and_start_range+0x18a>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d040      	beq.n	8006560 <VL53L1_init_and_start_range+0x20c>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80064de:	2e01      	cmp	r6, #1
 80064e0:	d901      	bls.n	80064e6 <VL53L1_init_and_start_range+0x192>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d046      	beq.n	8006574 <VL53L1_init_and_start_range+0x220>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80064e6:	b1ce      	cbz	r6, 800651c <VL53L1_init_and_start_range+0x1c8>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d156      	bne.n	800659a <VL53L1_init_and_start_range+0x246>
		i2c_buffer_offset_bytes =
 80064ec:	f1c7 0271 	rsb	r2, r7, #113	@ 0x71
 80064f0:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 80064f2:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 80064f6:	f013 0f20 	tst.w	r3, #32
 80064fa:	d009      	beq.n	8006510 <VL53L1_init_and_start_range+0x1bc>
					pstate->cfg_gph_id | 0x01;
 80064fc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
			pdynamic->system__grouped_parameter_hold_0 =
 8006500:	f043 0101 	orr.w	r1, r3, #1
 8006504:	f884 13ac 	strb.w	r1, [r4, #940]	@ 0x3ac
			pdynamic->system__grouped_parameter_hold_1 =
 8006508:	f884 13b8 	strb.w	r1, [r4, #952]	@ 0x3b8
			pdynamic->system__grouped_parameter_hold   =
 800650c:	f884 33be 	strb.w	r3, [r4, #958]	@ 0x3be
			VL53L1_i2c_encode_dynamic_config(
 8006510:	ab04      	add	r3, sp, #16
 8006512:	441a      	add	r2, r3
 8006514:	2112      	movs	r1, #18
 8006516:	4648      	mov	r0, r9
 8006518:	f007 fa13 	bl	800d942 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 800651c:	b3a0      	cbz	r0, 8006588 <VL53L1_init_and_start_range+0x234>
}
 800651e:	b045      	add	sp, #276	@ 0x114
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i2c_buffer_offset_bytes =
 8006524:	f1c7 0201 	rsb	r2, r7, #1
			VL53L1_i2c_encode_static_nvm_managed(
 8006528:	ab04      	add	r3, sp, #16
 800652a:	fa13 f282 	uxtah	r2, r3, r2
 800652e:	210b      	movs	r1, #11
 8006530:	4658      	mov	r0, fp
 8006532:	f006 ffde 	bl	800d4f2 <VL53L1_i2c_encode_static_nvm_managed>
 8006536:	e7c6      	b.n	80064c6 <VL53L1_init_and_start_range+0x172>
		i2c_buffer_offset_bytes =
 8006538:	f1c7 020d 	rsb	r2, r7, #13
			VL53L1_i2c_encode_customer_nvm_managed(
 800653c:	ab04      	add	r3, sp, #16
 800653e:	fa13 f282 	uxtah	r2, r3, r2
 8006542:	2117      	movs	r1, #23
 8006544:	9801      	ldr	r0, [sp, #4]
 8006546:	f007 f83f 	bl	800d5c8 <VL53L1_i2c_encode_customer_nvm_managed>
 800654a:	e7c0      	b.n	80064ce <VL53L1_init_and_start_range+0x17a>
		i2c_buffer_offset_bytes =
 800654c:	f1c7 0224 	rsb	r2, r7, #36	@ 0x24
			VL53L1_i2c_encode_static_config(
 8006550:	ab04      	add	r3, sp, #16
 8006552:	fa13 f282 	uxtah	r2, r3, r2
 8006556:	2120      	movs	r1, #32
 8006558:	9802      	ldr	r0, [sp, #8]
 800655a:	f007 f8fc 	bl	800d756 <VL53L1_i2c_encode_static_config>
 800655e:	e7ba      	b.n	80064d6 <VL53L1_init_and_start_range+0x182>
		i2c_buffer_offset_bytes =
 8006560:	f1c7 0244 	rsb	r2, r7, #68	@ 0x44
			VL53L1_i2c_encode_general_config(
 8006564:	ab04      	add	r3, sp, #16
 8006566:	fa13 f282 	uxtah	r2, r3, r2
 800656a:	2116      	movs	r1, #22
 800656c:	9803      	ldr	r0, [sp, #12]
 800656e:	f007 f960 	bl	800d832 <VL53L1_i2c_encode_general_config>
 8006572:	e7b4      	b.n	80064de <VL53L1_init_and_start_range+0x18a>
		i2c_buffer_offset_bytes =
 8006574:	f1c7 025a 	rsb	r2, r7, #90	@ 0x5a
			VL53L1_i2c_encode_timing_config(
 8006578:	ab04      	add	r3, sp, #16
 800657a:	fa13 f282 	uxtah	r2, r3, r2
 800657e:	2117      	movs	r1, #23
 8006580:	4650      	mov	r0, sl
 8006582:	f007 f99b 	bl	800d8bc <VL53L1_i2c_encode_timing_config>
 8006586:	e7ae      	b.n	80064e6 <VL53L1_init_and_start_range+0x192>
		i2c_buffer_offset_bytes =
 8006588:	f1c7 0283 	rsb	r2, r7, #131	@ 0x83
			VL53L1_i2c_encode_system_control(
 800658c:	ab04      	add	r3, sp, #16
 800658e:	fa13 f282 	uxtah	r2, r3, r2
 8006592:	2105      	movs	r1, #5
 8006594:	4640      	mov	r0, r8
 8006596:	f007 fa16 	bl	800d9c6 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 800659a:	2800      	cmp	r0, #0
 800659c:	d1bf      	bne.n	800651e <VL53L1_init_and_start_range+0x1ca>
			VL53L1_WriteMulti(
 800659e:	462b      	mov	r3, r5
 80065a0:	aa04      	add	r2, sp, #16
 80065a2:	4639      	mov	r1, r7
 80065a4:	4620      	mov	r0, r4
 80065a6:	f006 fe7d 	bl	800d2a4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d1b7      	bne.n	800651e <VL53L1_init_and_start_range+0x1ca>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80065ae:	4620      	mov	r0, r4
 80065b0:	f003 ffa3 	bl	800a4fa <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d1b2      	bne.n	800651e <VL53L1_init_and_start_range+0x1ca>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80065b8:	4620      	mov	r0, r4
 80065ba:	f004 f848 	bl	800a64e <VL53L1_update_ll_driver_cfg_state>
 80065be:	e7ae      	b.n	800651e <VL53L1_init_and_start_range+0x1ca>
 80065c0:	00010100 	.word	0x00010100

080065c4 <VL53L1_clear_interrupt_and_enable_next_range>:
{
 80065c4:	b508      	push	{r3, lr}
		status = VL53L1_init_and_start_range(
 80065c6:	2203      	movs	r2, #3
 80065c8:	f7ff fec4 	bl	8006354 <VL53L1_init_and_start_range>
}
 80065cc:	bd08      	pop	{r3, pc}

080065ce <VL53L1_set_dmax_mode>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80065ce:	7781      	strb	r1, [r0, #30]

	LOG_FUNCTION_END(status);

	return status;
}
 80065d0:	2000      	movs	r0, #0
 80065d2:	4770      	bx	lr

080065d4 <VL53L1_get_dmax_calibration_data>:
	VL53L1_LLDriverResults_t *pres =
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80065d4:	2902      	cmp	r1, #2
 80065d6:	d021      	beq.n	800661c <VL53L1_get_dmax_calibration_data+0x48>
 80065d8:	2903      	cmp	r1, #3
 80065da:	d004      	beq.n	80065e6 <VL53L1_get_dmax_calibration_data+0x12>
 80065dc:	2901      	cmp	r1, #1
 80065de:	d028      	beq.n	8006632 <VL53L1_get_dmax_calibration_data+0x5e>
 80065e0:	f06f 0003 	mvn.w	r0, #3
 80065e4:	4770      	bx	lr

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 80065e6:	f500 40c0 	add.w	r0, r0, #24576	@ 0x6000
 80065ea:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 80065ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065f2:	f8b1 1d94 	ldrh.w	r1, [r1, #3476]	@ 0xd94
		pdmax_cal->ref__actual_effective_spads =
 80065f6:	8019      	strh	r1, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 80065f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80065fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006600:	f8b2 2d98 	ldrh.w	r2, [r2, #3480]	@ 0xd98
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8006604:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8006606:	f8b0 2d82 	ldrh.w	r2, [r0, #3458]	@ 0xd82
		pdmax_cal->ref__distance_mm =
 800660a:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 800660c:	f8b0 2d84 	ldrh.w	r2, [r0, #3460]	@ 0xd84
		pdmax_cal->ref_reflectance_pc =
 8006610:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8006612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006616:	811a      	strh	r2, [r3, #8]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006618:	2000      	movs	r0, #0
	break;
 800661a:	4770      	bx	lr

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
 800661c:	f8d0 10c6 	ldr.w	r1, [r0, #198]	@ 0xc6
 8006620:	f8d0 20ca 	ldr.w	r2, [r0, #202]	@ 0xca
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	605a      	str	r2, [r3, #4]
 8006628:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	@ 0xce
 800662c:	811a      	strh	r2, [r3, #8]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800662e:	2000      	movs	r0, #0
			pdmax_cal,
			&(pdev->cust_dmax_cal),
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8006630:	4770      	bx	lr

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
 8006632:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8006636:	f8d0 20c0 	ldr.w	r2, [r0, #192]	@ 0xc0
 800663a:	6019      	str	r1, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	f8b0 20c4 	ldrh.w	r2, [r0, #196]	@ 0xc4
 8006642:	811a      	strh	r2, [r3, #8]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006644:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006646:	4770      	bx	lr

08006648 <VL53L1_get_tuning_parm>:
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006648:	f5a1 4100 	sub.w	r1, r1, #32768	@ 0x8000
 800664c:	29c0      	cmp	r1, #192	@ 0xc0
 800664e:	f200 84b0 	bhi.w	8006fb2 <VL53L1_get_tuning_parm+0x96a>
 8006652:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006656:	00c1      	.short	0x00c1
 8006658:	00cb00c6 	.word	0x00cb00c6
 800665c:	00d500d0 	.word	0x00d500d0
 8006660:	00df00da 	.word	0x00df00da
 8006664:	00e900e4 	.word	0x00e900e4
 8006668:	00f300ee 	.word	0x00f300ee
 800666c:	00fd00f8 	.word	0x00fd00f8
 8006670:	01070102 	.word	0x01070102
 8006674:	0111010c 	.word	0x0111010c
 8006678:	011b0116 	.word	0x011b0116
 800667c:	01250120 	.word	0x01250120
 8006680:	012f012a 	.word	0x012f012a
 8006684:	01390134 	.word	0x01390134
 8006688:	0143013e 	.word	0x0143013e
 800668c:	014d0148 	.word	0x014d0148
 8006690:	01570152 	.word	0x01570152
 8006694:	0161015c 	.word	0x0161015c
 8006698:	016b0166 	.word	0x016b0166
 800669c:	01750170 	.word	0x01750170
 80066a0:	017f017a 	.word	0x017f017a
 80066a4:	01890184 	.word	0x01890184
 80066a8:	0193018e 	.word	0x0193018e
 80066ac:	019d0198 	.word	0x019d0198
 80066b0:	01a701a2 	.word	0x01a701a2
 80066b4:	01b101ac 	.word	0x01b101ac
 80066b8:	01bb01b6 	.word	0x01bb01b6
 80066bc:	01c501c0 	.word	0x01c501c0
 80066c0:	01cf01ca 	.word	0x01cf01ca
 80066c4:	01d901d4 	.word	0x01d901d4
 80066c8:	01e301de 	.word	0x01e301de
 80066cc:	01ed01e8 	.word	0x01ed01e8
 80066d0:	01f701f2 	.word	0x01f701f2
 80066d4:	020101fc 	.word	0x020101fc
 80066d8:	020b0206 	.word	0x020b0206
 80066dc:	02150210 	.word	0x02150210
 80066e0:	021f021a 	.word	0x021f021a
 80066e4:	02290224 	.word	0x02290224
 80066e8:	0233022e 	.word	0x0233022e
 80066ec:	023d0238 	.word	0x023d0238
 80066f0:	02470242 	.word	0x02470242
 80066f4:	0251024c 	.word	0x0251024c
 80066f8:	025b0256 	.word	0x025b0256
 80066fc:	02650260 	.word	0x02650260
 8006700:	026f026a 	.word	0x026f026a
 8006704:	02790274 	.word	0x02790274
 8006708:	0283027e 	.word	0x0283027e
 800670c:	028d0288 	.word	0x028d0288
 8006710:	02970292 	.word	0x02970292
 8006714:	02a1029c 	.word	0x02a1029c
 8006718:	02ab02a6 	.word	0x02ab02a6
 800671c:	02b502b0 	.word	0x02b502b0
 8006720:	02bf02ba 	.word	0x02bf02ba
 8006724:	02c902c4 	.word	0x02c902c4
 8006728:	02d302ce 	.word	0x02d302ce
 800672c:	02dd02d8 	.word	0x02dd02d8
 8006730:	02e702e2 	.word	0x02e702e2
 8006734:	02f102ec 	.word	0x02f102ec
 8006738:	02fb02f6 	.word	0x02fb02f6
 800673c:	03050300 	.word	0x03050300
 8006740:	030f030a 	.word	0x030f030a
 8006744:	031d0316 	.word	0x031d0316
 8006748:	032b0324 	.word	0x032b0324
 800674c:	03390332 	.word	0x03390332
 8006750:	03470340 	.word	0x03470340
 8006754:	0355034e 	.word	0x0355034e
 8006758:	0363035c 	.word	0x0363035c
 800675c:	0371036a 	.word	0x0371036a
 8006760:	037f0378 	.word	0x037f0378
 8006764:	038d0386 	.word	0x038d0386
 8006768:	03990394 	.word	0x03990394
 800676c:	03a3039e 	.word	0x03a3039e
 8006770:	03ad03a8 	.word	0x03ad03a8
 8006774:	03b703b2 	.word	0x03b703b2
 8006778:	03c303be 	.word	0x03c303be
 800677c:	03cd03c8 	.word	0x03cd03c8
 8006780:	03d703d2 	.word	0x03d703d2
 8006784:	03e103dc 	.word	0x03e103dc
 8006788:	03eb03e6 	.word	0x03eb03e6
 800678c:	03f503f0 	.word	0x03f503f0
 8006790:	03ff03fa 	.word	0x03ff03fa
 8006794:	04090404 	.word	0x04090404
 8006798:	0413040e 	.word	0x0413040e
 800679c:	041d0418 	.word	0x041d0418
 80067a0:	04270422 	.word	0x04270422
 80067a4:	0431042c 	.word	0x0431042c
 80067a8:	043b0436 	.word	0x043b0436
 80067ac:	04450440 	.word	0x04450440
 80067b0:	044f044a 	.word	0x044f044a
 80067b4:	04590454 	.word	0x04590454
 80067b8:	0463045e 	.word	0x0463045e
 80067bc:	046d0468 	.word	0x046d0468
 80067c0:	04770472 	.word	0x04770472
 80067c4:	0481047c 	.word	0x0481047c
 80067c8:	048b0486 	.word	0x048b0486
 80067cc:	04950490 	.word	0x04950490
 80067d0:	049f049a 	.word	0x049f049a
 80067d4:	04a904a4 	.word	0x04a904a4

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80067d8:	f8b0 3148 	ldrh.w	r3, [r0, #328]	@ 0x148
		*ptuning_parm_value =
 80067dc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067de:	2000      	movs	r0, #0
	break;
 80067e0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80067e2:	f8b0 314a 	ldrh.w	r3, [r0, #330]	@ 0x14a
		*ptuning_parm_value =
 80067e6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067e8:	2000      	movs	r0, #0
	break;
 80067ea:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80067ec:	f8b0 314c 	ldrh.w	r3, [r0, #332]	@ 0x14c
		*ptuning_parm_value =
 80067f0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067f2:	2000      	movs	r0, #0
	break;
 80067f4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80067f6:	f890 3274 	ldrb.w	r3, [r0, #628]	@ 0x274
		*ptuning_parm_value =
 80067fa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067fc:	2000      	movs	r0, #0
	break;
 80067fe:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8006800:	f890 3275 	ldrb.w	r3, [r0, #629]	@ 0x275
		*ptuning_parm_value =
 8006804:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006806:	2000      	movs	r0, #0
	break;
 8006808:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800680a:	f890 3276 	ldrb.w	r3, [r0, #630]	@ 0x276
		*ptuning_parm_value =
 800680e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006810:	2000      	movs	r0, #0
	break;
 8006812:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8006814:	f890 3277 	ldrb.w	r3, [r0, #631]	@ 0x277
		*ptuning_parm_value =
 8006818:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800681a:	2000      	movs	r0, #0
	break;
 800681c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800681e:	f890 3278 	ldrb.w	r3, [r0, #632]	@ 0x278
		*ptuning_parm_value =
 8006822:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006824:	2000      	movs	r0, #0
	break;
 8006826:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8006828:	f890 3279 	ldrb.w	r3, [r0, #633]	@ 0x279
		*ptuning_parm_value =
 800682c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800682e:	2000      	movs	r0, #0
	break;
 8006830:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8006832:	f890 327a 	ldrb.w	r3, [r0, #634]	@ 0x27a
		*ptuning_parm_value =
 8006836:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006838:	2000      	movs	r0, #0
	break;
 800683a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800683c:	f8d0 3280 	ldr.w	r3, [r0, #640]	@ 0x280
		*ptuning_parm_value =
 8006840:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006842:	2000      	movs	r0, #0
	break;
 8006844:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006846:	f8b0 327c 	ldrh.w	r3, [r0, #636]	@ 0x27c
		*ptuning_parm_value =
 800684a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800684c:	2000      	movs	r0, #0
	break;
 800684e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006850:	f8b0 3284 	ldrh.w	r3, [r0, #644]	@ 0x284
		*ptuning_parm_value =
 8006854:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006856:	2000      	movs	r0, #0
	break;
 8006858:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800685a:	f8d0 3288 	ldr.w	r3, [r0, #648]	@ 0x288
		*ptuning_parm_value =
 800685e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006860:	2000      	movs	r0, #0
	break;
 8006862:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8006864:	f890 328c 	ldrb.w	r3, [r0, #652]	@ 0x28c
		*ptuning_parm_value =
 8006868:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800686a:	2000      	movs	r0, #0
	break;
 800686c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800686e:	f8b0 328e 	ldrh.w	r3, [r0, #654]	@ 0x28e
		*ptuning_parm_value =
 8006872:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006874:	2000      	movs	r0, #0
	break;
 8006876:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8006878:	f8b0 30d2 	ldrh.w	r3, [r0, #210]	@ 0xd2
		*ptuning_parm_value =
 800687c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800687e:	2000      	movs	r0, #0
	break;
 8006880:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8006882:	f890 3296 	ldrb.w	r3, [r0, #662]	@ 0x296
		*ptuning_parm_value =
 8006886:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006888:	2000      	movs	r0, #0
	break;
 800688a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800688c:	f8b0 329a 	ldrh.w	r3, [r0, #666]	@ 0x29a
		*ptuning_parm_value =
 8006890:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006892:	2000      	movs	r0, #0
	break;
 8006894:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8006896:	f890 3297 	ldrb.w	r3, [r0, #663]	@ 0x297
		*ptuning_parm_value =
 800689a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800689c:	2000      	movs	r0, #0
	break;
 800689e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80068a0:	f8b0 3298 	ldrh.w	r3, [r0, #664]	@ 0x298
		*ptuning_parm_value =
 80068a4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068a6:	2000      	movs	r0, #0
	break;
 80068a8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80068aa:	f890 3154 	ldrb.w	r3, [r0, #340]	@ 0x154
		*ptuning_parm_value =
 80068ae:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068b0:	2000      	movs	r0, #0
	break;
 80068b2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80068b4:	f890 3155 	ldrb.w	r3, [r0, #341]	@ 0x155
		*ptuning_parm_value =
 80068b8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068ba:	2000      	movs	r0, #0
	break;
 80068bc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80068be:	f890 3156 	ldrb.w	r3, [r0, #342]	@ 0x156
		*ptuning_parm_value =
 80068c2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068c4:	2000      	movs	r0, #0
	break;
 80068c6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80068c8:	f890 3157 	ldrb.w	r3, [r0, #343]	@ 0x157
		*ptuning_parm_value =
 80068cc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068ce:	2000      	movs	r0, #0
	break;
 80068d0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80068d2:	f890 3158 	ldrb.w	r3, [r0, #344]	@ 0x158
		*ptuning_parm_value =
 80068d6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068d8:	2000      	movs	r0, #0
	break;
 80068da:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80068dc:	f890 3159 	ldrb.w	r3, [r0, #345]	@ 0x159
		*ptuning_parm_value =
 80068e0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068e2:	2000      	movs	r0, #0
	break;
 80068e4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80068e6:	f9b0 3306 	ldrsh.w	r3, [r0, #774]	@ 0x306
		*ptuning_parm_value = (int32_t)(
 80068ea:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068ec:	2000      	movs	r0, #0
	break;
 80068ee:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80068f0:	f9b0 3308 	ldrsh.w	r3, [r0, #776]	@ 0x308
		*ptuning_parm_value = (int32_t)(
 80068f4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068f6:	2000      	movs	r0, #0
	break;
 80068f8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80068fa:	f8b0 330c 	ldrh.w	r3, [r0, #780]	@ 0x30c
		*ptuning_parm_value =
 80068fe:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006900:	2000      	movs	r0, #0
	break;
 8006902:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8006904:	f8b0 32b2 	ldrh.w	r3, [r0, #690]	@ 0x2b2
		*ptuning_parm_value =
 8006908:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800690a:	2000      	movs	r0, #0
	break;
 800690c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800690e:	f8b0 330a 	ldrh.w	r3, [r0, #778]	@ 0x30a
		*ptuning_parm_value = (int32_t)(
 8006912:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006914:	2000      	movs	r0, #0
	break;
 8006916:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8006918:	f890 32b0 	ldrb.w	r3, [r0, #688]	@ 0x2b0
		*ptuning_parm_value =
 800691c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800691e:	2000      	movs	r0, #0
	break;
 8006920:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006922:	f9b0 32fe 	ldrsh.w	r3, [r0, #766]	@ 0x2fe
		*ptuning_parm_value =
 8006926:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006928:	2000      	movs	r0, #0
	break;
 800692a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800692c:	f890 315a 	ldrb.w	r3, [r0, #346]	@ 0x15a
		*ptuning_parm_value =
 8006930:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006932:	2000      	movs	r0, #0
	break;
 8006934:	4770      	bx	lr
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8006936:	f890 315b 	ldrb.w	r3, [r0, #347]	@ 0x15b
		*ptuning_parm_value =
 800693a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800693c:	2000      	movs	r0, #0
	break;
 800693e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8006940:	f8b0 315c 	ldrh.w	r3, [r0, #348]	@ 0x15c
		*ptuning_parm_value =
 8006944:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006946:	2000      	movs	r0, #0
	break;
 8006948:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800694a:	f8b0 30d0 	ldrh.w	r3, [r0, #208]	@ 0xd0
		*ptuning_parm_value =
 800694e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006950:	2000      	movs	r0, #0
	break;
 8006952:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8006954:	f890 315e 	ldrb.w	r3, [r0, #350]	@ 0x15e
		*ptuning_parm_value =
 8006958:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800695a:	2000      	movs	r0, #0
	break;
 800695c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800695e:	f8b0 3160 	ldrh.w	r3, [r0, #352]	@ 0x160
		*ptuning_parm_value =
 8006962:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006964:	2000      	movs	r0, #0
	break;
 8006966:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006968:	f8b0 3162 	ldrh.w	r3, [r0, #354]	@ 0x162
		*ptuning_parm_value =
 800696c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800696e:	2000      	movs	r0, #0
	break;
 8006970:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006972:	f8b0 3164 	ldrh.w	r3, [r0, #356]	@ 0x164
		*ptuning_parm_value =
 8006976:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006978:	2000      	movs	r0, #0
	break;
 800697a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800697c:	f8b0 3166 	ldrh.w	r3, [r0, #358]	@ 0x166
		*ptuning_parm_value = (int32_t)(
 8006980:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006982:	2000      	movs	r0, #0
	break;
 8006984:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006986:	f8b0 3168 	ldrh.w	r3, [r0, #360]	@ 0x168
		*ptuning_parm_value =
 800698a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800698c:	2000      	movs	r0, #0
	break;
 800698e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8006990:	f8b0 316a 	ldrh.w	r3, [r0, #362]	@ 0x16a
		*ptuning_parm_value = (int32_t)(
 8006994:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006996:	2000      	movs	r0, #0
	break;
 8006998:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800699a:	f890 316c 	ldrb.w	r3, [r0, #364]	@ 0x16c
		*ptuning_parm_value =
 800699e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069a0:	2000      	movs	r0, #0
	break;
 80069a2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80069a4:	f890 316d 	ldrb.w	r3, [r0, #365]	@ 0x16d
		*ptuning_parm_value =
 80069a8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069aa:	2000      	movs	r0, #0
	break;
 80069ac:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80069ae:	f890 316e 	ldrb.w	r3, [r0, #366]	@ 0x16e
		*ptuning_parm_value =
 80069b2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069b4:	2000      	movs	r0, #0
	break;
 80069b6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80069b8:	f890 3302 	ldrb.w	r3, [r0, #770]	@ 0x302
		*ptuning_parm_value =
 80069bc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069be:	2000      	movs	r0, #0
	break;
 80069c0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80069c2:	f890 316f 	ldrb.w	r3, [r0, #367]	@ 0x16f
		*ptuning_parm_value =
 80069c6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069c8:	2000      	movs	r0, #0
	break;
 80069ca:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80069cc:	f890 3171 	ldrb.w	r3, [r0, #369]	@ 0x171
		*ptuning_parm_value =
 80069d0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069d2:	2000      	movs	r0, #0
	break;
 80069d4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80069d6:	f890 3172 	ldrb.w	r3, [r0, #370]	@ 0x172
		*ptuning_parm_value =
 80069da:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069dc:	2000      	movs	r0, #0
	break;
 80069de:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80069e0:	f9b0 3300 	ldrsh.w	r3, [r0, #768]	@ 0x300
		*ptuning_parm_value =
 80069e4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069e6:	2000      	movs	r0, #0
	break;
 80069e8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80069ea:	f890 314e 	ldrb.w	r3, [r0, #334]	@ 0x14e
		*ptuning_parm_value =
 80069ee:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069f0:	2000      	movs	r0, #0
	break;
 80069f2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80069f4:	f890 314f 	ldrb.w	r3, [r0, #335]	@ 0x14f
		*ptuning_parm_value =
 80069f8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069fa:	2000      	movs	r0, #0
	break;
 80069fc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80069fe:	f890 3150 	ldrb.w	r3, [r0, #336]	@ 0x150
		*ptuning_parm_value =
 8006a02:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a04:	2000      	movs	r0, #0
	break;
 8006a06:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006a08:	f890 3151 	ldrb.w	r3, [r0, #337]	@ 0x151
		*ptuning_parm_value =
 8006a0c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a0e:	2000      	movs	r0, #0
	break;
 8006a10:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006a12:	f890 3152 	ldrb.w	r3, [r0, #338]	@ 0x152
		*ptuning_parm_value =
 8006a16:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a18:	2000      	movs	r0, #0
	break;
 8006a1a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006a1c:	f890 3153 	ldrb.w	r3, [r0, #339]	@ 0x153
		*ptuning_parm_value =
 8006a20:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a22:	2000      	movs	r0, #0
	break;
 8006a24:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006a26:	f890 3170 	ldrb.w	r3, [r0, #368]	@ 0x170
		*ptuning_parm_value =
 8006a2a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a2c:	2000      	movs	r0, #0
	break;
 8006a2e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006a30:	f890 32b4 	ldrb.w	r3, [r0, #692]	@ 0x2b4
		*ptuning_parm_value =
 8006a34:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a36:	2000      	movs	r0, #0
	break;
 8006a38:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006a3a:	f8b0 32c0 	ldrh.w	r3, [r0, #704]	@ 0x2c0
		*ptuning_parm_value =
 8006a3e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a40:	2000      	movs	r0, #0
	break;
 8006a42:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8006a44:	f8b0 32c2 	ldrh.w	r3, [r0, #706]	@ 0x2c2
		*ptuning_parm_value =
 8006a48:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a4a:	2000      	movs	r0, #0
	break;
 8006a4c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006a4e:	f8b0 32c4 	ldrh.w	r3, [r0, #708]	@ 0x2c4
		*ptuning_parm_value =
 8006a52:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a54:	2000      	movs	r0, #0
	break;
 8006a56:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8006a58:	f8b0 32c6 	ldrh.w	r3, [r0, #710]	@ 0x2c6
		*ptuning_parm_value =
 8006a5c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a5e:	2000      	movs	r0, #0
	break;
 8006a60:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8006a62:	f8b0 32c8 	ldrh.w	r3, [r0, #712]	@ 0x2c8
		*ptuning_parm_value =
 8006a66:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a68:	2000      	movs	r0, #0
	break;
 8006a6a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006a6c:	f890 3340 	ldrb.w	r3, [r0, #832]	@ 0x340
		*ptuning_parm_value =
 8006a70:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a72:	2000      	movs	r0, #0
	break;
 8006a74:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006a76:	f890 3258 	ldrb.w	r3, [r0, #600]	@ 0x258
		*ptuning_parm_value =
 8006a7a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a7c:	2000      	movs	r0, #0
	break;
 8006a7e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8006a80:	f890 3259 	ldrb.w	r3, [r0, #601]	@ 0x259
		*ptuning_parm_value =
 8006a84:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a86:	2000      	movs	r0, #0
	break;
 8006a88:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8006a8a:	f8d0 325c 	ldr.w	r3, [r0, #604]	@ 0x25c
		*ptuning_parm_value =
 8006a8e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a90:	2000      	movs	r0, #0
	break;
 8006a92:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006a94:	f8b0 3260 	ldrh.w	r3, [r0, #608]	@ 0x260
		*ptuning_parm_value =
 8006a98:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a9a:	2000      	movs	r0, #0
	break;
 8006a9c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006a9e:	f8b0 3262 	ldrh.w	r3, [r0, #610]	@ 0x262
		*ptuning_parm_value =
 8006aa2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006aa4:	2000      	movs	r0, #0
	break;
 8006aa6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006aa8:	f8b0 3264 	ldrh.w	r3, [r0, #612]	@ 0x264
		*ptuning_parm_value =
 8006aac:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006aae:	2000      	movs	r0, #0
	break;
 8006ab0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8006ab2:	f890 32e0 	ldrb.w	r3, [r0, #736]	@ 0x2e0
		*ptuning_parm_value =
 8006ab6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ab8:	2000      	movs	r0, #0
	break;
 8006aba:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8006abc:	f9b0 32e2 	ldrsh.w	r3, [r0, #738]	@ 0x2e2
		*ptuning_parm_value =
 8006ac0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ac2:	2000      	movs	r0, #0
	break;
 8006ac4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8006ac6:	f9b0 32e4 	ldrsh.w	r3, [r0, #740]	@ 0x2e4
		*ptuning_parm_value =
 8006aca:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006acc:	2000      	movs	r0, #0
	break;
 8006ace:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006ad0:	f8b0 32d0 	ldrh.w	r3, [r0, #720]	@ 0x2d0
		*ptuning_parm_value =
 8006ad4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ad6:	2000      	movs	r0, #0
	break;
 8006ad8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006ada:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
		*ptuning_parm_value =
 8006ade:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ae0:	2000      	movs	r0, #0
	break;
 8006ae2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8006ae4:	f8b0 32e6 	ldrh.w	r3, [r0, #742]	@ 0x2e6
		*ptuning_parm_value =
 8006ae8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006aea:	2000      	movs	r0, #0
	break;
 8006aec:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006aee:	f8b0 32e8 	ldrh.w	r3, [r0, #744]	@ 0x2e8
		*ptuning_parm_value =
 8006af2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006af4:	2000      	movs	r0, #0
	break;
 8006af6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006af8:	f8d0 32d8 	ldr.w	r3, [r0, #728]	@ 0x2d8
		*ptuning_parm_value =
 8006afc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006afe:	2000      	movs	r0, #0
	break;
 8006b00:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8006b02:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
		*ptuning_parm_value =
 8006b06:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b08:	2000      	movs	r0, #0
	break;
 8006b0a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8006b0c:	f8b0 3310 	ldrh.w	r3, [r0, #784]	@ 0x310
		*ptuning_parm_value =
 8006b10:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b12:	2000      	movs	r0, #0
	break;
 8006b14:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006b16:	f8d0 3314 	ldr.w	r3, [r0, #788]	@ 0x314
		*ptuning_parm_value =
 8006b1a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b1c:	2000      	movs	r0, #0
	break;
 8006b1e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006b20:	f8d0 331c 	ldr.w	r3, [r0, #796]	@ 0x31c
		*ptuning_parm_value =
 8006b24:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b26:	2000      	movs	r0, #0
	break;
 8006b28:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006b2a:	f8d0 3318 	ldr.w	r3, [r0, #792]	@ 0x318
		*ptuning_parm_value =
 8006b2e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b30:	2000      	movs	r0, #0
	break;
 8006b32:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006b34:	f890 3320 	ldrb.w	r3, [r0, #800]	@ 0x320
		*ptuning_parm_value =
 8006b38:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b3a:	2000      	movs	r0, #0
	break;
 8006b3c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006b3e:	f890 3321 	ldrb.w	r3, [r0, #801]	@ 0x321
		*ptuning_parm_value =
 8006b42:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b44:	2000      	movs	r0, #0
	break;
 8006b46:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006b48:	f890 3322 	ldrb.w	r3, [r0, #802]	@ 0x322
		*ptuning_parm_value =
 8006b4c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b4e:	2000      	movs	r0, #0
	break;
 8006b50:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8006b52:	f8b0 3324 	ldrh.w	r3, [r0, #804]	@ 0x324
		*ptuning_parm_value =
 8006b56:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b58:	2000      	movs	r0, #0
	break;
 8006b5a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8006b5c:	f8d0 3328 	ldr.w	r3, [r0, #808]	@ 0x328
		*ptuning_parm_value =
 8006b60:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b62:	2000      	movs	r0, #0
	break;
 8006b64:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8006b66:	f8d0 332c 	ldr.w	r3, [r0, #812]	@ 0x32c
		*ptuning_parm_value =
 8006b6a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b6c:	2000      	movs	r0, #0
	break;
 8006b6e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8006b70:	f8b0 3334 	ldrh.w	r3, [r0, #820]	@ 0x334
		*ptuning_parm_value =
 8006b74:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b76:	2000      	movs	r0, #0
	break;
 8006b78:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8006b7a:	f8d0 3330 	ldr.w	r3, [r0, #816]	@ 0x330
		*ptuning_parm_value =
 8006b7e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b80:	2000      	movs	r0, #0
	break;
 8006b82:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8006b84:	f8b0 3336 	ldrh.w	r3, [r0, #822]	@ 0x336
		*ptuning_parm_value =
 8006b88:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b8a:	2000      	movs	r0, #0
	break;
 8006b8c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8006b8e:	f890 3269 	ldrb.w	r3, [r0, #617]	@ 0x269
		*ptuning_parm_value =
 8006b92:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b94:	2000      	movs	r0, #0
	break;
 8006b96:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006b98:	f890 326a 	ldrb.w	r3, [r0, #618]	@ 0x26a
		*ptuning_parm_value =
 8006b9c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b9e:	2000      	movs	r0, #0
	break;
 8006ba0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006ba2:	f8b0 3270 	ldrh.w	r3, [r0, #624]	@ 0x270
		*ptuning_parm_value =
 8006ba6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ba8:	2000      	movs	r0, #0
	break;
 8006baa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006bac:	f8b0 3174 	ldrh.w	r3, [r0, #372]	@ 0x174
		*ptuning_parm_value =
 8006bb0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bb2:	2000      	movs	r0, #0
	break;
 8006bb4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006bb6:	f8b0 3176 	ldrh.w	r3, [r0, #374]	@ 0x176
		*ptuning_parm_value =
 8006bba:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bbc:	2000      	movs	r0, #0
	break;
 8006bbe:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006bc0:	f8b0 3178 	ldrh.w	r3, [r0, #376]	@ 0x178
		*ptuning_parm_value =
 8006bc4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bc6:	2000      	movs	r0, #0
	break;
 8006bc8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006bca:	f8b0 317a 	ldrh.w	r3, [r0, #378]	@ 0x17a
		*ptuning_parm_value =
 8006bce:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bd0:	2000      	movs	r0, #0
	break;
 8006bd2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006bd4:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
		*ptuning_parm_value =
 8006bd8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bda:	2000      	movs	r0, #0
	break;
 8006bdc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006bde:	f8d0 3184 	ldr.w	r3, [r0, #388]	@ 0x184
		*ptuning_parm_value =
 8006be2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006be4:	2000      	movs	r0, #0
	break;
 8006be6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006be8:	f8d0 3188 	ldr.w	r3, [r0, #392]	@ 0x188
		*ptuning_parm_value =
 8006bec:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bee:	2000      	movs	r0, #0
	break;
 8006bf0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006bf2:	f8d0 318c 	ldr.w	r3, [r0, #396]	@ 0x18c
		*ptuning_parm_value =
 8006bf6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bf8:	2000      	movs	r0, #0
	break;
 8006bfa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006bfc:	f8d0 3190 	ldr.w	r3, [r0, #400]	@ 0x190
		*ptuning_parm_value =
 8006c00:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c02:	2000      	movs	r0, #0
	break;
 8006c04:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006c06:	f8d0 3194 	ldr.w	r3, [r0, #404]	@ 0x194
		*ptuning_parm_value =
 8006c0a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c0c:	2000      	movs	r0, #0
	break;
 8006c0e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006c10:	f8d0 3198 	ldr.w	r3, [r0, #408]	@ 0x198
		*ptuning_parm_value =
 8006c14:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c16:	2000      	movs	r0, #0
	break;
 8006c18:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006c1a:	f8d0 319c 	ldr.w	r3, [r0, #412]	@ 0x19c
		*ptuning_parm_value =
 8006c1e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c20:	2000      	movs	r0, #0
	break;
 8006c22:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006c24:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
		*ptuning_parm_value =
 8006c28:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c2a:	2000      	movs	r0, #0
	break;
 8006c2c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006c2e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
		*ptuning_parm_value =
 8006c32:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c34:	2000      	movs	r0, #0
	break;
 8006c36:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006c38:	f8d0 31a8 	ldr.w	r3, [r0, #424]	@ 0x1a8
		*ptuning_parm_value =
 8006c3c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c3e:	2000      	movs	r0, #0
	break;
 8006c40:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006c42:	f8d0 31ac 	ldr.w	r3, [r0, #428]	@ 0x1ac
		*ptuning_parm_value =
 8006c46:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c48:	2000      	movs	r0, #0
	break;
 8006c4a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006c4c:	f8d0 31b4 	ldr.w	r3, [r0, #436]	@ 0x1b4
		*ptuning_parm_value =
 8006c50:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c52:	2000      	movs	r0, #0
	break;
 8006c54:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8006c56:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
		*ptuning_parm_value =
 8006c5a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c5c:	2000      	movs	r0, #0
	break;
 8006c5e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006c60:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
		*ptuning_parm_value =
 8006c64:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c66:	2000      	movs	r0, #0
	break;
 8006c68:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006c6a:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
		*ptuning_parm_value =
 8006c6e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c70:	2000      	movs	r0, #0
	break;
 8006c72:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006c74:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006c78:	f8b0 33f8 	ldrh.w	r3, [r0, #1016]	@ 0x3f8
		*ptuning_parm_value =
 8006c7c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c7e:	2000      	movs	r0, #0
	break;
 8006c80:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8006c82:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006c86:	f8d0 33fc 	ldr.w	r3, [r0, #1020]	@ 0x3fc
		*ptuning_parm_value =
 8006c8a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c8c:	2000      	movs	r0, #0
	break;
 8006c8e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006c90:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006c94:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
		*ptuning_parm_value =
 8006c98:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c9a:	2000      	movs	r0, #0
	break;
 8006c9c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8006c9e:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006ca2:	f890 3404 	ldrb.w	r3, [r0, #1028]	@ 0x404
		*ptuning_parm_value =
 8006ca6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ca8:	2000      	movs	r0, #0
	break;
 8006caa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8006cac:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006cb0:	f8d0 3408 	ldr.w	r3, [r0, #1032]	@ 0x408
		*ptuning_parm_value =
 8006cb4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cb6:	2000      	movs	r0, #0
	break;
 8006cb8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006cba:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006cbe:	f8d0 340c 	ldr.w	r3, [r0, #1036]	@ 0x40c
		*ptuning_parm_value =
 8006cc2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cc4:	2000      	movs	r0, #0
	break;
 8006cc6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006cc8:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006ccc:	f8d0 3410 	ldr.w	r3, [r0, #1040]	@ 0x410
		*ptuning_parm_value =
 8006cd0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cd2:	2000      	movs	r0, #0
	break;
 8006cd4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006cd6:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006cda:	f8d0 3414 	ldr.w	r3, [r0, #1044]	@ 0x414
		*ptuning_parm_value =
 8006cde:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ce0:	2000      	movs	r0, #0
	break;
 8006ce2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006ce4:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006ce8:	f890 341c 	ldrb.w	r3, [r0, #1052]	@ 0x41c
		*ptuning_parm_value =
 8006cec:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cee:	2000      	movs	r0, #0
	break;
 8006cf0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006cf2:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006cf6:	f9b0 341e 	ldrsh.w	r3, [r0, #1054]	@ 0x41e
		*ptuning_parm_value =
 8006cfa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cfc:	2000      	movs	r0, #0
	break;
 8006cfe:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006d00:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d04:	f9b0 3420 	ldrsh.w	r3, [r0, #1056]	@ 0x420
		*ptuning_parm_value =
 8006d08:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d0a:	2000      	movs	r0, #0
	break;
 8006d0c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006d0e:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d12:	f890 3422 	ldrb.w	r3, [r0, #1058]	@ 0x422
		*ptuning_parm_value =
 8006d16:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d18:	2000      	movs	r0, #0
	break;
 8006d1a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006d1c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d20:	f890 33f6 	ldrb.w	r3, [r0, #1014]	@ 0x3f6
		*ptuning_parm_value =
 8006d24:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d26:	2000      	movs	r0, #0
	break;
 8006d28:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8006d2a:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d2e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	@ 0x418
		*ptuning_parm_value = (int32_t)(
 8006d32:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d34:	2000      	movs	r0, #0
	break;
 8006d36:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006d38:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d3c:	f8d0 3424 	ldr.w	r3, [r0, #1060]	@ 0x424
		*ptuning_parm_value =
 8006d40:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d42:	2000      	movs	r0, #0
	break;
 8006d44:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006d46:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d4a:	f8d0 3428 	ldr.w	r3, [r0, #1064]	@ 0x428
		*ptuning_parm_value =
 8006d4e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d50:	2000      	movs	r0, #0
	break;
 8006d52:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006d54:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d58:	f8d0 342c 	ldr.w	r3, [r0, #1068]	@ 0x42c
		*ptuning_parm_value =
 8006d5c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d5e:	2000      	movs	r0, #0
	break;
 8006d60:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006d62:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d66:	f8b0 3430 	ldrh.w	r3, [r0, #1072]	@ 0x430
		*ptuning_parm_value =
 8006d6a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d6c:	2000      	movs	r0, #0
	break;
 8006d6e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006d70:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006d74:	f890 3580 	ldrb.w	r3, [r0, #1408]	@ 0x580
		*ptuning_parm_value =
 8006d78:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d7a:	2000      	movs	r0, #0
	break;
 8006d7c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006d7e:	f8d0 31b0 	ldr.w	r3, [r0, #432]	@ 0x1b0
		*ptuning_parm_value =
 8006d82:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d84:	2000      	movs	r0, #0
	break;
 8006d86:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006d88:	f8d0 31c4 	ldr.w	r3, [r0, #452]	@ 0x1c4
		*ptuning_parm_value =
 8006d8c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d8e:	2000      	movs	r0, #0
	break;
 8006d90:	4770      	bx	lr
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006d92:	f8b0 317c 	ldrh.w	r3, [r0, #380]	@ 0x17c
		*ptuning_parm_value =
 8006d96:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d98:	2000      	movs	r0, #0
	break;
 8006d9a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006d9c:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
		*ptuning_parm_value =
 8006da0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006da2:	2000      	movs	r0, #0
	break;
 8006da4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8006da6:	f890 31cc 	ldrb.w	r3, [r0, #460]	@ 0x1cc
		*ptuning_parm_value =
 8006daa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dac:	2000      	movs	r0, #0
	break;
 8006dae:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006db0:	f8d0 31d0 	ldr.w	r3, [r0, #464]	@ 0x1d0
		*ptuning_parm_value =
 8006db4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006db6:	2000      	movs	r0, #0
	break;
 8006db8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8006dba:	f890 31d4 	ldrb.w	r3, [r0, #468]	@ 0x1d4
		*ptuning_parm_value =
 8006dbe:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dc0:	2000      	movs	r0, #0
	break;
 8006dc2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006dc4:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8006dc8:	f8d0 3434 	ldr.w	r3, [r0, #1076]	@ 0x434
		*ptuning_parm_value =
 8006dcc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dce:	2000      	movs	r0, #0
	break;
 8006dd0:	4770      	bx	lr

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8006dd2:	f890 31d5 	ldrb.w	r3, [r0, #469]	@ 0x1d5
		*ptuning_parm_value =
 8006dd6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dd8:	2000      	movs	r0, #0
	break;
 8006dda:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006ddc:	f9b0 31d6 	ldrsh.w	r3, [r0, #470]	@ 0x1d6
		*ptuning_parm_value =
 8006de0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006de2:	2000      	movs	r0, #0
	break;
 8006de4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8006de6:	f9b0 31d8 	ldrsh.w	r3, [r0, #472]	@ 0x1d8
		*ptuning_parm_value =
 8006dea:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dec:	2000      	movs	r0, #0
	break;
 8006dee:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006df0:	f9b0 31da 	ldrsh.w	r3, [r0, #474]	@ 0x1da
		*ptuning_parm_value =
 8006df4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006df6:	2000      	movs	r0, #0
	break;
 8006df8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006dfa:	f9b0 31dc 	ldrsh.w	r3, [r0, #476]	@ 0x1dc
		*ptuning_parm_value =
 8006dfe:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e00:	2000      	movs	r0, #0
	break;
 8006e02:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006e04:	f9b0 31de 	ldrsh.w	r3, [r0, #478]	@ 0x1de
		*ptuning_parm_value =
 8006e08:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e0a:	2000      	movs	r0, #0
	break;
 8006e0c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006e0e:	f9b0 31e0 	ldrsh.w	r3, [r0, #480]	@ 0x1e0
		*ptuning_parm_value =
 8006e12:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e14:	2000      	movs	r0, #0
	break;
 8006e16:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006e18:	f9b0 31e2 	ldrsh.w	r3, [r0, #482]	@ 0x1e2
		*ptuning_parm_value =
 8006e1c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e1e:	2000      	movs	r0, #0
	break;
 8006e20:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8006e22:	f9b0 31e4 	ldrsh.w	r3, [r0, #484]	@ 0x1e4
		*ptuning_parm_value =
 8006e26:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e28:	2000      	movs	r0, #0
	break;
 8006e2a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006e2c:	f9b0 31e6 	ldrsh.w	r3, [r0, #486]	@ 0x1e6
		*ptuning_parm_value =
 8006e30:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e32:	2000      	movs	r0, #0
	break;
 8006e34:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8006e36:	f9b0 31e8 	ldrsh.w	r3, [r0, #488]	@ 0x1e8
		*ptuning_parm_value =
 8006e3a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e3c:	2000      	movs	r0, #0
	break;
 8006e3e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8006e40:	f9b0 31ea 	ldrsh.w	r3, [r0, #490]	@ 0x1ea
		*ptuning_parm_value =
 8006e44:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e46:	2000      	movs	r0, #0
	break;
 8006e48:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8006e4a:	f9b0 31ec 	ldrsh.w	r3, [r0, #492]	@ 0x1ec
		*ptuning_parm_value =
 8006e4e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e50:	2000      	movs	r0, #0
	break;
 8006e52:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006e54:	f9b0 31ee 	ldrsh.w	r3, [r0, #494]	@ 0x1ee
		*ptuning_parm_value =
 8006e58:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e5a:	2000      	movs	r0, #0
	break;
 8006e5c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8006e5e:	f9b0 31f0 	ldrsh.w	r3, [r0, #496]	@ 0x1f0
		*ptuning_parm_value =
 8006e62:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e64:	2000      	movs	r0, #0
	break;
 8006e66:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006e68:	f9b0 31f2 	ldrsh.w	r3, [r0, #498]	@ 0x1f2
		*ptuning_parm_value =
 8006e6c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e6e:	2000      	movs	r0, #0
	break;
 8006e70:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8006e72:	f9b0 31f4 	ldrsh.w	r3, [r0, #500]	@ 0x1f4
		*ptuning_parm_value =
 8006e76:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e78:	2000      	movs	r0, #0
	break;
 8006e7a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006e7c:	f9b0 31f6 	ldrsh.w	r3, [r0, #502]	@ 0x1f6
		*ptuning_parm_value =
 8006e80:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e82:	2000      	movs	r0, #0
	break;
 8006e84:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8006e86:	f9b0 31f8 	ldrsh.w	r3, [r0, #504]	@ 0x1f8
		*ptuning_parm_value =
 8006e8a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e8c:	2000      	movs	r0, #0
	break;
 8006e8e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006e90:	f9b0 31fa 	ldrsh.w	r3, [r0, #506]	@ 0x1fa
		*ptuning_parm_value =
 8006e94:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e96:	2000      	movs	r0, #0
	break;
 8006e98:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006e9a:	f9b0 31fc 	ldrsh.w	r3, [r0, #508]	@ 0x1fc
		*ptuning_parm_value =
 8006e9e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ea0:	2000      	movs	r0, #0
	break;
 8006ea2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006ea4:	f9b0 31fe 	ldrsh.w	r3, [r0, #510]	@ 0x1fe
		*ptuning_parm_value =
 8006ea8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006eaa:	2000      	movs	r0, #0
	break;
 8006eac:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006eae:	f9b0 3200 	ldrsh.w	r3, [r0, #512]	@ 0x200
		*ptuning_parm_value =
 8006eb2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006eb4:	2000      	movs	r0, #0
	break;
 8006eb6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8006eb8:	f9b0 3202 	ldrsh.w	r3, [r0, #514]	@ 0x202
		*ptuning_parm_value =
 8006ebc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ebe:	2000      	movs	r0, #0
	break;
 8006ec0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8006ec2:	f9b0 3204 	ldrsh.w	r3, [r0, #516]	@ 0x204
		*ptuning_parm_value =
 8006ec6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ec8:	2000      	movs	r0, #0
	break;
 8006eca:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006ecc:	f9b0 3206 	ldrsh.w	r3, [r0, #518]	@ 0x206
		*ptuning_parm_value =
 8006ed0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ed2:	2000      	movs	r0, #0
	break;
 8006ed4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006ed6:	f9b0 3208 	ldrsh.w	r3, [r0, #520]	@ 0x208
		*ptuning_parm_value =
 8006eda:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006edc:	2000      	movs	r0, #0
	break;
 8006ede:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006ee0:	f9b0 320a 	ldrsh.w	r3, [r0, #522]	@ 0x20a
		*ptuning_parm_value =
 8006ee4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ee6:	2000      	movs	r0, #0
	break;
 8006ee8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8006eea:	f9b0 320c 	ldrsh.w	r3, [r0, #524]	@ 0x20c
		*ptuning_parm_value =
 8006eee:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ef0:	2000      	movs	r0, #0
	break;
 8006ef2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8006ef4:	f9b0 320e 	ldrsh.w	r3, [r0, #526]	@ 0x20e
		*ptuning_parm_value =
 8006ef8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006efa:	2000      	movs	r0, #0
	break;
 8006efc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8006efe:	f9b0 3210 	ldrsh.w	r3, [r0, #528]	@ 0x210
		*ptuning_parm_value =
 8006f02:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f04:	2000      	movs	r0, #0
	break;
 8006f06:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006f08:	f9b0 3212 	ldrsh.w	r3, [r0, #530]	@ 0x212
		*ptuning_parm_value =
 8006f0c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f0e:	2000      	movs	r0, #0
	break;
 8006f10:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006f12:	f9b0 3214 	ldrsh.w	r3, [r0, #532]	@ 0x214
		*ptuning_parm_value =
 8006f16:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f18:	2000      	movs	r0, #0
	break;
 8006f1a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006f1c:	f9b0 3216 	ldrsh.w	r3, [r0, #534]	@ 0x216
		*ptuning_parm_value =
 8006f20:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f22:	2000      	movs	r0, #0
	break;
 8006f24:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006f26:	f9b0 3218 	ldrsh.w	r3, [r0, #536]	@ 0x218
		*ptuning_parm_value =
 8006f2a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f2c:	2000      	movs	r0, #0
	break;
 8006f2e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006f30:	f9b0 321a 	ldrsh.w	r3, [r0, #538]	@ 0x21a
		*ptuning_parm_value =
 8006f34:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f36:	2000      	movs	r0, #0
	break;
 8006f38:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006f3a:	f9b0 321c 	ldrsh.w	r3, [r0, #540]	@ 0x21c
		*ptuning_parm_value =
 8006f3e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f40:	2000      	movs	r0, #0
	break;
 8006f42:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006f44:	f9b0 321e 	ldrsh.w	r3, [r0, #542]	@ 0x21e
		*ptuning_parm_value =
 8006f48:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f4a:	2000      	movs	r0, #0
	break;
 8006f4c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8006f4e:	f9b0 3220 	ldrsh.w	r3, [r0, #544]	@ 0x220
		*ptuning_parm_value =
 8006f52:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f54:	2000      	movs	r0, #0
	break;
 8006f56:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006f58:	f9b0 3222 	ldrsh.w	r3, [r0, #546]	@ 0x222
		*ptuning_parm_value =
 8006f5c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f5e:	2000      	movs	r0, #0
	break;
 8006f60:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006f62:	f9b0 3224 	ldrsh.w	r3, [r0, #548]	@ 0x224
		*ptuning_parm_value =
 8006f66:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f68:	2000      	movs	r0, #0
	break;
 8006f6a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006f6c:	f9b0 3226 	ldrsh.w	r3, [r0, #550]	@ 0x226
		*ptuning_parm_value =
 8006f70:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f72:	2000      	movs	r0, #0
	break;
 8006f74:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006f76:	f9b0 3228 	ldrsh.w	r3, [r0, #552]	@ 0x228
		*ptuning_parm_value =
 8006f7a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f7c:	2000      	movs	r0, #0
	break;
 8006f7e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006f80:	f9b0 322a 	ldrsh.w	r3, [r0, #554]	@ 0x22a
		*ptuning_parm_value =
 8006f84:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f86:	2000      	movs	r0, #0
	break;
 8006f88:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006f8a:	f9b0 322c 	ldrsh.w	r3, [r0, #556]	@ 0x22c
		*ptuning_parm_value =
 8006f8e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f90:	2000      	movs	r0, #0
	break;
 8006f92:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8006f94:	f8d0 3230 	ldr.w	r3, [r0, #560]	@ 0x230
		*ptuning_parm_value =
 8006f98:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f9a:	2000      	movs	r0, #0
	break;
 8006f9c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MAX_TOTAL_RATE_PER_SPAD:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_dss_max_total_rate_per_spad_mcps;
 8006f9e:	f8b0 3234 	ldrh.w	r3, [r0, #564]	@ 0x234
		*ptuning_parm_value =
 8006fa2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006fa4:	2000      	movs	r0, #0
	break;
 8006fa6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RECOVER_TOTAL_RATE_PER_SPAD:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_dss_rec_total_rate_per_spad_mcps;
 8006fa8:	f8b0 3236 	ldrh.w	r3, [r0, #566]	@ 0x236
		*ptuning_parm_value =
 8006fac:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006fae:	2000      	movs	r0, #0
	break;
 8006fb0:	4770      	bx	lr

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006fb2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006fb6:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006fb8:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006fbc:	4770      	bx	lr

08006fbe <VL53L1_load_patch>:
	VL53L1_DEV Dev) {
 8006fbe:	b530      	push	{r4, r5, lr}
 8006fc0:	b0c3      	sub	sp, #268	@ 0x10c
 8006fc2:	4604      	mov	r4, r0
	int32_t patch_tuning = 0;
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	9241      	str	r2, [sp, #260]	@ 0x104
		status = VL53L1_WrByte(Dev,
 8006fc8:	2185      	movs	r1, #133	@ 0x85
 8006fca:	f006 f9a9 	bl	800d320 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 8006fce:	4605      	mov	r5, r0
 8006fd0:	b198      	cbz	r0, 8006ffa <VL53L1_load_patch+0x3c>
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8006fd2:	aa41      	add	r2, sp, #260	@ 0x104
 8006fd4:	f248 018c 	movw	r1, #32908	@ 0x808c
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f7ff fb35 	bl	8006648 <VL53L1_get_tuning_parm>
	switch (patch_tuning) {
 8006fde:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d010      	beq.n	8007006 <VL53L1_load_patch+0x48>
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d010      	beq.n	800700a <VL53L1_load_patch+0x4c>
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d00a      	beq.n	8007002 <VL53L1_load_patch+0x44>
 8006fec:	2300      	movs	r3, #0
	if (status == VL53L1_ERROR_NONE) {
 8006fee:	b175      	cbz	r5, 800700e <VL53L1_load_patch+0x50>
	if (status == VL53L1_ERROR_NONE) {
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	d041      	beq.n	8007078 <VL53L1_load_patch+0xba>
}
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	b043      	add	sp, #268	@ 0x10c
 8006ff8:	bd30      	pop	{r4, r5, pc}
		VL53L1_enable_powerforce(Dev);
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f002 fb70 	bl	80096e0 <VL53L1_enable_powerforce>
 8007000:	e7e7      	b.n	8006fd2 <VL53L1_load_patch+0x14>
		patch_power = 0x10;
 8007002:	2310      	movs	r3, #16
 8007004:	e7f3      	b.n	8006fee <VL53L1_load_patch+0x30>
		patch_power = 0x20;
 8007006:	2320      	movs	r3, #32
 8007008:	e7f1      	b.n	8006fee <VL53L1_load_patch+0x30>
		patch_power = 0x40;
 800700a:	2340      	movs	r3, #64	@ 0x40
 800700c:	e7ef      	b.n	8006fee <VL53L1_load_patch+0x30>
		comms_buffer[0] = 0x29;
 800700e:	2229      	movs	r2, #41	@ 0x29
 8007010:	f88d 2004 	strb.w	r2, [sp, #4]
		comms_buffer[1] = 0xC9;
 8007014:	22c9      	movs	r2, #201	@ 0xc9
 8007016:	f88d 2005 	strb.w	r2, [sp, #5]
		comms_buffer[2] = 0x0E;
 800701a:	220e      	movs	r2, #14
 800701c:	f88d 2006 	strb.w	r2, [sp, #6]
		comms_buffer[3] = 0x40;
 8007020:	2240      	movs	r2, #64	@ 0x40
 8007022:	f88d 2007 	strb.w	r2, [sp, #7]
		comms_buffer[4] = 0x28;
 8007026:	2228      	movs	r2, #40	@ 0x28
 8007028:	f88d 2008 	strb.w	r2, [sp, #8]
		comms_buffer[5] = patch_power;
 800702c:	f88d 3009 	strb.w	r3, [sp, #9]
		status = VL53L1_WriteMulti(Dev,
 8007030:	2306      	movs	r3, #6
 8007032:	aa01      	add	r2, sp, #4
 8007034:	f240 4176 	movw	r1, #1142	@ 0x476
 8007038:	4620      	mov	r0, r4
 800703a:	f006 f933 	bl	800d2a4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 800703e:	4605      	mov	r5, r0
 8007040:	2800      	cmp	r0, #0
 8007042:	d1d7      	bne.n	8006ff4 <VL53L1_load_patch+0x36>
		comms_buffer[0] = 0x03;
 8007044:	2303      	movs	r3, #3
 8007046:	f88d 3004 	strb.w	r3, [sp, #4]
		comms_buffer[1] = 0x6D;
 800704a:	226d      	movs	r2, #109	@ 0x6d
 800704c:	f88d 2005 	strb.w	r2, [sp, #5]
		comms_buffer[2] = 0x03;
 8007050:	f88d 3006 	strb.w	r3, [sp, #6]
		comms_buffer[3] = 0x6F;
 8007054:	236f      	movs	r3, #111	@ 0x6f
 8007056:	f88d 3007 	strb.w	r3, [sp, #7]
		comms_buffer[4] = 0x07;
 800705a:	2307      	movs	r3, #7
 800705c:	f88d 3008 	strb.w	r3, [sp, #8]
		comms_buffer[5] = 0x29;
 8007060:	2329      	movs	r3, #41	@ 0x29
 8007062:	f88d 3009 	strb.w	r3, [sp, #9]
		status = VL53L1_WriteMulti(Dev,
 8007066:	2306      	movs	r3, #6
 8007068:	aa01      	add	r2, sp, #4
 800706a:	f240 4196 	movw	r1, #1174	@ 0x496
 800706e:	4620      	mov	r0, r4
 8007070:	f006 f918 	bl	800d2a4 <VL53L1_WriteMulti>
 8007074:	4605      	mov	r5, r0
 8007076:	e7bb      	b.n	8006ff0 <VL53L1_load_patch+0x32>
		comms_buffer[0] = 0x00;
 8007078:	2300      	movs	r3, #0
 800707a:	f88d 3004 	strb.w	r3, [sp, #4]
		comms_buffer[1] = 0x07;
 800707e:	2307      	movs	r3, #7
 8007080:	f88d 3005 	strb.w	r3, [sp, #5]
		status = VL53L1_WriteMulti(Dev,
 8007084:	2302      	movs	r3, #2
 8007086:	aa01      	add	r2, sp, #4
 8007088:	f240 4172 	movw	r1, #1138	@ 0x472
 800708c:	4620      	mov	r0, r4
 800708e:	f006 f909 	bl	800d2a4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 8007092:	4605      	mov	r5, r0
 8007094:	2800      	cmp	r0, #0
 8007096:	d1ad      	bne.n	8006ff4 <VL53L1_load_patch+0x36>
		comms_buffer[0] = 0x00;
 8007098:	2300      	movs	r3, #0
 800709a:	f88d 3004 	strb.w	r3, [sp, #4]
		comms_buffer[1] = 0x07;
 800709e:	2307      	movs	r3, #7
 80070a0:	f88d 3005 	strb.w	r3, [sp, #5]
		status = VL53L1_WriteMulti(Dev,
 80070a4:	2302      	movs	r3, #2
 80070a6:	aa01      	add	r2, sp, #4
 80070a8:	f240 4174 	movw	r1, #1140	@ 0x474
 80070ac:	4620      	mov	r0, r4
 80070ae:	f006 f8f9 	bl	800d2a4 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 80070b2:	4605      	mov	r5, r0
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d19d      	bne.n	8006ff4 <VL53L1_load_patch+0x36>
		status = VL53L1_WrByte(Dev,
 80070b8:	2201      	movs	r2, #1
 80070ba:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 80070be:	4620      	mov	r0, r4
 80070c0:	f006 f92e 	bl	800d320 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 80070c4:	4605      	mov	r5, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d194      	bne.n	8006ff4 <VL53L1_load_patch+0x36>
		status = VL53L1_WrByte(Dev,
 80070ca:	2201      	movs	r2, #1
 80070cc:	2185      	movs	r1, #133	@ 0x85
 80070ce:	4620      	mov	r0, r4
 80070d0:	f006 f926 	bl	800d320 <VL53L1_WrByte>
 80070d4:	4605      	mov	r5, r0
 80070d6:	e78d      	b.n	8006ff4 <VL53L1_load_patch+0x36>

080070d8 <vl53l1_histo_merge>:
		VL53L1_histogram_bin_data_t *pdata, int32_t *pbin_data) {
 80070d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070dc:	b087      	sub	sp, #28
 80070de:	4606      	mov	r6, r0
 80070e0:	4688      	mov	r8, r1
 80070e2:	4617      	mov	r7, r2
	VL53L1_LLDriverData_t *pdev =
 80070e4:	f100 0918 	add.w	r9, r0, #24
	int32_t    TuningBinRecSize		    = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	9305      	str	r3, [sp, #20]
	int32_t    rmt  = 0;
 80070ec:	9304      	str	r3, [sp, #16]
	int32_t    diff_histo_stddev		= 0;
 80070ee:	9303      	str	r3, [sp, #12]
	uint8_t    roi = pdev->ll_state.rd_zone_id;
 80070f0:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80070f4:	aa05      	add	r2, sp, #20
 80070f6:	f248 018f 	movw	r1, #32911	@ 0x808f
 80070fa:	f7ff faa5 	bl	8006648 <VL53L1_get_tuning_parm>
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80070fe:	aa04      	add	r2, sp, #16
 8007100:	f248 018e 	movw	r1, #32910	@ 0x808e
 8007104:	4630      	mov	r0, r6
 8007106:	f7ff fa9f 	bl	8006648 <VL53L1_get_tuning_parm>
	if (pdev->ll_state.rd_stream_count == 0)
 800710a:	f896 304c 	ldrb.w	r3, [r6, #76]	@ 0x4c
 800710e:	b133      	cbz	r3, 800711e <vl53l1_histo_merge+0x46>
	timing = pdata->number_of_ambient_bins / 4;
 8007110:	f898 400b 	ldrb.w	r4, [r8, #11]
 8007114:	08a4      	lsrs	r4, r4, #2
	diff_histo_stddev = 0;
 8007116:	2200      	movs	r2, #0
 8007118:	9203      	str	r2, [sp, #12]
	temp = 0;
 800711a:	4611      	mov	r1, r2
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800711c:	e00a      	b.n	8007134 <vl53l1_histo_merge+0x5c>
		memset(pdev->multi_bins_rec, 0,	sizeof(pdev->multi_bins_rec));
 800711e:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8007122:	2100      	movs	r1, #0
 8007124:	f506 50ec 	add.w	r0, r6, #7552	@ 0x1d80
 8007128:	301c      	adds	r0, #28
 800712a:	f007 fc86 	bl	800ea3a <memset>
 800712e:	e7ef      	b.n	8007110 <vl53l1_histo_merge+0x38>
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8007130:	3201      	adds	r2, #1
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	2a17      	cmp	r2, #23
 8007136:	d810      	bhi.n	800715a <vl53l1_histo_merge+0x82>
		if (pdev->multi_bins_rec[roi][0][timing][i] > 0)
 8007138:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800713c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8007140:	015b      	lsls	r3, r3, #5
 8007142:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007146:	4413      	add	r3, r2
 8007148:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800714c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	ddec      	ble.n	8007130 <vl53l1_histo_merge+0x58>
			temp = pdev->multi_bins_rec[roi][0][timing][i];
 8007156:	4619      	mov	r1, r3
 8007158:	e7ea      	b.n	8007130 <vl53l1_histo_merge+0x58>
	if (temp > 0)
 800715a:	2900      	cmp	r1, #0
 800715c:	dc05      	bgt.n	800716a <vl53l1_histo_merge+0x92>
	if (diff_histo_stddev >= rmt)
 800715e:	9a03      	ldr	r2, [sp, #12]
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	429a      	cmp	r2, r3
 8007164:	da0c      	bge.n	8007180 <vl53l1_histo_merge+0xa8>
		for(pos = 0; pos < TuningBinRecSize - 1; pos++)
 8007166:	2100      	movs	r1, #0
 8007168:	e040      	b.n	80071ec <vl53l1_histo_merge+0x114>
		vl53l1_diff_histo_stddev(pdev, pdata, timing, HighIndex, 0,	&diff_histo_stddev);
 800716a:	ab03      	add	r3, sp, #12
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2300      	movs	r3, #0
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	2318      	movs	r3, #24
 8007174:	4622      	mov	r2, r4
 8007176:	4641      	mov	r1, r8
 8007178:	4648      	mov	r0, r9
 800717a:	f7fe f8d1 	bl	8005320 <vl53l1_diff_histo_stddev>
 800717e:	e7ee      	b.n	800715e <vl53l1_histo_merge+0x86>
				memset(pdev->multi_bins_rec, 0,	sizeof(pdev->multi_bins_rec));
 8007180:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8007184:	2100      	movs	r1, #0
 8007186:	f506 50ec 	add.w	r0, r6, #7552	@ 0x1d80
 800718a:	301c      	adds	r0, #28
 800718c:	f007 fc55 	bl	800ea3a <memset>
 8007190:	e7e9      	b.n	8007166 <vl53l1_histo_merge+0x8e>
			pdev->multi_bins_rec[roi][TuningBinRecSize - pos - 2][timing][i];
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	1e98      	subs	r0, r3, #2
		pdev->multi_bins_rec[roi][TuningBinRecSize - pos - 1][timing][i] =
 8007196:	3b01      	subs	r3, #1
			pdev->multi_bins_rec[roi][TuningBinRecSize - pos - 2][timing][i];
 8007198:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800719c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80071a0:	0100      	lsls	r0, r0, #4
 80071a2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80071a6:	eb05 0cc5 	add.w	ip, r5, r5, lsl #3
 80071aa:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80071ae:	4408      	add	r0, r1
 80071b0:	f500 60ec 	add.w	r0, r0, #1888	@ 0x760
 80071b4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80071b8:	69c0      	ldr	r0, [r0, #28]
		pdev->multi_bins_rec[roi][TuningBinRecSize - pos - 1][timing][i] =
 80071ba:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 80071be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80071c8:	eb05 0cc5 	add.w	ip, r5, r5, lsl #3
 80071cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80071d0:	440b      	add	r3, r1
 80071d2:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 80071d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071da:	61d8      	str	r0, [r3, #28]
		for(pos = 0; pos < TuningBinRecSize - 1; pos++)
 80071dc:	3201      	adds	r2, #1
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	9b05      	ldr	r3, [sp, #20]
 80071e2:	1e58      	subs	r0, r3, #1
 80071e4:	4282      	cmp	r2, r0
 80071e6:	dbd4      	blt.n	8007192 <vl53l1_histo_merge+0xba>
	for (i = 0; i < BuffSize; i++)
 80071e8:	3101      	adds	r1, #1
 80071ea:	b2c9      	uxtb	r1, r1
 80071ec:	2917      	cmp	r1, #23
 80071ee:	d801      	bhi.n	80071f4 <vl53l1_histo_merge+0x11c>
		for(pos = 0; pos < TuningBinRecSize - 1; pos++)
 80071f0:	2200      	movs	r2, #0
 80071f2:	e7f5      	b.n	80071e0 <vl53l1_histo_merge+0x108>
	for (i = 0; i < BuffSize; i++)
 80071f4:	2200      	movs	r2, #0
 80071f6:	e011      	b.n	800721c <vl53l1_histo_merge+0x144>
		pdev->multi_bins_rec[roi][0][timing][i] = pdata->bin_data[i];
 80071f8:	1d93      	adds	r3, r2, #6
 80071fa:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80071fe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007202:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8007206:	015b      	lsls	r3, r3, #5
 8007208:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800720c:	4413      	add	r3, r2
 800720e:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8007212:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007216:	61d8      	str	r0, [r3, #28]
	for (i = 0; i < BuffSize; i++)
 8007218:	3201      	adds	r2, #1
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	2a17      	cmp	r2, #23
 800721e:	d9eb      	bls.n	80071f8 <vl53l1_histo_merge+0x120>
	for (bin = 0; bin < BuffSize; bin++)
 8007220:	2300      	movs	r3, #0
 8007222:	e004      	b.n	800722e <vl53l1_histo_merge+0x156>
		pbin_data[bin] = 0;
 8007224:	2200      	movs	r2, #0
 8007226:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (bin = 0; bin < BuffSize; bin++)
 800722a:	3301      	adds	r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b17      	cmp	r3, #23
 8007230:	d9f8      	bls.n	8007224 <vl53l1_histo_merge+0x14c>
	for (bin = 0; bin < BuffSize; bin++)
 8007232:	2000      	movs	r0, #0
 8007234:	e01c      	b.n	8007270 <vl53l1_histo_merge+0x198>
			pbin_data[bin] +=	(pdev->multi_bins_rec[roi][i][timing][bin]);
 8007236:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
 800723a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800723e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007248:	eb05 0cc5 	add.w	ip, r5, r5, lsl #3
 800724c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007250:	4403      	add	r3, r0
 8007252:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8007256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	441a      	add	r2, r3
 800725e:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
		for (i = 0; i < TuningBinRecSize; i++)
 8007262:	3101      	adds	r1, #1
 8007264:	b2c9      	uxtb	r1, r1
 8007266:	9b05      	ldr	r3, [sp, #20]
 8007268:	4299      	cmp	r1, r3
 800726a:	dbe4      	blt.n	8007236 <vl53l1_histo_merge+0x15e>
	for (bin = 0; bin < BuffSize; bin++)
 800726c:	3001      	adds	r0, #1
 800726e:	b280      	uxth	r0, r0
 8007270:	2817      	cmp	r0, #23
 8007272:	d801      	bhi.n	8007278 <vl53l1_histo_merge+0x1a0>
		for (i = 0; i < TuningBinRecSize; i++)
 8007274:	2100      	movs	r1, #0
 8007276:	e7f6      	b.n	8007266 <vl53l1_histo_merge+0x18e>
}
 8007278:	b007      	add	sp, #28
 800727a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007280 <VL53L1_get_histogram_bin_data>:
{
 8007280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007284:	b0da      	sub	sp, #360	@ 0x168
 8007286:	4607      	mov	r7, r0
 8007288:	460d      	mov	r5, r1
	int32_t    hist_merge				= 0;
 800728a:	2400      	movs	r4, #0
 800728c:	9419      	str	r4, [sp, #100]	@ 0x64
		status = VL53L1_ReadMulti(
 800728e:	2353      	movs	r3, #83	@ 0x53
 8007290:	aa1a      	add	r2, sp, #104	@ 0x68
 8007292:	2188      	movs	r1, #136	@ 0x88
 8007294:	f006 f826 	bl	800d2e4 <VL53L1_ReadMulti>
 8007298:	4680      	mov	r8, r0
	pdata->result__interrupt_status               = *(pbuffer +   0);
 800729a:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800729e:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80072a2:	f89d 3069 	ldrb.w	r3, [sp, #105]	@ 0x69
 80072a6:	f885 3079 	strb.w	r3, [r5, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80072aa:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 80072ae:	f885 307a 	strb.w	r3, [r5, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80072b2:	f89d 306b 	ldrb.w	r3, [sp, #107]	@ 0x6b
 80072b6:	f885 307b 	strb.w	r3, [r5, #123]	@ 0x7b
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 80072ba:	a91b      	add	r1, sp, #108	@ 0x6c
 80072bc:	2002      	movs	r0, #2
 80072be:	f002 f98f 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads =
 80072c2:	f8a5 007c 	strh.w	r0, [r5, #124]	@ 0x7c
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80072c6:	f10d 01b6 	add.w	r1, sp, #182	@ 0xb6
 80072ca:	2002      	movs	r0, #2
 80072cc:	f002 f988 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 80072d0:	f8a5 007e 	strh.w	r0, [r5, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80072d4:	f89d 30b8 	ldrb.w	r3, [sp, #184]	@ 0xb8
 80072d8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__reference_phase =
 80072dc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80072e0:	f8a3 03bc 	strh.w	r0, [r3, #956]	@ 0x3bc
			pdata->phasecal_result__vcsel_start;
 80072e4:	f895 2080 	ldrb.w	r2, [r5, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 80072e8:	f883 23be 	strb.w	r2, [r3, #958]	@ 0x3be
	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80072ec:	f89d 30b9 	ldrb.w	r3, [sp, #185]	@ 0xb9
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	b2db      	uxtb	r3, r3
	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 80072f4:	f89d 20ba 	ldrb.w	r2, [sp, #186]	@ 0xba
 80072f8:	4413      	add	r3, r2
	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80072fa:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80072fe:	f10d 066e 	add.w	r6, sp, #110	@ 0x6e
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007302:	e009      	b.n	8007318 <VL53L1_get_histogram_bin_data+0x98>
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007304:	4631      	mov	r1, r6
 8007306:	2003      	movs	r0, #3
 8007308:	f002 f9a9 	bl	800965e <VL53L1_i2c_decode_uint32_t>
		pdata->bin_data[bin] =
 800730c:	1da3      	adds	r3, r4, #6
 800730e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
		pbuffer += 3;
 8007312:	3603      	adds	r6, #3
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007314:	3401      	adds	r4, #1
 8007316:	b2a4      	uxth	r4, r4
 8007318:	2c17      	cmp	r4, #23
 800731a:	d9f3      	bls.n	8007304 <VL53L1_get_histogram_bin_data+0x84>
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 800731c:	aa19      	add	r2, sp, #100	@ 0x64
 800731e:	f248 018d 	movw	r1, #32909	@ 0x808d
 8007322:	4638      	mov	r0, r7
 8007324:	f7ff f990 	bl	8006648 <VL53L1_get_tuning_parm>
	if (pdata->result__stream_count == 0) {
 8007328:	f895 307b 	ldrb.w	r3, [r5, #123]	@ 0x7b
 800732c:	b373      	cbz	r3, 800738c <VL53L1_get_histogram_bin_data+0x10c>
	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800732e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007332:	70ab      	strb	r3, [r5, #2]
	pdata->VL53L1_p_022               = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	722b      	strb	r3, [r5, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007338:	2318      	movs	r3, #24
 800733a:	726b      	strb	r3, [r5, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800733c:	72ab      	strb	r3, [r5, #10]
	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800733e:	f897 3381 	ldrb.w	r3, [r7, #897]	@ 0x381
 8007342:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8007346:	f897 3384 	ldrb.w	r3, [r7, #900]	@ 0x384
 800734a:	011b      	lsls	r3, r3, #4
	pdata->vcsel_width =
 800734c:	f8a5 3082 	strh.w	r3, [r5, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8007350:	f897 236e 	ldrb.w	r2, [r7, #878]	@ 0x36e
	pdata->vcsel_width +=
 8007354:	4413      	add	r3, r2
 8007356:	f8a5 3082 	strh.w	r3, [r5, #130]	@ 0x82
		pstat_nvm->osc_measured__fast_osc__frequency;
 800735a:	f8b7 333e 	ldrh.w	r3, [r7, #830]	@ 0x33e
	pdata->VL53L1_p_019 =
 800735e:	f8a5 3086 	strh.w	r3, [r5, #134]	@ 0x86
	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8007362:	4629      	mov	r1, r5
 8007364:	4638      	mov	r0, r7
 8007366:	f002 faed 	bl	8009944 <VL53L1_hist_get_bin_sequence_config>
	if (pdev->ll_state.rd_timing_status == 0) {
 800736a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800736e:	b9b3      	cbnz	r3, 800739e <VL53L1_get_histogram_bin_data+0x11e>
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8007370:	f897 3398 	ldrb.w	r3, [r7, #920]	@ 0x398
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8007374:	f897 4399 	ldrb.w	r4, [r7, #921]	@ 0x399
		encoded_timeout =
 8007378:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800737c:	b2a4      	uxth	r4, r4
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 800737e:	f897 339a 	ldrb.w	r3, [r7, #922]	@ 0x39a
 8007382:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
	pdata->number_of_ambient_bins  = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	72eb      	strb	r3, [r5, #11]
	for (i = 0; i < 6; i++) {
 800738a:	e016      	b.n	80073ba <VL53L1_get_histogram_bin_data+0x13a>
		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800738c:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8007390:	2100      	movs	r1, #0
 8007392:	f507 50ec 	add.w	r0, r7, #7552	@ 0x1d80
 8007396:	301c      	adds	r0, #28
 8007398:	f007 fb4f 	bl	800ea3a <memset>
 800739c:	e7c7      	b.n	800732e <VL53L1_get_histogram_bin_data+0xae>
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800739e:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80073a2:	f897 439c 	ldrb.w	r4, [r7, #924]	@ 0x39c
		encoded_timeout =
 80073a6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80073aa:	b2a4      	uxth	r4, r4
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 80073ac:	f897 339d 	ldrb.w	r3, [r7, #925]	@ 0x39d
 80073b0:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
 80073b4:	e7e7      	b.n	8007386 <VL53L1_get_histogram_bin_data+0x106>
	for (i = 0; i < 6; i++) {
 80073b6:	3301      	adds	r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d809      	bhi.n	80073d2 <VL53L1_get_histogram_bin_data+0x152>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80073be:	18ea      	adds	r2, r5, r3
 80073c0:	7b12      	ldrb	r2, [r2, #12]
 80073c2:	f002 0207 	and.w	r2, r2, #7
 80073c6:	2a07      	cmp	r2, #7
 80073c8:	d1f5      	bne.n	80073b6 <VL53L1_get_histogram_bin_data+0x136>
					pdata->number_of_ambient_bins + 0x04;
 80073ca:	7aea      	ldrb	r2, [r5, #11]
 80073cc:	3204      	adds	r2, #4
			pdata->number_of_ambient_bins  =
 80073ce:	72ea      	strb	r2, [r5, #11]
 80073d0:	e7f1      	b.n	80073b6 <VL53L1_get_histogram_bin_data+0x136>
	vl53l1_histo_merge(Dev, pdata, pbin_data);
 80073d2:	aa01      	add	r2, sp, #4
 80073d4:	4629      	mov	r1, r5
 80073d6:	4638      	mov	r0, r7
 80073d8:	f7ff fe7e 	bl	80070d8 <vl53l1_histo_merge>
	if (hist_merge == 1)
 80073dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d054      	beq.n	800748c <VL53L1_get_histogram_bin_data+0x20c>
		VL53L1_decode_timeout(encoded_timeout);
 80073e2:	4620      	mov	r0, r4
 80073e4:	f002 fa0d 	bl	8009802 <VL53L1_decode_timeout>
	pdata->total_periods_elapsed =
 80073e8:	f8c5 0088 	str.w	r0, [r5, #136]	@ 0x88
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 80073ec:	f8b5 0086 	ldrh.w	r0, [r5, #134]	@ 0x86
 80073f0:	f003 ffaa 	bl	800b348 <VL53L1_calc_pll_period_us>
	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80073f4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
		VL53L1_duration_maths(
 80073f8:	3301      	adds	r3, #1
 80073fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073fe:	f8b5 1082 	ldrh.w	r1, [r5, #130]	@ 0x82
 8007402:	f003 ffaa 	bl	800b35a <VL53L1_duration_maths>
	pdata->peak_duration_us =
 8007406:	f8c5 008c 	str.w	r0, [r5, #140]	@ 0x8c
	pdata->woi_duration_us     = 0;
 800740a:	2400      	movs	r4, #0
 800740c:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
	VL53L1_hist_calc_zero_distance_phase(pdata);
 8007410:	4628      	mov	r0, r5
 8007412:	f004 f8ed 	bl	800b5f0 <VL53L1_hist_calc_zero_distance_phase>
	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8007416:	4628      	mov	r0, r5
 8007418:	f004 f9ee 	bl	800b7f8 <VL53L1_hist_estimate_ambient_from_ambient_bins>
	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800741c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007420:	702b      	strb	r3, [r5, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8007422:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007426:	706b      	strb	r3, [r5, #1]
	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8007428:	78ab      	ldrb	r3, [r5, #2]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800742a:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 800742e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007432:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007436:	f891 179a 	ldrb.w	r1, [r1, #1946]	@ 0x79a
	pdata->roi_config__user_roi_centre_spad =
 800743a:	f885 10a8 	strb.w	r1, [r5, #168]	@ 0xa8
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800743e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007442:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007446:	f893 379b 	ldrb.w	r3, [r3, #1947]	@ 0x79b
	pdata->roi_config__user_roi_requested_global_xy_size =
 800744a:	f885 30a9 	strb.w	r3, [r5, #169]	@ 0xa9
	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800744e:	f882 4600 	strb.w	r4, [r2, #1536]	@ 0x600
	switch (pdata->result__range_status &
 8007452:	f895 3079 	ldrb.w	r3, [r5, #121]	@ 0x79
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b11      	cmp	r3, #17
 800745c:	d804      	bhi.n	8007468 <VL53L1_get_histogram_bin_data+0x1e8>
 800745e:	4a10      	ldr	r2, [pc, #64]	@ (80074a0 <VL53L1_get_histogram_bin_data+0x220>)
 8007460:	40da      	lsrs	r2, r3
 8007462:	f012 0f01 	tst.w	r2, #1
 8007466:	d113      	bne.n	8007490 <VL53L1_get_histogram_bin_data+0x210>
}
 8007468:	4640      	mov	r0, r8
 800746a:	b05a      	add	sp, #360	@ 0x168
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pdata->bin_data[i] = pbin_data[i];
 8007470:	aa5a      	add	r2, sp, #360	@ 0x168
 8007472:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007476:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800747a:	6811      	ldr	r1, [r2, #0]
 800747c:	1d9a      	adds	r2, r3, #6
 800747e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8007482:	3301      	adds	r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b17      	cmp	r3, #23
 8007488:	d9f2      	bls.n	8007470 <VL53L1_get_histogram_bin_data+0x1f0>
 800748a:	e7aa      	b.n	80073e2 <VL53L1_get_histogram_bin_data+0x162>
 800748c:	2300      	movs	r3, #0
 800748e:	e7fa      	b.n	8007486 <VL53L1_get_histogram_bin_data+0x206>
		presults->device_status = (pdata->result__range_status &
 8007490:	f507 47c0 	add.w	r7, r7, #24576	@ 0x6000
 8007494:	f887 3600 	strb.w	r3, [r7, #1536]	@ 0x600
		status = VL53L1_ERROR_RANGE_ERROR;
 8007498:	f06f 0805 	mvn.w	r8, #5
	break;
 800749c:	e7e4      	b.n	8007468 <VL53L1_get_histogram_bin_data+0x1e8>
 800749e:	bf00      	nop
 80074a0:	0002200e 	.word	0x0002200e

080074a4 <VL53L1_get_device_results>:
{
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	b08d      	sub	sp, #52	@ 0x34
 80074aa:	4604      	mov	r4, r0
 80074ac:	9207      	str	r2, [sp, #28]
	VL53L1_range_results_t   *presults =
 80074ae:	f500 46cb 	add.w	r6, r0, #25984	@ 0x6580
 80074b2:	3670      	adds	r6, #112	@ 0x70
	histo_merge_nb = 1;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
	merge_enabled = pdev->tuning_parms.tp_hist_merge;
 80074ba:	f890 81cc 	ldrb.w	r8, [r0, #460]	@ 0x1cc
	zid = pdev->ll_state.rd_zone_id;
 80074be:	f890 a051 	ldrb.w	sl, [r0, #81]	@ 0x51
	if ((pdev->sys_ctrl.system__mode_start &
 80074c2:	f890 33c4 	ldrb.w	r3, [r0, #964]	@ 0x3c4
 80074c6:	f013 0f02 	tst.w	r3, #2
 80074ca:	f000 8233 	beq.w	8007934 <VL53L1_get_device_results+0x490>
 80074ce:	f100 0718 	add.w	r7, r0, #24
 80074d2:	f500 7b1d 	add.w	fp, r0, #628	@ 0x274
 80074d6:	f200 4924 	addw	r9, r0, #1060	@ 0x424
		status = VL53L1_get_histogram_bin_data(
 80074da:	4649      	mov	r1, r9
 80074dc:	f7ff fed0 	bl	8007280 <VL53L1_get_histogram_bin_data>
		if (status == VL53L1_ERROR_NONE &&
 80074e0:	4605      	mov	r5, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f040 8101 	bne.w	80076ea <VL53L1_get_device_results+0x246>
			pHD->number_of_ambient_bins == 0) {
 80074e8:	f894 342f 	ldrb.w	r3, [r4, #1071]	@ 0x42f
		if (status == VL53L1_ERROR_NONE &&
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d061      	beq.n	80075b4 <VL53L1_get_device_results+0x110>
		if (status != VL53L1_ERROR_NONE)
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	f040 80fa 	bne.w	80076ea <VL53L1_get_device_results+0x246>
		if (pdev->smudge_corrector_internals.previous_xtalk[zid] != 0)
 80074f6:	f20a 534a 	addw	r3, sl, #1354	@ 0x54a
 80074fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d062      	beq.n	80075ca <VL53L1_get_device_results+0x126>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007504:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
		if (merge_enabled)
 8007508:	f1b8 0f00 	cmp.w	r8, #0
 800750c:	d164      	bne.n	80075d8 <VL53L1_get_device_results+0x134>
		if (pdev->preset_mode == VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE) {
 800750e:	7e63      	ldrb	r3, [r4, #25]
 8007510:	2b1a      	cmp	r3, #26
 8007512:	f000 8094 	beq.w	800763e <VL53L1_get_device_results+0x19a>
		if (pdev->preset_mode == VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE) {
 8007516:	2b18      	cmp	r3, #24
 8007518:	f000 80a0 	beq.w	800765c <VL53L1_get_device_results+0x1b8>
			pdev->gain_cal.histogram_ranging_gain_factor;
 800751c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
		pHP->gain_factor =
 8007520:	f8a4 3292 	strh.w	r3, [r4, #658]	@ 0x292
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8007524:	f9b4 12fe 	ldrsh.w	r1, [r4, #766]	@ 0x2fe
 8007528:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 800752c:	f002 f946 	bl	80097bc <VL53L1_calc_crosstalk_plane_offset_with_margin>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8007530:	f8c4 02a0 	str.w	r0, [r4, #672]	@ 0x2a0
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007534:	f9b4 32f0 	ldrsh.w	r3, [r4, #752]	@ 0x2f0
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007538:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800753c:	f9b4 32f2 	ldrsh.w	r3, [r4, #754]	@ 0x2f2
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007540:	f8a4 32a6 	strh.w	r3, [r4, #678]	@ 0x2a6
			pHP->ambient_thresh_sigma1;
 8007544:	f894 327a 	ldrb.w	r3, [r4, #634]	@ 0x27a
		pdev->dmax_cfg.ambient_thresh_sigma =
 8007548:	f884 32b5 	strb.w	r3, [r4, #693]	@ 0x2b5
			pHP->min_ambient_thresh_events;
 800754c:	f8d4 3280 	ldr.w	r3, [r4, #640]	@ 0x280
		pdev->dmax_cfg.min_ambient_thresh_events =
 8007550:	f8c4 32b8 	str.w	r3, [r4, #696]	@ 0x2b8
			pHP->signal_total_events_limit;
 8007554:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
		pdev->dmax_cfg.signal_total_events_limit =
 8007558:	f8c4 32bc 	str.w	r3, [r4, #700]	@ 0x2bc
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800755c:	f8b4 335e 	ldrh.w	r3, [r4, #862]	@ 0x35e
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8007560:	f8a4 32cc 	strh.w	r3, [r4, #716]	@ 0x2cc
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8007564:	f894 3391 	ldrb.w	r3, [r4, #913]	@ 0x391
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8007568:	f884 32ce 	strb.w	r3, [r4, #718]	@ 0x2ce
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800756c:	f9b4 3308 	ldrsh.w	r3, [r4, #776]	@ 0x308
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8007570:	f8a4 32aa 	strh.w	r3, [r4, #682]	@ 0x2aa
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8007574:	f9b4 3306 	ldrsh.w	r3, [r4, #774]	@ 0x306
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8007578:	f8a4 32a8 	strh.w	r3, [r4, #680]	@ 0x2a8
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 800757c:	f8b4 330a 	ldrh.w	r3, [r4, #778]	@ 0x30a
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8007580:	f8a4 32ac 	strh.w	r3, [r4, #684]	@ 0x2ac
			pC->algo__crosstalk_detect_max_sigma_mm;
 8007584:	f8b4 330c 	ldrh.w	r3, [r4, #780]	@ 0x30c
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8007588:	f8a4 32ae 	strh.w	r3, [r4, #686]	@ 0x2ae
		VL53L1_copy_rtn_good_spads_to_buffer(
 800758c:	f504 750e 	add.w	r5, r4, #568	@ 0x238
 8007590:	4629      	mov	r1, r5
 8007592:	f204 30f2 	addw	r0, r4, #1010	@ 0x3f2
 8007596:	f001 feaa 	bl	80092ee <VL53L1_copy_rtn_good_spads_to_buffer>
		switch (pdev->offset_correction_mode) {
 800759a:	7f63      	ldrb	r3, [r4, #29]
 800759c:	2b02      	cmp	r3, #2
 800759e:	f000 80b2 	beq.w	8007706 <VL53L1_get_device_results+0x262>
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	f000 80bc 	beq.w	8007720 <VL53L1_get_device_results+0x27c>
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d06f      	beq.n	800768c <VL53L1_get_device_results+0x1e8>
			pHP->range_offset_mm = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8a4 3290 	strh.w	r3, [r4, #656]	@ 0x290
		break;
 80075b2:	e085      	b.n	80076c0 <VL53L1_get_device_results+0x21c>
			status = VL53L1_hist_copy_and_scale_ambient_info(
 80075b4:	f504 40d8 	add.w	r0, r4, #27648	@ 0x6c00
 80075b8:	3078      	adds	r0, #120	@ 0x78
 80075ba:	eb00 100a 	add.w	r0, r0, sl, lsl #4
 80075be:	4649      	mov	r1, r9
 80075c0:	3004      	adds	r0, #4
 80075c2:	f002 f96d 	bl	80098a0 <VL53L1_hist_copy_and_scale_ambient_info>
 80075c6:	4605      	mov	r5, r0
 80075c8:	e792      	b.n	80074f0 <VL53L1_get_device_results+0x4c>
				pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0];
 80075ca:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80075ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80075d2:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
 80075d6:	e797      	b.n	8007508 <VL53L1_get_device_results+0x64>
			VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80075d8:	f10d 0123 	add.w	r1, sp, #35	@ 0x23
 80075dc:	4620      	mov	r0, r4
 80075de:	f003 fb4b 	bl	800ac78 <VL53L1_compute_histo_merge_nb>
			if (histo_merge_nb == 0)
 80075e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80075e6:	b913      	cbnz	r3, 80075ee <VL53L1_get_device_results+0x14a>
				histo_merge_nb = 1;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
			idx = histo_merge_nb - 1;
 80075ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b2db      	uxtb	r3, r3
				pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[idx];
 80075f6:	f203 42a2 	addw	r2, r3, #1186	@ 0x4a2
 80075fa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80075fe:	69d2      	ldr	r2, [r2, #28]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007600:	f8c4 22ec 	str.w	r2, [r4, #748]	@ 0x2ec
			if(pdev->smudge_corrector_internals.previous_xtalk[zid] != 0)
 8007604:	f20a 5a4a 	addw	sl, sl, #1354	@ 0x54a
 8007608:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 800760c:	f8da 2018 	ldr.w	r2, [sl, #24]
 8007610:	2a00      	cmp	r2, #0
 8007612:	f43f af7c 	beq.w	800750e <VL53L1_get_device_results+0x6a>
					pdev->tuning_parms.tp_hist_merge_max_size * (idx + 1);
 8007616:	f894 11d4 	ldrb.w	r1, [r4, #468]	@ 0x1d4
					pdev->smudge_corrector_internals.previous_xtalk[zid] /
 800761a:	fbb2 f2f1 	udiv	r2, r2, r1
					pdev->tuning_parms.tp_hist_merge_max_size * (idx + 1);
 800761e:	fb03 2202 	mla	r2, r3, r2, r2
				pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007622:	f8c4 22ec 	str.w	r2, [r4, #748]	@ 0x2ec
				if (idx < pdev->tuning_parms.tp_hist_merge_max_size - 1)
 8007626:	3901      	subs	r1, #1
 8007628:	428b      	cmp	r3, r1
 800762a:	f6bf af70 	bge.w	800750e <VL53L1_get_device_results+0x6a>
						pC->algo__crosstalk_compensation_plane_offset_kcps / 20;
 800762e:	4bc0      	ldr	r3, [pc, #768]	@ (8007930 <VL53L1_get_device_results+0x48c>)
 8007630:	fba3 1302 	umull	r1, r3, r3, r2
						pC->algo__crosstalk_compensation_plane_offset_kcps +
 8007634:	eb02 1213 	add.w	r2, r2, r3, lsr #4
					pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007638:	f8c4 22ec 	str.w	r2, [r4, #748]	@ 0x2ec
 800763c:	e767      	b.n	800750e <VL53L1_get_device_results+0x6a>
			if (pdev->hist_data.number_of_ambient_bins == 4)
 800763e:	f894 242f 	ldrb.w	r2, [r4, #1071]	@ 0x42f
 8007642:	2a04      	cmp	r2, #4
 8007644:	f47f af67 	bne.w	8007516 <VL53L1_get_device_results+0x72>
					pC->algo__crosstalk_compensation_plane_offset_kcps +
 8007648:	f8d4 22ec 	ldr.w	r2, [r4, #748]	@ 0x2ec
					pC->algo__crosstalk_compensation_plane_offset_kcps / 10;
 800764c:	49b8      	ldr	r1, [pc, #736]	@ (8007930 <VL53L1_get_device_results+0x48c>)
 800764e:	fba1 0102 	umull	r0, r1, r1, r2
					pC->algo__crosstalk_compensation_plane_offset_kcps +
 8007652:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
				pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007656:	f8c4 22ec 	str.w	r2, [r4, #748]	@ 0x2ec
 800765a:	e75c      	b.n	8007516 <VL53L1_get_device_results+0x72>
			if (pdev->hist_data.number_of_ambient_bins == 4)
 800765c:	f894 342f 	ldrb.w	r3, [r4, #1071]	@ 0x42f
 8007660:	2b04      	cmp	r3, #4
 8007662:	d009      	beq.n	8007678 <VL53L1_get_device_results+0x1d4>
					pC->algo__crosstalk_compensation_plane_offset_kcps +
 8007664:	f8d4 32ec 	ldr.w	r3, [r4, #748]	@ 0x2ec
					pC->algo__crosstalk_compensation_plane_offset_kcps / 10;
 8007668:	4ab1      	ldr	r2, [pc, #708]	@ (8007930 <VL53L1_get_device_results+0x48c>)
 800766a:	fba2 1203 	umull	r1, r2, r2, r3
					pC->algo__crosstalk_compensation_plane_offset_kcps +
 800766e:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
				pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007672:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
 8007676:	e751      	b.n	800751c <VL53L1_get_device_results+0x78>
					pC->algo__crosstalk_compensation_plane_offset_kcps +
 8007678:	f8d4 32ec 	ldr.w	r3, [r4, #748]	@ 0x2ec
					pC->algo__crosstalk_compensation_plane_offset_kcps / 5;
 800767c:	4aac      	ldr	r2, [pc, #688]	@ (8007930 <VL53L1_get_device_results+0x48c>)
 800767e:	fba2 1203 	umull	r1, r2, r2, r3
					pC->algo__crosstalk_compensation_plane_offset_kcps +
 8007682:	eb03 0392 	add.w	r3, r3, r2, lsr #2
				pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007686:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
 800768a:	e747      	b.n	800751c <VL53L1_get_device_results+0x78>
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800768c:	f894 3391 	ldrb.w	r3, [r4, #913]	@ 0x391
			VL53L1_hist_combine_mm1_mm2_offsets(
 8007690:	f504 7224 	add.w	r2, r4, #656	@ 0x290
 8007694:	9205      	str	r2, [sp, #20]
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	9503      	str	r5, [sp, #12]
 800769a:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 800769e:	9302      	str	r3, [sp, #8]
 80076a0:	f894 34cd 	ldrb.w	r3, [r4, #1229]	@ 0x4cd
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	f894 3423 	ldrb.w	r3, [r4, #1059]	@ 0x423
 80076b0:	f894 2422 	ldrb.w	r2, [r4, #1058]	@ 0x422
 80076b4:	f9b4 1076 	ldrsh.w	r1, [r4, #118]	@ 0x76
 80076b8:	f9b4 0074 	ldrsh.w	r0, [r4, #116]	@ 0x74
 80076bc:	f002 fd8a 	bl	800a1d4 <VL53L1_hist_combine_mm1_mm2_offsets>
		VL53L1_calc_max_effective_spads(
 80076c0:	f204 23ca 	addw	r3, r4, #714	@ 0x2ca
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	f894 3391 	ldrb.w	r3, [r4, #913]	@ 0x391
 80076ca:	462a      	mov	r2, r5
 80076cc:	f894 14cd 	ldrb.w	r1, [r4, #1229]	@ 0x4cd
 80076d0:	f894 04cc 	ldrb.w	r0, [r4, #1228]	@ 0x4cc
 80076d4:	f002 fc87 	bl	8009fe6 <VL53L1_calc_max_effective_spads>
			VL53L1_get_dmax_calibration_data(
 80076d8:	ab09      	add	r3, sp, #36	@ 0x24
 80076da:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
 80076de:	7fa1      	ldrb	r1, [r4, #30]
 80076e0:	4620      	mov	r0, r4
 80076e2:	f7fe ff77 	bl	80065d4 <VL53L1_get_dmax_calibration_data>
		if (status != VL53L1_ERROR_NONE)
 80076e6:	4605      	mov	r5, r0
 80076e8:	b328      	cbz	r0, 8007736 <VL53L1_get_device_results+0x292>
		if (pzone_cfg->active_zones > 0) {
 80076ea:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 810a 	beq.w	8007908 <VL53L1_get_device_results+0x464>
			if (pstate->rd_device_state !=
 80076f4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	d002      	beq.n	8007702 <VL53L1_get_device_results+0x25e>
				if (status == VL53L1_ERROR_NONE) {
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	f000 80e9 	beq.w	80078d4 <VL53L1_get_device_results+0x430>
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8007702:	2300      	movs	r3, #0
 8007704:	e0f2      	b.n	80078ec <VL53L1_get_device_results+0x448>
			zid = pdev->ll_state.rd_zone_id;
 8007706:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 800770a:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800770e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8007712:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			pHP->range_offset_mm = (int16_t)(
 8007716:	f9b3 3da8 	ldrsh.w	r3, [r3, #3496]	@ 0xda8
 800771a:	f8a4 3290 	strh.w	r3, [r4, #656]	@ 0x290
		break;
 800771e:	e7cf      	b.n	80076c0 <VL53L1_get_device_results+0x21c>
			select_offset_per_vcsel(
 8007720:	f504 7124 	add.w	r1, r4, #656	@ 0x290
 8007724:	4638      	mov	r0, r7
 8007726:	f7fd fdc8 	bl	80052ba <select_offset_per_vcsel>
			pHP->range_offset_mm *= 4;
 800772a:	f8b4 3290 	ldrh.w	r3, [r4, #656]	@ 0x290
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	f8a4 3290 	strh.w	r3, [r4, #656]	@ 0x290
		break;
 8007734:	e7c4      	b.n	80076c0 <VL53L1_get_device_results+0x21c>
				pdev->wArea1,
 8007736:	f504 53ac 	add.w	r3, r4, #5504	@ 0x1580
 800773a:	3310      	adds	r3, #16
				pdev->wArea2,
 800773c:	f504 52dc 	add.w	r2, r4, #7040	@ 0x1b80
 8007740:	3210      	adds	r2, #16
		status = VL53L1_ipp_hist_process_data(
 8007742:	9605      	str	r6, [sp, #20]
 8007744:	f10d 0123 	add.w	r1, sp, #35	@ 0x23
 8007748:	9104      	str	r1, [sp, #16]
 800774a:	9203      	str	r2, [sp, #12]
 800774c:	9302      	str	r3, [sp, #8]
 800774e:	f204 537c 	addw	r3, r4, #1404	@ 0x57c
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	f8cd 9000 	str.w	r9, [sp]
 8007758:	465b      	mov	r3, fp
 800775a:	f504 722d 	add.w	r2, r4, #692	@ 0x2b4
 800775e:	a909      	add	r1, sp, #36	@ 0x24
 8007760:	4620      	mov	r0, r4
 8007762:	f005 feb1 	bl	800d4c8 <VL53L1_ipp_hist_process_data>
 8007766:	4605      	mov	r5, r0
		if ((merge_enabled) && (histo_merge_nb > 1))
 8007768:	f1b8 0f00 	cmp.w	r8, #0
 800776c:	d038      	beq.n	80077e0 <VL53L1_get_device_results+0x33c>
 800776e:	f89d 2023 	ldrb.w	r2, [sp, #35]	@ 0x23
 8007772:	2a01      	cmp	r2, #1
 8007774:	d934      	bls.n	80077e0 <VL53L1_get_device_results+0x33c>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8007776:	2100      	movs	r1, #0
 8007778:	e030      	b.n	80077dc <VL53L1_get_device_results+0x338>
			pdata->VL53L1_p_020 /= histo_merge_nb;
 800777a:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800777e:	204c      	movs	r0, #76	@ 0x4c
 8007780:	fb00 3301 	mla	r3, r0, r1, r3
 8007784:	f8d3 0628 	ldr.w	r0, [r3, #1576]	@ 0x628
 8007788:	fbb0 f0f2 	udiv	r0, r0, r2
 800778c:	f8c3 0628 	str.w	r0, [r3, #1576]	@ 0x628
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8007790:	f8d3 062c 	ldr.w	r0, [r3, #1580]	@ 0x62c
 8007794:	fbb0 f0f2 	udiv	r0, r0, r2
 8007798:	f8c3 062c 	str.w	r0, [r3, #1580]	@ 0x62c
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800779c:	f8d3 0630 	ldr.w	r0, [r3, #1584]	@ 0x630
 80077a0:	fb90 f0f2 	sdiv	r0, r0, r2
 80077a4:	f8c3 0630 	str.w	r0, [r3, #1584]	@ 0x630
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80077a8:	f8b3 0634 	ldrh.w	r0, [r3, #1588]	@ 0x634
 80077ac:	fb90 f0f2 	sdiv	r0, r0, r2
 80077b0:	f8a3 0634 	strh.w	r0, [r3, #1588]	@ 0x634
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80077b4:	f8b3 0636 	ldrh.w	r0, [r3, #1590]	@ 0x636
 80077b8:	fb90 f0f2 	sdiv	r0, r0, r2
 80077bc:	f8a3 0636 	strh.w	r0, [r3, #1590]	@ 0x636
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80077c0:	f8b3 0638 	ldrh.w	r0, [r3, #1592]	@ 0x638
 80077c4:	fb90 f0f2 	sdiv	r0, r0, r2
 80077c8:	f8a3 0638 	strh.w	r0, [r3, #1592]	@ 0x638
			pdata->VL53L1_p_012 /= histo_merge_nb;
 80077cc:	f8d3 063c 	ldr.w	r0, [r3, #1596]	@ 0x63c
 80077d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80077d4:	f8c3 063c 	str.w	r0, [r3, #1596]	@ 0x63c
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80077d8:	3101      	adds	r1, #1
 80077da:	b2c9      	uxtb	r1, r1
 80077dc:	2903      	cmp	r1, #3
 80077de:	d9cc      	bls.n	800777a <VL53L1_get_device_results+0x2d6>
		if (status != VL53L1_ERROR_NONE)
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	d182      	bne.n	80076ea <VL53L1_get_device_results+0x246>
		status = VL53L1_hist_wrap_dmax(
 80077e4:	f504 42cb 	add.w	r2, r4, #25984	@ 0x6580
 80077e8:	327e      	adds	r2, #126	@ 0x7e
 80077ea:	4649      	mov	r1, r9
 80077ec:	4658      	mov	r0, fp
 80077ee:	f002 fb60 	bl	8009eb2 <VL53L1_hist_wrap_dmax>
		if (status != VL53L1_ERROR_NONE)
 80077f2:	4605      	mov	r5, r0
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f47f af78 	bne.w	80076ea <VL53L1_get_device_results+0x246>
		zid = pdev->ll_state.rd_zone_id;
 80077fa:	f894 1051 	ldrb.w	r1, [r4, #81]	@ 0x51
		status = VL53L1_hist_phase_consistency_check(
 80077fe:	f504 43cb 	add.w	r3, r4, #25984	@ 0x6580
 8007802:	3370      	adds	r3, #112	@ 0x70
 8007804:	eb01 1201 	add.w	r2, r1, r1, lsl #4
 8007808:	0092      	lsls	r2, r2, #2
 800780a:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 800780e:	441a      	add	r2, r3
 8007810:	f504 43d8 	add.w	r3, r4, #27648	@ 0x6c00
 8007814:	3378      	adds	r3, #120	@ 0x78
 8007816:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800781a:	4633      	mov	r3, r6
 800781c:	3208      	adds	r2, #8
 800781e:	3104      	adds	r1, #4
 8007820:	4620      	mov	r0, r4
 8007822:	f002 fa6b 	bl	8009cfc <VL53L1_hist_phase_consistency_check>
		if (status != VL53L1_ERROR_NONE)
 8007826:	4605      	mov	r5, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	f47f af5e 	bne.w	80076ea <VL53L1_get_device_results+0x246>
		zid = pdev->ll_state.rd_zone_id;
 800782e:	f894 0051 	ldrb.w	r0, [r4, #81]	@ 0x51
		status = VL53L1_hist_xmonitor_consistency_check(
 8007832:	f504 43cb 	add.w	r3, r4, #25984	@ 0x6580
 8007836:	3370      	adds	r3, #112	@ 0x70
 8007838:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 800783c:	0092      	lsls	r2, r2, #2
 800783e:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8007842:	441a      	add	r2, r3
 8007844:	f504 41d8 	add.w	r1, r4, #27648	@ 0x6c00
 8007848:	3178      	adds	r1, #120	@ 0x78
 800784a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800784e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8007852:	3208      	adds	r2, #8
 8007854:	3104      	adds	r1, #4
 8007856:	4620      	mov	r0, r4
 8007858:	f002 faf4 	bl	8009e44 <VL53L1_hist_xmonitor_consistency_check>
		if (status != VL53L1_ERROR_NONE)
 800785c:	4605      	mov	r5, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	f47f af43 	bne.w	80076ea <VL53L1_get_device_results+0x246>
		zid = pdev->ll_state.rd_zone_id;
 8007864:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8007868:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800786c:	2110      	movs	r1, #16
 800786e:	f883 1c78 	strb.w	r1, [r3, #3192]	@ 0xc78
				pdev->zone_cfg.active_zones+1;
 8007872:	f894 10db 	ldrb.w	r1, [r4, #219]	@ 0xdb
 8007876:	3101      	adds	r1, #1
		pZH->active_zones =
 8007878:	f883 1c79 	strb.w	r1, [r3, #3193]	@ 0xc79
		pHD->zone_id       = zid;
 800787c:	f884 2426 	strb.w	r2, [r4, #1062]	@ 0x426
				pres->zone_results.max_zones) {
 8007880:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
		if (zid <
 8007884:	4293      	cmp	r3, r2
 8007886:	d91b      	bls.n	80078c0 <VL53L1_get_device_results+0x41c>
				pHD->rd_device_state;
 8007888:	f894 1425 	ldrb.w	r1, [r4, #1061]	@ 0x425
			phist_info->rd_device_state =
 800788c:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 8007890:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007894:	f883 1c7c 	strb.w	r1, [r3, #3196]	@ 0xc7c
				pHD->number_of_ambient_bins;
 8007898:	f894 242f 	ldrb.w	r2, [r4, #1071]	@ 0x42f
			phist_info->number_of_ambient_bins =
 800789c:	f883 2c7d 	strb.w	r2, [r3, #3197]	@ 0xc7d
			pHD->result__dss_actual_effective_spads;
 80078a0:	f8b4 24a0 	ldrh.w	r2, [r4, #1184]	@ 0x4a0
			phist_info->result__dss_actual_effective_spads =
 80078a4:	f8a3 2c7e 	strh.w	r2, [r3, #3198]	@ 0xc7e
				pHD->VL53L1_p_009;
 80078a8:	f894 24a8 	ldrb.w	r2, [r4, #1192]	@ 0x4a8
			phist_info->VL53L1_p_009 =
 80078ac:	f883 2c80 	strb.w	r2, [r3, #3200]	@ 0xc80
				pHD->total_periods_elapsed;
 80078b0:	f8d4 24ac 	ldr.w	r2, [r4, #1196]	@ 0x4ac
			phist_info->total_periods_elapsed =
 80078b4:	f8c3 2c84 	str.w	r2, [r3, #3204]	@ 0xc84
				pHD->ambient_events_sum;
 80078b8:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	@ 0x4c4
			phist_info->ambient_events_sum =
 80078bc:	f8c3 2c88 	str.w	r2, [r3, #3208]	@ 0xc88
		VL53L1_hist_copy_results_to_sys_and_core(
 80078c0:	f504 539c 	add.w	r3, r4, #4992	@ 0x1380
 80078c4:	3318      	adds	r3, #24
 80078c6:	f204 32c6 	addw	r2, r4, #966	@ 0x3c6
 80078ca:	4631      	mov	r1, r6
 80078cc:	4648      	mov	r0, r9
 80078ce:	f002 fcdf 	bl	800a290 <VL53L1_hist_copy_results_to_sys_and_core>
 80078d2:	e70a      	b.n	80076ea <VL53L1_get_device_results+0x246>
					status = VL53L1_dynamic_zone_update(
 80078d4:	4631      	mov	r1, r6
 80078d6:	4620      	mov	r0, r4
 80078d8:	f002 fd4c 	bl	800a374 <VL53L1_dynamic_zone_update>
 80078dc:	4605      	mov	r5, r0
 80078de:	e710      	b.n	8007702 <VL53L1_get_device_results+0x25e>
				pzone_cfg->bin_config[i] =
 80078e0:	2101      	movs	r1, #1
 80078e2:	18e2      	adds	r2, r4, r3
 80078e4:	f882 1136 	strb.w	r1, [r2, #310]	@ 0x136
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80078e8:	3301      	adds	r3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b0f      	cmp	r3, #15
 80078ee:	d806      	bhi.n	80078fe <VL53L1_get_device_results+0x45a>
				((pdev->ll_state.cfg_internal_stream_count)
 80078f0:	f894 2046 	ldrb.w	r2, [r4, #70]	@ 0x46
				pzone_cfg->bin_config[i] =
 80078f4:	f012 0f01 	tst.w	r2, #1
 80078f8:	d0f2      	beq.n	80078e0 <VL53L1_get_device_results+0x43c>
 80078fa:	2103      	movs	r1, #3
 80078fc:	e7f1      	b.n	80078e2 <VL53L1_get_device_results+0x43e>
			if (status == VL53L1_ERROR_NONE)
 80078fe:	b925      	cbnz	r5, 800790a <VL53L1_get_device_results+0x466>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8007900:	4620      	mov	r0, r4
 8007902:	f002 fd76 	bl	800a3f2 <VL53L1_multizone_hist_bins_update>
 8007906:	4605      	mov	r5, r0
		if (status == VL53L1_ERROR_NONE)
 8007908:	b165      	cbz	r5, 8007924 <VL53L1_get_device_results+0x480>
		if ((merge_enabled) && (histo_merge_nb != 0))
 800790a:	f1b8 0f00 	cmp.w	r8, #0
 800790e:	d01c      	beq.n	800794a <VL53L1_get_device_results+0x4a6>
 8007910:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007914:	b1cb      	cbz	r3, 800794a <VL53L1_get_device_results+0x4a6>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 8007916:	f8d4 22ec 	ldr.w	r2, [r4, #748]	@ 0x2ec
 800791a:	fbb2 f2f3 	udiv	r2, r2, r3
 800791e:	f8c4 22ec 	str.w	r2, [r4, #748]	@ 0x2ec
 8007922:	e012      	b.n	800794a <VL53L1_get_device_results+0x4a6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8007924:	4620      	mov	r0, r4
 8007926:	f003 fabb 	bl	800aea0 <VL53L1_dynamic_xtalk_correction_corrector>
 800792a:	4605      	mov	r5, r0
 800792c:	e7ed      	b.n	800790a <VL53L1_get_device_results+0x466>
 800792e:	bf00      	nop
 8007930:	cccccccd 	.word	0xcccccccd
			status = VL53L1_get_measurement_results(
 8007934:	f7fe fbf2 	bl	800611c <VL53L1_get_measurement_results>
		if (status == VL53L1_ERROR_NONE)
 8007938:	4605      	mov	r5, r0
 800793a:	2800      	cmp	r0, #0
 800793c:	d049      	beq.n	80079d2 <VL53L1_get_device_results+0x52e>
		if (pL->is_low_power_auto_mode == 1) {
 800793e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8007942:	f893 3581 	ldrb.w	r3, [r3, #1409]	@ 0x581
 8007946:	2b01      	cmp	r3, #1
 8007948:	d04e      	beq.n	80079e8 <VL53L1_get_device_results+0x544>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800794a:	f894 1044 	ldrb.w	r1, [r4, #68]	@ 0x44
 800794e:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 8007952:	f883 15f0 	strb.w	r1, [r3, #1520]	@ 0x5f0
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8007956:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800795a:	f883 25f1 	strb.w	r2, [r3, #1521]	@ 0x5f1
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 800795e:	f894 c051 	ldrb.w	ip, [r4, #81]	@ 0x51
 8007962:	f883 c5f2 	strb.w	ip, [r3, #1522]	@ 0x5f2
	if (status == VL53L1_ERROR_NONE) {
 8007966:	2d00      	cmp	r5, #0
 8007968:	d17f      	bne.n	8007a6a <VL53L1_get_device_results+0x5c6>
		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 800796a:	2010      	movs	r0, #16
 800796c:	f883 0834 	strb.w	r0, [r3, #2100]	@ 0x834
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8007970:	f894 00db 	ldrb.w	r0, [r4, #219]	@ 0xdb
 8007974:	3001      	adds	r0, #1
 8007976:	f883 0835 	strb.w	r0, [r3, #2101]	@ 0x835
		if (zid < pres->zone_results.max_zones) {
 800797a:	f1bc 0f0f 	cmp.w	ip, #15
 800797e:	d874      	bhi.n	8007a6a <VL53L1_get_device_results+0x5c6>
			pobjects->cfg_device_state  =
 8007980:	4618      	mov	r0, r3
 8007982:	eb0c 130c 	add.w	r3, ip, ip, lsl #4
 8007986:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800798a:	f883 1838 	strb.w	r1, [r3, #2104]	@ 0x838
			pobjects->rd_device_state   = presults->rd_device_state;
 800798e:	f883 2839 	strb.w	r2, [r3, #2105]	@ 0x839
			pobjects->zone_id           = presults->zone_id;
 8007992:	f883 c83a 	strb.w	ip, [r3, #2106]	@ 0x83a
			pobjects->stream_count      = presults->stream_count;
 8007996:	f890 25f3 	ldrb.w	r2, [r0, #1523]	@ 0x5f3
 800799a:	f883 283b 	strb.w	r2, [r3, #2107]	@ 0x83b
				presults->xmonitor.VL53L1_p_020;
 800799e:	f8d0 2758 	ldr.w	r2, [r0, #1880]	@ 0x758
			pobjects->xmonitor.VL53L1_p_020 =
 80079a2:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
				presults->xmonitor.VL53L1_p_021;
 80079a6:	f8d0 275c 	ldr.w	r2, [r0, #1884]	@ 0x75c
			pobjects->xmonitor.VL53L1_p_021 =
 80079aa:	f8c3 2874 	str.w	r2, [r3, #2164]	@ 0x874
				presults->xmonitor.VL53L1_p_014;
 80079ae:	f8b0 2774 	ldrh.w	r2, [r0, #1908]	@ 0x774
			pobjects->xmonitor.VL53L1_p_014 =
 80079b2:	f8a3 2878 	strh.w	r2, [r3, #2168]	@ 0x878
				presults->xmonitor.range_status;
 80079b6:	f890 277e 	ldrb.w	r2, [r0, #1918]	@ 0x77e
			pobjects->xmonitor.range_status =
 80079ba:	f883 287a 	strb.w	r2, [r3, #2170]	@ 0x87a
			pobjects->max_objects      = presults->max_results;
 80079be:	f890 2601 	ldrb.w	r2, [r0, #1537]	@ 0x601
 80079c2:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
			pobjects->active_objects   = presults->active_results;
 80079c6:	f890 8602 	ldrb.w	r8, [r0, #1538]	@ 0x602
 80079ca:	f883 883d 	strb.w	r8, [r3, #2109]	@ 0x83d
			for (i = 0; i < presults->active_results; i++) {
 80079ce:	2300      	movs	r3, #0
 80079d0:	e049      	b.n	8007a66 <VL53L1_get_device_results+0x5c2>
			VL53L1_copy_sys_and_core_results_to_range_results(
 80079d2:	4633      	mov	r3, r6
 80079d4:	f504 529c 	add.w	r2, r4, #4992	@ 0x1380
 80079d8:	3218      	adds	r2, #24
 80079da:	f204 31c6 	addw	r1, r4, #966	@ 0x3c6
 80079de:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	@ 0xd0
 80079e2:	f7fe fbcf 	bl	8006184 <VL53L1_copy_sys_and_core_results_to_range_results>
 80079e6:	e7aa      	b.n	800793e <VL53L1_get_device_results+0x49a>
			if ((status == VL53L1_ERROR_NONE) &&
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	d1ae      	bne.n	800794a <VL53L1_get_device_results+0x4a6>
				(pL->low_power_auto_range_count == 0)) {
 80079ec:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80079f0:	f893 3582 	ldrb.w	r3, [r3, #1410]	@ 0x582
			if ((status == VL53L1_ERROR_NONE) &&
 80079f4:	b13b      	cbz	r3, 8007a06 <VL53L1_get_device_results+0x562>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d1a7      	bne.n	800794a <VL53L1_get_device_results+0x4a6>
				pL->low_power_auto_range_count = 2;
 80079fa:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 2582 	strb.w	r2, [r3, #1410]	@ 0x582
 8007a04:	e7a1      	b.n	800794a <VL53L1_get_device_results+0x4a6>
				VL53L1_low_power_auto_setup_manual_calibration(
 8007a06:	4620      	mov	r0, r4
 8007a08:	f003 f8e2 	bl	800abd0 <VL53L1_low_power_auto_setup_manual_calibration>
 8007a0c:	4605      	mov	r5, r0
				pL->low_power_auto_range_count = 1;
 8007a0e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2582 	strb.w	r2, [r3, #1410]	@ 0x582
 8007a18:	e797      	b.n	800794a <VL53L1_get_device_results+0x4a6>
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8007a1a:	f504 40c0 	add.w	r0, r4, #24576	@ 0x6000
 8007a1e:	f04f 0e4c 	mov.w	lr, #76	@ 0x4c
 8007a22:	fb0e 0e03 	mla	lr, lr, r3, r0
 8007a26:	f8de 1628 	ldr.w	r1, [lr, #1576]	@ 0x628
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8007a2a:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 8007a2e:	eb0c 120c 	add.w	r2, ip, ip, lsl #4
 8007a32:	0092      	lsls	r2, r2, #2
 8007a34:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8007a38:	4402      	add	r2, r0
 8007a3a:	f8c2 1840 	str.w	r1, [r2, #2112]	@ 0x840
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007a3e:	f8de 162c 	ldr.w	r1, [lr, #1580]	@ 0x62c
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007a42:	f8c2 1844 	str.w	r1, [r2, #2116]	@ 0x844
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8007a46:	f8be 1644 	ldrh.w	r1, [lr, #1604]	@ 0x644
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8007a4a:	f8a2 1848 	strh.w	r1, [r2, #2120]	@ 0x848
					presults->VL53L1_p_002[i].range_status;
 8007a4e:	f89e 164e 	ldrb.w	r1, [lr, #1614]	@ 0x64e
				pobjects->VL53L1_p_002[i].range_status =
 8007a52:	eb0c 120c 	add.w	r2, ip, ip, lsl #4
 8007a56:	0092      	lsls	r2, r2, #2
 8007a58:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8007a5c:	4410      	add	r0, r2
 8007a5e:	f880 184a 	strb.w	r1, [r0, #2122]	@ 0x84a
			for (i = 0; i < presults->active_results; i++) {
 8007a62:	3301      	adds	r3, #1
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	4598      	cmp	r8, r3
 8007a68:	d8d7      	bhi.n	8007a1a <VL53L1_get_device_results+0x576>
	memcpy(
 8007a6a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8007a6e:	4631      	mov	r1, r6
 8007a70:	9807      	ldr	r0, [sp, #28]
 8007a72:	f007 f821 	bl	800eab8 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 8007a76:	b11d      	cbz	r5, 8007a80 <VL53L1_get_device_results+0x5dc>
}
 8007a78:	4628      	mov	r0, r5
 8007a7a:	b00d      	add	sp, #52	@ 0x34
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8007a80:	4620      	mov	r0, r4
 8007a82:	f001 fbd9 	bl	8009238 <VL53L1_check_ll_driver_rd_state>
 8007a86:	4605      	mov	r5, r0
 8007a88:	e7f6      	b.n	8007a78 <VL53L1_get_device_results+0x5d4>
 8007a8a:	bf00      	nop

08007a8c <VL53L1_dynamic_xtalk_correction_enable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8007a8c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8007a90:	2301      	movs	r3, #1
 8007a92:	f880 33f4 	strb.w	r3, [r0, #1012]	@ 0x3f4

	LOG_FUNCTION_END(status);

	return status;
}
 8007a96:	2000      	movs	r0, #0
 8007a98:	4770      	bx	lr

08007a9a <VL53L1_dynamic_xtalk_correction_disable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8007a9a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f883 03f4 	strb.w	r0, [r3, #1012]	@ 0x3f4

	LOG_FUNCTION_END(status);

	return status;
}
 8007aa4:	4770      	bx	lr

08007aa6 <VL53L1_dynamic_xtalk_correction_apply_enable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007aa6:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f880 33f5 	strb.w	r3, [r0, #1013]	@ 0x3f5

	LOG_FUNCTION_END(status);

	return status;
}
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr

08007ab4 <VL53L1_dynamic_xtalk_correction_apply_disable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8007ab4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f883 03f5 	strb.w	r0, [r3, #1013]	@ 0x3f5

	LOG_FUNCTION_END(status);

	return status;
}
 8007abe:	4770      	bx	lr

08007ac0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007ac0:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f880 33f6 	strb.w	r3, [r0, #1014]	@ 0x3f6

	LOG_FUNCTION_END(status);

	return status;
}
 8007aca:	2000      	movs	r0, #0
 8007acc:	4770      	bx	lr

08007ace <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8007ace:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f883 03f6 	strb.w	r0, [r3, #1014]	@ 0x3f6

	LOG_FUNCTION_END(status);

	return status;
}
 8007ad8:	4770      	bx	lr

08007ada <VL53L1_init_refspadchar_config_struct>:

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8007ada:	2308      	movs	r3, #8
 8007adc:	7003      	strb	r3, [r0, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8007ade:	230b      	movs	r3, #11
 8007ae0:	7043      	strb	r3, [r0, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ae6:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007ae8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8007aec:	8103      	strh	r3, [r0, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8007aee:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8007af2:	8143      	strh	r3, [r0, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007af4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007af8:	8183      	strh	r3, [r0, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8007afa:	2000      	movs	r0, #0
 8007afc:	4770      	bx	lr

08007afe <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8007afe:	4603      	mov	r3, r0
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8007b00:	2000      	movs	r0, #0
 8007b02:	7018      	strb	r0, [r3, #0]


	pdata->VL53L1_p_009 =
 8007b04:	2212      	movs	r2, #18
 8007b06:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8007b08:	220f      	movs	r2, #15
 8007b0a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8007b10:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8007b14:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8007b16:	220c      	movs	r2, #12
 8007b18:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8007b1a:	4770      	bx	lr

08007b1c <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	460c      	mov	r4, r1




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007b20:	8945      	ldrh	r5, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007b22:	600d      	str	r5, [r1, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007b24:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007b28:	80a1      	strh	r1, [r4, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007b2a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007b2e:	80e2      	strh	r2, [r4, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007b30:	8943      	ldrh	r3, [r0, #10]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007b32:	60a3      	str	r3, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007b34:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007b38:	81a3      	strh	r3, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007b3a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007b3e:	81e3      	strh	r3, [r4, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b44:	8263      	strh	r3, [r4, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8007b46:	2300      	movs	r3, #0
 8007b48:	82a3      	strh	r3, [r4, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007b4a:	2340      	movs	r3, #64	@ 0x40
 8007b4c:	75a3      	strb	r3, [r4, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007b4e:	b91d      	cbnz	r5, 8007b58 <VL53L1_init_xtalk_config_struct+0x3c>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	b90b      	cbnz	r3, 8007b58 <VL53L1_init_xtalk_config_struct+0x3c>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007b54:	7423      	strb	r3, [r4, #16]
 8007b56:	e001      	b.n	8007b5c <VL53L1_init_xtalk_config_struct+0x40>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	7423      	strb	r3, [r4, #16]


	if ((status == VL53L1_ERROR_NONE) &&
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007b5c:	7c23      	ldrb	r3, [r4, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d00d      	beq.n	8007b7e <VL53L1_init_xtalk_config_struct+0x62>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	8323      	strh	r3, [r4, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007b66:	f64f 73ce 	movw	r3, #65486	@ 0xffce
 8007b6a:	8363      	strh	r3, [r4, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007b6c:	2332      	movs	r3, #50	@ 0x32
 8007b6e:	83a3      	strh	r3, [r4, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007b70:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8007b74:	83e3      	strh	r3, [r4, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007b76:	238c      	movs	r3, #140	@ 0x8c
 8007b78:	8423      	strh	r3, [r4, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_calc_range_ignore_threshold(
 8007b7e:	2340      	movs	r3, #64	@ 0x40
 8007b80:	4628      	mov	r0, r5
 8007b82:	f001 fdcf 	bl	8009724 <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8007b86:	8320      	strh	r0, [r4, #24]
 8007b88:	e7ed      	b.n	8007b66 <VL53L1_init_xtalk_config_struct+0x4a>

08007b8a <VL53L1_init_xtalk_extract_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007b8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007b8e:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007b90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007b94:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8007b96:	2307      	movs	r3, #7
 8007b98:	7403      	strb	r3, [r0, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007b9a:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8007b9e:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007ba0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007ba4:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007ba6:	f64f 73ba 	movw	r3, #65466	@ 0xffba
 8007baa:	8243      	strh	r3, [r0, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8007bac:	2346      	movs	r3, #70	@ 0x46
 8007bae:	8283      	strh	r3, [r0, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007bb0:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8007bb4:	82c3      	strh	r3, [r0, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8007bb6:	238c      	movs	r3, #140	@ 0x8c
 8007bb8:	8303      	strh	r3, [r0, #24]


	LOG_FUNCTION_END(status);

	return status;
}
 8007bba:	2000      	movs	r0, #0
 8007bbc:	4770      	bx	lr

08007bbe <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007bbe:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8007bc2:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007bc4:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8007bc8:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007bca:	f243 23c8 	movw	r3, #13000	@ 0x32c8
 8007bce:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007bd0:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	7403      	strb	r3, [r0, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8007bd6:	2328      	movs	r3, #40	@ 0x28
 8007bd8:	7443      	strb	r3, [r0, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8007bda:	2309      	movs	r3, #9
 8007bdc:	7483      	strb	r3, [r0, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8007bde:	2000      	movs	r0, #0
 8007be0:	4770      	bx	lr

08007be2 <VL53L1_init_zone_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007be2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007be6:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007be8:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8007bec:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007bf2:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007bf4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007bf8:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8007bfa:	2310      	movs	r3, #16
 8007bfc:	8203      	strh	r3, [r0, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8007bfe:	2308      	movs	r3, #8
 8007c00:	8243      	strh	r3, [r0, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8007c02:	2000      	movs	r0, #0
 8007c04:	4770      	bx	lr

08007c06 <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 8007c06:	b510      	push	{r4, lr}

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8007c08:	2304      	movs	r3, #4
 8007c0a:	700b      	strb	r3, [r1, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	704b      	strb	r3, [r1, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8007c10:	708b      	strb	r3, [r1, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8007c12:	2202      	movs	r2, #2
 8007c14:	70ca      	strb	r2, [r1, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8007c16:	710b      	strb	r3, [r1, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8007c18:	f04f 0c50 	mov.w	ip, #80	@ 0x50
 8007c1c:	f881 c005 	strb.w	ip, [r1, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8007c20:	2270      	movs	r2, #112	@ 0x70
 8007c22:	718a      	strb	r2, [r1, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8007c24:	f241 023d 	movw	r2, #4157	@ 0x103d
 8007c28:	810a      	strh	r2, [r1, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	60ca      	str	r2, [r1, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8007c2e:	2232      	movs	r2, #50	@ 0x32
 8007c30:	820a      	strh	r2, [r1, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8007c32:	2464      	movs	r4, #100	@ 0x64
 8007c34:	614c      	str	r4, [r1, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8007c36:	760b      	strb	r3, [r1, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8007c38:	23a0      	movs	r3, #160	@ 0xa0
 8007c3a:	834b      	strh	r3, [r1, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	838b      	strh	r3, [r1, #28]

	pdata->gain_factor                =
 8007c40:	f240 74c3 	movw	r4, #1987	@ 0x7c3
 8007c44:	83cc      	strh	r4, [r1, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8007c46:	f04f 0e08 	mov.w	lr, #8
 8007c4a:	f881 e020 	strb.w	lr, [r1, #32]
	pdata->valid_phase_high = 0x88;
 8007c4e:	2488      	movs	r4, #136	@ 0x88
 8007c50:	f881 4021 	strb.w	r4, [r1, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8007c54:	f881 e022 	strb.w	lr, [r1, #34]	@ 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8007c58:	f881 3023 	strb.w	r3, [r1, #35]	@ 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8007c5c:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
 8007c60:	f8a1 e024 	strh.w	lr, [r1, #36]	@ 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8007c64:	f04f 0efa 	mov.w	lr, #250	@ 0xfa
 8007c68:	f8a1 e026 	strh.w	lr, [r1, #38]	@ 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8007c6c:	f881 0028 	strb.w	r0, [r1, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007c70:	f64f 70ce 	movw	r0, #65486	@ 0xffce
 8007c74:	8688      	strh	r0, [r1, #52]	@ 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007c76:	86ca      	strh	r2, [r1, #54]	@ 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007c78:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8007c7c:	8708      	strh	r0, [r1, #56]	@ 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007c7e:	208c      	movs	r0, #140	@ 0x8c
 8007c80:	8748      	strh	r0, [r1, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8007c82:	f881 c03c 	strb.w	ip, [r1, #60]	@ 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8007c86:	87ca      	strh	r2, [r1, #62]	@ 0x3e


	LOG_FUNCTION_END(status);

	return status;
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd10      	pop	{r4, pc}

08007c8c <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8007c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8e:	4603      	mov	r3, r0

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8007c90:	2220      	movs	r2, #32
 8007c92:	8002      	strh	r2, [r0, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8007c94:	210e      	movs	r1, #14
 8007c96:	8041      	strh	r1, [r0, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8007c98:	f642 7294 	movw	r2, #12180	@ 0x2f94
 8007c9c:	8082      	strh	r2, [r0, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8007c9e:	7181      	strb	r1, [r0, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8007ca0:	200a      	movs	r0, #10
 8007ca2:	71d8      	strb	r0, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007ca4:	2206      	movs	r2, #6
 8007ca6:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8007ca8:	7259      	strb	r1, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8007caa:	7298      	strb	r0, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007cac:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8007cae:	2109      	movs	r1, #9
 8007cb0:	7319      	strb	r1, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8007cb2:	2105      	movs	r1, #5
 8007cb4:	7359      	strb	r1, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8007cb6:	2103      	movs	r1, #3
 8007cb8:	7399      	strb	r1, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8007cba:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8007cbc:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8007cbe:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	7499      	strb	r1, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007cc4:	2021      	movs	r0, #33	@ 0x21
 8007cc6:	74d8      	strb	r0, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007cc8:	2000      	movs	r0, #0
 8007cca:	8298      	strh	r0, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8007ccc:	7598      	strb	r0, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007cce:	243c      	movs	r4, #60	@ 0x3c
 8007cd0:	831c      	strh	r4, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007cd2:	835c      	strh	r4, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007cd4:	839c      	strh	r4, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007cd6:	2480      	movs	r4, #128	@ 0x80
 8007cd8:	83dc      	strh	r4, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8007cda:	841c      	strh	r4, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007cdc:	845c      	strh	r4, [r3, #34]	@ 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007cde:	2408      	movs	r4, #8
 8007ce0:	f883 4024 	strb.w	r4, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8007ce4:	2410      	movs	r4, #16
 8007ce6:	f883 4025 	strb.w	r4, [r3, #37]	@ 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007cea:	2401      	movs	r4, #1
 8007cec:	f883 4026 	strb.w	r4, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8007cf0:	f883 1027 	strb.w	r1, [r3, #39]	@ 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8007cf4:	f883 4028 	strb.w	r4, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8007cf8:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8007cfc:	f883 002a 	strb.w	r0, [r3, #42]	@ 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8007d00:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8007d04:	8599      	strh	r1, [r3, #44]	@ 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8007d06:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
 8007d0a:	85dd      	strh	r5, [r3, #46]	@ 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8007d0c:	861d      	strh	r5, [r3, #48]	@ 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8007d0e:	8659      	strh	r1, [r3, #50]	@ 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8007d10:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8007d14:	639d      	str	r5, [r3, #56]	@ 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8007d16:	f643 2798 	movw	r7, #15000	@ 0x3a98
 8007d1a:	63df      	str	r7, [r3, #60]	@ 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8007d1c:	f242 3628 	movw	r6, #9000	@ 0x2328
 8007d20:	641e      	str	r6, [r3, #64]	@ 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8007d22:	f241 7170 	movw	r1, #6000	@ 0x1770
 8007d26:	6459      	str	r1, [r3, #68]	@ 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8007d28:	649f      	str	r7, [r3, #72]	@ 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8007d2a:	64de      	str	r6, [r3, #76]	@ 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8007d2c:	6519      	str	r1, [r3, #80]	@ 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8007d2e:	655d      	str	r5, [r3, #84]	@ 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8007d30:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007d34:	6599      	str	r1, [r3, #88]	@ 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8007d36:	65d9      	str	r1, [r3, #92]	@ 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8007d38:	6619      	str	r1, [r3, #96]	@ 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8007d3a:	6659      	str	r1, [r3, #100]	@ 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007d3c:	f24f 6618 	movw	r6, #63000	@ 0xf618
 8007d40:	66de      	str	r6, [r3, #108]	@ 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8007d42:	f640 16c4 	movw	r6, #2500	@ 0x9c4
 8007d46:	671e      	str	r6, [r3, #112]	@ 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8007d48:	675e      	str	r6, [r3, #116]	@ 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8007d4a:	f243 26c8 	movw	r6, #13000	@ 0x32c8
 8007d4e:	679e      	str	r6, [r3, #120]	@ 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8007d50:	669c      	str	r4, [r3, #104]	@ 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8007d52:	f44f 56fa 	mov.w	r6, #8000	@ 0x1f40
 8007d56:	67de      	str	r6, [r3, #124]	@ 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8007d58:	f44f 5620 	mov.w	r6, #10240	@ 0x2800
 8007d5c:	869e      	strh	r6, [r3, #52]	@ 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8007d5e:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8007d62:	f883 4084 	strb.w	r4, [r3, #132]	@ 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8007d66:	f242 7610 	movw	r6, #10000	@ 0x2710
 8007d6a:	f8c3 6088 	str.w	r6, [r3, #136]	@ 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8007d6e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 8007d72:	f883 408d 	strb.w	r4, [r3, #141]	@ 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8007d76:	f8a3 108e 	strh.w	r1, [r3, #142]	@ 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8007d7a:	f640 22be 	movw	r2, #2750	@ 0xabe
 8007d7e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8007d82:	24fa      	movs	r4, #250	@ 0xfa
 8007d84:	f8a3 4092 	strh.w	r4, [r3, #146]	@ 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8007d88:	f8a3 5094 	strh.w	r5, [r3, #148]	@ 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8007d8c:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 8007d90:	f8a3 1096 	strh.w	r1, [r3, #150]	@ 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8007d94:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8007d98:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8007d9c:	f8a3 109a 	strh.w	r1, [r3, #154]	@ 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8007da0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8007da4:	f64f 7c38 	movw	ip, #65336	@ 0xff38
 8007da8:	f8a3 c09e 	strh.w	ip, [r3, #158]	@ 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8007dac:	25c8      	movs	r5, #200	@ 0xc8
 8007dae:	f8a3 50a0 	strh.w	r5, [r3, #160]	@ 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8007db2:	f8a3 40a2 	strh.w	r4, [r3, #162]	@ 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8007db6:	f240 427e 	movw	r2, #1150	@ 0x47e
 8007dba:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8007dbe:	f640 1206 	movw	r2, #2310	@ 0x906
 8007dc2:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8007dc6:	f8a3 00a8 	strh.w	r0, [r3, #168]	@ 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007dca:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8007dce:	f640 4e1c 	movw	lr, #3100	@ 0xc1c
 8007dd2:	f8a3 e0ac 	strh.w	lr, [r3, #172]	@ 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8007dd6:	f44f 5291 	mov.w	r2, #4640	@ 0x1220
 8007dda:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007dde:	f8a3 e0b0 	strh.w	lr, [r3, #176]	@ 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8007de2:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8007de6:	f641 0e2e 	movw	lr, #6190	@ 0x182e
 8007dea:	f8a3 e0b4 	strh.w	lr, [r3, #180]	@ 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007dee:	f8a3 00b6 	strh.w	r0, [r3, #182]	@ 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8007df2:	f8a3 00b8 	strh.w	r0, [r3, #184]	@ 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8007df6:	f641 3730 	movw	r7, #6960	@ 0x1b30
 8007dfa:	f8a3 70ba 	strh.w	r7, [r3, #186]	@ 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8007dfe:	f8a3 e0bc 	strh.w	lr, [r3, #188]	@ 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007e02:	f8a3 40be 	strh.w	r4, [r3, #190]	@ 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8007e06:	f8a3 10c0 	strh.w	r1, [r3, #192]	@ 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007e0a:	f640 51ac 	movw	r1, #3500	@ 0xdac
 8007e0e:	f8a3 10c2 	strh.w	r1, [r3, #194]	@ 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8007e12:	f241 1194 	movw	r1, #4500	@ 0x1194
 8007e16:	f8a3 10c4 	strh.w	r1, [r3, #196]	@ 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8007e1a:	f8a3 c0c6 	strh.w	ip, [r3, #198]	@ 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8007e1e:	f8a3 50c8 	strh.w	r5, [r3, #200]	@ 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8007e22:	f640 3122 	movw	r1, #2850	@ 0xb22
 8007e26:	f8a3 10ca 	strh.w	r1, [r3, #202]	@ 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8007e2a:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8007e2e:	f8a3 10cc 	strh.w	r1, [r3, #204]	@ 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8007e32:	f8a3 00ce 	strh.w	r0, [r3, #206]	@ 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8007e36:	f8a3 00d0 	strh.w	r0, [r3, #208]	@ 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8007e3a:	f640 711e 	movw	r1, #3870	@ 0xf1e
 8007e3e:	f8a3 10d2 	strh.w	r1, [r3, #210]	@ 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8007e42:	f241 212a 	movw	r1, #4650	@ 0x122a
 8007e46:	f8a3 10d4 	strh.w	r1, [r3, #212]	@ 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8007e4a:	f640 710a 	movw	r1, #3850	@ 0xf0a
 8007e4e:	f8a3 10d6 	strh.w	r1, [r3, #214]	@ 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8007e52:	f8a3 00d8 	strh.w	r0, [r3, #216]	@ 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8007e56:	f8a3 00da 	strh.w	r0, [r3, #218]	@ 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8007e5a:	f8a3 00dc 	strh.w	r0, [r3, #220]	@ 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8007e5e:	f641 6114 	movw	r1, #7700	@ 0x1e14
 8007e62:	f8a3 10de 	strh.w	r1, [r3, #222]	@ 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8007e66:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8007e6a:	f8a3 00e2 	strh.w	r0, [r3, #226]	@ 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8007e6e:	f8a3 00e4 	strh.w	r0, [r3, #228]	@ 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8007e72:	f641 1288 	movw	r2, #6536	@ 0x1988
 8007e76:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	pdata->tp_dss_max_total_rate_per_spad_mcps =
 8007e7a:	f8a3 60ec 	strh.w	r6, [r3, #236]	@ 0xec
		VL53L1_TUNINGPARM_MAX_TOTAL_RATE_PER_SPAD_DEFAULT;
	pdata->tp_dss_rec_total_rate_per_spad_mcps =
 8007e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e82:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
		VL53L1_TUNINGPARM_RECOVER_TOTAL_RATE_PER_SPAD_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
}
 8007e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e88 <VL53L1_init_hist_gen3_dmax_config_struct>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8007e88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007e8c:	8303      	strh	r3, [r0, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8007e8e:	2338      	movs	r3, #56	@ 0x38
 8007e90:	7683      	strb	r3, [r0, #26]

	pdata->signal_thresh_sigma                 =
 8007e92:	2320      	movs	r3, #32
 8007e94:	7003      	strb	r3, [r0, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8007e96:	2370      	movs	r3, #112	@ 0x70
 8007e98:	7043      	strb	r3, [r0, #1]
	pdata->min_ambient_thresh_events           = 16;
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	6043      	str	r3, [r0, #4]
	pdata->signal_total_events_limit           = 100;
 8007e9e:	2364      	movs	r3, #100	@ 0x64
 8007ea0:	6083      	str	r3, [r0, #8]
	pdata->max_effective_spads = 0xFFFF;
 8007ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ea6:	82c3      	strh	r3, [r0, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8007ea8:	230f      	movs	r3, #15
 8007eaa:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8007eac:	2334      	movs	r3, #52	@ 0x34
 8007eae:	81c3      	strh	r3, [r0, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8007eb0:	23c8      	movs	r3, #200	@ 0xc8
 8007eb2:	8203      	strh	r3, [r0, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8007eb4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8007eb8:	8243      	strh	r3, [r0, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8007eba:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007ebe:	8283      	strh	r3, [r0, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4770      	bx	lr

08007ec4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	4680      	mov	r8, r0
 8007eca:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007ecc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8007ed0:	f44f 6020 	mov.w	r0, #2560	@ 0xa00
 8007ed4:	f8a8 0000 	strh.w	r0, [r8]
	pstatic->debug__ctrl = 0x00;
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f888 0002 	strb.w	r0, [r8, #2]
	pstatic->test_mode__ctrl = 0x00;
 8007ede:	f888 0003 	strb.w	r0, [r8, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8007ee2:	f888 0004 	strb.w	r0, [r8, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8007ee6:	f888 0005 	strb.w	r0, [r8, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007eea:	f888 0006 	strb.w	r0, [r8, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8007eee:	f888 0007 	strb.w	r0, [r8, #7]
	pstatic->host_if__status = 0x00;
 8007ef2:	f888 0008 	strb.w	r0, [r8, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8007ef6:	f888 0009 	strb.w	r0, [r8, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8007efa:	f888 000a 	strb.w	r0, [r8, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8007efe:	f888 000b 	strb.w	r0, [r8, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8007f02:	2711      	movs	r7, #17
 8007f04:	f888 700c 	strb.w	r7, [r8, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8007f08:	f04f 0e02 	mov.w	lr, #2
 8007f0c:	f888 e00d 	strb.w	lr, [r8, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8007f10:	f888 000e 	strb.w	r0, [r8, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8007f14:	f888 e00f 	strb.w	lr, [r8, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8007f18:	2708      	movs	r7, #8
 8007f1a:	f888 7010 	strb.w	r7, [r8, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8007f1e:	f888 0011 	strb.w	r0, [r8, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007f22:	f895 c024 	ldrb.w	ip, [r5, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8007f26:	f888 c012 	strb.w	ip, [r8, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8007f2a:	f895 c025 	ldrb.w	ip, [r5, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8007f2e:	f888 c013 	strb.w	ip, [r8, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8007f32:	f895 c026 	ldrb.w	ip, [r5, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8007f36:	f888 c014 	strb.w	ip, [r8, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8007f3a:	f04f 0c01 	mov.w	ip, #1
 8007f3e:	f888 c015 	strb.w	ip, [r8, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007f42:	f888 0016 	strb.w	r0, [r8, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8007f46:	f888 0017 	strb.w	r0, [r8, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007f4a:	f8a8 0018 	strh.w	r0, [r8, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007f4e:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8007f52:	f888 901a 	strb.w	r9, [r8, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8007f56:	f895 a016 	ldrb.w	sl, [r5, #22]
	pstatic->algo__range_min_clip                             =
 8007f5a:	f888 a01b 	strb.w	sl, [r8, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007f5e:	f895 a012 	ldrb.w	sl, [r5, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007f62:	f888 a01c 	strb.w	sl, [r8, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8007f66:	f888 001d 	strb.w	r0, [r8, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8007f6a:	f888 001e 	strb.w	r0, [r8, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8007f6e:	f888 001f 	strb.w	r0, [r8, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8007f72:	7010      	strb	r0, [r2, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007f74:	7050      	strb	r0, [r2, #1]
	pgeneral->system__interrupt_config_gpio =
 8007f76:	f04f 0820 	mov.w	r8, #32
 8007f7a:	f882 8002 	strb.w	r8, [r2, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007f7e:	f04f 0b0b 	mov.w	fp, #11
 8007f82:	f882 b003 	strb.w	fp, [r2, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8007f86:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	pgeneral->cal_config__repeat_rate                         =
 8007f8a:	f8a2 a004 	strh.w	sl, [r2, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8007f8e:	f882 e006 	strb.w	lr, [r2, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8007f92:	f04f 0a0d 	mov.w	sl, #13
 8007f96:	f882 a007 	strb.w	sl, [r2, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007f9a:	f895 a013 	ldrb.w	sl, [r5, #19]
	pgeneral->phasecal_config__target                         =
 8007f9e:	f882 a008 	strb.w	sl, [r2, #8]
	pgeneral->phasecal_config__override = 0x00;
 8007fa2:	7250      	strb	r0, [r2, #9]
	pgeneral->dss_config__roi_mode_control =
 8007fa4:	f882 c00a 	strb.w	ip, [r2, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8007fa8:	8190      	strh	r0, [r2, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8007faa:	81d0      	strh	r0, [r2, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8007fac:	f44f 4a0c 	mov.w	sl, #35840	@ 0x8c00
 8007fb0:	f8a2 a010 	strh.w	sl, [r2, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8007fb4:	7490      	strb	r0, [r2, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007fb6:	f04f 0a38 	mov.w	sl, #56	@ 0x38
 8007fba:	f882 a013 	strb.w	sl, [r2, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8007fbe:	f882 9014 	strb.w	r9, [r2, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8007fc2:	f882 c015 	strb.w	ip, [r2, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007fc6:	7018      	strb	r0, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8007fc8:	221a      	movs	r2, #26
 8007fca:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007fcc:	7098      	strb	r0, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8007fce:	f883 8003 	strb.w	r8, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8007fd2:	f883 c004 	strb.w	ip, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8007fd6:	22cc      	movs	r2, #204	@ 0xcc
 8007fd8:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8007fda:	f883 b006 	strb.w	fp, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8007fde:	f883 c007 	strb.w	ip, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8007fe2:	22f5      	movs	r2, #245	@ 0xf5
 8007fe4:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007fe6:	f04f 0209 	mov.w	r2, #9
 8007fea:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8007fec:	8b6a      	ldrh	r2, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 8007fee:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8007ff0:	8c2a      	ldrh	r2, [r5, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8007ff2:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8007ff4:	739f      	strb	r7, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8007ff6:	2278      	movs	r2, #120	@ 0x78
 8007ff8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8007ffa:	6118      	str	r0, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007ffc:	7518      	strb	r0, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8007ffe:	f04f 0907 	mov.w	r9, #7
 8008002:	f881 9001 	strb.w	r9, [r1, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008006:	2321      	movs	r3, #33	@ 0x21
 8008008:	708b      	strb	r3, [r1, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800800a:	f04f 0843 	mov.w	r8, #67	@ 0x43
 800800e:	f881 8003 	strb.w	r8, [r1, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008012:	2210      	movs	r2, #16
 8008014:	710a      	strb	r2, [r1, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008016:	f04f 0a32 	mov.w	sl, #50	@ 0x32
 800801a:	f881 a005 	strb.w	sl, [r1, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800801e:	f04f 0a54 	mov.w	sl, #84	@ 0x54
 8008022:	f881 a006 	strb.w	sl, [r1, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008026:	f881 9007 	strb.w	r9, [r1, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800802a:	720b      	strb	r3, [r1, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800802c:	f881 8009 	strb.w	r8, [r1, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008030:	728a      	strb	r2, [r1, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008032:	f881 e00b 	strb.w	lr, [r1, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008036:	f881 800c 	strb.w	r8, [r1, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800803a:	f04f 0905 	mov.w	r9, #5
 800803e:	f881 900d 	strb.w	r9, [r1, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008042:	7388      	strb	r0, [r1, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008044:	f04f 0907 	mov.w	r9, #7
 8008048:	f881 900f 	strb.w	r9, [r1, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800804c:	740b      	strb	r3, [r1, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800804e:	f881 8011 	strb.w	r8, [r1, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008052:	748a      	strb	r2, [r1, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008054:	f04f 0832 	mov.w	r8, #50	@ 0x32
 8008058:	f881 8013 	strb.w	r8, [r1, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800805c:	f881 a014 	strb.w	sl, [r1, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008060:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8008064:	f8a1 8016 	strh.w	r8, [r1, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008068:	f8a1 8018 	strh.w	r8, [r1, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800806c:	7008      	strb	r0, [r1, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 800806e:	7032      	strb	r2, [r6, #0]
	pzone_cfg->active_zones = 0x00;
 8008070:	7070      	strb	r0, [r6, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008072:	220f      	movs	r2, #15
 8008074:	77f2      	strb	r2, [r6, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008076:	77b2      	strb	r2, [r6, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008078:	7737      	strb	r7, [r6, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800807a:	7777      	strb	r7, [r6, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 800807c:	f884 c000 	strb.w	ip, [r4]

	pdynamic->system__thresh_high = 0x0000;
 8008080:	8060      	strh	r0, [r4, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008082:	80a0      	strh	r0, [r4, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008084:	71a0      	strb	r0, [r4, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008086:	f895 2027 	ldrb.w	r2, [r5, #39]	@ 0x27
	pdynamic->system__seed_config =
 800808a:	71e2      	strb	r2, [r4, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800808c:	f884 b008 	strb.w	fp, [r4, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008090:	f04f 0209 	mov.w	r2, #9
 8008094:	7262      	strb	r2, [r4, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008096:	79ea      	ldrb	r2, [r5, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008098:	72a2      	strb	r2, [r4, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800809a:	7aaa      	ldrb	r2, [r5, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800809c:	72e2      	strb	r2, [r4, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800809e:	f884 c00c 	strb.w	ip, [r4, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80080a2:	f895 202a 	ldrb.w	r2, [r5, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 80080a6:	7362      	strb	r2, [r4, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80080a8:	f895 2029 	ldrb.w	r2, [r5, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 80080ac:	73a2      	strb	r2, [r4, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 80080ae:	22c7      	movs	r2, #199	@ 0xc7
 80080b0:	73e2      	strb	r2, [r4, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80080b2:	f884 8010 	strb.w	r8, [r4, #16]


	pdynamic->system__sequence_config                          =
 80080b6:	22db      	movs	r2, #219	@ 0xdb
 80080b8:	7462      	strb	r2, [r4, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80080ba:	f884 e012 	strb.w	lr, [r4, #18]




	psystem->system__stream_count_ctrl = 0x00;
 80080be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080c0:	7050      	strb	r0, [r2, #1]
	psystem->firmware__enable = 0x01;
 80080c2:	f882 c002 	strb.w	ip, [r2, #2]
	psystem->system__interrupt_clear                           =
 80080c6:	f882 c003 	strb.w	ip, [r2, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 80080ca:	7113      	strb	r3, [r2, #4]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080d0 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80080d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d2:	b085      	sub	sp, #20
 80080d4:	461c      	mov	r4, r3
 80080d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80080d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80080da:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80080dc:	9703      	str	r7, [sp, #12]
 80080de:	9602      	str	r6, [sp, #8]
 80080e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80080e2:	9701      	str	r7, [sp, #4]
 80080e4:	9500      	str	r5, [sp, #0]
 80080e6:	f7ff feed 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80080ea:	b988      	cbnz	r0, 8008110 <VL53L1_preset_mode_standard_ranging_short_range+0x40>



		ptiming->range_config__vcsel_period_a = 0x07;
 80080ec:	2207      	movs	r2, #7
 80080ee:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80080f0:	2305      	movs	r3, #5
 80080f2:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 80080f4:	8bb1      	ldrh	r1, [r6, #28]
		ptiming->range_config__sigma_thresh                  =
 80080f6:	8161      	strh	r1, [r4, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80080f8:	8c71      	ldrh	r1, [r6, #34]	@ 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80080fa:	81a1      	strh	r1, [r4, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 80080fc:	2108      	movs	r1, #8
 80080fe:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008100:	2138      	movs	r1, #56	@ 0x38
 8008102:	73e1      	strb	r1, [r4, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008104:	722a      	strb	r2, [r5, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008106:	726b      	strb	r3, [r5, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008108:	7a33      	ldrb	r3, [r6, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800810a:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800810c:	7af3      	ldrb	r3, [r6, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800810e:	72eb      	strb	r3, [r5, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008110:	b005      	add	sp, #20
 8008112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008114 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	b085      	sub	sp, #20
 8008118:	461c      	mov	r4, r3
 800811a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800811c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800811e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8008120:	9703      	str	r7, [sp, #12]
 8008122:	9602      	str	r6, [sp, #8]
 8008124:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008126:	9701      	str	r7, [sp, #4]
 8008128:	9500      	str	r5, [sp, #0]
 800812a:	f7ff fecb 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800812e:	b988      	cbnz	r0, 8008154 <VL53L1_preset_mode_standard_ranging_long_range+0x40>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008130:	220f      	movs	r2, #15
 8008132:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008134:	230d      	movs	r3, #13
 8008136:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008138:	8b31      	ldrh	r1, [r6, #24]
		ptiming->range_config__sigma_thresh                  =
 800813a:	8161      	strh	r1, [r4, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800813c:	8bf1      	ldrh	r1, [r6, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800813e:	81a1      	strh	r1, [r4, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008140:	2108      	movs	r1, #8
 8008142:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008144:	21b8      	movs	r1, #184	@ 0xb8
 8008146:	73e1      	strb	r1, [r4, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008148:	722a      	strb	r2, [r5, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800814a:	726b      	strb	r3, [r5, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800814c:	79b3      	ldrb	r3, [r6, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800814e:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008150:	7a73      	ldrb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8008152:	72eb      	strb	r3, [r5, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008154:	b005      	add	sp, #20
 8008156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008158 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	4614      	mov	r4, r2
 800815e:	9d08      	ldr	r5, [sp, #32]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008160:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008162:	9603      	str	r6, [sp, #12]
 8008164:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008166:	9602      	str	r6, [sp, #8]
 8008168:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800816a:	9601      	str	r6, [sp, #4]
 800816c:	9500      	str	r5, [sp, #0]
 800816e:	f7ff fea9 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008172:	b918      	cbnz	r0, 800817c <VL53L1_preset_mode_standard_ranging_mm1_cal+0x24>

		pgeneral->dss_config__roi_mode_control =
 8008174:	2302      	movs	r3, #2
 8008176:	72a3      	strb	r3, [r4, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008178:	233b      	movs	r3, #59	@ 0x3b
 800817a:	746b      	strb	r3, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800817c:	b004      	add	sp, #16
 800817e:	bd70      	pop	{r4, r5, r6, pc}

08008180 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	4614      	mov	r4, r2
 8008186:	9d08      	ldr	r5, [sp, #32]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008188:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800818a:	9603      	str	r6, [sp, #12]
 800818c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800818e:	9602      	str	r6, [sp, #8]
 8008190:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008192:	9601      	str	r6, [sp, #4]
 8008194:	9500      	str	r5, [sp, #0]
 8008196:	f7ff fe95 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800819a:	b918      	cbnz	r0, 80081a4 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x24>

		pgeneral->dss_config__roi_mode_control =
 800819c:	2302      	movs	r3, #2
 800819e:	72a3      	strb	r3, [r4, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 80081a0:	235b      	movs	r3, #91	@ 0x5b
 80081a2:	746b      	strb	r3, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80081a4:	b004      	add	sp, #16
 80081a6:	bd70      	pop	{r4, r5, r6, pc}

080081a8 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80081a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	461c      	mov	r4, r3
 80081b0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80081b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80081b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80081b8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80081ba:	9503      	str	r5, [sp, #12]
 80081bc:	f8cd 8008 	str.w	r8, [sp, #8]
 80081c0:	9701      	str	r7, [sp, #4]
 80081c2:	9600      	str	r6, [sp, #0]
 80081c4:	f7ff fe7e 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80081c8:	b970      	cbnz	r0, 80081e8 <VL53L1_preset_mode_timed_ranging+0x40>




		pdynamic->system__grouped_parameter_hold = 0x00;
 80081ca:	74b0      	strb	r0, [r6, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80081cc:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 80081ce:	22b1      	movs	r2, #177	@ 0xb1
 80081d0:	7162      	strb	r2, [r4, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80081d2:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 80081d4:	23d4      	movs	r3, #212	@ 0xd4
 80081d6:	7223      	strb	r3, [r4, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 80081d8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80081dc:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80081de:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
		pdynamic->system__seed_config =
 80081e2:	71f3      	strb	r3, [r6, #7]




		psystem->system__mode_start =
 80081e4:	2340      	movs	r3, #64	@ 0x40
 80081e6:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80081e8:	b004      	add	sp, #16
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081ee <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80081ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	461c      	mov	r4, r3
 80081f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80081f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80081fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 80081fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008200:	9503      	str	r5, [sp, #12]
 8008202:	f8cd 8008 	str.w	r8, [sp, #8]
 8008206:	9701      	str	r7, [sp, #4]
 8008208:	9600      	str	r6, [sp, #0]
 800820a:	f7ff ff61 	bl	80080d0 <VL53L1_preset_mode_standard_ranging_short_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800820e:	b978      	cbnz	r0, 8008230 <VL53L1_preset_mode_timed_ranging_short_range+0x42>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008210:	74b0      	strb	r0, [r6, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008212:	2301      	movs	r3, #1
 8008214:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8008216:	2284      	movs	r2, #132	@ 0x84
 8008218:	7162      	strb	r2, [r4, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800821a:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800821c:	23b1      	movs	r3, #177	@ 0xb1
 800821e:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008220:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008224:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008226:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
		pdynamic->system__seed_config =
 800822a:	71f3      	strb	r3, [r6, #7]




		psystem->system__mode_start =
 800822c:	2340      	movs	r3, #64	@ 0x40
 800822e:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008230:	b004      	add	sp, #16
 8008232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008236 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	461c      	mov	r4, r3
 800823e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008240:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008242:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8008246:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008248:	9503      	str	r5, [sp, #12]
 800824a:	f8cd 8008 	str.w	r8, [sp, #8]
 800824e:	9701      	str	r7, [sp, #4]
 8008250:	9600      	str	r6, [sp, #0]
 8008252:	f7ff ff5f 	bl	8008114 <VL53L1_preset_mode_standard_ranging_long_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008256:	b970      	cbnz	r0, 8008276 <VL53L1_preset_mode_timed_ranging_long_range+0x40>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008258:	74b0      	strb	r0, [r6, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800825a:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800825c:	2297      	movs	r2, #151	@ 0x97
 800825e:	7162      	strb	r2, [r4, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008260:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008262:	23b1      	movs	r3, #177	@ 0xb1
 8008264:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008266:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800826a:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800826c:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
		pdynamic->system__seed_config =
 8008270:	71f3      	strb	r3, [r6, #7]




		psystem->system__mode_start =
 8008272:	2340      	movs	r3, #64	@ 0x40
 8008274:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008276:	b004      	add	sp, #16
 8008278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800827c <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	4614      	mov	r4, r2
 8008282:	9d08      	ldr	r5, [sp, #32]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8008284:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008286:	9603      	str	r6, [sp, #12]
 8008288:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800828a:	9602      	str	r6, [sp, #8]
 800828c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800828e:	9601      	str	r6, [sp, #4]
 8008290:	9500      	str	r5, [sp, #0]
 8008292:	f7ff ff89 	bl	80081a8 <VL53L1_preset_mode_timed_ranging>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008296:	b108      	cbz	r0, 800829c <VL53L1_preset_mode_low_power_auto_ranging+0x20>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008298:	b004      	add	sp, #16
 800829a:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 800829c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800829e:	4629      	mov	r1, r5
 80082a0:	4620      	mov	r0, r4
 80082a2:	f002 fc8e 	bl	800abc2 <VL53L1_config_low_power_auto_mode>
 80082a6:	e7f7      	b.n	8008298 <VL53L1_preset_mode_low_power_auto_ranging+0x1c>

080082a8 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	4614      	mov	r4, r2
 80082ae:	9d08      	ldr	r5, [sp, #32]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 80082b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80082b2:	9603      	str	r6, [sp, #12]
 80082b4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80082b6:	9602      	str	r6, [sp, #8]
 80082b8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80082ba:	9601      	str	r6, [sp, #4]
 80082bc:	9500      	str	r5, [sp, #0]
 80082be:	f7ff ff96 	bl	80081ee <VL53L1_preset_mode_timed_ranging_short_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80082c2:	b108      	cbz	r0, 80082c8 <VL53L1_preset_mode_low_power_auto_short_ranging+0x20>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80082c4:	b004      	add	sp, #16
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 80082c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082ca:	4629      	mov	r1, r5
 80082cc:	4620      	mov	r0, r4
 80082ce:	f002 fc78 	bl	800abc2 <VL53L1_config_low_power_auto_mode>
 80082d2:	e7f7      	b.n	80082c4 <VL53L1_preset_mode_low_power_auto_short_ranging+0x1c>

080082d4 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	4614      	mov	r4, r2
 80082da:	9d08      	ldr	r5, [sp, #32]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 80082dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80082de:	9603      	str	r6, [sp, #12]
 80082e0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80082e2:	9602      	str	r6, [sp, #8]
 80082e4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80082e6:	9601      	str	r6, [sp, #4]
 80082e8:	9500      	str	r5, [sp, #0]
 80082ea:	f7ff ffa4 	bl	8008236 <VL53L1_preset_mode_timed_ranging_long_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80082ee:	b108      	cbz	r0, 80082f4 <VL53L1_preset_mode_low_power_auto_long_ranging+0x20>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80082f0:	b004      	add	sp, #16
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 80082f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082f6:	4629      	mov	r1, r5
 80082f8:	4620      	mov	r0, r4
 80082fa:	f002 fc62 	bl	800abc2 <VL53L1_config_low_power_auto_mode>
 80082fe:	e7f7      	b.n	80082f0 <VL53L1_preset_mode_low_power_auto_long_ranging+0x1c>

08008300 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	461c      	mov	r4, r3
 8008308:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800830a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800830c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008310:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008312:	9503      	str	r5, [sp, #12]
 8008314:	f8cd 8008 	str.w	r8, [sp, #8]
 8008318:	9701      	str	r7, [sp, #4]
 800831a:	9600      	str	r6, [sp, #0]
 800831c:	f7ff fdd2 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008320:	b958      	cbnz	r0, 800833a <VL53L1_preset_mode_singleshot_ranging+0x3a>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008322:	74b0      	strb	r0, [r6, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008324:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008326:	22b1      	movs	r2, #177	@ 0xb1
 8008328:	7162      	strb	r2, [r4, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800832a:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800832c:	23d4      	movs	r3, #212	@ 0xd4
 800832e:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008330:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
		pdynamic->system__seed_config =
 8008334:	71f3      	strb	r3, [r6, #7]




		psystem->system__mode_start =
 8008336:	2310      	movs	r3, #16
 8008338:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800833a:	b004      	add	sp, #16
 800833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008340 <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008340:	b530      	push	{r4, r5, lr}
 8008342:	b085      	sub	sp, #20
 8008344:	9c09      	ldr	r4, [sp, #36]	@ 0x24

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008346:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008348:	9503      	str	r5, [sp, #12]
 800834a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800834c:	9502      	str	r5, [sp, #8]
 800834e:	9401      	str	r4, [sp, #4]
 8008350:	9d08      	ldr	r5, [sp, #32]
 8008352:	9500      	str	r5, [sp, #0]
 8008354:	f7ff fdb6 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 8008358:	b908      	cbnz	r0, 800835e <VL53L1_preset_mode_olt+0x1e>

		psystem->system__stream_count_ctrl = 0x01;
 800835a:	2301      	movs	r3, #1
 800835c:	7063      	strb	r3, [r4, #1]

	LOG_FUNCTION_END(status);

	return status;
}
 800835e:	b005      	add	sp, #20
 8008360:	bd30      	pop	{r4, r5, pc}

08008362 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 8008362:	b500      	push	{lr}
 8008364:	9a01      	ldr	r2, [sp, #4]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8008366:	f890 c00f 	ldrb.w	ip, [r0, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800836a:	f881 c012 	strb.w	ip, [r1, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800836e:	f890 c010 	ldrb.w	ip, [r0, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8008372:	f881 c013 	strb.w	ip, [r1, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8008376:	f890 c011 	ldrb.w	ip, [r0, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800837a:	f881 c014 	strb.w	ip, [r1, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800837e:	f890 c012 	ldrb.w	ip, [r0, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8008382:	f881 c015 	strb.w	ip, [r1, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8008386:	f890 c013 	ldrb.w	ip, [r0, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800838a:	f881 c016 	strb.w	ip, [r1, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800838e:	f890 c014 	ldrb.w	ip, [r0, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8008392:	f881 c017 	strb.w	ip, [r1, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8008396:	f890 e007 	ldrb.w	lr, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800839a:	f890 c008 	ldrb.w	ip, [r0, #8]
 800839e:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 80083a2:	f8a1 c018 	strh.w	ip, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80083a6:	f890 c009 	ldrb.w	ip, [r0, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80083aa:	f881 c01a 	strb.w	ip, [r1, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80083ae:	f890 c00a 	ldrb.w	ip, [r0, #10]
	pstatic->algo__range_min_clip =
 80083b2:	f881 c01b 	strb.w	ip, [r1, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80083b6:	f890 c00b 	ldrb.w	ip, [r0, #11]
	pstatic->algo__consistency_check__tolerance =
 80083ba:	f881 c01c 	strb.w	ip, [r1, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80083be:	f890 c00c 	ldrb.w	ip, [r0, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80083c2:	f881 c01d 	strb.w	ip, [r1, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80083c6:	f890 c00d 	ldrb.w	ip, [r0, #13]
	pstatic->sd_config__reset_stages_msb =
 80083ca:	f881 c01e 	strb.w	ip, [r1, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80083ce:	f890 c00e 	ldrb.w	ip, [r0, #14]
	pstatic->sd_config__reset_stages_lsb =
 80083d2:	f881 c01f 	strb.w	ip, [r1, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80083d6:	f890 c001 	ldrb.w	ip, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80083da:	7881      	ldrb	r1, [r0, #2]
 80083dc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
	ptiming->range_config__sigma_thresh =
 80083e0:	8159      	strh	r1, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80083e2:	f890 c003 	ldrb.w	ip, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80083e6:	7901      	ldrb	r1, [r0, #4]
 80083e8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80083ec:	8199      	strh	r1, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80083ee:	7941      	ldrb	r1, [r0, #5]
	ptiming->range_config__valid_phase_low =
 80083f0:	7399      	strb	r1, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80083f2:	7981      	ldrb	r1, [r0, #6]
	ptiming->range_config__valid_phase_high =
 80083f4:	73d9      	strb	r1, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 80083f6:	8ac3      	ldrh	r3, [r0, #22]
	pdynamic->system__thresh_high =
 80083f8:	8053      	strh	r3, [r2, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 80083fa:	8b03      	ldrh	r3, [r0, #24]
	pdynamic->system__thresh_low =
 80083fc:	8093      	strh	r3, [r2, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 80083fe:	7803      	ldrb	r3, [r0, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8008400:	7193      	strb	r3, [r2, #6]

	LOG_FUNCTION_END(0);

}
 8008402:	f85d fb04 	ldr.w	pc, [sp], #4

08008406 <VL53L1_preset_mode_histogram_ranging>:
{
 8008406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	b08d      	sub	sp, #52	@ 0x34
 800840c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800840e:	4688      	mov	r8, r1
 8008410:	4615      	mov	r5, r2
 8008412:	4699      	mov	r9, r3
 8008414:	9c16      	ldr	r4, [sp, #88]	@ 0x58
		VL53L1_preset_mode_standard_ranging(
 8008416:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	4623      	mov	r3, r4
 8008428:	464a      	mov	r2, r9
 800842a:	4629      	mov	r1, r5
 800842c:	4640      	mov	r0, r8
 800842e:	f7ff fd49 	bl	8007ec4 <VL53L1_preset_mode_standard_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008432:	900a      	str	r0, [sp, #40]	@ 0x28
 8008434:	b118      	cbz	r0, 800843e <VL53L1_preset_mode_histogram_ranging+0x38>
}
 8008436:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008438:	b00d      	add	sp, #52	@ 0x34
 800843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800843e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008442:	f8a8 3000 	strh.w	r3, [r8]
		VL53L1_init_histogram_config_structure(
 8008446:	9508      	str	r5, [sp, #32]
 8008448:	2305      	movs	r3, #5
 800844a:	9307      	str	r3, [sp, #28]
 800844c:	f04f 0b04 	mov.w	fp, #4
 8008450:	f8cd b018 	str.w	fp, [sp, #24]
 8008454:	2603      	movs	r6, #3
 8008456:	9605      	str	r6, [sp, #20]
 8008458:	2702      	movs	r7, #2
 800845a:	9704      	str	r7, [sp, #16]
 800845c:	2301      	movs	r3, #1
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	f8cd a008 	str.w	sl, [sp, #8]
 8008468:	f8cd b004 	str.w	fp, [sp, #4]
 800846c:	9600      	str	r6, [sp, #0]
 800846e:	463b      	mov	r3, r7
 8008470:	2201      	movs	r2, #1
 8008472:	4651      	mov	r1, sl
 8008474:	2007      	movs	r0, #7
 8008476:	f000 ffd9 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 800847a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800847c:	443b      	add	r3, r7
 800847e:	9308      	str	r3, [sp, #32]
 8008480:	2305      	movs	r3, #5
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	f8cd b018 	str.w	fp, [sp, #24]
 8008488:	9605      	str	r6, [sp, #20]
 800848a:	9704      	str	r7, [sp, #16]
 800848c:	2301      	movs	r3, #1
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	f8cd a008 	str.w	sl, [sp, #8]
 8008494:	f8cd b004 	str.w	fp, [sp, #4]
 8008498:	9600      	str	r6, [sp, #0]
 800849a:	463b      	mov	r3, r7
 800849c:	2201      	movs	r2, #1
 800849e:	4651      	mov	r1, sl
 80084a0:	2007      	movs	r0, #7
 80084a2:	f001 f819 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		ptiming->range_config__vcsel_period_a = 0x09;
 80084a6:	2209      	movs	r2, #9
 80084a8:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80084aa:	230b      	movs	r3, #11
 80084ac:	7263      	strb	r3, [r4, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80084ae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80084b0:	720a      	strb	r2, [r1, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80084b2:	724b      	strb	r3, [r1, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80084b4:	f884 a000 	strb.w	sl, [r4]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80084b8:	2320      	movs	r3, #32
 80084ba:	7063      	strb	r3, [r4, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80084bc:	f884 a002 	strb.w	sl, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80084c0:	231a      	movs	r3, #26
 80084c2:	70e3      	strb	r3, [r4, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80084c4:	f884 a004 	strb.w	sl, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80084c8:	2328      	movs	r3, #40	@ 0x28
 80084ca:	7163      	strb	r3, [r4, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80084cc:	f884 a007 	strb.w	sl, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80084d0:	2321      	movs	r3, #33	@ 0x21
 80084d2:	7223      	strb	r3, [r4, #8]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80084d4:	23f5      	movs	r3, #245	@ 0xf5
 80084d6:	f889 3007 	strb.w	r3, [r9, #7]
		phistpostprocess->valid_phase_low = 0x08;
 80084da:	2308      	movs	r3, #8
 80084dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084de:	f882 3020 	strb.w	r3, [r2, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80084e2:	2388      	movs	r3, #136	@ 0x88
 80084e4:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
		VL53L1_copy_hist_cfg_to_static_cfg(
 80084e8:	9100      	str	r1, [sp, #0]
 80084ea:	4623      	mov	r3, r4
 80084ec:	464a      	mov	r2, r9
 80084ee:	4641      	mov	r1, r8
 80084f0:	4628      	mov	r0, r5
 80084f2:	f7ff ff36 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80084f6:	239b      	movs	r3, #155	@ 0x9b
 80084f8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80084fa:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80084fc:	2326      	movs	r3, #38	@ 0x26
 80084fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008500:	7113      	strb	r3, [r2, #4]
 8008502:	e798      	b.n	8008436 <VL53L1_preset_mode_histogram_ranging+0x30>

08008504 <VL53L1_preset_mode_histogram_characterisation>:
{
 8008504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008506:	b087      	sub	sp, #28
 8008508:	460e      	mov	r6, r1
 800850a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800850c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
		VL53L1_preset_mode_histogram_ranging(
 800850e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008510:	9704      	str	r7, [sp, #16]
 8008512:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8008514:	9703      	str	r7, [sp, #12]
 8008516:	9402      	str	r4, [sp, #8]
 8008518:	9501      	str	r5, [sp, #4]
 800851a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800851c:	9700      	str	r7, [sp, #0]
 800851e:	f7ff ff72 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008522:	b930      	cbnz	r0, 8008532 <VL53L1_preset_mode_histogram_characterisation+0x2e>
		pstatic->debug__ctrl = 0x01;
 8008524:	2301      	movs	r3, #1
 8008526:	70b3      	strb	r3, [r6, #2]
		psystem->power_management__go1_power_force = 0x01;
 8008528:	7023      	strb	r3, [r4, #0]
		pdynamic->system__sequence_config               =
 800852a:	2383      	movs	r3, #131	@ 0x83
 800852c:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start                     =
 800852e:	232e      	movs	r3, #46	@ 0x2e
 8008530:	7123      	strb	r3, [r4, #4]
}
 8008532:	b007      	add	sp, #28
 8008534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008536 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
{
 8008536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853a:	b08f      	sub	sp, #60	@ 0x3c
 800853c:	910c      	str	r1, [sp, #48]	@ 0x30
 800853e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008540:	930d      	str	r3, [sp, #52]	@ 0x34
 8008542:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
		VL53L1_preset_mode_histogram_ranging(
 8008544:	9504      	str	r5, [sp, #16]
 8008546:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8008548:	9703      	str	r7, [sp, #12]
 800854a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800854c:	9402      	str	r4, [sp, #8]
 800854e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008550:	9401      	str	r4, [sp, #4]
 8008552:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008554:	9400      	str	r4, [sp, #0]
 8008556:	f7ff ff56 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 800855a:	4607      	mov	r7, r0
 800855c:	b118      	cbz	r0, 8008566 <VL53L1_preset_mode_histogram_ranging_with_mm1+0x30>
}
 800855e:	4638      	mov	r0, r7
 8008560:	b00f      	add	sp, #60	@ 0x3c
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	f04f 0b05 	mov.w	fp, #5
 800856e:	f8cd b01c 	str.w	fp, [sp, #28]
 8008572:	f04f 0904 	mov.w	r9, #4
 8008576:	f8cd 9018 	str.w	r9, [sp, #24]
 800857a:	f04f 0803 	mov.w	r8, #3
 800857e:	f8cd 8014 	str.w	r8, [sp, #20]
 8008582:	f04f 0a0a 	mov.w	sl, #10
 8008586:	f8cd a010 	str.w	sl, [sp, #16]
 800858a:	2409      	movs	r4, #9
 800858c:	9403      	str	r4, [sp, #12]
 800858e:	2608      	movs	r6, #8
 8008590:	9602      	str	r6, [sp, #8]
 8008592:	f8cd 9004 	str.w	r9, [sp, #4]
 8008596:	f8cd 8000 	str.w	r8, [sp]
 800859a:	2302      	movs	r3, #2
 800859c:	2201      	movs	r2, #1
 800859e:	2100      	movs	r1, #0
 80085a0:	2007      	movs	r0, #7
 80085a2:	f000 ff43 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 80085a6:	3502      	adds	r5, #2
 80085a8:	9508      	str	r5, [sp, #32]
 80085aa:	f8cd b01c 	str.w	fp, [sp, #28]
 80085ae:	f8cd 9018 	str.w	r9, [sp, #24]
 80085b2:	f8cd 8014 	str.w	r8, [sp, #20]
 80085b6:	f8cd a010 	str.w	sl, [sp, #16]
 80085ba:	9403      	str	r4, [sp, #12]
 80085bc:	9602      	str	r6, [sp, #8]
 80085be:	f8cd 9004 	str.w	r9, [sp, #4]
 80085c2:	f8cd 8000 	str.w	r8, [sp]
 80085c6:	2302      	movs	r3, #2
 80085c8:	2201      	movs	r2, #1
 80085ca:	2100      	movs	r1, #0
 80085cc:	2007      	movs	r0, #7
 80085ce:	f000 ff83 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80085d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085d4:	9200      	str	r2, [sp, #0]
 80085d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80085d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80085dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80085de:	f7ff fec0 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80085e2:	23bb      	movs	r3, #187	@ 0xbb
 80085e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085e6:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80085e8:	2326      	movs	r3, #38	@ 0x26
 80085ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085ec:	7113      	strb	r3, [r2, #4]
 80085ee:	e7b6      	b.n	800855e <VL53L1_preset_mode_histogram_ranging_with_mm1+0x28>

080085f0 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
{
 80085f0:	b530      	push	{r4, r5, lr}
 80085f2:	b087      	sub	sp, #28
 80085f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 80085f6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80085f8:	9504      	str	r5, [sp, #16]
 80085fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80085fc:	9503      	str	r5, [sp, #12]
 80085fe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008600:	9502      	str	r5, [sp, #8]
 8008602:	9401      	str	r4, [sp, #4]
 8008604:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008606:	9500      	str	r5, [sp, #0]
 8008608:	f7ff ff95 	bl	8008536 <VL53L1_preset_mode_histogram_ranging_with_mm1>
	if (status == VL53L1_ERROR_NONE) {
 800860c:	b908      	cbnz	r0, 8008612 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x22>
		pdynamic->system__sequence_config =
 800860e:	23db      	movs	r3, #219	@ 0xdb
 8008610:	7463      	strb	r3, [r4, #17]
}
 8008612:	b007      	add	sp, #28
 8008614:	bd30      	pop	{r4, r5, pc}

08008616 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
{
 8008616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	b08d      	sub	sp, #52	@ 0x34
 800861c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800861e:	920a      	str	r2, [sp, #40]	@ 0x28
 8008620:	469b      	mov	fp, r3
		VL53L1_preset_mode_histogram_ranging(
 8008622:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008624:	9404      	str	r4, [sp, #16]
 8008626:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008628:	9503      	str	r5, [sp, #12]
 800862a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800862c:	9502      	str	r5, [sp, #8]
 800862e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8008630:	9401      	str	r4, [sp, #4]
 8008632:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8008634:	9400      	str	r4, [sp, #0]
 8008636:	f7ff fee6 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 800863a:	4605      	mov	r5, r0
 800863c:	b118      	cbz	r0, 8008646 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0x30>
}
 800863e:	4628      	mov	r0, r5
 8008640:	b00d      	add	sp, #52	@ 0x34
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	240d      	movs	r4, #13
 800864c:	9407      	str	r4, [sp, #28]
 800864e:	f04f 0a0c 	mov.w	sl, #12
 8008652:	f8cd a018 	str.w	sl, [sp, #24]
 8008656:	f04f 090b 	mov.w	r9, #11
 800865a:	f8cd 9014 	str.w	r9, [sp, #20]
 800865e:	f04f 080a 	mov.w	r8, #10
 8008662:	f8cd 8010 	str.w	r8, [sp, #16]
 8008666:	2709      	movs	r7, #9
 8008668:	9703      	str	r7, [sp, #12]
 800866a:	2608      	movs	r6, #8
 800866c:	9602      	str	r6, [sp, #8]
 800866e:	f8cd a004 	str.w	sl, [sp, #4]
 8008672:	f8cd 9000 	str.w	r9, [sp]
 8008676:	4643      	mov	r3, r8
 8008678:	463a      	mov	r2, r7
 800867a:	4631      	mov	r1, r6
 800867c:	2007      	movs	r0, #7
 800867e:	f000 fed5 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008682:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008684:	1c93      	adds	r3, r2, #2
 8008686:	9308      	str	r3, [sp, #32]
 8008688:	9407      	str	r4, [sp, #28]
 800868a:	f8cd a018 	str.w	sl, [sp, #24]
 800868e:	f8cd 9014 	str.w	r9, [sp, #20]
 8008692:	f8cd 8010 	str.w	r8, [sp, #16]
 8008696:	9703      	str	r7, [sp, #12]
 8008698:	9602      	str	r6, [sp, #8]
 800869a:	f8cd a004 	str.w	sl, [sp, #4]
 800869e:	f8cd 9000 	str.w	r9, [sp]
 80086a2:	4643      	mov	r3, r8
 80086a4:	463a      	mov	r2, r7
 80086a6:	4631      	mov	r1, r6
 80086a8:	2007      	movs	r0, #7
 80086aa:	f000 ff15 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80086ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80086b0:	9200      	str	r2, [sp, #0]
 80086b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086b4:	465a      	mov	r2, fp
 80086b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086ba:	f7ff fe52 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		pgeneral->dss_config__roi_mode_control =
 80086be:	2302      	movs	r3, #2
 80086c0:	f88b 300a 	strb.w	r3, [fp, #10]
		pdynamic->system__sequence_config =
 80086c4:	23bb      	movs	r3, #187	@ 0xbb
 80086c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80086c8:	7453      	strb	r3, [r2, #17]
 80086ca:	e7b8      	b.n	800863e <VL53L1_preset_mode_histogram_ranging_mm1_cal+0x28>

080086cc <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
{
 80086cc:	b530      	push	{r4, r5, lr}
 80086ce:	b087      	sub	sp, #28
 80086d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80086d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80086d4:	9504      	str	r5, [sp, #16]
 80086d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80086d8:	9503      	str	r5, [sp, #12]
 80086da:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80086dc:	9502      	str	r5, [sp, #8]
 80086de:	9401      	str	r4, [sp, #4]
 80086e0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80086e2:	9500      	str	r5, [sp, #0]
 80086e4:	f7ff ff97 	bl	8008616 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
	if (status == VL53L1_ERROR_NONE) {
 80086e8:	b908      	cbnz	r0, 80086ee <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x22>
		pdynamic->system__sequence_config =
 80086ea:	23db      	movs	r3, #219	@ 0xdb
 80086ec:	7463      	strb	r3, [r4, #17]
}
 80086ee:	b007      	add	sp, #28
 80086f0:	bd30      	pop	{r4, r5, pc}

080086f2 <VL53L1_preset_mode_histogram_ranging_short_timing>:
{
 80086f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f6:	b08f      	sub	sp, #60	@ 0x3c
 80086f8:	910c      	str	r1, [sp, #48]	@ 0x30
 80086fa:	920d      	str	r2, [sp, #52]	@ 0x34
 80086fc:	461f      	mov	r7, r3
 80086fe:	9c18      	ldr	r4, [sp, #96]	@ 0x60
		VL53L1_preset_mode_histogram_ranging(
 8008700:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8008702:	9504      	str	r5, [sp, #16]
 8008704:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8008706:	9603      	str	r6, [sp, #12]
 8008708:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800870a:	9502      	str	r5, [sp, #8]
 800870c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800870e:	9501      	str	r5, [sp, #4]
 8008710:	9400      	str	r4, [sp, #0]
 8008712:	f7ff fe78 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008716:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008718:	b118      	cbz	r0, 8008722 <VL53L1_preset_mode_histogram_ranging_short_timing+0x30>
}
 800871a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800871c:	b00f      	add	sp, #60	@ 0x3c
 800871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8008722:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008726:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008728:	8013      	strh	r3, [r2, #0]
		VL53L1_init_histogram_config_structure(
 800872a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800872c:	9308      	str	r3, [sp, #32]
 800872e:	f04f 0804 	mov.w	r8, #4
 8008732:	f8cd 801c 	str.w	r8, [sp, #28]
 8008736:	f04f 0903 	mov.w	r9, #3
 800873a:	f8cd 9018 	str.w	r9, [sp, #24]
 800873e:	f04f 0b02 	mov.w	fp, #2
 8008742:	f8cd b014 	str.w	fp, [sp, #20]
 8008746:	f04f 0a01 	mov.w	sl, #1
 800874a:	f8cd a010 	str.w	sl, [sp, #16]
 800874e:	2600      	movs	r6, #0
 8008750:	9603      	str	r6, [sp, #12]
 8008752:	2507      	movs	r5, #7
 8008754:	9502      	str	r5, [sp, #8]
 8008756:	f8cd 8004 	str.w	r8, [sp, #4]
 800875a:	f8cd 9000 	str.w	r9, [sp]
 800875e:	465b      	mov	r3, fp
 8008760:	4652      	mov	r2, sl
 8008762:	4631      	mov	r1, r6
 8008764:	4628      	mov	r0, r5
 8008766:	f000 fe61 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 800876a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800876c:	445b      	add	r3, fp
 800876e:	9308      	str	r3, [sp, #32]
 8008770:	f8cd 801c 	str.w	r8, [sp, #28]
 8008774:	f8cd 9018 	str.w	r9, [sp, #24]
 8008778:	f8cd b014 	str.w	fp, [sp, #20]
 800877c:	f8cd a010 	str.w	sl, [sp, #16]
 8008780:	9603      	str	r6, [sp, #12]
 8008782:	9502      	str	r5, [sp, #8]
 8008784:	f8cd 8004 	str.w	r8, [sp, #4]
 8008788:	f8cd 9000 	str.w	r9, [sp]
 800878c:	465b      	mov	r3, fp
 800878e:	4652      	mov	r2, sl
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	f000 fea0 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008798:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800879a:	9500      	str	r5, [sp, #0]
 800879c:	4623      	mov	r3, r4
 800879e:	463a      	mov	r2, r7
 80087a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80087a2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80087a4:	f7ff fddd 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x04;
 80087a8:	f884 8006 	strb.w	r8, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80087ac:	f884 9009 	strb.w	r9, [r4, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80087b0:	7026      	strb	r6, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80087b2:	2342      	movs	r3, #66	@ 0x42
 80087b4:	7063      	strb	r3, [r4, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80087b6:	70a6      	strb	r6, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 80087b8:	70e3      	strb	r3, [r4, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80087ba:	7126      	strb	r6, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 80087bc:	2352      	movs	r3, #82	@ 0x52
 80087be:	7163      	strb	r3, [r4, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80087c0:	71e6      	strb	r6, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 80087c2:	2366      	movs	r3, #102	@ 0x66
 80087c4:	7223      	strb	r3, [r4, #8]
		pgeneral->cal_config__vcsel_start = 0x04;
 80087c6:	f887 8003 	strb.w	r8, [r7, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 80087ca:	23a4      	movs	r3, #164	@ 0xa4
 80087cc:	71fb      	strb	r3, [r7, #7]
		pdynamic->system__sequence_config =
 80087ce:	239b      	movs	r3, #155	@ 0x9b
 80087d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087d2:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80087d4:	2326      	movs	r3, #38	@ 0x26
 80087d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087d8:	7113      	strb	r3, [r2, #4]
 80087da:	e79e      	b.n	800871a <VL53L1_preset_mode_histogram_ranging_short_timing+0x28>

080087dc <VL53L1_preset_mode_histogram_long_range>:
{
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	b08f      	sub	sp, #60	@ 0x3c
 80087e2:	900c      	str	r0, [sp, #48]	@ 0x30
 80087e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80087e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087e8:	461f      	mov	r7, r3
 80087ea:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80087ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
		VL53L1_preset_mode_histogram_ranging(
 80087ee:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80087f0:	9604      	str	r6, [sp, #16]
 80087f2:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80087f4:	9603      	str	r6, [sp, #12]
 80087f6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80087f8:	9602      	str	r6, [sp, #8]
 80087fa:	9501      	str	r5, [sp, #4]
 80087fc:	9400      	str	r4, [sp, #0]
 80087fe:	f7ff fe02 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008802:	900a      	str	r0, [sp, #40]	@ 0x28
 8008804:	b118      	cbz	r0, 800880e <VL53L1_preset_mode_histogram_long_range+0x32>
}
 8008806:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008808:	b00f      	add	sp, #60	@ 0x3c
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 800880e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008810:	9308      	str	r3, [sp, #32]
 8008812:	2205      	movs	r2, #5
 8008814:	9207      	str	r2, [sp, #28]
 8008816:	f04f 0b04 	mov.w	fp, #4
 800881a:	f8cd b018 	str.w	fp, [sp, #24]
 800881e:	f04f 0a03 	mov.w	sl, #3
 8008822:	f8cd a014 	str.w	sl, [sp, #20]
 8008826:	f04f 0902 	mov.w	r9, #2
 800882a:	f8cd 9010 	str.w	r9, [sp, #16]
 800882e:	2601      	movs	r6, #1
 8008830:	9603      	str	r6, [sp, #12]
 8008832:	f04f 0800 	mov.w	r8, #0
 8008836:	f8cd 8008 	str.w	r8, [sp, #8]
 800883a:	f8cd b004 	str.w	fp, [sp, #4]
 800883e:	f8cd a000 	str.w	sl, [sp]
 8008842:	464b      	mov	r3, r9
 8008844:	4632      	mov	r2, r6
 8008846:	4641      	mov	r1, r8
 8008848:	2007      	movs	r0, #7
 800884a:	f000 fdef 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 800884e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008850:	eb02 0309 	add.w	r3, r2, r9
 8008854:	9308      	str	r3, [sp, #32]
 8008856:	2205      	movs	r2, #5
 8008858:	9207      	str	r2, [sp, #28]
 800885a:	f8cd b018 	str.w	fp, [sp, #24]
 800885e:	f8cd a014 	str.w	sl, [sp, #20]
 8008862:	f8cd 9010 	str.w	r9, [sp, #16]
 8008866:	9603      	str	r6, [sp, #12]
 8008868:	f8cd 8008 	str.w	r8, [sp, #8]
 800886c:	f8cd b004 	str.w	fp, [sp, #4]
 8008870:	f8cd a000 	str.w	sl, [sp]
 8008874:	464b      	mov	r3, r9
 8008876:	4632      	mov	r2, r6
 8008878:	4641      	mov	r1, r8
 800887a:	2007      	movs	r0, #7
 800887c:	f000 fe2c 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008880:	9500      	str	r5, [sp, #0]
 8008882:	4623      	mov	r3, r4
 8008884:	463a      	mov	r2, r7
 8008886:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008888:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800888a:	f7ff fd6a 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x09;
 800888e:	2309      	movs	r3, #9
 8008890:	71a3      	strb	r3, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8008892:	220b      	movs	r2, #11
 8008894:	7262      	strb	r2, [r4, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008896:	f884 8000 	strb.w	r8, [r4]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800889a:	2121      	movs	r1, #33	@ 0x21
 800889c:	7061      	strb	r1, [r4, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800889e:	f884 8002 	strb.w	r8, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80088a2:	211b      	movs	r1, #27
 80088a4:	70e1      	strb	r1, [r4, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80088a6:	f884 8004 	strb.w	r8, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80088aa:	2129      	movs	r1, #41	@ 0x29
 80088ac:	7161      	strb	r1, [r4, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80088ae:	f884 8007 	strb.w	r8, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80088b2:	2122      	movs	r1, #34	@ 0x22
 80088b4:	7221      	strb	r1, [r4, #8]
		pgeneral->cal_config__vcsel_start = 0x09;
 80088b6:	70fb      	strb	r3, [r7, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80088b8:	21f5      	movs	r1, #245	@ 0xf5
 80088ba:	71f9      	strb	r1, [r7, #7]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80088bc:	722b      	strb	r3, [r5, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80088be:	726a      	strb	r2, [r5, #9]
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80088c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80088c2:	7b1b      	ldrb	r3, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80088c4:	72ab      	strb	r3, [r5, #10]
				ptuning_parms->tp_init_phase_ref_hist_long;
 80088c6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80088c8:	7bdb      	ldrb	r3, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80088ca:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 80088cc:	2308      	movs	r3, #8
 80088ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088d0:	f882 3020 	strb.w	r3, [r2, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80088d4:	2388      	movs	r3, #136	@ 0x88
 80088d6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
		pdynamic->system__sequence_config =
 80088da:	239b      	movs	r3, #155	@ 0x9b
 80088dc:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 80088de:	2326      	movs	r3, #38	@ 0x26
 80088e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088e2:	7113      	strb	r3, [r2, #4]
 80088e4:	e78f      	b.n	8008806 <VL53L1_preset_mode_histogram_long_range+0x2a>

080088e6 <VL53L1_preset_mode_histogram_long_range_mm1>:
{
 80088e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ea:	b08d      	sub	sp, #52	@ 0x34
 80088ec:	910a      	str	r1, [sp, #40]	@ 0x28
 80088ee:	4614      	mov	r4, r2
 80088f0:	930b      	str	r3, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_long_range(
 80088f2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80088f4:	9504      	str	r5, [sp, #16]
 80088f6:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088f8:	9503      	str	r5, [sp, #12]
 80088fa:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80088fc:	9502      	str	r5, [sp, #8]
 80088fe:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008900:	9501      	str	r5, [sp, #4]
 8008902:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8008904:	9500      	str	r5, [sp, #0]
 8008906:	f7ff ff69 	bl	80087dc <VL53L1_preset_mode_histogram_long_range>
	if (status == VL53L1_ERROR_NONE) {
 800890a:	4605      	mov	r5, r0
 800890c:	b118      	cbz	r0, 8008916 <VL53L1_preset_mode_histogram_long_range_mm1+0x30>
}
 800890e:	4628      	mov	r0, r5
 8008910:	b00d      	add	sp, #52	@ 0x34
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008916:	9408      	str	r4, [sp, #32]
 8008918:	f04f 0b05 	mov.w	fp, #5
 800891c:	f8cd b01c 	str.w	fp, [sp, #28]
 8008920:	2704      	movs	r7, #4
 8008922:	9706      	str	r7, [sp, #24]
 8008924:	2603      	movs	r6, #3
 8008926:	9605      	str	r6, [sp, #20]
 8008928:	f04f 0a0a 	mov.w	sl, #10
 800892c:	f8cd a010 	str.w	sl, [sp, #16]
 8008930:	f04f 0909 	mov.w	r9, #9
 8008934:	f8cd 900c 	str.w	r9, [sp, #12]
 8008938:	f04f 0808 	mov.w	r8, #8
 800893c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008940:	9701      	str	r7, [sp, #4]
 8008942:	9600      	str	r6, [sp, #0]
 8008944:	2302      	movs	r3, #2
 8008946:	2201      	movs	r2, #1
 8008948:	2100      	movs	r1, #0
 800894a:	2007      	movs	r0, #7
 800894c:	f000 fd6e 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008950:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008952:	3302      	adds	r3, #2
 8008954:	9308      	str	r3, [sp, #32]
 8008956:	f8cd b01c 	str.w	fp, [sp, #28]
 800895a:	9706      	str	r7, [sp, #24]
 800895c:	9605      	str	r6, [sp, #20]
 800895e:	f8cd a010 	str.w	sl, [sp, #16]
 8008962:	f8cd 900c 	str.w	r9, [sp, #12]
 8008966:	f8cd 8008 	str.w	r8, [sp, #8]
 800896a:	9701      	str	r7, [sp, #4]
 800896c:	9600      	str	r6, [sp, #0]
 800896e:	2302      	movs	r3, #2
 8008970:	2201      	movs	r2, #1
 8008972:	2100      	movs	r1, #0
 8008974:	2007      	movs	r0, #7
 8008976:	f000 fdaf 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 800897a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008980:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008982:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff fcec 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 800898a:	23bb      	movs	r3, #187	@ 0xbb
 800898c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800898e:	7453      	strb	r3, [r2, #17]
 8008990:	e7bd      	b.n	800890e <VL53L1_preset_mode_histogram_long_range_mm1+0x28>

08008992 <VL53L1_preset_mode_histogram_long_range_mm2>:
{
 8008992:	b530      	push	{r4, r5, lr}
 8008994:	b087      	sub	sp, #28
 8008996:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_long_range_mm1(
 8008998:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800899a:	9504      	str	r5, [sp, #16]
 800899c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800899e:	9503      	str	r5, [sp, #12]
 80089a0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80089a2:	9502      	str	r5, [sp, #8]
 80089a4:	9401      	str	r4, [sp, #4]
 80089a6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80089a8:	9500      	str	r5, [sp, #0]
 80089aa:	f7ff ff9c 	bl	80088e6 <VL53L1_preset_mode_histogram_long_range_mm1>
	if (status == VL53L1_ERROR_NONE) {
 80089ae:	b908      	cbnz	r0, 80089b4 <VL53L1_preset_mode_histogram_long_range_mm2+0x22>
		pdynamic->system__sequence_config =
 80089b0:	23db      	movs	r3, #219	@ 0xdb
 80089b2:	7463      	strb	r3, [r4, #17]
}
 80089b4:	b007      	add	sp, #28
 80089b6:	bd30      	pop	{r4, r5, pc}

080089b8 <VL53L1_preset_mode_histogram_medium_range>:
{
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	b08f      	sub	sp, #60	@ 0x3c
 80089be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80089c0:	910c      	str	r1, [sp, #48]	@ 0x30
 80089c2:	4690      	mov	r8, r2
 80089c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80089c6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80089c8:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80089ca:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
		VL53L1_preset_mode_histogram_ranging(
 80089cc:	9604      	str	r6, [sp, #16]
 80089ce:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80089d0:	9703      	str	r7, [sp, #12]
 80089d2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80089d4:	9702      	str	r7, [sp, #8]
 80089d6:	9501      	str	r5, [sp, #4]
 80089d8:	9400      	str	r4, [sp, #0]
 80089da:	f7ff fd14 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 80089de:	4683      	mov	fp, r0
 80089e0:	b118      	cbz	r0, 80089ea <VL53L1_preset_mode_histogram_medium_range+0x32>
}
 80089e2:	4658      	mov	r0, fp
 80089e4:	b00f      	add	sp, #60	@ 0x3c
 80089e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 80089ea:	4647      	mov	r7, r8
 80089ec:	f8cd 8020 	str.w	r8, [sp, #32]
 80089f0:	2303      	movs	r3, #3
 80089f2:	9307      	str	r3, [sp, #28]
 80089f4:	f04f 0a02 	mov.w	sl, #2
 80089f8:	f8cd a018 	str.w	sl, [sp, #24]
 80089fc:	f04f 0901 	mov.w	r9, #1
 8008a00:	f8cd 9014 	str.w	r9, [sp, #20]
 8008a04:	f8cd a010 	str.w	sl, [sp, #16]
 8008a08:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a0c:	f04f 0800 	mov.w	r8, #0
 8008a10:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a14:	f8cd a004 	str.w	sl, [sp, #4]
 8008a18:	f8cd a000 	str.w	sl, [sp]
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	464a      	mov	r2, r9
 8008a20:	4641      	mov	r1, r8
 8008a22:	2007      	movs	r0, #7
 8008a24:	f000 fd02 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008a28:	4456      	add	r6, sl
 8008a2a:	9608      	str	r6, [sp, #32]
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	f8cd a018 	str.w	sl, [sp, #24]
 8008a34:	f8cd 9014 	str.w	r9, [sp, #20]
 8008a38:	f8cd a010 	str.w	sl, [sp, #16]
 8008a3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a40:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a44:	f8cd a004 	str.w	sl, [sp, #4]
 8008a48:	f8cd a000 	str.w	sl, [sp]
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	464a      	mov	r2, r9
 8008a50:	4641      	mov	r1, r8
 8008a52:	2007      	movs	r0, #7
 8008a54:	f000 fd40 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008a58:	9500      	str	r5, [sp, #0]
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8008a5e:	4632      	mov	r2, r6
 8008a60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a62:	4638      	mov	r0, r7
 8008a64:	f7ff fc7d 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x05;
 8008a68:	2305      	movs	r3, #5
 8008a6a:	71a3      	strb	r3, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8008a6c:	2207      	movs	r2, #7
 8008a6e:	7262      	strb	r2, [r4, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008a70:	f884 8000 	strb.w	r8, [r4]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8008a74:	2136      	movs	r1, #54	@ 0x36
 8008a76:	7061      	strb	r1, [r4, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008a78:	f884 8002 	strb.w	r8, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8008a7c:	2128      	movs	r1, #40	@ 0x28
 8008a7e:	70e1      	strb	r1, [r4, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008a80:	f884 8004 	strb.w	r8, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8008a84:	2144      	movs	r1, #68	@ 0x44
 8008a86:	7161      	strb	r1, [r4, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008a88:	f884 8007 	strb.w	r8, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8008a8c:	2133      	movs	r1, #51	@ 0x33
 8008a8e:	7221      	strb	r1, [r4, #8]
		pgeneral->cal_config__vcsel_start = 0x05;
 8008a90:	70f3      	strb	r3, [r6, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008a92:	21f5      	movs	r1, #245	@ 0xf5
 8008a94:	71f1      	strb	r1, [r6, #7]
		pdynamic->sd_config__woi_sd0 = 0x05;
 8008a96:	722b      	strb	r3, [r5, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8008a98:	726a      	strb	r2, [r5, #9]
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8008a9a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008a9c:	7b5b      	ldrb	r3, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8008a9e:	72ab      	strb	r3, [r5, #10]
			ptuning_parms->tp_init_phase_ref_hist_med;
 8008aa0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008aa2:	7c1b      	ldrb	r3, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8008aa4:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008aaa:	f882 3020 	strb.w	r3, [r2, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8008aae:	2348      	movs	r3, #72	@ 0x48
 8008ab0:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
		pdynamic->system__sequence_config =
 8008ab4:	239b      	movs	r3, #155	@ 0x9b
 8008ab6:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 8008ab8:	2326      	movs	r3, #38	@ 0x26
 8008aba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008abc:	7113      	strb	r3, [r2, #4]
 8008abe:	e790      	b.n	80089e2 <VL53L1_preset_mode_histogram_medium_range+0x2a>

08008ac0 <VL53L1_preset_mode_histogram_medium_range_mm1>:
{
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	b08d      	sub	sp, #52	@ 0x34
 8008ac6:	910a      	str	r1, [sp, #40]	@ 0x28
 8008ac8:	4614      	mov	r4, r2
 8008aca:	930b      	str	r3, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_medium_range(
 8008acc:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8008ace:	9504      	str	r5, [sp, #16]
 8008ad0:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ad2:	9503      	str	r5, [sp, #12]
 8008ad4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008ad6:	9502      	str	r5, [sp, #8]
 8008ad8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008ada:	9501      	str	r5, [sp, #4]
 8008adc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8008ade:	9500      	str	r5, [sp, #0]
 8008ae0:	f7ff ff6a 	bl	80089b8 <VL53L1_preset_mode_histogram_medium_range>
	if (status == VL53L1_ERROR_NONE) {
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	b118      	cbz	r0, 8008af0 <VL53L1_preset_mode_histogram_medium_range_mm1+0x30>
}
 8008ae8:	4638      	mov	r0, r7
 8008aea:	b00d      	add	sp, #52	@ 0x34
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008af0:	9408      	str	r4, [sp, #32]
 8008af2:	f04f 0b03 	mov.w	fp, #3
 8008af6:	f8cd b01c 	str.w	fp, [sp, #28]
 8008afa:	2602      	movs	r6, #2
 8008afc:	9606      	str	r6, [sp, #24]
 8008afe:	2501      	movs	r5, #1
 8008b00:	9505      	str	r5, [sp, #20]
 8008b02:	f04f 0a0a 	mov.w	sl, #10
 8008b06:	f8cd a010 	str.w	sl, [sp, #16]
 8008b0a:	f04f 0909 	mov.w	r9, #9
 8008b0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b12:	f04f 0808 	mov.w	r8, #8
 8008b16:	f8cd 8008 	str.w	r8, [sp, #8]
 8008b1a:	9601      	str	r6, [sp, #4]
 8008b1c:	9600      	str	r6, [sp, #0]
 8008b1e:	462b      	mov	r3, r5
 8008b20:	462a      	mov	r2, r5
 8008b22:	2100      	movs	r1, #0
 8008b24:	2007      	movs	r0, #7
 8008b26:	f000 fc81 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008b2a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008b2c:	4433      	add	r3, r6
 8008b2e:	9308      	str	r3, [sp, #32]
 8008b30:	f8cd b01c 	str.w	fp, [sp, #28]
 8008b34:	9606      	str	r6, [sp, #24]
 8008b36:	9505      	str	r5, [sp, #20]
 8008b38:	f8cd a010 	str.w	sl, [sp, #16]
 8008b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b40:	f8cd 8008 	str.w	r8, [sp, #8]
 8008b44:	9601      	str	r6, [sp, #4]
 8008b46:	9600      	str	r6, [sp, #0]
 8008b48:	462b      	mov	r3, r5
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	2007      	movs	r0, #7
 8008b50:	f000 fcc2 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008b54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f7ff fbff 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 8008b64:	23bb      	movs	r3, #187	@ 0xbb
 8008b66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b68:	7453      	strb	r3, [r2, #17]
 8008b6a:	e7bd      	b.n	8008ae8 <VL53L1_preset_mode_histogram_medium_range_mm1+0x28>

08008b6c <VL53L1_preset_mode_histogram_medium_range_mm2>:
{
 8008b6c:	b530      	push	{r4, r5, lr}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8008b72:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8008b74:	9504      	str	r5, [sp, #16]
 8008b76:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008b78:	9503      	str	r5, [sp, #12]
 8008b7a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008b7c:	9502      	str	r5, [sp, #8]
 8008b7e:	9401      	str	r4, [sp, #4]
 8008b80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008b82:	9500      	str	r5, [sp, #0]
 8008b84:	f7ff ff9c 	bl	8008ac0 <VL53L1_preset_mode_histogram_medium_range_mm1>
	if (status == VL53L1_ERROR_NONE) {
 8008b88:	b908      	cbnz	r0, 8008b8e <VL53L1_preset_mode_histogram_medium_range_mm2+0x22>
		pdynamic->system__sequence_config =
 8008b8a:	23db      	movs	r3, #219	@ 0xdb
 8008b8c:	7463      	strb	r3, [r4, #17]
}
 8008b8e:	b007      	add	sp, #28
 8008b90:	bd30      	pop	{r4, r5, pc}

08008b92 <VL53L1_preset_mode_histogram_short_range>:
{
 8008b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b96:	b08f      	sub	sp, #60	@ 0x3c
 8008b98:	900c      	str	r0, [sp, #48]	@ 0x30
 8008b9a:	910d      	str	r1, [sp, #52]	@ 0x34
 8008b9c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b9e:	4698      	mov	r8, r3
 8008ba0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008ba2:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8008ba4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
		VL53L1_preset_mode_histogram_ranging(
 8008ba6:	9604      	str	r6, [sp, #16]
 8008ba8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008baa:	9503      	str	r5, [sp, #12]
 8008bac:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8008bae:	9502      	str	r5, [sp, #8]
 8008bb0:	9701      	str	r7, [sp, #4]
 8008bb2:	9400      	str	r4, [sp, #0]
 8008bb4:	f7ff fc27 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008bb8:	4682      	mov	sl, r0
 8008bba:	b118      	cbz	r0, 8008bc4 <VL53L1_preset_mode_histogram_short_range+0x32>
}
 8008bbc:	4650      	mov	r0, sl
 8008bbe:	b00f      	add	sp, #60	@ 0x3c
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bc6:	9308      	str	r3, [sp, #32]
 8008bc8:	f04f 0b02 	mov.w	fp, #2
 8008bcc:	f8cd b01c 	str.w	fp, [sp, #28]
 8008bd0:	f8cd b018 	str.w	fp, [sp, #24]
 8008bd4:	2501      	movs	r5, #1
 8008bd6:	9505      	str	r5, [sp, #20]
 8008bd8:	9504      	str	r5, [sp, #16]
 8008bda:	9503      	str	r5, [sp, #12]
 8008bdc:	f04f 0900 	mov.w	r9, #0
 8008be0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008be4:	9501      	str	r5, [sp, #4]
 8008be6:	9500      	str	r5, [sp, #0]
 8008be8:	462b      	mov	r3, r5
 8008bea:	464a      	mov	r2, r9
 8008bec:	2107      	movs	r1, #7
 8008bee:	4608      	mov	r0, r1
 8008bf0:	f000 fc1c 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008bf4:	445e      	add	r6, fp
 8008bf6:	9608      	str	r6, [sp, #32]
 8008bf8:	f8cd b01c 	str.w	fp, [sp, #28]
 8008bfc:	f8cd b018 	str.w	fp, [sp, #24]
 8008c00:	9505      	str	r5, [sp, #20]
 8008c02:	9504      	str	r5, [sp, #16]
 8008c04:	9503      	str	r5, [sp, #12]
 8008c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c0a:	9501      	str	r5, [sp, #4]
 8008c0c:	9500      	str	r5, [sp, #0]
 8008c0e:	462b      	mov	r3, r5
 8008c10:	464a      	mov	r2, r9
 8008c12:	2107      	movs	r1, #7
 8008c14:	4608      	mov	r0, r1
 8008c16:	f000 fc5f 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008c1a:	9700      	str	r7, [sp, #0]
 8008c1c:	4623      	mov	r3, r4
 8008c1e:	4642      	mov	r2, r8
 8008c20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008c22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c24:	f7ff fb9d 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x03;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	71a3      	strb	r3, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008c2c:	2205      	movs	r2, #5
 8008c2e:	7262      	strb	r2, [r4, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008c30:	f884 9000 	strb.w	r9, [r4]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8008c34:	2152      	movs	r1, #82	@ 0x52
 8008c36:	7061      	strb	r1, [r4, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008c38:	f884 9002 	strb.w	r9, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8008c3c:	2137      	movs	r1, #55	@ 0x37
 8008c3e:	70e1      	strb	r1, [r4, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008c40:	f884 9004 	strb.w	r9, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8008c44:	2166      	movs	r1, #102	@ 0x66
 8008c46:	7161      	strb	r1, [r4, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008c48:	f884 9007 	strb.w	r9, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8008c4c:	2144      	movs	r1, #68	@ 0x44
 8008c4e:	7221      	strb	r1, [r4, #8]
		pgeneral->cal_config__vcsel_start = 0x03;
 8008c50:	f888 3003 	strb.w	r3, [r8, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008c54:	21f5      	movs	r1, #245	@ 0xf5
 8008c56:	f888 1007 	strb.w	r1, [r8, #7]
		pdynamic->sd_config__woi_sd0 = 0x03;
 8008c5a:	723b      	strb	r3, [r7, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008c5c:	727a      	strb	r2, [r7, #9]
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8008c5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008c60:	7b9b      	ldrb	r3, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8008c62:	72bb      	strb	r3, [r7, #10]
			ptuning_parms->tp_init_phase_ref_hist_short;
 8008c64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008c66:	7c5b      	ldrb	r3, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8008c68:	72fb      	strb	r3, [r7, #11]
		phistpostprocess->valid_phase_low = 0x08;
 8008c6a:	2308      	movs	r3, #8
 8008c6c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c6e:	f882 3020 	strb.w	r3, [r2, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8008c72:	2328      	movs	r3, #40	@ 0x28
 8008c74:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
		pdynamic->system__sequence_config =
 8008c78:	23bb      	movs	r3, #187	@ 0xbb
 8008c7a:	747b      	strb	r3, [r7, #17]
		psystem->system__mode_start =
 8008c7c:	2326      	movs	r3, #38	@ 0x26
 8008c7e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c80:	7113      	strb	r3, [r2, #4]
 8008c82:	e79b      	b.n	8008bbc <VL53L1_preset_mode_histogram_short_range+0x2a>

08008c84 <VL53L1_preset_mode_special_histogram_short_range>:
{
 8008c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c88:	b08d      	sub	sp, #52	@ 0x34
 8008c8a:	4682      	mov	sl, r0
 8008c8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c8e:	920a      	str	r2, [sp, #40]	@ 0x28
 8008c90:	461c      	mov	r4, r3
 8008c92:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8008c94:	f8dd 805c 	ldr.w	r8, [sp, #92]	@ 0x5c
 8008c98:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
		VL53L1_preset_mode_histogram_short_range(
 8008c9a:	9704      	str	r7, [sp, #16]
 8008c9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c9e:	9503      	str	r5, [sp, #12]
 8008ca0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008ca2:	9502      	str	r5, [sp, #8]
 8008ca4:	f8cd 8004 	str.w	r8, [sp, #4]
 8008ca8:	9600      	str	r6, [sp, #0]
 8008caa:	f7ff ff72 	bl	8008b92 <VL53L1_preset_mode_histogram_short_range>
	if (status == VL53L1_ERROR_NONE) {
 8008cae:	4683      	mov	fp, r0
 8008cb0:	b118      	cbz	r0, 8008cba <VL53L1_preset_mode_special_histogram_short_range+0x36>
}
 8008cb2:	4658      	mov	r0, fp
 8008cb4:	b00d      	add	sp, #52	@ 0x34
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cbc:	9308      	str	r3, [sp, #32]
 8008cbe:	f04f 0901 	mov.w	r9, #1
 8008cc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cc6:	f8cd 9018 	str.w	r9, [sp, #24]
 8008cca:	f8cd 9014 	str.w	r9, [sp, #20]
 8008cce:	2500      	movs	r5, #0
 8008cd0:	9504      	str	r5, [sp, #16]
 8008cd2:	9503      	str	r5, [sp, #12]
 8008cd4:	9502      	str	r5, [sp, #8]
 8008cd6:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cda:	f8cd 9000 	str.w	r9, [sp]
 8008cde:	462b      	mov	r3, r5
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	2107      	movs	r1, #7
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	f000 fba1 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008cea:	3702      	adds	r7, #2
 8008cec:	9708      	str	r7, [sp, #32]
 8008cee:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cf2:	f8cd 9018 	str.w	r9, [sp, #24]
 8008cf6:	f8cd 9014 	str.w	r9, [sp, #20]
 8008cfa:	9504      	str	r5, [sp, #16]
 8008cfc:	9503      	str	r5, [sp, #12]
 8008cfe:	9502      	str	r5, [sp, #8]
 8008d00:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d04:	f8cd 9000 	str.w	r9, [sp]
 8008d08:	462b      	mov	r3, r5
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	2107      	movs	r1, #7
 8008d0e:	4608      	mov	r0, r1
 8008d10:	f000 fbe2 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008d14:	f8cd 8000 	str.w	r8, [sp]
 8008d18:	4633      	mov	r3, r6
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d20:	f7ff fb1f 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x02;
 8008d24:	2202      	movs	r2, #2
 8008d26:	71b2      	strb	r2, [r6, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	7273      	strb	r3, [r6, #9]
		pgeneral->cal_config__vcsel_start = 0x00;
 8008d2c:	70e5      	strb	r5, [r4, #3]
		pgeneral->phasecal_config__target = 0x31;
 8008d2e:	2131      	movs	r1, #49	@ 0x31
 8008d30:	7221      	strb	r1, [r4, #8]
		pdynamic->sd_config__woi_sd0 = 0x02;
 8008d32:	f888 2008 	strb.w	r2, [r8, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8008d36:	f888 3009 	strb.w	r3, [r8, #9]
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8008d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d3c:	7b9b      	ldrb	r3, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8008d3e:	f888 300a 	strb.w	r3, [r8, #10]
			ptuning_parms->tp_init_phase_ref_hist_short;
 8008d42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d44:	7c5b      	ldrb	r3, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8008d46:	f888 300b 	strb.w	r3, [r8, #11]
		phistpostprocess->valid_phase_low = 0x10;
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	f88a 3020 	strb.w	r3, [sl, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8008d50:	2318      	movs	r3, #24
 8008d52:	f88a 3021 	strb.w	r3, [sl, #33]	@ 0x21
 8008d56:	e7ac      	b.n	8008cb2 <VL53L1_preset_mode_special_histogram_short_range+0x2e>

08008d58 <VL53L1_preset_mode_histogram_short_range_mm1>:
{
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	b08d      	sub	sp, #52	@ 0x34
 8008d5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008d60:	4614      	mov	r4, r2
 8008d62:	461e      	mov	r6, r3
 8008d64:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
		VL53L1_preset_mode_histogram_short_range(
 8008d66:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8008d68:	9504      	str	r5, [sp, #16]
 8008d6a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d6c:	9503      	str	r5, [sp, #12]
 8008d6e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008d70:	9502      	str	r5, [sp, #8]
 8008d72:	9701      	str	r7, [sp, #4]
 8008d74:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8008d76:	9500      	str	r5, [sp, #0]
 8008d78:	f7ff ff0b 	bl	8008b92 <VL53L1_preset_mode_histogram_short_range>
	if (status == VL53L1_ERROR_NONE) {
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	b118      	cbz	r0, 8008d88 <VL53L1_preset_mode_histogram_short_range_mm1+0x30>
}
 8008d80:	4640      	mov	r0, r8
 8008d82:	b00d      	add	sp, #52	@ 0x34
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008d88:	9408      	str	r4, [sp, #32]
 8008d8a:	f04f 0902 	mov.w	r9, #2
 8008d8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d92:	f8cd 9018 	str.w	r9, [sp, #24]
 8008d96:	2501      	movs	r5, #1
 8008d98:	9505      	str	r5, [sp, #20]
 8008d9a:	9504      	str	r5, [sp, #16]
 8008d9c:	f04f 0b09 	mov.w	fp, #9
 8008da0:	f8cd b00c 	str.w	fp, [sp, #12]
 8008da4:	f04f 0a08 	mov.w	sl, #8
 8008da8:	f8cd a008 	str.w	sl, [sp, #8]
 8008dac:	9501      	str	r5, [sp, #4]
 8008dae:	9500      	str	r5, [sp, #0]
 8008db0:	462b      	mov	r3, r5
 8008db2:	2200      	movs	r2, #0
 8008db4:	2107      	movs	r1, #7
 8008db6:	4608      	mov	r0, r1
 8008db8:	f000 fb38 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008dbc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008dbe:	444b      	add	r3, r9
 8008dc0:	9308      	str	r3, [sp, #32]
 8008dc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008dc6:	f8cd 9018 	str.w	r9, [sp, #24]
 8008dca:	9505      	str	r5, [sp, #20]
 8008dcc:	9504      	str	r5, [sp, #16]
 8008dce:	f8cd b00c 	str.w	fp, [sp, #12]
 8008dd2:	f8cd a008 	str.w	sl, [sp, #8]
 8008dd6:	9501      	str	r5, [sp, #4]
 8008dd8:	9500      	str	r5, [sp, #0]
 8008dda:	462b      	mov	r3, r5
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2107      	movs	r1, #7
 8008de0:	4608      	mov	r0, r1
 8008de2:	f000 fb79 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008de6:	9700      	str	r7, [sp, #0]
 8008de8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008dea:	4632      	mov	r2, r6
 8008dec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dee:	4620      	mov	r0, r4
 8008df0:	f7ff fab7 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 8008df4:	23bb      	movs	r3, #187	@ 0xbb
 8008df6:	747b      	strb	r3, [r7, #17]
 8008df8:	e7c2      	b.n	8008d80 <VL53L1_preset_mode_histogram_short_range_mm1+0x28>

08008dfa <VL53L1_preset_mode_histogram_short_range_mm2>:
{
 8008dfa:	b530      	push	{r4, r5, lr}
 8008dfc:	b087      	sub	sp, #28
 8008dfe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_short_range_mm1(
 8008e00:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8008e02:	9504      	str	r5, [sp, #16]
 8008e04:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008e06:	9503      	str	r5, [sp, #12]
 8008e08:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008e0a:	9502      	str	r5, [sp, #8]
 8008e0c:	9401      	str	r4, [sp, #4]
 8008e0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008e10:	9500      	str	r5, [sp, #0]
 8008e12:	f7ff ffa1 	bl	8008d58 <VL53L1_preset_mode_histogram_short_range_mm1>
	if (status == VL53L1_ERROR_NONE) {
 8008e16:	b908      	cbnz	r0, 8008e1c <VL53L1_preset_mode_histogram_short_range_mm2+0x22>
		pdynamic->system__sequence_config =
 8008e18:	23db      	movs	r3, #219	@ 0xdb
 8008e1a:	7463      	strb	r3, [r4, #17]
}
 8008e1c:	b007      	add	sp, #28
 8008e1e:	bd30      	pop	{r4, r5, pc}

08008e20 <VL53L1_preset_mode_histogram_xtalk_mm1>:
{
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	b08f      	sub	sp, #60	@ 0x3c
 8008e26:	910c      	str	r1, [sp, #48]	@ 0x30
 8008e28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e2c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008e2e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
		VL53L1_preset_mode_histogram_ranging(
 8008e30:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008e32:	9604      	str	r6, [sp, #16]
 8008e34:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8008e36:	9603      	str	r6, [sp, #12]
 8008e38:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008e3a:	9602      	str	r6, [sp, #8]
 8008e3c:	9501      	str	r5, [sp, #4]
 8008e3e:	9400      	str	r4, [sp, #0]
 8008e40:	f7ff fae1 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008e44:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e46:	b118      	cbz	r0, 8008e50 <VL53L1_preset_mode_histogram_xtalk_mm1+0x30>
}
 8008e48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e4a:	b00f      	add	sp, #60	@ 0x3c
 8008e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_init_histogram_config_structure(
 8008e50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	f04f 0b0c 	mov.w	fp, #12
 8008e58:	f8cd b01c 	str.w	fp, [sp, #28]
 8008e5c:	f04f 0a0b 	mov.w	sl, #11
 8008e60:	f8cd a018 	str.w	sl, [sp, #24]
 8008e64:	f04f 090a 	mov.w	r9, #10
 8008e68:	f8cd 9014 	str.w	r9, [sp, #20]
 8008e6c:	f04f 0809 	mov.w	r8, #9
 8008e70:	f8cd 8010 	str.w	r8, [sp, #16]
 8008e74:	2708      	movs	r7, #8
 8008e76:	9703      	str	r7, [sp, #12]
 8008e78:	260f      	movs	r6, #15
 8008e7a:	9602      	str	r6, [sp, #8]
 8008e7c:	f8cd b004 	str.w	fp, [sp, #4]
 8008e80:	f8cd a000 	str.w	sl, [sp]
 8008e84:	464b      	mov	r3, r9
 8008e86:	4642      	mov	r2, r8
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 face 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8008e90:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008e92:	1c93      	adds	r3, r2, #2
 8008e94:	9308      	str	r3, [sp, #32]
 8008e96:	f8cd b01c 	str.w	fp, [sp, #28]
 8008e9a:	f8cd a018 	str.w	sl, [sp, #24]
 8008e9e:	f8cd 9014 	str.w	r9, [sp, #20]
 8008ea2:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ea6:	9703      	str	r7, [sp, #12]
 8008ea8:	9602      	str	r6, [sp, #8]
 8008eaa:	f8cd b004 	str.w	fp, [sp, #4]
 8008eae:	f8cd a000 	str.w	sl, [sp]
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 fb0d 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008ebe:	9500      	str	r5, [sp, #0]
 8008ec0:	4623      	mov	r3, r4
 8008ec2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008ec8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008eca:	f7ff fa4a 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x09;
 8008ece:	f884 8006 	strb.w	r8, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8008ed2:	f884 8009 	strb.w	r8, [r4, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8008eda:	2221      	movs	r2, #33	@ 0x21
 8008edc:	7062      	strb	r2, [r4, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008ede:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 8008ee0:	70e2      	strb	r2, [r4, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008ee2:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8008ee4:	2229      	movs	r2, #41	@ 0x29
 8008ee6:	7162      	strb	r2, [r4, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008ee8:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 8008eea:	7222      	strb	r2, [r4, #8]
		pgeneral->cal_config__vcsel_start = 0x09;
 8008eec:	f886 8003 	strb.w	r8, [r6, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008ef0:	23f5      	movs	r3, #245	@ 0xf5
 8008ef2:	71f3      	strb	r3, [r6, #7]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8008ef4:	f885 8008 	strb.w	r8, [r5, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 8008ef8:	f885 8009 	strb.w	r8, [r5, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 8008efc:	f885 800a 	strb.w	r8, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 8008f00:	2306      	movs	r3, #6
 8008f02:	72eb      	strb	r3, [r5, #11]
		pdynamic->system__sequence_config =
 8008f04:	23bb      	movs	r3, #187	@ 0xbb
 8008f06:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 8008f08:	2326      	movs	r3, #38	@ 0x26
 8008f0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f0c:	7113      	strb	r3, [r2, #4]
 8008f0e:	e79b      	b.n	8008e48 <VL53L1_preset_mode_histogram_xtalk_mm1+0x28>

08008f10 <VL53L1_preset_mode_histogram_xtalk_mm2>:
{
 8008f10:	b530      	push	{r4, r5, lr}
 8008f12:	b087      	sub	sp, #28
 8008f14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8008f16:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8008f18:	9504      	str	r5, [sp, #16]
 8008f1a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008f1c:	9503      	str	r5, [sp, #12]
 8008f1e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008f20:	9502      	str	r5, [sp, #8]
 8008f22:	9401      	str	r4, [sp, #4]
 8008f24:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008f26:	9500      	str	r5, [sp, #0]
 8008f28:	f7ff ff7a 	bl	8008e20 <VL53L1_preset_mode_histogram_xtalk_mm1>
		pdynamic->system__sequence_config =
 8008f2c:	23db      	movs	r3, #219	@ 0xdb
 8008f2e:	7463      	strb	r3, [r4, #17]
}
 8008f30:	b007      	add	sp, #28
 8008f32:	bd30      	pop	{r4, r5, pc}

08008f34 <VL53L1_preset_mode_histogram_multizone>:
{
 8008f34:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8008f38:	b087      	sub	sp, #28
 8008f3a:	4688      	mov	r8, r1
 8008f3c:	4617      	mov	r7, r2
 8008f3e:	461c      	mov	r4, r3
 8008f40:	9d12      	ldr	r5, [sp, #72]	@ 0x48
		VL53L1_preset_mode_histogram_medium_range(
 8008f42:	9504      	str	r5, [sp, #16]
 8008f44:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008f46:	9603      	str	r6, [sp, #12]
 8008f48:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008f4a:	9602      	str	r6, [sp, #8]
 8008f4c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8008f4e:	9601      	str	r6, [sp, #4]
 8008f50:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8008f52:	9600      	str	r6, [sp, #0]
 8008f54:	f7ff fd30 	bl	80089b8 <VL53L1_preset_mode_histogram_medium_range>
	if (status == VL53L1_ERROR_NONE) {
 8008f58:	4682      	mov	sl, r0
 8008f5a:	b118      	cbz	r0, 8008f64 <VL53L1_preset_mode_histogram_multizone+0x30>
}
 8008f5c:	4650      	mov	r0, sl
 8008f5e:	b007      	add	sp, #28
 8008f60:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
			VL53L1_init_zone_config_structure(
 8008f64:	9504      	str	r5, [sp, #16]
 8008f66:	2307      	movs	r3, #7
 8008f68:	9303      	str	r3, [sp, #12]
 8008f6a:	9302      	str	r3, [sp, #8]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	9201      	str	r2, [sp, #4]
 8008f70:	2108      	movs	r1, #8
 8008f72:	9100      	str	r1, [sp, #0]
 8008f74:	2304      	movs	r3, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f005 fa3b 	bl	800e3f2 <VL53L1_init_zone_config_structure>
			pzone_cfg->active_zones + 1;
 8008f7c:	786b      	ldrb	r3, [r5, #1]
 8008f7e:	3301      	adds	r3, #1
		pgeneral->global_config__stream_divider =
 8008f80:	7063      	strb	r3, [r4, #1]
		if (status == VL53L1_ERROR_NONE) {
 8008f82:	4682      	mov	sl, r0
 8008f84:	b140      	cbz	r0, 8008f98 <VL53L1_preset_mode_histogram_multizone+0x64>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008f86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4641      	mov	r1, r8
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff f9e6 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
 8008f96:	e7e1      	b.n	8008f5c <VL53L1_preset_mode_histogram_multizone+0x28>
			VL53L1_set_histogram_multizone_initial_bin_config(
 8008f98:	1caa      	adds	r2, r5, #2
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f001 fc25 	bl	800a7ec <VL53L1_set_histogram_multizone_initial_bin_config>
 8008fa2:	4682      	mov	sl, r0
 8008fa4:	e7ef      	b.n	8008f86 <VL53L1_preset_mode_histogram_multizone+0x52>

08008fa6 <VL53L1_preset_mode_histogram_multizone_short_range>:
{
 8008fa6:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8008faa:	b087      	sub	sp, #28
 8008fac:	4688      	mov	r8, r1
 8008fae:	4617      	mov	r7, r2
 8008fb0:	461c      	mov	r4, r3
 8008fb2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
		VL53L1_preset_mode_histogram_short_range(
 8008fb4:	9504      	str	r5, [sp, #16]
 8008fb6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008fb8:	9603      	str	r6, [sp, #12]
 8008fba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008fbc:	9602      	str	r6, [sp, #8]
 8008fbe:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8008fc0:	9601      	str	r6, [sp, #4]
 8008fc2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8008fc4:	9600      	str	r6, [sp, #0]
 8008fc6:	f7ff fde4 	bl	8008b92 <VL53L1_preset_mode_histogram_short_range>
	if (status == VL53L1_ERROR_NONE) {
 8008fca:	4682      	mov	sl, r0
 8008fcc:	b118      	cbz	r0, 8008fd6 <VL53L1_preset_mode_histogram_multizone_short_range+0x30>
}
 8008fce:	4650      	mov	r0, sl
 8008fd0:	b007      	add	sp, #28
 8008fd2:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
			VL53L1_init_zone_config_structure(
 8008fd6:	9504      	str	r5, [sp, #16]
 8008fd8:	2307      	movs	r3, #7
 8008fda:	9303      	str	r3, [sp, #12]
 8008fdc:	9302      	str	r3, [sp, #8]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	9201      	str	r2, [sp, #4]
 8008fe2:	2108      	movs	r1, #8
 8008fe4:	9100      	str	r1, [sp, #0]
 8008fe6:	2304      	movs	r3, #4
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f005 fa02 	bl	800e3f2 <VL53L1_init_zone_config_structure>
			pzone_cfg->active_zones + 1;
 8008fee:	786b      	ldrb	r3, [r5, #1]
 8008ff0:	3301      	adds	r3, #1
		pgeneral->global_config__stream_divider =
 8008ff2:	7063      	strb	r3, [r4, #1]
		if (status == VL53L1_ERROR_NONE) {
 8008ff4:	4682      	mov	sl, r0
 8008ff6:	b140      	cbz	r0, 800900a <VL53L1_preset_mode_histogram_multizone_short_range+0x64>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8008ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ffe:	4622      	mov	r2, r4
 8009000:	4641      	mov	r1, r8
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff f9ad 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
 8009008:	e7e1      	b.n	8008fce <VL53L1_preset_mode_histogram_multizone_short_range+0x28>
			VL53L1_set_histogram_multizone_initial_bin_config(
 800900a:	1caa      	adds	r2, r5, #2
 800900c:	4639      	mov	r1, r7
 800900e:	4628      	mov	r0, r5
 8009010:	f001 fbec 	bl	800a7ec <VL53L1_set_histogram_multizone_initial_bin_config>
 8009014:	4682      	mov	sl, r0
 8009016:	e7ef      	b.n	8008ff8 <VL53L1_preset_mode_histogram_multizone_short_range+0x52>

08009018 <VL53L1_preset_mode_histogram_multizone_long_range>:
{
 8009018:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 800901c:	b087      	sub	sp, #28
 800901e:	4688      	mov	r8, r1
 8009020:	4617      	mov	r7, r2
 8009022:	461c      	mov	r4, r3
 8009024:	9d12      	ldr	r5, [sp, #72]	@ 0x48
		VL53L1_preset_mode_histogram_long_range(
 8009026:	9504      	str	r5, [sp, #16]
 8009028:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800902a:	9603      	str	r6, [sp, #12]
 800902c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800902e:	9602      	str	r6, [sp, #8]
 8009030:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8009032:	9601      	str	r6, [sp, #4]
 8009034:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8009036:	9600      	str	r6, [sp, #0]
 8009038:	f7ff fbd0 	bl	80087dc <VL53L1_preset_mode_histogram_long_range>
	if (status == VL53L1_ERROR_NONE) {
 800903c:	4682      	mov	sl, r0
 800903e:	b118      	cbz	r0, 8009048 <VL53L1_preset_mode_histogram_multizone_long_range+0x30>
}
 8009040:	4650      	mov	r0, sl
 8009042:	b007      	add	sp, #28
 8009044:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
			VL53L1_init_zone_config_structure(
 8009048:	9504      	str	r5, [sp, #16]
 800904a:	2307      	movs	r3, #7
 800904c:	9303      	str	r3, [sp, #12]
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	2202      	movs	r2, #2
 8009052:	9201      	str	r2, [sp, #4]
 8009054:	2108      	movs	r1, #8
 8009056:	9100      	str	r1, [sp, #0]
 8009058:	2304      	movs	r3, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f005 f9c9 	bl	800e3f2 <VL53L1_init_zone_config_structure>
			pzone_cfg->active_zones + 1;
 8009060:	786b      	ldrb	r3, [r5, #1]
 8009062:	3301      	adds	r3, #1
		pgeneral->global_config__stream_divider =
 8009064:	7063      	strb	r3, [r4, #1]
		if (status == VL53L1_ERROR_NONE) {
 8009066:	4682      	mov	sl, r0
 8009068:	b140      	cbz	r0, 800907c <VL53L1_preset_mode_histogram_multizone_long_range+0x64>
		VL53L1_copy_hist_cfg_to_static_cfg(
 800906a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009070:	4622      	mov	r2, r4
 8009072:	4641      	mov	r1, r8
 8009074:	4638      	mov	r0, r7
 8009076:	f7ff f974 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
 800907a:	e7e1      	b.n	8009040 <VL53L1_preset_mode_histogram_multizone_long_range+0x28>
			VL53L1_set_histogram_multizone_initial_bin_config(
 800907c:	1caa      	adds	r2, r5, #2
 800907e:	4639      	mov	r1, r7
 8009080:	4628      	mov	r0, r5
 8009082:	f001 fbb3 	bl	800a7ec <VL53L1_set_histogram_multizone_initial_bin_config>
 8009086:	4682      	mov	sl, r0
 8009088:	e7ef      	b.n	800906a <VL53L1_preset_mode_histogram_multizone_long_range+0x52>

0800908a <VL53L1_preset_mode_histogram_xtalk_planar>:
{
 800908a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908e:	b08f      	sub	sp, #60	@ 0x3c
 8009090:	910c      	str	r1, [sp, #48]	@ 0x30
 8009092:	4693      	mov	fp, r2
 8009094:	930b      	str	r3, [sp, #44]	@ 0x2c
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009096:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009098:	9404      	str	r4, [sp, #16]
 800909a:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800909c:	9403      	str	r4, [sp, #12]
 800909e:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80090a0:	9402      	str	r4, [sp, #8]
 80090a2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80090a4:	9401      	str	r4, [sp, #4]
 80090a6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80090a8:	9400      	str	r4, [sp, #0]
 80090aa:	f7ff ffb5 	bl	8009018 <VL53L1_preset_mode_histogram_multizone_long_range>
	if (status == VL53L1_ERROR_NONE) {
 80090ae:	4604      	mov	r4, r0
 80090b0:	b118      	cbz	r0, 80090ba <VL53L1_preset_mode_histogram_xtalk_planar+0x30>
}
 80090b2:	4620      	mov	r0, r4
 80090b4:	b00f      	add	sp, #60	@ 0x3c
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			VL53L1_zone_preset_xtalk_planar(
 80090ba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80090bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80090be:	f005 f9dc 	bl	800e47a <VL53L1_zone_preset_xtalk_planar>
 80090c2:	4604      	mov	r4, r0
		ptiming->range_config__vcsel_period_a = 0x09;
 80090c4:	2309      	movs	r3, #9
 80090c6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80090c8:	7193      	strb	r3, [r2, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 80090ca:	7253      	strb	r3, [r2, #9]
		VL53L1_init_histogram_config_structure(
 80090cc:	f8cd b020 	str.w	fp, [sp, #32]
 80090d0:	f04f 0a04 	mov.w	sl, #4
 80090d4:	f8cd a01c 	str.w	sl, [sp, #28]
 80090d8:	f04f 0903 	mov.w	r9, #3
 80090dc:	f8cd 9018 	str.w	r9, [sp, #24]
 80090e0:	f04f 0802 	mov.w	r8, #2
 80090e4:	f8cd 8014 	str.w	r8, [sp, #20]
 80090e8:	2701      	movs	r7, #1
 80090ea:	9704      	str	r7, [sp, #16]
 80090ec:	2600      	movs	r6, #0
 80090ee:	9603      	str	r6, [sp, #12]
 80090f0:	2507      	movs	r5, #7
 80090f2:	9502      	str	r5, [sp, #8]
 80090f4:	f8cd a004 	str.w	sl, [sp, #4]
 80090f8:	f8cd 9000 	str.w	r9, [sp]
 80090fc:	4643      	mov	r3, r8
 80090fe:	463a      	mov	r2, r7
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	f000 f992 	bl	800942c <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8009108:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800910a:	4443      	add	r3, r8
 800910c:	930d      	str	r3, [sp, #52]	@ 0x34
 800910e:	9308      	str	r3, [sp, #32]
 8009110:	f8cd a01c 	str.w	sl, [sp, #28]
 8009114:	f8cd 9018 	str.w	r9, [sp, #24]
 8009118:	f8cd 8014 	str.w	r8, [sp, #20]
 800911c:	9704      	str	r7, [sp, #16]
 800911e:	9603      	str	r6, [sp, #12]
 8009120:	9502      	str	r5, [sp, #8]
 8009122:	f8cd a004 	str.w	sl, [sp, #4]
 8009126:	f8cd 9000 	str.w	r9, [sp]
 800912a:	4643      	mov	r3, r8
 800912c:	463a      	mov	r2, r7
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	f000 f9d1 	bl	80094d8 <VL53L1_init_histogram_multizone_config_structure>
		if (status == VL53L1_ERROR_NONE) {
 8009136:	b144      	cbz	r4, 800914a <VL53L1_preset_mode_histogram_xtalk_planar+0xc0>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8009138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800913e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009140:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009142:	4658      	mov	r0, fp
 8009144:	f7ff f90d 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
 8009148:	e7b3      	b.n	80090b2 <VL53L1_preset_mode_histogram_xtalk_planar+0x28>
			VL53L1_set_histogram_multizone_initial_bin_config(
 800914a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800914c:	4659      	mov	r1, fp
 800914e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8009150:	f001 fb4c 	bl	800a7ec <VL53L1_set_histogram_multizone_initial_bin_config>
 8009154:	4604      	mov	r4, r0
 8009156:	e7ef      	b.n	8009138 <VL53L1_preset_mode_histogram_xtalk_planar+0xae>

08009158 <VL53L1_copy_hist_bins_to_static_cfg>:


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8009158:	7bc3      	ldrb	r3, [r0, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800915a:	748b      	strb	r3, [r1, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800915c:	7c03      	ldrb	r3, [r0, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800915e:	74cb      	strb	r3, [r1, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8009160:	7c43      	ldrb	r3, [r0, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8009162:	750b      	strb	r3, [r1, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8009164:	7c83      	ldrb	r3, [r0, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8009166:	754b      	strb	r3, [r1, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8009168:	7cc3      	ldrb	r3, [r0, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800916a:	758b      	strb	r3, [r1, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800916c:	7d03      	ldrb	r3, [r0, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800916e:	75cb      	strb	r3, [r1, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8009170:	f890 c007 	ldrb.w	ip, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8009174:	7a03      	ldrb	r3, [r0, #8]
 8009176:	eb03 230c 	add.w	r3, r3, ip, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 800917a:	830b      	strh	r3, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800917c:	7a43      	ldrb	r3, [r0, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800917e:	768b      	strb	r3, [r1, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8009180:	7a83      	ldrb	r3, [r0, #10]
	pstatic->algo__range_min_clip =
 8009182:	76cb      	strb	r3, [r1, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8009184:	7ac3      	ldrb	r3, [r0, #11]
	pstatic->algo__consistency_check__tolerance =
 8009186:	770b      	strb	r3, [r1, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8009188:	7b03      	ldrb	r3, [r0, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800918a:	774b      	strb	r3, [r1, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800918c:	7b43      	ldrb	r3, [r0, #13]
	pstatic->sd_config__reset_stages_msb =
 800918e:	778b      	strb	r3, [r1, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8009190:	7841      	ldrb	r1, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009192:	7883      	ldrb	r3, [r0, #2]
 8009194:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__sigma_thresh =
 8009198:	8153      	strh	r3, [r2, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800919a:	78c1      	ldrb	r1, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800919c:	7903      	ldrb	r3, [r0, #4]
 800919e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80091a2:	8193      	strh	r3, [r2, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80091a4:	7943      	ldrb	r3, [r0, #5]
	ptiming->range_config__valid_phase_low =
 80091a6:	7393      	strb	r3, [r2, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80091a8:	7983      	ldrb	r3, [r0, #6]
	ptiming->range_config__valid_phase_high =
 80091aa:	73d3      	strb	r3, [r2, #15]

	LOG_FUNCTION_END(0);

}
 80091ac:	4770      	bx	lr

080091ae <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80091ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091b2:	b087      	sub	sp, #28
 80091b4:	460f      	mov	r7, r1
 80091b6:	4614      	mov	r4, r2
 80091b8:	4698      	mov	r8, r3
 80091ba:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80091bc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80091be:	9504      	str	r5, [sp, #16]
 80091c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80091c2:	9503      	str	r5, [sp, #12]
 80091c4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80091c6:	9502      	str	r5, [sp, #8]
 80091c8:	9601      	str	r6, [sp, #4]
 80091ca:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80091cc:	9500      	str	r5, [sp, #0]
 80091ce:	f7ff f91a 	bl	8008406 <VL53L1_preset_mode_histogram_ranging>
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80091d2:	4681      	mov	r9, r0
 80091d4:	b118      	cbz	r0, 80091de <VL53L1_preset_mode_histogram_ranging_ref+0x30>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80091d6:	4648      	mov	r0, r9
 80091d8:	b007      	add	sp, #28
 80091da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		phistogram->histogram_config__spad_array_selection = 0x01;
 80091de:	2301      	movs	r3, #1
 80091e0:	7023      	strb	r3, [r4, #0]
		VL53L1_copy_hist_cfg_to_static_cfg(
 80091e2:	9600      	str	r6, [sp, #0]
 80091e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091e6:	4642      	mov	r2, r8
 80091e8:	4639      	mov	r1, r7
 80091ea:	4620      	mov	r0, r4
 80091ec:	f7ff f8b9 	bl	8008362 <VL53L1_copy_hist_cfg_to_static_cfg>
 80091f0:	e7f1      	b.n	80091d6 <VL53L1_preset_mode_histogram_ranging_ref+0x28>

080091f2 <VL53L1_init_version>:
{


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80091f8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80091fc:	2330      	movs	r3, #48	@ 0x30
 80091fe:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8009202:	f44f 533f 	mov.w	r3, #12224	@ 0x2fc0
 8009206:	63c3      	str	r3, [r0, #60]	@ 0x3c
}
 8009208:	4770      	bx	lr

0800920a <VL53L1_init_ll_driver_state>:


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
 800920a:	f880 1044 	strb.w	r1, [r0, #68]	@ 0x44
	pstate->cfg_stream_count  = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8009214:	2202      	movs	r2, #2
 8009216:	f880 2048 	strb.w	r2, [r0, #72]	@ 0x48
	pstate->cfg_timing_status = 0;
 800921a:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
	pstate->cfg_zone_id       = 0;
 800921e:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a

	pstate->rd_device_state   = device_state;
 8009222:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
	pstate->rd_stream_count   = 0;
 8009226:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800922a:	f880 204f 	strb.w	r2, [r0, #79]	@ 0x4f
	pstate->rd_timing_status  = 0;
 800922e:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
	pstate->rd_zone_id        = 0;
 8009232:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51

}
 8009236:	4770      	bx	lr

08009238 <VL53L1_check_ll_driver_rd_state>:
}


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8009238:	b510      	push	{r4, lr}
 800923a:	4603      	mov	r3, r0
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800923c:	f890 23c7 	ldrb.w	r2, [r0, #967]	@ 0x3c7
	device_range_status =
 8009240:	f002 001f 	and.w	r0, r2, #31
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8009244:	f893 e3c9 	ldrb.w	lr, [r3, #969]	@ 0x3c9



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8009248:	f893 13c4 	ldrb.w	r1, [r3, #964]	@ 0x3c4
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800924c:	f893 23c6 	ldrb.w	r2, [r3, #966]	@ 0x3c6
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8009250:	0912      	lsrs	r2, r2, #4
	device_gph_id = (psys_results->result__interrupt_status &
 8009252:	f002 0202 	and.w	r2, r2, #2

	if (histogram_mode)
 8009256:	f011 0402 	ands.w	r4, r1, #2
 800925a:	d004      	beq.n	8009266 <VL53L1_check_ll_driver_rd_state+0x2e>
		device_gph_id = (phist_data->result__interrupt_status &
 800925c:	f893 249c 	ldrb.w	r2, [r3, #1180]	@ 0x49c
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8009260:	0912      	lsrs	r2, r2, #4
		device_gph_id = (phist_data->result__interrupt_status &
 8009262:	f002 0202 	and.w	r2, r2, #2



	if (!((pdev->sys_ctrl.system__mode_start &
 8009266:	f011 0f20 	tst.w	r1, #32
 800926a:	d036      	beq.n	80092da <VL53L1_check_ll_driver_rd_state+0xa2>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800926c:	f893 104b 	ldrb.w	r1, [r3, #75]	@ 0x4b
 8009270:	2906      	cmp	r1, #6
 8009272:	d026      	beq.n	80092c2 <VL53L1_check_ll_driver_rd_state+0x8a>
				status =
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8009274:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8009278:	4571      	cmp	r1, lr
 800927a:	d027      	beq.n	80092cc <VL53L1_check_ll_driver_rd_state+0x94>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800927c:	f06f 0011 	mvn.w	r0, #17


		if (pstate->rd_gph_id != device_gph_id)
 8009280:	f893 104f 	ldrb.w	r1, [r3, #79]	@ 0x4f
 8009284:	4291      	cmp	r1, r2
 8009286:	d001      	beq.n	800928c <VL53L1_check_ll_driver_rd_state+0x54>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8009288:	f06f 0012 	mvn.w	r0, #18




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800928c:	f893 c051 	ldrb.w	ip, [r3, #81]	@ 0x51
		expected_stream_count =
 8009290:	f503 41c0 	add.w	r1, r3, #24576	@ 0x6000
 8009294:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
 8009298:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800929c:	f894 4792 	ldrb.w	r4, [r4, #1938]	@ 0x792
		expected_gph_id =
 80092a0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80092a4:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 80092a8:	f891 1793 	ldrb.w	r1, [r1, #1939]	@ 0x793
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;



		if (expected_stream_count != device_stream_count) {
 80092ac:	45a6      	cmp	lr, r4
 80092ae:	d011      	beq.n	80092d4 <VL53L1_check_ll_driver_rd_state+0x9c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 80092b0:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80092b4:	b963      	cbnz	r3, 80092d0 <VL53L1_check_ll_driver_rd_state+0x98>
 80092b6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80092ba:	d00b      	beq.n	80092d4 <VL53L1_check_ll_driver_rd_state+0x9c>
				(device_stream_count == 255)))
				status =
 80092bc:	f06f 0013 	mvn.w	r0, #19
 80092c0:	e008      	b.n	80092d4 <VL53L1_check_ll_driver_rd_state+0x9c>
		if (histogram_mode == 0) {
 80092c2:	b964      	cbnz	r4, 80092de <VL53L1_check_ll_driver_rd_state+0xa6>
			if (device_range_status !=
 80092c4:	2812      	cmp	r0, #18
 80092c6:	d10c      	bne.n	80092e2 <VL53L1_check_ll_driver_rd_state+0xaa>
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80092c8:	2000      	movs	r0, #0
 80092ca:	e005      	b.n	80092d8 <VL53L1_check_ll_driver_rd_state+0xa0>
 80092cc:	2000      	movs	r0, #0
 80092ce:	e7d7      	b.n	8009280 <VL53L1_check_ll_driver_rd_state+0x48>
				status =
 80092d0:	f06f 0013 	mvn.w	r0, #19

		}



		if (expected_gph_id != device_gph_id)
 80092d4:	428a      	cmp	r2, r1
 80092d6:	d107      	bne.n	80092e8 <VL53L1_check_ll_driver_rd_state+0xb0>


ENDFUNC:
	LOG_FUNCTION_END(status);
	return status;
}
 80092d8:	bd10      	pop	{r4, pc}
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80092da:	2000      	movs	r0, #0
 80092dc:	e7fc      	b.n	80092d8 <VL53L1_check_ll_driver_rd_state+0xa0>
 80092de:	2000      	movs	r0, #0
 80092e0:	e7fa      	b.n	80092d8 <VL53L1_check_ll_driver_rd_state+0xa0>
				status =
 80092e2:	f06f 0010 	mvn.w	r0, #16
 80092e6:	e7f7      	b.n	80092d8 <VL53L1_check_ll_driver_rd_state+0xa0>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80092e8:	f06f 0014 	mvn.w	r0, #20
 80092ec:	e7f4      	b.n	80092d8 <VL53L1_check_ll_driver_rd_state+0xa0>

080092ee <VL53L1_copy_rtn_good_spads_to_buffer>:
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80092ee:	7c03      	ldrb	r3, [r0, #16]
 80092f0:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80092f2:	7c43      	ldrb	r3, [r0, #17]
 80092f4:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80092f6:	7c83      	ldrb	r3, [r0, #18]
 80092f8:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80092fa:	7cc3      	ldrb	r3, [r0, #19]
 80092fc:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80092fe:	7d03      	ldrb	r3, [r0, #20]
 8009300:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8009302:	7d43      	ldrb	r3, [r0, #21]
 8009304:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8009306:	7d83      	ldrb	r3, [r0, #22]
 8009308:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800930a:	7dc3      	ldrb	r3, [r0, #23]
 800930c:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800930e:	7e03      	ldrb	r3, [r0, #24]
 8009310:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8009312:	7e43      	ldrb	r3, [r0, #25]
 8009314:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8009316:	7e83      	ldrb	r3, [r0, #26]
 8009318:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800931a:	7ec3      	ldrb	r3, [r0, #27]
 800931c:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800931e:	7f03      	ldrb	r3, [r0, #28]
 8009320:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8009322:	7f43      	ldrb	r3, [r0, #29]
 8009324:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8009326:	7f83      	ldrb	r3, [r0, #30]
 8009328:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800932a:	7fc3      	ldrb	r3, [r0, #31]
 800932c:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800932e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009332:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8009334:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009338:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800933a:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800933e:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8009340:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8009344:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8009346:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800934a:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800934c:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009350:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8009352:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 8009356:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8009358:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 800935c:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800935e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8009362:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8009364:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8009368:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800936a:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 800936e:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8009370:	f890 302b 	ldrb.w	r3, [r0, #43]	@ 0x2b
 8009374:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8009376:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800937a:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800937c:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8009380:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8009382:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8009386:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8009388:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 800938c:	77cb      	strb	r3, [r1, #31]
}
 800938e:	4770      	bx	lr

08009390 <VL53L1_init_system_results>:
void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{


	pdata->result__interrupt_status                       = 0xFF;
 8009390:	23ff      	movs	r3, #255	@ 0xff
 8009392:	7003      	strb	r3, [r0, #0]
	pdata->result__range_status                           = 0xFF;
 8009394:	7043      	strb	r3, [r0, #1]
	pdata->result__report_status                          = 0xFF;
 8009396:	7083      	strb	r3, [r0, #2]
	pdata->result__stream_count                           = 0xFF;
 8009398:	70c3      	strb	r3, [r0, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800939a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800939e:	8083      	strh	r3, [r0, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 80093a0:	80c3      	strh	r3, [r0, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 80093a2:	8103      	strh	r3, [r0, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 80093a4:	8143      	strh	r3, [r0, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 80093a6:	8183      	strh	r3, [r0, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 80093a8:	81c3      	strh	r3, [r0, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80093aa:	8203      	strh	r3, [r0, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 80093ac:	8243      	strh	r3, [r0, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 80093ae:	8283      	strh	r3, [r0, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 80093b0:	82c3      	strh	r3, [r0, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 80093b2:	8303      	strh	r3, [r0, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 80093b4:	8343      	strh	r3, [r0, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 80093b6:	8383      	strh	r3, [r0, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 80093b8:	83c3      	strh	r3, [r0, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 80093ba:	8403      	strh	r3, [r0, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 80093bc:	8443      	strh	r3, [r0, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 80093be:	8483      	strh	r3, [r0, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 80093c0:	84c3      	strh	r3, [r0, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 80093c2:	8503      	strh	r3, [r0, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 80093c4:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a

}
 80093c8:	4770      	bx	lr

080093ca <V53L1_init_zone_results_structure>:


	uint8_t  z = 0;
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 80093ca:	2310      	movs	r3, #16
 80093cc:	700b      	strb	r3, [r1, #0]
	pdata->active_zones = active_zones;
 80093ce:	7048      	strb	r0, [r1, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 80093d0:	2300      	movs	r3, #0
 80093d2:	e010      	b.n	80093f6 <V53L1_init_zone_results_structure+0x2c>
		pobjects = &(pdata->VL53L1_p_002[z]);
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 80093d4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80093d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80093dc:	2003      	movs	r0, #3
 80093de:	7110      	strb	r0, [r2, #4]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80093e0:	7150      	strb	r0, [r2, #5]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 80093e2:	2004      	movs	r0, #4
 80093e4:	7210      	strb	r0, [r2, #8]
		pobjects->active_objects   = 0;
 80093e6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80093ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80093ee:	2000      	movs	r0, #0
 80093f0:	7250      	strb	r0, [r2, #9]
	for (z = 0; z < pdata->max_zones; z++) {
 80093f2:	3301      	adds	r3, #1
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b0f      	cmp	r3, #15
 80093f8:	d9ec      	bls.n	80093d4 <V53L1_init_zone_results_structure+0xa>
	}
}
 80093fa:	4770      	bx	lr

080093fc <V53L1_init_zone_dss_configs>:
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);

	for (z = 0; z < max_zones; z++) {
 80093fc:	2300      	movs	r3, #0
 80093fe:	e012      	b.n	8009426 <V53L1_init_zone_dss_configs+0x2a>
		pdata->VL53L1_p_002[z].dss_mode =
 8009400:	f500 42c0 	add.w	r2, r0, #24576	@ 0x6000
 8009404:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009408:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800940c:	f04f 0c01 	mov.w	ip, #1
 8009410:	f881 c794 	strb.w	ip, [r1, #1940]	@ 0x794
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 8009414:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009418:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800941c:	2100      	movs	r1, #0
 800941e:	f8a2 1796 	strh.w	r1, [r2, #1942]	@ 0x796
	for (z = 0; z < max_zones; z++) {
 8009422:	4463      	add	r3, ip
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b0f      	cmp	r3, #15
 8009428:	d9ea      	bls.n	8009400 <V53L1_init_zone_dss_configs+0x4>
	}
}
 800942a:	4770      	bx	lr

0800942c <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800942c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009430:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8009434:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8009438:	f89d 8034 	ldrb.w	r8, [sp, #52]	@ 0x34
 800943c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8009440:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8009442:	0109      	lsls	r1, r1, #4
 8009444:	b2c9      	uxtb	r1, r1
 8009446:	4401      	add	r1, r0
 8009448:	b2cd      	uxtb	r5, r1
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800944a:	7065      	strb	r5, [r4, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	b2db      	uxtb	r3, r3
 8009450:	4413      	add	r3, r2
 8009452:	fa5f fe83 	uxtb.w	lr, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8009456:	f884 e002 	strb.w	lr, [r4, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800945a:	f89d c020 	ldrb.w	ip, [sp, #32]
 800945e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8009462:	fa5f fc8c 	uxtb.w	ip, ip
 8009466:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800946a:	449c      	add	ip, r3
 800946c:	fa5f fc8c 	uxtb.w	ip, ip
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8009470:	f884 c003 	strb.w	ip, [r4, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8009474:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8009480:	4413      	add	r3, r2
 8009482:	b2db      	uxtb	r3, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8009484:	7123      	strb	r3, [r4, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8009486:	0139      	lsls	r1, r7, #4
 8009488:	b2c9      	uxtb	r1, r1
 800948a:	4449      	add	r1, r9
 800948c:	b2c9      	uxtb	r1, r1
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800948e:	7161      	strb	r1, [r4, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8009490:	0132      	lsls	r2, r6, #4
 8009492:	b2d2      	uxtb	r2, r2
 8009494:	4442      	add	r2, r8
 8009496:	b2d2      	uxtb	r2, r2
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8009498:	71a2      	strb	r2, [r4, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800949a:	71e5      	strb	r5, [r4, #7]
			pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800949c:	f884 e008 	strb.w	lr, [r4, #8]
			pdata->histogram_config__low_amb_even_bin_2_3;
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 80094a0:	f884 c009 	strb.w	ip, [r4, #9]
			pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 80094a4:	72a3      	strb	r3, [r4, #10]
			pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80094a6:	f884 900b 	strb.w	r9, [r4, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80094aa:	ea4f 1008 	mov.w	r0, r8, lsl #4
 80094ae:	b2c0      	uxtb	r0, r0
 80094b0:	4438      	add	r0, r7
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80094b2:	7320      	strb	r0, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80094b4:	7366      	strb	r6, [r4, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80094b6:	2000      	movs	r0, #0
 80094b8:	73a0      	strb	r0, [r4, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
 80094ba:	73e5      	strb	r5, [r4, #15]
			pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80094bc:	f884 e010 	strb.w	lr, [r4, #16]
			pdata->histogram_config__low_amb_even_bin_2_3;
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80094c0:	f884 c011 	strb.w	ip, [r4, #17]
			pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__high_amb_odd_bin_0_1  =
 80094c4:	74a3      	strb	r3, [r4, #18]
			pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 80094c6:	74e1      	strb	r1, [r4, #19]
			pdata->histogram_config__low_amb_odd_bin_2_3;
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 80094c8:	7522      	strb	r2, [r4, #20]
			pdata->histogram_config__low_amb_odd_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80094ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094ce:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80094d0:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80094d2:	7020      	strb	r0, [r4, #0]

}
 80094d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080094d8 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80094de:	f89d e024 	ldrb.w	lr, [sp, #36]	@ 0x24
 80094e2:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80094e6:	f89d c02c 	ldrb.w	ip, [sp, #44]	@ 0x2c
 80094ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80094ec:	0109      	lsls	r1, r1, #4
 80094ee:	b2c9      	uxtb	r1, r1
 80094f0:	4401      	add	r1, r0
 80094f2:	b2c9      	uxtb	r1, r1
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80094f4:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	441a      	add	r2, r3
 80094fc:	b2d2      	uxtb	r2, r2
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80094fe:	70a2      	strb	r2, [r4, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8009500:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009504:	011b      	lsls	r3, r3, #4
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800950c:	4403      	add	r3, r0
 800950e:	b2db      	uxtb	r3, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8009510:	70e3      	strb	r3, [r4, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8009512:	7121      	strb	r1, [r4, #4]
			pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009514:	7162      	strb	r2, [r4, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009516:	71a3      	strb	r3, [r4, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8009518:	71e1      	strb	r1, [r4, #7]
		pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800951a:	7222      	strb	r2, [r4, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800951c:	7263      	strb	r3, [r4, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800951e:	72a1      	strb	r1, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8009520:	72e6      	strb	r6, [r4, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8009522:	012b      	lsls	r3, r5, #4
 8009524:	b2db      	uxtb	r3, r3
 8009526:	4473      	add	r3, lr
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8009528:	7323      	strb	r3, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800952a:	f884 c00d 	strb.w	ip, [r4, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800952e:	2000      	movs	r0, #0
 8009530:	73a0      	strb	r0, [r4, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8009532:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8009536:	0109      	lsls	r1, r1, #4
 8009538:	b2c9      	uxtb	r1, r1
 800953a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800953e:	4419      	add	r1, r3
 8009540:	b2c9      	uxtb	r1, r1
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8009542:	73e1      	strb	r1, [r4, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8009544:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8009548:	b2d2      	uxtb	r2, r2
 800954a:	4432      	add	r2, r6
 800954c:	b2d2      	uxtb	r2, r2
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800954e:	7422      	strb	r2, [r4, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8009550:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8009554:	b2db      	uxtb	r3, r3
 8009556:	442b      	add	r3, r5
 8009558:	b2db      	uxtb	r3, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800955a:	7463      	strb	r3, [r4, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800955c:	74a1      	strb	r1, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800955e:	74e2      	strb	r2, [r4, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8009560:	7523      	strb	r3, [r4, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8009562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009566:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8009568:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800956a:	7020      	strb	r0, [r4, #0]
}
 800956c:	bd70      	pop	{r4, r5, r6, pc}

0800956e <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800956e:	b410      	push	{r4}



	uint16_t          i = 0;

	pdata->zone_id                   = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	7013      	strb	r3, [r2, #0]
	pdata->time_stamp                = 0;
 8009574:	6053      	str	r3, [r2, #4]

	pdata->VL53L1_p_022                 = 0;
 8009576:	7213      	strb	r3, [r2, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 8009578:	240c      	movs	r4, #12
 800957a:	7254      	strb	r4, [r2, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800957c:	7291      	strb	r1, [r2, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800957e:	8793      	strh	r3, [r2, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8009580:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8009584:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 8009588:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
	pdata->VL53L1_p_019                = 0;
 800958c:	f8a2 3042 	strh.w	r3, [r2, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 8009590:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 8009594:	e008      	b.n	80095a8 <VL53L1_init_xtalk_bin_data_struct+0x3a>
		if (i < VL53L1_p_024)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 8009596:	f103 0c02 	add.w	ip, r3, #2
 800959a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800959e:	2400      	movs	r4, #0
 80095a0:	f8cc 4004 	str.w	r4, [ip, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 80095a4:	3301      	adds	r3, #1
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b0b      	cmp	r3, #11
 80095aa:	d808      	bhi.n	80095be <VL53L1_init_xtalk_bin_data_struct+0x50>
		if (i < VL53L1_p_024)
 80095ac:	428b      	cmp	r3, r1
 80095ae:	d2f2      	bcs.n	8009596 <VL53L1_init_xtalk_bin_data_struct+0x28>
			pdata->bin_data[i] = bin_value;
 80095b0:	f103 0c02 	add.w	ip, r3, #2
 80095b4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80095b8:	f8cc 0004 	str.w	r0, [ip, #4]
 80095bc:	e7f2      	b.n	80095a4 <VL53L1_init_xtalk_bin_data_struct+0x36>
	}
}
 80095be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <VL53L1_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   VL53L1_p_002 = 0;

	VL53L1_p_002 =  ip_value;

	for (i = 0; i < count; i++) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	e008      	b.n	80095da <VL53L1_i2c_encode_uint16_t+0x16>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 80095c8:	eba1 0c03 	sub.w	ip, r1, r3
 80095cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095d0:	f802 000c 	strb.w	r0, [r2, ip]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 80095d4:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 80095d6:	3301      	adds	r3, #1
 80095d8:	b29b      	uxth	r3, r3
 80095da:	428b      	cmp	r3, r1
 80095dc:	d3f4      	bcc.n	80095c8 <VL53L1_i2c_encode_uint16_t+0x4>
	}
}
 80095de:	4770      	bx	lr

080095e0 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80095e0:	4602      	mov	r2, r0


	uint16_t   value = 0x00;
 80095e2:	2000      	movs	r0, #0

	while (count-- > 0)
 80095e4:	e005      	b.n	80095f2 <VL53L1_i2c_decode_uint16_t+0x12>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80095e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ea:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80095ee:	b280      	uxth	r0, r0
	while (count-- > 0)
 80095f0:	461a      	mov	r2, r3
 80095f2:	1e53      	subs	r3, r2, #1
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	d1f5      	bne.n	80095e6 <VL53L1_i2c_decode_uint16_t+0x6>

	return value;
}
 80095fa:	4770      	bx	lr

080095fc <VL53L1_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    VL53L1_p_002 = 0;

	VL53L1_p_002 =  ip_value;

	for (i = 0; i < count; i++) {
 80095fc:	2300      	movs	r3, #0
 80095fe:	e008      	b.n	8009612 <VL53L1_i2c_encode_int16_t+0x16>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 8009600:	eba1 0c03 	sub.w	ip, r1, r3
 8009604:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009608:	f802 000c 	strb.w	r0, [r2, ip]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800960c:	1200      	asrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 800960e:	3301      	adds	r3, #1
 8009610:	b29b      	uxth	r3, r3
 8009612:	428b      	cmp	r3, r1
 8009614:	d3f4      	bcc.n	8009600 <VL53L1_i2c_encode_int16_t+0x4>
	}
}
 8009616:	4770      	bx	lr

08009618 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009618:	4602      	mov	r2, r0


	int16_t    value = 0x00;


	if (*pbuffer >= 0x80)
 800961a:	f991 3000 	ldrsb.w	r3, [r1]
 800961e:	2b00      	cmp	r3, #0
 8009620:	db01      	blt.n	8009626 <VL53L1_i2c_decode_int16_t+0xe>
	int16_t    value = 0x00;
 8009622:	2000      	movs	r0, #0
 8009624:	e008      	b.n	8009638 <VL53L1_i2c_decode_int16_t+0x20>
		value = 0xFFFF;
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	e005      	b.n	8009638 <VL53L1_i2c_decode_int16_t+0x20>

	while (count-- > 0)
		value = (value << 8) | (int16_t)*pbuffer++;
 800962c:	0200      	lsls	r0, r0, #8
 800962e:	b200      	sxth	r0, r0
 8009630:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009634:	4310      	orrs	r0, r2
	while (count-- > 0)
 8009636:	461a      	mov	r2, r3
 8009638:	1e53      	subs	r3, r2, #1
 800963a:	b29b      	uxth	r3, r3
 800963c:	2a00      	cmp	r2, #0
 800963e:	d1f5      	bne.n	800962c <VL53L1_i2c_decode_int16_t+0x14>

	return value;
}
 8009640:	4770      	bx	lr

08009642 <VL53L1_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   VL53L1_p_002 = 0;

	VL53L1_p_002 =  ip_value;

	for (i = 0; i < count; i++) {
 8009642:	2300      	movs	r3, #0
 8009644:	e008      	b.n	8009658 <VL53L1_i2c_encode_uint32_t+0x16>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 8009646:	eba1 0c03 	sub.w	ip, r1, r3
 800964a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800964e:	f802 000c 	strb.w	r0, [r2, ip]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 8009652:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 8009654:	3301      	adds	r3, #1
 8009656:	b29b      	uxth	r3, r3
 8009658:	428b      	cmp	r3, r1
 800965a:	d3f4      	bcc.n	8009646 <VL53L1_i2c_encode_uint32_t+0x4>
	}
}
 800965c:	4770      	bx	lr

0800965e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800965e:	4602      	mov	r2, r0


	uint32_t   value = 0x00;
 8009660:	2000      	movs	r0, #0

	while (count-- > 0)
 8009662:	e004      	b.n	800966e <VL53L1_i2c_decode_uint32_t+0x10>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8009664:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009668:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
	while (count-- > 0)
 800966c:	461a      	mov	r2, r3
 800966e:	1e53      	subs	r3, r2, #1
 8009670:	b29b      	uxth	r3, r3
 8009672:	2a00      	cmp	r2, #0
 8009674:	d1f6      	bne.n	8009664 <VL53L1_i2c_decode_uint32_t+0x6>

	return value;
}
 8009676:	4770      	bx	lr

08009678 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009678:	4602      	mov	r2, r0


	int32_t    value = 0x00;


	if (*pbuffer >= 0x80)
 800967a:	f991 3000 	ldrsb.w	r3, [r1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	db01      	blt.n	8009686 <VL53L1_i2c_decode_int32_t+0xe>
	int32_t    value = 0x00;
 8009682:	2000      	movs	r0, #0
 8009684:	e007      	b.n	8009696 <VL53L1_i2c_decode_int32_t+0x1e>
		value = 0xFFFFFFFF;
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	e004      	b.n	8009696 <VL53L1_i2c_decode_int32_t+0x1e>

	while (count-- > 0)
		value = (value << 8) | (int32_t)*pbuffer++;
 800968c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009690:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
	while (count-- > 0)
 8009694:	461a      	mov	r2, r3
 8009696:	1e53      	subs	r3, r2, #1
 8009698:	b29b      	uxth	r3, r3
 800969a:	2a00      	cmp	r2, #0
 800969c:	d1f6      	bne.n	800968c <VL53L1_i2c_decode_int32_t+0x14>

	return value;
}
 800969e:	4770      	bx	lr

080096a0 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 80096a0:	b508      	push	{r3, lr}
 80096a2:	460a      	mov	r2, r1
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_WrByte(
 80096a4:	2127      	movs	r1, #39	@ 0x27
 80096a6:	f003 fe3b 	bl	800d320 <VL53L1_WrByte>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80096aa:	bd08      	pop	{r3, pc}

080096ac <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80096ac:	b508      	push	{r3, lr}
 80096ae:	460a      	mov	r2, r1


	VL53L1_Error status         = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.firmware__enable = value;
 80096b0:	f880 13c2 	strb.w	r1, [r0, #962]	@ 0x3c2

	status = VL53L1_WrByte(
 80096b4:	2185      	movs	r1, #133	@ 0x85
 80096b6:	f003 fe33 	bl	800d320 <VL53L1_WrByte>
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
}
 80096ba:	bd08      	pop	{r3, pc}

080096bc <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 80096bc:	b508      	push	{r3, lr}

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 80096be:	2101      	movs	r1, #1
 80096c0:	f7ff fff4 	bl	80096ac <VL53L1_set_firmware_enable_register>

	LOG_FUNCTION_END(status);

	return status;
}
 80096c4:	bd08      	pop	{r3, pc}

080096c6 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 80096c6:	b508      	push	{r3, lr}

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 80096c8:	2100      	movs	r1, #0
 80096ca:	f7ff ffef 	bl	80096ac <VL53L1_set_firmware_enable_register>

	LOG_FUNCTION_END(status);

	return status;
}
 80096ce:	bd08      	pop	{r3, pc}

080096d0 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80096d0:	b508      	push	{r3, lr}
 80096d2:	460a      	mov	r2, r1


	VL53L1_Error status       = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80096d4:	f880 13c0 	strb.w	r1, [r0, #960]	@ 0x3c0

	status = VL53L1_WrByte(
 80096d8:	2183      	movs	r1, #131	@ 0x83
 80096da:	f003 fe21 	bl	800d320 <VL53L1_WrByte>
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
}
 80096de:	bd08      	pop	{r3, pc}

080096e0 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 80096e0:	b508      	push	{r3, lr}

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 80096e2:	2101      	movs	r1, #1
 80096e4:	f7ff fff4 	bl	80096d0 <VL53L1_set_powerforce_register>

	LOG_FUNCTION_END(status);

	return status;
}
 80096e8:	bd08      	pop	{r3, pc}

080096ea <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 80096ea:	b508      	push	{r3, lr}

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 80096ec:	2100      	movs	r1, #0
 80096ee:	f7ff ffef 	bl	80096d0 <VL53L1_set_powerforce_register>

	LOG_FUNCTION_END(status);

	return status;
}
 80096f2:	bd08      	pop	{r3, pc}

080096f4 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 80096f4:	b508      	push	{r3, lr}
	VL53L1_Error status       = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 80096f6:	2201      	movs	r2, #1
 80096f8:	f880 23c3 	strb.w	r2, [r0, #963]	@ 0x3c3

	status = VL53L1_WrByte(
 80096fc:	2186      	movs	r1, #134	@ 0x86
 80096fe:	f003 fe0f 	bl	800d320 <VL53L1_WrByte>
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
}
 8009702:	bd08      	pop	{r3, pc}

08009704 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	460d      	mov	r5, r1

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8009708:	f001 fe1e 	bl	800b348 <VL53L1_calc_pll_period_us>
 800970c:	4604      	mov	r4, r0



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800970e:	4628      	mov	r0, r5
 8009710:	f001 ff68 	bl	800b5e4 <VL53L1_decode_vcsel_period>



	macro_period_us =
 8009714:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8009718:	0224      	lsls	r4, r4, #8
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800971a:	09a4      	lsrs	r4, r4, #6

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800971c:	fb04 f000 	mul.w	r0, r4, r0


	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 8009720:	0980      	lsrs	r0, r0, #6
 8009722:	bd38      	pop	{r3, r4, r5, pc}

08009724 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8009724:	b500      	push	{lr}
 8009726:	4694      	mov	ip, r2

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009728:	0100      	lsls	r0, r0, #4
 800972a:	4a18      	ldr	r2, [pc, #96]	@ (800978c <VL53L1_calc_range_ignore_threshold+0x68>)
 800972c:	fb82 e200 	smull	lr, r2, r2, r0
 8009730:	17c0      	asrs	r0, r0, #31
 8009732:	ebc0 10a2 	rsb	r0, r0, r2, asr #6

	if (x_gradient < 0)
 8009736:	2900      	cmp	r1, #0
 8009738:	db1a      	blt.n	8009770 <VL53L1_calc_range_ignore_threshold+0x4c>
	int16_t    x_gradient_int           = 0;
 800973a:	2200      	movs	r2, #0
		x_gradient_int = x_gradient * -1;

	if (y_gradient < 0)
 800973c:	f1bc 0f00 	cmp.w	ip, #0
 8009740:	db19      	blt.n	8009776 <VL53L1_calc_range_ignore_threshold+0x52>
	int16_t    y_gradient_int           = 0;
 8009742:	f04f 0c00 	mov.w	ip, #0





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8009746:	4462      	add	r2, ip
 8009748:	0152      	lsls	r2, r2, #5
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800974a:	4910      	ldr	r1, [pc, #64]	@ (800978c <VL53L1_calc_range_ignore_threshold+0x68>)
 800974c:	fb81 c102 	smull	ip, r1, r1, r2
 8009750:	17d2      	asrs	r2, r2, #31
 8009752:	ebc2 12a1 	rsb	r2, r2, r1, asr #6



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8009756:	4410      	add	r0, r2



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8009758:	fb00 f303 	mul.w	r3, r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800975c:	f113 0010 	adds.w	r0, r3, #16
 8009760:	d40e      	bmi.n	8009780 <VL53L1_calc_range_ignore_threshold+0x5c>
 8009762:	1140      	asrs	r0, r0, #5



	if (range_ignore_thresh_int > 0xFFFF)
 8009764:	4a0a      	ldr	r2, [pc, #40]	@ (8009790 <VL53L1_calc_range_ignore_threshold+0x6c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	dc0c      	bgt.n	8009784 <VL53L1_calc_range_ignore_threshold+0x60>
		range_ignore_thresh_kcps = 0xFFFF;
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800976a:	b280      	uxth	r0, r0


	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
}
 800976c:	f85d fb04 	ldr.w	pc, [sp], #4
		x_gradient_int = x_gradient * -1;
 8009770:	4249      	negs	r1, r1
 8009772:	b20a      	sxth	r2, r1
 8009774:	e7e2      	b.n	800973c <VL53L1_calc_range_ignore_threshold+0x18>
		y_gradient_int = y_gradient * -1;
 8009776:	f1cc 0c00 	rsb	ip, ip, #0
 800977a:	fa0f fc8c 	sxth.w	ip, ip
 800977e:	e7e2      	b.n	8009746 <VL53L1_calc_range_ignore_threshold+0x22>
	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8009780:	301f      	adds	r0, #31
 8009782:	e7ee      	b.n	8009762 <VL53L1_calc_range_ignore_threshold+0x3e>
		range_ignore_thresh_kcps = 0xFFFF;
 8009784:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009788:	e7f0      	b.n	800976c <VL53L1_calc_range_ignore_threshold+0x48>
 800978a:	bf00      	nop
 800978c:	10624dd3 	.word	0x10624dd3
 8009790:	001fffef 	.word	0x001fffef

08009794 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8009794:	4603      	mov	r3, r0

	uint32_t timeout_mclks   = 0;

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8009796:	4608      	mov	r0, r1
 8009798:	b121      	cbz	r1, 80097a4 <VL53L1_calc_timeout_mclks+0x10>
		timeout_mclks = 0;
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800979a:	084a      	lsrs	r2, r1, #1
 800979c:	eb02 3303 	add.w	r3, r2, r3, lsl #12
		timeout_mclks =
 80097a0:	fbb3 f0f1 	udiv	r0, r3, r1
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
}
 80097a4:	4770      	bx	lr

080097a6 <VL53L1_calc_timeout_us>:
	uint32_t timeout_us     = 0;
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80097a6:	fba0 3101 	umull	r3, r1, r0, r1
	tmp += 0x00800;
 80097aa:	f513 6300 	adds.w	r3, r3, #2048	@ 0x800
 80097ae:	f141 0000 	adc.w	r0, r1, #0
	tmp  = tmp >> 12;
 80097b2:	0b1b      	lsrs	r3, r3, #12


	LOG_FUNCTION_END(0);

	return timeout_us;
}
 80097b4:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
 80097b8:	4770      	bx	lr
	...

080097bc <VL53L1_calc_crosstalk_plane_offset_with_margin>:

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;

	if (plane_offset_kcps_temp < 0)
 80097bc:	1808      	adds	r0, r1, r0
 80097be:	d403      	bmi.n	80097c8 <VL53L1_calc_crosstalk_plane_offset_with_margin+0xc>
		plane_offset_kcps_temp = 0;
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80097c0:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 80097c4:	da02      	bge.n	80097cc <VL53L1_calc_crosstalk_plane_offset_with_margin+0x10>
 80097c6:	4770      	bx	lr
		plane_offset_kcps_temp = 0;
 80097c8:	2000      	movs	r0, #0
 80097ca:	4770      	bx	lr
			plane_offset_kcps_temp = 0x3FFFF;
 80097cc:	4800      	ldr	r0, [pc, #0]	@ (80097d0 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x14>)

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;

}
 80097ce:	4770      	bx	lr
 80097d0:	0003ffff 	.word	0x0003ffff

080097d4 <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 80097d4:	b168      	cbz	r0, 80097f2 <VL53L1_encode_timeout+0x1e>
		ls_byte = timeout_mclks - 1;
 80097d6:	3801      	subs	r0, #1
	uint16_t ms_byte = 0;
 80097d8:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80097da:	e002      	b.n	80097e2 <VL53L1_encode_timeout+0xe>
			ls_byte = ls_byte >> 1;
 80097dc:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 80097de:	3301      	adds	r3, #1
 80097e0:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80097e2:	28ff      	cmp	r0, #255	@ 0xff
 80097e4:	d8fa      	bhi.n	80097dc <VL53L1_encode_timeout+0x8>
		}

		encoded_timeout = (ms_byte << 8)
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	fa53 f080 	uxtab	r0, r3, r0
 80097ee:	b280      	uxth	r0, r0
 80097f0:	4770      	bx	lr
	uint16_t encoded_timeout = 0;
 80097f2:	2000      	movs	r0, #0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 80097f4:	4770      	bx	lr

080097f6 <VL53L1_calc_encoded_timeout>:
{
 80097f6:	b508      	push	{r3, lr}
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 80097f8:	f7ff ffcc 	bl	8009794 <VL53L1_calc_timeout_mclks>
		VL53L1_encode_timeout(timeout_mclks);
 80097fc:	f7ff ffea 	bl	80097d4 <VL53L1_encode_timeout>
}
 8009800:	bd08      	pop	{r3, pc}

08009802 <VL53L1_decode_timeout>:
{


	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009802:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009804:	0a00      	lsrs	r0, r0, #8
 8009806:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800980a:	3001      	adds	r0, #1
 800980c:	4770      	bx	lr

0800980e <VL53L1_calc_decoded_timeout_us>:
{
 800980e:	b510      	push	{r4, lr}
 8009810:	460c      	mov	r4, r1
		VL53L1_decode_timeout(timeout_encoded);
 8009812:	f7ff fff6 	bl	8009802 <VL53L1_decode_timeout>
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8009816:	4621      	mov	r1, r4
 8009818:	f7ff ffc5 	bl	80097a6 <VL53L1_calc_timeout_us>
}
 800981c:	bd10      	pop	{r4, pc}

0800981e <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800981e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009822:	9c09      	ldr	r4, [sp, #36]	@ 0x24
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8009824:	b3cb      	cbz	r3, 800989a <VL53L1_calc_timeout_register_values+0x7c>
 8009826:	4681      	mov	r9, r0
 8009828:	460f      	mov	r7, r1
 800982a:	4616      	mov	r6, r2
 800982c:	4698      	mov	r8, r3
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800982e:	79a1      	ldrb	r1, [r4, #6]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ff67 	bl	8009704 <VL53L1_calc_macro_period_us>
 8009836:	4605      	mov	r5, r0
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8009838:	4601      	mov	r1, r0
 800983a:	4648      	mov	r0, r9
 800983c:	f7ff ffaa 	bl	8009794 <VL53L1_calc_timeout_mclks>
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8009840:	28ff      	cmp	r0, #255	@ 0xff
 8009842:	d900      	bls.n	8009846 <VL53L1_calc_timeout_register_values+0x28>
			timeout_mclks = 0xFF;
 8009844:	20ff      	movs	r0, #255	@ 0xff

		pgeneral->phasecal_config__timeout_macrop =
 8009846:	9b08      	ldr	r3, [sp, #32]
 8009848:	71d8      	strb	r0, [r3, #7]
				(uint8_t)timeout_mclks;


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800984a:	4629      	mov	r1, r5
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff ffd2 	bl	80097f6 <VL53L1_calc_encoded_timeout>
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009852:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->mm_config__timeout_macrop_a_hi =
 8009856:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
 8009858:	7060      	strb	r0, [r4, #1]
				(uint8_t) (timeout_encoded & 0x00FF);


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800985a:	4629      	mov	r1, r5
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff ffca 	bl	80097f6 <VL53L1_calc_encoded_timeout>
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009862:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->range_config__timeout_macrop_a_hi =
 8009866:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
 8009868:	7160      	strb	r0, [r4, #5]
				(uint8_t) (timeout_encoded & 0x00FF);


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800986a:	7a61      	ldrb	r1, [r4, #9]
 800986c:	4640      	mov	r0, r8
 800986e:	f7ff ff49 	bl	8009704 <VL53L1_calc_macro_period_us>
 8009872:	4605      	mov	r5, r0
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8009874:	4601      	mov	r1, r0
 8009876:	4638      	mov	r0, r7
 8009878:	f7ff ffbd 	bl	80097f6 <VL53L1_calc_encoded_timeout>
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800987c:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->mm_config__timeout_macrop_b_hi =
 8009880:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
 8009882:	70e0      	strb	r0, [r4, #3]
				(uint8_t) (timeout_encoded & 0x00FF);


		timeout_encoded = VL53L1_calc_encoded_timeout(
 8009884:	4629      	mov	r1, r5
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff ffb5 	bl	80097f6 <VL53L1_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800988c:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->range_config__timeout_macrop_b_hi =
 8009890:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo =
 8009892:	7220      	strb	r0, [r4, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009894:	2000      	movs	r0, #0

	LOG_FUNCTION_END(0);

	return status;

}
 8009896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800989a:	f06f 000e 	mvn.w	r0, #14
 800989e:	e7fa      	b.n	8009896 <VL53L1_calc_timeout_register_values+0x78>

080098a0 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	4604      	mov	r4, r0
	int64_t  tmpo              = 0;

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80098a4:	8840      	ldrh	r0, [r0, #2]
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d045      	beq.n	8009936 <VL53L1_hist_copy_and_scale_ambient_info+0x96>
 80098aa:	460d      	mov	r5, r1
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80098ac:	7863      	ldrb	r3, [r4, #1]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d044      	beq.n	800993c <VL53L1_hist_copy_and_scale_ambient_info+0x9c>
			podata->number_of_ambient_bins == 0) {
 80098b2:	7acb      	ldrb	r3, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d143      	bne.n	8009940 <VL53L1_hist_copy_and_scale_ambient_info+0xa0>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 80098b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80098bc:	f04f 0e00 	mov.w	lr, #0
 80098c0:	3301      	adds	r3, #1
 80098c2:	f14e 0600 	adc.w	r6, lr, #0
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 80098c6:	f8b1 207c 	ldrh.w	r2, [r1, #124]	@ 0x7c
			tmpo   *=
 80098ca:	fba2 c103 	umull	ip, r1, r2, r3
 80098ce:	fb02 1106 	mla	r1, r2, r6, r1

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 80098d2:	68a2      	ldr	r2, [r4, #8]
 80098d4:	3201      	adds	r2, #1
 80098d6:	f14e 0e00 	adc.w	lr, lr, #0
			tmpi   *=
 80098da:	fba0 2302 	umull	r2, r3, r0, r2
 80098de:	fb00 330e 	mla	r3, r0, lr, r3
			(int64_t)pidata->result__dss_actual_effective_spads;

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 80098e2:	68e0      	ldr	r0, [r4, #12]
 80098e4:	ea4f 7ee0 	mov.w	lr, r0, asr #31
			evts  = tmpo *
 80098e8:	fb00 f101 	mul.w	r1, r0, r1
 80098ec:	fb0c 110e 	mla	r1, ip, lr, r1
 80098f0:	fba0 c00c 	umull	ip, r0, r0, ip
 80098f4:	4401      	add	r1, r0
			evts += (tmpi/2);
 80098f6:	0fd8      	lsrs	r0, r3, #31
 80098f8:	1880      	adds	r0, r0, r2
 80098fa:	f143 0e00 	adc.w	lr, r3, #0
 80098fe:	0840      	lsrs	r0, r0, #1
 8009900:	ea40 70ce 	orr.w	r0, r0, lr, lsl #31
 8009904:	eb10 000c 	adds.w	r0, r0, ip
 8009908:	eb41 016e 	adc.w	r1, r1, lr, asr #1


			if (tmpi != 0)
 800990c:	ea52 0603 	orrs.w	r6, r2, r3
 8009910:	d001      	beq.n	8009916 <VL53L1_hist_copy_and_scale_ambient_info+0x76>
				evts = do_division_s(evts, tmpi);
 8009912:	f7f6 fc41 	bl	8000198 <__aeabi_ldivmod>

			podata->ambient_events_sum = (int32_t)evts;
 8009916:	f8c5 00a0 	str.w	r0, [r5, #160]	@ 0xa0



			podata->VL53L1_p_004 =
 800991a:	f8c5 00a4 	str.w	r0, [r5, #164]	@ 0xa4
					podata->ambient_events_sum;
			podata->VL53L1_p_004 +=
				((int32_t)pidata->number_of_ambient_bins / 2);
 800991e:	7863      	ldrb	r3, [r4, #1]
			podata->VL53L1_p_004 +=
 8009920:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009924:	f8c5 00a4 	str.w	r0, [r5, #164]	@ 0xa4
			podata->VL53L1_p_004 /=
				(int32_t)pidata->number_of_ambient_bins;
 8009928:	7863      	ldrb	r3, [r4, #1]
			podata->VL53L1_p_004 /=
 800992a:	fb90 f0f3 	sdiv	r0, r0, r3
 800992e:	f8c5 00a4 	str.w	r0, [r5, #164]	@ 0xa4
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009932:	2000      	movs	r0, #0
 8009934:	e003      	b.n	800993e <VL53L1_hist_copy_and_scale_ambient_info+0x9e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009936:	f06f 000e 	mvn.w	r0, #14
 800993a:	e000      	b.n	800993e <VL53L1_hist_copy_and_scale_ambient_info+0x9e>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800993c:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(0);

	return status;
}
 800993e:	bd70      	pop	{r4, r5, r6, pc}
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009940:	2000      	movs	r0, #0
 8009942:	e7fc      	b.n	800993e <VL53L1_hist_copy_and_scale_ambient_info+0x9e>

08009944 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 8009944:	b410      	push	{r4}
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8009946:	f8b0 335a 	ldrh.w	r3, [r0, #858]	@ 0x35a
	amb_thresh_low  = 1024 *
 800994a:	029b      	lsls	r3, r3, #10
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800994c:	f8b0 235c 	ldrh.w	r2, [r0, #860]	@ 0x35c
	amb_thresh_high = 1024 *
 8009950:	0292      	lsls	r2, r2, #10



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8009952:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8009956:	f01c 0f01 	tst.w	ip, #1
 800995a:	d161      	bne.n	8009a20 <VL53L1_hist_get_bin_sequence_config+0xdc>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800995c:	f890 c34d 	ldrb.w	ip, [r0, #845]	@ 0x34d
		pdata->bin_seq[5] =
 8009960:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009964:	f881 c011 	strb.w	ip, [r1, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8009968:	f890 c34d 	ldrb.w	ip, [r0, #845]	@ 0x34d
 800996c:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[4] =
 8009970:	f881 c010 	strb.w	ip, [r1, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009974:	f890 c34c 	ldrb.w	ip, [r0, #844]	@ 0x34c
		pdata->bin_seq[3] =
 8009978:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800997c:	f881 c00f 	strb.w	ip, [r1, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8009980:	f890 c34c 	ldrb.w	ip, [r0, #844]	@ 0x34c
 8009984:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[2] =
 8009988:	f881 c00e 	strb.w	ip, [r1, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800998c:	f890 c34b 	ldrb.w	ip, [r0, #843]	@ 0x34b
		pdata->bin_seq[1] =
 8009990:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009994:	f881 c00d 	strb.w	ip, [r1, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8009998:	f890 c34b 	ldrb.w	ip, [r0, #843]	@ 0x34b
 800999c:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[0] =
 80099a0:	f881 c00c 	strb.w	ip, [r1, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80099a4:	f8d1 40a0 	ldr.w	r4, [r1, #160]	@ 0xa0
 80099a8:	4294      	cmp	r4, r2
 80099aa:	dd1a      	ble.n	80099e2 <VL53L1_hist_get_bin_sequence_config+0x9e>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80099ac:	f890 2355 	ldrb.w	r2, [r0, #853]	@ 0x355
			pdata->bin_seq[5] =
 80099b0:	0912      	lsrs	r2, r2, #4
 80099b2:	744a      	strb	r2, [r1, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80099b4:	f890 2355 	ldrb.w	r2, [r0, #853]	@ 0x355
			& 0x0F;
 80099b8:	f002 020f 	and.w	r2, r2, #15
			pdata->bin_seq[4] =
 80099bc:	740a      	strb	r2, [r1, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 80099be:	f890 2354 	ldrb.w	r2, [r0, #852]	@ 0x354
			pdata->bin_seq[3] =
 80099c2:	0912      	lsrs	r2, r2, #4
 80099c4:	73ca      	strb	r2, [r1, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 80099c6:	f890 2354 	ldrb.w	r2, [r0, #852]	@ 0x354
			& 0x0F;
 80099ca:	f002 020f 	and.w	r2, r2, #15
			pdata->bin_seq[2] =
 80099ce:	738a      	strb	r2, [r1, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 80099d0:	f890 2353 	ldrb.w	r2, [r0, #851]	@ 0x353
			pdata->bin_seq[1] =
 80099d4:	0912      	lsrs	r2, r2, #4
 80099d6:	734a      	strb	r2, [r1, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 80099d8:	f890 2353 	ldrb.w	r2, [r0, #851]	@ 0x353
			& 0x0F;
 80099dc:	f002 020f 	and.w	r2, r2, #15
			pdata->bin_seq[0] =
 80099e0:	730a      	strb	r2, [r1, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 80099e2:	429c      	cmp	r4, r3
 80099e4:	da1a      	bge.n	8009a1c <VL53L1_hist_get_bin_sequence_config+0xd8>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 80099e6:	f890 3347 	ldrb.w	r3, [r0, #839]	@ 0x347
			pdata->bin_seq[5] =
 80099ea:	091b      	lsrs	r3, r3, #4
 80099ec:	744b      	strb	r3, [r1, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 80099ee:	f890 3347 	ldrb.w	r3, [r0, #839]	@ 0x347
			& 0x0F;
 80099f2:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 80099f6:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 80099f8:	f890 3346 	ldrb.w	r3, [r0, #838]	@ 0x346
			pdata->bin_seq[3] =
 80099fc:	091b      	lsrs	r3, r3, #4
 80099fe:	73cb      	strb	r3, [r1, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009a00:	f890 3346 	ldrb.w	r3, [r0, #838]	@ 0x346
			& 0x0F;
 8009a04:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8009a08:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009a0a:	f890 3345 	ldrb.w	r3, [r0, #837]	@ 0x345
			pdata->bin_seq[1] =
 8009a0e:	091b      	lsrs	r3, r3, #4
 8009a10:	734b      	strb	r3, [r1, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009a12:	f890 3345 	ldrb.w	r3, [r0, #837]	@ 0x345
			& 0x0F;
 8009a16:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[0] =
 8009a1a:	730b      	strb	r3, [r1, #12]
{
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e065      	b.n	8009aec <VL53L1_hist_get_bin_sequence_config+0x1a8>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8009a20:	f890 c351 	ldrb.w	ip, [r0, #849]	@ 0x351
			& 0x0F;
 8009a24:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[5] =
 8009a28:	f881 c011 	strb.w	ip, [r1, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009a2c:	f890 c350 	ldrb.w	ip, [r0, #848]	@ 0x350
			& 0x0F;
 8009a30:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[4] =
 8009a34:	f881 c010 	strb.w	ip, [r1, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009a38:	f890 c350 	ldrb.w	ip, [r0, #848]	@ 0x350
		pdata->bin_seq[3] =
 8009a3c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009a40:	f881 c00f 	strb.w	ip, [r1, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8009a44:	f890 c34f 	ldrb.w	ip, [r0, #847]	@ 0x34f
 8009a48:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[2] =
 8009a4c:	f881 c00e 	strb.w	ip, [r1, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009a50:	f890 c34e 	ldrb.w	ip, [r0, #846]	@ 0x34e
		pdata->bin_seq[1] =
 8009a54:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009a58:	f881 c00d 	strb.w	ip, [r1, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009a5c:	f890 c34e 	ldrb.w	ip, [r0, #846]	@ 0x34e
			& 0x0F;
 8009a60:	f00c 0c0f 	and.w	ip, ip, #15
		pdata->bin_seq[0] =
 8009a64:	f881 c00c 	strb.w	ip, [r1, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8009a68:	f8d1 40a0 	ldr.w	r4, [r1, #160]	@ 0xa0
 8009a6c:	4294      	cmp	r4, r2
 8009a6e:	dd1a      	ble.n	8009aa6 <VL53L1_hist_get_bin_sequence_config+0x162>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009a70:	f890 2358 	ldrb.w	r2, [r0, #856]	@ 0x358
			pdata->bin_seq[5] =
 8009a74:	0912      	lsrs	r2, r2, #4
 8009a76:	744a      	strb	r2, [r1, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009a78:	f890 2358 	ldrb.w	r2, [r0, #856]	@ 0x358
			& 0x0F;
 8009a7c:	f002 020f 	and.w	r2, r2, #15
			pdata->bin_seq[4] =
 8009a80:	740a      	strb	r2, [r1, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009a82:	f890 2357 	ldrb.w	r2, [r0, #855]	@ 0x357
			pdata->bin_seq[3] =
 8009a86:	0912      	lsrs	r2, r2, #4
 8009a88:	73ca      	strb	r2, [r1, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009a8a:	f890 2357 	ldrb.w	r2, [r0, #855]	@ 0x357
			& 0x0F;
 8009a8e:	f002 020f 	and.w	r2, r2, #15
			pdata->bin_seq[2] =
 8009a92:	738a      	strb	r2, [r1, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009a94:	f890 2356 	ldrb.w	r2, [r0, #854]	@ 0x356
			pdata->bin_seq[1] =
 8009a98:	0912      	lsrs	r2, r2, #4
 8009a9a:	734a      	strb	r2, [r1, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009a9c:	f890 2356 	ldrb.w	r2, [r0, #854]	@ 0x356
			& 0x0F;
 8009aa0:	f002 020f 	and.w	r2, r2, #15
			pdata->bin_seq[0] =
 8009aa4:	730a      	strb	r2, [r1, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009aa6:	429c      	cmp	r4, r3
 8009aa8:	dab8      	bge.n	8009a1c <VL53L1_hist_get_bin_sequence_config+0xd8>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009aaa:	f890 334a 	ldrb.w	r3, [r0, #842]	@ 0x34a
			pdata->bin_seq[5] =
 8009aae:	091b      	lsrs	r3, r3, #4
 8009ab0:	744b      	strb	r3, [r1, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009ab2:	f890 334a 	ldrb.w	r3, [r0, #842]	@ 0x34a
			& 0x0F;
 8009ab6:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 8009aba:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009abc:	f890 3349 	ldrb.w	r3, [r0, #841]	@ 0x349
			pdata->bin_seq[3] =
 8009ac0:	091b      	lsrs	r3, r3, #4
 8009ac2:	73cb      	strb	r3, [r1, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009ac4:	f890 3349 	ldrb.w	r3, [r0, #841]	@ 0x349
			& 0x0F;
 8009ac8:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8009acc:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009ace:	f890 3348 	ldrb.w	r3, [r0, #840]	@ 0x348
			pdata->bin_seq[1] =
 8009ad2:	091b      	lsrs	r3, r3, #4
 8009ad4:	734b      	strb	r3, [r1, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009ad6:	f890 3348 	ldrb.w	r3, [r0, #840]	@ 0x348
			& 0x0F;
 8009ada:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[0] =
 8009ade:	730b      	strb	r3, [r1, #12]
 8009ae0:	e79c      	b.n	8009a1c <VL53L1_hist_get_bin_sequence_config+0xd8>
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 8009ae2:	18ca      	adds	r2, r1, r3
 8009ae4:	2001      	movs	r0, #1
 8009ae6:	7490      	strb	r0, [r2, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009ae8:	4403      	add	r3, r0
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b05      	cmp	r3, #5
 8009aee:	d9f8      	bls.n	8009ae2 <VL53L1_hist_get_bin_sequence_config+0x19e>

	LOG_FUNCTION_END(0);

}
 8009af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 8009af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	b083      	sub	sp, #12
 8009afc:	9101      	str	r1, [sp, #4]
 8009afe:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8009b00:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
	int32_t   p_signal_events        = 0;
	uint32_t  noise_sq_sum           = 0;



	if (event_sigma == 0) {
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f000 80aa 	beq.w	8009c5c <VL53L1_hist_events_consistency_check+0x166>
 8009b08:	461d      	mov	r5, r3
 8009b0a:	4680      	mov	r8, r0
		return status;
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009b0c:	6891      	ldr	r1, [r2, #8]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	3101      	adds	r1, #1
 8009b12:	f143 0000 	adc.w	r0, r3, #0
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009b16:	8852      	ldrh	r2, [r2, #2]
 8009b18:	fba2 4101 	umull	r4, r1, r2, r1
 8009b1c:	fb02 1100 	mla	r1, r2, r0, r1



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	3201      	adds	r2, #1
 8009b24:	f143 0000 	adc.w	r0, r3, #0
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 8009b28:	f8b7 c016 	ldrh.w	ip, [r7, #22]
 8009b2c:	fbac 2302 	umull	r2, r3, ip, r2
 8009b30:	fb0c 3300 	mla	r3, ip, r0, r3



	events_scaler  = tmpp * 4096;
 8009b34:	0309      	lsls	r1, r1, #12
 8009b36:	ea41 5114 	orr.w	r1, r1, r4, lsr #20
 8009b3a:	0324      	lsls	r4, r4, #12
	events_scaler += (tmpc/2);
 8009b3c:	0fd8      	lsrs	r0, r3, #31
 8009b3e:	1880      	adds	r0, r0, r2
 8009b40:	f143 0c00 	adc.w	ip, r3, #0
 8009b44:	0840      	lsrs	r0, r0, #1
 8009b46:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 8009b4a:	1900      	adds	r0, r0, r4
 8009b4c:	eb41 016c 	adc.w	r1, r1, ip, asr #1
	if (tmpc != 0)
 8009b50:	ea52 0403 	orrs.w	r4, r2, r3
 8009b54:	d001      	beq.n	8009b5a <VL53L1_hist_events_consistency_check+0x64>
		events_scaler = do_division_s(events_scaler, tmpc);
 8009b56:	f7f6 fb1f 	bl	8000198 <__aeabi_ldivmod>

	events_scaler_sq  = events_scaler * events_scaler;
 8009b5a:	fb00 f201 	mul.w	r2, r0, r1
 8009b5e:	fba0 c300 	umull	ip, r3, r0, r0
	events_scaler_sq += 2048;
 8009b62:	f51c 6c00 	adds.w	ip, ip, #2048	@ 0x800
 8009b66:	eb43 0342 	adc.w	r3, r3, r2, lsl #1
	events_scaler_sq /= 4096;
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	db79      	blt.n	8009c64 <VL53L1_hist_events_consistency_check+0x16e>
 8009b70:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 8009b74:	ea4f 3e22 	mov.w	lr, r2, asr #12
 8009b78:	ea4c 5c02 	orr.w	ip, ip, r2, lsl #20



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 8009b7c:	f8d7 a028 	ldr.w	sl, [r7, #40]	@ 0x28
 8009b80:	4653      	mov	r3, sl
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 8009b82:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8009b86:	464a      	mov	r2, r9
 8009b88:	ebba 0409 	subs.w	r4, sl, r9
 8009b8c:	eb6b 0b0b 	sbc.w	fp, fp, fp
	c_signal_events *= (int64_t)events_scaler;
 8009b90:	fb00 fb0b 	mul.w	fp, r0, fp
 8009b94:	fb04 bb01 	mla	fp, r4, r1, fp
 8009b98:	fba0 0104 	umull	r0, r1, r0, r4
	c_signal_events += 2048;
 8009b9c:	f510 6000 	adds.w	r0, r0, #2048	@ 0x800
 8009ba0:	eb4b 0401 	adc.w	r4, fp, r1
	c_signal_events /= 4096;
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	db63      	blt.n	8009c72 <VL53L1_hist_events_consistency_check+0x17c>
 8009baa:	0b00      	lsrs	r0, r0, #12
 8009bac:	ea40 5401 	orr.w	r4, r0, r1, lsl #20

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 8009bb0:	fbac 1303 	umull	r1, r3, ip, r3
 8009bb4:	fb0a 330e 	mla	r3, sl, lr, r3
	c_sig_noise_sq += 2048;
 8009bb8:	f511 6100 	adds.w	r1, r1, #2048	@ 0x800
 8009bbc:	f143 0300 	adc.w	r3, r3, #0
	c_sig_noise_sq /= 4096;
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	db5c      	blt.n	8009c80 <VL53L1_hist_events_consistency_check+0x18a>
 8009bc6:	0b09      	lsrs	r1, r1, #12
 8009bc8:	ea41 5100 	orr.w	r1, r1, r0, lsl #20

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 8009bcc:	fba2 2c0c 	umull	r2, ip, r2, ip
 8009bd0:	fb09 cc0e 	mla	ip, r9, lr, ip
	c_amb_noise_sq += 2048;
 8009bd4:	f512 6200 	adds.w	r2, r2, #2048	@ 0x800
 8009bd8:	f14c 0c00 	adc.w	ip, ip, #0
	c_amb_noise_sq /= 4096;
 8009bdc:	4663      	mov	r3, ip
 8009bde:	f1bc 0f00 	cmp.w	ip, #0
 8009be2:	db54      	blt.n	8009c8e <VL53L1_hist_events_consistency_check+0x198>
 8009be4:	0b12      	lsrs	r2, r2, #12
 8009be6:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
 8009bea:	131b      	asrs	r3, r3, #12


	c_amb_noise_sq += 2;
 8009bec:	3202      	adds	r2, #2
 8009bee:	f143 0300 	adc.w	r3, r3, #0
	c_amb_noise_sq /= 4;
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db50      	blt.n	8009c9a <VL53L1_hist_events_consistency_check+0x1a4>
 8009bf8:	0892      	lsrs	r2, r2, #2
 8009bfa:	ea42 7280 	orr.w	r2, r2, r0, lsl #30



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 8009bfe:	682b      	ldr	r3, [r5, #0]


	p_amb_noise_sq += 2;
 8009c00:	3302      	adds	r3, #2
 8009c02:	bf2c      	ite	cs
 8009c04:	2001      	movcs	r0, #1
 8009c06:	2000      	movcc	r0, #0
	p_amb_noise_sq /= 4;
 8009c08:	089b      	lsrs	r3, r3, #2
 8009c0a:	ea43 7380 	orr.w	r3, r3, r0, lsl #30

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 8009c0e:	6868      	ldr	r0, [r5, #4]
 8009c10:	4408      	add	r0, r1
		(uint32_t)c_sig_noise_sq +
 8009c12:	4418      	add	r0, r3
	noise_sq_sum =
 8009c14:	4410      	add	r0, r2
		(uint32_t)p_amb_noise_sq +
		(uint32_t)c_amb_noise_sq;

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 8009c16:	0100      	lsls	r0, r0, #4
 8009c18:	f001 fbe7 	bl	800b3ea <VL53L1_isqrt>
	*pevents_tolerance =
 8009c1c:	6030      	str	r0, [r6, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009c1e:	fb08 f000 	mul.w	r0, r8, r0
 8009c22:	6030      	str	r0, [r6, #0]
	*pevents_tolerance += 32;
 8009c24:	3020      	adds	r0, #32
 8009c26:	6030      	str	r0, [r6, #0]
	*pevents_tolerance /= 64;
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	db39      	blt.n	8009ca2 <VL53L1_hist_events_consistency_check+0x1ac>
 8009c2e:	119b      	asrs	r3, r3, #6
 8009c30:	6033      	str	r3, [r6, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 8009c32:	686b      	ldr	r3, [r5, #4]
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 8009c34:	682a      	ldr	r2, [r5, #0]
 8009c36:	1a9b      	subs	r3, r3, r2

	if ((int32_t)c_signal_events > p_signal_events)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	dd35      	ble.n	8009ca8 <VL53L1_hist_events_consistency_check+0x1b2>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8009c3c:	1ae3      	subs	r3, r4, r3
		*pevents_delta =
 8009c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c40:	6013      	str	r3, [r2, #0]
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;

	if (*pevents_delta > *pevents_tolerance &&
 8009c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	6833      	ldr	r3, [r6, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	dd31      	ble.n	8009cb0 <VL53L1_hist_events_consistency_check+0x1ba>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 8009c4c:	8afb      	ldrh	r3, [r7, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009c4e:	9a01      	ldr	r2, [sp, #4]
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d92d      	bls.n	8009cb0 <VL53L1_hist_events_consistency_check+0x1ba>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 8009c54:	2314      	movs	r3, #20
 8009c56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c58:	7013      	strb	r3, [r2, #0]
 8009c5a:	e02c      	b.n	8009cb6 <VL53L1_hist_events_consistency_check+0x1c0>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 8009c5c:	2309      	movs	r3, #9
 8009c5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c60:	7013      	strb	r3, [r2, #0]
		return status;
 8009c62:	e028      	b.n	8009cb6 <VL53L1_hist_events_consistency_check+0x1c0>
	events_scaler_sq /= 4096;
 8009c64:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8009c68:	eb1c 0c02 	adds.w	ip, ip, r2
 8009c6c:	f143 0200 	adc.w	r2, r3, #0
 8009c70:	e77e      	b.n	8009b70 <VL53L1_hist_events_consistency_check+0x7a>
	c_signal_events /= 4096;
 8009c72:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009c76:	1841      	adds	r1, r0, r1
 8009c78:	4608      	mov	r0, r1
 8009c7a:	f144 0100 	adc.w	r1, r4, #0
 8009c7e:	e794      	b.n	8009baa <VL53L1_hist_events_consistency_check+0xb4>
	c_sig_noise_sq /= 4096;
 8009c80:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8009c84:	1808      	adds	r0, r1, r0
 8009c86:	4601      	mov	r1, r0
 8009c88:	f143 0000 	adc.w	r0, r3, #0
 8009c8c:	e79b      	b.n	8009bc6 <VL53L1_hist_events_consistency_check+0xd0>
	c_amb_noise_sq /= 4096;
 8009c8e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009c92:	18d2      	adds	r2, r2, r3
 8009c94:	f14c 0300 	adc.w	r3, ip, #0
 8009c98:	e7a4      	b.n	8009be4 <VL53L1_hist_events_consistency_check+0xee>
	c_amb_noise_sq /= 4;
 8009c9a:	3203      	adds	r2, #3
 8009c9c:	f143 0000 	adc.w	r0, r3, #0
 8009ca0:	e7aa      	b.n	8009bf8 <VL53L1_hist_events_consistency_check+0x102>
	*pevents_tolerance /= 64;
 8009ca2:	f100 033f 	add.w	r3, r0, #63	@ 0x3f
 8009ca6:	e7c2      	b.n	8009c2e <VL53L1_hist_events_consistency_check+0x138>
			p_signal_events - (int32_t)c_signal_events;
 8009ca8:	1b1b      	subs	r3, r3, r4
		*pevents_delta =
 8009caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	e7c8      	b.n	8009c42 <VL53L1_hist_events_consistency_check+0x14c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 8009cb0:	2309      	movs	r3, #9
 8009cb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009cb4:	7013      	strb	r3, [r2, #0]




	return status;
}
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	b003      	add	sp, #12
 8009cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cbe <VL53L1_hist_merged_pulse_check>:


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
	int16_t       delta_mm = 0;

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009cbe:	f9b1 c048 	ldrsh.w	ip, [r1, #72]	@ 0x48
 8009cc2:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	@ 0x44
 8009cc6:	459c      	cmp	ip, r3
 8009cc8:	dd0d      	ble.n	8009ce6 <VL53L1_hist_merged_pulse_check+0x28>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009cca:	fa1f fc8c 	uxth.w	ip, ip
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	ebac 0c03 	sub.w	ip, ip, r3
		delta_mm =
 8009cd4:	fa0f f38c 	sxth.w	r3, ip
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;

	if (min_max_tolerance_mm > 0 &&
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	dd0b      	ble.n	8009cf4 <VL53L1_hist_merged_pulse_check+0x36>
 8009cdc:	4283      	cmp	r3, r0
 8009cde:	dd09      	ble.n	8009cf4 <VL53L1_hist_merged_pulse_check+0x36>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009ce0:	2316      	movs	r3, #22
 8009ce2:	7013      	strb	r3, [r2, #0]
 8009ce4:	e008      	b.n	8009cf8 <VL53L1_hist_merged_pulse_check+0x3a>
			pdata->min_range_mm - pdata->max_range_mm;
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	fa1f fc8c 	uxth.w	ip, ip
 8009cec:	eba3 030c 	sub.w	r3, r3, ip
		delta_mm =
 8009cf0:	b21b      	sxth	r3, r3
 8009cf2:	e7f1      	b.n	8009cd8 <VL53L1_hist_merged_pulse_check+0x1a>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 8009cf4:	2309      	movs	r3, #9
 8009cf6:	7013      	strb	r3, [r2, #0]

	return status;
}
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	4770      	bx	lr

08009cfc <VL53L1_hist_phase_consistency_check>:
{
 8009cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	b08d      	sub	sp, #52	@ 0x34
 8009d02:	9105      	str	r1, [sp, #20]
 8009d04:	461e      	mov	r6, r3
	int32_t   events_delta     = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	930b      	str	r3, [sp, #44]	@ 0x2c
	int32_t   events_tolerance = 0;
 8009d0a:	930a      	str	r3, [sp, #40]	@ 0x28
	VL53L1_DeviceError  range_status = 0;
 8009d0c:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	event_sigma =
 8009d10:	f890 9297 	ldrb.w	r9, [r0, #663]	@ 0x297
	event_min_spad_count =
 8009d14:	f8b0 1298 	ldrh.w	r1, [r0, #664]	@ 0x298
	min_max_tolerance =
 8009d18:	f8b0 e29a 	ldrh.w	lr, [r0, #666]	@ 0x29a
	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009d1c:	f890 8296 	ldrb.w	r8, [r0, #662]	@ 0x296
	if (prange_prev->rd_device_state !=
 8009d20:	7853      	ldrb	r3, [r2, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 8009d22:	3b07      	subs	r3, #7
 8009d24:	b2db      	uxtb	r3, r3
	if (prange_prev->rd_device_state !=
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	f200 8085 	bhi.w	8009e36 <VL53L1_hist_phase_consistency_check+0x13a>
 8009d2c:	4615      	mov	r5, r2
 8009d2e:	ea4f 2808 	mov.w	r8, r8, lsl #8
	if (phase_tolerance == 0)
 8009d32:	f1b8 0f00 	cmp.w	r8, #0
 8009d36:	f000 8083 	beq.w	8009e40 <VL53L1_hist_phase_consistency_check+0x144>
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009d3a:	f04f 0b00 	mov.w	fp, #0
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d3e:	465a      	mov	r2, fp
 8009d40:	46da      	mov	sl, fp
 8009d42:	468b      	mov	fp, r1
 8009d44:	f8cd e01c 	str.w	lr, [sp, #28]
 8009d48:	e05b      	b.n	8009e02 <VL53L1_hist_phase_consistency_check+0x106>
			prange_curr->VL53L1_p_002[lc].range_status =
 8009d4a:	234c      	movs	r3, #76	@ 0x4c
 8009d4c:	fb03 6307 	mla	r3, r3, r7, r6
 8009d50:	2107      	movs	r1, #7
 8009d52:	f883 105e 	strb.w	r1, [r3, #94]	@ 0x5e
 8009d56:	e06a      	b.n	8009e2e <VL53L1_hist_phase_consistency_check+0x132>
				phase_delta =
 8009d58:	eba1 010c 	sub.w	r1, r1, ip
 8009d5c:	b289      	uxth	r1, r1
 8009d5e:	e01c      	b.n	8009d9a <VL53L1_hist_phase_consistency_check+0x9e>
				prange_curr->VL53L1_p_002[lc].range_status =
 8009d60:	234c      	movs	r3, #76	@ 0x4c
 8009d62:	fb03 6307 	mla	r3, r3, r7, r6
 8009d66:	f89d 1027 	ldrb.w	r1, [sp, #39]	@ 0x27
 8009d6a:	f883 105e 	strb.w	r1, [r3, #94]	@ 0x5e
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009d6e:	3401      	adds	r4, #1
 8009d70:	b2e4      	uxtb	r4, r4
 8009d72:	796b      	ldrb	r3, [r5, #5]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	d93e      	bls.n	8009df6 <VL53L1_hist_phase_consistency_check+0xfa>
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 8009d78:	234c      	movs	r3, #76	@ 0x4c
 8009d7a:	fb03 6307 	mla	r3, r3, r7, r6
 8009d7e:	f8b3 c054 	ldrh.w	ip, [r3, #84]	@ 0x54
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 8009d82:	4623      	mov	r3, r4
 8009d84:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009d88:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009d8c:	8a09      	ldrh	r1, [r1, #16]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 8009d8e:	458c      	cmp	ip, r1
 8009d90:	d9e2      	bls.n	8009d58 <VL53L1_hist_phase_consistency_check+0x5c>
				phase_delta =
 8009d92:	ebac 0c01 	sub.w	ip, ip, r1
 8009d96:	fa1f f18c 	uxth.w	r1, ip
			if (phase_delta < phase_tolerance) {
 8009d9a:	4541      	cmp	r1, r8
 8009d9c:	d2e7      	bcs.n	8009d6e <VL53L1_hist_phase_consistency_check+0x72>
				if (status == VL53L1_ERROR_NONE)
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	d1de      	bne.n	8009d60 <VL53L1_hist_phase_consistency_check+0x64>
					VL53L1_hist_events_consistency_check(
 8009da2:	224c      	movs	r2, #76	@ 0x4c
 8009da4:	fb07 f202 	mul.w	r2, r7, r2
 8009da8:	3210      	adds	r2, #16
 8009daa:	4432      	add	r2, r6
 8009dac:	f102 0a04 	add.w	sl, r2, #4
 8009db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	3308      	adds	r3, #8
 8009db8:	f10d 0227 	add.w	r2, sp, #39	@ 0x27
 8009dbc:	9203      	str	r2, [sp, #12]
 8009dbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009dc0:	9202      	str	r2, [sp, #8]
 8009dc2:	aa0a      	add	r2, sp, #40	@ 0x28
 8009dc4:	9201      	str	r2, [sp, #4]
 8009dc6:	f8cd a000 	str.w	sl, [sp]
 8009dca:	442b      	add	r3, r5
 8009dcc:	9a05      	ldr	r2, [sp, #20]
 8009dce:	4659      	mov	r1, fp
 8009dd0:	4648      	mov	r0, r9
 8009dd2:	f7ff fe90 	bl	8009af6 <VL53L1_hist_events_consistency_check>
				if (status == VL53L1_ERROR_NONE &&
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d1c1      	bne.n	8009d60 <VL53L1_hist_phase_consistency_check+0x64>
					range_status ==
 8009ddc:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
				if (status == VL53L1_ERROR_NONE &&
 8009de0:	2b09      	cmp	r3, #9
 8009de2:	d1bd      	bne.n	8009d60 <VL53L1_hist_phase_consistency_check+0x64>
					VL53L1_hist_merged_pulse_check(
 8009de4:	f10d 0227 	add.w	r2, sp, #39	@ 0x27
 8009de8:	4651      	mov	r1, sl
 8009dea:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8009dee:	f7ff ff66 	bl	8009cbe <VL53L1_hist_merged_pulse_check>
 8009df2:	4602      	mov	r2, r0
 8009df4:	e7b4      	b.n	8009d60 <VL53L1_hist_phase_consistency_check+0x64>
 8009df6:	f8dd a018 	ldr.w	sl, [sp, #24]
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009dfa:	f10a 0a01 	add.w	sl, sl, #1
 8009dfe:	fa5f fa8a 	uxtb.w	sl, sl
 8009e02:	7cb3      	ldrb	r3, [r6, #18]
 8009e04:	4553      	cmp	r3, sl
 8009e06:	d917      	bls.n	8009e38 <VL53L1_hist_phase_consistency_check+0x13c>
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 8009e08:	4657      	mov	r7, sl
 8009e0a:	234c      	movs	r3, #76	@ 0x4c
 8009e0c:	fb03 630a 	mla	r3, r3, sl, r6
 8009e10:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8009e14:	2b09      	cmp	r3, #9
 8009e16:	d001      	beq.n	8009e1c <VL53L1_hist_phase_consistency_check+0x120>
 8009e18:	2b13      	cmp	r3, #19
 8009e1a:	d1ee      	bne.n	8009dfa <VL53L1_hist_phase_consistency_check+0xfe>
		if (prange_prev->active_objects == 0)
 8009e1c:	796b      	ldrb	r3, [r5, #5]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d193      	bne.n	8009d4a <VL53L1_hist_phase_consistency_check+0x4e>
			prange_curr->VL53L1_p_002[lc].range_status =
 8009e22:	234c      	movs	r3, #76	@ 0x4c
 8009e24:	fb03 6307 	mla	r3, r3, r7, r6
 8009e28:	2117      	movs	r1, #23
 8009e2a:	f883 105e 	strb.w	r1, [r3, #94]	@ 0x5e
{
 8009e2e:	2400      	movs	r4, #0
 8009e30:	f8cd a018 	str.w	sl, [sp, #24]
 8009e34:	e79d      	b.n	8009d72 <VL53L1_hist_phase_consistency_check+0x76>
		return status;
 8009e36:	2200      	movs	r2, #0
}
 8009e38:	4610      	mov	r0, r2
 8009e3a:	b00d      	add	sp, #52	@ 0x34
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return status;
 8009e40:	2200      	movs	r2, #0
 8009e42:	e7f9      	b.n	8009e38 <VL53L1_hist_phase_consistency_check+0x13c>

08009e44 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 8009e44:	b510      	push	{r4, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	4684      	mov	ip, r0

	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	9005      	str	r0, [sp, #20]
	int32_t   events_tolerance = 0;
 8009e4e:	9004      	str	r0, [sp, #16]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009e50:	f89c 02b0 	ldrb.w	r0, [ip, #688]	@ 0x2b0
	min_spad_count =
 8009e54:	f8bc e298 	ldrh.w	lr, [ip, #664]	@ 0x298
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 8009e58:	f893 c04a 	ldrb.w	ip, [r3, #74]	@ 0x4a
 8009e5c:	f1bc 0f09 	cmp.w	ip, #9
 8009e60:	d007      	beq.n	8009e72 <VL53L1_hist_xmonitor_consistency_check+0x2e>
 8009e62:	f1bc 0f13 	cmp.w	ip, #19
 8009e66:	d004      	beq.n	8009e72 <VL53L1_hist_xmonitor_consistency_check+0x2e>
		prange_curr->range_status ==
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009e68:	f1bc 0f14 	cmp.w	ip, #20
 8009e6c:	d001      	beq.n	8009e72 <VL53L1_hist_xmonitor_consistency_check+0x2e>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e6e:	2000      	movs	r0, #0
 8009e70:	e01d      	b.n	8009eae <VL53L1_hist_xmonitor_consistency_check+0x6a>
		prange_curr->range_status ==
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009e72:	f892 c042 	ldrb.w	ip, [r2, #66]	@ 0x42
 8009e76:	f1bc 0f09 	cmp.w	ip, #9
 8009e7a:	d007      	beq.n	8009e8c <VL53L1_hist_xmonitor_consistency_check+0x48>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 8009e7c:	f1bc 0f13 	cmp.w	ip, #19
 8009e80:	d004      	beq.n	8009e8c <VL53L1_hist_xmonitor_consistency_check+0x48>
			prange_prev->xmonitor.range_status ==
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009e82:	f1bc 0f14 	cmp.w	ip, #20
 8009e86:	d001      	beq.n	8009e8c <VL53L1_hist_xmonitor_consistency_check+0x48>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e010      	b.n	8009eae <VL53L1_hist_xmonitor_consistency_check+0x6a>
			prange_prev->xmonitor.range_status ==
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009e8c:	461c      	mov	r4, r3
 8009e8e:	f04f 0c09 	mov.w	ip, #9
 8009e92:	f804 cf4a 	strb.w	ip, [r4, #74]!
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 8009e96:	9403      	str	r4, [sp, #12]
 8009e98:	ac05      	add	r4, sp, #20
 8009e9a:	9402      	str	r4, [sp, #8]
 8009e9c:	ac04      	add	r4, sp, #16
 8009e9e:	9401      	str	r4, [sp, #4]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 8009ea6:	460a      	mov	r2, r1
 8009ea8:	4671      	mov	r1, lr
 8009eaa:	f7ff fe24 	bl	8009af6 <VL53L1_hist_events_consistency_check>

		}
	}

	return status;
}
 8009eae:	b006      	add	sp, #24
 8009eb0:	bd10      	pop	{r4, pc}

08009eb2 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009eb2:	b538      	push	{r3, r4, r5, lr}
 8009eb4:	4605      	mov	r5, r0
	uint32_t  wrap_dmax_phase      = 0;
	uint32_t  range_mm             = 0;

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	8013      	strh	r3, [r2, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 8009eba:	f8b1 0086 	ldrh.w	r0, [r1, #134]	@ 0x86
 8009ebe:	b908      	cbnz	r0, 8009ec4 <VL53L1_hist_wrap_dmax+0x12>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	4614      	mov	r4, r2
			VL53L1_calc_pll_period_mm(
 8009ec6:	f001 fae2 	bl	800b48e <VL53L1_calc_pll_period_mm>
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009eca:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
		wrap_dmax_phase =
 8009ece:	021b      	lsls	r3, r3, #8
		range_mm = wrap_dmax_phase * pll_period_mm;
 8009ed0:	fb03 f000 	mul.w	r0, r3, r0
		range_mm = (range_mm + (1<<14)) >> 15;
 8009ed4:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
		*pwrap_dmax_mm = (int16_t)range_mm;
 8009ed8:	f340 30cf 	sbfx	r0, r0, #15, #16
 8009edc:	8020      	strh	r0, [r4, #0]
 8009ede:	e7ef      	b.n	8009ec0 <VL53L1_hist_wrap_dmax+0xe>

08009ee0 <VL53L1_spad_number_to_byte_bit_index>:
	uint8_t *pbit_mask)
{



	*pbyte_index  = spad_number >> 3;
 8009ee0:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
 8009ee4:	f881 c000 	strb.w	ip, [r1]
	*pbit_index   = spad_number & 0x07;
 8009ee8:	f000 0007 	and.w	r0, r0, #7
 8009eec:	7010      	strb	r0, [r2, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4082      	lsls	r2, r0
 8009ef2:	701a      	strb	r2, [r3, #0]

}
 8009ef4:	4770      	bx	lr

08009ef6 <VL53L1_encode_row_col>:
	uint8_t  col,
	uint8_t *pspad_number)
{


	if (row > 7)
 8009ef6:	2807      	cmp	r0, #7
 8009ef8:	d905      	bls.n	8009f06 <VL53L1_encode_row_col+0x10>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009efa:	00c9      	lsls	r1, r1, #3
 8009efc:	b2c9      	uxtb	r1, r1
 8009efe:	1a09      	subs	r1, r1, r0
 8009f00:	3971      	subs	r1, #113	@ 0x71
 8009f02:	7011      	strb	r1, [r2, #0]
 8009f04:	4770      	bx	lr
	else
		*pspad_number = ((15-col) << 3) + row;
 8009f06:	f1c1 010f 	rsb	r1, r1, #15
 8009f0a:	b2c9      	uxtb	r1, r1
 8009f0c:	00c9      	lsls	r1, r1, #3
 8009f0e:	b2c9      	uxtb	r1, r1
 8009f10:	4408      	add	r0, r1
 8009f12:	7010      	strb	r0, [r2, #0]

}
 8009f14:	4770      	bx	lr

08009f16 <VL53L1_decode_zone_size>:
	uint8_t  *pheight)
{



	*pheight = encoded_xy_size >> 4;
 8009f16:	0903      	lsrs	r3, r0, #4
 8009f18:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009f1a:	f000 000f 	and.w	r0, r0, #15
 8009f1e:	7008      	strb	r0, [r1, #0]

}
 8009f20:	4770      	bx	lr

08009f22 <VL53L1_encode_zone_size>:
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{


	*pencoded_xy_size = (height << 4) + width;
 8009f22:	0109      	lsls	r1, r1, #4
 8009f24:	b2c9      	uxtb	r1, r1
 8009f26:	4401      	add	r1, r0
 8009f28:	7011      	strb	r1, [r2, #0]

}
 8009f2a:	4770      	bx	lr

08009f2c <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	4688      	mov	r8, r1
 8009f34:	4616      	mov	r6, r2
 8009f36:	461c      	mov	r4, r3
 8009f38:	9f08      	ldr	r7, [sp, #32]
 8009f3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24



	uint8_t x_centre = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t y_centre = 0;
 8009f42:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t width    = 0;
 8009f46:	f88d 3005 	strb.w	r3, [sp, #5]
	uint8_t height   = 0;
 8009f4a:	f88d 3004 	strb.w	r3, [sp, #4]



	VL53L1_decode_row_col(
 8009f4e:	f10d 0207 	add.w	r2, sp, #7
 8009f52:	f10d 0106 	add.w	r1, sp, #6
 8009f56:	f001 fbdc 	bl	800b712 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 8009f5a:	aa01      	add	r2, sp, #4
 8009f5c:	f10d 0105 	add.w	r1, sp, #5
 8009f60:	4640      	mov	r0, r8
 8009f62:	f7ff ffd8 	bl	8009f16 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009f66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8009f6a:	1c4a      	adds	r2, r1, #1
 8009f6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009f70:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8009f74:	8033      	strh	r3, [r6, #0]
	if (*px_ll < 0)
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	db1c      	blt.n	8009fb4 <VL53L1_decode_zone_limits+0x88>
		*px_ll = 0;

	*px_ur = *px_ll + (int16_t)width;
 8009f7a:	8833      	ldrh	r3, [r6, #0]
 8009f7c:	18ca      	adds	r2, r1, r3
 8009f7e:	b212      	sxth	r2, r2
 8009f80:	803a      	strh	r2, [r7, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 8009f82:	2a0f      	cmp	r2, #15
 8009f84:	dd01      	ble.n	8009f8a <VL53L1_decode_zone_limits+0x5e>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 8009f86:	230f      	movs	r3, #15
 8009f88:	803b      	strh	r3, [r7, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009f8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009f8e:	1c51      	adds	r1, r2, #1
 8009f90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009f94:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 8009f98:	8023      	strh	r3, [r4, #0]
	if (*py_ll < 0)
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	db0d      	blt.n	8009fba <VL53L1_decode_zone_limits+0x8e>
		*py_ll = 0;

	*py_ur = *py_ll + (int16_t)height;
 8009f9e:	8823      	ldrh	r3, [r4, #0]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	b21b      	sxth	r3, r3
 8009fa4:	802b      	strh	r3, [r5, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 8009fa6:	2b0f      	cmp	r3, #15
 8009fa8:	dd01      	ble.n	8009fae <VL53L1_decode_zone_limits+0x82>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 8009faa:	230f      	movs	r3, #15
 8009fac:	802b      	strh	r3, [r5, #0]
}
 8009fae:	b002      	add	sp, #8
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*px_ll = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	8033      	strh	r3, [r6, #0]
 8009fb8:	e7df      	b.n	8009f7a <VL53L1_decode_zone_limits+0x4e>
		*py_ll = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	8023      	strh	r3, [r4, #0]
 8009fbe:	e7ee      	b.n	8009f9e <VL53L1_decode_zone_limits+0x72>

08009fc0 <VL53L1_is_aperture_location>:
{


	uint8_t is_aperture = 0;
	uint8_t mod_row     = row % 4;
	uint8_t mod_col     = col % 4;
 8009fc0:	f001 0103 	and.w	r1, r1, #3

	if (mod_row == 0 && mod_col == 2)
 8009fc4:	f010 0303 	ands.w	r3, r0, #3
 8009fc8:	d103      	bne.n	8009fd2 <VL53L1_is_aperture_location+0x12>
 8009fca:	2902      	cmp	r1, #2
 8009fcc:	d005      	beq.n	8009fda <VL53L1_is_aperture_location+0x1a>
	uint8_t is_aperture = 0;
 8009fce:	4618      	mov	r0, r3
 8009fd0:	e000      	b.n	8009fd4 <VL53L1_is_aperture_location+0x14>
 8009fd2:	2000      	movs	r0, #0
		is_aperture = 1;

	if (mod_row == 2 && mod_col == 0)
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d002      	beq.n	8009fde <VL53L1_is_aperture_location+0x1e>
		is_aperture = 1;

	return is_aperture;
}
 8009fd8:	4770      	bx	lr
		is_aperture = 1;
 8009fda:	2001      	movs	r0, #1
 8009fdc:	e7fa      	b.n	8009fd4 <VL53L1_is_aperture_location+0x14>
	if (mod_row == 2 && mod_col == 0)
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	d1fa      	bne.n	8009fd8 <VL53L1_is_aperture_location+0x18>
		is_aperture = 1;
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e7f8      	b.n	8009fd8 <VL53L1_is_aperture_location+0x18>

08009fe6 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	4690      	mov	r8, r2
 8009fee:	469a      	mov	sl, r3
 8009ff0:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38


	int16_t   x         = 0;
	int16_t   y         = 0;

	int16_t   zone_x_ll = 0;
 8009ff4:	2400      	movs	r4, #0
 8009ff6:	f8ad 4016 	strh.w	r4, [sp, #22]
	int16_t   zone_y_ll = 0;
 8009ffa:	f8ad 4014 	strh.w	r4, [sp, #20]
	int16_t   zone_x_ur = 0;
 8009ffe:	f8ad 4012 	strh.w	r4, [sp, #18]
	int16_t   zone_y_ur = 0;
 800a002:	f8ad 4010 	strh.w	r4, [sp, #16]

	uint8_t   spad_number = 0;
 800a006:	f88d 400f 	strb.w	r4, [sp, #15]
	uint8_t   byte_index  = 0;
 800a00a:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t   bit_index   = 0;
 800a00e:	f88d 400d 	strb.w	r4, [sp, #13]
	uint8_t   bit_mask    = 0;
 800a012:	f88d 400c 	strb.w	r4, [sp, #12]

	uint8_t   is_aperture = 0;



	VL53L1_decode_zone_limits(
 800a016:	ab04      	add	r3, sp, #16
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	f10d 0312 	add.w	r3, sp, #18
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	ab05      	add	r3, sp, #20
 800a022:	f10d 0216 	add.w	r2, sp, #22
 800a026:	f7ff ff81 	bl	8009f2c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800a02a:	f8a9 4000 	strh.w	r4, [r9]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a02e:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 800a032:	e032      	b.n	800a09a <VL53L1_calc_max_effective_spads+0xb4>

				if (is_aperture > 0)
					*pmax_effective_spads +=
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800a034:	f8b9 3000 	ldrh.w	r3, [r9]
 800a038:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a03c:	f8a9 3000 	strh.w	r3, [r9]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a040:	3401      	adds	r4, #1
 800a042:	b224      	sxth	r4, r4
 800a044:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800a048:	42a1      	cmp	r1, r4
 800a04a:	db24      	blt.n	800a096 <VL53L1_calc_max_effective_spads+0xb0>
			VL53L1_encode_row_col(
 800a04c:	b2fd      	uxtb	r5, r7
 800a04e:	b2e6      	uxtb	r6, r4
 800a050:	f10d 020f 	add.w	r2, sp, #15
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	f7ff ff4d 	bl	8009ef6 <VL53L1_encode_row_col>
			VL53L1_spad_number_to_byte_bit_index(
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	f10d 020d 	add.w	r2, sp, #13
 800a062:	f10d 010e 	add.w	r1, sp, #14
 800a066:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800a06a:	f7ff ff39 	bl	8009ee0 <VL53L1_spad_number_to_byte_bit_index>
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a06e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a072:	f818 2003 	ldrb.w	r2, [r8, r3]
 800a076:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a07a:	421a      	tst	r2, r3
 800a07c:	d0e0      	beq.n	800a040 <VL53L1_calc_max_effective_spads+0x5a>
				is_aperture = VL53L1_is_aperture_location(
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	f7ff ff9d 	bl	8009fc0 <VL53L1_is_aperture_location>
				if (is_aperture > 0)
 800a086:	2800      	cmp	r0, #0
 800a088:	d0d4      	beq.n	800a034 <VL53L1_calc_max_effective_spads+0x4e>
					*pmax_effective_spads +=
 800a08a:	f8b9 3000 	ldrh.w	r3, [r9]
 800a08e:	4453      	add	r3, sl
 800a090:	f8a9 3000 	strh.w	r3, [r9]
 800a094:	e7d4      	b.n	800a040 <VL53L1_calc_max_effective_spads+0x5a>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a096:	3701      	adds	r7, #1
 800a098:	b23f      	sxth	r7, r7
 800a09a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800a09e:	42bb      	cmp	r3, r7
 800a0a0:	db02      	blt.n	800a0a8 <VL53L1_calc_max_effective_spads+0xc2>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a0a2:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800a0a6:	e7cd      	b.n	800a044 <VL53L1_calc_max_effective_spads+0x5e>

			}
		}
	}
}
 800a0a8:	b006      	add	sp, #24
 800a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a0ae <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800a0ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b2:	b089      	sub	sp, #36	@ 0x24
 800a0b4:	4615      	mov	r5, r2
 800a0b6:	461e      	mov	r6, r3
 800a0b8:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800a0bc:	f8bd a04c 	ldrh.w	sl, [sp, #76]	@ 0x4c
 800a0c0:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 800a0c4:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54


	int16_t   x         = 0;
	int16_t   y         = 0;

	int16_t   mm_x_ll   = 0;
 800a0c8:	2400      	movs	r4, #0
 800a0ca:	f8ad 401e 	strh.w	r4, [sp, #30]
	int16_t   mm_y_ll   = 0;
 800a0ce:	f8ad 401c 	strh.w	r4, [sp, #28]
	int16_t   mm_x_ur   = 0;
 800a0d2:	f8ad 401a 	strh.w	r4, [sp, #26]
	int16_t   mm_y_ur   = 0;
 800a0d6:	f8ad 4018 	strh.w	r4, [sp, #24]

	int16_t   zone_x_ll = 0;
 800a0da:	f8ad 4016 	strh.w	r4, [sp, #22]
	int16_t   zone_y_ll = 0;
 800a0de:	f8ad 4014 	strh.w	r4, [sp, #20]
	int16_t   zone_x_ur = 0;
 800a0e2:	f8ad 4012 	strh.w	r4, [sp, #18]
	int16_t   zone_y_ur = 0;
 800a0e6:	f8ad 4010 	strh.w	r4, [sp, #16]

	uint8_t   spad_number = 0;
 800a0ea:	f88d 400f 	strb.w	r4, [sp, #15]
	uint8_t   byte_index  = 0;
 800a0ee:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t   bit_index   = 0;
 800a0f2:	f88d 400d 	strb.w	r4, [sp, #13]
	uint8_t   bit_mask    = 0;
 800a0f6:	f88d 400c 	strb.w	r4, [sp, #12]
	uint8_t   is_aperture = 0;
	uint16_t  spad_attenuation = 0;



	VL53L1_decode_zone_limits(
 800a0fa:	ab06      	add	r3, sp, #24
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	f10d 031a 	add.w	r3, sp, #26
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	ab07      	add	r3, sp, #28
 800a106:	f10d 021e 	add.w	r2, sp, #30
 800a10a:	f7ff ff0f 	bl	8009f2c <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800a10e:	ab04      	add	r3, sp, #16
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	f10d 0312 	add.w	r3, sp, #18
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	ab05      	add	r3, sp, #20
 800a11a:	f10d 0216 	add.w	r2, sp, #22
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	f7ff ff03 	bl	8009f2c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800a126:	f8ab 4000 	strh.w	r4, [fp]
	*pmm_outer_effective_spads = 0;
 800a12a:	f8a9 4000 	strh.w	r4, [r9]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a12e:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 800a132:	e045      	b.n	800a1c0 <VL53L1_calc_mm_effective_spads+0x112>
					(uint8_t)x);

				if (is_aperture > 0)
					spad_attenuation = aperture_attenuation;
				else
					spad_attenuation = 0x0100;
 800a134:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a138:	e02a      	b.n	800a190 <VL53L1_calc_mm_effective_spads+0xe2>
				if (x >= mm_x_ll && x <= mm_x_ur &&
					y >= mm_y_ll && y <= mm_y_ur)
					*pmm_inner_effective_spads +=
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800a13a:	f8b9 3000 	ldrh.w	r3, [r9]
 800a13e:	4413      	add	r3, r2
 800a140:	f8a9 3000 	strh.w	r3, [r9]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a144:	3401      	adds	r4, #1
 800a146:	b224      	sxth	r4, r4
 800a148:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	db35      	blt.n	800a1bc <VL53L1_calc_mm_effective_spads+0x10e>
			VL53L1_encode_row_col(
 800a150:	b2fd      	uxtb	r5, r7
 800a152:	b2e6      	uxtb	r6, r4
 800a154:	f10d 020f 	add.w	r2, sp, #15
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7ff fecb 	bl	8009ef6 <VL53L1_encode_row_col>
			VL53L1_spad_number_to_byte_bit_index(
 800a160:	ab03      	add	r3, sp, #12
 800a162:	f10d 020d 	add.w	r2, sp, #13
 800a166:	f10d 010e 	add.w	r1, sp, #14
 800a16a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800a16e:	f7ff feb7 	bl	8009ee0 <VL53L1_spad_number_to_byte_bit_index>
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a172:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a176:	f818 2003 	ldrb.w	r2, [r8, r3]
 800a17a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a17e:	421a      	tst	r2, r3
 800a180:	d0e0      	beq.n	800a144 <VL53L1_calc_mm_effective_spads+0x96>
				is_aperture = VL53L1_is_aperture_location(
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	f7ff ff1b 	bl	8009fc0 <VL53L1_is_aperture_location>
				if (is_aperture > 0)
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0d2      	beq.n	800a134 <VL53L1_calc_mm_effective_spads+0x86>
					spad_attenuation = aperture_attenuation;
 800a18e:	4652      	mov	r2, sl
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a190:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a194:	42a3      	cmp	r3, r4
 800a196:	dcd0      	bgt.n	800a13a <VL53L1_calc_mm_effective_spads+0x8c>
 800a198:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	dbcc      	blt.n	800a13a <VL53L1_calc_mm_effective_spads+0x8c>
					y >= mm_y_ll && y <= mm_y_ur)
 800a1a0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a1a4:	42bb      	cmp	r3, r7
 800a1a6:	dcc8      	bgt.n	800a13a <VL53L1_calc_mm_effective_spads+0x8c>
					y >= mm_y_ll && y <= mm_y_ur)
 800a1a8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a1ac:	42bb      	cmp	r3, r7
 800a1ae:	dbc4      	blt.n	800a13a <VL53L1_calc_mm_effective_spads+0x8c>
					*pmm_inner_effective_spads +=
 800a1b0:	f8bb 3000 	ldrh.w	r3, [fp]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f8ab 3000 	strh.w	r3, [fp]
 800a1ba:	e7c3      	b.n	800a144 <VL53L1_calc_mm_effective_spads+0x96>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a1bc:	3701      	adds	r7, #1
 800a1be:	b23f      	sxth	r7, r7
 800a1c0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800a1c4:	42bb      	cmp	r3, r7
 800a1c6:	db02      	blt.n	800a1ce <VL53L1_calc_mm_effective_spads+0x120>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a1c8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800a1cc:	e7bc      	b.n	800a148 <VL53L1_calc_mm_effective_spads+0x9a>
						spad_attenuation;
			}
		}
	}
}
 800a1ce:	b009      	add	sp, #36	@ 0x24
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1d4 <VL53L1_hist_combine_mm1_mm2_offsets>:
{
 800a1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	b087      	sub	sp, #28
 800a1da:	4680      	mov	r8, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	4615      	mov	r5, r2
 800a1e0:	461f      	mov	r7, r3
 800a1e2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a1e4:	f8bd 9048 	ldrh.w	r9, [sp, #72]	@ 0x48
	uint16_t max_mm_inner_effective_spads = 0;
 800a1e8:	f04f 0c00 	mov.w	ip, #0
 800a1ec:	f8ad c016 	strh.w	ip, [sp, #22]
	uint16_t max_mm_outer_effective_spads = 0;
 800a1f0:	f8ad c014 	strh.w	ip, [sp, #20]
	uint16_t mm_inner_effective_spads     = 0;
 800a1f4:	f8ad c012 	strh.w	ip, [sp, #18]
	uint16_t mm_outer_effective_spads     = 0;
 800a1f8:	f8ad c010 	strh.w	ip, [sp, #16]
	VL53L1_calc_mm_effective_spads(
 800a1fc:	ab05      	add	r3, sp, #20
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	f10d 0316 	add.w	r3, sp, #22
 800a204:	9302      	str	r3, [sp, #8]
 800a206:	f8cd 9004 	str.w	r9, [sp, #4]
 800a20a:	9600      	str	r6, [sp, #0]
 800a20c:	23ff      	movs	r3, #255	@ 0xff
 800a20e:	22c7      	movs	r2, #199	@ 0xc7
 800a210:	4639      	mov	r1, r7
 800a212:	4628      	mov	r0, r5
 800a214:	f7ff ff4b 	bl	800a0ae <VL53L1_calc_mm_effective_spads>
	if ((max_mm_inner_effective_spads == 0) ||
 800a218:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800a21c:	b393      	cbz	r3, 800a284 <VL53L1_hist_combine_mm1_mm2_offsets+0xb0>
		(max_mm_outer_effective_spads == 0))
 800a21e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	if ((max_mm_inner_effective_spads == 0) ||
 800a222:	b90b      	cbnz	r3, 800a228 <VL53L1_hist_combine_mm1_mm2_offsets+0x54>
	int32_t tmp0 = 0;
 800a224:	2000      	movs	r0, #0
 800a226:	e02e      	b.n	800a286 <VL53L1_hist_combine_mm1_mm2_offsets+0xb2>
	VL53L1_calc_mm_effective_spads(
 800a228:	ab04      	add	r3, sp, #16
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	f10d 0312 	add.w	r3, sp, #18
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	f8cd 9004 	str.w	r9, [sp, #4]
 800a236:	9600      	str	r6, [sp, #0]
 800a238:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800a23c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 800a240:	4639      	mov	r1, r7
 800a242:	4628      	mov	r0, r5
 800a244:	f7ff ff33 	bl	800a0ae <VL53L1_calc_mm_effective_spads>
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800a248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a24a:	889a      	ldrh	r2, [r3, #4]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800a24c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a250:	fb02 f303 	mul.w	r3, r2, r3
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800a254:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800a258:	fbb3 f3f2 	udiv	r3, r3, r2
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800a25c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a25e:	88d1      	ldrh	r1, [r2, #6]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800a260:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800a264:	fb01 f202 	mul.w	r2, r1, r2
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800a268:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a26c:	fbb2 f2f1 	udiv	r2, r2, r1
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800a270:	fb02 f404 	mul.w	r4, r2, r4
 800a274:	fb03 4008 	mla	r0, r3, r8, r4
	if (tmp1 != 0)
 800a278:	189b      	adds	r3, r3, r2
 800a27a:	d004      	beq.n	800a286 <VL53L1_hist_combine_mm1_mm2_offsets+0xb2>
		tmp0 = (tmp0 * 4) / tmp1;
 800a27c:	0080      	lsls	r0, r0, #2
 800a27e:	fb90 f0f3 	sdiv	r0, r0, r3
 800a282:	e000      	b.n	800a286 <VL53L1_hist_combine_mm1_mm2_offsets+0xb2>
	int32_t tmp0 = 0;
 800a284:	2000      	movs	r0, #0
	*prange_offset_mm = (int16_t)tmp0;
 800a286:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a288:	8018      	strh	r0, [r3, #0]
}
 800a28a:	b007      	add	sp, #28
 800a28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a290 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	4604      	mov	r4, r0
 800a294:	460f      	mov	r7, r1
 800a296:	4615      	mov	r5, r2
 800a298:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800a29a:	4610      	mov	r0, r2
 800a29c:	f7ff f878 	bl	8009390 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800a2a0:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 800a2a4:	702b      	strb	r3, [r5, #0]
	psys->result__range_status     = phist->active_results;
 800a2a6:	7cbb      	ldrb	r3, [r7, #18]
 800a2a8:	706b      	strb	r3, [r5, #1]
	psys->result__report_status    = pbins->result__report_status;
 800a2aa:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800a2ae:	70ab      	strb	r3, [r5, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800a2b0:	f894 307b 	ldrb.w	r3, [r4, #123]	@ 0x7b
 800a2b4:	70eb      	strb	r3, [r5, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800a2b6:	f107 0014 	add.w	r0, r7, #20

	for (i = 0; i < phist->active_results; i++) {
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	e01c      	b.n	800a2f8 <VL53L1_hist_copy_results_to_sys_and_core+0x68>

		switch (i) {
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800a2be:	8ac3      	ldrh	r3, [r0, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a2c0:	80ab      	strh	r3, [r5, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a2c2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a2c4:	80eb      	strh	r3, [r5, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a2c6:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a2c8:	82eb      	strh	r3, [r5, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a2ca:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a2cc:	812b      	strh	r3, [r5, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800a2ce:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 800a2d0:	816b      	strh	r3, [r5, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800a2d2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800a2d6:	81ab      	strh	r3, [r5, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a2d8:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	@ 0x46
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a2dc:	81eb      	strh	r3, [r5, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a2de:	8a83      	ldrh	r3, [r0, #20]
 800a2e0:	842b      	strh	r3, [r5, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800a2e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a2e4:	6073      	str	r3, [r6, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800a2e6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a2e8:	60b3      	str	r3, [r6, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a2ea:	6983      	ldr	r3, [r0, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a2ec:	60f3      	str	r3, [r6, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800a2ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a2f0:	6033      	str	r3, [r6, #0]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
			break;
		}

		pdata++;
 800a2f2:	304c      	adds	r0, #76	@ 0x4c
	for (i = 0; i < phist->active_results; i++) {
 800a2f4:	3401      	adds	r4, #1
 800a2f6:	b2e4      	uxtb	r4, r4
 800a2f8:	f897 c012 	ldrb.w	ip, [r7, #18]
 800a2fc:	45a4      	cmp	ip, r4
 800a2fe:	d91a      	bls.n	800a336 <VL53L1_hist_copy_results_to_sys_and_core+0xa6>
		switch (i) {
 800a300:	2c00      	cmp	r4, #0
 800a302:	d0dc      	beq.n	800a2be <VL53L1_hist_copy_results_to_sys_and_core+0x2e>
 800a304:	2c01      	cmp	r4, #1
 800a306:	d1f4      	bne.n	800a2f2 <VL53L1_hist_copy_results_to_sys_and_core+0x62>
				pdata->VL53L1_p_006;
 800a308:	8ac3      	ldrh	r3, [r0, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a30a:	832b      	strh	r3, [r5, #24]
				pdata->peak_signal_count_rate_mcps;
 800a30c:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a30e:	836b      	strh	r3, [r5, #26]
				pdata->ambient_count_rate_mcps;
 800a310:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a312:	83ab      	strh	r3, [r5, #28]
			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800a314:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 800a316:	83eb      	strh	r3, [r5, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800a318:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800a31c:	842b      	strh	r3, [r5, #32]
				(uint16_t)pdata->median_range_mm;
 800a31e:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	@ 0x46
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a322:	846b      	strh	r3, [r5, #34]	@ 0x22
				pdata->VL53L1_p_021;
 800a324:	6a83      	ldr	r3, [r0, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a326:	6173      	str	r3, [r6, #20]
				pdata->VL53L1_p_013;
 800a328:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a32a:	61b3      	str	r3, [r6, #24]
				pdata->total_periods_elapsed;
 800a32c:	6983      	ldr	r3, [r0, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a32e:	61f3      	str	r3, [r6, #28]
				pdata->VL53L1_p_020;
 800a330:	6a43      	ldr	r3, [r0, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a332:	6133      	str	r3, [r6, #16]
			break;
 800a334:	e7dd      	b.n	800a2f2 <VL53L1_hist_copy_results_to_sys_and_core+0x62>
	}

	LOG_FUNCTION_END(0);

}
 800a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a338 <VL53L1_save_cfg_data>:
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800a338:	f890 304a 	ldrb.w	r3, [r0, #74]	@ 0x4a

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a33c:	f890 c045 	ldrb.w	ip, [r0, #69]	@ 0x45
	pzone_dyn_cfg->expected_stream_count =
 800a340:	f500 41c0 	add.w	r1, r0, #24576	@ 0x6000
 800a344:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a348:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a34c:	f882 c792 	strb.w	ip, [r2, #1938]	@ 0x792

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a350:	f890 c048 	ldrb.w	ip, [r0, #72]	@ 0x48
	pzone_dyn_cfg->expected_gph_id =
 800a354:	f882 c793 	strb.w	ip, [r2, #1939]	@ 0x793

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a358:	f890 c3bb 	ldrb.w	ip, [r0, #955]	@ 0x3bb
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a35c:	f882 c79a 	strb.w	ip, [r2, #1946]	@ 0x79a

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a360:	f890 23bc 	ldrb.w	r2, [r0, #956]	@ 0x3bc
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a368:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800a36c:	f881 279b 	strb.w	r2, [r1, #1947]	@ 0x79b

	LOG_FUNCTION_END(status);

	return status;
}
 800a370:	2000      	movs	r0, #0
 800a372:	4770      	bx	lr

0800a374 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800a374:	b570      	push	{r4, r5, r6, lr}
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a376:	f890 c051 	ldrb.w	ip, [r0, #81]	@ 0x51
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  dss_max, dss_rec;
	uint16_t  target_rate =
 800a37a:	f8b0 e35e 	ldrh.w	lr, [r0, #862]	@ 0x35e
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	dss_max = pdev->tuning_parms.tp_dss_max_total_rate_per_spad_mcps;
 800a37e:	f8b0 5234 	ldrh.w	r5, [r0, #564]	@ 0x234
	dss_rec = pdev->tuning_parms.tp_dss_rec_total_rate_per_spad_mcps;
 800a382:	f8b0 6236 	ldrh.w	r6, [r0, #566]	@ 0x236

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800a386:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800a38a:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 800a38e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a392:	2200      	movs	r2, #0
 800a394:	f8a3 2796 	strh.w	r2, [r3, #1942]	@ 0x796

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a398:	f8b1 404a 	ldrh.w	r4, [r1, #74]	@ 0x4a

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a39c:	2301      	movs	r3, #1
 800a39e:	e001      	b.n	800a3a4 <VL53L1_dynamic_zone_update+0x30>
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	7c8a      	ldrb	r2, [r1, #18]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d908      	bls.n	800a3bc <VL53L1_dynamic_zone_update+0x48>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800a3aa:	224c      	movs	r2, #76	@ 0x4c
 800a3ac:	fb02 1203 	mla	r2, r2, r3, r1
 800a3b0:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800a3b4:	42a2      	cmp	r2, r4
 800a3b6:	d9f3      	bls.n	800a3a0 <VL53L1_dynamic_zone_update+0x2c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	e7f1      	b.n	800a3a0 <VL53L1_dynamic_zone_update+0x2c>
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;

	}

	if ((presults->active_results == 0) &&
 800a3bc:	b912      	cbnz	r2, 800a3c4 <VL53L1_dynamic_zone_update+0x50>
 800a3be:	42ac      	cmp	r4, r5
 800a3c0:	d900      	bls.n	800a3c4 <VL53L1_dynamic_zone_update+0x50>
	   (max_total_rate_per_spads > dss_max)) {

		max_total_rate_per_spads = dss_rec;
 800a3c2:	4634      	mov	r4, r6
	}

	if (max_total_rate_per_spads == 0) {
 800a3c4:	b14c      	cbz	r4, 800a3da <VL53L1_dynamic_zone_update+0x66>

		temp = 0xFFFF;
	} else {

		temp = target_rate << 14;
 800a3c6:	ea4f 338e 	mov.w	r3, lr, lsl #14
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a3ca:	fbb3 f3f4 	udiv	r3, r3, r4
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a3ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3d2:	d304      	bcc.n	800a3de <VL53L1_dynamic_zone_update+0x6a>
			temp = 0xFFFF;
 800a3d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3d8:	e001      	b.n	800a3de <VL53L1_dynamic_zone_update+0x6a>
		temp = 0xFFFF;
 800a3da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800a3de:	f500 40c0 	add.w	r0, r0, #24576	@ 0x6000
 800a3e2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800a3e6:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 800a3ea:	f8a0 3796 	strh.w	r3, [r0, #1942]	@ 0x796
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
}
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}

0800a3f2 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800a3f2:	b508      	push	{r3, lr}
 800a3f4:	4601      	mov	r1, r0
	VL53L1_Error status = VL53L1_ERROR_NONE;

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a3f6:	f500 7051 	add.w	r0, r0, #836	@ 0x344
	VL53L1_histogram_config_t *pmulti_hist =
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a3fa:	f891 3045 	ldrb.w	r3, [r1, #69]	@ 0x45
 800a3fe:	f003 0201 	and.w	r2, r3, #1

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a402:	f891 304a 	ldrb.w	r3, [r1, #74]	@ 0x4a
 800a406:	440b      	add	r3, r1
 800a408:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d00b      	beq.n	800a428 <VL53L1_multizone_hist_bins_update+0x36>
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a410:	2b02      	cmp	r3, #2
 800a412:	d024      	beq.n	800a45e <VL53L1_multizone_hist_bins_update+0x6c>
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a414:	2b03      	cmp	r3, #3
 800a416:	d03d      	beq.n	800a494 <VL53L1_multizone_hist_bins_update+0xa2>
	}



	if (status == VL53L1_ERROR_NONE) {
		VL53L1_copy_hist_bins_to_static_cfg(
 800a418:	f501 7265 	add.w	r2, r1, #916	@ 0x394
 800a41c:	f201 315e 	addw	r1, r1, #862	@ 0x35e
 800a420:	f7fe fe9a 	bl	8009158 <VL53L1_copy_hist_bins_to_static_cfg>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a424:	2000      	movs	r0, #0
 800a426:	bd08      	pop	{r3, pc}
		if (!next_range_is_odd_timing) {
 800a428:	b162      	cbz	r2, 800a444 <VL53L1_multizone_hist_bins_update+0x52>
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a42a:	f891 30dd 	ldrb.w	r3, [r1, #221]	@ 0xdd
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a42e:	f881 3348 	strb.w	r3, [r1, #840]	@ 0x348
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a432:	f891 30de 	ldrb.w	r3, [r1, #222]	@ 0xde
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a436:	f881 3349 	strb.w	r3, [r1, #841]	@ 0x349
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a43a:	f891 30df 	ldrb.w	r3, [r1, #223]	@ 0xdf
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a43e:	f881 334a 	strb.w	r3, [r1, #842]	@ 0x34a
 800a442:	e7e9      	b.n	800a418 <VL53L1_multizone_hist_bins_update+0x26>
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a444:	f891 30dd 	ldrb.w	r3, [r1, #221]	@ 0xdd
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a448:	f881 3345 	strb.w	r3, [r1, #837]	@ 0x345
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a44c:	f891 30de 	ldrb.w	r3, [r1, #222]	@ 0xde
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a450:	f881 3346 	strb.w	r3, [r1, #838]	@ 0x346
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a454:	f891 30df 	ldrb.w	r3, [r1, #223]	@ 0xdf
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a458:	f881 3347 	strb.w	r3, [r1, #839]	@ 0x347
		if (next_range_is_odd_timing) {
 800a45c:	e7dc      	b.n	800a418 <VL53L1_multizone_hist_bins_update+0x26>
		if (!next_range_is_odd_timing) {
 800a45e:	b162      	cbz	r2, 800a47a <VL53L1_multizone_hist_bins_update+0x88>
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a460:	f891 30e3 	ldrb.w	r3, [r1, #227]	@ 0xe3
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a464:	f881 3348 	strb.w	r3, [r1, #840]	@ 0x348
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a468:	f891 30e4 	ldrb.w	r3, [r1, #228]	@ 0xe4
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a46c:	f881 3349 	strb.w	r3, [r1, #841]	@ 0x349
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a470:	f891 30e5 	ldrb.w	r3, [r1, #229]	@ 0xe5
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a474:	f881 334a 	strb.w	r3, [r1, #842]	@ 0x34a
 800a478:	e7ce      	b.n	800a418 <VL53L1_multizone_hist_bins_update+0x26>
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a47a:	f891 30e3 	ldrb.w	r3, [r1, #227]	@ 0xe3
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a47e:	f881 3345 	strb.w	r3, [r1, #837]	@ 0x345
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a482:	f891 30e4 	ldrb.w	r3, [r1, #228]	@ 0xe4
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a486:	f881 3346 	strb.w	r3, [r1, #838]	@ 0x346
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a48a:	f891 30e5 	ldrb.w	r3, [r1, #229]	@ 0xe5
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a48e:	f881 3347 	strb.w	r3, [r1, #839]	@ 0x347
		if (next_range_is_odd_timing) {
 800a492:	e7c1      	b.n	800a418 <VL53L1_multizone_hist_bins_update+0x26>
		if (!next_range_is_odd_timing) {
 800a494:	b162      	cbz	r2, 800a4b0 <VL53L1_multizone_hist_bins_update+0xbe>
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a496:	f891 30eb 	ldrb.w	r3, [r1, #235]	@ 0xeb
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a49a:	f881 3348 	strb.w	r3, [r1, #840]	@ 0x348
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a49e:	f891 30ec 	ldrb.w	r3, [r1, #236]	@ 0xec
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a4a2:	f881 3349 	strb.w	r3, [r1, #841]	@ 0x349
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a4a6:	f891 30ed 	ldrb.w	r3, [r1, #237]	@ 0xed
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a4aa:	f881 334a 	strb.w	r3, [r1, #842]	@ 0x34a
 800a4ae:	e7b3      	b.n	800a418 <VL53L1_multizone_hist_bins_update+0x26>
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a4b0:	f891 30eb 	ldrb.w	r3, [r1, #235]	@ 0xeb
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a4b4:	f881 3345 	strb.w	r3, [r1, #837]	@ 0x345
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a4b8:	f891 30ec 	ldrb.w	r3, [r1, #236]	@ 0xec
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a4bc:	f881 3346 	strb.w	r3, [r1, #838]	@ 0x346
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a4c0:	f891 30ed 	ldrb.w	r3, [r1, #237]	@ 0xed
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a4c4:	f881 3347 	strb.w	r3, [r1, #839]	@ 0x347
		if (next_range_is_odd_timing) {
 800a4c8:	e7a6      	b.n	800a418 <VL53L1_multizone_hist_bins_update+0x26>

0800a4ca <VL53L1_update_internal_stream_counters>:
	VL53L1_LLDriverData_t  *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a4ca:	f890 037f 	ldrb.w	r0, [r0, #895]	@ 0x37f

	if (stream_divider == 0) {
 800a4ce:	b910      	cbnz	r0, 800a4d6 <VL53L1_update_internal_stream_counters+0xc>


		*pinternal_stream_count = external_stream_count;
 800a4d0:	7011      	strb	r1, [r2, #0]
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
}
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	4770      	bx	lr
	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a4d6:	7819      	ldrb	r1, [r3, #0]
 800a4d8:	3801      	subs	r0, #1
 800a4da:	4281      	cmp	r1, r0
 800a4dc:	d002      	beq.n	800a4e4 <VL53L1_update_internal_stream_counters+0x1a>
		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a4de:	3101      	adds	r1, #1
 800a4e0:	7019      	strb	r1, [r3, #0]
 800a4e2:	e7f6      	b.n	800a4d2 <VL53L1_update_internal_stream_counters+0x8>
		if (*pinternal_stream_count == 0xFF)
 800a4e4:	7811      	ldrb	r1, [r2, #0]
 800a4e6:	29ff      	cmp	r1, #255	@ 0xff
 800a4e8:	d004      	beq.n	800a4f4 <VL53L1_update_internal_stream_counters+0x2a>
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a4ea:	3101      	adds	r1, #1
 800a4ec:	7011      	strb	r1, [r2, #0]
		*pinternal_stream_count_val = 0;
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	e7ee      	b.n	800a4d2 <VL53L1_update_internal_stream_counters+0x8>
			*pinternal_stream_count = 0x80;
 800a4f4:	2180      	movs	r1, #128	@ 0x80
 800a4f6:	7011      	strb	r1, [r2, #0]
 800a4f8:	e7f9      	b.n	800a4ee <VL53L1_update_internal_stream_counters+0x24>

0800a4fa <VL53L1_update_ll_driver_rd_state>:
{
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 800a4fe:	f890 33c4 	ldrb.w	r3, [r0, #964]	@ 0x3c4
 800a502:	2b0f      	cmp	r3, #15
 800a504:	d811      	bhi.n	800a52a <VL53L1_update_ll_driver_rd_state+0x30>
		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a506:	2303      	movs	r3, #3
 800a508:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
		pstate->rd_stream_count  = 0;
 800a50c:	2000      	movs	r0, #0
 800a50e:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
		pstate->rd_internal_stream_count = 0;
 800a512:	f884 004d 	strb.w	r0, [r4, #77]	@ 0x4d
		pstate->rd_internal_stream_count_val = 0;
 800a516:	f884 004e 	strb.w	r0, [r4, #78]	@ 0x4e
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a51a:	2302      	movs	r3, #2
 800a51c:	f884 304f 	strb.w	r3, [r4, #79]	@ 0x4f
		pstate->rd_timing_status = 0;
 800a520:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
		pstate->rd_zone_id       = 0;
 800a524:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
}
 800a528:	bd10      	pop	{r4, pc}
		if (pstate->rd_stream_count == 0xFF)
 800a52a:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 800a52e:	2bff      	cmp	r3, #255	@ 0xff
 800a530:	d01b      	beq.n	800a56a <VL53L1_update_ll_driver_rd_state+0x70>
			pstate->rd_stream_count++;
 800a532:	3301      	adds	r3, #1
 800a534:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
		status = VL53L1_update_internal_stream_counters(Dev,
 800a538:	f104 034e 	add.w	r3, r4, #78	@ 0x4e
 800a53c:	f104 024d 	add.w	r2, r4, #77	@ 0x4d
 800a540:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
 800a544:	4620      	mov	r0, r4
 800a546:	f7ff ffc0 	bl	800a4ca <VL53L1_update_internal_stream_counters>
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a54a:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 800a54e:	f083 0302 	eor.w	r3, r3, #2
 800a552:	f884 304f 	strb.w	r3, [r4, #79]	@ 0x4f
		switch (pstate->rd_device_state) {
 800a556:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 800a55a:	3b03      	subs	r3, #3
 800a55c:	2b05      	cmp	r3, #5
 800a55e:	d864      	bhi.n	800a62a <VL53L1_update_ll_driver_rd_state+0x130>
 800a560:	e8df f003 	tbb	[pc, r3]
 800a564:	29636307 	.word	0x29636307
 800a568:	4f3d      	.short	0x4f3d
			pstate->rd_stream_count = 0x80;
 800a56a:	2380      	movs	r3, #128	@ 0x80
 800a56c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
 800a570:	e7e2      	b.n	800a538 <VL53L1_update_ll_driver_rd_state+0x3e>
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a572:	f894 33be 	ldrb.w	r3, [r4, #958]	@ 0x3be
 800a576:	f013 0f02 	tst.w	r3, #2
 800a57a:	d00e      	beq.n	800a59a <VL53L1_update_ll_driver_rd_state+0xa0>
				pstate->rd_device_state =
 800a57c:	2306      	movs	r3, #6
 800a57e:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
			pstate->rd_stream_count  = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
			pstate->rd_internal_stream_count = 0;
 800a588:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
			pstate->rd_internal_stream_count_val = 0;
 800a58c:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
			pstate->rd_timing_status = 0;
 800a590:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			pstate->rd_zone_id       = 0;
 800a594:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
			break;
 800a598:	e7c6      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
				if (pstate->rd_zone_id >=
 800a59a:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
					pdev->zone_cfg.active_zones)
 800a59e:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
				if (pstate->rd_zone_id >=
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d303      	bcc.n	800a5ae <VL53L1_update_ll_driver_rd_state+0xb4>
					pstate->rd_device_state =
 800a5a6:	2308      	movs	r3, #8
 800a5a8:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a5ac:	e7e9      	b.n	800a582 <VL53L1_update_ll_driver_rd_state+0x88>
					pstate->rd_device_state =
 800a5ae:	2307      	movs	r3, #7
 800a5b0:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a5b4:	e7e5      	b.n	800a582 <VL53L1_update_ll_driver_rd_state+0x88>
			pstate->rd_stream_count = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
			pstate->rd_internal_stream_count = 0;
 800a5bc:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
			pstate->rd_internal_stream_count_val = 0;
 800a5c0:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
			pstate->rd_zone_id      = 0;
 800a5c4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
				pdev->zone_cfg.active_zones)
 800a5c8:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
			if (pstate->rd_zone_id >=
 800a5cc:	b91b      	cbnz	r3, 800a5d6 <VL53L1_update_ll_driver_rd_state+0xdc>
				pstate->rd_device_state =
 800a5ce:	2308      	movs	r3, #8
 800a5d0:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a5d4:	e7a8      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
				pstate->rd_device_state =
 800a5d6:	2307      	movs	r3, #7
 800a5d8:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a5dc:	e7a4      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
			pstate->rd_zone_id++;
 800a5de:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
				pdev->zone_cfg.active_zones)
 800a5ea:	f894 20db 	ldrb.w	r2, [r4, #219]	@ 0xdb
			if (pstate->rd_zone_id >=
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d303      	bcc.n	800a5fa <VL53L1_update_ll_driver_rd_state+0x100>
				pstate->rd_device_state =
 800a5f2:	2308      	movs	r3, #8
 800a5f4:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a5f8:	e796      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
				pstate->rd_device_state =
 800a5fa:	2307      	movs	r3, #7
 800a5fc:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a600:	e792      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
			pstate->rd_zone_id        = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
			pstate->rd_timing_status ^= 0x01;
 800a608:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800a60c:	f083 0301 	eor.w	r3, r3, #1
 800a610:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
				pdev->zone_cfg.active_zones)
 800a614:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
			if (pstate->rd_zone_id >=
 800a618:	b91b      	cbnz	r3, 800a622 <VL53L1_update_ll_driver_rd_state+0x128>
				pstate->rd_device_state =
 800a61a:	2308      	movs	r3, #8
 800a61c:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a620:	e782      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
				pstate->rd_device_state =
 800a622:	2307      	movs	r3, #7
 800a624:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 800a628:	e77e      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>
			pstate->rd_device_state  =
 800a62a:	2303      	movs	r3, #3
 800a62c:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
			pstate->rd_stream_count  = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
			pstate->rd_internal_stream_count = 0;
 800a636:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
			pstate->rd_internal_stream_count_val = 0;
 800a63a:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a63e:	2202      	movs	r2, #2
 800a640:	f884 204f 	strb.w	r2, [r4, #79]	@ 0x4f
			pstate->rd_timing_status = 0;
 800a644:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			pstate->rd_zone_id       = 0;
 800a648:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
			break;
 800a64c:	e76c      	b.n	800a528 <VL53L1_update_ll_driver_rd_state+0x2e>

0800a64e <VL53L1_update_ll_driver_cfg_state>:
{
 800a64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a650:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 800a652:	f890 33c4 	ldrb.w	r3, [r0, #964]	@ 0x3c4
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d82c      	bhi.n	800a6b4 <VL53L1_update_ll_driver_cfg_state+0x66>
		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a65a:	2303      	movs	r3, #3
 800a65c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
		pstate->cfg_stream_count  = 0;
 800a660:	2000      	movs	r0, #0
 800a662:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
		pstate->cfg_internal_stream_count = 0;
 800a666:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
		pstate->cfg_internal_stream_count_val = 0;
 800a66a:	f884 0047 	strb.w	r0, [r4, #71]	@ 0x47
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a66e:	2302      	movs	r3, #2
 800a670:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
		pstate->cfg_timing_status = 0;
 800a674:	f884 0049 	strb.w	r0, [r4, #73]	@ 0x49
		pstate->cfg_zone_id       = 0;
 800a678:	f884 004a 	strb.w	r0, [r4, #74]	@ 0x4a
		prev_cfg_stream_count     = 0;
 800a67c:	4607      	mov	r7, r0
		prev_cfg_gph_id           = 0;
 800a67e:	4606      	mov	r6, r0
		prev_cfg_zone_id          = 0;
 800a680:	4605      	mov	r5, r0
	if (pdev->zone_cfg.active_zones == 0) {
 800a682:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
 800a686:	2b00      	cmp	r3, #0
 800a688:	f040 80a1 	bne.w	800a7ce <VL53L1_update_ll_driver_cfg_state+0x180>
			= prev_cfg_stream_count - 1;
 800a68c:	3f01      	subs	r7, #1
 800a68e:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 800a692:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800a696:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a69a:	f883 7792 	strb.w	r7, [r3, #1938]	@ 0x792
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800a69e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800a6a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a6a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a6aa:	f086 0602 	eor.w	r6, r6, #2
 800a6ae:	f882 6793 	strb.w	r6, [r2, #1939]	@ 0x793
}
 800a6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a6b4:	f890 6048 	ldrb.w	r6, [r0, #72]	@ 0x48
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a6b8:	f890 504a 	ldrb.w	r5, [r0, #74]	@ 0x4a
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a6bc:	f890 7045 	ldrb.w	r7, [r0, #69]	@ 0x45
		if (pstate->cfg_stream_count == 0xFF)
 800a6c0:	2fff      	cmp	r7, #255	@ 0xff
 800a6c2:	d02b      	beq.n	800a71c <VL53L1_update_ll_driver_cfg_state+0xce>
			pstate->cfg_stream_count++;
 800a6c4:	1c7b      	adds	r3, r7, #1
 800a6c6:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
		status = VL53L1_update_internal_stream_counters(
 800a6ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6ce:	f104 0246 	add.w	r2, r4, #70	@ 0x46
 800a6d2:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f7ff fef7 	bl	800a4ca <VL53L1_update_internal_stream_counters>
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a6dc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800a6e0:	f083 0302 	eor.w	r3, r3, #2
 800a6e4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
		switch (pstate->cfg_device_state) {
 800a6e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a6ec:	2b04      	cmp	r3, #4
 800a6ee:	d03e      	beq.n	800a76e <VL53L1_update_ll_driver_cfg_state+0x120>
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d057      	beq.n	800a7a4 <VL53L1_update_ll_driver_cfg_state+0x156>
 800a6f4:	2b03      	cmp	r3, #3
 800a6f6:	d015      	beq.n	800a724 <VL53L1_update_ll_driver_cfg_state+0xd6>
			pstate->cfg_device_state =
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			pstate->cfg_stream_count = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			pstate->cfg_internal_stream_count = 0;
 800a704:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			pstate->cfg_internal_stream_count_val = 0;
 800a708:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
			pstate->cfg_gph_id =
 800a70c:	2202      	movs	r2, #2
 800a70e:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
			pstate->cfg_timing_status = 0;
 800a712:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
			pstate->cfg_zone_id       = 0;
 800a716:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
			break;
 800a71a:	e7b2      	b.n	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
			pstate->cfg_stream_count = 0x80;
 800a71c:	2380      	movs	r3, #128	@ 0x80
 800a71e:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 800a722:	e7d2      	b.n	800a6ca <VL53L1_update_ll_driver_cfg_state+0x7c>
			pstate->cfg_zone_id = 1;
 800a724:	2301      	movs	r3, #1
 800a726:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
				pdev->zone_cfg.active_zones) {
 800a72a:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
			if (pstate->cfg_zone_id >
 800a72e:	b93b      	cbnz	r3, 800a740 <VL53L1_update_ll_driver_cfg_state+0xf2>
				pstate->cfg_zone_id = 0;
 800a730:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
				pstate->cfg_timing_status ^= 0x01;
 800a734:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 800a738:	f083 0301 	eor.w	r3, r3, #1
 800a73c:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
			pstate->cfg_stream_count = 1;
 800a740:	2301      	movs	r3, #1
 800a742:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800a746:	f894 337f 	ldrb.w	r3, [r4, #895]	@ 0x37f
 800a74a:	b94b      	cbnz	r3, 800a760 <VL53L1_update_ll_driver_cfg_state+0x112>
				pstate->cfg_internal_stream_count = 1;
 800a74c:	2301      	movs	r3, #1
 800a74e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
				pstate->cfg_internal_stream_count_val = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
			pstate->cfg_device_state =
 800a758:	2304      	movs	r3, #4
 800a75a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			break;
 800a75e:	e790      	b.n	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
				pstate->cfg_internal_stream_count = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
				pstate->cfg_internal_stream_count_val = 1;
 800a766:	2301      	movs	r3, #1
 800a768:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 800a76c:	e7f4      	b.n	800a758 <VL53L1_update_ll_driver_cfg_state+0x10a>
			pstate->cfg_zone_id++;
 800a76e:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800a772:	3301      	adds	r3, #1
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
				pdev->zone_cfg.active_zones) {
 800a77a:	f894 20db 	ldrb.w	r2, [r4, #219]	@ 0xdb
			if (pstate->cfg_zone_id >
 800a77e:	4293      	cmp	r3, r2
 800a780:	f67f af7f 	bls.w	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
				pstate->cfg_timing_status ^= 0x01;
 800a78a:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 800a78e:	f083 0301 	eor.w	r3, r3, #1
 800a792:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
				if (pdev->zone_cfg.active_zones > 0) {
 800a796:	2a00      	cmp	r2, #0
 800a798:	f43f af73 	beq.w	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
					pstate->cfg_device_state =
 800a79c:	2305      	movs	r3, #5
 800a79e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a7a2:	e76e      	b.n	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
			pstate->cfg_zone_id++;
 800a7a4:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
				pdev->zone_cfg.active_zones) {
 800a7b0:	f894 20db 	ldrb.w	r2, [r4, #219]	@ 0xdb
			if (pstate->cfg_zone_id >
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	f67f af64 	bls.w	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
				pstate->cfg_timing_status ^= 0x01;
 800a7c0:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 800a7c4:	f083 0301 	eor.w	r3, r3, #1
 800a7c8:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
 800a7cc:	e759      	b.n	800a682 <VL53L1_update_ll_driver_cfg_state+0x34>
			= prev_cfg_stream_count;
 800a7ce:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800a7d2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800a7d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a7da:	f883 7792 	strb.w	r7, [r3, #1938]	@ 0x792
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800a7de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800a7e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800a7e6:	f884 6793 	strb.w	r6, [r4, #1939]	@ 0x793
 800a7ea:	e762      	b.n	800a6b2 <VL53L1_update_ll_driver_cfg_state+0x64>

0800a7ec <VL53L1_set_histogram_multizone_initial_bin_config>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800a7ec:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d010      	beq.n	800a816 <VL53L1_set_histogram_multizone_initial_bin_config+0x2a>
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
	} else if (pzone_cfg->bin_config[0] ==
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d01c      	beq.n	800a832 <VL53L1_set_histogram_multizone_initial_bin_config+0x46>
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
	} else if (pzone_cfg->bin_config[0] ==
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d118      	bne.n	800a82e <VL53L1_set_histogram_multizone_initial_bin_config+0x42>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a7fc:	7bd3      	ldrb	r3, [r2, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a7fe:	704b      	strb	r3, [r1, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a800:	7c13      	ldrb	r3, [r2, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a802:	708b      	strb	r3, [r1, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a804:	7c53      	ldrb	r3, [r2, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a806:	70cb      	strb	r3, [r1, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a808:	7bd3      	ldrb	r3, [r2, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a80a:	710b      	strb	r3, [r1, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a80c:	7c13      	ldrb	r3, [r2, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a80e:	714b      	strb	r3, [r1, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a810:	7c53      	ldrb	r3, [r2, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a812:	718b      	strb	r3, [r1, #6]
 800a814:	e00b      	b.n	800a82e <VL53L1_set_histogram_multizone_initial_bin_config+0x42>
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a816:	7853      	ldrb	r3, [r2, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a818:	704b      	strb	r3, [r1, #1]
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a81a:	7893      	ldrb	r3, [r2, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a81c:	708b      	strb	r3, [r1, #2]
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a81e:	78d3      	ldrb	r3, [r2, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a820:	70cb      	strb	r3, [r1, #3]
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a822:	7853      	ldrb	r3, [r2, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a824:	710b      	strb	r3, [r1, #4]
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a826:	7893      	ldrb	r3, [r2, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a828:	714b      	strb	r3, [r1, #5]
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a82a:	78d3      	ldrb	r3, [r2, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a82c:	718b      	strb	r3, [r1, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
}
 800a82e:	2000      	movs	r0, #0
 800a830:	4770      	bx	lr
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a832:	79d3      	ldrb	r3, [r2, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a834:	704b      	strb	r3, [r1, #1]
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a836:	7a13      	ldrb	r3, [r2, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a838:	708b      	strb	r3, [r1, #2]
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a83a:	7a53      	ldrb	r3, [r2, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a83c:	70cb      	strb	r3, [r1, #3]
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a83e:	79d3      	ldrb	r3, [r2, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a840:	710b      	strb	r3, [r1, #4]
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a842:	7a13      	ldrb	r3, [r2, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a844:	714b      	strb	r3, [r1, #5]
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a846:	7a53      	ldrb	r3, [r2, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a848:	718b      	strb	r3, [r1, #6]
 800a84a:	e7f0      	b.n	800a82e <VL53L1_set_histogram_multizone_initial_bin_config+0x42>

0800a84c <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a84e:	b083      	sub	sp, #12
 800a850:	4604      	mov	r4, r0
 800a852:	460e      	mov	r6, r1
 800a854:	4617      	mov	r7, r2
 800a856:	461d      	mov	r5, r3

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800a858:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 800a85c:	f7fe ff52 	bl	8009704 <VL53L1_calc_macro_period_us>
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a860:	4603      	mov	r3, r0
 800a862:	b900      	cbnz	r0, 800a866 <VL53L1_set_ref_spad_char_config+0x1a>
		macro_period_us = 1;
 800a864:	2301      	movs	r3, #1



	timeout_mclks = phasecal_timeout_us << 12;
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a866:	085a      	lsrs	r2, r3, #1
 800a868:	eb02 3207 	add.w	r2, r2, r7, lsl #12
	timeout_mclks = timeout_mclks / macro_period_us;
 800a86c:	fbb2 f2f3 	udiv	r2, r2, r3

	if (timeout_mclks > 0xFF)
 800a870:	2aff      	cmp	r2, #255	@ 0xff
 800a872:	d919      	bls.n	800a8a8 <VL53L1_set_ref_spad_char_config+0x5c>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a874:	23ff      	movs	r3, #255	@ 0xff
 800a876:	f884 3385 	strb.w	r3, [r4, #901]	@ 0x385
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a87a:	f884 639a 	strb.w	r6, [r4, #922]	@ 0x39a



	if (status == VL53L1_ERROR_NONE)
		status =
			VL53L1_WrByte(
 800a87e:	f894 2385 	ldrb.w	r2, [r4, #901]	@ 0x385
 800a882:	214b      	movs	r1, #75	@ 0x4b
 800a884:	4620      	mov	r0, r4
 800a886:	f002 fd4b 	bl	800d320 <VL53L1_WrByte>
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800a88a:	4601      	mov	r1, r0
 800a88c:	b178      	cbz	r0, 800a8ae <VL53L1_set_ref_spad_char_config+0x62>
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a88e:	f894 339a 	ldrb.w	r3, [r4, #922]	@ 0x39a
 800a892:	f88d 3004 	strb.w	r3, [sp, #4]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a896:	f88d 3005 	strb.w	r3, [sp, #5]

	if (status == VL53L1_ERROR_NONE)
 800a89a:	b181      	cbz	r1, 800a8be <VL53L1_set_ref_spad_char_config+0x72>
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a89c:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
			VL53L1_WrWord(
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800a8a0:	b1f9      	cbz	r1, 800a8e2 <VL53L1_set_ref_spad_char_config+0x96>
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
}
 800a8a2:	4608      	mov	r0, r1
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a8a8:	f884 2385 	strb.w	r2, [r4, #901]	@ 0x385
 800a8ac:	e7e5      	b.n	800a87a <VL53L1_set_ref_spad_char_config+0x2e>
			VL53L1_WrByte(
 800a8ae:	f894 239a 	ldrb.w	r2, [r4, #922]	@ 0x39a
 800a8b2:	2160      	movs	r1, #96	@ 0x60
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f002 fd33 	bl	800d320 <VL53L1_WrByte>
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	e7e7      	b.n	800a88e <VL53L1_set_ref_spad_char_config+0x42>
			VL53L1_WriteMulti(
 800a8be:	2302      	movs	r3, #2
 800a8c0:	aa01      	add	r2, sp, #4
 800a8c2:	2178      	movs	r1, #120	@ 0x78
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f002 fced 	bl	800d2a4 <VL53L1_WriteMulti>
	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a8ca:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
	if (status == VL53L1_ERROR_NONE)
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1e6      	bne.n	800a8a2 <VL53L1_set_ref_spad_char_config+0x56>
			VL53L1_WrWord(
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	211c      	movs	r1, #28
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f002 fd35 	bl	800d348 <VL53L1_WrWord>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	e7de      	b.n	800a8a0 <VL53L1_set_ref_spad_char_config+0x54>
			VL53L1_WrWord(
 800a8e2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a8e6:	2164      	movs	r1, #100	@ 0x64
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f002 fd2d 	bl	800d348 <VL53L1_WrWord>
	if (status == VL53L1_ERROR_NONE)
 800a8ee:	4601      	mov	r1, r0
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d1d6      	bne.n	800a8a2 <VL53L1_set_ref_spad_char_config+0x56>
			VL53L1_WrWord(
 800a8f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800a8f8:	2166      	movs	r1, #102	@ 0x66
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f002 fd24 	bl	800d348 <VL53L1_WrWord>
 800a900:	4601      	mov	r1, r0
 800a902:	e7ce      	b.n	800a8a2 <VL53L1_set_ref_spad_char_config+0x56>

0800a904 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800a904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a908:	4604      	mov	r4, r0
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a90a:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800a90e:	f8d3 7750 	ldr.w	r7, [r3, #1872]	@ 0x750
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800a912:	b90f      	cbnz	r7, 800a918 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x14>
		peak_duration_us = 1000;
 800a914:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8

	temp64a = pxmonitor->VL53L1_p_021 +
 800a918:	f504 48c0 	add.w	r8, r4, #24576	@ 0x6000
 800a91c:	f8d8 275c 	ldr.w	r2, [r8, #1884]	@ 0x75c
		pxmonitor->VL53L1_p_020;
 800a920:	f8d8 3758 	ldr.w	r3, [r8, #1880]	@ 0x758
	temp64a = pxmonitor->VL53L1_p_021 +
 800a924:	441a      	add	r2, r3
 800a926:	2500      	movs	r5, #0
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a928:	0ed3      	lsrs	r3, r2, #27
 800a92a:	0151      	lsls	r1, r2, #5
 800a92c:	1a89      	subs	r1, r1, r2
 800a92e:	f163 0300 	sbc.w	r3, r3, #0
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a938:	0089      	lsls	r1, r1, #2
 800a93a:	1889      	adds	r1, r1, r2
 800a93c:	f143 0300 	adc.w	r3, r3, #0
 800a940:	00de      	lsls	r6, r3, #3
 800a942:	463a      	mov	r2, r7
 800a944:	462b      	mov	r3, r5
 800a946:	00c8      	lsls	r0, r1, #3
 800a948:	ea46 7151 	orr.w	r1, r6, r1, lsr #29
 800a94c:	f7f5 fc74 	bl	8000238 <__aeabi_uldivmod>
 800a950:	4602      	mov	r2, r0
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a952:	014b      	lsls	r3, r1, #5
 800a954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a958:	0140      	lsls	r0, r0, #5
 800a95a:	1a80      	subs	r0, r0, r2
 800a95c:	eb63 0301 	sbc.w	r3, r3, r1
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a966:	0080      	lsls	r0, r0, #2
 800a968:	1886      	adds	r6, r0, r2
 800a96a:	eb43 0101 	adc.w	r1, r3, r1
 800a96e:	00c9      	lsls	r1, r1, #3
 800a970:	463a      	mov	r2, r7
 800a972:	462b      	mov	r3, r5
 800a974:	00f0      	lsls	r0, r6, #3
 800a976:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
 800a97a:	f7f5 fc5d 	bl	8000238 <__aeabi_uldivmod>
 800a97e:	4607      	mov	r7, r0
 800a980:	468c      	mov	ip, r1

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800a982:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800a986:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 800a98a:	f8b8 274a 	ldrh.w	r2, [r8, #1866]	@ 0x74a
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	461e      	mov	r6, r3
	if (temp64z == 0)
 800a994:	b903      	cbnz	r3, 800a998 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x94>
		temp64z = 1;
 800a996:	2601      	movs	r6, #1
	temp64a = temp64a * 1000 * 256;
 800a998:	014a      	lsls	r2, r1, #5
 800a99a:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
 800a99e:	0143      	lsls	r3, r0, #5
 800a9a0:	1bdb      	subs	r3, r3, r7
 800a9a2:	eb62 020c 	sbc.w	r2, r2, ip
 800a9a6:	0092      	lsls	r2, r2, #2
 800a9a8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	19df      	adds	r7, r3, r7
 800a9b0:	eb42 0101 	adc.w	r1, r2, r1
 800a9b4:	02c9      	lsls	r1, r1, #11
	temp64a = do_division_u(temp64a, temp64z);
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	462b      	mov	r3, r5
 800a9ba:	02f8      	lsls	r0, r7, #11
 800a9bc:	ea41 5157 	orr.w	r1, r1, r7, lsr #21
 800a9c0:	f7f5 fc3a 	bl	8000238 <__aeabi_uldivmod>
	temp64a = temp64a * 1000 * 256;
 800a9c4:	014b      	lsls	r3, r1, #5
 800a9c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a9ca:	0142      	lsls	r2, r0, #5
 800a9cc:	1a12      	subs	r2, r2, r0
 800a9ce:	eb63 0301 	sbc.w	r3, r3, r1
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800a9d8:	0092      	lsls	r2, r2, #2
 800a9da:	1817      	adds	r7, r2, r0
 800a9dc:	eb43 0101 	adc.w	r1, r3, r1
 800a9e0:	02c9      	lsls	r1, r1, #11
	temp64a = do_division_u(temp64a, temp64z);
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	462b      	mov	r3, r5
 800a9e6:	02f8      	lsls	r0, r7, #11
 800a9e8:	ea41 5157 	orr.w	r1, r1, r7, lsr #21
 800a9ec:	f7f5 fc24 	bl	8000238 <__aeabi_uldivmod>

	pint->required_samples = (uint32_t)temp64a;
 800a9f0:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800a9f4:	f8c3 0478 	str.w	r0, [r3, #1144]	@ 0x478


	if (pint->required_samples < 2)
 800a9f8:	2801      	cmp	r0, #1
 800a9fa:	d902      	bls.n	800aa02 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0xfe>
		pint->required_samples = 2;

	LOG_FUNCTION_END(status);

	return status;
}
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pint->required_samples = 2;
 800aa02:	461c      	mov	r4, r3
 800aa04:	2302      	movs	r3, #2
 800aa06:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
 800aa0a:	e7f7      	b.n	800a9fc <VL53L1_dynamic_xtalk_correction_calc_required_samples+0xf8>

0800aa0c <VL53L1_dynamic_xtalk_correction_output_init>:
}

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800aa0c:	4603      	mov	r3, r0
	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);

	pdata->smudge_corr_valid = 0;
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f883 0190 	strb.w	r0, [r3, #400]	@ 0x190
	pdata->smudge_corr_clipped = 0;
 800aa14:	f883 0191 	strb.w	r0, [r3, #401]	@ 0x191
	pdata->single_xtalk_delta_flag = 0;
 800aa18:	f883 0192 	strb.w	r0, [r3, #402]	@ 0x192
	pdata->averaged_xtalk_delta_flag = 0;
 800aa1c:	f883 0193 	strb.w	r0, [r3, #403]	@ 0x193
	pdata->sample_limit_exceeded_flag = 0;
 800aa20:	f883 0194 	strb.w	r0, [r3, #404]	@ 0x194
	pdata->gradient_zero_flag = 0;
 800aa24:	f883 0195 	strb.w	r0, [r3, #405]	@ 0x195
	pdata->new_xtalk_applied_flag = 0;
 800aa28:	f883 0196 	strb.w	r0, [r3, #406]	@ 0x196

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800aa2c:	f8c3 0198 	str.w	r0, [r3, #408]	@ 0x198
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800aa30:	f8a3 019c 	strh.w	r0, [r3, #412]	@ 0x19c
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800aa34:	f8a3 019e 	strh.w	r0, [r3, #414]	@ 0x19e

	LOG_FUNCTION_END(status);

	return status;
}
 800aa38:	4770      	bx	lr
 800aa3a:	0000      	movs	r0, r0
 800aa3c:	0000      	movs	r0, r0
	...

0800aa40 <VL53L1_dynamic_xtalk_correction_data_init>:
{
 800aa40:	b510      	push	{r4, lr}
 800aa42:	4602      	mov	r2, r0
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800aa44:	f500 40cb 	add.w	r0, r0, #25984	@ 0x6580
 800aa48:	3070      	adds	r0, #112	@ 0x70
	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800aa4a:	f502 5180 	add.w	r1, r2, #4096	@ 0x1000
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f881 33f4 	strb.w	r3, [r1, #1012]	@ 0x3f4
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800aa54:	f881 33f5 	strb.w	r3, [r1, #1013]	@ 0x3f5
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f881 33f6 	strb.w	r3, [r1, #1014]	@ 0x3f6
	pdev->smudge_correct_config.smudge_margin =
 800aa5e:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800aa62:	f8a1 43f8 	strh.w	r4, [r1, #1016]	@ 0x3f8
	pdev->smudge_correct_config.noise_margin =
 800aa66:	f44f 74fa 	mov.w	r4, #500	@ 0x1f4
 800aa6a:	f8c1 43fc 	str.w	r4, [r1, #1020]	@ 0x3fc
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800aa6e:	f8c1 3400 	str.w	r3, [r1, #1024]	@ 0x400
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800aa72:	f881 3404 	strb.w	r3, [r1, #1028]	@ 0x404
	pdev->smudge_correct_config.sample_limit =
 800aa76:	24c8      	movs	r4, #200	@ 0xc8
 800aa78:	f8c1 4408 	str.w	r4, [r1, #1032]	@ 0x408
	pdev->smudge_correct_config.single_xtalk_delta =
 800aa7c:	f44f 5420 	mov.w	r4, #10240	@ 0x2800
 800aa80:	f8c1 440c 	str.w	r4, [r1, #1036]	@ 0x40c
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800aa84:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800aa88:	f8c1 4410 	str.w	r4, [r1, #1040]	@ 0x410
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800aa8c:	4c26      	ldr	r4, [pc, #152]	@ (800ab28 <VL53L1_dynamic_xtalk_correction_data_init+0xe8>)
 800aa8e:	f8c1 4414 	str.w	r4, [r1, #1044]	@ 0x414
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800aa92:	f44f 64a0 	mov.w	r4, #1280	@ 0x500
 800aa96:	f8c1 4418 	str.w	r4, [r1, #1048]	@ 0x418
	pdev->smudge_correct_config.scaler_calc_method =
 800aa9a:	f881 341c 	strb.w	r3, [r1, #1052]	@ 0x41c
	pdev->smudge_correct_config.x_gradient_scaler =
 800aa9e:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800aaa2:	f8a1 441e 	strh.w	r4, [r1, #1054]	@ 0x41e
	pdev->smudge_correct_config.y_gradient_scaler =
 800aaa6:	f8a1 4420 	strh.w	r4, [r1, #1056]	@ 0x420
	pdev->smudge_correct_config.user_scaler_set =
 800aaaa:	f881 3422 	strb.w	r3, [r1, #1058]	@ 0x422
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800aaae:	f04f 745c 	mov.w	r4, #57671680	@ 0x3700000
 800aab2:	f8c1 4424 	str.w	r4, [r1, #1060]	@ 0x424
	pdev->smudge_correct_config.nodetect_sample_limit =
 800aab6:	240a      	movs	r4, #10
 800aab8:	f8c1 4428 	str.w	r4, [r1, #1064]	@ 0x428
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800aabc:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800aac0:	f8c1 442c 	str.w	r4, [r1, #1068]	@ 0x42c
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800aac4:	f44f 7461 	mov.w	r4, #900	@ 0x384
 800aac8:	f8a1 4430 	strh.w	r4, [r1, #1072]	@ 0x430
	pdev->smudge_correct_config.max_smudge_factor =
 800aacc:	4c17      	ldr	r4, [pc, #92]	@ (800ab2c <VL53L1_dynamic_xtalk_correction_data_init+0xec>)
 800aace:	f8c1 4434 	str.w	r4, [r1, #1076]	@ 0x434
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++)
 800aad2:	e018      	b.n	800ab06 <VL53L1_dynamic_xtalk_correction_data_init+0xc6>
		pdev->smudge_corrector_internals.current_samples[i] = 0;
 800aad4:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 800aad8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800aadc:	2400      	movs	r4, #0
 800aade:	618c      	str	r4, [r1, #24]
		pdev->smudge_corrector_internals.accumulator[i] = 0;
 800aae0:	f203 218d 	addw	r1, r3, #653	@ 0x28d
 800aae4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800aae8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ab20 <VL53L1_dynamic_xtalk_correction_data_init+0xe0>
 800aaec:	ed81 7b06 	vstr	d7, [r1, #24]
		pdev->smudge_corrector_internals.nodetect_counter[i] = 0;
 800aaf0:	f203 513a 	addw	r1, r3, #1338	@ 0x53a
 800aaf4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800aaf8:	618c      	str	r4, [r1, #24]
		pdev->smudge_corrector_internals.previous_xtalk[i] = 0;
 800aafa:	f203 514a 	addw	r1, r3, #1354	@ 0x54a
 800aafe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ab02:	618c      	str	r4, [r1, #24]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++)
 800ab04:	3301      	adds	r3, #1
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	dde4      	ble.n	800aad4 <VL53L1_dynamic_xtalk_correction_data_init+0x94>
	pdev->smudge_corrector_internals.required_samples = 0;
 800ab0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab0e:	2400      	movs	r4, #0
 800ab10:	f8c2 4478 	str.w	r4, [r2, #1144]	@ 0x478
	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800ab14:	f7ff ff7a 	bl	800aa0c <VL53L1_dynamic_xtalk_correction_output_init>
}
 800ab18:	4620      	mov	r0, r4
 800ab1a:	bd10      	pop	{r4, pc}
 800ab1c:	f3af 8000 	nop.w
	...
 800ab28:	000ff800 	.word	0x000ff800
 800ab2c:	00177000 	.word	0x00177000

0800ab30 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800ab30:	4603      	mov	r3, r0

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ab32:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800ab36:	2000      	movs	r0, #0
 800ab38:	f8c2 029c 	str.w	r0, [r2, #668]	@ 0x29c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ab3c:	f8a2 02a0 	strh.w	r0, [r2, #672]	@ 0x2a0
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ab40:	f8a2 02a2 	strh.w	r0, [r2, #674]	@ 0x2a2
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800ab44:	3318      	adds	r3, #24
 800ab46:	f241 218c 	movw	r1, #4748	@ 0x128c
 800ab4a:	185a      	adds	r2, r3, r1
 800ab4c:	5058      	str	r0, [r3, r1]
 800ab4e:	6050      	str	r0, [r2, #4]
 800ab50:	6090      	str	r0, [r2, #8]
 800ab52:	60d0      	str	r0, [r2, #12]
 800ab54:	6110      	str	r0, [r2, #16]
 800ab56:	6150      	str	r0, [r2, #20]
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
}
 800ab58:	4770      	bx	lr

0800ab5a <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800ab5a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800ab5e:	2203      	movs	r2, #3
 800ab60:	f883 2580 	strb.w	r2, [r3, #1408]	@ 0x580
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800ab64:	2000      	movs	r0, #0
 800ab66:	f883 0581 	strb.w	r0, [r3, #1409]	@ 0x581
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800ab6a:	f883 0582 	strb.w	r0, [r3, #1410]	@ 0x582
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800ab6e:	f883 0583 	strb.w	r0, [r3, #1411]	@ 0x583
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800ab72:	f883 0584 	strb.w	r0, [r3, #1412]	@ 0x584
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800ab76:	f883 0585 	strb.w	r0, [r3, #1413]	@ 0x585
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ab7a:	f883 0586 	strb.w	r0, [r3, #1414]	@ 0x586
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ab7e:	f8c3 0588 	str.w	r0, [r3, #1416]	@ 0x588
	pdev->low_power_auto_data.dss__required_spads = 0;
 800ab82:	f8a3 058c 	strh.w	r0, [r3, #1420]	@ 0x58c

	LOG_FUNCTION_END(status);

	return status;
}
 800ab86:	4770      	bx	lr

0800ab88 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800ab88:	4603      	mov	r3, r0

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800ab8a:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800ab8e:	21ff      	movs	r1, #255	@ 0xff
 800ab90:	f882 1582 	strb.w	r1, [r2, #1410]	@ 0x582

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ab94:	2100      	movs	r1, #0
 800ab96:	f882 1586 	strb.w	r1, [r2, #1414]	@ 0x586
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ab9a:	f8c2 1588 	str.w	r1, [r2, #1416]	@ 0x588
	pdev->low_power_auto_data.dss__required_spads = 0;
 800ab9e:	f8a2 158c 	strh.w	r1, [r2, #1420]	@ 0x58c


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800aba2:	f892 2584 	ldrb.w	r2, [r2, #1412]	@ 0x584
 800aba6:	b10a      	cbz	r2, 800abac <VL53L1_low_power_auto_data_stop_range+0x24>
		pdev->stat_nvm.vhv_config__init =
 800aba8:	f880 2343 	strb.w	r2, [r0, #835]	@ 0x343
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800abac:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800abb0:	f892 2585 	ldrb.w	r2, [r2, #1413]	@ 0x585
 800abb4:	b10a      	cbz	r2, 800abba <VL53L1_low_power_auto_data_stop_range+0x32>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800abb6:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
			pdev->low_power_auto_data.saved_vhv_timeout;


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800abba:	2000      	movs	r0, #0
 800abbc:	f883 0387 	strb.w	r0, [r3, #903]	@ 0x387

	LOG_FUNCTION_END(status);

	return status;
}
 800abc0:	4770      	bx	lr

0800abc2 <VL53L1_config_low_power_auto_mode>:
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800abc2:	2301      	movs	r3, #1
 800abc4:	7053      	strb	r3, [r2, #1]


	plpadata->low_power_auto_range_count = 0;
 800abc6:	2000      	movs	r0, #0
 800abc8:	7090      	strb	r0, [r2, #2]


	pdynamic->system__sequence_config =
 800abca:	239b      	movs	r3, #155	@ 0x9b
 800abcc:	744b      	strb	r3, [r1, #17]
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
}
 800abce:	4770      	bx	lr

0800abd0 <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800abd0:	f890 1343 	ldrb.w	r1, [r0, #835]	@ 0x343
	pdev->low_power_auto_data.saved_vhv_init =
 800abd4:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800abd8:	f882 1584 	strb.w	r1, [r2, #1412]	@ 0x584
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800abdc:	f890 3340 	ldrb.w	r3, [r0, #832]	@ 0x340
	pdev->low_power_auto_data.saved_vhv_timeout =
 800abe0:	f882 3585 	strb.w	r3, [r2, #1413]	@ 0x585


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800abe4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800abe8:	f880 1343 	strb.w	r1, [r0, #835]	@ 0x343

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800abec:	f003 0303 	and.w	r3, r3, #3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800abf0:	f892 1580 	ldrb.w	r1, [r2, #1408]	@ 0x580
 800abf4:	0089      	lsls	r1, r1, #2
 800abf6:	b2c9      	uxtb	r1, r1
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800abf8:	440b      	add	r3, r1
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800abfa:	f880 3340 	strb.w	r3, [r0, #832]	@ 0x340

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800abfe:	2301      	movs	r3, #1
 800ac00:	f880 3387 	strb.w	r3, [r0, #903]	@ 0x387
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800ac04:	f892 33be 	ldrb.w	r3, [r2, #958]	@ 0x3be
	pdev->low_power_auto_data.first_run_phasecal_result =
 800ac08:	f882 3586 	strb.w	r3, [r2, #1414]	@ 0x586
	pdev->gen_cfg.cal_config__vcsel_start =
 800ac0c:	f880 3381 	strb.w	r3, [r0, #897]	@ 0x381
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 800ac10:	2000      	movs	r0, #0
 800ac12:	4770      	bx	lr

0800ac14 <VL53L1_compute_nb_frame_in_buffer>:



VL53L1_Error VL53L1_compute_nb_frame_in_buffer(
	VL53L1_DEV        Dev,	uint8_t *histo_frame_nb, uint8_t roi, uint8_t timing)
{
 800ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	4611      	mov	r1, r2
 800ac1a:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	uint8_t i, j;
	uint8_t sum = 0;
 800ac1c:	2600      	movs	r6, #0
	uint8_t flag;

	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800ac1e:	4633      	mov	r3, r6
 800ac20:	e022      	b.n	800ac68 <VL53L1_compute_nb_frame_in_buffer+0x54>
	{
		flag = 0;
		for (j = 0; j < VL53L1_HISTOGRAM_BUFFER_SIZE; j++)
 800ac22:	f10e 0e01 	add.w	lr, lr, #1
 800ac26:	fa5f fe8e 	uxtb.w	lr, lr
 800ac2a:	f1be 0f17 	cmp.w	lr, #23
 800ac2e:	d816      	bhi.n	800ac5e <VL53L1_compute_nb_frame_in_buffer+0x4a>
			if (pdev->multi_bins_rec[roi][i][timing][j] > 0)
 800ac30:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 800ac34:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ac38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800ac3c:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
 800ac40:	eb01 07c1 	add.w	r7, r1, r1, lsl #3
 800ac44:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 800ac48:	44f4      	add	ip, lr
 800ac4a:	f50c 6cec 	add.w	ip, ip, #1888	@ 0x760
 800ac4e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800ac52:	f8dc 701c 	ldr.w	r7, [ip, #28]
 800ac56:	2f00      	cmp	r7, #0
 800ac58:	dde3      	ble.n	800ac22 <VL53L1_compute_nb_frame_in_buffer+0xe>
				flag = 1;
 800ac5a:	2501      	movs	r5, #1
 800ac5c:	e7e1      	b.n	800ac22 <VL53L1_compute_nb_frame_in_buffer+0xe>
		if (flag > 0)
 800ac5e:	b10d      	cbz	r5, 800ac64 <VL53L1_compute_nb_frame_in_buffer+0x50>
			sum++;
 800ac60:	3601      	adds	r6, #1
 800ac62:	b2f6      	uxtb	r6, r6
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800ac64:	3301      	adds	r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b05      	cmp	r3, #5
 800ac6a:	d802      	bhi.n	800ac72 <VL53L1_compute_nb_frame_in_buffer+0x5e>
		flag = 0;
 800ac6c:	2500      	movs	r5, #0
		for (j = 0; j < VL53L1_HISTOGRAM_BUFFER_SIZE; j++)
 800ac6e:	46ae      	mov	lr, r5
 800ac70:	e7db      	b.n	800ac2a <VL53L1_compute_nb_frame_in_buffer+0x16>
	}
	*histo_frame_nb = sum;
 800ac72:	7026      	strb	r6, [r4, #0]

	return status;
}
 800ac74:	2000      	movs	r0, #0
 800ac76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac78 <VL53L1_compute_histo_merge_nb>:

VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1

	int32_t hist_merge;
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	uint8_t roi = pdev->ll_state.rd_zone_id;
	uint8_t timing = pdev->hist_data.number_of_ambient_bins / 4;
 800ac80:	f890 342f 	ldrb.w	r3, [r0, #1071]	@ 0x42f

	status = VL53L1_compute_nb_frame_in_buffer(Dev, histo_merge_nb, roi, timing);
 800ac84:	089b      	lsrs	r3, r3, #2
 800ac86:	f890 2051 	ldrb.w	r2, [r0, #81]	@ 0x51
 800ac8a:	f7ff ffc3 	bl	800ac14 <VL53L1_compute_nb_frame_in_buffer>
 800ac8e:	4606      	mov	r6, r0
	if (*histo_merge_nb == 0)
 800ac90:	782b      	ldrb	r3, [r5, #0]
 800ac92:	b90b      	cbnz	r3, 800ac98 <VL53L1_compute_histo_merge_nb+0x20>
		*histo_merge_nb = 1;
 800ac94:	2301      	movs	r3, #1
 800ac96:	702b      	strb	r3, [r5, #0]

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE, &hist_merge);
 800ac98:	aa01      	add	r2, sp, #4
 800ac9a:	f248 018d 	movw	r1, #32909	@ 0x808d
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7fb fcd2 	bl	8006648 <VL53L1_get_tuning_parm>
	if (hist_merge == 0)
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	b90b      	cbnz	r3, 800acac <VL53L1_compute_histo_merge_nb+0x34>
		*histo_merge_nb = 1;
 800aca8:	2301      	movs	r3, #1
 800acaa:	702b      	strb	r3, [r5, #0]

	return status;
}
 800acac:	4630      	mov	r0, r6
 800acae:	b002      	add	sp, #8
 800acb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acb4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
{
 800acb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acb8:	b083      	sub	sp, #12
 800acba:	4605      	mov	r5, r0
 800acbc:	4614      	mov	r4, r2
 800acbe:	461e      	mov	r6, r3
 800acc0:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
	merge_enabled = pdev->tuning_parms.tp_hist_merge;
 800acc4:	f890 81cc 	ldrb.w	r8, [r0, #460]	@ 0x1cc
	if (add_smudge == 1) {
 800acc8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800accc:	2b01      	cmp	r3, #1
 800acce:	d059      	beq.n	800ad84 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800acd0:	60b1      	str	r1, [r6, #8]
	orig_xtalk_offset =
 800acd2:	f8d5 12f4 	ldr.w	r1, [r5, #756]	@ 0x2f4
	orig_x_gradient =
 800acd6:	f9b5 c2f8 	ldrsh.w	ip, [r5, #760]	@ 0x2f8
	orig_y_gradient =
 800acda:	f9b5 02fa 	ldrsh.w	r0, [r5, #762]	@ 0x2fa
	if (((pconfig->user_scaler_set == 0) ||
 800acde:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ace2:	b11b      	cbz	r3, 800acec <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x38>
		(pconfig->scaler_calc_method == 1)) &&
 800ace4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d105      	bne.n	800acf8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800acec:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 800acf0:	f8d3 329c 	ldr.w	r3, [r3, #668]	@ 0x29c
		(pconfig->scaler_calc_method == 1)) &&
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d149      	bne.n	800ad8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd8>
	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800acf8:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800acfc:	b933      	cbnz	r3, 800ad0c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x58>
 800acfe:	f1bc 0f00 	cmp.w	ip, #0
 800ad02:	d103      	bne.n	800ad0c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x58>
		pout->gradient_zero_flag |= 0x01;
 800ad04:	7973      	ldrb	r3, [r6, #5]
 800ad06:	f043 0301 	orr.w	r3, r3, #1
 800ad0a:	7173      	strb	r3, [r6, #5]
	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800ad0c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ad10:	b923      	cbnz	r3, 800ad1c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x68>
 800ad12:	b918      	cbnz	r0, 800ad1c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x68>
		pout->gradient_zero_flag |= 0x02;
 800ad14:	7973      	ldrb	r3, [r6, #5]
 800ad16:	f043 0302 	orr.w	r3, r3, #2
 800ad1a:	7173      	strb	r3, [r6, #5]
	if (orig_xtalk_offset == 0)
 800ad1c:	b901      	cbnz	r1, 800ad20 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6c>
		orig_xtalk_offset = 1;
 800ad1e:	2101      	movs	r1, #1
	if (pconfig->user_scaler_set == 1) {
 800ad20:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d054      	beq.n	800add2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x11e>
		x_gradient_scaler = (int16_t)do_division_s(
 800ad28:	ea4f 128c 	mov.w	r2, ip, lsl #6
 800ad2c:	fbb2 f2f1 	udiv	r2, r2, r1
 800ad30:	b212      	sxth	r2, r2
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800ad32:	8562      	strh	r2, [r4, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800ad34:	0183      	lsls	r3, r0, #6
 800ad36:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad3a:	b21b      	sxth	r3, r3
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800ad3c:	85a3      	strh	r3, [r4, #44]	@ 0x2c
	if (pconfig->scaler_calc_method == 0) {
 800ad3e:	f894 e028 	ldrb.w	lr, [r4, #40]	@ 0x28
 800ad42:	f1be 0f00 	cmp.w	lr, #0
 800ad46:	d149      	bne.n	800addc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x128>
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ad48:	68b1      	ldr	r1, [r6, #8]
 800ad4a:	fb01 f202 	mul.w	r2, r1, r2
		itemp32 = itemp32 >> 6;
 800ad4e:	1190      	asrs	r0, r2, #6
		if (itemp32 > 0xFFFF)
 800ad50:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800ad54:	db01      	blt.n	800ad5a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xa6>
			itemp32 = 0xFFFF;
 800ad56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ad5a:	81b0      	strh	r0, [r6, #12]
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
		itemp32 = itemp32 >> 6;
 800ad60:	119a      	asrs	r2, r3, #6
		if (itemp32 > 0xFFFF)
 800ad62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad66:	db01      	blt.n	800ad6c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb8>
			itemp32 = 0xFFFF;
 800ad68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ad6c:	81f2      	strh	r2, [r6, #14]
	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800ad6e:	7863      	ldrb	r3, [r4, #1]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d057      	beq.n	800ae24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x170>
	if (soft_update != 1)
 800ad74:	2f01      	cmp	r7, #1
 800ad76:	d001      	beq.n	800ad7c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc8>
		pout->smudge_corr_valid = 1;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	7033      	strb	r3, [r6, #0]
}
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	b003      	add	sp, #12
 800ad80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			(uint32_t)pconfig->smudge_margin;
 800ad84:	8893      	ldrh	r3, [r2, #4]
			(uint32_t)xtalk_offset_out +
 800ad86:	440b      	add	r3, r1
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800ad88:	60b3      	str	r3, [r6, #8]
 800ad8a:	e7a2      	b.n	800acd2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1e>
		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ad8c:	f10d 0107 	add.w	r1, sp, #7
 800ad90:	4628      	mov	r0, r5
 800ad92:	f7ff ff71 	bl	800ac78 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800ad96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad9a:	b913      	cbnz	r3, 800ada2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xee>
			histo_merge_nb = 1;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f88d 3007 	strb.w	r3, [sp, #7]
		if (!merge_enabled)
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	d10a      	bne.n	800adbe <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x10a>
			orig_xtalk_offset =
 800ada8:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 800adac:	f8d3 129c 	ldr.w	r1, [r3, #668]	@ 0x29c
		orig_x_gradient =
 800adb0:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 800adb4:	f9b3 c2a0 	ldrsh.w	ip, [r3, #672]	@ 0x2a0
		orig_y_gradient =
 800adb8:	f9b3 02a2 	ldrsh.w	r0, [r3, #674]	@ 0x2a2
 800adbc:	e79c      	b.n	800acf8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x44>
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800adbe:	f89d 2007 	ldrb.w	r2, [sp, #7]
			orig_xtalk_offset =
 800adc2:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 800adc6:	3201      	adds	r2, #1
 800adc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800adcc:	f8d3 129c 	ldr.w	r1, [r3, #668]	@ 0x29c
 800add0:	e7ee      	b.n	800adb0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800add2:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800add6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800adda:	e7b0      	b.n	800ad3e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x8a>
	} else if (pconfig->scaler_calc_method == 1) {
 800addc:	f1be 0f01 	cmp.w	lr, #1
 800ade0:	d1c5      	bne.n	800ad6e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xba>
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ade2:	68b3      	ldr	r3, [r6, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ade4:	1ac9      	subs	r1, r1, r3
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800ade6:	460b      	mov	r3, r1
 800ade8:	2900      	cmp	r1, #0
 800adea:	db18      	blt.n	800ae1e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x16a>
 800adec:	111b      	asrs	r3, r3, #4
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800adee:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
		if (itemp32 > 0xFFFF)
 800adf2:	f5bc 3f80 	cmp.w	ip, #65536	@ 0x10000
 800adf6:	db01      	blt.n	800adfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x148>
			itemp32 = 0xFFFF;
 800adf8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800adfc:	f8a6 c00c 	strh.w	ip, [r6, #12]
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800ae00:	4b26      	ldr	r3, [pc, #152]	@ (800ae9c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1e8>)
 800ae02:	fb83 2301 	smull	r2, r3, r3, r1
 800ae06:	17c9      	asrs	r1, r1, #31
 800ae08:	ebc1 1163 	rsb	r1, r1, r3, asr #5
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800ae0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		if (itemp32 > 0xFFFF)
 800ae10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae14:	db01      	blt.n	800ae1a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x166>
			itemp32 = 0xFFFF;
 800ae16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ae1a:	81f0      	strh	r0, [r6, #14]
 800ae1c:	e7a7      	b.n	800ad6e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xba>
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800ae1e:	f101 030f 	add.w	r3, r1, #15
 800ae22:	e7e3      	b.n	800adec <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x138>
	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800ae24:	2f01      	cmp	r7, #1
 800ae26:	d0a9      	beq.n	800ad7c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc8>
		pout->new_xtalk_applied_flag = 1;
 800ae28:	71b3      	strb	r3, [r6, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ae2a:	f8d6 9008 	ldr.w	r9, [r6, #8]
		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ae2e:	f10d 0107 	add.w	r1, sp, #7
 800ae32:	4628      	mov	r0, r5
 800ae34:	f7ff ff20 	bl	800ac78 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800ae38:	f895 21d4 	ldrb.w	r2, [r5, #468]	@ 0x1d4
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800ae3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae40:	b17b      	cbz	r3, 800ae62 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
 800ae42:	f1b8 0f00 	cmp.w	r8, #0
 800ae46:	d00c      	beq.n	800ae62 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
 800ae48:	f1b9 0f00 	cmp.w	r9, #0
 800ae4c:	d009      	beq.n	800ae62 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			cXtalk =
 800ae4e:	f8d5 32ec 	ldr.w	r3, [r5, #748]	@ 0x2ec
			SmudgeFactor = (long int)(nXtalk) - (long int)(cXtalk);
 800ae52:	eba9 0903 	sub.w	r9, r9, r3
			if ((max ==  0)||
 800ae56:	b112      	cbz	r2, 800ae5e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1aa>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800ae58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
			if ((max ==  0)||
 800ae5a:	454b      	cmp	r3, r9
 800ae5c:	dc01      	bgt.n	800ae62 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
				pout->new_xtalk_applied_flag = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	71b3      	strb	r3, [r6, #6]
		if (pout->new_xtalk_applied_flag) {
 800ae62:	79b3      	ldrb	r3, [r6, #6]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d085      	beq.n	800ad74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
		pdev->smudge_corrector_internals.previous_xtalk[pdev->ll_state.rd_zone_id] = \
 800ae68:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ae6c:	68b2      	ldr	r2, [r6, #8]
		pdev->smudge_corrector_internals.previous_xtalk[pdev->ll_state.rd_zone_id] = \
 800ae6e:	f203 534a 	addw	r3, r3, #1354	@ 0x54a
 800ae72:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ae76:	619a      	str	r2, [r3, #24]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800ae78:	f8c5 22ec 	str.w	r2, [r5, #748]	@ 0x2ec
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ae7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ae80:	f8a5 32f0 	strh.w	r3, [r5, #752]	@ 0x2f0
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ae84:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ae88:	f8a5 32f2 	strh.w	r3, [r5, #754]	@ 0x2f2
		if (pconfig->smudge_corr_single_apply == 1) {
 800ae8c:	78a3      	ldrb	r3, [r4, #2]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	f47f af70 	bne.w	800ad74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
			pconfig->smudge_corr_apply_enabled = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	7063      	strb	r3, [r4, #1]
			pconfig->smudge_corr_single_apply = 0;
 800ae98:	70a3      	strb	r3, [r4, #2]
 800ae9a:	e76b      	b.n	800ad74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
 800ae9c:	66666667 	.word	0x66666667

0800aea0 <VL53L1_dynamic_xtalk_correction_corrector>:
{
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	b085      	sub	sp, #20
 800aea6:	4604      	mov	r4, r0
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800aea8:	f500 45cb 	add.w	r5, r0, #25984	@ 0x6580
 800aeac:	3570      	adds	r5, #112	@ 0x70
	VL53L1_smudge_corrector_config_t *pconfig =
 800aeae:	f500 569f 	add.w	r6, r0, #5088	@ 0x13e0
 800aeb2:	3614      	adds	r6, #20
	VL53L1_smudge_corrector_data_t *pout =
 800aeb4:	f500 48cf 	add.w	r8, r0, #26496	@ 0x6780
	merge_enabled = pdev->tuning_parms.tp_hist_merge;
 800aeb8:	f890 71cc 	ldrb.w	r7, [r0, #460]	@ 0x1cc
	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aebc:	f10d 010f 	add.w	r1, sp, #15
 800aec0:	f7ff feda 	bl	800ac78 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800aec4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800aec8:	b103      	cbz	r3, 800aecc <VL53L1_dynamic_xtalk_correction_corrector+0x2c>
 800aeca:	b917      	cbnz	r7, 800aed2 <VL53L1_dynamic_xtalk_correction_corrector+0x32>
		histo_merge_nb = 1;
 800aecc:	2301      	movs	r3, #1
 800aece:	f88d 300f 	strb.w	r3, [sp, #15]
	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800aed2:	4628      	mov	r0, r5
 800aed4:	f7ff fd9a 	bl	800aa0c <VL53L1_dynamic_xtalk_correction_output_init>
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aed8:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800aedc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800aee0:	b15b      	cbz	r3, 800aefa <VL53L1_dynamic_xtalk_correction_corrector+0x5a>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800aee2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800aee6:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800aeea:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 800aeee:	f8b2 2768 	ldrh.w	r2, [r2, #1896]	@ 0x768
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d90c      	bls.n	800af10 <VL53L1_dynamic_xtalk_correction_corrector+0x70>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e000      	b.n	800aefc <VL53L1_dynamic_xtalk_correction_corrector+0x5c>
 800aefa:	2301      	movs	r3, #1
 800aefc:	b2db      	uxtb	r3, r3
	merging_complete = ((!merge_enabled) ||
 800aefe:	b15f      	cbz	r7, 800af18 <VL53L1_dynamic_xtalk_correction_corrector+0x78>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800af00:	f894 11d4 	ldrb.w	r1, [r4, #468]	@ 0x1d4
 800af04:	f89d 200f 	ldrb.w	r2, [sp, #15]
	merging_complete = ((!merge_enabled) ||
 800af08:	4291      	cmp	r1, r2
 800af0a:	d003      	beq.n	800af14 <VL53L1_dynamic_xtalk_correction_corrector+0x74>
 800af0c:	2000      	movs	r0, #0
 800af0e:	e004      	b.n	800af1a <VL53L1_dynamic_xtalk_correction_corrector+0x7a>
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800af10:	2300      	movs	r3, #0
 800af12:	e7f3      	b.n	800aefc <VL53L1_dynamic_xtalk_correction_corrector+0x5c>
	merging_complete = ((!merge_enabled) ||
 800af14:	2001      	movs	r0, #1
 800af16:	e000      	b.n	800af1a <VL53L1_dynamic_xtalk_correction_corrector+0x7a>
 800af18:	2001      	movs	r0, #1
 800af1a:	b2c0      	uxtb	r0, r0
		(pconfig->smudge_corr_enabled == 1) &&
 800af1c:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800af20:	f892 c3f4 	ldrb.w	ip, [r2, #1012]	@ 0x3f4
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800af24:	f1bc 0f01 	cmp.w	ip, #1
 800af28:	d016      	beq.n	800af58 <VL53L1_dynamic_xtalk_correction_corrector+0xb8>
 800af2a:	2100      	movs	r1, #0
	run_smudge_detection =
 800af2c:	b2c9      	uxtb	r1, r1
	if ((pR->xmonitor.range_status
 800af2e:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800af32:	f893 377e 	ldrb.w	r3, [r3, #1918]	@ 0x77e
 800af36:	2b09      	cmp	r3, #9
 800af38:	f000 8096 	beq.w	800b068 <VL53L1_dynamic_xtalk_correction_corrector+0x1c8>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800af3c:	f1bc 0f01 	cmp.w	ip, #1
 800af40:	d03e      	beq.n	800afc0 <VL53L1_dynamic_xtalk_correction_corrector+0x120>
	uint8_t	run_nodetect = 0;
 800af42:	2500      	movs	r5, #0
	if (run_smudge_detection) {
 800af44:	2900      	cmp	r1, #0
 800af46:	f040 8095 	bne.w	800b074 <VL53L1_dynamic_xtalk_correction_corrector+0x1d4>
	if (run_nodetect == 1) {
 800af4a:	2d01      	cmp	r5, #1
 800af4c:	f000 81ab 	beq.w	800b2a6 <VL53L1_dynamic_xtalk_correction_corrector+0x406>
}
 800af50:	2000      	movs	r0, #0
 800af52:	b005      	add	sp, #20
 800af54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(pconfig->smudge_corr_enabled == 1) &&
 800af58:	b153      	cbz	r3, 800af70 <VL53L1_dynamic_xtalk_correction_corrector+0xd0>
		(pR->xmonitor.range_status
 800af5a:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800af5e:	f893 377e 	ldrb.w	r3, [r3, #1918]	@ 0x77e
		ambient_check &&
 800af62:	2b09      	cmp	r3, #9
 800af64:	d001      	beq.n	800af6a <VL53L1_dynamic_xtalk_correction_corrector+0xca>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800af66:	2100      	movs	r1, #0
 800af68:	e7e0      	b.n	800af2c <VL53L1_dynamic_xtalk_correction_corrector+0x8c>
 800af6a:	b918      	cbnz	r0, 800af74 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
 800af6c:	2100      	movs	r1, #0
 800af6e:	e7dd      	b.n	800af2c <VL53L1_dynamic_xtalk_correction_corrector+0x8c>
 800af70:	2100      	movs	r1, #0
 800af72:	e7db      	b.n	800af2c <VL53L1_dynamic_xtalk_correction_corrector+0x8c>
 800af74:	2101      	movs	r1, #1
 800af76:	e7d9      	b.n	800af2c <VL53L1_dynamic_xtalk_correction_corrector+0x8c>
					run_nodetect = 0;
 800af78:	2500      	movs	r5, #0
		for (i = 0; i < pR->active_results; i++) {
 800af7a:	3301      	adds	r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 800af82:	f892 2602 	ldrb.w	r2, [r2, #1538]	@ 0x602
 800af86:	429a      	cmp	r2, r3
 800af88:	d91f      	bls.n	800afca <VL53L1_dynamic_xtalk_correction_corrector+0x12a>
			if (pR->VL53L1_p_002[i].range_status ==
 800af8a:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 800af8e:	f04f 094c 	mov.w	r9, #76	@ 0x4c
 800af92:	fb09 2203 	mla	r2, r9, r3, r2
 800af96:	f892 264e 	ldrb.w	r2, [r2, #1614]	@ 0x64e
 800af9a:	2a09      	cmp	r2, #9
 800af9c:	d1ed      	bne.n	800af7a <VL53L1_dynamic_xtalk_correction_corrector+0xda>
				if (pR->VL53L1_p_002[i].median_range_mm
 800af9e:	f504 42c0 	add.w	r2, r4, #24576	@ 0x6000
 800afa2:	fb09 2203 	mla	r2, r9, r3, r2
 800afa6:	f9b2 964a 	ldrsh.w	r9, [r2, #1610]	@ 0x64a
					pconfig->nodetect_min_range_mm) {
 800afaa:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800afae:	f8b2 2430 	ldrh.w	r2, [r2, #1072]	@ 0x430
				if (pR->VL53L1_p_002[i].median_range_mm
 800afb2:	4591      	cmp	r9, r2
 800afb4:	dde0      	ble.n	800af78 <VL53L1_dynamic_xtalk_correction_corrector+0xd8>
					if (run_nodetect == 2) {
 800afb6:	2d02      	cmp	r5, #2
 800afb8:	d1df      	bne.n	800af7a <VL53L1_dynamic_xtalk_correction_corrector+0xda>
						nodetect_index = i;
 800afba:	469e      	mov	lr, r3
						run_nodetect = 1;
 800afbc:	4665      	mov	r5, ip
 800afbe:	e7dc      	b.n	800af7a <VL53L1_dynamic_xtalk_correction_corrector+0xda>
	uint8_t nodetect_index = 0;
 800afc0:	f04f 0e00 	mov.w	lr, #0
		for (i = 0; i < pR->active_results; i++) {
 800afc4:	4673      	mov	r3, lr
		run_nodetect = 2;
 800afc6:	2502      	movs	r5, #2
 800afc8:	e7d9      	b.n	800af7e <VL53L1_dynamic_xtalk_correction_corrector+0xde>
		if (run_nodetect == 2)
 800afca:	2d02      	cmp	r5, #2
 800afcc:	d04e      	beq.n	800b06c <VL53L1_dynamic_xtalk_correction_corrector+0x1cc>
		amr =
 800afce:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800afd2:	224c      	movs	r2, #76	@ 0x4c
 800afd4:	fb02 330e 	mla	r3, r2, lr, r3
 800afd8:	f8b3 c638 	ldrh.w	ip, [r3, #1592]	@ 0x638
		if (run_nodetect == 1) {
 800afdc:	2d01      	cmp	r5, #1
 800afde:	d1b1      	bne.n	800af44 <VL53L1_dynamic_xtalk_correction_corrector+0xa4>
			utemp64 = 1000 * ((uint64_t)amr);
 800afe0:	ea4f 134c 	mov.w	r3, ip, lsl #5
 800afe4:	ebb3 030c 	subs.w	r3, r3, ip
 800afe8:	eb62 0202 	sbc.w	r2, r2, r2
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	eb13 030c 	adds.w	r3, r3, ip
 800aff8:	f142 0200 	adc.w	r2, r2, #0
 800affc:	00d2      	lsls	r2, r2, #3
 800affe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b002:	00db      	lsls	r3, r3, #3
			utemp64 = utemp64 << 9;
 800b004:	0252      	lsls	r2, r2, #9
 800b006:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b00a:	025b      	lsls	r3, r3, #9
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800b00c:	f504 5c80 	add.w	ip, r4, #4096	@ 0x1000
 800b010:	f8dc c424 	ldr.w	ip, [ip, #1060]	@ 0x424
 800b014:	4563      	cmp	r3, ip
 800b016:	f172 0200 	sbcs.w	r2, r2, #0
 800b01a:	d300      	bcc.n	800b01e <VL53L1_dynamic_xtalk_correction_corrector+0x17e>
				run_nodetect = 0;
 800b01c:	2500      	movs	r5, #0
			if (!merging_complete)
 800b01e:	b100      	cbz	r0, 800b022 <VL53L1_dynamic_xtalk_correction_corrector+0x182>
 800b020:	4628      	mov	r0, r5
			for (i = 0; i < 4; i++)
 800b022:	2200      	movs	r2, #0
			utemp64 = 0;
 800b024:	4615      	mov	r5, r2
 800b026:	4694      	mov	ip, r2
			for (i = 0; i < 4; i++)
 800b028:	e00c      	b.n	800b044 <VL53L1_dynamic_xtalk_correction_corrector+0x1a4>
				utemp64 = utemp64 + pdev->hist_data.bin_data[i + pdev->hist_data.number_of_ambient_bins];
 800b02a:	f894 342f 	ldrb.w	r3, [r4, #1071]	@ 0x42f
 800b02e:	4413      	add	r3, r2
 800b030:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800b034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b038:	69db      	ldr	r3, [r3, #28]
 800b03a:	195d      	adds	r5, r3, r5
 800b03c:	eb4c 7ce3 	adc.w	ip, ip, r3, asr #31
			for (i = 0; i < 4; i++)
 800b040:	3201      	adds	r2, #1
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	2a03      	cmp	r2, #3
 800b046:	d9f0      	bls.n	800b02a <VL53L1_dynamic_xtalk_correction_corrector+0x18a>
			utemp64 = utemp64 / 4;
 800b048:	08ad      	lsrs	r5, r5, #2
 800b04a:	ea45 758c 	orr.w	r5, r5, ip, lsl #30
 800b04e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
			if (utemp64 > (pdev->hist_data.VL53L1_p_004 + 50U))
 800b052:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	@ 0x4c8
 800b056:	3332      	adds	r3, #50	@ 0x32
 800b058:	42ab      	cmp	r3, r5
 800b05a:	f04f 0300 	mov.w	r3, #0
 800b05e:	eb73 030c 	sbcs.w	r3, r3, ip
 800b062:	d305      	bcc.n	800b070 <VL53L1_dynamic_xtalk_correction_corrector+0x1d0>
 800b064:	4605      	mov	r5, r0
 800b066:	e76d      	b.n	800af44 <VL53L1_dynamic_xtalk_correction_corrector+0xa4>
	uint8_t	run_nodetect = 0;
 800b068:	2500      	movs	r5, #0
 800b06a:	e76b      	b.n	800af44 <VL53L1_dynamic_xtalk_correction_corrector+0xa4>
			run_nodetect = 0;
 800b06c:	2500      	movs	r5, #0
 800b06e:	e769      	b.n	800af44 <VL53L1_dynamic_xtalk_correction_corrector+0xa4>
				run_nodetect = 0;
 800b070:	2500      	movs	r5, #0
 800b072:	e767      	b.n	800af44 <VL53L1_dynamic_xtalk_correction_corrector+0xa4>
		pint->nodetect_counter[pdev->ll_state.rd_zone_id] = 0;
 800b074:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800b078:	f504 5980 	add.w	r9, r4, #4096	@ 0x1000
 800b07c:	3332      	adds	r3, #50	@ 0x32
 800b07e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800b088:	4620      	mov	r0, r4
 800b08a:	f7ff fc3b 	bl	800a904 <VL53L1_dynamic_xtalk_correction_calc_required_samples>
		if(pint->required_samples < 2)
 800b08e:	f8d9 3478 	ldr.w	r3, [r9, #1144]	@ 0x478
 800b092:	2b01      	cmp	r3, #1
 800b094:	f240 809c 	bls.w	800b1d0 <VL53L1_dynamic_xtalk_correction_corrector+0x330>
		xtalk_offset_in =
 800b098:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b09c:	f8d3 176c 	ldr.w	r1, [r3, #1900]	@ 0x76c
		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800b0a0:	f8d4 32ec 	ldr.w	r3, [r4, #748]	@ 0x2ec
		current_xtalk = ((uint32_t)cco) << 2;
 800b0a4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800b0a8:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800b0ac:	f8b2 23f8 	ldrh.w	r2, [r2, #1016]	@ 0x3f8
		smudge_margin_adjusted =
 800b0b0:	ea4f 0982 	mov.w	r9, r2, lsl #2
		itemp32 = xtalk_offset_in - current_xtalk +
 800b0b4:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
		if (itemp32 < 0)
 800b0b8:	eb13 0382 	adds.w	r3, r3, r2, lsl #2
 800b0bc:	f100 808c 	bmi.w	800b1d8 <VL53L1_dynamic_xtalk_correction_corrector+0x338>
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800b0c0:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800b0c4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	@ 0x40c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	da09      	bge.n	800b0e0 <VL53L1_dynamic_xtalk_correction_corrector+0x240>
				((int32_t)current_xtalk -
 800b0cc:	ebaa 0309 	sub.w	r3, sl, r9
			if ((int32_t)xtalk_offset_in >
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	f280 8083 	bge.w	800b1dc <VL53L1_dynamic_xtalk_correction_corrector+0x33c>
				pout->single_xtalk_delta_flag = 1;
 800b0d6:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2782 	strb.w	r2, [r3, #1922]	@ 0x782
			pint->current_samples[pdev->ll_state.rd_zone_id] + 1;
 800b0e0:	f894 c051 	ldrb.w	ip, [r4, #81]	@ 0x51
 800b0e4:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b0e8:	eb03 008c 	add.w	r0, r3, ip, lsl #2
 800b0ec:	f8d0 2438 	ldr.w	r2, [r0, #1080]	@ 0x438
 800b0f0:	3201      	adds	r2, #1
		pint->current_samples[pdev->ll_state.rd_zone_id] = \
 800b0f2:	f8c0 2438 	str.w	r2, [r0, #1080]	@ 0x438
		if (pint->current_samples[pdev->ll_state.rd_zone_id] > pconfig->sample_limit) {
 800b0f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d974      	bls.n	800b1e8 <VL53L1_dynamic_xtalk_correction_corrector+0x348>
			pout->sample_limit_exceeded_flag = 1;
 800b0fe:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b102:	2101      	movs	r1, #1
 800b104:	f883 1784 	strb.w	r1, [r3, #1924]	@ 0x784
			continue_processing = CONT_RESET;
 800b108:	f04f 0b02 	mov.w	fp, #2
		if (pint->current_samples[pdev->ll_state.rd_zone_id] < pint->required_samples)
 800b10c:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b110:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 800b114:	429a      	cmp	r2, r3
 800b116:	d201      	bcs.n	800b11c <VL53L1_dynamic_xtalk_correction_corrector+0x27c>
			continue_processing = CONT_NEXT_LOOP;
 800b118:	f04f 0b01 	mov.w	fp, #1
		(uint32_t)(do_division_u(pint->accumulator[pdev->ll_state.rd_zone_id],
 800b11c:	f504 51a2 	add.w	r1, r4, #5184	@ 0x1440
 800b120:	f10c 0c09 	add.w	ip, ip, #9
 800b124:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 800b128:	2300      	movs	r3, #0
 800b12a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b12e:	f7f5 f883 	bl	8000238 <__aeabi_uldivmod>
		xtalk_offset_out =
 800b132:	4602      	mov	r2, r0
		itemp32 = xtalk_offset_out - current_xtalk +
 800b134:	eba0 030a 	sub.w	r3, r0, sl
		if (itemp32 < 0)
 800b138:	eb13 0309 	adds.w	r3, r3, r9
 800b13c:	d468      	bmi.n	800b210 <VL53L1_dynamic_xtalk_correction_corrector+0x370>
		if (continue_processing == CONT_CONTINUE &&
 800b13e:	f1bb 0f00 	cmp.w	fp, #0
 800b142:	d067      	beq.n	800b214 <VL53L1_dynamic_xtalk_correction_corrector+0x374>
		pout->smudge_corr_clipped = 0;
 800b144:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b148:	2100      	movs	r1, #0
 800b14a:	f883 1781 	strb.w	r1, [r3, #1921]	@ 0x781
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b14e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b152:	f893 3404 	ldrb.w	r3, [r3, #1028]	@ 0x404
 800b156:	b133      	cbz	r3, 800b166 <VL53L1_dynamic_xtalk_correction_corrector+0x2c6>
				pconfig->user_xtalk_offset_limit))
 800b158:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 800b15c:	f8d1 1400 	ldr.w	r1, [r1, #1024]	@ 0x400
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b160:	4281      	cmp	r1, r0
 800b162:	d200      	bcs.n	800b166 <VL53L1_dynamic_xtalk_correction_corrector+0x2c6>
			xtalk_offset_out =
 800b164:	460a      	mov	r2, r1
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b166:	b933      	cbnz	r3, 800b176 <VL53L1_dynamic_xtalk_correction_corrector+0x2d6>
				pconfig->user_xtalk_offset_limit))
 800b168:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b16c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b170:	4293      	cmp	r3, r2
 800b172:	d900      	bls.n	800b176 <VL53L1_dynamic_xtalk_correction_corrector+0x2d6>
			xtalk_offset_out =
 800b174:	461a      	mov	r2, r3
		xtalk_offset_out = xtalk_offset_out >> 2;
 800b176:	0891      	lsrs	r1, r2, #2
		if (xtalk_offset_out > 0x3FFFF)
 800b178:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800b17c:	d300      	bcc.n	800b180 <VL53L1_dynamic_xtalk_correction_corrector+0x2e0>
			xtalk_offset_out = 0x3FFFF;
 800b17e:	4971      	ldr	r1, [pc, #452]	@ (800b344 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>)
		if (continue_processing == CONT_CONTINUE) {
 800b180:	f1bb 0f00 	cmp.w	fp, #0
 800b184:	f040 8082 	bne.w	800b28c <VL53L1_dynamic_xtalk_correction_corrector+0x3ec>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800b188:	2300      	movs	r3, #0
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	2301      	movs	r3, #1
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4643      	mov	r3, r8
 800b192:	4632      	mov	r2, r6
 800b194:	4620      	mov	r0, r4
 800b196:	f7ff fd8d 	bl	800acb4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
			pint->accumulator[pdev->ll_state.rd_zone_id] = 0;
 800b19a:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
 800b19e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b1a2:	f504 51a2 	add.w	r1, r4, #5184	@ 0x1440
 800b1a6:	f102 0009 	add.w	r0, r2, #9
 800b1aa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b1ae:	f04f 0a00 	mov.w	sl, #0
 800b1b2:	f04f 0b00 	mov.w	fp, #0
 800b1b6:	e941 ab02 	strd	sl, fp, [r1, #-8]
			pint->current_samples[pdev->ll_state.rd_zone_id] = 0;
 800b1ba:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800b1be:	2100      	movs	r1, #0
 800b1c0:	f8c0 1438 	str.w	r1, [r0, #1080]	@ 0x438
			pint->nodetect_counter[pdev->ll_state.rd_zone_id] = 0;
 800b1c4:	3232      	adds	r2, #50	@ 0x32
 800b1c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b1ca:	f8c3 1438 	str.w	r1, [r3, #1080]	@ 0x438
 800b1ce:	e6bc      	b.n	800af4a <VL53L1_dynamic_xtalk_correction_corrector+0xaa>
			pint->required_samples = 2;
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	f8c9 2478 	str.w	r2, [r9, #1144]	@ 0x478
 800b1d6:	e75f      	b.n	800b098 <VL53L1_dynamic_xtalk_correction_corrector+0x1f8>
			itemp32 = itemp32 * (-1);
 800b1d8:	425b      	negs	r3, r3
 800b1da:	e771      	b.n	800b0c0 <VL53L1_dynamic_xtalk_correction_corrector+0x220>
				pout->single_xtalk_delta_flag = 2;
 800b1dc:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	f883 2782 	strb.w	r2, [r3, #1922]	@ 0x782
 800b1e6:	e77b      	b.n	800b0e0 <VL53L1_dynamic_xtalk_correction_corrector+0x240>
				pint->accumulator[pdev->ll_state.rd_zone_id] +
 800b1e8:	f504 5ea2 	add.w	lr, r4, #5184	@ 0x1440
 800b1ec:	f10c 0309 	add.w	r3, ip, #9
 800b1f0:	eb0e 0ec3 	add.w	lr, lr, r3, lsl #3
 800b1f4:	f85e 0c08 	ldr.w	r0, [lr, #-8]
 800b1f8:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800b1fc:	1809      	adds	r1, r1, r0
 800b1fe:	f143 0300 	adc.w	r3, r3, #0
			pint->accumulator[pdev->ll_state.rd_zone_id] =
 800b202:	f84e 1c08 	str.w	r1, [lr, #-8]
 800b206:	f84e 3c04 	str.w	r3, [lr, #-4]
	uint8_t continue_processing = CONT_CONTINUE;
 800b20a:	f04f 0b00 	mov.w	fp, #0
 800b20e:	e77d      	b.n	800b10c <VL53L1_dynamic_xtalk_correction_corrector+0x26c>
			itemp32 = itemp32 * (-1);
 800b210:	425b      	negs	r3, r3
 800b212:	e794      	b.n	800b13e <VL53L1_dynamic_xtalk_correction_corrector+0x29e>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b214:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 800b218:	f8d1 1410 	ldr.w	r1, [r1, #1040]	@ 0x410
		if (continue_processing == CONT_CONTINUE &&
 800b21c:	4299      	cmp	r1, r3
 800b21e:	dc09      	bgt.n	800b234 <VL53L1_dynamic_xtalk_correction_corrector+0x394>
				((int32_t)current_xtalk -
 800b220:	ebaa 0a09 	sub.w	sl, sl, r9
			if ((int32_t)xtalk_offset_out >
 800b224:	4582      	cmp	sl, r0
 800b226:	da0f      	bge.n	800b248 <VL53L1_dynamic_xtalk_correction_corrector+0x3a8>
				pout->averaged_xtalk_delta_flag = 1;
 800b228:	f504 4cc0 	add.w	ip, r4, #24576	@ 0x6000
 800b22c:	f04f 0e01 	mov.w	lr, #1
 800b230:	f88c e783 	strb.w	lr, [ip, #1923]	@ 0x783
		if (continue_processing == CONT_CONTINUE &&
 800b234:	4299      	cmp	r1, r3
 800b236:	dd0e      	ble.n	800b256 <VL53L1_dynamic_xtalk_correction_corrector+0x3b6>
		pout->smudge_corr_clipped = 0;
 800b238:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b23c:	2100      	movs	r1, #0
 800b23e:	f883 1781 	strb.w	r1, [r3, #1921]	@ 0x781
			continue_processing = CONT_RESET;
 800b242:	f04f 0b02 	mov.w	fp, #2
 800b246:	e782      	b.n	800b14e <VL53L1_dynamic_xtalk_correction_corrector+0x2ae>
				pout->averaged_xtalk_delta_flag = 2;
 800b248:	f504 4cc0 	add.w	ip, r4, #24576	@ 0x6000
 800b24c:	f04f 0e02 	mov.w	lr, #2
 800b250:	f88c e783 	strb.w	lr, [ip, #1923]	@ 0x783
 800b254:	e7ee      	b.n	800b234 <VL53L1_dynamic_xtalk_correction_corrector+0x394>
		pout->smudge_corr_clipped = 0;
 800b256:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b25a:	2100      	movs	r1, #0
 800b25c:	f883 1781 	strb.w	r1, [r3, #1921]	@ 0x781
			(pconfig->smudge_corr_clip_limit != 0)) {
 800b260:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b264:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
		if ((continue_processing == CONT_CONTINUE) &&
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f43f af70 	beq.w	800b14e <VL53L1_dynamic_xtalk_correction_corrector+0x2ae>
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800b26e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800b272:	fb01 f303 	mul.w	r3, r1, r3
			if (xtalk_offset_out >
 800b276:	4283      	cmp	r3, r0
 800b278:	f4bf af69 	bcs.w	800b14e <VL53L1_dynamic_xtalk_correction_corrector+0x2ae>
				pout->smudge_corr_clipped = 1;
 800b27c:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b280:	2101      	movs	r1, #1
 800b282:	f883 1781 	strb.w	r1, [r3, #1921]	@ 0x781
				continue_processing = CONT_RESET;
 800b286:	f04f 0b02 	mov.w	fp, #2
 800b28a:	e760      	b.n	800b14e <VL53L1_dynamic_xtalk_correction_corrector+0x2ae>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800b28c:	2301      	movs	r3, #1
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4643      	mov	r3, r8
 800b294:	4632      	mov	r2, r6
 800b296:	4620      	mov	r0, r4
 800b298:	f7ff fd0c 	bl	800acb4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 800b29c:	f1bb 0f02 	cmp.w	fp, #2
 800b2a0:	f47f ae53 	bne.w	800af4a <VL53L1_dynamic_xtalk_correction_corrector+0xaa>
 800b2a4:	e779      	b.n	800b19a <VL53L1_dynamic_xtalk_correction_corrector+0x2fa>
		pint->nodetect_counter[pdev->ll_state.rd_zone_id] += 1;
 800b2a6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800b2aa:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 800b2ae:	3332      	adds	r3, #50	@ 0x32
 800b2b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b2b4:	f8d3 2438 	ldr.w	r2, [r3, #1080]	@ 0x438
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
		if (pint->nodetect_counter[pdev->ll_state.rd_zone_id] < pconfig->nodetect_sample_limit)
 800b2be:	f8d1 3428 	ldr.w	r3, [r1, #1064]	@ 0x428
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d300      	bcc.n	800b2c8 <VL53L1_dynamic_xtalk_correction_corrector+0x428>
	continue_processing = CONT_CONTINUE;
 800b2c6:	2500      	movs	r5, #0
		if (merge_enabled == 1) {
 800b2c8:	2f01      	cmp	r7, #1
 800b2ca:	d028      	beq.n	800b31e <VL53L1_dynamic_xtalk_correction_corrector+0x47e>
			xtalk_offset_out = pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0];
 800b2cc:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b2d0:	f8d3 12a4 	ldr.w	r1, [r3, #676]	@ 0x2a4
		if (continue_processing == CONT_CONTINUE) {
 800b2d4:	bb5d      	cbnz	r5, 800b32e <VL53L1_dynamic_xtalk_correction_corrector+0x48e>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800b2d6:	9501      	str	r5, [sp, #4]
 800b2d8:	9500      	str	r5, [sp, #0]
 800b2da:	4643      	mov	r3, r8
 800b2dc:	4632      	mov	r2, r6
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff fce8 	bl	800acb4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
			pout->smudge_corr_valid = 2;
 800b2e4:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	f883 2780 	strb.w	r2, [r3, #1920]	@ 0x780
			pint->accumulator[pdev->ll_state.rd_zone_id] = 0;
 800b2ee:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800b2f2:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800b2f6:	f504 54a2 	add.w	r4, r4, #5184	@ 0x1440
 800b2fa:	f103 0109 	add.w	r1, r3, #9
 800b2fe:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 800b302:	2000      	movs	r0, #0
 800b304:	2100      	movs	r1, #0
 800b306:	e944 0102 	strd	r0, r1, [r4, #-8]
			pint->current_samples[pdev->ll_state.rd_zone_id] = 0;
 800b30a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b30e:	f8c1 5438 	str.w	r5, [r1, #1080]	@ 0x438
			pint->nodetect_counter[pdev->ll_state.rd_zone_id] = 0;
 800b312:	3332      	adds	r3, #50	@ 0x32
 800b314:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b318:	f8c2 5438 	str.w	r5, [r2, #1080]	@ 0x438
 800b31c:	e618      	b.n	800af50 <VL53L1_dynamic_xtalk_correction_corrector+0xb0>
			xtalk_offset_out = pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[pdev->tuning_parms.tp_hist_merge_max_size - 1];
 800b31e:	f894 31d4 	ldrb.w	r3, [r4, #468]	@ 0x1d4
 800b322:	f203 43a1 	addw	r3, r3, #1185	@ 0x4a1
 800b326:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b32a:	69d9      	ldr	r1, [r3, #28]
 800b32c:	e7d2      	b.n	800b2d4 <VL53L1_dynamic_xtalk_correction_corrector+0x434>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800b32e:	2301      	movs	r3, #1
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	2300      	movs	r3, #0
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4643      	mov	r3, r8
 800b338:	4632      	mov	r2, r6
 800b33a:	4620      	mov	r0, r4
 800b33c:	f7ff fcba 	bl	800acb4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 800b340:	e606      	b.n	800af50 <VL53L1_dynamic_xtalk_correction_corrector+0xb0>
 800b342:	bf00      	nop
 800b344:	0003ffff 	.word	0x0003ffff

0800b348 <VL53L1_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b348:	4603      	mov	r3, r0
 800b34a:	b120      	cbz	r0, 800b356 <VL53L1_calc_pll_period_us+0xe>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b34c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800b350:	fb90 f0f3 	sdiv	r0, r0, r3
 800b354:	4770      	bx	lr
	uint32_t  pll_period_us        = 0;
 800b356:	2000      	movs	r0, #0


	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 800b358:	4770      	bx	lr

0800b35a <VL53L1_duration_maths>:

	uint64_t  tmp_long_int = 0;
	uint32_t  duration_us  = 0;


	duration_us = window_vclks * pll_period_us;
 800b35a:	fb00 f202 	mul.w	r2, r0, r2


	duration_us = duration_us >> 12;
 800b35e:	0b12      	lsrs	r2, r2, #12


	tmp_long_int = (uint64_t)duration_us;


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b360:	fb01 f003 	mul.w	r0, r1, r3


	duration_us = duration_us >> 4;
 800b364:	0900      	lsrs	r0, r0, #4


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b366:	fba0 0202 	umull	r0, r2, r0, r2


	tmp_long_int = tmp_long_int >> 12;
 800b36a:	0b00      	lsrs	r0, r0, #12
 800b36c:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
 800b370:	0b12      	lsrs	r2, r2, #12


	if (tmp_long_int > 0xFFFFFFFF)
 800b372:	f04f 33ff 	mov.w	r3, #4294967295
 800b376:	4283      	cmp	r3, r0
 800b378:	f04f 0300 	mov.w	r3, #0
 800b37c:	4193      	sbcs	r3, r2
 800b37e:	d201      	bcs.n	800b384 <VL53L1_duration_maths+0x2a>
		tmp_long_int = 0xFFFFFFFF;
 800b380:	f04f 30ff 	mov.w	r0, #4294967295

	duration_us  = (uint32_t)tmp_long_int;

	return duration_us;
}
 800b384:	4770      	bx	lr

0800b386 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b386:	b510      	push	{r4, lr}
 800b388:	4614      	mov	r4, r2





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800b38a:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800b38e:	ea4f 124c 	mov.w	r2, ip, lsl #5
 800b392:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
 800b396:	0143      	lsls	r3, r0, #5
 800b398:	1a1b      	subs	r3, r3, r0
 800b39a:	eb62 020c 	sbc.w	r2, r2, ip
 800b39e:	0092      	lsls	r2, r2, #2
 800b3a0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	181b      	adds	r3, r3, r0
 800b3a8:	eb4c 0c02 	adc.w	ip, ip, r2
 800b3ac:	ea4f 2ccc 	mov.w	ip, ip, lsl #11
 800b3b0:	ea4c 5c53 	orr.w	ip, ip, r3, lsr #21
			* 1000 * 256);

	if (num_spads != 0)
 800b3b4:	b1a1      	cbz	r1, 800b3e0 <VL53L1_events_per_spad_maths+0x5a>
 800b3b6:	02d8      	lsls	r0, r3, #11
 800b3b8:	460a      	mov	r2, r1
		total_hist_counts = do_division_u(
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4661      	mov	r1, ip
 800b3be:	f7f4 ff3b 	bl	8000238 <__aeabi_uldivmod>
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b3c2:	b184      	cbz	r4, 800b3e6 <VL53L1_events_per_spad_maths+0x60>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b3c4:	02c9      	lsls	r1, r1, #11
 800b3c6:	ea41 5150 	orr.w	r1, r1, r0, lsr #21
 800b3ca:	02c0      	lsls	r0, r0, #11
			+ ((uint64_t)duration / 2));
 800b3cc:	0863      	lsrs	r3, r4, #1
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b3ce:	18c0      	adds	r0, r0, r3

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	f04f 0300 	mov.w	r3, #0
 800b3d6:	f141 0100 	adc.w	r1, r1, #0
 800b3da:	f7f4 ff2d 	bl	8000238 <__aeabi_uldivmod>
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;

	return rate_per_spad_kcps;
}
 800b3de:	bd10      	pop	{r4, pc}
	uint64_t total_hist_counts  = 0;
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	e7ed      	b.n	800b3c2 <VL53L1_events_per_spad_maths+0x3c>
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b3e6:	02c0      	lsls	r0, r0, #11
 800b3e8:	e7f9      	b.n	800b3de <VL53L1_events_per_spad_maths+0x58>

0800b3ea <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800b3ea:	4602      	mov	r2, r0



	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 800b3ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000


	while (bit > num)
 800b3f0:	e000      	b.n	800b3f4 <VL53L1_isqrt+0xa>
		bit >>= 2;
 800b3f2:	089b      	lsrs	r3, r3, #2
	while (bit > num)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d8fc      	bhi.n	800b3f2 <VL53L1_isqrt+0x8>
	uint32_t  res = 0;
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	e001      	b.n	800b400 <VL53L1_isqrt+0x16>
	while (bit != 0) {
		if (num >= res + bit)  {
			num -= res + bit;
			res = (res >> 1) + bit;
		} else {
			res >>= 1;
 800b3fc:	0840      	lsrs	r0, r0, #1
		}
		bit >>= 2;
 800b3fe:	089b      	lsrs	r3, r3, #2
	while (bit != 0) {
 800b400:	b133      	cbz	r3, 800b410 <VL53L1_isqrt+0x26>
		if (num >= res + bit)  {
 800b402:	18c1      	adds	r1, r0, r3
 800b404:	4291      	cmp	r1, r2
 800b406:	d8f9      	bhi.n	800b3fc <VL53L1_isqrt+0x12>
			num -= res + bit;
 800b408:	1a52      	subs	r2, r2, r1
			res = (res >> 1) + bit;
 800b40a:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 800b40e:	e7f6      	b.n	800b3fe <VL53L1_isqrt+0x14>
	}

	return res;
}
 800b410:	4770      	bx	lr

0800b412 <VL53L1_hist_remove_ambient_bins>:
}


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800b412:	b410      	push	{r4}
	uint8_t lc = 0;
	uint8_t i = 0;



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b414:	7b03      	ldrb	r3, [r0, #12]
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	2b07      	cmp	r3, #7
 800b41c:	d016      	beq.n	800b44c <VL53L1_hist_remove_ambient_bins+0x3a>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
			pdata->bin_rep[lc] = 0;
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b41e:	7ac4      	ldrb	r4, [r0, #11]
 800b420:	bb9c      	cbnz	r4, 800b48a <VL53L1_hist_remove_ambient_bins+0x78>
		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
				pdata->number_of_ambient_bins;
		pdata->number_of_ambient_bins = 0;
	}
}
 800b422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b426:	4770      	bx	lr
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b428:	3201      	adds	r2, #1
 800b42a:	b2d2      	uxtb	r2, r2
 800b42c:	2a05      	cmp	r2, #5
 800b42e:	d817      	bhi.n	800b460 <VL53L1_hist_remove_ambient_bins+0x4e>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b430:	1881      	adds	r1, r0, r2
 800b432:	7b09      	ldrb	r1, [r1, #12]
 800b434:	f001 0407 	and.w	r4, r1, #7
 800b438:	2c07      	cmp	r4, #7
 800b43a:	d0f5      	beq.n	800b428 <VL53L1_hist_remove_ambient_bins+0x16>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b43c:	18c4      	adds	r4, r0, r3
 800b43e:	7321      	strb	r1, [r4, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b440:	1881      	adds	r1, r0, r2
 800b442:	7c89      	ldrb	r1, [r1, #18]
 800b444:	74a1      	strb	r1, [r4, #18]
				i++;
 800b446:	3301      	adds	r3, #1
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	e7ed      	b.n	800b428 <VL53L1_hist_remove_ambient_bins+0x16>
		i = 0;
 800b44c:	2300      	movs	r3, #0
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b44e:	461a      	mov	r2, r3
 800b450:	e7ec      	b.n	800b42c <VL53L1_hist_remove_ambient_bins+0x1a>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800b452:	18c2      	adds	r2, r0, r3
 800b454:	2110      	movs	r1, #16
 800b456:	7311      	strb	r1, [r2, #12]
			pdata->bin_rep[lc] = 0;
 800b458:	2100      	movs	r1, #0
 800b45a:	7491      	strb	r1, [r2, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b45c:	3301      	adds	r3, #1
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b05      	cmp	r3, #5
 800b462:	d9f6      	bls.n	800b452 <VL53L1_hist_remove_ambient_bins+0x40>
 800b464:	e7db      	b.n	800b41e <VL53L1_hist_remove_ambient_bins+0xc>
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b466:	1b1a      	subs	r2, r3, r4
				pdata->bin_data[bin];
 800b468:	1d99      	adds	r1, r3, #6
 800b46a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b46e:	3206      	adds	r2, #6
 800b470:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800b474:	3301      	adds	r3, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	7a42      	ldrb	r2, [r0, #9]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d8f3      	bhi.n	800b466 <VL53L1_hist_remove_ambient_bins+0x54>
				pdata->VL53L1_p_024 -
 800b47e:	7a83      	ldrb	r3, [r0, #10]
 800b480:	1b1b      	subs	r3, r3, r4
		pdata->VL53L1_p_024 =
 800b482:	7283      	strb	r3, [r0, #10]
		pdata->number_of_ambient_bins = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	72c3      	strb	r3, [r0, #11]
}
 800b488:	e7cb      	b.n	800b422 <VL53L1_hist_remove_ambient_bins+0x10>
		for (bin = pdata->number_of_ambient_bins;
 800b48a:	4623      	mov	r3, r4
 800b48c:	e7f4      	b.n	800b478 <VL53L1_hist_remove_ambient_bins+0x66>

0800b48e <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800b48e:	b508      	push	{r3, lr}

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b490:	f7ff ff5a 	bl	800b348 <VL53L1_calc_pll_period_us>



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800b494:	0880      	lsrs	r0, r0, #2
	pll_period_mm =
 800b496:	f249 2357 	movw	r3, #37463	@ 0x9257
 800b49a:	fb03 f000 	mul.w	r0, r3, r0


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800b49e:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000

	LOG_FUNCTION_END(0);

	return pll_period_mm;
}
 800b4a2:	0c00      	lsrs	r0, r0, #16
 800b4a4:	bd08      	pop	{r3, pc}

0800b4a6 <VL53L1_rate_maths>:
	uint32_t  frac_bits = 7;
	uint16_t  rate_mcps = 0;



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800b4a6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800b4aa:	da07      	bge.n	800b4bc <VL53L1_rate_maths+0x16>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
	else if (VL53L1_p_008 > 0)
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	dd19      	ble.n	800b4e4 <VL53L1_rate_maths+0x3e>
		tmp_int = (uint32_t)VL53L1_p_008;
 800b4b0:	4603      	mov	r3, r0




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800b4b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800b4b6:	dd18      	ble.n	800b4ea <VL53L1_rate_maths+0x44>
		frac_bits = 3;
 800b4b8:	2203      	movs	r2, #3
 800b4ba:	e002      	b.n	800b4c2 <VL53L1_rate_maths+0x1c>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800b4bc:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
		frac_bits = 3;
 800b4c0:	2203      	movs	r2, #3
	else
		frac_bits = 7;


	if (time_us > 0)
 800b4c2:	b121      	cbz	r1, 800b4ce <VL53L1_rate_maths+0x28>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800b4c4:	4093      	lsls	r3, r2
 800b4c6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800b4ca:	fbb3 f3f1 	udiv	r3, r3, r1


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800b4ce:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800b4d2:	dd00      	ble.n	800b4d6 <VL53L1_rate_maths+0x30>
		tmp_int = tmp_int << 4;
 800b4d4:	011b      	lsls	r3, r3, #4



	if (tmp_int > 0xFFFF)
 800b4d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4da:	d301      	bcc.n	800b4e0 <VL53L1_rate_maths+0x3a>
		tmp_int = 0xFFFF;
 800b4dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff

	rate_mcps =  (uint16_t)tmp_int;

	return rate_mcps;
}
 800b4e0:	b298      	uxth	r0, r3
 800b4e2:	4770      	bx	lr
	uint32_t  tmp_int   = 0;
 800b4e4:	2300      	movs	r3, #0
		frac_bits = 7;
 800b4e6:	2207      	movs	r2, #7
 800b4e8:	e7eb      	b.n	800b4c2 <VL53L1_rate_maths+0x1c>
 800b4ea:	2207      	movs	r2, #7
 800b4ec:	e7e9      	b.n	800b4c2 <VL53L1_rate_maths+0x1c>

0800b4ee <VL53L1_rate_per_spad_maths>:





	if (num_spads > 0) {
 800b4ee:	b152      	cbz	r2, 800b506 <VL53L1_rate_per_spad_maths+0x18>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800b4f0:	0209      	lsls	r1, r1, #8
 800b4f2:	4081      	lsls	r1, r0
		tmp_int = (tmp_int +
 800b4f4:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800b4f8:	fbb1 f1f2 	udiv	r1, r1, r2
		tmp_int = ((peak_count_rate) << frac_bits);
	}



	if (tmp_int > max_output_value)
 800b4fc:	4299      	cmp	r1, r3
 800b4fe:	d800      	bhi.n	800b502 <VL53L1_rate_per_spad_maths+0x14>
 800b500:	460b      	mov	r3, r1
		tmp_int = max_output_value;

	rate_per_spad = (uint16_t)tmp_int;

	return rate_per_spad;
}
 800b502:	b298      	uxth	r0, r3
 800b504:	4770      	bx	lr
		tmp_int = ((peak_count_rate) << frac_bits);
 800b506:	4081      	lsls	r1, r0
 800b508:	e7f8      	b.n	800b4fc <VL53L1_rate_per_spad_maths+0xe>
	...

0800b50c <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	4616      	mov	r6, r2
 800b512:	461d      	mov	r5, r3
	int32_t     range_mm      = 0;
	int32_t     range_mm_10   = 0;



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b514:	f7ff ff18 	bl	800b348 <VL53L1_calc_pll_period_us>



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800b518:	1ba2      	subs	r2, r4, r6
 800b51a:	eb63 0303 	sbc.w	r3, r3, r3



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800b51e:	fba0 2102 	umull	r2, r1, r0, r2
 800b522:	fb00 1103 	mla	r1, r0, r3, r1



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800b526:	460b      	mov	r3, r1
 800b528:	2900      	cmp	r1, #0
 800b52a:	db33      	blt.n	800b594 <VL53L1_range_maths+0x88>
 800b52c:	0a52      	lsrs	r2, r2, #9
 800b52e:	ea42 52c3 	orr.w	r2, r2, r3, lsl #23
 800b532:	1259      	asrs	r1, r3, #9



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800b534:	f249 2057 	movw	r0, #37463	@ 0x9257
 800b538:	fba2 2300 	umull	r2, r3, r2, r0
 800b53c:	fb00 3301 	mla	r3, r0, r1, r3



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800b540:	4619      	mov	r1, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	db2c      	blt.n	800b5a0 <VL53L1_range_maths+0x94>
 800b546:	0d92      	lsrs	r2, r2, #22
 800b548:	ea42 2281 	orr.w	r2, r2, r1, lsl #10


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800b54c:	9b05      	ldr	r3, [sp, #20]
 800b54e:	441a      	add	r2, r3


	range_mm *= gain_factor;
 800b550:	9b04      	ldr	r3, [sp, #16]
 800b552:	fb03 f202 	mul.w	r2, r3, r2
	range_mm += 0x0400;
 800b556:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
	range_mm /= 0x0800;
 800b55a:	4610      	mov	r0, r2
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	db24      	blt.n	800b5aa <VL53L1_range_maths+0x9e>
 800b560:	12c0      	asrs	r0, r0, #11


	if (fractional_bits == 0) {
 800b562:	bb85      	cbnz	r5, 800b5c6 <VL53L1_range_maths+0xba>
		range_mm_10 = range_mm * 10;
 800b564:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b568:	0040      	lsls	r0, r0, #1
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800b56a:	4603      	mov	r3, r0
 800b56c:	2800      	cmp	r0, #0
 800b56e:	db1f      	blt.n	800b5b0 <VL53L1_range_maths+0xa4>
 800b570:	1098      	asrs	r0, r3, #2
		if ((range_mm_10 % 10) < 5)
 800b572:	4a1a      	ldr	r2, [pc, #104]	@ (800b5dc <VL53L1_range_maths+0xd0>)
 800b574:	fb82 1200 	smull	r1, r2, r2, r0
 800b578:	17db      	asrs	r3, r3, #31
 800b57a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800b57e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b582:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 800b586:	2b04      	cmp	r3, #4
 800b588:	dc14      	bgt.n	800b5b4 <VL53L1_range_maths+0xa8>
			range_mm = (int16_t)(range_mm_10 / 10);
 800b58a:	17c0      	asrs	r0, r0, #31
 800b58c:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 800b590:	b200      	sxth	r0, r0
 800b592:	e01a      	b.n	800b5ca <VL53L1_range_maths+0xbe>
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800b594:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b598:	18d2      	adds	r2, r2, r3
 800b59a:	f141 0300 	adc.w	r3, r1, #0
 800b59e:	e7c5      	b.n	800b52c <VL53L1_range_maths+0x20>
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800b5a0:	490f      	ldr	r1, [pc, #60]	@ (800b5e0 <VL53L1_range_maths+0xd4>)
 800b5a2:	1852      	adds	r2, r2, r1
 800b5a4:	f143 0100 	adc.w	r1, r3, #0
 800b5a8:	e7cd      	b.n	800b546 <VL53L1_range_maths+0x3a>
	range_mm /= 0x0800;
 800b5aa:	f202 70ff 	addw	r0, r2, #2047	@ 0x7ff
 800b5ae:	e7d7      	b.n	800b560 <VL53L1_range_maths+0x54>
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800b5b0:	1cc3      	adds	r3, r0, #3
 800b5b2:	e7dd      	b.n	800b570 <VL53L1_range_maths+0x64>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800b5b4:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <VL53L1_range_maths+0xd0>)
 800b5b6:	fb83 2300 	smull	r2, r3, r3, r0
 800b5ba:	17c0      	asrs	r0, r0, #31
 800b5bc:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	b200      	sxth	r0, r0
 800b5c4:	e001      	b.n	800b5ca <VL53L1_range_maths+0xbe>
	} else if (fractional_bits == 1)
 800b5c6:	2d01      	cmp	r5, #1
 800b5c8:	d000      	beq.n	800b5cc <VL53L1_range_maths+0xc0>
		range_mm = range_mm / (0x01 << 1);

	return range_mm;
}
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
		range_mm = range_mm / (0x01 << 1);
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	db01      	blt.n	800b5d6 <VL53L1_range_maths+0xca>
 800b5d2:	1300      	asrs	r0, r0, #12
	return range_mm;
 800b5d4:	e7f9      	b.n	800b5ca <VL53L1_range_maths+0xbe>
		range_mm = range_mm / (0x01 << 1);
 800b5d6:	f602 70ff 	addw	r0, r2, #4095	@ 0xfff
 800b5da:	e7fa      	b.n	800b5d2 <VL53L1_range_maths+0xc6>
 800b5dc:	66666667 	.word	0x66666667
 800b5e0:	003fffff 	.word	0x003fffff

0800b5e4 <VL53L1_decode_vcsel_period>:
{


	uint8_t VL53L1_p_031 = 0;

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	b2c0      	uxtb	r0, r0
 800b5e8:	0040      	lsls	r0, r0, #1

	return VL53L1_p_031;
}
 800b5ea:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 800b5ee:	4770      	bx	lr

0800b5f0 <VL53L1_hist_calc_zero_distance_phase>:
{
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	4604      	mov	r4, r0
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800b5f4:	f890 0084 	ldrb.w	r0, [r0, #132]	@ 0x84
 800b5f8:	f7ff fff4 	bl	800b5e4 <VL53L1_decode_vcsel_period>
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b5fc:	f8b4 307e 	ldrh.w	r3, [r4, #126]	@ 0x7e
 800b600:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b604:	f894 2080 	ldrb.w	r2, [r4, #128]	@ 0x80
 800b608:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b60c:	f894 2081 	ldrb.w	r2, [r4, #129]	@ 0x81
 800b610:	eba3 23c2 	sub.w	r3, r3, r2, lsl #11
	if (period != 0)
 800b614:	02c0      	lsls	r0, r0, #11
 800b616:	d003      	beq.n	800b620 <VL53L1_hist_calc_zero_distance_phase+0x30>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800b618:	fbb3 f2f0 	udiv	r2, r3, r0
 800b61c:	fb00 3012 	mls	r0, r0, r2, r3
	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800b620:	f8a4 009c 	strh.w	r0, [r4, #156]	@ 0x9c
}
 800b624:	bd10      	pop	{r4, pc}

0800b626 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:
		VL53L1_histogram_bin_data_t    *phist)
{


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800b626:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800b62a:	f881 3081 	strb.w	r3, [r1, #129]	@ 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800b62e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	@ 0x42
	phist->VL53L1_p_019 =
 800b632:	f8a1 3086 	strh.w	r3, [r1, #134]	@ 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800b636:	7a03      	ldrb	r3, [r0, #8]
	phist->VL53L1_p_022 =
 800b638:	720b      	strb	r3, [r1, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800b63a:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800b63c:	f8a1 307e 	strh.w	r3, [r1, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800b640:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800b644:	f881 3080 	strb.w	r3, [r1, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800b648:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
	phist->vcsel_width =
 800b64c:	f8a1 3082 	strh.w	r3, [r1, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800b650:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
	phist->zero_distance_phase =
 800b654:	f8a1 309c 	strh.w	r3, [r1, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800b658:	7803      	ldrb	r3, [r0, #0]
 800b65a:	708b      	strb	r3, [r1, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800b65c:	7a43      	ldrb	r3, [r0, #9]
 800b65e:	724b      	strb	r3, [r1, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800b660:	6843      	ldr	r3, [r0, #4]
 800b662:	604b      	str	r3, [r1, #4]
}
 800b664:	4770      	bx	lr

0800b666 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800b666:	b410      	push	{r4}



	uint16_t          i = 0;

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800b668:	2303      	movs	r3, #3
 800b66a:	7013      	strb	r3, [r2, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800b66c:	7053      	strb	r3, [r2, #1]

	pdata->zone_id                   = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	7093      	strb	r3, [r2, #2]
	pdata->time_stamp                = 0;
 800b672:	6053      	str	r3, [r2, #4]

	pdata->VL53L1_p_022                 = 0;
 800b674:	7213      	strb	r3, [r2, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800b676:	2418      	movs	r4, #24
 800b678:	7254      	strb	r4, [r2, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800b67a:	7291      	strb	r1, [r2, #10]
	pdata->number_of_ambient_bins    = 0;
 800b67c:	72d3      	strb	r3, [r2, #11]

	pdata->result__interrupt_status           = 0;
 800b67e:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800b682:	f882 3079 	strb.w	r3, [r2, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800b686:	f882 307a 	strb.w	r3, [r2, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800b68a:	f882 307b 	strb.w	r3, [r2, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800b68e:	f8a2 307c 	strh.w	r3, [r2, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800b692:	f8a2 307e 	strh.w	r3, [r2, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800b696:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800b69a:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800b69e:	f8a2 3082 	strh.w	r3, [r2, #130]	@ 0x82
	pdata->VL53L1_p_009                       = 0;
 800b6a2:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
	pdata->VL53L1_p_019                = 0;
 800b6a6:	f8a2 3086 	strh.w	r3, [r2, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800b6aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800b6ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800b6b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800b6b6:	f8a2 309c 	strh.w	r3, [r2, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800b6ba:	f882 309e 	strb.w	r3, [r2, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800b6be:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
	pdata->VL53L1_p_004             = 0;
 800b6c2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b6c6:	e003      	b.n	800b6d0 <VL53L1_init_histogram_bin_data_struct+0x6a>
		pdata->bin_seq[i] = (uint8_t)i;
 800b6c8:	18d4      	adds	r4, r2, r3
 800b6ca:	7323      	strb	r3, [r4, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	2b05      	cmp	r3, #5
 800b6d2:	d9f9      	bls.n	800b6c8 <VL53L1_init_histogram_bin_data_struct+0x62>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e006      	b.n	800b6e6 <VL53L1_init_histogram_bin_data_struct+0x80>
		pdata->bin_rep[i] = 1;
 800b6d8:	18d4      	adds	r4, r2, r3
 800b6da:	f04f 0c01 	mov.w	ip, #1
 800b6de:	f884 c012 	strb.w	ip, [r4, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b6e2:	4463      	add	r3, ip
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	d9f6      	bls.n	800b6d8 <VL53L1_init_histogram_bin_data_struct+0x72>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e006      	b.n	800b6fc <VL53L1_init_histogram_bin_data_struct+0x96>
		if (i < VL53L1_p_024)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 800b6ee:	f103 0c06 	add.w	ip, r3, #6
 800b6f2:	2400      	movs	r4, #0
 800b6f4:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2b17      	cmp	r3, #23
 800b6fe:	d805      	bhi.n	800b70c <VL53L1_init_histogram_bin_data_struct+0xa6>
		if (i < VL53L1_p_024)
 800b700:	428b      	cmp	r3, r1
 800b702:	d2f4      	bcs.n	800b6ee <VL53L1_init_histogram_bin_data_struct+0x88>
			pdata->bin_data[i] = bin_value;
 800b704:	1d9c      	adds	r4, r3, #6
 800b706:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800b70a:	e7f5      	b.n	800b6f8 <VL53L1_init_histogram_bin_data_struct+0x92>


}
 800b70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <VL53L1_decode_row_col>:
	uint8_t  *pcol)
{



	if (spad_number > 127) {
 800b712:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800b716:	d107      	bne.n	800b728 <VL53L1_decode_row_col+0x16>
		*prow = 8 + ((255-spad_number) & 0x07);
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 800b718:	f000 0307 	and.w	r3, r0, #7
 800b71c:	700b      	strb	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 800b71e:	f1c0 007f 	rsb	r0, r0, #127	@ 0x7f
 800b722:	10c0      	asrs	r0, r0, #3
 800b724:	7010      	strb	r0, [r2, #0]
	}
}
 800b726:	4770      	bx	lr
		*prow = 8 + ((255-spad_number) & 0x07);
 800b728:	43c3      	mvns	r3, r0
 800b72a:	f003 0307 	and.w	r3, r3, #7
 800b72e:	3308      	adds	r3, #8
 800b730:	700b      	strb	r3, [r1, #0]
		*pcol = (spad_number-128) >> 3;
 800b732:	3880      	subs	r0, #128	@ 0x80
 800b734:	10c0      	asrs	r0, r0, #3
 800b736:	7010      	strb	r0, [r2, #0]
 800b738:	4770      	bx	lr

0800b73a <VL53L1_hist_find_min_max_bin_values>:

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800b73a:	2300      	movs	r3, #0
 800b73c:	e013      	b.n	800b766 <VL53L1_hist_find_min_max_bin_values+0x2c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
			pdata->min_bin_value = pdata->bin_data[bin];
 800b73e:	1d9a      	adds	r2, r3, #6
 800b740:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b744:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800b748:	b133      	cbz	r3, 800b758 <VL53L1_hist_find_min_max_bin_values+0x1e>
 800b74a:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
 800b74e:	1d9a      	adds	r2, r3, #6
 800b750:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b754:	4291      	cmp	r1, r2
 800b756:	dc04      	bgt.n	800b762 <VL53L1_hist_find_min_max_bin_values+0x28>
			pdata->max_bin_value = pdata->bin_data[bin];
 800b758:	1d9a      	adds	r2, r3, #6
 800b75a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b75e:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800b762:	3301      	adds	r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	7a82      	ldrb	r2, [r0, #10]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d909      	bls.n	800b780 <VL53L1_hist_find_min_max_bin_values+0x46>
		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d0e6      	beq.n	800b73e <VL53L1_hist_find_min_max_bin_values+0x4>
 800b770:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 800b774:	1d9a      	adds	r2, r3, #6
 800b776:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b77a:	4291      	cmp	r1, r2
 800b77c:	dbe4      	blt.n	800b748 <VL53L1_hist_find_min_max_bin_values+0xe>
 800b77e:	e7de      	b.n	800b73e <VL53L1_hist_find_min_max_bin_values+0x4>

	}

	LOG_FUNCTION_END(0);

}
 800b780:	4770      	bx	lr

0800b782 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:
{
 800b782:	b570      	push	{r4, r5, r6, lr}
 800b784:	4606      	mov	r6, r0
 800b786:	460c      	mov	r4, r1
	VL53L1_hist_find_min_max_bin_values(pdata);
 800b788:	4608      	mov	r0, r1
 800b78a:	f7ff ffd6 	bl	800b73a <VL53L1_hist_find_min_max_bin_values>
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800b78e:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800b792:	4628      	mov	r0, r5
 800b794:	f7ff fe29 	bl	800b3ea <VL53L1_isqrt>
	VL53L1_p_032 *= ambient_threshold_sigma;
 800b798:	fb06 f000 	mul.w	r0, r6, r0
	VL53L1_p_032 += 0x07;
 800b79c:	3007      	adds	r0, #7
	VL53L1_p_032 += pdata->min_bin_value;
 800b79e:	eb05 1020 	add.w	r0, r5, r0, asr #4
	pdata->number_of_ambient_samples = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800b7a8:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800b7ac:	e001      	b.n	800b7b2 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x30>
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	7aa2      	ldrb	r2, [r4, #10]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d90f      	bls.n	800b7d8 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x56>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800b7b8:	1d9a      	adds	r2, r3, #6
 800b7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7be:	4282      	cmp	r2, r0
 800b7c0:	daf5      	bge.n	800b7ae <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x2c>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b7c2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800b7c6:	440a      	add	r2, r1
 800b7c8:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800b7cc:	f894 209e 	ldrb.w	r2, [r4, #158]	@ 0x9e
 800b7d0:	3201      	adds	r2, #1
 800b7d2:	f884 209e 	strb.w	r2, [r4, #158]	@ 0x9e
 800b7d6:	e7ea      	b.n	800b7ae <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x2c>
	if (pdata->number_of_ambient_samples > 0) {
 800b7d8:	f894 209e 	ldrb.w	r2, [r4, #158]	@ 0x9e
 800b7dc:	b15a      	cbz	r2, 800b7f6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x74>
			pdata->ambient_events_sum;
 800b7de:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
		pdata->VL53L1_p_004 =
 800b7e2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
		pdata->VL53L1_p_004 +=
 800b7e6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b7ea:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
		pdata->VL53L1_p_004 /=
 800b7ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7f2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
}
 800b7f6:	bd70      	pop	{r4, r5, r6, pc}

0800b7f8 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800b7f8:	b410      	push	{r4}

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800b7fa:	7ac4      	ldrb	r4, [r0, #11]
 800b7fc:	b1ec      	cbz	r4, 800b83a <VL53L1_hist_estimate_ambient_from_ambient_bins+0x42>

		pdata->number_of_ambient_samples =
 800b7fe:	f880 409e 	strb.w	r4, [r0, #158]	@ 0x9e
			pdata->number_of_ambient_bins;



		pdata->ambient_events_sum = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800b808:	e009      	b.n	800b81e <VL53L1_hist_estimate_ambient_from_ambient_bins+0x26>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b80a:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 800b80e:	1d99      	adds	r1, r3, #6
 800b810:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800b814:	440a      	add	r2, r1
 800b816:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800b81a:	3301      	adds	r3, #1
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	429c      	cmp	r4, r3
 800b820:	d8f3      	bhi.n	800b80a <VL53L1_hist_estimate_ambient_from_ambient_bins+0x12>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800b822:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 800b826:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
		pdata->VL53L1_p_004 +=
 800b82a:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800b82e:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
		pdata->VL53L1_p_004 /=
 800b832:	fb93 f3f4 	sdiv	r3, r3, r4
 800b836:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;

	}

	LOG_FUNCTION_END(0);
}
 800b83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	460e      	mov	r6, r1
 800b844:	4615      	mov	r5, r2
 800b846:	461c      	mov	r4, r3

	tmp32 = 4 * events_threshold;



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800b848:	fb03 f303 	mul.w	r3, r3, r3
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800b84c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b850:	f7ff fdcb 	bl	800b3ea <VL53L1_isqrt>
	tmp32 += (uint32_t)signal_thresh_sigma;
 800b854:	4404      	add	r4, r0



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800b856:	0130      	lsls	r0, r6, #4
 800b858:	f7ff fdc7 	bl	800b3ea <VL53L1_isqrt>
	range_mm *= ref_distance_mm;
 800b85c:	fb05 f000 	mul.w	r0, r5, r0

	if (tmp32 > 0) {
 800b860:	b11c      	cbz	r4, 800b86a <VL53L1_f_002+0x2a>
		range_mm += (tmp32);
 800b862:	4420      	add	r0, r4
		range_mm /= (2*tmp32);
 800b864:	0064      	lsls	r4, r4, #1
 800b866:	fbb0 f0f4 	udiv	r0, r0, r4
	}

	return range_mm;

}
 800b86a:	bd70      	pop	{r4, r5, r6, pc}

0800b86c <VL53L1_f_001>:
{
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	b085      	sub	sp, #20
 800b872:	9001      	str	r0, [sp, #4]
 800b874:	460e      	mov	r6, r1
 800b876:	4617      	mov	r7, r2
 800b878:	461d      	mov	r5, r3
 800b87a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
	pdata->VL53L1_p_006     = 0x0000;
 800b87c:	2300      	movs	r3, #0
 800b87e:	8363      	strh	r3, [r4, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800b880:	6163      	str	r3, [r4, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800b882:	8323      	strh	r3, [r4, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800b884:	6123      	str	r3, [r4, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800b886:	61e3      	str	r3, [r4, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800b888:	6223      	str	r3, [r4, #32]
	pdata->VL53L1_p_035             = 0;
 800b88a:	84a3      	strh	r3, [r4, #36]	@ 0x24
	pdata->VL53L1_p_007            = 0;
 800b88c:	84e3      	strh	r3, [r4, #38]	@ 0x26
	*pambient_dmax_mm  = 0;
 800b88e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b890:	8013      	strh	r3, [r2, #0]
	if ((pbins->VL53L1_p_019        != 0) &&
 800b892:	f8b5 0086 	ldrh.w	r0, [r5, #134]	@ 0x86
 800b896:	b120      	cbz	r0, 800b8a2 <VL53L1_f_001+0x36>
		(pbins->total_periods_elapsed      != 0)) {
 800b898:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f040 80c5 	bne.w	800ba2c <VL53L1_f_001+0x1c0>
	if ((pcal->ref__actual_effective_spads != 0) &&
 800b8a2:	8832      	ldrh	r2, [r6, #0]
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	f000 80bd 	beq.w	800ba24 <VL53L1_f_001+0x1b8>
		(pbins->VL53L1_p_019        != 0) &&
 800b8aa:	f8b5 3086 	ldrh.w	r3, [r5, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 80b8 	beq.w	800ba24 <VL53L1_f_001+0x1b8>
		(pcal->ref_reflectance_pc          != 0) &&
 800b8b4:	88f3      	ldrh	r3, [r6, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 80b4 	beq.w	800ba24 <VL53L1_f_001+0x1b8>
		(pbins->total_periods_elapsed      != 0)) {
 800b8bc:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 80af 	beq.w	800ba24 <VL53L1_f_001+0x1b8>
		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800b8c6:	8870      	ldrh	r0, [r6, #2]
		tmp64 *= (1000 * 256);
 800b8c8:	0143      	lsls	r3, r0, #5
 800b8ca:	1a1b      	subs	r3, r3, r0
 800b8cc:	eb61 0101 	sbc.w	r1, r1, r1
 800b8d0:	0089      	lsls	r1, r1, #2
 800b8d2:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	181b      	adds	r3, r3, r0
 800b8da:	f141 0100 	adc.w	r1, r1, #0
 800b8de:	02c9      	lsls	r1, r1, #11
 800b8e0:	ea41 5153 	orr.w	r1, r1, r3, lsr #21
 800b8e4:	02db      	lsls	r3, r3, #11
		tmp32  = pcal->ref__actual_effective_spads/2;
 800b8e6:	0850      	lsrs	r0, r2, #1
		tmp64 += (uint64_t)tmp32;
 800b8e8:	18c0      	adds	r0, r0, r3
		tmp64  = do_division_u(tmp64,
 800b8ea:	f04f 0300 	mov.w	r3, #0
 800b8ee:	f141 0100 	adc.w	r1, r1, #0
 800b8f2:	f7f4 fca1 	bl	8000238 <__aeabi_uldivmod>
		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800b8f6:	6120      	str	r0, [r4, #16]
		pdata->VL53L1_p_012 <<= 4;
 800b8f8:	ea4f 1800 	mov.w	r8, r0, lsl #4
 800b8fc:	f8c4 8010 	str.w	r8, [r4, #16]
		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800b900:	f8d4 a000 	ldr.w	sl, [r4]
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800b904:	6963      	ldr	r3, [r4, #20]
 800b906:	fba3 920a 	umull	r9, r2, r3, sl
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800b90a:	f8b4 b01a 	ldrh.w	fp, [r4, #26]
 800b90e:	f8cd b008 	str.w	fp, [sp, #8]
 800b912:	fbab 9309 	umull	r9, r3, fp, r9
 800b916:	fb0b 3302 	mla	r3, fp, r2, r3
		tmp64  += (1<<(11+7));
 800b91a:	f519 2980 	adds.w	r9, r9, #262144	@ 0x40000
 800b91e:	f143 0300 	adc.w	r3, r3, #0
		tmp64 >>= (11+8);
 800b922:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 800b926:	ea49 3943 	orr.w	r9, r9, r3, lsl #13
 800b92a:	0cdb      	lsrs	r3, r3, #19
		tmp64  +=  500;
 800b92c:	f519 79fa 	adds.w	r9, r9, #500	@ 0x1f4
 800b930:	f143 0300 	adc.w	r3, r3, #0
 800b934:	4619      	mov	r1, r3
		tmp64   = do_division_u(tmp64, 1000);
 800b936:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b93a:	2300      	movs	r3, #0
 800b93c:	4648      	mov	r0, r9
 800b93e:	9103      	str	r1, [sp, #12]
 800b940:	f7f4 fc7a 	bl	8000238 <__aeabi_uldivmod>
		if (tmp64 > 0x00FFFFFF)
 800b944:	f06f 53c0 	mvn.w	r3, #402653184	@ 0x18000000
 800b948:	454b      	cmp	r3, r9
 800b94a:	f04f 0303 	mov.w	r3, #3
 800b94e:	9903      	ldr	r1, [sp, #12]
 800b950:	418b      	sbcs	r3, r1
 800b952:	d201      	bcs.n	800b958 <VL53L1_f_001+0xec>
			tmp64 = 0x00FFFFFF;
 800b954:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800b958:	4681      	mov	r9, r0
 800b95a:	61e0      	str	r0, [r4, #28]
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800b95c:	fba8 8a0a 	umull	r8, sl, r8, sl
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800b960:	9b02      	ldr	r3, [sp, #8]
 800b962:	fba3 2808 	umull	r2, r8, r3, r8
 800b966:	fb0b 830a 	mla	r3, fp, sl, r8
		tmp64  += (1<<(11+7));
 800b96a:	f512 2280 	adds.w	r2, r2, #262144	@ 0x40000
 800b96e:	f143 0300 	adc.w	r3, r3, #0
		tmp64 >>= (11+8);
 800b972:	0cd2      	lsrs	r2, r2, #19
 800b974:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
 800b978:	0cd8      	lsrs	r0, r3, #19
				   (uint64_t)pcal->coverglass_transmission);
 800b97a:	8933      	ldrh	r3, [r6, #8]
		tmp64  *= ((uint64_t)target_reflectance *
 800b97c:	9901      	ldr	r1, [sp, #4]
 800b97e:	fba1 3103 	umull	r3, r1, r1, r3
 800b982:	fba3 2102 	umull	r2, r1, r3, r2
 800b986:	fb03 1100 	mla	r1, r3, r0, r1
		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800b98a:	88f3      	ldrh	r3, [r6, #6]
 800b98c:	01d8      	lsls	r0, r3, #7
 800b98e:	1880      	adds	r0, r0, r2
		tmp64 = do_division_u(tmp64,
 800b990:	ea4f 2203 	mov.w	r2, r3, lsl #8
 800b994:	f04f 0300 	mov.w	r3, #0
 800b998:	f141 0100 	adc.w	r1, r1, #0
 800b99c:	f7f4 fc4c 	bl	8000238 <__aeabi_uldivmod>
		tmp64  +=  500;
 800b9a0:	f510 78fa 	adds.w	r8, r0, #500	@ 0x1f4
 800b9a4:	f141 0a00 	adc.w	sl, r1, #0
		tmp64 = do_division_u(tmp64, 1000);
 800b9a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	4651      	mov	r1, sl
 800b9b2:	f7f4 fc41 	bl	8000238 <__aeabi_uldivmod>
		if (tmp64 > 0x00FFFFFF)
 800b9b6:	f06f 53c0 	mvn.w	r3, #402653184	@ 0x18000000
 800b9ba:	4543      	cmp	r3, r8
 800b9bc:	f04f 0303 	mov.w	r3, #3
 800b9c0:	eb73 030a 	sbcs.w	r3, r3, sl
 800b9c4:	d201      	bcs.n	800b9ca <VL53L1_f_001+0x15e>
			tmp64 = 0x00FFFFFF;
 800b9c6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800b9ca:	6220      	str	r0, [r4, #32]
		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800b9cc:	ea4f 2009 	mov.w	r0, r9, lsl #8
 800b9d0:	f7ff fd0b 	bl	800b3ea <VL53L1_isqrt>
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800b9d4:	787b      	ldrb	r3, [r7, #1]
 800b9d6:	fb03 f000 	mul.w	r0, r3, r0
		if (pdata->VL53L1_p_004 <
 800b9da:	69e2      	ldr	r2, [r4, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
		if (pdata->VL53L1_p_004 <
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d205      	bcs.n	800b9ee <VL53L1_f_001+0x182>
			amb_thres_delta =
 800b9e2:	1a9b      	subs	r3, r3, r2
			amb_thres_delta <<= 8;
 800b9e4:	021a      	lsls	r2, r3, #8
			if (tmp32 < amb_thres_delta)
 800b9e6:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
 800b9ea:	d200      	bcs.n	800b9ee <VL53L1_f_001+0x182>
				tmp32 = amb_thres_delta;
 800b9ec:	4610      	mov	r0, r2
			(int16_t)VL53L1_f_002(
 800b9ee:	783b      	ldrb	r3, [r7, #0]
 800b9f0:	88b2      	ldrh	r2, [r6, #4]
 800b9f2:	6a21      	ldr	r1, [r4, #32]
 800b9f4:	f7ff ff24 	bl	800b840 <VL53L1_f_002>
		pdata->VL53L1_p_007 =
 800b9f8:	84e0      	strh	r0, [r4, #38]	@ 0x26
		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800b9fa:	6a23      	ldr	r3, [r4, #32]
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800b9fc:	f8b5 1082 	ldrh.w	r1, [r5, #130]	@ 0x82
 800ba00:	fb03 f101 	mul.w	r1, r3, r1
		tmp32 += (1 << 3);
 800ba04:	3108      	adds	r1, #8
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800ba06:	68b8      	ldr	r0, [r7, #8]
			(int16_t)VL53L1_f_002(
 800ba08:	783b      	ldrb	r3, [r7, #0]
 800ba0a:	88b2      	ldrh	r2, [r6, #4]
 800ba0c:	0909      	lsrs	r1, r1, #4
 800ba0e:	0200      	lsls	r0, r0, #8
 800ba10:	f7ff ff16 	bl	800b840 <VL53L1_f_002>
 800ba14:	b200      	sxth	r0, r0
		pdata->VL53L1_p_035 =
 800ba16:	84a0      	strh	r0, [r4, #36]	@ 0x24
		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800ba18:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 800ba1c:	4298      	cmp	r0, r3
 800ba1e:	da49      	bge.n	800bab4 <VL53L1_f_001+0x248>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800ba20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba22:	8018      	strh	r0, [r3, #0]
}
 800ba24:	2000      	movs	r0, #0
 800ba26:	b005      	add	sp, #20
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800ba2c:	f7ff fc8c 	bl	800b348 <VL53L1_calc_pll_period_us>
		periods_elapsed = pbins->total_periods_elapsed + 1;
 800ba30:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
			VL53L1_duration_maths(
 800ba34:	3301      	adds	r3, #1
 800ba36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba3a:	2110      	movs	r1, #16
 800ba3c:	f7ff fc8d 	bl	800b35a <VL53L1_duration_maths>
 800ba40:	4601      	mov	r1, r0
		pdata->VL53L1_p_036  =
 800ba42:	6020      	str	r0, [r4, #0]
			VL53L1_rate_maths(
 800ba44:	f8d5 00a4 	ldr.w	r0, [r5, #164]	@ 0xa4
 800ba48:	f7ff fd2d 	bl	800b4a6 <VL53L1_rate_maths>
		pdata->VL53L1_p_001 =
 800ba4c:	8320      	strh	r0, [r4, #24]
			VL53L1_events_per_spad_maths(
 800ba4e:	6822      	ldr	r2, [r4, #0]
 800ba50:	f8b5 107c 	ldrh.w	r1, [r5, #124]	@ 0x7c
 800ba54:	f8d5 00a4 	ldr.w	r0, [r5, #164]	@ 0xa4
 800ba58:	f7ff fc95 	bl	800b386 <VL53L1_events_per_spad_maths>
 800ba5c:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800ba5e:	6160      	str	r0, [r4, #20]
		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800ba60:	8afb      	ldrh	r3, [r7, #22]
 800ba62:	81a3      	strh	r3, [r4, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800ba64:	8363      	strh	r3, [r4, #26]
		if (pdata->VL53L1_p_033 > 0) {
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f43f af1b 	beq.w	800b8a2 <VL53L1_f_001+0x36>
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800ba6c:	8b38      	ldrh	r0, [r7, #24]
			tmp64  *= 1000;
 800ba6e:	0143      	lsls	r3, r0, #5
 800ba70:	1a1b      	subs	r3, r3, r0
 800ba72:	eb61 0101 	sbc.w	r1, r1, r1
 800ba76:	0089      	lsls	r1, r1, #2
 800ba78:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	181b      	adds	r3, r3, r0
 800ba80:	f141 0100 	adc.w	r1, r1, #0
 800ba84:	00c9      	lsls	r1, r1, #3
 800ba86:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ba8a:	00db      	lsls	r3, r3, #3
			tmp64 <<= (11+1);
 800ba8c:	0309      	lsls	r1, r1, #12
 800ba8e:	ea41 5113 	orr.w	r1, r1, r3, lsr #20
 800ba92:	031b      	lsls	r3, r3, #12
			tmp32 = pdata->VL53L1_p_033/2;
 800ba94:	0850      	lsrs	r0, r2, #1
			tmp64  += (uint64_t)tmp32;
 800ba96:	18c0      	adds	r0, r0, r3
			tmp64 = do_division_u(tmp64,
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	f141 0100 	adc.w	r1, r1, #0
 800baa0:	f7f4 fbca 	bl	8000238 <__aeabi_uldivmod>
			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800baa4:	8afb      	ldrh	r3, [r7, #22]
 800baa6:	4298      	cmp	r0, r3
 800baa8:	f171 0100 	sbcs.w	r1, r1, #0
 800baac:	f4bf aef9 	bcs.w	800b8a2 <VL53L1_f_001+0x36>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800bab0:	8360      	strh	r0, [r4, #26]
 800bab2:	e6f6      	b.n	800b8a2 <VL53L1_f_001+0x36>
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800bab4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bab6:	8013      	strh	r3, [r2, #0]
 800bab8:	e7b4      	b.n	800ba24 <VL53L1_f_001+0x1b8>

0800baba <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800baba:	b538      	push	{r3, r4, r5, lr}
 800babc:	4604      	mov	r4, r0


	uint8_t  lb                 = 0;

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800babe:	2318      	movs	r3, #24
 800bac0:	7043      	strb	r3, [r0, #1]
	palgo->VL53L1_p_022                = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	7003      	strb	r3, [r0, #0]
	palgo->VL53L1_p_024           = 0;
 800bac6:	7083      	strb	r3, [r0, #2]
	palgo->VL53L1_p_045         = 0;
 800bac8:	7103      	strb	r3, [r0, #4]
	palgo->VL53L1_p_004   = 0;
 800baca:	6083      	str	r3, [r0, #8]
	palgo->VL53L1_p_032 = 0;
 800bacc:	60c3      	str	r3, [r0, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800bace:	e010      	b.n	800baf2 <VL53L1_f_016+0x38>
		palgo->VL53L1_p_043[lb]      = 0;
 800bad0:	18e1      	adds	r1, r4, r3
 800bad2:	2200      	movs	r2, #0
 800bad4:	740a      	strb	r2, [r1, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800bad6:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800bada:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800bade:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800bae2:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800bae6:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 800baea:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800baee:	3301      	adds	r3, #1
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b17      	cmp	r3, #23
 800baf4:	d9ec      	bls.n	800bad0 <VL53L1_f_016+0x16>
	}

	palgo->VL53L1_p_049 = 0;
 800baf6:	2500      	movs	r5, #0
 800baf8:	f884 5178 	strb.w	r5, [r4, #376]	@ 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800bafc:	2308      	movs	r3, #8
 800bafe:	f884 3179 	strb.w	r3, [r4, #377]	@ 0x179
	palgo->VL53L1_p_051             = 0;
 800bb02:	f884 517a 	strb.w	r5, [r4, #378]	@ 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800bb06:	f504 7227 	add.w	r2, r4, #668	@ 0x29c
 800bb0a:	2118      	movs	r1, #24
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f7ff fdaa 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800bb12:	f504 7252 	add.w	r2, r4, #840	@ 0x348
 800bb16:	2118      	movs	r1, #24
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f7ff fda4 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800bb1e:	f504 727d 	add.w	r2, r4, #1012	@ 0x3f4
 800bb22:	2118      	movs	r1, #24
 800bb24:	4628      	mov	r0, r5
 800bb26:	f7ff fd9e 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800bb2a:	f504 6294 	add.w	r2, r4, #1184	@ 0x4a0
 800bb2e:	2118      	movs	r1, #24
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7ff fd98 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800bb36:	f204 524c 	addw	r2, r4, #1356	@ 0x54c
 800bb3a:	2118      	movs	r1, #24
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f7ff fd92 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800bb42:	bd38      	pop	{r3, r4, r5, pc}

0800bb44 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	468a      	mov	sl, r1
 800bb4e:	4691      	mov	r9, r2
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800bb54:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800bb58:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
	int32_t  samples      = 0;

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800bb5a:	7a6b      	ldrb	r3, [r5, #9]
 800bb5c:	7073      	strb	r3, [r6, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800bb5e:	7a2b      	ldrb	r3, [r5, #8]
 800bb60:	7033      	strb	r3, [r6, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800bb62:	7aab      	ldrb	r3, [r5, #10]
 800bb64:	70b3      	strb	r3, [r6, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800bb66:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800bb6a:	60b3      	str	r3, [r6, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800bb6c:	f895 0084 	ldrb.w	r0, [r5, #132]	@ 0x84
 800bb70:	f7ff fd38 	bl	800b5e4 <VL53L1_decode_vcsel_period>
	palgo->VL53L1_p_031 =
 800bb74:	70f0      	strb	r0, [r6, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800bb76:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800bb7a:	17d9      	asrs	r1, r3, #31
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800bb7c:	fba4 3203 	umull	r3, r2, r4, r3
 800bb80:	fb04 2201 	mla	r2, r4, r1, r2
	tmp += 2048;
 800bb84:	f513 6300 	adds.w	r3, r3, #2048	@ 0x800
 800bb88:	f142 0200 	adc.w	r2, r2, #0
	tmp = do_division_s(tmp, 4096);
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	db04      	blt.n	800bb9c <VL53L1_f_018+0x58>
 800bb92:	0b1b      	lsrs	r3, r3, #12
	amb_events = (int32_t)tmp;
 800bb94:	ea43 5801 	orr.w	r8, r3, r1, lsl #20



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800bb98:	2400      	movs	r4, #0
 800bb9a:	e01d      	b.n	800bbd8 <VL53L1_f_018+0x94>
	tmp = do_division_s(tmp, 4096);
 800bb9c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800bba0:	185b      	adds	r3, r3, r1
 800bba2:	f142 0100 	adc.w	r1, r2, #0
 800bba6:	e7f4      	b.n	800bb92 <VL53L1_f_018+0x4e>
			if (lb < pxtalk->VL53L1_p_024 &&
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
			else
				VL53L1_p_008 = samples *  amb_events;
 800bba8:	fb07 f008 	mul.w	r0, r7, r8

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800bbac:	f7ff fc1d 	bl	800b3ea <VL53L1_isqrt>

			VL53L1_p_008 += (samples/2);
 800bbb0:	eb00 0357 	add.w	r3, r0, r7, lsr #1
			VL53L1_p_008 /= samples;
 800bbb4:	fb93 f3f7 	sdiv	r3, r3, r7
			VL53L1_p_008 *= ambient_threshold_sigma;
 800bbb8:	fb0a f303 	mul.w	r3, sl, r3
			VL53L1_p_008 += 8;
			VL53L1_p_008 /= 16;
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	d421      	bmi.n	800bc04 <VL53L1_f_018+0xc0>
			VL53L1_p_008 += amb_events;
 800bbc0:	eb08 1323 	add.w	r3, r8, r3, asr #4

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800bbc4:	454b      	cmp	r3, r9
 800bbc6:	da00      	bge.n	800bbca <VL53L1_f_018+0x86>
				VL53L1_p_008 = min_ambient_threshold_events;
 800bbc8:	464b      	mov	r3, r9

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800bbca:	f104 0216 	add.w	r2, r4, #22
 800bbce:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800bbd2:	60f3      	str	r3, [r6, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800bbd4:	3401      	adds	r4, #1
 800bbd6:	b2e4      	uxtb	r4, r4
 800bbd8:	7aab      	ldrb	r3, [r5, #10]
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	d914      	bls.n	800bc08 <VL53L1_f_018+0xc4>
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800bbde:	eb05 0394 	add.w	r3, r5, r4, lsr #2
 800bbe2:	7c9f      	ldrb	r7, [r3, #18]
		if (samples > 0) {
 800bbe4:	2f00      	cmp	r7, #0
 800bbe6:	d0f5      	beq.n	800bbd4 <VL53L1_f_018+0x90>
			if (lb < pxtalk->VL53L1_p_024 &&
 800bbe8:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	d9db      	bls.n	800bba8 <VL53L1_f_018+0x64>
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0d8      	beq.n	800bba8 <VL53L1_f_018+0x64>
					pxtalk->bin_data[lb]);
 800bbf6:	1da3      	adds	r3, r4, #6
 800bbf8:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800bbfc:	4440      	add	r0, r8
 800bbfe:	fb07 f000 	mul.w	r0, r7, r0
 800bc02:	e7d3      	b.n	800bbac <VL53L1_f_018+0x68>
			VL53L1_p_008 /= 16;
 800bc04:	330f      	adds	r3, #15
 800bc06:	e7db      	b.n	800bbc0 <VL53L1_f_018+0x7c>

	}



	palgo->VL53L1_p_045 = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	7133      	strb	r3, [r6, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800bc0c:	7a2b      	ldrb	r3, [r5, #8]
 800bc0e:	e006      	b.n	800bc1e <VL53L1_f_018+0xda>
		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
			palgo->VL53L1_p_043[lb]      = 1;
			palgo->VL53L1_p_046[lb] = 1;
			palgo->VL53L1_p_045++;
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800bc10:	18f2      	adds	r2, r6, r3
 800bc12:	2100      	movs	r1, #0
 800bc14:	7411      	strb	r1, [r2, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800bc16:	f882 1028 	strb.w	r1, [r2, #40]	@ 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	7aaa      	ldrb	r2, [r5, #10]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d911      	bls.n	800bc48 <VL53L1_f_018+0x104>
		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800bc24:	1d9a      	adds	r2, r3, #6
 800bc26:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800bc2a:	f103 0216 	add.w	r2, r3, #22
 800bc2e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800bc32:	4291      	cmp	r1, r2
 800bc34:	ddec      	ble.n	800bc10 <VL53L1_f_018+0xcc>
			palgo->VL53L1_p_043[lb]      = 1;
 800bc36:	18f2      	adds	r2, r6, r3
 800bc38:	2101      	movs	r1, #1
 800bc3a:	7411      	strb	r1, [r2, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800bc3c:	f882 1028 	strb.w	r1, [r2, #40]	@ 0x28
			palgo->VL53L1_p_045++;
 800bc40:	7932      	ldrb	r2, [r6, #4]
 800bc42:	440a      	add	r2, r1
 800bc44:	7132      	strb	r2, [r6, #4]
 800bc46:	e7e8      	b.n	800bc1a <VL53L1_f_018+0xd6>

	LOG_FUNCTION_END(status);

	return status;

}
 800bc48:	2000      	movs	r0, #0
 800bc4a:	b003      	add	sp, #12
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc50 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800bc50:	b510      	push	{r4, lr}
	uint8_t  j            = 0;
	uint8_t  found        = 0;

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	f880 3178 	strb.w	r3, [r0, #376]	@ 0x178
	uint8_t  found        = 0;
 800bc58:	461c      	mov	r4, r3

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800bc5a:	e001      	b.n	800bc60 <VL53L1_f_019+0x10>
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	78c1      	ldrb	r1, [r0, #3]
 800bc62:	4299      	cmp	r1, r3
 800bc64:	d91d      	bls.n	800bca2 <VL53L1_f_019+0x52>

		j = (i + 1) % palgo->VL53L1_p_031;
 800bc66:	469e      	mov	lr, r3
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	fb92 fcf1 	sdiv	ip, r2, r1
 800bc6e:	fb01 221c 	mls	r2, r1, ip, r2
 800bc72:	fa5f fc82 	uxtb.w	ip, r2



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800bc76:	7881      	ldrb	r1, [r0, #2]
 800bc78:	4299      	cmp	r1, r3
 800bc7a:	d9ef      	bls.n	800bc5c <VL53L1_f_019+0xc>
 800bc7c:	4561      	cmp	r1, ip
 800bc7e:	d9ed      	bls.n	800bc5c <VL53L1_f_019+0xc>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800bc80:	4486      	add	lr, r0
 800bc82:	f89e 1028 	ldrb.w	r1, [lr, #40]	@ 0x28
 800bc86:	2900      	cmp	r1, #0
 800bc88:	d1e8      	bne.n	800bc5c <VL53L1_f_019+0xc>
				palgo->VL53L1_p_046[j] == 1 &&
 800bc8a:	fa50 f282 	uxtab	r2, r0, r2
 800bc8e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800bc92:	2a01      	cmp	r2, #1
 800bc94:	d1e2      	bne.n	800bc5c <VL53L1_f_019+0xc>
				palgo->VL53L1_p_046[j] == 1 &&
 800bc96:	2c00      	cmp	r4, #0
 800bc98:	d1e0      	bne.n	800bc5c <VL53L1_f_019+0xc>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800bc9a:	f880 3178 	strb.w	r3, [r0, #376]	@ 0x178
				found = 1;
 800bc9e:	4614      	mov	r4, r2
 800bca0:	e7dc      	b.n	800bc5c <VL53L1_f_019+0xc>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800bca2:	2000      	movs	r0, #0
 800bca4:	bd10      	pop	{r4, pc}

0800bca6 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800bca6:	b510      	push	{r4, lr}
	uint8_t  j            = 0;
	uint8_t  lb            = 0;

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800bca8:	f890 e178 	ldrb.w	lr, [r0, #376]	@ 0x178
 800bcac:	4673      	mov	r3, lr
 800bcae:	e00f      	b.n	800bcd0 <VL53L1_f_020+0x2a>

			if (palgo->VL53L1_p_046[i] == 0 &&
				palgo->VL53L1_p_046[j] == 1)
				palgo->VL53L1_p_051++;

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800bcb0:	f890 c17a 	ldrb.w	ip, [r0, #378]	@ 0x17a
 800bcb4:	f890 4179 	ldrb.w	r4, [r0, #377]	@ 0x179
 800bcb8:	45a4      	cmp	ip, r4
 800bcba:	d901      	bls.n	800bcc0 <VL53L1_f_020+0x1a>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800bcbc:	f880 417a 	strb.w	r4, [r0, #378]	@ 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800bcc0:	b371      	cbz	r1, 800bd20 <VL53L1_f_020+0x7a>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800bcc2:	f890 117a 	ldrb.w	r1, [r0, #378]	@ 0x17a
 800bcc6:	4402      	add	r2, r0
 800bcc8:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
		lb++) {
 800bccc:	3301      	adds	r3, #1
 800bcce:	b2db      	uxtb	r3, r3
		palgo->VL53L1_p_031);
 800bcd0:	78c1      	ldrb	r1, [r0, #3]
		lb < (palgo->VL53L1_p_049 +
 800bcd2:	eb0e 0201 	add.w	r2, lr, r1
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	da27      	bge.n	800bd2a <VL53L1_f_020+0x84>
		i =  lb      % palgo->VL53L1_p_031;
 800bcda:	fbb3 f2f1 	udiv	r2, r3, r1
 800bcde:	fb01 3212 	mls	r2, r1, r2, r3
 800bce2:	b2d2      	uxtb	r2, r2
		j = (lb + 1) % palgo->VL53L1_p_031;
 800bce4:	f103 0c01 	add.w	ip, r3, #1
 800bce8:	fb9c f4f1 	sdiv	r4, ip, r1
 800bcec:	fb01 cc14 	mls	ip, r1, r4, ip
 800bcf0:	fa5f f48c 	uxtb.w	r4, ip
		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800bcf4:	7881      	ldrb	r1, [r0, #2]
 800bcf6:	4291      	cmp	r1, r2
 800bcf8:	d9e8      	bls.n	800bccc <VL53L1_f_020+0x26>
 800bcfa:	42a1      	cmp	r1, r4
 800bcfc:	d9e6      	bls.n	800bccc <VL53L1_f_020+0x26>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800bcfe:	1881      	adds	r1, r0, r2
 800bd00:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 800bd04:	2900      	cmp	r1, #0
 800bd06:	d1d3      	bne.n	800bcb0 <VL53L1_f_020+0xa>
				palgo->VL53L1_p_046[j] == 1)
 800bd08:	fa50 fc8c 	uxtab	ip, r0, ip
 800bd0c:	f89c 4028 	ldrb.w	r4, [ip, #40]	@ 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800bd10:	2c01      	cmp	r4, #1
 800bd12:	d1cd      	bne.n	800bcb0 <VL53L1_f_020+0xa>
				palgo->VL53L1_p_051++;
 800bd14:	f890 417a 	ldrb.w	r4, [r0, #378]	@ 0x17a
 800bd18:	3401      	adds	r4, #1
 800bd1a:	f880 417a 	strb.w	r4, [r0, #378]	@ 0x17a
 800bd1e:	e7c7      	b.n	800bcb0 <VL53L1_f_020+0xa>
			else
				palgo->VL53L1_p_047[i] = 0;
 800bd20:	4402      	add	r2, r0
 800bd22:	2100      	movs	r1, #0
 800bd24:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
 800bd28:	e7d0      	b.n	800bccc <VL53L1_f_020+0x26>

	LOG_FUNCTION_END(status);

	return status;

}
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	bd10      	pop	{r4, pc}

0800bd2e <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800bd2e:	b5f0      	push	{r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800bd30:	f890 e003 	ldrb.w	lr, [r0, #3]
 800bd34:	f10e 35ff 	add.w	r5, lr, #4294967295
	max_filter_half_width = max_filter_half_width >> 1;
 800bd38:	f3c5 0546 	ubfx	r5, r5, #1, #7

	for (blb = palgo->VL53L1_p_049;
 800bd3c:	f890 4178 	ldrb.w	r4, [r0, #376]	@ 0x178
 800bd40:	4623      	mov	r3, r4
 800bd42:	e001      	b.n	800bd48 <VL53L1_f_021+0x1a>
		blb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		blb++) {
 800bd44:	3301      	adds	r3, #1
 800bd46:	b2db      	uxtb	r3, r3
		blb < (palgo->VL53L1_p_049 +
 800bd48:	eb04 020e 	add.w	r2, r4, lr
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	da5c      	bge.n	800be0a <VL53L1_f_021+0xdc>



		i =  blb      % palgo->VL53L1_p_031;
 800bd50:	fbb3 f2fe 	udiv	r2, r3, lr
 800bd54:	fb0e 3212 	mls	r2, lr, r2, r3
 800bd58:	b2d2      	uxtb	r2, r2
		j = (blb + 1) % palgo->VL53L1_p_031;
 800bd5a:	1c59      	adds	r1, r3, #1
 800bd5c:	fb91 fcfe 	sdiv	ip, r1, lr
 800bd60:	fb0e 111c 	mls	r1, lr, ip, r1
 800bd64:	b2ce      	uxtb	r6, r1



		if (i < palgo->VL53L1_p_024 &&
 800bd66:	f890 c002 	ldrb.w	ip, [r0, #2]
 800bd6a:	4594      	cmp	ip, r2
 800bd6c:	d9ea      	bls.n	800bd44 <VL53L1_f_021+0x16>
 800bd6e:	45b4      	cmp	ip, r6
 800bd70:	d9e8      	bls.n	800bd44 <VL53L1_f_021+0x16>
				j < palgo->VL53L1_p_024) {



			if (palgo->VL53L1_p_047[i] == 0 &&
 800bd72:	4402      	add	r2, r0
 800bd74:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800bd78:	b9da      	cbnz	r2, 800bdb2 <VL53L1_f_021+0x84>
					palgo->VL53L1_p_047[j] > 0) {
 800bd7a:	fa50 f681 	uxtab	r6, r0, r1
 800bd7e:	f896 6040 	ldrb.w	r6, [r6, #64]	@ 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800bd82:	b1b6      	cbz	r6, 800bdb2 <VL53L1_f_021+0x84>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800bd84:	3e01      	subs	r6, #1
 800bd86:	b2f6      	uxtb	r6, r6

				if (pulse_no < palgo->VL53L1_p_050) {
 800bd88:	f890 c179 	ldrb.w	ip, [r0, #377]	@ 0x179
 800bd8c:	45b4      	cmp	ip, r6
 800bd8e:	d910      	bls.n	800bdb2 <VL53L1_f_021+0x84>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
					pdata->VL53L1_p_015 = blb;
 800bd90:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
 800bd94:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800bd98:	f88c 317c 	strb.w	r3, [ip, #380]	@ 0x17c
					pdata->VL53L1_p_022    = blb + 1;
 800bd9c:	1c5f      	adds	r7, r3, #1
 800bd9e:	f88c 717d 	strb.w	r7, [ip, #381]	@ 0x17d
					pdata->VL53L1_p_025   = 0xFF;
 800bda2:	27ff      	movs	r7, #255	@ 0xff
 800bda4:	f88c 717e 	strb.w	r7, [ip, #382]	@ 0x17e
					pdata->VL53L1_p_026     = 0;
 800bda8:	2700      	movs	r7, #0
 800bdaa:	f88c 717f 	strb.w	r7, [ip, #383]	@ 0x17f
					pdata->VL53L1_p_016   = 0;
 800bdae:	f88c 7180 	strb.w	r7, [ip, #384]	@ 0x180
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	d0c6      	beq.n	800bd44 <VL53L1_f_021+0x16>
				&& palgo->VL53L1_p_047[j] == 0) {
 800bdb6:	fa50 f181 	uxtab	r1, r0, r1
 800bdba:	f891 1040 	ldrb.w	r1, [r1, #64]	@ 0x40
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	d1c0      	bne.n	800bd44 <VL53L1_f_021+0x16>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800bdc2:	3a01      	subs	r2, #1
 800bdc4:	b2d2      	uxtb	r2, r2

				if (pulse_no < palgo->VL53L1_p_050) {
 800bdc6:	f890 1179 	ldrb.w	r1, [r0, #377]	@ 0x179
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	d9ba      	bls.n	800bd44 <VL53L1_f_021+0x16>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
					pdata->VL53L1_p_026    = blb;
 800bdce:	eb02 06c2 	add.w	r6, r2, r2, lsl #3
 800bdd2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bdd6:	f886 317f 	strb.w	r3, [r6, #383]	@ 0x17f
					pdata->VL53L1_p_016  = blb + 1;
 800bdda:	1c59      	adds	r1, r3, #1
 800bddc:	b2c9      	uxtb	r1, r1
 800bdde:	f886 1180 	strb.w	r1, [r6, #384]	@ 0x180

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
						pdata->VL53L1_p_022;
 800bde2:	f896 c17d 	ldrb.w	ip, [r6, #381]	@ 0x17d
						(pdata->VL53L1_p_026 + 1) -
 800bde6:	eba3 0c0c 	sub.w	ip, r3, ip
 800bdea:	f10c 0c01 	add.w	ip, ip, #1
					pdata->VL53L1_p_027 =
 800bdee:	f886 c181 	strb.w	ip, [r6, #385]	@ 0x181
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
						pdata->VL53L1_p_015;
 800bdf2:	f896 717c 	ldrb.w	r7, [r6, #380]	@ 0x17c
						(pdata->VL53L1_p_016 + 1) -
 800bdf6:	1bc9      	subs	r1, r1, r7
 800bdf8:	3101      	adds	r1, #1
 800bdfa:	b2c9      	uxtb	r1, r1
					pdata->VL53L1_p_055 =
 800bdfc:	f886 1182 	strb.w	r1, [r6, #386]	@ 0x182

					if (pdata->VL53L1_p_055 >
 800be00:	42a9      	cmp	r1, r5
 800be02:	d99f      	bls.n	800bd44 <VL53L1_f_021+0x16>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800be04:	f886 5182 	strb.w	r5, [r6, #386]	@ 0x182
 800be08:	e79c      	b.n	800bd44 <VL53L1_f_021+0x16>

	LOG_FUNCTION_END(status);

	return status;

}
 800be0a:	2000      	movs	r0, #0
 800be0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be0e <VL53L1_f_028>:
	uint8_t i       = 0;
	uint8_t swapped = 1;

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 800be0e:	f891 317a 	ldrb.w	r3, [r1, #378]	@ 0x17a
 800be12:	2b01      	cmp	r3, #1
 800be14:	f240 80d4 	bls.w	800bfc0 <VL53L1_f_028+0x1b2>
{
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	b08b      	sub	sp, #44	@ 0x2c
 800be1e:	4605      	mov	r5, r0
 800be20:	460c      	mov	r4, r1
	uint8_t swapped = 1;
 800be22:	2601      	movs	r6, #1
 800be24:	e0c4      	b.n	800bfb0 <VL53L1_f_028+0x1a2>


			if (target_order
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 800be26:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800be2a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800be2e:	f8d2 218c 	ldr.w	r2, [r2, #396]	@ 0x18c
						p1->VL53L1_p_013) {
 800be32:	eb0e 03ce 	add.w	r3, lr, lr, lsl #3
 800be36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
				if (p0->VL53L1_p_013 <
 800be3e:	429a      	cmp	r2, r3
 800be40:	f280 8084 	bge.w	800bf4c <VL53L1_f_028+0x13e>



					memcpy(ptmp,
 800be44:	46b8      	mov	r8, r7
 800be46:	f10d 0a04 	add.w	sl, sp, #4
 800be4a:	f107 0b20 	add.w	fp, r7, #32
 800be4e:	46d1      	mov	r9, sl
 800be50:	f8d8 0000 	ldr.w	r0, [r8]
 800be54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be58:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800be5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be60:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800be64:	f108 0810 	add.w	r8, r8, #16
 800be68:	46ca      	mov	sl, r9
 800be6a:	45d8      	cmp	r8, fp
 800be6c:	d1ef      	bne.n	800be4e <VL53L1_f_028+0x40>
 800be6e:	f8d8 0000 	ldr.w	r0, [r8]
 800be72:	f8c9 0000 	str.w	r0, [r9]
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800be76:	4662      	mov	r2, ip
 800be78:	463b      	mov	r3, r7
 800be7a:	f10c 0920 	add.w	r9, ip, #32
 800be7e:	f8d2 8000 	ldr.w	r8, [r2]
 800be82:	6857      	ldr	r7, [r2, #4]
 800be84:	6890      	ldr	r0, [r2, #8]
 800be86:	68d1      	ldr	r1, [r2, #12]
 800be88:	f8c3 8000 	str.w	r8, [r3]
 800be8c:	605f      	str	r7, [r3, #4]
 800be8e:	6098      	str	r0, [r3, #8]
 800be90:	60d9      	str	r1, [r3, #12]
 800be92:	3210      	adds	r2, #16
 800be94:	3310      	adds	r3, #16
 800be96:	454a      	cmp	r2, r9
 800be98:	d1f1      	bne.n	800be7e <VL53L1_f_028+0x70>
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	601a      	str	r2, [r3, #0]
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800be9e:	f10d 0804 	add.w	r8, sp, #4
 800bea2:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800bea6:	4647      	mov	r7, r8
 800bea8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800beaa:	f8cc 0000 	str.w	r0, [ip]
 800beae:	f8cc 1004 	str.w	r1, [ip, #4]
 800beb2:	f8cc 2008 	str.w	r2, [ip, #8]
 800beb6:	f8cc 300c 	str.w	r3, [ip, #12]
 800beba:	46b8      	mov	r8, r7
 800bebc:	f10c 0c10 	add.w	ip, ip, #16
 800bec0:	454f      	cmp	r7, r9
 800bec2:	d1f0      	bne.n	800bea6 <VL53L1_f_028+0x98>
 800bec4:	6838      	ldr	r0, [r7, #0]
 800bec6:	f8cc 0000 	str.w	r0, [ip]
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800beca:	4631      	mov	r1, r6
 800becc:	e03e      	b.n	800bf4c <VL53L1_f_028+0x13e>

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {



					memcpy(ptmp,
 800bece:	46d1      	mov	r9, sl
 800bed0:	f8d8 0000 	ldr.w	r0, [r8]
 800bed4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bed8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bedc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bee0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800bee4:	f108 0810 	add.w	r8, r8, #16
 800bee8:	46ca      	mov	sl, r9
 800beea:	45d8      	cmp	r8, fp
 800beec:	d1ef      	bne.n	800bece <VL53L1_f_028+0xc0>
 800beee:	f8d8 0000 	ldr.w	r0, [r8]
 800bef2:	f8c9 0000 	str.w	r0, [r9]
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800bef6:	4662      	mov	r2, ip
 800bef8:	463b      	mov	r3, r7
 800befa:	f10c 0920 	add.w	r9, ip, #32
 800befe:	f8d2 8000 	ldr.w	r8, [r2]
 800bf02:	6857      	ldr	r7, [r2, #4]
 800bf04:	6890      	ldr	r0, [r2, #8]
 800bf06:	68d1      	ldr	r1, [r2, #12]
 800bf08:	f8c3 8000 	str.w	r8, [r3]
 800bf0c:	605f      	str	r7, [r3, #4]
 800bf0e:	6098      	str	r0, [r3, #8]
 800bf10:	60d9      	str	r1, [r3, #12]
 800bf12:	3210      	adds	r2, #16
 800bf14:	3310      	adds	r3, #16
 800bf16:	454a      	cmp	r2, r9
 800bf18:	d1f1      	bne.n	800befe <VL53L1_f_028+0xf0>
 800bf1a:	6812      	ldr	r2, [r2, #0]
 800bf1c:	601a      	str	r2, [r3, #0]
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800bf1e:	f10d 0804 	add.w	r8, sp, #4
 800bf22:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800bf26:	4647      	mov	r7, r8
 800bf28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bf2a:	f8cc 0000 	str.w	r0, [ip]
 800bf2e:	f8cc 1004 	str.w	r1, [ip, #4]
 800bf32:	f8cc 2008 	str.w	r2, [ip, #8]
 800bf36:	f8cc 300c 	str.w	r3, [ip, #12]
 800bf3a:	46b8      	mov	r8, r7
 800bf3c:	f10c 0c10 	add.w	ip, ip, #16
 800bf40:	454f      	cmp	r7, r9
 800bf42:	d1f0      	bne.n	800bf26 <VL53L1_f_028+0x118>
 800bf44:	6838      	ldr	r0, [r7, #0]
 800bf46:	f8cc 0000 	str.w	r0, [ip]
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800bf4a:	4631      	mov	r1, r6
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800bf4c:	f10e 0e01 	add.w	lr, lr, #1
 800bf50:	fa5f fe8e 	uxtb.w	lr, lr
 800bf54:	f894 317a 	ldrb.w	r3, [r4, #378]	@ 0x17a
 800bf58:	4573      	cmp	r3, lr
 800bf5a:	d928      	bls.n	800bfae <VL53L1_f_028+0x1a0>
			p0 = &(palgo->VL53L1_p_002[i-1]);
 800bf5c:	f10e 32ff 	add.w	r2, lr, #4294967295
 800bf60:	eb02 0cc2 	add.w	ip, r2, r2, lsl #3
 800bf64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800bf68:	f50c 7cbc 	add.w	ip, ip, #376	@ 0x178
 800bf6c:	44a4      	add	ip, r4
 800bf6e:	f10c 0c04 	add.w	ip, ip, #4
			p1 = &(palgo->VL53L1_p_002[i]);
 800bf72:	eb0e 03ce 	add.w	r3, lr, lr, lsl #3
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800bf7c:	4423      	add	r3, r4
 800bf7e:	1d1f      	adds	r7, r3, #4
			if (target_order
 800bf80:	2d02      	cmp	r5, #2
 800bf82:	f43f af50 	beq.w	800be26 <VL53L1_f_028+0x18>
				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 800bf86:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800bf8a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf8e:	f8d2 2194 	ldr.w	r2, [r2, #404]	@ 0x194
 800bf92:	eb0e 03ce 	add.w	r3, lr, lr, lsl #3
 800bf96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf9a:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d9d4      	bls.n	800bf4c <VL53L1_f_028+0x13e>
					memcpy(ptmp,
 800bfa2:	46b8      	mov	r8, r7
 800bfa4:	f10d 0a04 	add.w	sl, sp, #4
 800bfa8:	f107 0b20 	add.w	fp, r7, #32
 800bfac:	e78f      	b.n	800bece <VL53L1_f_028+0xc0>
 800bfae:	460e      	mov	r6, r1
	while (swapped > 0) {
 800bfb0:	b116      	cbz	r6, 800bfb8 <VL53L1_f_028+0x1aa>
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800bfb2:	46b6      	mov	lr, r6
		swapped = 0;
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	e7cd      	b.n	800bf54 <VL53L1_f_028+0x146>
ENDFUNC:
	LOG_FUNCTION_END(status);

	return status;

}
 800bfb8:	2000      	movs	r0, #0
 800bfba:	b00b      	add	sp, #44	@ 0x2c
 800bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	4770      	bx	lr

0800bfc4 <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800bfc4:	b510      	push	{r4, lr}

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 800bfc6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800bfca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfce:	2400      	movs	r4, #0
 800bfd0:	f8c3 4188 	str.w	r4, [r3, #392]	@ 0x188
	pdata->VL53L1_p_020 = 0;
 800bfd4:	f8c3 4184 	str.w	r4, [r3, #388]	@ 0x184

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800bfd8:	f893 c17c 	ldrb.w	ip, [r3, #380]	@ 0x17c
 800bfdc:	e01c      	b.n	800c018 <VL53L1_f_022+0x54>
		i =  lb % palgo->VL53L1_p_031;
 800bfde:	f892 e003 	ldrb.w	lr, [r2, #3]
 800bfe2:	fbbc f3fe 	udiv	r3, ip, lr
 800bfe6:	fb0e c313 	mls	r3, lr, r3, ip
 800bfea:	b2db      	uxtb	r3, r3
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 800bfec:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
 800bff0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800bff4:	3306      	adds	r3, #6
 800bff6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bffa:	f8de 4188 	ldr.w	r4, [lr, #392]	@ 0x188
 800bffe:	4423      	add	r3, r4
 800c000:	f8ce 3188 	str.w	r3, [lr, #392]	@ 0x188
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 800c004:	f8de 3184 	ldr.w	r3, [lr, #388]	@ 0x184
 800c008:	6894      	ldr	r4, [r2, #8]
 800c00a:	4423      	add	r3, r4
 800c00c:	f8ce 3184 	str.w	r3, [lr, #388]	@ 0x184
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800c010:	f10c 0c01 	add.w	ip, ip, #1
 800c014:	fa5f fc8c 	uxtb.w	ip, ip
 800c018:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800c01c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c020:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800c024:	4563      	cmp	r3, ip
 800c026:	d2da      	bcs.n	800bfde <VL53L1_f_022+0x1a>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 800c028:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800c02c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c030:	f8d3 1188 	ldr.w	r1, [r3, #392]	@ 0x188
 800c034:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800c038:	1acb      	subs	r3, r1, r3
	pdata->VL53L1_p_013 =
 800c03a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800c03e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c042:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c

	LOG_FUNCTION_END(status);

	return status;
}
 800c046:	2000      	movs	r0, #0
 800c048:	bd10      	pop	{r4, pc}

0800c04a <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800c04a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04e:	461c      	mov	r4, r3
 800c050:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800c052:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
	int64_t event_sum     = 0;
	int64_t weighted_sum  = 0;

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 800c056:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c05a:	f8c8 3000 	str.w	r3, [r8]

	if (VL53L1_p_031 != 0)
 800c05e:	2a00      	cmp	r2, #0
 800c060:	d149      	bne.n	800c0f6 <VL53L1_f_030+0xac>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800c062:	2000      	movs	r0, #0
 800c064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			i = lb + (int16_t)VL53L1_p_031;
 800c068:	eb05 0c00 	add.w	ip, r5, r0
 800c06c:	fa0f fc8c 	sxth.w	ip, ip
 800c070:	e027      	b.n	800c0c2 <VL53L1_f_030+0x78>
			event_sum += VL53L1_p_008;
 800c072:	eb19 0202 	adds.w	r2, r9, r2
 800c076:	eb4a 0303 	adc.w	r3, sl, r3
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 800c07a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800c07e:	ea4f 2bcb 	mov.w	fp, fp, lsl #11
 800c082:	ea4b 5b50 	orr.w	fp, fp, r0, lsr #21
 800c086:	ea4f 2cc0 	mov.w	ip, r0, lsl #11
 800c08a:	f51c 6c80 	adds.w	ip, ip, #1024	@ 0x400
 800c08e:	f14b 0b00 	adc.w	fp, fp, #0
 800c092:	fb0c fa0a 	mul.w	sl, ip, sl
 800c096:	fb09 aa0b 	mla	sl, r9, fp, sl
 800c09a:	fbac c909 	umull	ip, r9, ip, r9
 800c09e:	44ca      	add	sl, r9
			weighted_sum +=
 800c0a0:	eb1c 0c0e 	adds.w	ip, ip, lr
 800c0a4:	46e6      	mov	lr, ip
 800c0a6:	eb4a 0606 	adc.w	r6, sl, r6
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	b200      	sxth	r0, r0
 800c0ae:	4288      	cmp	r0, r1
 800c0b0:	dc28      	bgt.n	800c104 <VL53L1_f_030+0xba>
		if (lb < 0)
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	dbd8      	blt.n	800c068 <VL53L1_f_030+0x1e>
			i = lb % (int16_t)VL53L1_p_031;
 800c0b6:	fb90 fcf5 	sdiv	ip, r0, r5
 800c0ba:	fb05 0c1c 	mls	ip, r5, ip, r0
 800c0be:	fa0f fc8c 	sxth.w	ip, ip
		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 800c0c2:	fa1f f98c 	uxth.w	r9, ip
 800c0c6:	f1b9 0f17 	cmp.w	r9, #23
 800c0ca:	d8ee      	bhi.n	800c0aa <VL53L1_f_030+0x60>
				(int64_t)pbins->bin_data[i] -
 800c0cc:	f10c 0c06 	add.w	ip, ip, #6
 800c0d0:	f857 902c 	ldr.w	r9, [r7, ip, lsl #2]
 800c0d4:	ea4f 7ae9 	mov.w	sl, r9, asr #31
				(int64_t)pbins->VL53L1_p_004;
 800c0d8:	f8d7 c0a4 	ldr.w	ip, [r7, #164]	@ 0xa4
			VL53L1_p_008 =
 800c0dc:	ebb9 090c 	subs.w	r9, r9, ip
 800c0e0:	eb6a 7aec 	sbc.w	sl, sl, ip, asr #31
			if (clip_events > 0 && VL53L1_p_008 < 0)
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d0c4      	beq.n	800c072 <VL53L1_f_030+0x28>
 800c0e8:	f1ba 0f00 	cmp.w	sl, #0
 800c0ec:	dac1      	bge.n	800c072 <VL53L1_f_030+0x28>
				VL53L1_p_008 = 0;
 800c0ee:	f04f 0900 	mov.w	r9, #0
 800c0f2:	46ca      	mov	sl, r9
 800c0f4:	e7bd      	b.n	800c072 <VL53L1_f_030+0x28>
 800c0f6:	4615      	mov	r5, r2
	int64_t weighted_sum  = 0;
 800c0f8:	f04f 0e00 	mov.w	lr, #0
 800c0fc:	4676      	mov	r6, lr
	int64_t event_sum     = 0;
 800c0fe:	4672      	mov	r2, lr
 800c100:	4673      	mov	r3, lr
 800c102:	e7d4      	b.n	800c0ae <VL53L1_f_030+0x64>
	if (event_sum  > 0) {
 800c104:	2a01      	cmp	r2, #1
 800c106:	f173 0100 	sbcs.w	r1, r3, #0
 800c10a:	dbaa      	blt.n	800c062 <VL53L1_f_030+0x18>
		weighted_sum += do_division_s(event_sum, 2);
 800c10c:	0fd8      	lsrs	r0, r3, #31
 800c10e:	1880      	adds	r0, r0, r2
 800c110:	f143 0100 	adc.w	r1, r3, #0
 800c114:	0840      	lsrs	r0, r0, #1
 800c116:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 800c11a:	eb10 000e 	adds.w	r0, r0, lr
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800c11e:	eb46 0161 	adc.w	r1, r6, r1, asr #1
 800c122:	f7f4 f839 	bl	8000198 <__aeabi_ldivmod>
		if (weighted_sum < 0)
 800c126:	2900      	cmp	r1, #0
 800c128:	db02      	blt.n	800c130 <VL53L1_f_030+0xe6>
		*pphase = (uint32_t)weighted_sum;
 800c12a:	f8c8 0000 	str.w	r0, [r8]
 800c12e:	e798      	b.n	800c062 <VL53L1_f_030+0x18>
			weighted_sum = 0;
 800c130:	2000      	movs	r0, #0
 800c132:	e7fa      	b.n	800c12a <VL53L1_f_030+0xe0>

0800c134 <VL53L1_f_027>:
{
 800c134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	4604      	mov	r4, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	4690      	mov	r8, r2
 800c140:	461d      	mov	r5, r3
	if (pdata->VL53L1_p_025 == 0xFF)
 800c142:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800c146:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c14a:	f893 317e 	ldrb.w	r3, [r3, #382]	@ 0x17e
 800c14e:	2bff      	cmp	r3, #255	@ 0xff
 800c150:	d067      	beq.n	800c222 <VL53L1_f_027+0xee>
	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 800c152:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800c156:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 800c15a:	f89e c17e 	ldrb.w	ip, [lr, #382]	@ 0x17e
 800c15e:	78ea      	ldrb	r2, [r5, #3]
 800c160:	fbbc f6f2 	udiv	r6, ip, r2
 800c164:	fb02 c616 	mls	r6, r2, r6, ip
 800c168:	b2f6      	uxtb	r6, r6
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 800c16a:	f89e 317c 	ldrb.w	r3, [lr, #380]	@ 0x17c
 800c16e:	4433      	add	r3, r6
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 800c170:	eba3 000c 	sub.w	r0, r3, ip
 800c174:	b281      	uxth	r1, r0
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 800c176:	f89e e180 	ldrb.w	lr, [lr, #384]	@ 0x180
 800c17a:	4476      	add	r6, lr
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 800c17c:	eba6 060c 	sub.w	r6, r6, ip
 800c180:	fa1f f986 	uxth.w	r9, r6
	window_width = VL53L1_p_016 - VL53L1_p_015;
 800c184:	ebac 0c03 	sub.w	ip, ip, r3
 800c188:	44cc      	add	ip, r9
 800c18a:	fa0f fc8c 	sxth.w	ip, ip
	if (window_width > 3)
 800c18e:	f1bc 0f03 	cmp.w	ip, #3
 800c192:	dd01      	ble.n	800c198 <VL53L1_f_027+0x64>
		window_width = 3;
 800c194:	f04f 0c03 	mov.w	ip, #3
			VL53L1_p_015 + window_width,
 800c198:	fa1f fa8c 	uxth.w	sl, ip
 800c19c:	4451      	add	r1, sl
		VL53L1_f_030(
 800c19e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c1a8:	442b      	add	r3, r5
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	f8cd 8000 	str.w	r8, [sp]
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	b209      	sxth	r1, r1
 800c1b6:	f7ff ff48 	bl	800c04a <VL53L1_f_030>
	if (status == VL53L1_ERROR_NONE)
 800c1ba:	b3d0      	cbz	r0, 800c232 <VL53L1_f_027+0xfe>
	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 800c1bc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c1c4:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800c1c8:	f8d3 1198 	ldr.w	r1, [r3, #408]	@ 0x198
 800c1cc:	428a      	cmp	r2, r1
 800c1ce:	d907      	bls.n	800c1e0 <VL53L1_f_027+0xac>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 800c1d0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c1d8:	f8c3 1190 	str.w	r1, [r3, #400]	@ 0x190
		pdata->VL53L1_p_029 = tmp_phase;
 800c1dc:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 800c1e0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c1e8:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800c1ec:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d205      	bcs.n	800c200 <VL53L1_f_027+0xcc>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 800c1f4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c1fc:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 800c200:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c204:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c208:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d905      	bls.n	800c21c <VL53L1_f_027+0xe8>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 800c210:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800c214:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800c218:	f8c5 2198 	str.w	r2, [r5, #408]	@ 0x198
}
 800c21c:	b002      	add	sp, #8
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdata->VL53L1_p_025 = 1;
 800c222:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800c226:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 217e 	strb.w	r2, [r3, #382]	@ 0x17e
 800c230:	e78f      	b.n	800c152 <VL53L1_f_027+0x1e>
				VL53L1_p_016 - window_width,
 800c232:	eba9 000a 	sub.w	r0, r9, sl
			VL53L1_f_030(
 800c236:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c240:	442b      	add	r3, r5
 800c242:	3308      	adds	r3, #8
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	f8cd 8000 	str.w	r8, [sp]
 800c24a:	463b      	mov	r3, r7
 800c24c:	78ea      	ldrb	r2, [r5, #3]
 800c24e:	4631      	mov	r1, r6
 800c250:	b200      	sxth	r0, r0
 800c252:	f7ff fefa 	bl	800c04a <VL53L1_f_030>
 800c256:	e7b1      	b.n	800c1bc <VL53L1_f_027+0x88>

0800c258 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	4605      	mov	r5, r0
 800c25c:	4614      	mov	r4, r2
 800c25e:	461f      	mov	r7, r3
 800c260:	9e06      	ldr	r6, [sp, #24]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 800c262:	22ac      	movs	r2, #172	@ 0xac
 800c264:	4630      	mov	r0, r6
 800c266:	f002 fc27 	bl	800eab8 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 800c26a:	f894 1178 	ldrb.w	r1, [r4, #376]	@ 0x178
 800c26e:	e00e      	b.n	800c28e <VL53L1_f_023+0x36>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
			i =  lb % palgo->VL53L1_p_031;
 800c270:	fbb1 fcf2 	udiv	ip, r1, r2
 800c274:	fb02 1c1c 	mls	ip, r2, ip, r1
 800c278:	fa5f fc8c 	uxtb.w	ip, ip
			if (i < ppulse->VL53L1_p_024)
 800c27c:	7ab3      	ldrb	r3, [r6, #10]
 800c27e:	4563      	cmp	r3, ip
 800c280:	d903      	bls.n	800c28a <VL53L1_f_023+0x32>
				ppulse->bin_data[i] = pad_value;
 800c282:	f10c 0c06 	add.w	ip, ip, #6
 800c286:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
		lb++) {
 800c28a:	3101      	adds	r1, #1
 800c28c:	b2c9      	uxtb	r1, r1
		lb < (palgo->VL53L1_p_049 +
 800c28e:	f894 3178 	ldrb.w	r3, [r4, #376]	@ 0x178
		palgo->VL53L1_p_031);
 800c292:	78e2      	ldrb	r2, [r4, #3]
		lb < (palgo->VL53L1_p_049 +
 800c294:	4413      	add	r3, r2
 800c296:	4299      	cmp	r1, r3
 800c298:	da10      	bge.n	800c2bc <VL53L1_f_023+0x64>
		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 800c29a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c29e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2a2:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800c2a6:	428b      	cmp	r3, r1
 800c2a8:	d8e2      	bhi.n	800c270 <VL53L1_f_023+0x18>
 800c2aa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c2ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2b2:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800c2b6:	428b      	cmp	r3, r1
 800c2b8:	d2e7      	bcs.n	800c28a <VL53L1_f_023+0x32>
 800c2ba:	e7d9      	b.n	800c270 <VL53L1_f_023+0x18>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800c2bc:	2000      	movs	r0, #0
 800c2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2c0 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	b090      	sub	sp, #64	@ 0x40
 800c2c6:	f89d a060 	ldrb.w	sl, [sp, #96]	@ 0x60
 800c2ca:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 800c2ce:	9f1c      	ldr	r7, [sp, #112]	@ 0x70

	VL53L1_Error status      = VL53L1_ERROR_NONE;
	VL53L1_Error func_status = VL53L1_ERROR_NONE;

	uint8_t  i    = 0;
	int32_t  VL53L1_p_003    = 0;
 800c2d0:	2500      	movs	r5, #0
 800c2d2:	950f      	str	r5, [sp, #60]	@ 0x3c
	int32_t  VL53L1_p_018    = 0;
 800c2d4:	950e      	str	r5, [sp, #56]	@ 0x38
	int32_t  VL53L1_p_001    = 0;
 800c2d6:	950d      	str	r5, [sp, #52]	@ 0x34
	int32_t  a_zp = 0;
 800c2d8:	950c      	str	r5, [sp, #48]	@ 0x30
	int32_t  c_zp = 0;
 800c2da:	950b      	str	r5, [sp, #44]	@ 0x2c
	int32_t  ax   = 0;
 800c2dc:	950a      	str	r5, [sp, #40]	@ 0x28
	int32_t  bx   = 0;
 800c2de:	9509      	str	r5, [sp, #36]	@ 0x24
	int32_t  cx   = 0;
 800c2e0:	9508      	str	r5, [sp, #32]


	if (VL53L1_p_031 == 0) {
 800c2e2:	2a00      	cmp	r2, #0
 800c2e4:	d03b      	beq.n	800c35e <VL53L1_f_026+0x9e>
 800c2e6:	4688      	mov	r8, r1
 800c2e8:	461e      	mov	r6, r3
 800c2ea:	4613      	mov	r3, r2
		*psigma_est = 0xFFFF;
		return VL53L1_ERROR_DIVISION_BY_ZERO;
	}
	i = bin % VL53L1_p_031;
 800c2ec:	fbb0 f2f2 	udiv	r2, r0, r2
 800c2f0:	fb03 0412 	mls	r4, r3, r2, r0
 800c2f4:	b2e4      	uxtb	r4, r4



	VL53L1_f_013(
 800c2f6:	ab0b      	add	r3, sp, #44	@ 0x2c
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	ad0e      	add	r5, sp, #56	@ 0x38
 800c2fc:	9500      	str	r5, [sp, #0]
 800c2fe:	ab0c      	add	r3, sp, #48	@ 0x30
 800c300:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c302:	4631      	mov	r1, r6
 800c304:	4620      	mov	r0, r4
 800c306:	f000 fb71 	bl	800c9ec <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 800c30a:	ab0d      	add	r3, sp, #52	@ 0x34
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	9500      	str	r5, [sp, #0]
 800c310:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c312:	464a      	mov	r2, r9
 800c314:	4631      	mov	r1, r6
 800c316:	4620      	mov	r0, r4
 800c318:	f000 fb68 	bl	800c9ec <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 800c31c:	f1ba 0f00 	cmp.w	sl, #0
 800c320:	d123      	bne.n	800c36a <VL53L1_f_026+0xaa>
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 800c322:	f8d9 30a4 	ldr.w	r3, [r9, #164]	@ 0xa4
		VL53L1_f_014(
 800c326:	9707      	str	r7, [sp, #28]
 800c328:	f8b9 2086 	ldrh.w	r2, [r9, #134]	@ 0x86
 800c32c:	9206      	str	r2, [sp, #24]
 800c32e:	9305      	str	r3, [sp, #20]
 800c330:	9b08      	ldr	r3, [sp, #32]
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c336:	9303      	str	r3, [sp, #12]
 800c338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c33a:	9302      	str	r3, [sp, #8]
 800c33c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c348:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c34a:	4640      	mov	r0, r8
 800c34c:	f001 fdc0 	bl	800ded0 <VL53L1_f_014>
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 800c350:	f110 0f0f 	cmn.w	r0, #15
 800c354:	d014      	beq.n	800c380 <VL53L1_f_026+0xc0>
		*psigma_est = 0xFFFF;


	return status;
 800c356:	2000      	movs	r0, #0
}
 800c358:	b010      	add	sp, #64	@ 0x40
 800c35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*psigma_est = 0xFFFF;
 800c35e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c362:	803b      	strh	r3, [r7, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 800c364:	f06f 000e 	mvn.w	r0, #14
 800c368:	e7f6      	b.n	800c358 <VL53L1_f_026+0x98>
		VL53L1_f_013(
 800c36a:	ab08      	add	r3, sp, #32
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	ab09      	add	r3, sp, #36	@ 0x24
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	ab0a      	add	r3, sp, #40	@ 0x28
 800c374:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c376:	4631      	mov	r1, r6
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fb37 	bl	800c9ec <VL53L1_f_013>
 800c37e:	e7d0      	b.n	800c322 <VL53L1_f_026+0x62>
		*psigma_est = 0xFFFF;
 800c380:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c384:	803b      	strh	r3, [r7, #0]
	return status;
 800c386:	2000      	movs	r0, #0
 800c388:	e7e6      	b.n	800c358 <VL53L1_f_026+0x98>

0800c38a <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 800c38a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38c:	9e05      	ldr	r6, [sp, #20]
 800c38e:	9d06      	ldr	r5, [sp, #24]
 800c390:	9c07      	ldr	r4, [sp, #28]
	uint16_t  lower_phase_limit = 0;
	uint16_t  upper_phase_limit = 0;



	pdata->range_id              = range_id;
 800c392:	7020      	strb	r0, [r4, #0]
	pdata->time_stamp            = 0;
 800c394:	2000      	movs	r0, #0
 800c396:	6060      	str	r0, [r4, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 800c398:	7828      	ldrb	r0, [r5, #0]
 800c39a:	7220      	strb	r0, [r4, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 800c39c:	7868      	ldrb	r0, [r5, #1]
 800c39e:	7260      	strb	r0, [r4, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 800c3a0:	78a8      	ldrb	r0, [r5, #2]
 800c3a2:	72a0      	strb	r0, [r4, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 800c3a4:	78e8      	ldrb	r0, [r5, #3]
 800c3a6:	72e0      	strb	r0, [r4, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 800c3a8:	7928      	ldrb	r0, [r5, #4]
 800c3aa:	7320      	strb	r0, [r4, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 800c3ac:	7968      	ldrb	r0, [r5, #5]
 800c3ae:	7360      	strb	r0, [r4, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 800c3b0:	7928      	ldrb	r0, [r5, #4]
 800c3b2:	f895 c000 	ldrb.w	ip, [r5]
 800c3b6:	eba0 000c 	sub.w	r0, r0, ip
 800c3ba:	3001      	adds	r0, #1
	pdata->VL53L1_p_030  =
 800c3bc:	7420      	strb	r0, [r4, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800c3be:	f8b6 009c 	ldrh.w	r0, [r6, #156]	@ 0x9c
 800c3c2:	82a0      	strh	r0, [r4, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 800c3c4:	f8b5 c020 	ldrh.w	ip, [r5, #32]
 800c3c8:	f8a4 c03c 	strh.w	ip, [r4, #60]	@ 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 800c3cc:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 800c3d0:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 800c3d4:	f8b5 c018 	ldrh.w	ip, [r5, #24]
 800c3d8:	f8a4 c040 	strh.w	ip, [r4, #64]	@ 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 800c3dc:	f8b5 e01c 	ldrh.w	lr, [r5, #28]
 800c3e0:	f8a4 e042 	strh.w	lr, [r4, #66]	@ 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 800c3e4:	68ef      	ldr	r7, [r5, #12]
 800c3e6:	62a7      	str	r7, [r4, #40]	@ 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 800c3e8:	692f      	ldr	r7, [r5, #16]
 800c3ea:	62e7      	str	r7, [r4, #44]	@ 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 800c3ec:	68af      	ldr	r7, [r5, #8]
 800c3ee:	6267      	str	r7, [r4, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800c3f0:	f8d6 7088 	ldr.w	r7, [r6, #136]	@ 0x88
 800c3f4:	61a7      	str	r7, [r4, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800c3f6:	f04f 0e13 	mov.w	lr, #19
 800c3fa:	f884 e04a 	strb.w	lr, [r4, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800c3fe:	b13b      	cbz	r3, 800c410 <VL53L1_f_029+0x86>
 800c400:	469e      	mov	lr, r3
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 800c402:	8c2b      	ldrh	r3, [r5, #32]
	if (sigma_thres > 0 &&
 800c404:	ebb3 1f4e 	cmp.w	r3, lr, lsl #5
 800c408:	d902      	bls.n	800c410 <VL53L1_f_029+0x86>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800c40a:	2306      	movs	r3, #6
 800c40c:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800c410:	020b      	lsls	r3, r1, #8
	if (lower_phase_limit < pdata->zero_distance_phase)
 800c412:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800c416:	d90e      	bls.n	800c436 <VL53L1_f_029+0xac>
		lower_phase_limit =
 800c418:	1ac0      	subs	r0, r0, r3
 800c41a:	b280      	uxth	r0, r0
			lower_phase_limit;
	else
		lower_phase_limit  = 0;

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
	upper_phase_limit += pbins->zero_distance_phase;
 800c41c:	f8b6 309c 	ldrh.w	r3, [r6, #156]	@ 0x9c
 800c420:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c424:	b29b      	uxth	r3, r3

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 800c426:	4584      	cmp	ip, r0
 800c428:	d301      	bcc.n	800c42e <VL53L1_f_029+0xa4>
 800c42a:	459c      	cmp	ip, r3
 800c42c:	d902      	bls.n	800c434 <VL53L1_f_029+0xaa>
		pdata->VL53L1_p_014 > upper_phase_limit)
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 800c42e:	2305      	movs	r3, #5
 800c430:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a

}
 800c434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lower_phase_limit  = 0;
 800c436:	2000      	movs	r0, #0
 800c438:	e7f0      	b.n	800c41c <VL53L1_f_029+0x92>

0800c43a <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800c43a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c43e:	b087      	sub	sp, #28
 800c440:	4680      	mov	r8, r0
 800c442:	4689      	mov	r9, r1
 800c444:	4616      	mov	r6, r2
 800c446:	461f      	mov	r7, r3

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);

	uint8_t  lb     = 0;
	uint8_t  i     = 0;
	int32_t  suma  = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	9305      	str	r3, [sp, #20]
	int32_t  sumb  = 0;
 800c44c:	9304      	str	r3, [sp, #16]
	int32_t  sumc  = 0;
 800c44e:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 800c450:	7853      	ldrb	r3, [r2, #1]
 800c452:	707b      	strb	r3, [r7, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 800c454:	7813      	ldrb	r3, [r2, #0]
 800c456:	703b      	strb	r3, [r7, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 800c458:	7893      	ldrb	r3, [r2, #2]
 800c45a:	70bb      	strb	r3, [r7, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800c45c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800c460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c464:	f893 517c 	ldrb.w	r5, [r3, #380]	@ 0x17c
 800c468:	e03a      	b.n	800c4e0 <VL53L1_f_034+0xa6>

		i =  lb  % palgo3->VL53L1_p_031;
 800c46a:	78f3      	ldrb	r3, [r6, #3]
 800c46c:	fbb5 f4f3 	udiv	r4, r5, r3
 800c470:	fb03 5414 	mls	r4, r3, r4, r5
 800c474:	b2e4      	uxtb	r4, r4


		VL53L1_f_013(
 800c476:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
 800c47a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c47e:	f893 1182 	ldrb.w	r1, [r3, #386]	@ 0x182
 800c482:	ab03      	add	r3, sp, #12
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	ab04      	add	r3, sp, #16
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	ab05      	add	r3, sp, #20
 800c48c:	464a      	mov	r2, r9
 800c48e:	4620      	mov	r0, r4
 800c490:	f000 faac 	bl	800c9ec <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 800c494:	9a05      	ldr	r2, [sp, #20]
 800c496:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800c49a:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 800c49c:	9b04      	ldr	r3, [sp, #16]
 800c49e:	f104 0118 	add.w	r1, r4, #24
 800c4a2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800c4a6:	604b      	str	r3, [r1, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 800c4a8:	9903      	ldr	r1, [sp, #12]
 800c4aa:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800c4ae:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800c4b2:	6041      	str	r1, [r0, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 800c4b4:	eb02 0c03 	add.w	ip, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 800c4b8:	68b0      	ldr	r0, [r6, #8]
 800c4ba:	4408      	add	r0, r1
			(suma + sumb) -
 800c4bc:	ebac 0c00 	sub.w	ip, ip, r0
		pfiltered->VL53L1_p_039[i] =
 800c4c0:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800c4c4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800c4c8:	f8c0 c004 	str.w	ip, [r0, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 800c4cc:	440b      	add	r3, r1
			(suma + palgo3->VL53L1_p_004);
 800c4ce:	68b1      	ldr	r1, [r6, #8]
 800c4d0:	440a      	add	r2, r1
			(sumb + sumc) -
 800c4d2:	1a9b      	subs	r3, r3, r2
		pfiltered->VL53L1_p_040[i] =
 800c4d4:	3460      	adds	r4, #96	@ 0x60
 800c4d6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800c4da:	6063      	str	r3, [r4, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800c4dc:	3501      	adds	r5, #1
 800c4de:	b2ed      	uxtb	r5, r5
 800c4e0:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
 800c4e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4e8:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800c4ec:	42ab      	cmp	r3, r5
 800c4ee:	d2bc      	bcs.n	800c46a <VL53L1_f_034+0x30>
	}

	return status;
}
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	b007      	add	sp, #28
 800c4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c4f8 <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 800c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	9f06      	ldr	r7, [sp, #24]
 800c500:	9e07      	ldr	r6, [sp, #28]
 800c502:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c506:	9d09      	ldr	r5, [sp, #36]	@ 0x24
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
	int64_t  half_b_minus_amb = 0;


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 800c508:	17d8      	asrs	r0, r3, #31
 800c50a:	ebb3 030c 	subs.w	r3, r3, ip
 800c50e:	eb60 70ec 	sbc.w	r0, r0, ip, asr #31
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 800c512:	1a5b      	subs	r3, r3, r1
 800c514:	eb60 71e1 	sbc.w	r1, r0, r1, asr #31
 800c518:	1bd8      	subs	r0, r3, r7
 800c51a:	eb61 71e7 	sbc.w	r1, r1, r7, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 800c51e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800c522:	1b92      	subs	r2, r2, r6
 800c524:	eb6c 7ce6 	sbc.w	ip, ip, r6, asr #31
		(int64_t)bx - (int64_t)VL53L1_p_004);
 800c528:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800c52c:	1b56      	subs	r6, r2, r5
 800c52e:	eb6c 73e5 	sbc.w	r3, ip, r5, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 800c532:	ea4f 3e03 	mov.w	lr, r3, lsl #12
 800c536:	ea4e 5e16 	orr.w	lr, lr, r6, lsr #20

	if (half_b_minus_amb != 0) {
 800c53a:	45c4      	cmp	ip, r8
 800c53c:	bf08      	it	eq
 800c53e:	42aa      	cmpeq	r2, r5
 800c540:	d03c      	beq.n	800c5bc <VL53L1_f_036+0xc4>
 800c542:	0337      	lsls	r7, r6, #12
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 800c544:	0609      	lsls	r1, r1, #24
 800c546:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
 800c54a:	0600      	lsls	r0, r0, #24
 800c54c:	19c0      	adds	r0, r0, r7
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800c54e:	ea4f 3343 	mov.w	r3, r3, lsl #13
 800c552:	ea4f 3246 	mov.w	r2, r6, lsl #13
 800c556:	ea43 43d6 	orr.w	r3, r3, r6, lsr #19
 800c55a:	eb41 010e 	adc.w	r1, r1, lr
 800c55e:	f7f3 fe1b 	bl	8000198 <__aeabi_ldivmod>
		mean_phase += 2048;
 800c562:	f510 6000 	adds.w	r0, r0, #2048	@ 0x800
 800c566:	f141 0100 	adc.w	r1, r1, #0
		mean_phase += (4096 * (int64_t)bin);
 800c56a:	0324      	lsls	r4, r4, #12
 800c56c:	1824      	adds	r4, r4, r0
 800c56e:	f141 0100 	adc.w	r1, r1, #0

		mean_phase  = do_division_s((mean_phase + 1), 2);
 800c572:	1c60      	adds	r0, r4, #1
 800c574:	f141 0200 	adc.w	r2, r1, #0
 800c578:	0fd3      	lsrs	r3, r2, #31
 800c57a:	181b      	adds	r3, r3, r0
 800c57c:	f142 0200 	adc.w	r2, r2, #0
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31

		if (mean_phase  < 0)
 800c586:	f114 0f02 	cmn.w	r4, #2
 800c58a:	f171 32ff 	sbcs.w	r2, r1, #4294967295
 800c58e:	db08      	blt.n	800c5a2 <VL53L1_f_036+0xaa>
			mean_phase = 0;
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 800c590:	4a0d      	ldr	r2, [pc, #52]	@ (800c5c8 <VL53L1_f_036+0xd0>)
 800c592:	42a2      	cmp	r2, r4
 800c594:	f04f 0200 	mov.w	r2, #0
 800c598:	418a      	sbcs	r2, r1
 800c59a:	da03      	bge.n	800c5a4 <VL53L1_f_036+0xac>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 800c59c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c5a0:	e000      	b.n	800c5a4 <VL53L1_f_036+0xac>
			mean_phase = 0;
 800c5a2:	2300      	movs	r3, #0

		mean_phase32 = (int32_t)mean_phase;
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 800c5a4:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 800c5a8:	02d2      	lsls	r2, r2, #11
		mean_phase32 = mean_phase32 %
 800c5aa:	fb93 f1f2 	sdiv	r1, r3, r2
 800c5ae:	fb02 3311 	mls	r3, r2, r1, r3
		mean_phase = mean_phase32;

		status = VL53L1_ERROR_NONE;
 800c5b2:	2000      	movs	r0, #0
	}

	*pmean_phase = (uint32_t)mean_phase;
 800c5b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c5b6:	6013      	str	r3, [r2, #0]

	return status;
}
 800c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 800c5bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c5c0:	f06f 000e 	mvn.w	r0, #14
 800c5c4:	e7f6      	b.n	800c5b4 <VL53L1_f_036+0xbc>
 800c5c6:	bf00      	nop
 800c5c8:	0001fffe 	.word	0x0001fffe

0800c5cc <VL53L1_f_035>:
{
 800c5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d0:	b086      	sub	sp, #24
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	461e      	mov	r6, r3
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 800c5d8:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800c5dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5e0:	f893 417c 	ldrb.w	r4, [r3, #380]	@ 0x17c
 800c5e4:	e01d      	b.n	800c622 <VL53L1_f_035+0x56>
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 800c5e6:	2a00      	cmp	r2, #0
 800c5e8:	db0c      	blt.n	800c604 <VL53L1_f_035+0x38>
					 pfiltered->VL53L1_p_040[i] >= 0)
 800c5ea:	f105 0160 	add.w	r1, r5, #96	@ 0x60
 800c5ee:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800c5f2:	6849      	ldr	r1, [r1, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	db05      	blt.n	800c604 <VL53L1_f_035+0x38>
				pfiltered->VL53L1_p_043[i] = 1;
 800c5f8:	eb08 0305 	add.w	r3, r8, r5
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800c602:	e006      	b.n	800c612 <VL53L1_f_035+0x46>
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 800c604:	2a00      	cmp	r2, #0
 800c606:	db38      	blt.n	800c67a <VL53L1_f_035+0xae>
				pfiltered->VL53L1_p_043[i] = 0;
 800c608:	eb08 0305 	add.w	r3, r8, r5
 800c60c:	2200      	movs	r2, #0
 800c60e:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
			if (pfiltered->VL53L1_p_043[i] > 0) {
 800c612:	eb08 0305 	add.w	r3, r8, r5
 800c616:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d148      	bne.n	800c6b0 <VL53L1_f_035+0xe4>
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 800c61e:	3401      	adds	r4, #1
 800c620:	b2e4      	uxtb	r4, r4
 800c622:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
 800c626:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800c62a:	f891 3180 	ldrb.w	r3, [r1, #384]	@ 0x180
 800c62e:	42a3      	cmp	r3, r4
 800c630:	d96c      	bls.n	800c70c <VL53L1_f_035+0x140>
		i =  lb    % palgo3->VL53L1_p_031;
 800c632:	78f1      	ldrb	r1, [r6, #3]
 800c634:	fbb4 f5f1 	udiv	r5, r4, r1
 800c638:	fb01 4515 	mls	r5, r1, r5, r4
 800c63c:	b2ed      	uxtb	r5, r5
		j = (lb+1) % palgo3->VL53L1_p_031;
 800c63e:	1c63      	adds	r3, r4, #1
 800c640:	fb93 f2f1 	sdiv	r2, r3, r1
 800c644:	fb01 3312 	mls	r3, r1, r2, r3
 800c648:	b2d9      	uxtb	r1, r3
		if (i < palgo3->VL53L1_p_024 &&
 800c64a:	78b2      	ldrb	r2, [r6, #2]
 800c64c:	42aa      	cmp	r2, r5
 800c64e:	d9e6      	bls.n	800c61e <VL53L1_f_035+0x52>
 800c650:	428a      	cmp	r2, r1
 800c652:	d9e4      	bls.n	800c61e <VL53L1_f_035+0x52>
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 800c654:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 800c658:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800c65c:	6852      	ldr	r2, [r2, #4]
 800c65e:	2a00      	cmp	r2, #0
 800c660:	d1c1      	bne.n	800c5e6 <VL53L1_f_035+0x1a>
				pfiltered->VL53L1_p_040[i] == 0)
 800c662:	f105 0160 	add.w	r1, r5, #96	@ 0x60
 800c666:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800c66a:	6849      	ldr	r1, [r1, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d1ba      	bne.n	800c5e6 <VL53L1_f_035+0x1a>
				pfiltered->VL53L1_p_043[i] = 0;
 800c670:	eb08 0305 	add.w	r3, r8, r5
 800c674:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800c678:	e7cb      	b.n	800c612 <VL53L1_f_035+0x46>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 800c67a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c67e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800c682:	6852      	ldr	r2, [r2, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 800c684:	2a00      	cmp	r2, #0
 800c686:	dbbf      	blt.n	800c608 <VL53L1_f_035+0x3c>
 800c688:	b2db      	uxtb	r3, r3
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 800c68a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800c68e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800c692:	6852      	ldr	r2, [r2, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 800c694:	2a00      	cmp	r2, #0
 800c696:	dbb7      	blt.n	800c608 <VL53L1_f_035+0x3c>
					 pfiltered->VL53L1_p_040[j] <  0)
 800c698:	3360      	adds	r3, #96	@ 0x60
 800c69a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800c69e:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	dab1      	bge.n	800c608 <VL53L1_f_035+0x3c>
				pfiltered->VL53L1_p_043[i] = 1;
 800c6a4:	eb08 0305 	add.w	r3, r8, r5
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800c6ae:	e7b0      	b.n	800c612 <VL53L1_f_035+0x46>
				pdata->VL53L1_p_025 = lb;
 800c6b0:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 800c6b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c6b8:	f883 417e 	strb.w	r4, [r3, #382]	@ 0x17e
					VL53L1_f_036(
 800c6bc:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800c6c0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800c6c4:	f105 0218 	add.w	r2, r5, #24
 800c6c8:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800c6cc:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 800c6d0:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c6da:	4433      	add	r3, r6
 800c6dc:	3304      	adds	r3, #4
 800c6de:	9305      	str	r3, [sp, #20]
 800c6e0:	78f3      	ldrb	r3, [r6, #3]
 800c6e2:	9304      	str	r3, [sp, #16]
 800c6e4:	68b3      	ldr	r3, [r6, #8]
 800c6e6:	9303      	str	r3, [sp, #12]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9302      	str	r3, [sp, #8]
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	6843      	ldr	r3, [r0, #4]
 800c6f2:	6852      	ldr	r2, [r2, #4]
 800c6f4:	6849      	ldr	r1, [r1, #4]
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f7ff fefe 	bl	800c4f8 <VL53L1_f_036>
				if (func_status ==
 800c6fc:	f110 0f0f 	cmn.w	r0, #15
 800c700:	d18d      	bne.n	800c61e <VL53L1_f_035+0x52>
					pfiltered->VL53L1_p_043[i] = 0;
 800c702:	4445      	add	r5, r8
 800c704:	2300      	movs	r3, #0
 800c706:	f885 31e4 	strb.w	r3, [r5, #484]	@ 0x1e4
 800c70a:	e788      	b.n	800c61e <VL53L1_f_035+0x52>
}
 800c70c:	2000      	movs	r0, #0
 800c70e:	b006      	add	sp, #24
 800c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c714 <VL53L1_f_033>:
{
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	b089      	sub	sp, #36	@ 0x24
 800c71a:	9006      	str	r0, [sp, #24]
 800c71c:	468a      	mov	sl, r1
 800c71e:	4690      	mov	r8, r2
 800c720:	461c      	mov	r4, r3
 800c722:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800c724:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800c726:	f89d b05c 	ldrb.w	fp, [sp, #92]	@ 0x5c
	VL53L1_f_016(palgo3);
 800c72a:	4628      	mov	r0, r5
 800c72c:	f7ff f9c5 	bl	800baba <VL53L1_f_016>
		&(palgo3->VL53L1_p_010),
 800c730:	f505 7927 	add.w	r9, r5, #668	@ 0x29c
	memcpy(
 800c734:	22ac      	movs	r2, #172	@ 0xac
 800c736:	4621      	mov	r1, r4
 800c738:	4648      	mov	r0, r9
 800c73a:	f002 f9bd 	bl	800eab8 <memcpy>
	presults->cfg_device_state = pbins_input->cfg_device_state;
 800c73e:	7823      	ldrb	r3, [r4, #0]
 800c740:	7033      	strb	r3, [r6, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800c742:	7863      	ldrb	r3, [r4, #1]
 800c744:	7073      	strb	r3, [r6, #1]
	presults->zone_id          = pbins_input->zone_id;
 800c746:	78a3      	ldrb	r3, [r4, #2]
 800c748:	70b3      	strb	r3, [r6, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800c74a:	f894 307b 	ldrb.w	r3, [r4, #123]	@ 0x7b
 800c74e:	70f3      	strb	r3, [r6, #3]
	presults->wrap_dmax_mm     = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	81f3      	strh	r3, [r6, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 800c754:	2204      	movs	r2, #4
 800c756:	7472      	strb	r2, [r6, #17]
	presults->active_results   = 0;
 800c758:	74b3      	strb	r3, [r6, #18]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 800c75a:	e005      	b.n	800c768 <VL53L1_f_033+0x54>
		presults->VL53L1_p_007[p] = 0;
 800c75c:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 800c760:	2100      	movs	r1, #0
 800c762:	8091      	strh	r1, [r2, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 800c764:	3301      	adds	r3, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b04      	cmp	r3, #4
 800c76a:	d9f7      	bls.n	800c75c <VL53L1_f_033+0x48>
	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 800c76c:	4648      	mov	r0, r9
 800c76e:	f7fe ff3f 	bl	800b5f0 <VL53L1_hist_calc_zero_distance_phase>
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 800c772:	4649      	mov	r1, r9
 800c774:	f898 0005 	ldrb.w	r0, [r8, #5]
 800c778:	f7ff f803 	bl	800b782 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
	VL53L1_hist_estimate_ambient_from_ambient_bins(
 800c77c:	4648      	mov	r0, r9
 800c77e:	f7ff f83b 	bl	800b7f8 <VL53L1_hist_estimate_ambient_from_ambient_bins>
	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 800c782:	4648      	mov	r0, r9
 800c784:	f7fe fe45 	bl	800b412 <VL53L1_hist_remove_ambient_bins>
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800c788:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
 800c78c:	b94b      	cbnz	r3, 800c7a2 <VL53L1_f_033+0x8e>
		ppost_cfg->ambient_thresh_sigma1;
 800c78e:	f898 3006 	ldrb.w	r3, [r8, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800c792:	f88a 3001 	strb.w	r3, [sl, #1]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 800c796:	2400      	movs	r4, #0
 800c798:	4620      	mov	r0, r4
 800c79a:	465f      	mov	r7, fp
 800c79c:	46ab      	mov	fp, r5
 800c79e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800c7a0:	e008      	b.n	800c7b4 <VL53L1_f_033+0xa0>
		VL53L1_f_004(
 800c7a2:	f505 7252 	add.w	r2, r5, #840	@ 0x348
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c7aa:	f000 f9f1 	bl	800cb90 <VL53L1_f_004>
 800c7ae:	e7ee      	b.n	800c78e <VL53L1_f_033+0x7a>
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 800c7b0:	3401      	adds	r4, #1
 800c7b2:	b2e4      	uxtb	r4, r4
 800c7b4:	2c04      	cmp	r4, #4
 800c7b6:	d810      	bhi.n	800c7da <VL53L1_f_033+0xc6>
		if (status == VL53L1_ERROR_NONE) {
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d1f9      	bne.n	800c7b0 <VL53L1_f_033+0x9c>
			VL53L1_f_001(
 800c7bc:	1d20      	adds	r0, r4, #4
 800c7be:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
 800c7c2:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	9500      	str	r5, [sp, #0]
 800c7cc:	464b      	mov	r3, r9
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	9906      	ldr	r1, [sp, #24]
 800c7d2:	8880      	ldrh	r0, [r0, #4]
 800c7d4:	f7ff f84a 	bl	800b86c <VL53L1_f_001>
 800c7d8:	e7ea      	b.n	800c7b0 <VL53L1_f_033+0x9c>
	if (status == VL53L1_ERROR_NONE)
 800c7da:	465d      	mov	r5, fp
 800c7dc:	46bb      	mov	fp, r7
 800c7de:	4607      	mov	r7, r0
 800c7e0:	b120      	cbz	r0, 800c7ec <VL53L1_f_033+0xd8>
	if (status == VL53L1_ERROR_NONE)
 800c7e2:	b1df      	cbz	r7, 800c81c <VL53L1_f_033+0x108>
	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800c7e4:	2400      	movs	r4, #0
 800c7e6:	463a      	mov	r2, r7
 800c7e8:	4637      	mov	r7, r6
 800c7ea:	e024      	b.n	800c836 <VL53L1_f_033+0x122>
			VL53L1_f_018(
 800c7ec:	9502      	str	r5, [sp, #8]
 800c7ee:	f505 7352 	add.w	r3, r5, #840	@ 0x348
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	f8cd 9000 	str.w	r9, [sp]
 800c7f8:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
 800c7fc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800c800:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800c804:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800c808:	f7ff f99c 	bl	800bb44 <VL53L1_f_018>
	if (status == VL53L1_ERROR_NONE)
 800c80c:	4607      	mov	r7, r0
 800c80e:	2800      	cmp	r0, #0
 800c810:	d1e8      	bne.n	800c7e4 <VL53L1_f_033+0xd0>
			VL53L1_f_019(palgo3);
 800c812:	4628      	mov	r0, r5
 800c814:	f7ff fa1c 	bl	800bc50 <VL53L1_f_019>
 800c818:	4607      	mov	r7, r0
 800c81a:	e7e2      	b.n	800c7e2 <VL53L1_f_033+0xce>
			VL53L1_f_020(palgo3);
 800c81c:	4628      	mov	r0, r5
 800c81e:	f7ff fa42 	bl	800bca6 <VL53L1_f_020>
	if (status == VL53L1_ERROR_NONE)
 800c822:	4607      	mov	r7, r0
 800c824:	2800      	cmp	r0, #0
 800c826:	d1dd      	bne.n	800c7e4 <VL53L1_f_033+0xd0>
			VL53L1_f_021(palgo3);
 800c828:	4628      	mov	r0, r5
 800c82a:	f7ff fa80 	bl	800bd2e <VL53L1_f_021>
 800c82e:	4607      	mov	r7, r0
 800c830:	e7d8      	b.n	800c7e4 <VL53L1_f_033+0xd0>
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 800c832:	3401      	adds	r4, #1
 800c834:	b2e4      	uxtb	r4, r4
 800c836:	f895 317a 	ldrb.w	r3, [r5, #378]	@ 0x17a
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	d96c      	bls.n	800c918 <VL53L1_f_033+0x204>
		if (status == VL53L1_ERROR_NONE)
 800c83e:	2a00      	cmp	r2, #0
 800c840:	d1f7      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_022(
 800c842:	462a      	mov	r2, r5
 800c844:	4649      	mov	r1, r9
 800c846:	4620      	mov	r0, r4
 800c848:	f7ff fbbc 	bl	800bfc4 <VL53L1_f_022>
		if (status == VL53L1_ERROR_NONE)
 800c84c:	4602      	mov	r2, r0
 800c84e:	2800      	cmp	r0, #0
 800c850:	d1ef      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_023(
 800c852:	f505 767d 	add.w	r6, r5, #1012	@ 0x3f4
 800c856:	9600      	str	r6, [sp, #0]
 800c858:	f8d5 3340 	ldr.w	r3, [r5, #832]	@ 0x340
 800c85c:	462a      	mov	r2, r5
 800c85e:	4649      	mov	r1, r9
 800c860:	4620      	mov	r0, r4
 800c862:	f7ff fcf9 	bl	800c258 <VL53L1_f_023>
		if (status == VL53L1_ERROR_NONE) {
 800c866:	4602      	mov	r2, r0
 800c868:	2800      	cmp	r0, #0
 800c86a:	d1e2      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_023(
 800c86c:	f505 6394 	add.w	r3, r5, #1184	@ 0x4a0
 800c870:	9306      	str	r3, [sp, #24]
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	2300      	movs	r3, #0
 800c876:	462a      	mov	r2, r5
 800c878:	4649      	mov	r1, r9
 800c87a:	4620      	mov	r0, r4
 800c87c:	f7ff fcec 	bl	800c258 <VL53L1_f_023>
		if (status == VL53L1_ERROR_NONE) {
 800c880:	4602      	mov	r2, r0
 800c882:	2800      	cmp	r0, #0
 800c884:	d1d5      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_023(
 800c886:	f205 534c 	addw	r3, r5, #1356	@ 0x54c
 800c88a:	9307      	str	r3, [sp, #28]
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	2300      	movs	r3, #0
 800c890:	462a      	mov	r2, r5
 800c892:	f505 7152 	add.w	r1, r5, #840	@ 0x348
 800c896:	4620      	mov	r0, r4
 800c898:	f7ff fcde 	bl	800c258 <VL53L1_f_023>
		if (status == VL53L1_ERROR_NONE)
 800c89c:	4602      	mov	r2, r0
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d1c7      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_034(
 800c8a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f7ff fdc6 	bl	800c43a <VL53L1_f_034>
		if (status == VL53L1_ERROR_NONE)
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d1be      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_035(
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c8b8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7ff fe85 	bl	800c5cc <VL53L1_f_035>
		if (status == VL53L1_ERROR_NONE)
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d1b4      	bne.n	800c832 <VL53L1_f_033+0x11e>
			VL53L1_f_026(
 800c8c8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800c8cc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800c8d0:	f892 3182 	ldrb.w	r3, [r2, #386]	@ 0x182
 800c8d4:	f892 017e 	ldrb.w	r0, [r2, #382]	@ 0x17e
 800c8d8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800c8dc:	0092      	lsls	r2, r2, #2
 800c8de:	f502 72cc 	add.w	r2, r2, #408	@ 0x198
 800c8e2:	442a      	add	r2, r5
 800c8e4:	3204      	adds	r2, #4
 800c8e6:	9204      	str	r2, [sp, #16]
 800c8e8:	9a07      	ldr	r2, [sp, #28]
 800c8ea:	9203      	str	r2, [sp, #12]
 800c8ec:	9a06      	ldr	r2, [sp, #24]
 800c8ee:	9202      	str	r2, [sp, #8]
 800c8f0:	9601      	str	r6, [sp, #4]
 800c8f2:	f898 2028 	ldrb.w	r2, [r8, #40]	@ 0x28
 800c8f6:	9200      	str	r2, [sp, #0]
 800c8f8:	78ea      	ldrb	r2, [r5, #3]
 800c8fa:	f898 1018 	ldrb.w	r1, [r8, #24]
 800c8fe:	f7ff fcdf 	bl	800c2c0 <VL53L1_f_026>
		if (status == VL53L1_ERROR_NONE)
 800c902:	4602      	mov	r2, r0
 800c904:	2800      	cmp	r0, #0
 800c906:	d194      	bne.n	800c832 <VL53L1_f_033+0x11e>
				VL53L1_f_027(
 800c908:	462b      	mov	r3, r5
 800c90a:	464a      	mov	r2, r9
 800c90c:	2101      	movs	r1, #1
 800c90e:	4620      	mov	r0, r4
 800c910:	f7ff fc10 	bl	800c134 <VL53L1_f_027>
 800c914:	4602      	mov	r2, r0
 800c916:	e78c      	b.n	800c832 <VL53L1_f_033+0x11e>
	if (status == VL53L1_ERROR_NONE)
 800c918:	463e      	mov	r6, r7
 800c91a:	4617      	mov	r7, r2
 800c91c:	b112      	cbz	r2, 800c924 <VL53L1_f_033+0x210>
	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800c91e:	2400      	movs	r4, #0
 800c920:	9706      	str	r7, [sp, #24]
 800c922:	e012      	b.n	800c94a <VL53L1_f_033+0x236>
			VL53L1_f_028(
 800c924:	4629      	mov	r1, r5
 800c926:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c92a:	f7ff fa70 	bl	800be0e <VL53L1_f_028>
 800c92e:	4607      	mov	r7, r0
 800c930:	e7f5      	b.n	800c91e <VL53L1_f_033+0x20a>
				VL53L1_f_012(
 800c932:	4652      	mov	r2, sl
 800c934:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 800c938:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 800c93c:	f000 f8db 	bl	800caf6 <VL53L1_f_012>
			presults->active_results++;
 800c940:	7cb3      	ldrb	r3, [r6, #18]
 800c942:	3301      	adds	r3, #1
 800c944:	74b3      	strb	r3, [r6, #18]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 800c946:	3401      	adds	r4, #1
 800c948:	b2e4      	uxtb	r4, r4
 800c94a:	f895 317a 	ldrb.w	r3, [r5, #378]	@ 0x17a
 800c94e:	42a3      	cmp	r3, r4
 800c950:	d947      	bls.n	800c9e2 <VL53L1_f_033+0x2ce>
		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 800c952:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c95c:	442b      	add	r3, r5
 800c95e:	3304      	adds	r3, #4
		if (!(presults->active_results < presults->max_results))
 800c960:	7cb0      	ldrb	r0, [r6, #18]
 800c962:	7c71      	ldrb	r1, [r6, #17]
 800c964:	4288      	cmp	r0, r1
 800c966:	d2ee      	bcs.n	800c946 <VL53L1_f_033+0x232>
		if (ppulse_data->VL53L1_p_013 >
 800c968:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800c96c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800c970:	f8d1 118c 	ldr.w	r1, [r1, #396]	@ 0x18c
 800c974:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800c978:	42b9      	cmp	r1, r7
 800c97a:	dde4      	ble.n	800c946 <VL53L1_f_033+0x232>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 800c97c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800c980:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800c984:	f892 217e 	ldrb.w	r2, [r2, #382]	@ 0x17e
			ppost_cfg->signal_total_events_limit &&
 800c988:	2aff      	cmp	r2, #255	@ 0xff
 800c98a:	d0dc      	beq.n	800c946 <VL53L1_f_033+0x232>
			prange_data =
 800c98c:	f04f 0a4c 	mov.w	sl, #76	@ 0x4c
 800c990:	fb0a fa00 	mul.w	sl, sl, r0
 800c994:	f10a 0a10 	add.w	sl, sl, #16
 800c998:	44b2      	add	sl, r6
 800c99a:	f10a 0a04 	add.w	sl, sl, #4
			if (status == VL53L1_ERROR_NONE)
 800c99e:	9a06      	ldr	r2, [sp, #24]
 800c9a0:	2a00      	cmp	r2, #0
 800c9a2:	d1cd      	bne.n	800c940 <VL53L1_f_033+0x22c>
				VL53L1_f_029(
 800c9a4:	f8cd a008 	str.w	sl, [sp, #8]
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	f8cd 9000 	str.w	r9, [sp]
 800c9ae:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800c9b2:	f898 2021 	ldrb.w	r2, [r8, #33]	@ 0x21
 800c9b6:	f898 1020 	ldrb.w	r1, [r8, #32]
 800c9ba:	f7ff fce6 	bl	800c38a <VL53L1_f_029>
				VL53L1_f_011(
 800c9be:	f8cd b004 	str.w	fp, [sp, #4]
 800c9c2:	f8cd a000 	str.w	sl, [sp]
 800c9c6:	f8b5 3318 	ldrh.w	r3, [r5, #792]	@ 0x318
 800c9ca:	f8d5 2324 	ldr.w	r2, [r5, #804]	@ 0x324
 800c9ce:	f8b5 1322 	ldrh.w	r1, [r5, #802]	@ 0x322
 800c9d2:	f8b5 031e 	ldrh.w	r0, [r5, #798]	@ 0x31e
 800c9d6:	f000 f83e 	bl	800ca56 <VL53L1_f_011>
			if (status == VL53L1_ERROR_NONE)
 800c9da:	9006      	str	r0, [sp, #24]
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1af      	bne.n	800c940 <VL53L1_f_033+0x22c>
 800c9e0:	e7a7      	b.n	800c932 <VL53L1_f_033+0x21e>
}
 800c9e2:	9f06      	ldr	r7, [sp, #24]
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	b009      	add	sp, #36	@ 0x24
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9ec <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800c9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ee:	9c06      	ldr	r4, [sp, #24]


	uint8_t w = 0;
	uint8_t j = 0;

	*pa = 0;
 800c9f0:	2500      	movs	r5, #0
 800c9f2:	601d      	str	r5, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 800c9f4:	1d86      	adds	r6, r0, #6
 800c9f6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 800c9fa:	9e05      	ldr	r6, [sp, #20]
 800c9fc:	6037      	str	r7, [r6, #0]
	*pc = 0;
 800c9fe:	6025      	str	r5, [r4, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800ca00:	46ae      	mov	lr, r5
 800ca02:	e00e      	b.n	800ca22 <VL53L1_f_013+0x36>
			filter_woi) % pbins->VL53L1_p_024;


		if (w < filter_woi)
			*pa += pbins->bin_data[j];
		else if (w > filter_woi)
 800ca04:	458e      	cmp	lr, r1
 800ca06:	d908      	bls.n	800ca1a <VL53L1_f_013+0x2e>
			*pc += pbins->bin_data[j];
 800ca08:	fa5f fc8c 	uxtb.w	ip, ip
 800ca0c:	f10c 0c06 	add.w	ip, ip, #6
 800ca10:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
 800ca14:	6826      	ldr	r6, [r4, #0]
 800ca16:	4435      	add	r5, r6
 800ca18:	6025      	str	r5, [r4, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800ca1a:	f10e 0e01 	add.w	lr, lr, #1
 800ca1e:	fa5f fe8e 	uxtb.w	lr, lr
 800ca22:	ebbe 0f41 	cmp.w	lr, r1, lsl #1
 800ca26:	dc15      	bgt.n	800ca54 <VL53L1_f_013+0x68>
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 800ca28:	eb00 0c0e 	add.w	ip, r0, lr
 800ca2c:	7a95      	ldrb	r5, [r2, #10]
 800ca2e:	44ac      	add	ip, r5
 800ca30:	ebac 0c01 	sub.w	ip, ip, r1
			filter_woi) % pbins->VL53L1_p_024;
 800ca34:	fb9c f6f5 	sdiv	r6, ip, r5
 800ca38:	fb05 cc16 	mls	ip, r5, r6, ip
		if (w < filter_woi)
 800ca3c:	458e      	cmp	lr, r1
 800ca3e:	d2e1      	bcs.n	800ca04 <VL53L1_f_013+0x18>
			*pa += pbins->bin_data[j];
 800ca40:	fa5f fc8c 	uxtb.w	ip, ip
 800ca44:	f10c 0c06 	add.w	ip, ip, #6
 800ca48:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
 800ca4c:	681e      	ldr	r6, [r3, #0]
 800ca4e:	4435      	add	r5, r6
 800ca50:	601d      	str	r5, [r3, #0]
 800ca52:	e7e2      	b.n	800ca1a <VL53L1_f_013+0x2e>
	}
}
 800ca54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca56 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800ca56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5a:	9c06      	ldr	r4, [sp, #24]
 800ca5c:	f89d 601c 	ldrb.w	r6, [sp, #28]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800ca60:	81e0      	strh	r0, [r4, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800ca62:	8261      	strh	r1, [r4, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800ca64:	61a2      	str	r2, [r4, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 800ca66:	82e3      	strh	r3, [r4, #22]



	if (pdata->fast_osc_frequency == 0)
 800ca68:	b131      	cbz	r1, 800ca78 <VL53L1_f_011+0x22>
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 800ca6a:	2500      	movs	r5, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (pdata->total_periods_elapsed == 0)
 800ca6c:	2a00      	cmp	r2, #0
 800ca6e:	d03f      	beq.n	800caf0 <VL53L1_f_011+0x9a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 800ca70:	b12d      	cbz	r5, 800ca7e <VL53L1_f_011+0x28>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800ca72:	4628      	mov	r0, r5
 800ca74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ca78:	f06f 050e 	mvn.w	r5, #14
 800ca7c:	e7f6      	b.n	800ca6c <VL53L1_f_011+0x16>
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 800ca7e:	4608      	mov	r0, r1
 800ca80:	f7fe fc62 	bl	800b348 <VL53L1_calc_pll_period_us>
 800ca84:	4680      	mov	r8, r0
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800ca86:	69a7      	ldr	r7, [r4, #24]
 800ca88:	3701      	adds	r7, #1
		pdata->peak_duration_us    = VL53L1_duration_maths(
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca90:	89e1      	ldrh	r1, [r4, #14]
 800ca92:	f7fe fc62 	bl	800b35a <VL53L1_duration_maths>
 800ca96:	61e0      	str	r0, [r4, #28]
			((uint32_t)pdata->VL53L1_p_030) << 4,
 800ca98:	7c21      	ldrb	r1, [r4, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 800ca9a:	463b      	mov	r3, r7
 800ca9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800caa0:	0109      	lsls	r1, r1, #4
 800caa2:	4640      	mov	r0, r8
 800caa4:	f7fe fc59 	bl	800b35a <VL53L1_duration_maths>
 800caa8:	6220      	str	r0, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 800caaa:	69e1      	ldr	r1, [r4, #28]
 800caac:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800caae:	f7fe fcfa 	bl	800b4a6 <VL53L1_rate_maths>
 800cab2:	8620      	strh	r0, [r4, #48]	@ 0x30
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 800cab4:	6a21      	ldr	r1, [r4, #32]
 800cab6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cab8:	f7fe fcf5 	bl	800b4a6 <VL53L1_rate_maths>
 800cabc:	8660      	strh	r0, [r4, #50]	@ 0x32
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 800cabe:	6a21      	ldr	r1, [r4, #32]
 800cac0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cac2:	f7fe fcf0 	bl	800b4a6 <VL53L1_rate_maths>
 800cac6:	86a0      	strh	r0, [r4, #52]	@ 0x34
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800cac8:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
		count_rate_total =
 800caca:	4401      	add	r1, r0
		if (histo_merge_nb > 1)
 800cacc:	2e01      	cmp	r6, #1
 800cace:	d901      	bls.n	800cad4 <VL53L1_f_011+0x7e>
			count_rate_total /= histo_merge_nb;
 800cad0:	fbb1 f1f6 	udiv	r1, r1, r6
			VL53L1_rate_per_spad_maths(
 800cad4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cad8:	8ae2      	ldrh	r2, [r4, #22]
 800cada:	2006      	movs	r0, #6
 800cadc:	f7fe fd07 	bl	800b4ee <VL53L1_rate_per_spad_maths>
		pdata->total_rate_per_spad_mcps   =
 800cae0:	86e0      	strh	r0, [r4, #54]	@ 0x36
			VL53L1_events_per_spad_maths(
 800cae2:	69e2      	ldr	r2, [r4, #28]
 800cae4:	8ae1      	ldrh	r1, [r4, #22]
 800cae6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cae8:	f7fe fc4d 	bl	800b386 <VL53L1_events_per_spad_maths>
		pdata->VL53L1_p_012   =
 800caec:	63a0      	str	r0, [r4, #56]	@ 0x38
 800caee:	e7c0      	b.n	800ca72 <VL53L1_f_011+0x1c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800caf0:	f06f 050e 	mvn.w	r5, #14
 800caf4:	e7bd      	b.n	800ca72 <VL53L1_f_011+0x1c>

0800caf6 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	4605      	mov	r5, r0
 800cafc:	460e      	mov	r6, r1
 800cafe:	4614      	mov	r4, r2
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 800cb00:	9101      	str	r1, [sp, #4]
 800cb02:	9000      	str	r0, [sp, #0]
 800cb04:	2300      	movs	r3, #0
 800cb06:	8a92      	ldrh	r2, [r2, #20]
 800cb08:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800cb0a:	8a60      	ldrh	r0, [r4, #18]
 800cb0c:	f7fe fcfe 	bl	800b50c <VL53L1_range_maths>
	pdata->min_range_mm =
 800cb10:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 800cb14:	9601      	str	r6, [sp, #4]
 800cb16:	9500      	str	r5, [sp, #0]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	8aa2      	ldrh	r2, [r4, #20]
 800cb1c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800cb20:	8a60      	ldrh	r0, [r4, #18]
 800cb22:	f7fe fcf3 	bl	800b50c <VL53L1_range_maths>
	pdata->median_range_mm =
 800cb26:	f8a4 0046 	strh.w	r0, [r4, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 800cb2a:	9601      	str	r6, [sp, #4]
 800cb2c:	9500      	str	r5, [sp, #0]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	8aa2      	ldrh	r2, [r4, #20]
 800cb32:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 800cb36:	8a60      	ldrh	r0, [r4, #18]
 800cb38:	f7fe fce8 	bl	800b50c <VL53L1_range_maths>
	pdata->max_range_mm =
 800cb3c:	f8a4 0048 	strh.w	r0, [r4, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800cb40:	b002      	add	sp, #8
 800cb42:	bd70      	pop	{r4, r5, r6, pc}

0800cb44 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4604      	mov	r4, r0
 800cb48:	460d      	mov	r5, r1
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 800cb4a:	f890 0084 	ldrb.w	r0, [r0, #132]	@ 0x84
 800cb4e:	f7fe fd49 	bl	800b5e4 <VL53L1_decode_vcsel_period>

	if (period != 0)
 800cb52:	02c3      	lsls	r3, r0, #11
 800cb54:	d005      	beq.n	800cb62 <VL53L1_f_038+0x1e>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800cb56:	f8b5 209c 	ldrh.w	r2, [r5, #156]	@ 0x9c
		remapped_phase =
 800cb5a:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb5e:	fb03 2311 	mls	r3, r3, r1, r2


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800cb62:	f8b4 009c 	ldrh.w	r0, [r4, #156]	@ 0x9c
 800cb66:	1ac0      	subs	r0, r0, r3
				- (int32_t)remapped_phase;



	if (phase_delta > 0)
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dd08      	ble.n	800cb7e <VL53L1_f_038+0x3a>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800cb6c:	f510 6080 	adds.w	r0, r0, #1024	@ 0x400
 800cb70:	d402      	bmi.n	800cb78 <VL53L1_f_038+0x34>
 800cb72:	f340 20c7 	sbfx	r0, r0, #11, #8
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);

	LOG_FUNCTION_END(0);

	return bin_offset;
}
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800cb78:	f200 70ff 	addw	r0, r0, #2047	@ 0x7ff
 800cb7c:	e7f9      	b.n	800cb72 <VL53L1_f_038+0x2e>
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800cb7e:	f5b0 6080 	subs.w	r0, r0, #1024	@ 0x400
 800cb82:	d402      	bmi.n	800cb8a <VL53L1_f_038+0x46>
 800cb84:	f340 20c7 	sbfx	r0, r0, #11, #8
 800cb88:	e7f5      	b.n	800cb76 <VL53L1_f_038+0x32>
 800cb8a:	f200 70ff 	addw	r0, r0, #2047	@ 0x7ff
 800cb8e:	e7f9      	b.n	800cb84 <VL53L1_f_038+0x40>

0800cb90 <VL53L1_f_004>:
{
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	4606      	mov	r6, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	4614      	mov	r4, r2
	memcpy(
 800cb98:	22ac      	movs	r2, #172	@ 0xac
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f001 ff8c 	bl	800eab8 <memcpy>
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 800cba0:	2300      	movs	r3, #0
 800cba2:	e005      	b.n	800cbb0 <VL53L1_f_004+0x20>
		pxtalk_realigned->bin_data[i] = 0;
 800cba4:	1d9a      	adds	r2, r3, #6
 800cba6:	2100      	movs	r1, #0
 800cba8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 800cbac:	3301      	adds	r3, #1
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	7a62      	ldrb	r2, [r4, #9]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d8f6      	bhi.n	800cba4 <VL53L1_f_004+0x14>
	bin_offset =  VL53L1_f_038(
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f7ff ffc3 	bl	800cb44 <VL53L1_f_038>
	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 800cbbe:	7ab3      	ldrb	r3, [r6, #10]
 800cbc0:	7aa9      	ldrb	r1, [r5, #10]
 800cbc2:	428b      	cmp	r3, r1
 800cbc4:	d200      	bcs.n	800cbc8 <VL53L1_f_004+0x38>
		min_bins = pxtalk->VL53L1_p_024;
 800cbc6:	4619      	mov	r1, r3
	for (i = 0 ; i <  min_bins ; i++) {
 800cbc8:	2200      	movs	r2, #0
 800cbca:	e018      	b.n	800cbfe <VL53L1_f_004+0x6e>
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 800cbcc:	f995 700a 	ldrsb.w	r7, [r5, #10]
				((int8_t)i + (int8_t)bin_offset))
 800cbd0:	fa40 f382 	sxtab	r3, r0, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 800cbd4:	443b      	add	r3, r7
					% (int8_t)pbins->VL53L1_p_024;
 800cbd6:	fb93 fcf7 	sdiv	ip, r3, r7
 800cbda:	fb07 331c 	mls	r3, r7, ip, r3
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 800cbde:	b25b      	sxtb	r3, r3
 800cbe0:	e01a      	b.n	800cc18 <VL53L1_f_004+0x88>
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800cbe2:	1d9f      	adds	r7, r3, #6
 800cbe4:	f04f 0e00 	mov.w	lr, #0
 800cbe8:	f845 e027 	str.w	lr, [r5, r7, lsl #2]
			pxtalk->bin_data[i];
 800cbec:	f10c 0c06 	add.w	ip, ip, #6
 800cbf0:	f856 702c 	ldr.w	r7, [r6, ip, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800cbf4:	3306      	adds	r3, #6
 800cbf6:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800cbfa:	3201      	adds	r2, #1
 800cbfc:	b2d2      	uxtb	r2, r2
 800cbfe:	428a      	cmp	r2, r1
 800cc00:	d21c      	bcs.n	800cc3c <VL53L1_f_004+0xac>
		if (bin_offset >= 0)
 800cc02:	2800      	cmp	r0, #0
 800cc04:	dbe2      	blt.n	800cbcc <VL53L1_f_004+0x3c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800cc06:	fa40 f382 	sxtab	r3, r0, r2
				% (int8_t)pbins->VL53L1_p_024;
 800cc0a:	f995 700a 	ldrsb.w	r7, [r5, #10]
 800cc0e:	fb93 fcf7 	sdiv	ip, r3, r7
 800cc12:	fb07 331c 	mls	r3, r7, ip, r3
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800cc16:	b25b      	sxtb	r3, r3
		if (pbins->bin_data[(uint8_t)bin_access] >
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	1d9f      	adds	r7, r3, #6
 800cc1c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
			pxtalk->bin_data[i]) {
 800cc20:	4694      	mov	ip, r2
 800cc22:	f102 0e06 	add.w	lr, r2, #6
 800cc26:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800cc2a:	4577      	cmp	r7, lr
 800cc2c:	ddd9      	ble.n	800cbe2 <VL53L1_f_004+0x52>
				- pxtalk->bin_data[i];
 800cc2e:	eba7 070e 	sub.w	r7, r7, lr
			pbins->bin_data[(uint8_t)bin_access] =
 800cc32:	f103 0e06 	add.w	lr, r3, #6
 800cc36:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
 800cc3a:	e7d7      	b.n	800cbec <VL53L1_f_004+0x5c>
}
 800cc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc3e <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800cc3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc40:	b089      	sub	sp, #36	@ 0x24
 800cc42:	4605      	mov	r5, r0
 800cc44:	460c      	mov	r4, r1

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 800cc46:	22ac      	movs	r2, #172	@ 0xac
 800cc48:	4601      	mov	r1, r0
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f001 ff34 	bl	800eab8 <memcpy>


	podata->VL53L1_p_024 = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	72a3      	strb	r3, [r4, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800cc54:	e004      	b.n	800cc60 <VL53L1_f_039+0x22>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 800cc56:	18e2      	adds	r2, r4, r3
 800cc58:	2110      	movs	r1, #16
 800cc5a:	7311      	strb	r1, [r2, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b05      	cmp	r3, #5
 800cc62:	d9f8      	bls.n	800cc56 <VL53L1_f_039+0x18>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 800cc64:	2300      	movs	r3, #0
 800cc66:	e005      	b.n	800cc74 <VL53L1_f_039+0x36>
		podata->bin_data[lc] = 0;
 800cc68:	1d9a      	adds	r2, r3, #6
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 800cc70:	3301      	adds	r3, #1
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	7a62      	ldrb	r2, [r4, #9]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d8f6      	bhi.n	800cc68 <VL53L1_f_039+0x2a>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e009      	b.n	800cc92 <VL53L1_f_039+0x54>
		bin_initial_index[lc] = 0x00;
 800cc7e:	f103 0220 	add.w	r2, r3, #32
 800cc82:	446a      	add	r2, sp
 800cc84:	2100      	movs	r1, #0
 800cc86:	f802 1c10 	strb.w	r1, [r2, #-16]
		bin_repeat_count[lc]  = 0x00;
 800cc8a:	f802 1c20 	strb.w	r1, [r2, #-32]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800cc8e:	3301      	adds	r3, #1
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b0f      	cmp	r3, #15
 800cc94:	d9f3      	bls.n	800cc7e <VL53L1_f_039+0x40>



	bin_seq_length = 0x00;

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800cc96:	f04f 0c00 	mov.w	ip, #0
	bin_seq_length = 0x00;
 800cc9a:	4667      	mov	r7, ip
 800cc9c:	e014      	b.n	800ccc8 <VL53L1_f_039+0x8a>


		VL53L1_p_018 = bin_initial_index[bin_cfg];

		for (i = 0 ; i < 4 ; i++)
			podata->bin_data[VL53L1_p_018+i] +=
 800cc9e:	eb0e 0203 	add.w	r2, lr, r3
 800cca2:	3206      	adds	r2, #6
 800cca4:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800cca8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ccac:	3006      	adds	r0, #6
 800ccae:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 800ccb2:	4401      	add	r1, r0
 800ccb4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d9ee      	bls.n	800cc9e <VL53L1_f_039+0x60>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ccc0:	f10c 0c01 	add.w	ip, ip, #1
 800ccc4:	fa5f fc8c 	uxtb.w	ip, ip
 800ccc8:	f1bc 0f05 	cmp.w	ip, #5
 800cccc:	d81c      	bhi.n	800cd08 <VL53L1_f_039+0xca>
		bin_cfg = pidata->bin_seq[lc];
 800ccce:	4666      	mov	r6, ip
 800ccd0:	eb05 030c 	add.w	r3, r5, ip
 800ccd4:	7b1b      	ldrb	r3, [r3, #12]
		if (bin_repeat_count[bin_cfg] == 0) {
 800ccd6:	f103 0220 	add.w	r2, r3, #32
 800ccda:	446a      	add	r2, sp
 800ccdc:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 800cce0:	b94a      	cbnz	r2, 800ccf6 <VL53L1_f_039+0xb8>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800cce2:	00b8      	lsls	r0, r7, #2
 800cce4:	f103 0120 	add.w	r1, r3, #32
 800cce8:	4469      	add	r1, sp
 800ccea:	f801 0c10 	strb.w	r0, [r1, #-16]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800ccee:	19e1      	adds	r1, r4, r7
 800ccf0:	730b      	strb	r3, [r1, #12]
			bin_seq_length++;
 800ccf2:	3701      	adds	r7, #1
 800ccf4:	b2ff      	uxtb	r7, r7
		bin_repeat_count[bin_cfg]++;
 800ccf6:	3320      	adds	r3, #32
 800ccf8:	446b      	add	r3, sp
 800ccfa:	3201      	adds	r2, #1
 800ccfc:	f803 2c20 	strb.w	r2, [r3, #-32]
		VL53L1_p_018 = bin_initial_index[bin_cfg];
 800cd00:	f813 ec10 	ldrb.w	lr, [r3, #-16]
		for (i = 0 ; i < 4 ; i++)
 800cd04:	2300      	movs	r3, #0
 800cd06:	e7d9      	b.n	800ccbc <VL53L1_f_039+0x7e>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800cd08:	2300      	movs	r3, #0
 800cd0a:	e004      	b.n	800cd16 <VL53L1_f_039+0xd8>

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
		else
			podata->bin_rep[lc] = 0;
 800cd0c:	18e2      	adds	r2, r4, r3
 800cd0e:	2100      	movs	r1, #0
 800cd10:	7491      	strb	r1, [r2, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800cd12:	3301      	adds	r3, #1
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	d80a      	bhi.n	800cd30 <VL53L1_f_039+0xf2>
		bin_cfg = podata->bin_seq[lc];
 800cd1a:	18e2      	adds	r2, r4, r3
 800cd1c:	7b12      	ldrb	r2, [r2, #12]
		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 800cd1e:	2a0f      	cmp	r2, #15
 800cd20:	d8f4      	bhi.n	800cd0c <VL53L1_f_039+0xce>
				bin_repeat_count[bin_cfg];
 800cd22:	3220      	adds	r2, #32
 800cd24:	446a      	add	r2, sp
 800cd26:	f812 1c20 	ldrb.w	r1, [r2, #-32]
			podata->bin_rep[lc] =
 800cd2a:	18e2      	adds	r2, r4, r3
 800cd2c:	7491      	strb	r1, [r2, #18]
 800cd2e:	e7f0      	b.n	800cd12 <VL53L1_f_039+0xd4>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 800cd30:	00bf      	lsls	r7, r7, #2
 800cd32:	72a7      	strb	r7, [r4, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800cd34:	2000      	movs	r0, #0
 800cd36:	e011      	b.n	800cd5c <VL53L1_f_039+0x11e>
		if (repeat_count > 0) {

			VL53L1_p_018 = bin_initial_index[lc];

			for (i = 0 ; i < 4 ; i++) {
				podata->bin_data[VL53L1_p_018+i] +=
 800cd38:	18b1      	adds	r1, r6, r2
 800cd3a:	3106      	adds	r1, #6
 800cd3c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800cd40:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 800cd44:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
					(repeat_count/2);
				podata->bin_data[VL53L1_p_018+i] /=
 800cd48:	fb93 f3f5 	sdiv	r3, r3, r5
 800cd4c:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800cd50:	3201      	adds	r2, #1
 800cd52:	b2d2      	uxtb	r2, r2
 800cd54:	2a03      	cmp	r2, #3
 800cd56:	d9ef      	bls.n	800cd38 <VL53L1_f_039+0xfa>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800cd58:	3001      	adds	r0, #1
 800cd5a:	b2c0      	uxtb	r0, r0
 800cd5c:	280f      	cmp	r0, #15
 800cd5e:	d80d      	bhi.n	800cd7c <VL53L1_f_039+0x13e>
		repeat_count = (int32_t)bin_repeat_count[lc];
 800cd60:	f100 0320 	add.w	r3, r0, #32
 800cd64:	446b      	add	r3, sp
 800cd66:	f813 5c20 	ldrb.w	r5, [r3, #-32]
		if (repeat_count > 0) {
 800cd6a:	2d00      	cmp	r5, #0
 800cd6c:	d0f4      	beq.n	800cd58 <VL53L1_f_039+0x11a>
			VL53L1_p_018 = bin_initial_index[lc];
 800cd6e:	f100 0320 	add.w	r3, r0, #32
 800cd72:	446b      	add	r3, sp
 800cd74:	f813 6c10 	ldrb.w	r6, [r3, #-16]
			for (i = 0 ; i < 4 ; i++) {
 800cd78:	2200      	movs	r2, #0
 800cd7a:	e7eb      	b.n	800cd54 <VL53L1_f_039+0x116>
		}
	}



	podata->number_of_ambient_bins = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	72e3      	strb	r3, [r4, #11]
	if ((bin_repeat_count[7] > 0) ||
 800cd80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd84:	b913      	cbnz	r3, 800cd8c <VL53L1_f_039+0x14e>
		(bin_repeat_count[15] > 0))
 800cd86:	f89d 300f 	ldrb.w	r3, [sp, #15]
	if ((bin_repeat_count[7] > 0) ||
 800cd8a:	b10b      	cbz	r3, 800cd90 <VL53L1_f_039+0x152>
		podata->number_of_ambient_bins = 4;
 800cd8c:	2304      	movs	r3, #4
 800cd8e:	72e3      	strb	r3, [r4, #11]

	LOG_FUNCTION_END(status);

	return status;
}
 800cd90:	2000      	movs	r0, #0
 800cd92:	b009      	add	sp, #36	@ 0x24
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd96 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800cd96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9a:	b0c3      	sub	sp, #268	@ 0x10c
 800cd9c:	9008      	str	r0, [sp, #32]
 800cd9e:	9109      	str	r1, [sp, #36]	@ 0x24
 800cda0:	4617      	mov	r7, r2
 800cda2:	461c      	mov	r4, r3
 800cda4:	9d4c      	ldr	r5, [sp, #304]	@ 0x130
 800cda6:	9e4f      	ldr	r6, [sp, #316]	@ 0x13c
 800cda8:	f8dd 8140 	ldr.w	r8, [sp, #320]	@ 0x140
	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800cdac:	f04f 0900 	mov.w	r9, #0
 800cdb0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 800cdb4:	a90d      	add	r1, sp, #52	@ 0x34
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff ff41 	bl	800cc3e <VL53L1_f_039>
			pbins_input,
			pbins_averaged);



	VL53L1_init_histogram_bin_data_struct(
 800cdbc:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	469a      	mov	sl, r3
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	7aa9      	ldrb	r1, [r5, #10]
 800cdc8:	4648      	mov	r0, r9
 800cdca:	f7fe fc4c 	bl	800b666 <VL53L1_init_histogram_bin_data_struct>
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 800cdce:	4651      	mov	r1, sl
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f7fe fc28 	bl	800b626 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800cdd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 800cdda:	b9fb      	cbnz	r3, 800ce1c <VL53L1_hist_process_data+0x86>
	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800cddc:	2300      	movs	r3, #0
 800cdde:	9306      	str	r3, [sp, #24]
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800cde0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 800cde4:	bb9b      	cbnz	r3, 800ce4e <VL53L1_hist_process_data+0xb8>




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800cde6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
	presults->xmonitor.total_periods_elapsed =
 800cde8:	f8c6 315c 	str.w	r3, [r6, #348]	@ 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 800cdec:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	@ 0xb0
	presults->xmonitor.VL53L1_p_006 =
 800cdf0:	f8a6 315a 	strh.w	r3, [r6, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f8a6 3174 	strh.w	r3, [r6, #372]	@ 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 800cdfa:	f8c6 317c 	str.w	r3, [r6, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800cdfe:	f886 3144 	strb.w	r3, [r6, #324]	@ 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ce02:	f886 318e 	strb.w	r3, [r6, #398]	@ 0x18e



	xtalk_enable = 0;
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800ce06:	f897 b028 	ldrb.w	fp, [r7, #40]	@ 0x28
 800ce0a:	f1bb 0f00 	cmp.w	fp, #0
 800ce0e:	d001      	beq.n	800ce14 <VL53L1_hist_process_data+0x7e>
		xtalk_enable = 1;
 800ce10:	f04f 0b01 	mov.w	fp, #1



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ce14:	2500      	movs	r5, #0
 800ce16:	f8dd a138 	ldr.w	sl, [sp, #312]	@ 0x138
 800ce1a:	e06b      	b.n	800cef4 <VL53L1_hist_process_data+0x15e>
		VL53L1_f_040(
 800ce1c:	ab0c      	add	r3, sp, #48	@ 0x30
 800ce1e:	9304      	str	r3, [sp, #16]
 800ce20:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800ce24:	9303      	str	r3, [sp, #12]
 800ce26:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 800ce2a:	9302      	str	r3, [sp, #8]
 800ce2c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	@ 0x7c
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	464b      	mov	r3, r9
 800ce34:	f8cd 9000 	str.w	r9, [sp]
 800ce38:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800ce3c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	@ 0x30
 800ce40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce42:	f001 f9ba 	bl	800e1ba <VL53L1_f_040>
	if ((status == VL53L1_ERROR_NONE) &&
 800ce46:	9006      	str	r0, [sp, #24]
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1cc      	bne.n	800cde6 <VL53L1_hist_process_data+0x50>
 800ce4c:	e7c8      	b.n	800cde0 <VL53L1_hist_process_data+0x4a>
			VL53L1_f_041(
 800ce4e:	9b07      	ldr	r3, [sp, #28]
 800ce50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ce52:	4629      	mov	r1, r5
 800ce54:	a80d      	add	r0, sp, #52	@ 0x34
 800ce56:	f001 fa74 	bl	800e342 <VL53L1_f_041>
 800ce5a:	9006      	str	r0, [sp, #24]
 800ce5c:	e7c3      	b.n	800cde6 <VL53L1_hist_process_data+0x50>
				delta_mm =
					pdata->max_range_mm -
					pdata->min_range_mm;
			else
				delta_mm =
					pdata->min_range_mm -
 800ce5e:	b29b      	uxth	r3, r3
					pdata->max_range_mm;
 800ce60:	b280      	uxth	r0, r0
					pdata->min_range_mm -
 800ce62:	1a1b      	subs	r3, r3, r0
				delta_mm =
 800ce64:	b21b      	sxth	r3, r3
 800ce66:	e016      	b.n	800ce96 <VL53L1_hist_process_data+0x100>
		for (t = 0 ; t < presults->active_results ; t++) {
 800ce68:	3401      	adds	r4, #1
 800ce6a:	b2e4      	uxtb	r4, r4
 800ce6c:	45a1      	cmp	r9, r4
 800ce6e:	d93e      	bls.n	800ceee <VL53L1_hist_process_data+0x158>
			pdata = &(presults->VL53L1_p_002[t]);
 800ce70:	4622      	mov	r2, r4
 800ce72:	234c      	movs	r3, #76	@ 0x4c
 800ce74:	fb04 f303 	mul.w	r3, r4, r3
 800ce78:	f103 0110 	add.w	r1, r3, #16
 800ce7c:	4431      	add	r1, r6
 800ce7e:	3104      	adds	r1, #4
			if (pdata->max_range_mm > pdata->min_range_mm)
 800ce80:	4433      	add	r3, r6
 800ce82:	f9b3 005c 	ldrsh.w	r0, [r3, #92]	@ 0x5c
 800ce86:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 800ce8a:	4298      	cmp	r0, r3
 800ce8c:	dde7      	ble.n	800ce5e <VL53L1_hist_process_data+0xc8>
					pdata->max_range_mm -
 800ce8e:	b280      	uxth	r0, r0
					pdata->min_range_mm;
 800ce90:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800ce92:	1ac0      	subs	r0, r0, r3
				delta_mm =
 800ce94:	b203      	sxth	r3, r0

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800ce96:	f8b7 c03a 	ldrh.w	ip, [r7, #58]	@ 0x3a
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800ce9a:	f898 0000 	ldrb.w	r0, [r8]
 800ce9e:	fb0c f000 	mul.w	r0, ip, r0
			XtalkDetectMaxSigma <<= 5;
 800cea2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
			if (pdata->median_range_mm  >
 800cea6:	204c      	movs	r0, #76	@ 0x4c
 800cea8:	fb00 6002 	mla	r0, r0, r2, r6
 800ceac:	f9b0 005a 	ldrsh.w	r0, [r0, #90]	@ 0x5a
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ceb0:	f9b7 e034 	ldrsh.w	lr, [r7, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800ceb4:	4570      	cmp	r0, lr
 800ceb6:	ddd7      	ble.n	800ce68 <VL53L1_hist_process_data+0xd2>
			pdata->median_range_mm  <
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ceb8:	f9b7 e036 	ldrsh.w	lr, [r7, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800cebc:	4570      	cmp	r0, lr
 800cebe:	dad3      	bge.n	800ce68 <VL53L1_hist_process_data+0xd2>
			pdata->VL53L1_p_012 <
 800cec0:	204c      	movs	r0, #76	@ 0x4c
 800cec2:	fb00 6002 	mla	r0, r0, r2, r6
 800cec6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800cec8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ceca:	42a8      	cmp	r0, r5
 800cecc:	d2cc      	bcs.n	800ce68 <VL53L1_hist_process_data+0xd2>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 800cece:	204c      	movs	r0, #76	@ 0x4c
 800ced0:	fb00 6202 	mla	r2, r0, r2, r6
 800ced4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
			max_xtalk_rate_per_spad_kcps &&
 800ced8:	4562      	cmp	r2, ip
 800ceda:	d2c5      	bcs.n	800ce68 <VL53L1_hist_process_data+0xd2>
			delta_mm <
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800cedc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 800cede:	4293      	cmp	r3, r2
 800cee0:	dac2      	bge.n	800ce68 <VL53L1_hist_process_data+0xd2>



				memcpy(
 800cee2:	4602      	mov	r2, r0
 800cee4:	f506 70a2 	add.w	r0, r6, #324	@ 0x144
 800cee8:	f001 fde6 	bl	800eab8 <memcpy>
 800ceec:	e7bc      	b.n	800ce68 <VL53L1_hist_process_data+0xd2>
 800ceee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800cef0:	3501      	adds	r5, #1
 800cef2:	b2ed      	uxtb	r5, r5
 800cef4:	45ab      	cmp	fp, r5
 800cef6:	d32e      	bcc.n	800cf56 <VL53L1_hist_process_data+0x1c0>
		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800cef8:	f887 5028 	strb.w	r5, [r7, #40]	@ 0x28
		VL53L1_f_033(
 800cefc:	f898 3000 	ldrb.w	r3, [r8]
 800cf00:	9305      	str	r3, [sp, #20]
 800cf02:	9604      	str	r6, [sp, #16]
 800cf04:	ab38      	add	r3, sp, #224	@ 0xe0
 800cf06:	9303      	str	r3, [sp, #12]
 800cf08:	f8cd a008 	str.w	sl, [sp, #8]
 800cf0c:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	9b07      	ldr	r3, [sp, #28]
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	ab0d      	add	r3, sp, #52	@ 0x34
 800cf16:	463a      	mov	r2, r7
 800cf18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf1a:	9808      	ldr	r0, [sp, #32]
 800cf1c:	f7ff fbfa 	bl	800c714 <VL53L1_f_033>
		if (!(status == VL53L1_ERROR_NONE && r == 0))
 800cf20:	9006      	str	r0, [sp, #24]
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d1e4      	bne.n	800cef0 <VL53L1_hist_process_data+0x15a>
 800cf26:	2d00      	cmp	r5, #0
 800cf28:	d1e2      	bne.n	800cef0 <VL53L1_hist_process_data+0x15a>
		if (presults->active_results == 0) {
 800cf2a:	f896 9012 	ldrb.w	r9, [r6, #18]
 800cf2e:	f1b9 0f00 	cmp.w	r9, #0
 800cf32:	d106      	bne.n	800cf42 <VL53L1_hist_process_data+0x1ac>
				pdmax_algo_gen3->VL53L1_p_001;
 800cf34:	f8bd 30f8 	ldrh.w	r3, [sp, #248]	@ 0xf8
			pdata->ambient_count_rate_mcps =
 800cf38:	f8a6 3048 	strh.w	r3, [r6, #72]	@ 0x48
				pdmax_algo_gen3->VL53L1_p_006;
 800cf3c:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	@ 0xfa
			pdata->VL53L1_p_006 =
 800cf40:	8573      	strh	r3, [r6, #42]	@ 0x2a
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800cf42:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800cf44:	f898 3000 	ldrb.w	r3, [r8]
 800cf48:	fb02 f303 	mul.w	r3, r2, r3
		max_xtalk_rate_per_spad_kcps <<= 4;
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	930a      	str	r3, [sp, #40]	@ 0x28
		for (t = 0 ; t < presults->active_results ; t++) {
 800cf50:	462c      	mov	r4, r5
 800cf52:	950b      	str	r5, [sp, #44]	@ 0x2c
 800cf54:	e78a      	b.n	800ce6c <VL53L1_hist_process_data+0xd6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800cf56:	f887 b028 	strb.w	fp, [r7, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
}
 800cf5a:	9806      	ldr	r0, [sp, #24]
 800cf5c:	b043      	add	sp, #268	@ 0x10c
 800cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf62 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800cf62:	b570      	push	{r4, r5, r6, lr}
 800cf64:	4606      	mov	r6, r0
 800cf66:	460d      	mov	r5, r1
 800cf68:	4614      	mov	r4, r2




	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_disable_firmware(Dev);
 800cf6a:	f7fc fbac 	bl	80096c6 <VL53L1_disable_firmware>




	if (status == VL53L1_ERROR_NONE)
 800cf6e:	4603      	mov	r3, r0
 800cf70:	b110      	cbz	r0, 800cf78 <VL53L1_nvm_enable+0x16>
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 800cf72:	b16b      	cbz	r3, 800cf90 <VL53L1_nvm_enable+0x2e>

	LOG_FUNCTION_END(status);

	return status;

}
 800cf74:	4618      	mov	r0, r3
 800cf76:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_enable_powerforce(Dev);
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7fc fbb1 	bl	80096e0 <VL53L1_enable_powerforce>
	if (status == VL53L1_ERROR_NONE)
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d1f7      	bne.n	800cf74 <VL53L1_nvm_enable+0x12>
		status = VL53L1_WaitUs(
 800cf84:	21fa      	movs	r1, #250	@ 0xfa
 800cf86:	4630      	mov	r0, r6
 800cf88:	f000 fa3e 	bl	800d408 <VL53L1_WaitUs>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	e7f0      	b.n	800cf72 <VL53L1_nvm_enable+0x10>
		status = VL53L1_WrByte(
 800cf90:	2201      	movs	r2, #1
 800cf92:	f240 7181 	movw	r1, #1921	@ 0x781
 800cf96:	4630      	mov	r0, r6
 800cf98:	f000 f9c2 	bl	800d320 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d1e8      	bne.n	800cf74 <VL53L1_nvm_enable+0x12>
		status = VL53L1_WrByte(
 800cfa2:	2205      	movs	r2, #5
 800cfa4:	f240 6183 	movw	r1, #1667	@ 0x683
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f000 f9b9 	bl	800d320 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d1df      	bne.n	800cf74 <VL53L1_nvm_enable+0x12>
		status = VL53L1_WaitUs(
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f000 fa26 	bl	800d408 <VL53L1_WaitUs>
	if (status == VL53L1_ERROR_NONE)
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d1d8      	bne.n	800cf74 <VL53L1_nvm_enable+0x12>
		status = VL53L1_WrByte(
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f000 f9a9 	bl	800d320 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d1cf      	bne.n	800cf74 <VL53L1_nvm_enable+0x12>
		status = VL53L1_WrWord(
 800cfd4:	462a      	mov	r2, r5
 800cfd6:	f240 7184 	movw	r1, #1924	@ 0x784
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f000 f9b4 	bl	800d348 <VL53L1_WrWord>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	e7c7      	b.n	800cf74 <VL53L1_nvm_enable+0x12>

0800cfe4 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe8:	4681      	mov	r9, r0
 800cfea:	460f      	mov	r7, r1
 800cfec:	4690      	mov	r8, r2
 800cfee:	461e      	mov	r6, r3
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800cff0:	460c      	mov	r4, r1
	VL53L1_Error status   = VL53L1_ERROR_NONE;
 800cff2:	2500      	movs	r5, #0
	for (nvm_addr = start_address;
 800cff4:	e00a      	b.n	800d00c <VL53L1_nvm_read+0x28>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
			status = VL53L1_WrByte(
 800cff6:	4622      	mov	r2, r4
 800cff8:	f240 7194 	movw	r1, #1940	@ 0x794
 800cffc:	4648      	mov	r0, r9
 800cffe:	f000 f98f 	bl	800d320 <VL53L1_WrByte>
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 800d002:	4605      	mov	r5, r0
 800d004:	b318      	cbz	r0, 800d04e <VL53L1_nvm_read+0x6a>
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800d006:	3604      	adds	r6, #4
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800d008:	3401      	adds	r4, #1
 800d00a:	b2e4      	uxtb	r4, r4
 800d00c:	eb07 0308 	add.w	r3, r7, r8
 800d010:	429c      	cmp	r4, r3
 800d012:	da24      	bge.n	800d05e <VL53L1_nvm_read+0x7a>
		if (status == VL53L1_ERROR_NONE)
 800d014:	2d00      	cmp	r5, #0
 800d016:	d0ee      	beq.n	800cff6 <VL53L1_nvm_read+0x12>
		if (status == VL53L1_ERROR_NONE)
 800d018:	2d00      	cmp	r5, #0
 800d01a:	d1f4      	bne.n	800d006 <VL53L1_nvm_read+0x22>
			status = VL53L1_WaitUs(
 800d01c:	2105      	movs	r1, #5
 800d01e:	4648      	mov	r0, r9
 800d020:	f000 f9f2 	bl	800d408 <VL53L1_WaitUs>
		if (status == VL53L1_ERROR_NONE)
 800d024:	4605      	mov	r5, r0
 800d026:	2800      	cmp	r0, #0
 800d028:	d1ed      	bne.n	800d006 <VL53L1_nvm_read+0x22>
			status = VL53L1_WrByte(
 800d02a:	2201      	movs	r2, #1
 800d02c:	f240 7183 	movw	r1, #1923	@ 0x783
 800d030:	4648      	mov	r0, r9
 800d032:	f000 f975 	bl	800d320 <VL53L1_WrByte>
		if (status == VL53L1_ERROR_NONE)
 800d036:	4605      	mov	r5, r0
 800d038:	2800      	cmp	r0, #0
 800d03a:	d1e4      	bne.n	800d006 <VL53L1_nvm_read+0x22>
			status = VL53L1_ReadMulti(
 800d03c:	2304      	movs	r3, #4
 800d03e:	4632      	mov	r2, r6
 800d040:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800d044:	4648      	mov	r0, r9
 800d046:	f000 f94d 	bl	800d2e4 <VL53L1_ReadMulti>
 800d04a:	4605      	mov	r5, r0
 800d04c:	e7db      	b.n	800d006 <VL53L1_nvm_read+0x22>
			status = VL53L1_WrByte(
 800d04e:	2200      	movs	r2, #0
 800d050:	f240 7183 	movw	r1, #1923	@ 0x783
 800d054:	4648      	mov	r0, r9
 800d056:	f000 f963 	bl	800d320 <VL53L1_WrByte>
 800d05a:	4605      	mov	r5, r0
 800d05c:	e7dc      	b.n	800d018 <VL53L1_nvm_read+0x34>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800d05e:	4628      	mov	r0, r5
 800d060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d064 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 800d064:	b510      	push	{r4, lr}
 800d066:	4604      	mov	r4, r0
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WrByte(
 800d068:	2201      	movs	r2, #1
 800d06a:	f240 7183 	movw	r1, #1923	@ 0x783
 800d06e:	f000 f957 	bl	800d320 <VL53L1_WrByte>
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 800d072:	4603      	mov	r3, r0
 800d074:	b110      	cbz	r0, 800d07c <VL53L1_nvm_disable+0x18>
	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_disable_powerforce(Dev);



	if (status == VL53L1_ERROR_NONE)
 800d076:	b17b      	cbz	r3, 800d098 <VL53L1_nvm_disable+0x34>

	LOG_FUNCTION_END(status);

	return status;

}
 800d078:	4618      	mov	r0, r3
 800d07a:	bd10      	pop	{r4, pc}
		status = VL53L1_WrByte(
 800d07c:	2200      	movs	r2, #0
 800d07e:	f240 7181 	movw	r1, #1921	@ 0x781
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f94c 	bl	800d320 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 800d088:	4603      	mov	r3, r0
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d1f4      	bne.n	800d078 <VL53L1_nvm_disable+0x14>
		status = VL53L1_disable_powerforce(Dev);
 800d08e:	4620      	mov	r0, r4
 800d090:	f7fc fb2b 	bl	80096ea <VL53L1_disable_powerforce>
 800d094:	4603      	mov	r3, r0
 800d096:	e7ee      	b.n	800d076 <VL53L1_nvm_disable+0x12>
		status = VL53L1_enable_firmware(Dev);
 800d098:	4620      	mov	r0, r4
 800d09a:	f7fc fb0f 	bl	80096bc <VL53L1_enable_firmware>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	e7ea      	b.n	800d078 <VL53L1_nvm_disable+0x14>

0800d0a2 <VL53L1_nvm_decode_optical_centre>:

	VL53L1_Error status   = VL53L1_ERROR_NONE;

	uint16_t  tmp = 0;

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800d0a2:	2803      	cmp	r0, #3
 800d0a4:	d90b      	bls.n	800d0be <VL53L1_nvm_decode_optical_centre+0x1c>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;


	tmp  = 0x00F0;
	tmp -= (uint16_t)*(pbuffer + 2);
 800d0a6:	788b      	ldrb	r3, [r1, #2]
 800d0a8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d0ac:	b29b      	uxth	r3, r3
	if (tmp > 0x0FF)
 800d0ae:	2bff      	cmp	r3, #255	@ 0xff
 800d0b0:	d900      	bls.n	800d0b4 <VL53L1_nvm_decode_optical_centre+0x12>
		tmp = 0;
 800d0b2:	2300      	movs	r3, #0

	pdata->x_centre = (uint8_t)tmp;
 800d0b4:	7013      	strb	r3, [r2, #0]
	pdata->y_centre = *(pbuffer + 3);
 800d0b6:	78cb      	ldrb	r3, [r1, #3]
 800d0b8:	7053      	strb	r3, [r2, #1]

	return status;
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	4770      	bx	lr
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 800d0be:	f06f 0008 	mvn.w	r0, #8
}
 800d0c2:	4770      	bx	lr

0800d0c4 <VL53L1_nvm_decode_cal_peak_rate_map>:
	VL53L1_Error status   = VL53L1_ERROR_NONE;

	uint8_t   *ptmp = NULL;
	uint8_t       i = 0;

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800d0c4:	2837      	cmp	r0, #55	@ 0x37
 800d0c6:	d924      	bls.n	800d112 <VL53L1_nvm_decode_cal_peak_rate_map+0x4e>
{
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	460d      	mov	r5, r1
 800d0cc:	4616      	mov	r6, r2
		return VL53L1_ERROR_BUFFER_TOO_SMALL;

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 800d0ce:	2002      	movs	r0, #2
 800d0d0:	f7fc fa86 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->cal_distance_mm =
 800d0d4:	8030      	strh	r0, [r6, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 800d0d6:	1ca9      	adds	r1, r5, #2
 800d0d8:	2002      	movs	r0, #2
 800d0da:	f7fc fa81 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->cal_reflectance_pc =
 800d0de:	8070      	strh	r0, [r6, #2]
	pdata->cal_reflectance_pc =
 800d0e0:	0980      	lsrs	r0, r0, #6
 800d0e2:	8070      	strh	r0, [r6, #2]
		pdata->cal_reflectance_pc >> 6;

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 800d0e4:	2319      	movs	r3, #25
 800d0e6:	80b3      	strh	r3, [r6, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 800d0e8:	2305      	movs	r3, #5
 800d0ea:	80f3      	strh	r3, [r6, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 800d0ec:	8133      	strh	r3, [r6, #8]

	ptmp = pbuffer + 4;
 800d0ee:	3504      	adds	r5, #4
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800d0f0:	2400      	movs	r4, #0
 800d0f2:	e00a      	b.n	800d10a <VL53L1_nvm_decode_cal_peak_rate_map+0x46>
		pdata->peak_rate_mcps[i] =
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	2002      	movs	r0, #2
 800d0f8:	f7fc fa72 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
		pdata->peak_rate_mcps[i] =
 800d0fc:	1d23      	adds	r3, r4, #4
 800d0fe:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d102:	8058      	strh	r0, [r3, #2]
		ptmp += 2;
 800d104:	3502      	adds	r5, #2
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800d106:	3401      	adds	r4, #1
 800d108:	b2e4      	uxtb	r4, r4
 800d10a:	2c18      	cmp	r4, #24
 800d10c:	d9f2      	bls.n	800d0f4 <VL53L1_nvm_decode_cal_peak_rate_map+0x30>
	}

	return status;
 800d10e:	2000      	movs	r0, #0
}
 800d110:	bd70      	pop	{r4, r5, r6, pc}
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 800d112:	f06f 0008 	mvn.w	r0, #8
}
 800d116:	4770      	bx	lr

0800d118 <VL53L1_nvm_decode_additional_offset_cal_data>:
	VL53L1_additional_offset_cal_data_t *pdata)
{

	VL53L1_Error status   = VL53L1_ERROR_NONE;

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800d118:	2807      	cmp	r0, #7
 800d11a:	d917      	bls.n	800d14c <VL53L1_nvm_decode_additional_offset_cal_data+0x34>
{
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	460d      	mov	r5, r1
 800d120:	4614      	mov	r4, r2
		return VL53L1_ERROR_BUFFER_TOO_SMALL;

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 800d122:	2002      	movs	r0, #2
 800d124:	f7fc fa5c 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads =
 800d128:	8020      	strh	r0, [r4, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 800d12a:	1ca9      	adds	r1, r5, #2
 800d12c:	2002      	movs	r0, #2
 800d12e:	f7fc fa57 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads =
 800d132:	8060      	strh	r0, [r4, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 800d134:	1d29      	adds	r1, r5, #4
 800d136:	2002      	movs	r0, #2
 800d138:	f7fc fa52 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800d13c:	80a0      	strh	r0, [r4, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 800d13e:	1da9      	adds	r1, r5, #6
 800d140:	2002      	movs	r0, #2
 800d142:	f7fc fa4d 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800d146:	80e0      	strh	r0, [r4, #6]

	return status;
 800d148:	2000      	movs	r0, #0
}
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 800d14c:	f06f 0008 	mvn.w	r0, #8
}
 800d150:	4770      	bx	lr

0800d152 <VL53L1_nvm_decode_fmt_range_results_data>:
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{

	VL53L1_Error status   = VL53L1_ERROR_NONE;

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800d152:	280f      	cmp	r0, #15
 800d154:	d92e      	bls.n	800d1b4 <VL53L1_nvm_decode_fmt_range_results_data+0x62>
{
 800d156:	b538      	push	{r3, r4, r5, lr}
 800d158:	460d      	mov	r5, r1
 800d15a:	4614      	mov	r4, r2
		return VL53L1_ERROR_BUFFER_TOO_SMALL;

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 800d15c:	2002      	movs	r0, #2
 800d15e:	f7fc fa3f 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__actual_effective_rtn_spads =
 800d162:	8020      	strh	r0, [r4, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800d164:	78ab      	ldrb	r3, [r5, #2]
 800d166:	70a3      	strb	r3, [r4, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800d168:	78eb      	ldrb	r3, [r5, #3]
 800d16a:	70e3      	strb	r3, [r4, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 800d16c:	1d29      	adds	r1, r5, #4
 800d16e:	2002      	movs	r0, #2
 800d170:	f7fc fa36 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800d174:	80a0      	strh	r0, [r4, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 800d176:	1da9      	adds	r1, r5, #6
 800d178:	2002      	movs	r0, #2
 800d17a:	f7fc fa31 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_rtn_mcps =
 800d17e:	80e0      	strh	r0, [r4, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 800d180:	f105 0108 	add.w	r1, r5, #8
 800d184:	2002      	movs	r0, #2
 800d186:	f7fc fa2b 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_ref_mcps =
 800d18a:	8120      	strh	r0, [r4, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 800d18c:	f105 010a 	add.w	r1, r5, #10
 800d190:	2002      	movs	r0, #2
 800d192:	f7fc fa25 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_ref_mcps =
 800d196:	8160      	strh	r0, [r4, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 800d198:	f105 010c 	add.w	r1, r5, #12
 800d19c:	2002      	movs	r0, #2
 800d19e:	f7fc fa1f 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->measured_distance_mm =
 800d1a2:	81a0      	strh	r0, [r4, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 800d1a4:	f105 010e 	add.w	r1, r5, #14
 800d1a8:	2002      	movs	r0, #2
 800d1aa:	f7fc fa19 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->measured_distance_stdev_mm =
 800d1ae:	81e0      	strh	r0, [r4, #14]

	return status;
 800d1b0:	2000      	movs	r0, #0
}
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 800d1b4:	f06f 0008 	mvn.w	r0, #8
}
 800d1b8:	4770      	bx	lr

0800d1ba <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800d1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	461f      	mov	r7, r3
	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_nvm_enable(
 800d1c4:	2232      	movs	r2, #50	@ 0x32
 800d1c6:	2104      	movs	r1, #4
 800d1c8:	f7ff fecb 	bl	800cf62 <VL53L1_nvm_enable>
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 800d1cc:	b100      	cbz	r0, 800d1d0 <VL53L1_read_nvm_raw_data+0x16>

	LOG_FUNCTION_END(status);

	return status;

}
 800d1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = VL53L1_nvm_read(
 800d1d0:	463b      	mov	r3, r7
 800d1d2:	4632      	mov	r2, r6
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f7ff ff04 	bl	800cfe4 <VL53L1_nvm_read>
	if (status == VL53L1_ERROR_NONE)
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d1f6      	bne.n	800d1ce <VL53L1_read_nvm_raw_data+0x14>
		status = VL53L1_nvm_disable(Dev);
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f7ff ff3f 	bl	800d064 <VL53L1_nvm_disable>
 800d1e6:	e7f2      	b.n	800d1ce <VL53L1_read_nvm_raw_data+0x14>

0800d1e8 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 800d1ee:	ab01      	add	r3, sp, #4
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	212e      	movs	r1, #46	@ 0x2e
 800d1f4:	f7ff ffe1 	bl	800d1ba <VL53L1_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 800d1f8:	b108      	cbz	r0, 800d1fe <VL53L1_read_nvm_optical_centre+0x16>
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
}
 800d1fa:	b002      	add	sp, #8
 800d1fc:	bd10      	pop	{r4, pc}
			VL53L1_nvm_decode_optical_centre(
 800d1fe:	4622      	mov	r2, r4
 800d200:	a901      	add	r1, sp, #4
 800d202:	2004      	movs	r0, #4
 800d204:	f7ff ff4d 	bl	800d0a2 <VL53L1_nvm_decode_optical_centre>
 800d208:	e7f7      	b.n	800d1fa <VL53L1_read_nvm_optical_centre+0x12>

0800d20a <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 800d20a:	b510      	push	{r4, lr}
 800d20c:	b08e      	sub	sp, #56	@ 0x38
 800d20e:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 800d210:	466b      	mov	r3, sp
 800d212:	220e      	movs	r2, #14
 800d214:	2157      	movs	r1, #87	@ 0x57
 800d216:	f7ff ffd0 	bl	800d1ba <VL53L1_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 800d21a:	b108      	cbz	r0, 800d220 <VL53L1_read_nvm_cal_peak_rate_map+0x16>
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
}
 800d21c:	b00e      	add	sp, #56	@ 0x38
 800d21e:	bd10      	pop	{r4, pc}
			VL53L1_nvm_decode_cal_peak_rate_map(
 800d220:	4622      	mov	r2, r4
 800d222:	4669      	mov	r1, sp
 800d224:	2038      	movs	r0, #56	@ 0x38
 800d226:	f7ff ff4d 	bl	800d0c4 <VL53L1_nvm_decode_cal_peak_rate_map>
 800d22a:	e7f7      	b.n	800d21c <VL53L1_read_nvm_cal_peak_rate_map+0x12>

0800d22c <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 800d22c:	b510      	push	{r4, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 800d232:	466b      	mov	r3, sp
 800d234:	2202      	movs	r2, #2
 800d236:	2165      	movs	r1, #101	@ 0x65
 800d238:	f7ff ffbf 	bl	800d1ba <VL53L1_read_nvm_raw_data>
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 800d23c:	b108      	cbz	r0, 800d242 <VL53L1_read_nvm_additional_offset_cal_data+0x16>

	LOG_FUNCTION_END(status);

	return status;

}
 800d23e:	b002      	add	sp, #8
 800d240:	bd10      	pop	{r4, pc}
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 800d242:	4622      	mov	r2, r4
 800d244:	4669      	mov	r1, sp
 800d246:	2008      	movs	r0, #8
 800d248:	f7ff ff66 	bl	800d118 <VL53L1_nvm_decode_additional_offset_cal_data>
 800d24c:	e7f7      	b.n	800d23e <VL53L1_read_nvm_additional_offset_cal_data+0x12>

0800d24e <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 800d24e:	b510      	push	{r4, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 800d254:	466b      	mov	r3, sp
 800d256:	2204      	movs	r2, #4
 800d258:	f3c1 0187 	ubfx	r1, r1, #2, #8
 800d25c:	f7ff ffad 	bl	800d1ba <VL53L1_read_nvm_raw_data>
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 800d260:	b108      	cbz	r0, 800d266 <VL53L1_read_nvm_fmt_range_results_data+0x18>

	LOG_FUNCTION_END(status);

	return status;

}
 800d262:	b004      	add	sp, #16
 800d264:	bd10      	pop	{r4, pc}
			VL53L1_nvm_decode_fmt_range_results_data(
 800d266:	4622      	mov	r2, r4
 800d268:	4669      	mov	r1, sp
 800d26a:	2010      	movs	r0, #16
 800d26c:	f7ff ff71 	bl	800d152 <VL53L1_nvm_decode_fmt_range_results_data>
 800d270:	e7f7      	b.n	800d262 <VL53L1_read_nvm_fmt_range_results_data+0x14>

0800d272 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 800d272:	b570      	push	{r4, r5, r6, lr}
 800d274:	4604      	mov	r4, r0
 800d276:	460e      	mov	r6, r1
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 800d278:	6943      	ldr	r3, [r0, #20]
 800d27a:	4798      	blx	r3
 800d27c:	4605      	mov	r5, r0

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 800d27e:	6963      	ldr	r3, [r4, #20]
 800d280:	4798      	blx	r3
 800d282:	1b40      	subs	r0, r0, r5
 800d284:	42b0      	cmp	r0, r6
 800d286:	d3fa      	bcc.n	800d27e <VL53L1_Delay+0xc>
  {
  }

  return VL53L1_ERROR_NONE;
}
 800d288:	2000      	movs	r0, #0
 800d28a:	bd70      	pop	{r4, r5, r6, pc}

0800d28c <_I2CWrite>:
int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d28c:	b508      	push	{r3, lr}
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 800d28e:	68c3      	ldr	r3, [r0, #12]
 800d290:	b292      	uxth	r2, r2
 800d292:	8900      	ldrh	r0, [r0, #8]
 800d294:	4798      	blx	r3
}
 800d296:	bd08      	pop	{r3, pc}

0800d298 <_I2CRead>:
int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d298:	b508      	push	{r3, lr}
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 800d29a:	6903      	ldr	r3, [r0, #16]
 800d29c:	b292      	uxth	r2, r2
 800d29e:	8900      	ldrh	r0, [r0, #8]
 800d2a0:	4798      	blx	r3
}
 800d2a2:	bd08      	pop	{r3, pc}

0800d2a4 <VL53L1_WriteMulti>:
    if (count > sizeof(_I2CBuffer) - 1) {
 800d2a4:	2bff      	cmp	r3, #255	@ 0xff
 800d2a6:	d815      	bhi.n	800d2d4 <VL53L1_WriteMulti+0x30>
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	468c      	mov	ip, r1
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	461c      	mov	r4, r3
    _I2CBuffer[0] = index>>8;
 800d2b2:	4d0b      	ldr	r5, [pc, #44]	@ (800d2e0 <VL53L1_WriteMulti+0x3c>)
 800d2b4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 800d2b8:	702b      	strb	r3, [r5, #0]
    _I2CBuffer[1] = index&0xFF;
 800d2ba:	f885 c001 	strb.w	ip, [r5, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800d2be:	4622      	mov	r2, r4
 800d2c0:	1ca8      	adds	r0, r5, #2
 800d2c2:	f001 fbf9 	bl	800eab8 <memcpy>
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800d2c6:	1ca2      	adds	r2, r4, #2
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f7ff ffde 	bl	800d28c <_I2CWrite>
    if (status_int != 0) {
 800d2d0:	b918      	cbnz	r0, 800d2da <VL53L1_WriteMulti+0x36>
}
 800d2d2:	bd70      	pop	{r4, r5, r6, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 800d2d4:	f06f 0003 	mvn.w	r0, #3
}
 800d2d8:	4770      	bx	lr
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d2da:	f06f 000c 	mvn.w	r0, #12
 800d2de:	e7f8      	b.n	800d2d2 <VL53L1_WriteMulti+0x2e>
 800d2e0:	200152f8 	.word	0x200152f8

0800d2e4 <VL53L1_ReadMulti>:
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	468c      	mov	ip, r1
 800d2ea:	4615      	mov	r5, r2
 800d2ec:	461e      	mov	r6, r3
    _I2CBuffer[0] = index>>8;
 800d2ee:	490b      	ldr	r1, [pc, #44]	@ (800d31c <VL53L1_ReadMulti+0x38>)
 800d2f0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 800d2f4:	700b      	strb	r3, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 800d2f6:	f881 c001 	strb.w	ip, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f7ff ffc6 	bl	800d28c <_I2CWrite>
    if (status_int != 0) {
 800d300:	b930      	cbnz	r0, 800d310 <VL53L1_ReadMulti+0x2c>
    status_int = _I2CRead(Dev, pdata, count);
 800d302:	4632      	mov	r2, r6
 800d304:	4629      	mov	r1, r5
 800d306:	4620      	mov	r0, r4
 800d308:	f7ff ffc6 	bl	800d298 <_I2CRead>
    if (status_int != 0) {
 800d30c:	b918      	cbnz	r0, 800d316 <VL53L1_ReadMulti+0x32>
}
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d310:	f06f 000c 	mvn.w	r0, #12
 800d314:	e7fb      	b.n	800d30e <VL53L1_ReadMulti+0x2a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d316:	f06f 000c 	mvn.w	r0, #12
 800d31a:	e7f8      	b.n	800d30e <VL53L1_ReadMulti+0x2a>
 800d31c:	200152f8 	.word	0x200152f8

0800d320 <VL53L1_WrByte>:
VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800d320:	b508      	push	{r3, lr}
 800d322:	460b      	mov	r3, r1
    _I2CBuffer[0] = index>>8;
 800d324:	4907      	ldr	r1, [pc, #28]	@ (800d344 <VL53L1_WrByte+0x24>)
 800d326:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800d32a:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 800d32e:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data;
 800d330:	708a      	strb	r2, [r1, #2]
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d332:	2203      	movs	r2, #3
 800d334:	f7ff ffaa 	bl	800d28c <_I2CWrite>
    if (status_int != 0) {
 800d338:	b900      	cbnz	r0, 800d33c <VL53L1_WrByte+0x1c>
}
 800d33a:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d33c:	f06f 000c 	mvn.w	r0, #12
 800d340:	e7fb      	b.n	800d33a <VL53L1_WrByte+0x1a>
 800d342:	bf00      	nop
 800d344:	200152f8 	.word	0x200152f8

0800d348 <VL53L1_WrWord>:
VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 800d348:	b508      	push	{r3, lr}
 800d34a:	460b      	mov	r3, r1
    _I2CBuffer[0] = index>>8;
 800d34c:	4908      	ldr	r1, [pc, #32]	@ (800d370 <VL53L1_WrWord+0x28>)
 800d34e:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800d352:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 800d356:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data >> 8;
 800d358:	0a13      	lsrs	r3, r2, #8
 800d35a:	708b      	strb	r3, [r1, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800d35c:	70ca      	strb	r2, [r1, #3]
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800d35e:	2204      	movs	r2, #4
 800d360:	f7ff ff94 	bl	800d28c <_I2CWrite>
    if (status_int != 0) {
 800d364:	b900      	cbnz	r0, 800d368 <VL53L1_WrWord+0x20>
}
 800d366:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d368:	f06f 000c 	mvn.w	r0, #12
 800d36c:	e7fb      	b.n	800d366 <VL53L1_WrWord+0x1e>
 800d36e:	bf00      	nop
 800d370:	200152f8 	.word	0x200152f8

0800d374 <VL53L1_RdByte>:
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4604      	mov	r4, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4615      	mov	r5, r2
	_I2CBuffer[0] = index>>8;
 800d37c:	490a      	ldr	r1, [pc, #40]	@ (800d3a8 <VL53L1_RdByte+0x34>)
 800d37e:	0a1a      	lsrs	r2, r3, #8
 800d380:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
 800d382:	704b      	strb	r3, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d384:	2202      	movs	r2, #2
 800d386:	f7ff ff81 	bl	800d28c <_I2CWrite>
    if( status_int ){
 800d38a:	b930      	cbnz	r0, 800d39a <VL53L1_RdByte+0x26>
    status_int = _I2CRead(Dev, data, 1);
 800d38c:	2201      	movs	r2, #1
 800d38e:	4629      	mov	r1, r5
 800d390:	4620      	mov	r0, r4
 800d392:	f7ff ff81 	bl	800d298 <_I2CRead>
    if (status_int != 0) {
 800d396:	b918      	cbnz	r0, 800d3a0 <VL53L1_RdByte+0x2c>
}
 800d398:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d39a:	f06f 000c 	mvn.w	r0, #12
 800d39e:	e7fb      	b.n	800d398 <VL53L1_RdByte+0x24>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d3a0:	f06f 000c 	mvn.w	r0, #12
 800d3a4:	e7f8      	b.n	800d398 <VL53L1_RdByte+0x24>
 800d3a6:	bf00      	nop
 800d3a8:	200152f8 	.word	0x200152f8

0800d3ac <VL53L1_RdWord>:
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4615      	mov	r5, r2
    _I2CBuffer[0] = index>>8;
 800d3b4:	490d      	ldr	r1, [pc, #52]	@ (800d3ec <VL53L1_RdWord+0x40>)
 800d3b6:	0a1a      	lsrs	r2, r3, #8
 800d3b8:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
 800d3ba:	704b      	strb	r3, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d3bc:	2202      	movs	r2, #2
 800d3be:	f7ff ff65 	bl	800d28c <_I2CWrite>
    if( status_int ){
 800d3c2:	b960      	cbnz	r0, 800d3de <VL53L1_RdWord+0x32>
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	4909      	ldr	r1, [pc, #36]	@ (800d3ec <VL53L1_RdWord+0x40>)
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7ff ff65 	bl	800d298 <_I2CRead>
    if (status_int != 0) {
 800d3ce:	b948      	cbnz	r0, 800d3e4 <VL53L1_RdWord+0x38>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800d3d0:	4b06      	ldr	r3, [pc, #24]	@ (800d3ec <VL53L1_RdWord+0x40>)
 800d3d2:	781a      	ldrb	r2, [r3, #0]
 800d3d4:	785b      	ldrb	r3, [r3, #1]
 800d3d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d3da:	802b      	strh	r3, [r5, #0]
}
 800d3dc:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d3de:	f06f 000c 	mvn.w	r0, #12
 800d3e2:	e7fb      	b.n	800d3dc <VL53L1_RdWord+0x30>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d3e4:	f06f 000c 	mvn.w	r0, #12
 800d3e8:	e7f8      	b.n	800d3dc <VL53L1_RdWord+0x30>
 800d3ea:	bf00      	nop
 800d3ec:	200152f8 	.word	0x200152f8

0800d3f0 <VL53L1_GetTickCount>:
{
 800d3f0:	b510      	push	{r4, lr}
 800d3f2:	460c      	mov	r4, r1
	*ptick_count_ms = Dev->IO.GetTick();
 800d3f4:	6943      	ldr	r3, [r0, #20]
 800d3f6:	4798      	blx	r3
 800d3f8:	6020      	str	r0, [r4, #0]
}
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	bd10      	pop	{r4, pc}

0800d3fe <VL53L1_WaitMs>:
VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 800d3fe:	b508      	push	{r3, lr}
	VL53L1_Delay(Dev, wait_ms);
 800d400:	f7ff ff37 	bl	800d272 <VL53L1_Delay>
}
 800d404:	2000      	movs	r0, #0
 800d406:	bd08      	pop	{r3, pc}

0800d408 <VL53L1_WaitUs>:
VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 800d408:	b508      	push	{r3, lr}
	VL53L1_Delay(Dev, wait_us/1000);
 800d40a:	4b05      	ldr	r3, [pc, #20]	@ (800d420 <VL53L1_WaitUs+0x18>)
 800d40c:	fb83 2301 	smull	r2, r3, r3, r1
 800d410:	17c9      	asrs	r1, r1, #31
 800d412:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 800d416:	f7ff ff2c 	bl	800d272 <VL53L1_Delay>
}
 800d41a:	2000      	movs	r0, #0
 800d41c:	bd08      	pop	{r3, pc}
 800d41e:	bf00      	nop
 800d420:	10624dd3 	.word	0x10624dd3

0800d424 <VL53L1_WaitValueMaskEx>:
{
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800d42c:	4605      	mov	r5, r0
 800d42e:	460f      	mov	r7, r1
 800d430:	4691      	mov	r9, r2
 800d432:	4698      	mov	r8, r3
 800d434:	f89d a238 	ldrb.w	sl, [sp, #568]	@ 0x238
 800d438:	f8dd b23c 	ldr.w	fp, [sp, #572]	@ 0x23c
	uint32_t     start_time_ms = 0;
 800d43c:	2400      	movs	r4, #0
 800d43e:	9483      	str	r4, [sp, #524]	@ 0x20c
	uint32_t     current_time_ms = 0;
 800d440:	9482      	str	r4, [sp, #520]	@ 0x208
	uint8_t      byte_value      = 0;
 800d442:	f88d 4207 	strb.w	r4, [sp, #519]	@ 0x207
	VL53L1_COPYSTRING(register_name, "");
 800d446:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d44a:	491e      	ldr	r1, [pc, #120]	@ (800d4c4 <VL53L1_WaitValueMaskEx+0xa0>)
 800d44c:	a801      	add	r0, sp, #4
 800d44e:	f001 fafc 	bl	800ea4a <strncpy>
	 VL53L1_GetTickCount(Dev, &start_time_ms);
 800d452:	a983      	add	r1, sp, #524	@ 0x20c
 800d454:	4628      	mov	r0, r5
 800d456:	f7ff ffcb 	bl	800d3f0 <VL53L1_GetTickCount>
	uint8_t      found           = 0;
 800d45a:	4626      	mov	r6, r4
	uint32_t     polling_time_ms = 0;
 800d45c:	4623      	mov	r3, r4
	while ((status == VL53L1_ERROR_NONE) &&
 800d45e:	e008      	b.n	800d472 <VL53L1_WaitValueMaskEx+0x4e>
			found = 1;
 800d460:	2601      	movs	r6, #1
 800d462:	e017      	b.n	800d494 <VL53L1_WaitValueMaskEx+0x70>
		VL53L1_GetTickCount(Dev, &current_time_ms);
 800d464:	a982      	add	r1, sp, #520	@ 0x208
 800d466:	4628      	mov	r0, r5
 800d468:	f7ff ffc2 	bl	800d3f0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800d46c:	9b82      	ldr	r3, [sp, #520]	@ 0x208
 800d46e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 800d470:	1a9b      	subs	r3, r3, r2
		   (polling_time_ms < timeout_ms) &&
 800d472:	b9e4      	cbnz	r4, 800d4ae <VL53L1_WaitValueMaskEx+0x8a>
	while ((status == VL53L1_ERROR_NONE) &&
 800d474:	42bb      	cmp	r3, r7
 800d476:	d21a      	bcs.n	800d4ae <VL53L1_WaitValueMaskEx+0x8a>
		   (polling_time_ms < timeout_ms) &&
 800d478:	b9ce      	cbnz	r6, 800d4ae <VL53L1_WaitValueMaskEx+0x8a>
			status = VL53L1_RdByte(
 800d47a:	f20d 2207 	addw	r2, sp, #519	@ 0x207
 800d47e:	4649      	mov	r1, r9
 800d480:	4628      	mov	r0, r5
 800d482:	f7ff ff77 	bl	800d374 <VL53L1_RdByte>
 800d486:	4604      	mov	r4, r0
		if ((byte_value & mask) == value)
 800d488:	f89d 3207 	ldrb.w	r3, [sp, #519]	@ 0x207
 800d48c:	ea0a 0303 	and.w	r3, sl, r3
 800d490:	4543      	cmp	r3, r8
 800d492:	d0e5      	beq.n	800d460 <VL53L1_WaitValueMaskEx+0x3c>
		if (status == VL53L1_ERROR_NONE  &&
 800d494:	2c00      	cmp	r4, #0
 800d496:	d1e5      	bne.n	800d464 <VL53L1_WaitValueMaskEx+0x40>
 800d498:	2e00      	cmp	r6, #0
 800d49a:	d1e3      	bne.n	800d464 <VL53L1_WaitValueMaskEx+0x40>
			found == 0 &&
 800d49c:	f1bb 0f00 	cmp.w	fp, #0
 800d4a0:	d0e0      	beq.n	800d464 <VL53L1_WaitValueMaskEx+0x40>
			status = VL53L1_WaitMs(
 800d4a2:	4659      	mov	r1, fp
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	f7ff ffaa 	bl	800d3fe <VL53L1_WaitMs>
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	e7da      	b.n	800d464 <VL53L1_WaitValueMaskEx+0x40>
	if (found == 0 && status == VL53L1_ERROR_NONE)
 800d4ae:	b906      	cbnz	r6, 800d4b2 <VL53L1_WaitValueMaskEx+0x8e>
 800d4b0:	b124      	cbz	r4, 800d4bc <VL53L1_WaitValueMaskEx+0x98>
}
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 800d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_TIME_OUT;
 800d4bc:	f06f 0406 	mvn.w	r4, #6
 800d4c0:	e7f7      	b.n	800d4b2 <VL53L1_WaitValueMaskEx+0x8e>
 800d4c2:	bf00      	nop
 800d4c4:	0800ee1c 	.word	0x0800ee1c

0800d4c8 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 800d4c8:	b500      	push	{lr}
 800d4ca:	b087      	sub	sp, #28
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	461a      	mov	r2, r3
	VL53L1_Error status         = VL53L1_ERROR_NONE;

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 800d4d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4d4:	9304      	str	r3, [sp, #16]
 800d4d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4d8:	9303      	str	r3, [sp, #12]
 800d4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4dc:	9302      	str	r3, [sp, #8]
 800d4de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4e0:	9301      	str	r3, [sp, #4]
 800d4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	9b08      	ldr	r3, [sp, #32]
 800d4e8:	f7ff fc55 	bl	800cd96 <VL53L1_hist_process_data>
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
}
 800d4ec:	b007      	add	sp, #28
 800d4ee:	f85d fb04 	ldr.w	pc, [sp], #4

0800d4f2 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800d4f2:	290a      	cmp	r1, #10
 800d4f4:	d927      	bls.n	800d546 <VL53L1_i2c_encode_static_nvm_managed+0x54>
{
 800d4f6:	b538      	push	{r3, r4, r5, lr}
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800d4fc:	7803      	ldrb	r3, [r0, #0]
 800d4fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   0) =
 800d502:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800d504:	7843      	ldrb	r3, [r0, #1]
 800d506:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800d50a:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800d50c:	7883      	ldrb	r3, [r0, #2]
 800d50e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   2) =
 800d512:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800d514:	78c3      	ldrb	r3, [r0, #3]
 800d516:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800d51a:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800d51c:	7903      	ldrb	r3, [r0, #4]
 800d51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   4) =
 800d522:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 800d524:	3205      	adds	r2, #5
 800d526:	2102      	movs	r1, #2
 800d528:	88c0      	ldrh	r0, [r0, #6]
 800d52a:	f7fc f84b 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800d52e:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 800d530:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 800d532:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 800d534:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800d536:	7aab      	ldrb	r3, [r5, #10]
 800d538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	*(pbuffer +   9) =
 800d53c:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 800d53e:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 800d540:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800d542:	2000      	movs	r0, #0
}
 800d544:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d546:	f06f 0009 	mvn.w	r0, #9
}
 800d54a:	4770      	bx	lr

0800d54c <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800d54c:	280a      	cmp	r0, #10
 800d54e:	d927      	bls.n	800d5a0 <VL53L1_i2c_decode_static_nvm_managed+0x54>
{
 800d550:	b538      	push	{r3, r4, r5, lr}
 800d552:	460d      	mov	r5, r1
 800d554:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800d556:	780b      	ldrb	r3, [r1, #0]
 800d558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->i2c_slave__device_address =
 800d55c:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800d55e:	784b      	ldrb	r3, [r1, #1]
 800d560:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 800d564:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800d566:	788b      	ldrb	r3, [r1, #2]
 800d568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 800d56c:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800d56e:	78cb      	ldrb	r3, [r1, #3]
 800d570:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 800d574:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800d576:	790b      	ldrb	r3, [r1, #4]
 800d578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->ana_config__fast_osc__trim =
 800d57c:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800d57e:	3105      	adds	r1, #5
 800d580:	2002      	movs	r0, #2
 800d582:	f7fc f82d 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 800d586:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800d588:	79eb      	ldrb	r3, [r5, #7]
 800d58a:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800d58c:	7a2b      	ldrb	r3, [r5, #8]
 800d58e:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800d590:	7a6b      	ldrb	r3, [r5, #9]
 800d592:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->vhv_config__offset =
 800d596:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 800d598:	7aab      	ldrb	r3, [r5, #10]
 800d59a:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800d59c:	2000      	movs	r0, #0
}
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d5a0:	f06f 0009 	mvn.w	r0, #9
}
 800d5a4:	4770      	bx	lr

0800d5a6 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800d5a6:	b510      	push	{r4, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_ReadMulti(
 800d5ac:	230b      	movs	r3, #11
 800d5ae:	aa01      	add	r2, sp, #4
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	f7ff fe97 	bl	800d2e4 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d5b6:	b108      	cbz	r0, 800d5bc <VL53L1_get_static_nvm_managed+0x16>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800d5b8:	b004      	add	sp, #16
 800d5ba:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_static_nvm_managed(
 800d5bc:	4622      	mov	r2, r4
 800d5be:	a901      	add	r1, sp, #4
 800d5c0:	200b      	movs	r0, #11
 800d5c2:	f7ff ffc3 	bl	800d54c <VL53L1_i2c_decode_static_nvm_managed>
 800d5c6:	e7f7      	b.n	800d5b8 <VL53L1_get_static_nvm_managed+0x12>

0800d5c8 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800d5c8:	2916      	cmp	r1, #22
 800d5ca:	d94c      	bls.n	800d666 <VL53L1_i2c_encode_customer_nvm_managed+0x9e>
{
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	4615      	mov	r5, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800d5d2:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800d5d4:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 800d5d6:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800d5d8:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 800d5da:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800d5dc:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800d5de:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800d5e0:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 800d5e2:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800d5e4:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800d5e6:	7943      	ldrb	r3, [r0, #5]
 800d5e8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 800d5ec:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800d5ee:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 800d5f0:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800d5f2:	79c3      	ldrb	r3, [r0, #7]
 800d5f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	*(pbuffer +   7) =
 800d5f8:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800d5fa:	7a03      	ldrb	r3, [r0, #8]
 800d5fc:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 800d600:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 800d602:	3209      	adds	r2, #9
 800d604:	2102      	movs	r1, #2
 800d606:	8940      	ldrh	r0, [r0, #10]
 800d608:	f7fb ffdc 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800d60c:	f105 020b 	add.w	r2, r5, #11
 800d610:	2102      	movs	r1, #2
 800d612:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800d616:	f7fb fff1 	bl	80095fc <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800d61a:	f105 020d 	add.w	r2, r5, #13
 800d61e:	2102      	movs	r1, #2
 800d620:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800d624:	f7fb ffea 	bl	80095fc <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800d628:	f105 020f 	add.w	r2, r5, #15
 800d62c:	2102      	movs	r1, #2
 800d62e:	8a20      	ldrh	r0, [r4, #16]
 800d630:	f7fb ffc8 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800d634:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
	VL53L1_i2c_encode_int16_t(
 800d638:	f105 0211 	add.w	r2, r5, #17
 800d63c:	2102      	movs	r1, #2
 800d63e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d642:	f7fb ffdb 	bl	80095fc <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800d646:	f105 0213 	add.w	r2, r5, #19
 800d64a:	2102      	movs	r1, #2
 800d64c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800d650:	f7fb ffd4 	bl	80095fc <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800d654:	f105 0215 	add.w	r2, r5, #21
 800d658:	2102      	movs	r1, #2
 800d65a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800d65e:	f7fb ffcd 	bl	80095fc <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800d662:	2000      	movs	r0, #0
}
 800d664:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d666:	f06f 0009 	mvn.w	r0, #9
}
 800d66a:	4770      	bx	lr

0800d66c <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800d66c:	2816      	cmp	r0, #22
 800d66e:	d947      	bls.n	800d700 <VL53L1_i2c_decode_customer_nvm_managed+0x94>
{
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	460d      	mov	r5, r1
 800d674:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800d676:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 800d678:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 800d67a:	784b      	ldrb	r3, [r1, #1]
 800d67c:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800d67e:	788b      	ldrb	r3, [r1, #2]
 800d680:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800d682:	78cb      	ldrb	r3, [r1, #3]
 800d684:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800d686:	790b      	ldrb	r3, [r1, #4]
 800d688:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800d68a:	794b      	ldrb	r3, [r1, #5]
 800d68c:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 800d690:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 800d692:	798b      	ldrb	r3, [r1, #6]
 800d694:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800d696:	79cb      	ldrb	r3, [r1, #7]
 800d698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 800d69c:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800d69e:	7a0b      	ldrb	r3, [r1, #8]
 800d6a0:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 800d6a4:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800d6a6:	3109      	adds	r1, #9
 800d6a8:	2002      	movs	r0, #2
 800d6aa:	f7fb ff99 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800d6ae:	8160      	strh	r0, [r4, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800d6b0:	f105 010b 	add.w	r1, r5, #11
 800d6b4:	2002      	movs	r0, #2
 800d6b6:	f7fb ffaf 	bl	8009618 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d6ba:	81a0      	strh	r0, [r4, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800d6bc:	f105 010d 	add.w	r1, r5, #13
 800d6c0:	2002      	movs	r0, #2
 800d6c2:	f7fb ffa9 	bl	8009618 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d6c6:	81e0      	strh	r0, [r4, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800d6c8:	f105 010f 	add.w	r1, r5, #15
 800d6cc:	2002      	movs	r0, #2
 800d6ce:	f7fb ff87 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
 800d6d2:	8220      	strh	r0, [r4, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800d6d4:	f105 0111 	add.w	r1, r5, #17
 800d6d8:	2002      	movs	r0, #2
 800d6da:	f7fb ff9d 	bl	8009618 <VL53L1_i2c_decode_int16_t>
 800d6de:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800d6e2:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800d6e4:	f105 0113 	add.w	r1, r5, #19
 800d6e8:	2002      	movs	r0, #2
 800d6ea:	f7fb ff95 	bl	8009618 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__inner_offset_mm =
 800d6ee:	82a0      	strh	r0, [r4, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800d6f0:	f105 0115 	add.w	r1, r5, #21
 800d6f4:	2002      	movs	r0, #2
 800d6f6:	f7fb ff8f 	bl	8009618 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 800d6fa:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 800d6fc:	2000      	movs	r0, #0
}
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d700:	f06f 0009 	mvn.w	r0, #9
}
 800d704:	4770      	bx	lr

0800d706 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d706:	b530      	push	{r4, r5, lr}
 800d708:	b087      	sub	sp, #28
 800d70a:	460c      	mov	r4, r1
	int16_t offset;

	LOG_FUNCTION_START("");

	pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
	module_type = pLLData->nvm_copy_data.identification__module_type;
 800d70c:	f890 53f3 	ldrb.w	r5, [r0, #1011]	@ 0x3f3

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_ReadMulti(
 800d710:	2317      	movs	r3, #23
 800d712:	466a      	mov	r2, sp
 800d714:	210d      	movs	r1, #13
 800d716:	f7ff fde5 	bl	800d2e4 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d71a:	b108      	cbz	r0, 800d720 <VL53L1_get_customer_nvm_managed+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800d71c:	b007      	add	sp, #28
 800d71e:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800d720:	4622      	mov	r2, r4
 800d722:	4669      	mov	r1, sp
 800d724:	2017      	movs	r0, #23
 800d726:	f7ff ffa1 	bl	800d66c <VL53L1_i2c_decode_customer_nvm_managed>
	if ((status == VL53L1_ERROR_NONE) && (module_type == 0xAA)) {
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d1f6      	bne.n	800d71c <VL53L1_get_customer_nvm_managed+0x16>
 800d72e:	2daa      	cmp	r5, #170	@ 0xaa
 800d730:	d1f4      	bne.n	800d71c <VL53L1_get_customer_nvm_managed+0x16>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800d732:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
		offset = offset / 4;
 800d736:	4613      	mov	r3, r2
 800d738:	2a00      	cmp	r2, #0
 800d73a:	db0a      	blt.n	800d752 <VL53L1_get_customer_nvm_managed+0x4c>
 800d73c:	109b      	asrs	r3, r3, #2
		if (offset >= 1024)
 800d73e:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800d742:	db01      	blt.n	800d748 <VL53L1_get_customer_nvm_managed+0x42>
			offset -= 2048;
 800d744:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
		pdata->algo__part_to_part_range_offset_mm = 0;
 800d748:	2200      	movs	r2, #0
 800d74a:	8262      	strh	r2, [r4, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800d74c:	82a3      	strh	r3, [r4, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800d74e:	82e3      	strh	r3, [r4, #22]
 800d750:	e7e4      	b.n	800d71c <VL53L1_get_customer_nvm_managed+0x16>
		offset = offset / 4;
 800d752:	1cd3      	adds	r3, r2, #3
 800d754:	e7f2      	b.n	800d73c <VL53L1_get_customer_nvm_managed+0x36>

0800d756 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 800d756:	291f      	cmp	r1, #31
 800d758:	d968      	bls.n	800d82c <VL53L1_i2c_encode_static_config+0xd6>
{
 800d75a:	b538      	push	{r3, r4, r5, lr}
 800d75c:	4605      	mov	r5, r0
 800d75e:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800d760:	2102      	movs	r1, #2
 800d762:	8800      	ldrh	r0, [r0, #0]
 800d764:	f7fb ff2e 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800d768:	78ab      	ldrb	r3, [r5, #2]
 800d76a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800d76e:	70a3      	strb	r3, [r4, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800d770:	78eb      	ldrb	r3, [r5, #3]
 800d772:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 800d776:	70e3      	strb	r3, [r4, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800d778:	792b      	ldrb	r3, [r5, #4]
 800d77a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800d77e:	7123      	strb	r3, [r4, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800d780:	796b      	ldrb	r3, [r5, #5]
 800d782:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 800d786:	7163      	strb	r3, [r4, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d788:	79ab      	ldrb	r3, [r5, #6]
 800d78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   6) =
 800d78e:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800d790:	79eb      	ldrb	r3, [r5, #7]
 800d792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   7) =
 800d796:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800d798:	7a2b      	ldrb	r3, [r5, #8]
 800d79a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 800d79e:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 800d7a0:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   9) =
 800d7a2:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d7a4:	7aab      	ldrb	r3, [r5, #10]
 800d7a6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 800d7aa:	72a3      	strb	r3, [r4, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d7ac:	7aeb      	ldrb	r3, [r5, #11]
 800d7ae:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800d7b2:	72e3      	strb	r3, [r4, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d7b4:	7b2b      	ldrb	r3, [r5, #12]
 800d7b6:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 800d7ba:	7323      	strb	r3, [r4, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800d7bc:	7b6b      	ldrb	r3, [r5, #13]
 800d7be:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 800d7c2:	7363      	strb	r3, [r4, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800d7c4:	7bab      	ldrb	r3, [r5, #14]
 800d7c6:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 800d7ca:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d7cc:	7beb      	ldrb	r3, [r5, #15]
 800d7ce:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 800d7d2:	73e3      	strb	r3, [r4, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d7d4:	7c2b      	ldrb	r3, [r5, #16]
 800d7d6:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 800d7da:	7423      	strb	r3, [r4, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d7dc:	7c6b      	ldrb	r3, [r5, #17]
 800d7de:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 800d7e2:	7463      	strb	r3, [r4, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800d7e4:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800d7e6:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 800d7e8:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800d7ea:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 800d7ec:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800d7ee:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800d7f0:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800d7f2:	7563      	strb	r3, [r4, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 800d7f4:	7dab      	ldrb	r3, [r5, #22]
	*(pbuffer +  22) =
 800d7f6:	75a3      	strb	r3, [r4, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 800d7f8:	7deb      	ldrb	r3, [r5, #23]
	*(pbuffer +  23) =
 800d7fa:	75e3      	strb	r3, [r4, #23]
	VL53L1_i2c_encode_uint16_t(
 800d7fc:	f104 0218 	add.w	r2, r4, #24
 800d800:	2102      	movs	r1, #2
 800d802:	8b28      	ldrh	r0, [r5, #24]
 800d804:	f7fb fede 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 800d808:	7eab      	ldrb	r3, [r5, #26]
	*(pbuffer +  26) =
 800d80a:	76a3      	strb	r3, [r4, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 800d80c:	7eeb      	ldrb	r3, [r5, #27]
	*(pbuffer +  27) =
 800d80e:	76e3      	strb	r3, [r4, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800d810:	7f2b      	ldrb	r3, [r5, #28]
 800d812:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 800d816:	7723      	strb	r3, [r4, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 800d818:	7f6b      	ldrb	r3, [r5, #29]
	*(pbuffer +  29) =
 800d81a:	7763      	strb	r3, [r4, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800d81c:	7fab      	ldrb	r3, [r5, #30]
 800d81e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 800d822:	77a3      	strb	r3, [r4, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 800d824:	7feb      	ldrb	r3, [r5, #31]
	*(pbuffer +  31) =
 800d826:	77e3      	strb	r3, [r4, #31]
	LOG_FUNCTION_END(status);


	return status;
 800d828:	2000      	movs	r0, #0
}
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d82c:	f06f 0009 	mvn.w	r0, #9
}
 800d830:	4770      	bx	lr

0800d832 <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800d832:	2915      	cmp	r1, #21
 800d834:	d93f      	bls.n	800d8b6 <VL53L1_i2c_encode_general_config+0x84>
{
 800d836:	b538      	push	{r3, r4, r5, lr}
 800d838:	4605      	mov	r5, r0
 800d83a:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800d83c:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800d83e:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800d840:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800d842:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 800d844:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800d846:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800d848:	78c3      	ldrb	r3, [r0, #3]
 800d84a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   3) =
 800d84e:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800d850:	8880      	ldrh	r0, [r0, #4]
	VL53L1_i2c_encode_uint16_t(
 800d852:	3204      	adds	r2, #4
 800d854:	2102      	movs	r1, #2
 800d856:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d85a:	f7fb feb3 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800d85e:	79ab      	ldrb	r3, [r5, #6]
 800d860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   6) =
 800d864:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 800d866:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 800d868:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 800d86a:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 800d86c:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800d86e:	7a6b      	ldrb	r3, [r5, #9]
 800d870:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 800d874:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800d876:	7aab      	ldrb	r3, [r5, #10]
 800d878:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 800d87c:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 800d87e:	f104 020c 	add.w	r2, r4, #12
 800d882:	2102      	movs	r1, #2
 800d884:	89a8      	ldrh	r0, [r5, #12]
 800d886:	f7fb fe9d 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800d88a:	f104 020e 	add.w	r2, r4, #14
 800d88e:	2102      	movs	r1, #2
 800d890:	89e8      	ldrh	r0, [r5, #14]
 800d892:	f7fb fe97 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800d896:	f104 0210 	add.w	r2, r4, #16
 800d89a:	2102      	movs	r1, #2
 800d89c:	8a28      	ldrh	r0, [r5, #16]
 800d89e:	f7fb fe91 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 800d8a2:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800d8a4:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 800d8a6:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800d8a8:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 800d8aa:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800d8ac:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 800d8ae:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800d8b0:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800d8b2:	2000      	movs	r0, #0
}
 800d8b4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d8b6:	f06f 0009 	mvn.w	r0, #9
}
 800d8ba:	4770      	bx	lr

0800d8bc <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 800d8bc:	2916      	cmp	r1, #22
 800d8be:	d93d      	bls.n	800d93c <VL53L1_i2c_encode_timing_config+0x80>
{
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800d8c6:	7803      	ldrb	r3, [r0, #0]
 800d8c8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 800d8cc:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 800d8ce:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800d8d0:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d8d2:	7883      	ldrb	r3, [r0, #2]
 800d8d4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 800d8d8:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 800d8da:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800d8dc:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d8de:	7903      	ldrb	r3, [r0, #4]
 800d8e0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800d8e4:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 800d8e6:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 800d8e8:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800d8ea:	7983      	ldrb	r3, [r0, #6]
 800d8ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	*(pbuffer +   6) =
 800d8f0:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d8f2:	79c3      	ldrb	r3, [r0, #7]
 800d8f4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 800d8f8:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 800d8fa:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 800d8fc:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800d8fe:	7a43      	ldrb	r3, [r0, #9]
 800d900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	*(pbuffer +   9) =
 800d904:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 800d906:	320a      	adds	r2, #10
 800d908:	2102      	movs	r1, #2
 800d90a:	8940      	ldrh	r0, [r0, #10]
 800d90c:	f7fb fe5a 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800d910:	f104 020c 	add.w	r2, r4, #12
 800d914:	2102      	movs	r1, #2
 800d916:	89a8      	ldrh	r0, [r5, #12]
 800d918:	f7fb fe54 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 800d91c:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 800d91e:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 800d920:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 800d922:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800d924:	f104 0212 	add.w	r2, r4, #18
 800d928:	2104      	movs	r1, #4
 800d92a:	6928      	ldr	r0, [r5, #16]
 800d92c:	f7fb fe89 	bl	8009642 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800d930:	7d2b      	ldrb	r3, [r5, #20]
 800d932:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 800d936:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 800d938:	2000      	movs	r0, #0
}
 800d93a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d93c:	f06f 0009 	mvn.w	r0, #9
}
 800d940:	4770      	bx	lr

0800d942 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800d942:	2911      	cmp	r1, #17
 800d944:	d93c      	bls.n	800d9c0 <VL53L1_i2c_encode_dynamic_config+0x7e>
{
 800d946:	b538      	push	{r3, r4, r5, lr}
 800d948:	4604      	mov	r4, r0
 800d94a:	4615      	mov	r5, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800d94c:	7803      	ldrb	r3, [r0, #0]
 800d94e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 800d952:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 800d956:	2102      	movs	r1, #2
 800d958:	8840      	ldrh	r0, [r0, #2]
 800d95a:	f7fb fe33 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800d95e:	1cea      	adds	r2, r5, #3
 800d960:	2102      	movs	r1, #2
 800d962:	88a0      	ldrh	r0, [r4, #4]
 800d964:	f7fb fe2e 	bl	80095c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d968:	79a3      	ldrb	r3, [r4, #6]
 800d96a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 800d96e:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800d970:	79e3      	ldrb	r3, [r4, #7]
 800d972:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 800d976:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 800d978:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 800d97a:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 800d97c:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 800d97e:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d980:	7aa3      	ldrb	r3, [r4, #10]
 800d982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +   9) =
 800d986:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d988:	7ae3      	ldrb	r3, [r4, #11]
 800d98a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	*(pbuffer +  10) =
 800d98e:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d990:	7b23      	ldrb	r3, [r4, #12]
 800d992:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800d996:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800d998:	7b63      	ldrb	r3, [r4, #13]
 800d99a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 800d99e:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800d9a0:	7ba3      	ldrb	r3, [r4, #14]
 800d9a2:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 800d9a6:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 800d9a8:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 800d9aa:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 800d9ac:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 800d9ae:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 800d9b0:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 800d9b2:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800d9b4:	7ca3      	ldrb	r3, [r4, #18]
 800d9b6:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 800d9ba:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 800d9bc:	2000      	movs	r0, #0
}
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d9c0:	f06f 0009 	mvn.w	r0, #9
}
 800d9c4:	4770      	bx	lr

0800d9c6 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800d9c6:	2904      	cmp	r1, #4
 800d9c8:	d913      	bls.n	800d9f2 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800d9ca:	7803      	ldrb	r3, [r0, #0]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 800d9d0:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800d9d2:	7843      	ldrb	r3, [r0, #1]
 800d9d4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 800d9d8:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800d9da:	7883      	ldrb	r3, [r0, #2]
 800d9dc:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800d9e0:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800d9e2:	78c3      	ldrb	r3, [r0, #3]
 800d9e4:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800d9e8:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 800d9ea:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800d9ec:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d9f2:	f06f 0009 	mvn.w	r0, #9
}
 800d9f6:	4770      	bx	lr

0800d9f8 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	4608      	mov	r0, r1
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_i2c_encode_system_control(
 800da00:	466a      	mov	r2, sp
 800da02:	2105      	movs	r1, #5
 800da04:	f7ff ffdf 	bl	800d9c6 <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800da08:	b108      	cbz	r0, 800da0e <VL53L1_set_system_control+0x16>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800da0a:	b002      	add	sp, #8
 800da0c:	bd10      	pop	{r4, pc}
		status = VL53L1_WriteMulti(
 800da0e:	2305      	movs	r3, #5
 800da10:	466a      	mov	r2, sp
 800da12:	2183      	movs	r1, #131	@ 0x83
 800da14:	4620      	mov	r0, r4
 800da16:	f7ff fc45 	bl	800d2a4 <VL53L1_WriteMulti>
 800da1a:	e7f6      	b.n	800da0a <VL53L1_set_system_control+0x12>

0800da1c <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800da1c:	282b      	cmp	r0, #43	@ 0x2b
 800da1e:	f240 8089 	bls.w	800db34 <VL53L1_i2c_decode_system_results+0x118>
{
 800da22:	b538      	push	{r3, r4, r5, lr}
 800da24:	460d      	mov	r5, r1
 800da26:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800da28:	780b      	ldrb	r3, [r1, #0]
 800da2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->result__interrupt_status =
 800da2e:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 800da30:	784b      	ldrb	r3, [r1, #1]
 800da32:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800da34:	788b      	ldrb	r3, [r1, #2]
 800da36:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 800da3a:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 800da3c:	78cb      	ldrb	r3, [r1, #3]
 800da3e:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800da40:	3104      	adds	r1, #4
 800da42:	2002      	movs	r0, #2
 800da44:	f7fb fdcc 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd0 =
 800da48:	80a0      	strh	r0, [r4, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800da4a:	1da9      	adds	r1, r5, #6
 800da4c:	2002      	movs	r0, #2
 800da4e:	f7fb fdc7 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800da52:	80e0      	strh	r0, [r4, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800da54:	f105 0108 	add.w	r1, r5, #8
 800da58:	2002      	movs	r0, #2
 800da5a:	f7fb fdc1 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
 800da5e:	8120      	strh	r0, [r4, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800da60:	f105 010a 	add.w	r1, r5, #10
 800da64:	2002      	movs	r0, #2
 800da66:	f7fb fdbb 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
 800da6a:	8160      	strh	r0, [r4, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800da6c:	f105 010c 	add.w	r1, r5, #12
 800da70:	2002      	movs	r0, #2
 800da72:	f7fb fdb5 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
 800da76:	81a0      	strh	r0, [r4, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800da78:	f105 010e 	add.w	r1, r5, #14
 800da7c:	2002      	movs	r0, #2
 800da7e:	f7fb fdaf 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800da82:	81e0      	strh	r0, [r4, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800da84:	f105 0110 	add.w	r1, r5, #16
 800da88:	2002      	movs	r0, #2
 800da8a:	f7fb fda9 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800da8e:	8220      	strh	r0, [r4, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800da90:	f105 0112 	add.w	r1, r5, #18
 800da94:	2002      	movs	r0, #2
 800da96:	f7fb fda3 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800da9a:	8260      	strh	r0, [r4, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800da9c:	f105 0114 	add.w	r1, r5, #20
 800daa0:	2002      	movs	r0, #2
 800daa2:	f7fb fd9d 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800daa6:	82a0      	strh	r0, [r4, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800daa8:	f105 0116 	add.w	r1, r5, #22
 800daac:	2002      	movs	r0, #2
 800daae:	f7fb fd97 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800dab2:	82e0      	strh	r0, [r4, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800dab4:	f105 0118 	add.w	r1, r5, #24
 800dab8:	2002      	movs	r0, #2
 800daba:	f7fb fd91 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
 800dabe:	8320      	strh	r0, [r4, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800dac0:	f105 011a 	add.w	r1, r5, #26
 800dac4:	2002      	movs	r0, #2
 800dac6:	f7fb fd8b 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800daca:	8360      	strh	r0, [r4, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800dacc:	f105 011c 	add.w	r1, r5, #28
 800dad0:	2002      	movs	r0, #2
 800dad2:	f7fb fd85 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
 800dad6:	83a0      	strh	r0, [r4, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800dad8:	f105 011e 	add.w	r1, r5, #30
 800dadc:	2002      	movs	r0, #2
 800dade:	f7fb fd7f 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
 800dae2:	83e0      	strh	r0, [r4, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800dae4:	f105 0120 	add.w	r1, r5, #32
 800dae8:	2002      	movs	r0, #2
 800daea:	f7fb fd79 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
 800daee:	8420      	strh	r0, [r4, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800daf0:	f105 0122 	add.w	r1, r5, #34	@ 0x22
 800daf4:	2002      	movs	r0, #2
 800daf6:	f7fb fd73 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800dafa:	8460      	strh	r0, [r4, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800dafc:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 800db00:	2002      	movs	r0, #2
 800db02:	f7fb fd6d 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
 800db06:	84a0      	strh	r0, [r4, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800db08:	f105 0126 	add.w	r1, r5, #38	@ 0x26
 800db0c:	2002      	movs	r0, #2
 800db0e:	f7fb fd67 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
 800db12:	84e0      	strh	r0, [r4, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800db14:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 800db18:	2002      	movs	r0, #2
 800db1a:	f7fb fd61 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 800db1e:	8520      	strh	r0, [r4, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800db20:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 800db24:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800db28:	f895 302b 	ldrb.w	r3, [r5, #43]	@ 0x2b
 800db2c:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800db30:	2000      	movs	r0, #0
}
 800db32:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800db34:	f06f 0009 	mvn.w	r0, #9
}
 800db38:	4770      	bx	lr

0800db3a <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 800db3a:	2820      	cmp	r0, #32
 800db3c:	d935      	bls.n	800dbaa <VL53L1_i2c_decode_core_results+0x70>
{
 800db3e:	b538      	push	{r3, r4, r5, lr}
 800db40:	460d      	mov	r5, r1
 800db42:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800db44:	2004      	movs	r0, #4
 800db46:	f7fb fd8a 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd0 =
 800db4a:	6020      	str	r0, [r4, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800db4c:	1d29      	adds	r1, r5, #4
 800db4e:	2004      	movs	r0, #4
 800db50:	f7fb fd85 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
 800db54:	6060      	str	r0, [r4, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800db56:	f105 0108 	add.w	r1, r5, #8
 800db5a:	2004      	movs	r0, #4
 800db5c:	f7fb fd8c 	bl	8009678 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__signal_total_events_sd0 =
 800db60:	60a0      	str	r0, [r4, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800db62:	f105 010c 	add.w	r1, r5, #12
 800db66:	2004      	movs	r0, #4
 800db68:	f7fb fd79 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
 800db6c:	60e0      	str	r0, [r4, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800db6e:	f105 0110 	add.w	r1, r5, #16
 800db72:	2004      	movs	r0, #4
 800db74:	f7fb fd73 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
 800db78:	6120      	str	r0, [r4, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800db7a:	f105 0114 	add.w	r1, r5, #20
 800db7e:	2004      	movs	r0, #4
 800db80:	f7fb fd6d 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
 800db84:	6160      	str	r0, [r4, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800db86:	f105 0118 	add.w	r1, r5, #24
 800db8a:	2004      	movs	r0, #4
 800db8c:	f7fb fd74 	bl	8009678 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__signal_total_events_sd1 =
 800db90:	61a0      	str	r0, [r4, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800db92:	f105 011c 	add.w	r1, r5, #28
 800db96:	2004      	movs	r0, #4
 800db98:	f7fb fd61 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800db9c:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 800db9e:	f895 3020 	ldrb.w	r3, [r5, #32]
 800dba2:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800dba6:	2000      	movs	r0, #0
}
 800dba8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dbaa:	f06f 0009 	mvn.w	r0, #9
}
 800dbae:	4770      	bx	lr

0800dbb0 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800dbb0:	2837      	cmp	r0, #55	@ 0x37
 800dbb2:	f240 80d3 	bls.w	800dd5c <VL53L1_i2c_decode_debug_results+0x1ac>
{
 800dbb6:	b538      	push	{r3, r4, r5, lr}
 800dbb8:	460d      	mov	r5, r1
 800dbba:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800dbbc:	2002      	movs	r0, #2
 800dbbe:	f7fb fd0f 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 800dbc2:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800dbc4:	78ab      	ldrb	r3, [r5, #2]
 800dbc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->phasecal_result__vcsel_start =
 800dbca:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800dbcc:	78eb      	ldrb	r3, [r5, #3]
 800dbce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800dbd2:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800dbd4:	792b      	ldrb	r3, [r5, #4]
 800dbd6:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 800dbda:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800dbdc:	796b      	ldrb	r3, [r5, #5]
 800dbde:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800dbe2:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800dbe4:	79ab      	ldrb	r3, [r5, #6]
 800dbe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->vhv_result__search_result =
 800dbea:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800dbec:	79eb      	ldrb	r3, [r5, #7]
 800dbee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->vhv_result__latest_setting =
 800dbf2:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800dbf4:	f105 0108 	add.w	r1, r5, #8
 800dbf8:	2002      	movs	r0, #2
 800dbfa:	f7fb fcf1 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
 800dbfe:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 800dc02:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800dc04:	7aab      	ldrb	r3, [r5, #10]
 800dc06:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 800dc0a:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800dc0c:	7aeb      	ldrb	r3, [r5, #11]
 800dc0e:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 800dc12:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800dc14:	7b2b      	ldrb	r3, [r5, #12]
 800dc16:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 800dc1a:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800dc1c:	7b6b      	ldrb	r3, [r5, #13]
 800dc1e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 800dc22:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800dc24:	7bab      	ldrb	r3, [r5, #14]
 800dc26:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 800dc2a:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800dc2c:	7beb      	ldrb	r3, [r5, #15]
 800dc2e:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 800dc32:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800dc34:	7c2b      	ldrb	r3, [r5, #16]
 800dc36:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800dc38:	7c6b      	ldrb	r3, [r5, #17]
 800dc3a:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800dc3c:	f105 0112 	add.w	r1, r5, #18
 800dc40:	2002      	movs	r0, #2
 800dc42:	f7fb fccd 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
 800dc46:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 800dc4a:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800dc4c:	f105 0116 	add.w	r1, r5, #22
 800dc50:	2002      	movs	r0, #2
 800dc52:	f7fb fcc5 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_high =
 800dc56:	82a0      	strh	r0, [r4, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800dc58:	f105 0118 	add.w	r1, r5, #24
 800dc5c:	2002      	movs	r0, #2
 800dc5e:	f7fb fcbf 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 800dc62:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800dc64:	7eab      	ldrb	r3, [r5, #26]
 800dc66:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 800dc6a:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800dc6c:	7eeb      	ldrb	r3, [r5, #27]
 800dc6e:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 800dc72:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800dc74:	7f2b      	ldrb	r3, [r5, #28]
 800dc76:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800dc78:	7f6b      	ldrb	r3, [r5, #29]
 800dc7a:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800dc7c:	7fab      	ldrb	r3, [r5, #30]
 800dc7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800dc82:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800dc84:	7feb      	ldrb	r3, [r5, #31]
 800dc86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 800dc8a:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800dc8c:	f895 3020 	ldrb.w	r3, [r5, #32]
 800dc90:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800dc94:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800dc96:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800dc9a:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 800dc9e:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800dca0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800dca4:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800dca8:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 800dcac:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800dcb0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800dcb4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800dcb8:	f895 3025 	ldrb.w	r3, [r5, #37]	@ 0x25
 800dcbc:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 800dcc0:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800dcc4:	f895 3026 	ldrb.w	r3, [r5, #38]	@ 0x26
 800dcc8:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 800dccc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800dcd0:	f895 3027 	ldrb.w	r3, [r5, #39]	@ 0x27
 800dcd4:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 800dcd8:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800dcdc:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 800dce0:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800dce4:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800dce8:	f895 3029 	ldrb.w	r3, [r5, #41]	@ 0x29
 800dcec:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 800dcf0:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800dcf4:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 800dcf8:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 800dcfc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800dd00:	f895 302b 	ldrb.w	r3, [r5, #43]	@ 0x2b
 800dd04:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800dd08:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800dd0c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800dd10:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800dd14:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800dd18:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800dd1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->pad_startup_mode__value_ctrl =
 800dd20:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800dd24:	f105 012e 	add.w	r1, r5, #46	@ 0x2e
 800dd28:	2004      	movs	r0, #4
 800dd2a:	f7fb fc98 	bl	800965e <VL53L1_i2c_decode_uint32_t>
 800dd2e:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 800dd32:	62e0      	str	r0, [r4, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800dd34:	f105 0132 	add.w	r1, r5, #50	@ 0x32
 800dd38:	2004      	movs	r0, #4
 800dd3a:	f7fb fc90 	bl	800965e <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 800dd3e:	6320      	str	r0, [r4, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800dd40:	f895 3036 	ldrb.w	r3, [r5, #54]	@ 0x36
 800dd44:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800dd48:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800dd4c:	f895 3037 	ldrb.w	r3, [r5, #55]	@ 0x37
 800dd50:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800dd54:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 800dd58:	2000      	movs	r0, #0
}
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dd5c:	f06f 0009 	mvn.w	r0, #9
}
 800dd60:	4770      	bx	lr

0800dd62 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800dd62:	2830      	cmp	r0, #48	@ 0x30
 800dd64:	f240 809f 	bls.w	800dea6 <VL53L1_i2c_decode_nvm_copy_data+0x144>
{
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	4614      	mov	r4, r2
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800dd6e:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 800dd70:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 800dd72:	784b      	ldrb	r3, [r1, #1]
 800dd74:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800dd76:	788b      	ldrb	r3, [r1, #2]
 800dd78:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800dd7a:	3103      	adds	r1, #3
 800dd7c:	2002      	movs	r0, #2
 800dd7e:	f7fb fc2f 	bl	80095e0 <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 800dd82:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800dd84:	796b      	ldrb	r3, [r5, #5]
 800dd86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->ana_config__fast_osc__trim_max =
 800dd8a:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800dd8c:	79ab      	ldrb	r3, [r5, #6]
 800dd8e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 800dd92:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800dd94:	79eb      	ldrb	r3, [r5, #7]
 800dd96:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 800dd9a:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800dd9c:	7a2b      	ldrb	r3, [r5, #8]
 800dd9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->ana_config__vcsel_selion =
 800dda2:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800dda4:	7a6b      	ldrb	r3, [r5, #9]
 800dda6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->ana_config__vcsel_selion_max =
 800ddaa:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800ddac:	7aab      	ldrb	r3, [r5, #10]
 800ddae:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 800ddb2:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800ddb4:	7aeb      	ldrb	r3, [r5, #11]
 800ddb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	pdata->laser_safety__key =
 800ddba:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800ddbc:	7b2b      	ldrb	r3, [r5, #12]
 800ddbe:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 800ddc2:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800ddc4:	7b6b      	ldrb	r3, [r5, #13]
 800ddc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->laser_safety__clip =
 800ddca:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800ddcc:	7bab      	ldrb	r3, [r5, #14]
 800ddce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
	pdata->laser_safety__mult =
 800ddd2:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800ddd4:	7beb      	ldrb	r3, [r5, #15]
 800ddd6:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800ddd8:	7c2b      	ldrb	r3, [r5, #16]
 800ddda:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800dddc:	7c6b      	ldrb	r3, [r5, #17]
 800ddde:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800dde0:	7cab      	ldrb	r3, [r5, #18]
 800dde2:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800dde4:	7ceb      	ldrb	r3, [r5, #19]
 800dde6:	7523      	strb	r3, [r4, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800dde8:	7d2b      	ldrb	r3, [r5, #20]
 800ddea:	7563      	strb	r3, [r4, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800ddec:	7d6b      	ldrb	r3, [r5, #21]
 800ddee:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800ddf0:	7dab      	ldrb	r3, [r5, #22]
 800ddf2:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800ddf4:	7deb      	ldrb	r3, [r5, #23]
 800ddf6:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800ddf8:	7e2b      	ldrb	r3, [r5, #24]
 800ddfa:	7663      	strb	r3, [r4, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800ddfc:	7e6b      	ldrb	r3, [r5, #25]
 800ddfe:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800de00:	7eab      	ldrb	r3, [r5, #26]
 800de02:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800de04:	7eeb      	ldrb	r3, [r5, #27]
 800de06:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800de08:	7f2b      	ldrb	r3, [r5, #28]
 800de0a:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800de0c:	7f6b      	ldrb	r3, [r5, #29]
 800de0e:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800de10:	7fab      	ldrb	r3, [r5, #30]
 800de12:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800de14:	7feb      	ldrb	r3, [r5, #31]
 800de16:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800de1a:	f895 3020 	ldrb.w	r3, [r5, #32]
 800de1e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800de22:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800de26:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800de2a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800de2e:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800de32:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 800de36:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800de3a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800de3e:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800de42:	f895 3025 	ldrb.w	r3, [r5, #37]	@ 0x25
 800de46:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800de4a:	f895 3026 	ldrb.w	r3, [r5, #38]	@ 0x26
 800de4e:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800de52:	f895 3027 	ldrb.w	r3, [r5, #39]	@ 0x27
 800de56:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800de5a:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 800de5e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800de62:	f895 3029 	ldrb.w	r3, [r5, #41]	@ 0x29
 800de66:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800de6a:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 800de6e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800de72:	f895 302b 	ldrb.w	r3, [r5, #43]	@ 0x2b
 800de76:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800de7a:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800de7e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800de82:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800de86:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800de8a:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 800de8e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800de92:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 800de96:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800de9a:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800de9e:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800dea2:	2000      	movs	r0, #0
}
 800dea4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dea6:	f06f 0009 	mvn.w	r0, #9
}
 800deaa:	4770      	bx	lr

0800deac <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800deac:	b510      	push	{r4, lr}
 800deae:	b08e      	sub	sp, #56	@ 0x38
 800deb0:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_ReadMulti(
 800deb2:	2331      	movs	r3, #49	@ 0x31
 800deb4:	aa01      	add	r2, sp, #4
 800deb6:	f240 110f 	movw	r1, #271	@ 0x10f
 800deba:	f7ff fa13 	bl	800d2e4 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800debe:	b108      	cbz	r0, 800dec4 <VL53L1_get_nvm_copy_data+0x18>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800dec0:	b00e      	add	sp, #56	@ 0x38
 800dec2:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_nvm_copy_data(
 800dec4:	4622      	mov	r2, r4
 800dec6:	a901      	add	r1, sp, #4
 800dec8:	2031      	movs	r0, #49	@ 0x31
 800deca:	f7ff ff4a 	bl	800dd62 <VL53L1_i2c_decode_nvm_copy_data>
 800dece:	e7f7      	b.n	800dec0 <VL53L1_get_nvm_copy_data+0x14>

0800ded0 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 800ded0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	4606      	mov	r6, r0
 800ded6:	4614      	mov	r4, r2
 800ded8:	461d      	mov	r5, r3
 800deda:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800dede:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
	uint64_t tmp0        = 0;
	uint64_t tmp1        = 0;
	uint64_t b_minus_amb = 0;
	uint64_t VL53L1_p_041   = 0;

	*psigma_est  = VL53L1_D_002;
 800dee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dee6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dee8:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 800deea:	2800      	cmp	r0, #0
 800deec:	f000 80ec 	beq.w	800e0c8 <VL53L1_f_014+0x1f8>
 800def0:	4688      	mov	r8, r1



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 800def2:	f7fd facc 	bl	800b48e <VL53L1_calc_pll_period_mm>
 800def6:	4607      	mov	r7, r0



		if (VL53L1_p_004 > VL53L1_p_018)
 800def8:	45a1      	cmp	r9, r4
 800defa:	d97d      	bls.n	800dff8 <VL53L1_f_014+0x128>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 800defc:	ebb9 0b04 	subs.w	fp, r9, r4
 800df00:	eb6a 0a0a 	sbc.w	sl, sl, sl
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
			(uint64_t)VL53L1_p_004;



		if (VL53L1_p_003 > VL53L1_p_001)
 800df04:	45a8      	cmp	r8, r5
 800df06:	d97c      	bls.n	800e002 <VL53L1_f_014+0x132>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 800df08:	ebb8 0505 	subs.w	r5, r8, r5
 800df0c:	eb63 0303 	sbc.w	r3, r3, r3
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
			(uint64_t)VL53L1_p_003;



		if (b_minus_amb != 0) {
 800df10:	ea5b 020a 	orrs.w	r2, fp, sl
 800df14:	f000 80db 	beq.w	800e0ce <VL53L1_f_014+0x1fe>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 800df18:	f04f 0800 	mov.w	r8, #0
 800df1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df1e:	18a4      	adds	r4, r4, r2
 800df20:	eb48 0808 	adc.w	r8, r8, r8
 800df24:	eb14 0409 	adds.w	r4, r4, r9
 800df28:	f148 0800 	adc.w	r8, r8, #0
					(uint64_t)VL53L1_p_004;
			if (tmp0 > VL53L1_D_003)
 800df2c:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 800df30:	f178 0200 	sbcs.w	r2, r8, #0
 800df34:	d303      	bcc.n	800df3e <VL53L1_f_014+0x6e>
				tmp0 = VL53L1_D_003;
 800df36:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800df3a:	f04f 0800 	mov.w	r8, #0



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 800df3e:	fb05 f303 	mul.w	r3, r5, r3
 800df42:	fba5 5105 	umull	r5, r1, r5, r5
 800df46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
			tmp1 = tmp1 << 8;
 800df4a:	0209      	lsls	r1, r1, #8
 800df4c:	ea41 6115 	orr.w	r1, r1, r5, lsr #24
 800df50:	0228      	lsls	r0, r5, #8


			if (tmp1 > VL53L1_D_004)
 800df52:	f04f 33ff 	mov.w	r3, #4294967295
 800df56:	4283      	cmp	r3, r0
 800df58:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800df5c:	418b      	sbcs	r3, r1
 800df5e:	d203      	bcs.n	800df68 <VL53L1_f_014+0x98>
				tmp1 = VL53L1_D_004;
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000


			tmp1 = do_division_u(tmp1, b_minus_amb);
 800df68:	465a      	mov	r2, fp
 800df6a:	4653      	mov	r3, sl
 800df6c:	f7f2 f964 	bl	8000238 <__aeabi_uldivmod>
			tmp1 = do_division_u(tmp1, b_minus_amb);
 800df70:	465a      	mov	r2, fp
 800df72:	4653      	mov	r3, sl
 800df74:	f7f2 f960 	bl	8000238 <__aeabi_uldivmod>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1


			if (tmp1 > (uint64_t)VL53L1_D_005)
 800df7c:	f04f 35ff 	mov.w	r5, #4294967295
 800df80:	4285      	cmp	r5, r0
 800df82:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 800df86:	4188      	sbcs	r0, r1
 800df88:	d201      	bcs.n	800df8e <VL53L1_f_014+0xbe>
				tmp1 = (uint64_t)VL53L1_D_005;
 800df8a:	462a      	mov	r2, r5
 800df8c:	237f      	movs	r3, #127	@ 0x7f


			tmp0 = tmp1 * tmp0;
 800df8e:	fb04 f303 	mul.w	r3, r4, r3
 800df92:	fb02 3308 	mla	r3, r2, r8, r3
 800df96:	fba4 0402 	umull	r0, r4, r4, r2
 800df9a:	441c      	add	r4, r3


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800df9c:	2100      	movs	r1, #0
 800df9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfa2:	189b      	adds	r3, r3, r2
 800dfa4:	4149      	adcs	r1, r1
 800dfa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfa8:	189b      	adds	r3, r3, r2
 800dfaa:	f141 0100 	adc.w	r1, r1, #0
 800dfae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfb0:	189b      	adds	r3, r3, r2
 800dfb2:	f141 0100 	adc.w	r1, r1, #0
				(uint64_t)a_zp + (uint64_t)ax_zp;


			if (tmp1 > (uint64_t)VL53L1_D_003)
 800dfb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfba:	f171 0200 	sbcs.w	r2, r1, #0
 800dfbe:	d302      	bcc.n	800dfc6 <VL53L1_f_014+0xf6>
				tmp1 = (uint64_t)VL53L1_D_003;
 800dfc0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800dfc4:	2100      	movs	r1, #0

			tmp1 = tmp1 << 8;
 800dfc6:	0209      	lsls	r1, r1, #8
 800dfc8:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 800dfcc:	021b      	lsls	r3, r3, #8


			tmp0 = tmp1 + tmp0;
 800dfce:	18c0      	adds	r0, r0, r3
 800dfd0:	eb44 0101 	adc.w	r1, r4, r1
			if (tmp0 > (uint64_t)VL53L1_D_006)
 800dfd4:	2900      	cmp	r1, #0
 800dfd6:	db19      	blt.n	800e00c <VL53L1_f_014+0x13c>





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 800dfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfdc:	4283      	cmp	r3, r0
 800dfde:	f04f 0300 	mov.w	r3, #0
 800dfe2:	418b      	sbcs	r3, r1
 800dfe4:	d316      	bcc.n	800e014 <VL53L1_f_014+0x144>
				tmp0 = do_division_u(tmp0, b_minus_amb);
				tmp0 = tmp0 * pll_period_mm;
			} else {
				tmp0 = tmp0 * pll_period_mm;
 800dfe6:	fba7 0400 	umull	r0, r4, r7, r0
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800dfea:	465a      	mov	r2, fp
 800dfec:	4653      	mov	r3, sl
 800dfee:	fb07 4101 	mla	r1, r7, r1, r4
 800dff2:	f7f2 f921 	bl	8000238 <__aeabi_uldivmod>
 800dff6:	e016      	b.n	800e026 <VL53L1_f_014+0x156>
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 800dff8:	ebb4 0b09 	subs.w	fp, r4, r9
 800dffc:	eb6a 0a0a 	sbc.w	sl, sl, sl
 800e000:	e780      	b.n	800df04 <VL53L1_f_014+0x34>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 800e002:	ebb5 0508 	subs.w	r5, r5, r8
 800e006:	eb63 0303 	sbc.w	r3, r3, r3
 800e00a:	e781      	b.n	800df10 <VL53L1_f_014+0x40>
				tmp0 = (uint64_t)VL53L1_D_006;
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800e014:	465a      	mov	r2, fp
 800e016:	4653      	mov	r3, sl
 800e018:	f7f2 f90e 	bl	8000238 <__aeabi_uldivmod>
 800e01c:	460b      	mov	r3, r1
				tmp0 = tmp0 * pll_period_mm;
 800e01e:	fba7 0100 	umull	r0, r1, r7, r0
 800e022:	fb07 1103 	mla	r1, r7, r3, r1
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 800e026:	2900      	cmp	r1, #0
 800e028:	db13      	blt.n	800e052 <VL53L1_f_014+0x182>
				tmp0 = (uint64_t)VL53L1_D_006;



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 800e02a:	f04f 33ff 	mov.w	r3, #4294967295
 800e02e:	4283      	cmp	r3, r0
 800e030:	f04f 0300 	mov.w	r3, #0
 800e034:	418b      	sbcs	r3, r1
 800e036:	d310      	bcc.n	800e05a <VL53L1_f_014+0x18a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
				tmp0 = do_division_u(tmp0, 4);
				tmp0 = tmp0 * pll_period_mm;
			} else {
				tmp0 = tmp0 * pll_period_mm;
 800e038:	fba7 0400 	umull	r0, r4, r7, r0
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800e03c:	465a      	mov	r2, fp
 800e03e:	4653      	mov	r3, sl
 800e040:	fb07 4101 	mla	r1, r7, r1, r4
 800e044:	f7f2 f8f8 	bl	8000238 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 800e048:	0880      	lsrs	r0, r0, #2
 800e04a:	ea40 7081 	orr.w	r0, r0, r1, lsl #30
 800e04e:	088b      	lsrs	r3, r1, #2
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 800e050:	e011      	b.n	800e076 <VL53L1_f_014+0x1a6>
				tmp0 = (uint64_t)VL53L1_D_006;
 800e052:	f04f 30ff 	mov.w	r0, #4294967295
 800e056:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800e05a:	465a      	mov	r2, fp
 800e05c:	4653      	mov	r3, sl
 800e05e:	f7f2 f8eb 	bl	8000238 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 800e062:	0880      	lsrs	r0, r0, #2
 800e064:	ea40 7081 	orr.w	r0, r0, r1, lsl #30
 800e068:	0889      	lsrs	r1, r1, #2
				tmp0 = tmp0 * pll_period_mm;
 800e06a:	fba7 0300 	umull	r0, r3, r7, r0
 800e06e:	fb07 3301 	mla	r3, r7, r1, r3
			if (tmp0 > (uint64_t)VL53L1_D_006)
 800e072:	2b00      	cmp	r3, #0
 800e074:	db20      	blt.n	800e0b8 <VL53L1_f_014+0x1e8>
				tmp0 = (uint64_t)VL53L1_D_006;


			tmp0 = tmp0 >> 2;
 800e076:	0880      	lsrs	r0, r0, #2
 800e078:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800e07c:	089b      	lsrs	r3, r3, #2


			if (tmp0 > (uint64_t)VL53L1_D_007)
 800e07e:	f04f 32ff 	mov.w	r2, #4294967295
 800e082:	4282      	cmp	r2, r0
 800e084:	f04f 0200 	mov.w	r2, #0
 800e088:	419a      	sbcs	r2, r3
 800e08a:	d319      	bcc.n	800e0c0 <VL53L1_f_014+0x1f0>
				tmp0 = (uint64_t)VL53L1_D_007;


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 800e08c:	01f6      	lsls	r6, r6, #7
			tmp1 = tmp1 * tmp1;
 800e08e:	fba6 6206 	umull	r6, r2, r6, r6
			tmp0 = tmp0 + tmp1;
 800e092:	1980      	adds	r0, r0, r6
 800e094:	f143 0300 	adc.w	r3, r3, #0


			if (tmp0 > (uint64_t)VL53L1_D_007)
 800e098:	f04f 32ff 	mov.w	r2, #4294967295
 800e09c:	4282      	cmp	r2, r0
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	419a      	sbcs	r2, r3
 800e0a4:	d201      	bcs.n	800e0aa <VL53L1_f_014+0x1da>
				tmp0 = (uint64_t)VL53L1_D_007;
 800e0a6:	f04f 30ff 	mov.w	r0, #4294967295


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 800e0aa:	f7fd f99e 	bl	800b3ea <VL53L1_isqrt>

			*psigma_est = (uint16_t)sigma_int;
 800e0ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e0b0:	8018      	strh	r0, [r3, #0]

			status = VL53L1_ERROR_NONE;
 800e0b2:	2000      	movs	r0, #0
		}

	}

	return status;
}
 800e0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tmp0 = (uint64_t)VL53L1_D_007;
 800e0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e7e5      	b.n	800e08c <VL53L1_f_014+0x1bc>
 800e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	e7e1      	b.n	800e08c <VL53L1_f_014+0x1bc>
	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e0c8:	f06f 000e 	mvn.w	r0, #14
 800e0cc:	e7f2      	b.n	800e0b4 <VL53L1_f_014+0x1e4>
 800e0ce:	f06f 000e 	mvn.w	r0, #14
 800e0d2:	e7ef      	b.n	800e0b4 <VL53L1_f_014+0x1e4>

0800e0d4 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 800e0d4:	b530      	push	{r4, r5, lr}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	460c      	mov	r4, r1

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  gpio__mux_active_high_hv = 0;
	uint8_t  gpio__tio_hv_status      = 0;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t  interrupt_ready          = 0;

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800e0e0:	f890 336a 	ldrb.w	r3, [r0, #874]	@ 0x36a
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800e0e4:	f013 0f10 	tst.w	r3, #16
 800e0e8:	d10f      	bne.n	800e10a <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 800e0ea:	2501      	movs	r5, #1
	else
		interrupt_ready = 0x00;



	status = VL53L1_RdByte(
 800e0ec:	f10d 0207 	add.w	r2, sp, #7
 800e0f0:	2131      	movs	r1, #49	@ 0x31
 800e0f2:	f7ff f93f 	bl	800d374 <VL53L1_RdByte>
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800e0f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	429d      	cmp	r5, r3
 800e100:	d005      	beq.n	800e10e <VL53L1_is_new_data_ready+0x3a>
		*pready = 0x01;
	else
		*pready = 0x00;
 800e102:	2300      	movs	r3, #0
 800e104:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(status);

	return status;
}
 800e106:	b003      	add	sp, #12
 800e108:	bd30      	pop	{r4, r5, pc}
		interrupt_ready = 0x00;
 800e10a:	2500      	movs	r5, #0
 800e10c:	e7ee      	b.n	800e0ec <VL53L1_is_new_data_ready+0x18>
		*pready = 0x01;
 800e10e:	2301      	movs	r3, #1
 800e110:	7023      	strb	r3, [r4, #0]
 800e112:	e7f8      	b.n	800e106 <VL53L1_is_new_data_ready+0x32>

0800e114 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	4604      	mov	r4, r0
 800e11a:	460d      	mov	r5, r1

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 800e11c:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800e120:	f7ff f972 	bl	800d408 <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800e124:	4606      	mov	r6, r0
 800e126:	b110      	cbz	r0, 800e12e <VL53L1_poll_for_boot_completion+0x1a>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);

	LOG_FUNCTION_END(status);

	return status;
}
 800e128:	4630      	mov	r0, r6
 800e12a:	b002      	add	sp, #8
 800e12c:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WaitValueMaskEx(
 800e12e:	2301      	movs	r3, #1
 800e130:	9301      	str	r3, [sp, #4]
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	22e5      	movs	r2, #229	@ 0xe5
 800e136:	4629      	mov	r1, r5
 800e138:	4620      	mov	r0, r4
 800e13a:	f7ff f973 	bl	800d424 <VL53L1_WaitValueMaskEx>
	if (status == VL53L1_ERROR_NONE)
 800e13e:	4606      	mov	r6, r0
 800e140:	2800      	cmp	r0, #0
 800e142:	d1f1      	bne.n	800e128 <VL53L1_poll_for_boot_completion+0x14>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800e144:	2103      	movs	r1, #3
 800e146:	4620      	mov	r0, r4
 800e148:	f7fb f85f 	bl	800920a <VL53L1_init_ll_driver_state>
 800e14c:	e7ec      	b.n	800e128 <VL53L1_poll_for_boot_completion+0x14>

0800e14e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800e14e:	b500      	push	{lr}
 800e150:	b083      	sub	sp, #12
	uint8_t  interrupt_ready          = 0;

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800e152:	f890 336a 	ldrb.w	r3, [r0, #874]	@ 0x36a
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800e156:	f013 0f10 	tst.w	r3, #16
 800e15a:	d109      	bne.n	800e170 <VL53L1_poll_for_range_completion+0x22>
		interrupt_ready = 0x01;
 800e15c:	2301      	movs	r3, #1
	else
		interrupt_ready = 0x00;

	status =
		VL53L1_WaitValueMaskEx(
 800e15e:	2201      	movs	r2, #1
 800e160:	9201      	str	r2, [sp, #4]
 800e162:	9200      	str	r2, [sp, #0]
 800e164:	2231      	movs	r2, #49	@ 0x31
 800e166:	f7ff f95d 	bl	800d424 <VL53L1_WaitValueMaskEx>
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
}
 800e16a:	b003      	add	sp, #12
 800e16c:	f85d fb04 	ldr.w	pc, [sp], #4
		interrupt_ready = 0x00;
 800e170:	2300      	movs	r3, #0
 800e172:	e7f4      	b.n	800e15e <VL53L1_poll_for_range_completion+0x10>

0800e174 <VL53L1_wait_for_test_completion>:
{
 800e174:	b510      	push	{r4, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	4604      	mov	r4, r0
	uint8_t      data_ready  = 0;
 800e17a:	2300      	movs	r3, #0
 800e17c:	f88d 3007 	strb.w	r3, [sp, #7]
	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 800e180:	7e03      	ldrb	r3, [r0, #24]
 800e182:	b193      	cbz	r3, 800e1aa <VL53L1_wait_for_test_completion+0x36>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e184:	2300      	movs	r3, #0
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 800e186:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e18a:	b99a      	cbnz	r2, 800e1b4 <VL53L1_wait_for_test_completion+0x40>
 800e18c:	b993      	cbnz	r3, 800e1b4 <VL53L1_wait_for_test_completion+0x40>
			status = VL53L1_is_new_data_ready(
 800e18e:	f10d 0107 	add.w	r1, sp, #7
 800e192:	4620      	mov	r0, r4
 800e194:	f7ff ff9e 	bl	800e0d4 <VL53L1_is_new_data_ready>
			if (status == VL53L1_ERROR_NONE) {
 800e198:	4603      	mov	r3, r0
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d1f3      	bne.n	800e186 <VL53L1_wait_for_test_completion+0x12>
				status = VL53L1_WaitMs(
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f7ff f92c 	bl	800d3fe <VL53L1_WaitMs>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	e7ed      	b.n	800e186 <VL53L1_wait_for_test_completion+0x12>
			VL53L1_poll_for_range_completion(
 800e1aa:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800e1ae:	f7ff ffce 	bl	800e14e <VL53L1_poll_for_range_completion>
 800e1b2:	4603      	mov	r3, r0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	b002      	add	sp, #8
 800e1b8:	bd10      	pop	{r4, pc}

0800e1ba <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 800e1ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460f      	mov	r7, r1
 800e1c4:	4616      	mov	r6, r2
 800e1c6:	4699      	mov	r9, r3
 800e1c8:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c



	VL53L1_Error status = VL53L1_ERROR_NONE;

	uint8_t row = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t col = 0;
 800e1d2:	f88d 3006 	strb.w	r3, [sp, #6]




	if (status == VL53L1_ERROR_NONE) {
		VL53L1_decode_row_col(
 800e1d6:	f10d 0206 	add.w	r2, sp, #6
 800e1da:	f10d 0107 	add.w	r1, sp, #7
 800e1de:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 800e1e2:	f7fd fa96 	bl	800b712 <VL53L1_decode_row_col>
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 800e1e6:	f014 0f10 	tst.w	r4, #16
 800e1ea:	f000 809e 	beq.w	800e32a <VL53L1_f_040+0x170>
			bound_l_x = (int16_t) col -
 800e1ee:	f89d c006 	ldrb.w	ip, [sp, #6]
 800e1f2:	ebac 1c54 	sub.w	ip, ip, r4, lsr #5
 800e1f6:	f10c 3cff 	add.w	ip, ip, #4294967295
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 800e1fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1fe:	eb03 1354 	add.w	r3, r3, r4, lsr #5

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 800e202:	f014 0f01 	tst.w	r4, #1
 800e206:	f000 8095 	beq.w	800e334 <VL53L1_f_040+0x17a>
			bound_d_y = (int16_t) row -
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 800e20a:	f3c4 0242 	ubfx	r2, r4, #1, #3
			bound_d_y = (int16_t) row -
 800e20e:	f89d 8007 	ldrb.w	r8, [sp, #7]
 800e212:	eba8 0802 	sub.w	r8, r8, r2
 800e216:	f108 38ff 	add.w	r8, r8, #4294967295
		else
			bound_d_y = (int16_t) row -
			(((int16_t)roi_xy_size & 0x0f) / 2);

		bound_u_y = (int16_t) row +
				(((int16_t)roi_xy_size & 0xf) / 2);
 800e21a:	f3c4 0242 	ubfx	r2, r4, #1, #3
		bound_u_y = (int16_t) row +
 800e21e:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800e222:	4414      	add	r4, r2




	if (status == VL53L1_ERROR_NONE) {
		bound_l_x =  (2 * bound_l_x) - 15 +
 800e224:	fa1f f989 	uxth.w	r9, r9
 800e228:	44cc      	add	ip, r9
 800e22a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e22e:	f1ac 0c0f 	sub.w	ip, ip, #15
 800e232:	fa0f fe8c 	sxth.w	lr, ip
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 800e236:	444b      	add	r3, r9
 800e238:	005b      	lsls	r3, r3, #1
 800e23a:	3b0f      	subs	r3, #15
 800e23c:	b21a      	sxth	r2, r3
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 800e23e:	f99d 1030 	ldrsb.w	r1, [sp, #48]	@ 0x30
 800e242:	b289      	uxth	r1, r1
 800e244:	440c      	add	r4, r1
 800e246:	0064      	lsls	r4, r4, #1
 800e248:	3c0f      	subs	r4, #15
 800e24a:	b220      	sxth	r0, r4
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 800e24c:	4441      	add	r1, r8
 800e24e:	0049      	lsls	r1, r1, #1
 800e250:	390f      	subs	r1, #15
 800e252:	fa0f fa81 	sxth.w	sl, r1




	if (status == VL53L1_ERROR_NONE) {
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 800e256:	f34c 3cc0 	sbfx	ip, ip, #15, #1
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 800e25a:	ea4f 79e7 	mov.w	r9, r7, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 800e25e:	fb0e f809 	mul.w	r8, lr, r9
 800e262:	fb07 8c0c 	mla	ip, r7, ip, r8
 800e266:	fbae e807 	umull	lr, r8, lr, r7
 800e26a:	44c4      	add	ip, r8
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 800e26c:	f341 31c0 	sbfx	r1, r1, #15, #1
					((int64_t)ygradient));
 800e270:	ea4f 78e6 	mov.w	r8, r6, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 800e274:	fb0a fb08 	mul.w	fp, sl, r8
 800e278:	fb06 b101 	mla	r1, r6, r1, fp
 800e27c:	fbaa ba06 	umull	fp, sl, sl, r6
 800e280:	448a      	add	sl, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 800e282:	eb1e 010b 	adds.w	r1, lr, fp
 800e286:	eb4c 0c0a 	adc.w	ip, ip, sl
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 800e28a:	3101      	adds	r1, #1
 800e28c:	f14c 0c00 	adc.w	ip, ip, #0
 800e290:	ea4f 7edc 	mov.w	lr, ip, lsr #31
 800e294:	eb1e 0e01 	adds.w	lr, lr, r1
 800e298:	f14c 0c00 	adc.w	ip, ip, #0
 800e29c:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800e2a0:	ea4e 7ecc 	orr.w	lr, lr, ip, lsl #31
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 800e2a4:	0fa9      	lsrs	r1, r5, #30
 800e2a6:	00ad      	lsls	r5, r5, #2
 800e2a8:	eb15 0e0e 	adds.w	lr, r5, lr
 800e2ac:	eb41 0c6c 	adc.w	ip, r1, ip, asr #1

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 800e2b0:	f343 33c0 	sbfx	r3, r3, #15, #1
 800e2b4:	fb07 f303 	mul.w	r3, r7, r3
 800e2b8:	fb02 3309 	mla	r3, r2, r9, r3
 800e2bc:	fba7 2702 	umull	r2, r7, r7, r2
 800e2c0:	443b      	add	r3, r7
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 800e2c2:	f344 34c0 	sbfx	r4, r4, #15, #1
 800e2c6:	fb06 f404 	mul.w	r4, r6, r4
 800e2ca:	fb00 4408 	mla	r4, r0, r8, r4
 800e2ce:	fba6 6000 	umull	r6, r0, r6, r0
 800e2d2:	4420      	add	r0, r4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 800e2d4:	1992      	adds	r2, r2, r6
 800e2d6:	eb43 0300 	adc.w	r3, r3, r0
			((int64_t)ygradient));
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 800e2da:	1c50      	adds	r0, r2, #1
 800e2dc:	f143 0300 	adc.w	r3, r3, #0
 800e2e0:	0fda      	lsrs	r2, r3, #31
 800e2e2:	1812      	adds	r2, r2, r0
 800e2e4:	f143 0300 	adc.w	r3, r3, #0
 800e2e8:	0852      	lsrs	r2, r2, #1
 800e2ea:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 800e2ee:	18ad      	adds	r5, r5, r2
 800e2f0:	eb41 0163 	adc.w	r1, r1, r3, asr #1
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
		xtalk_avg = do_division_s(
 800e2f4:	eb1e 0e05 	adds.w	lr, lr, r5
 800e2f8:	eb4c 0c01 	adc.w	ip, ip, r1
 800e2fc:	f11e 0101 	adds.w	r1, lr, #1
 800e300:	f14c 0200 	adc.w	r2, ip, #0
 800e304:	0fd3      	lsrs	r3, r2, #31
 800e306:	185b      	adds	r3, r3, r1
 800e308:	f142 0200 	adc.w	r2, r2, #0
 800e30c:	085b      	lsrs	r3, r3, #1
 800e30e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
		if (xtalk_avg < 0)
 800e312:	f11e 0f02 	cmn.w	lr, #2
 800e316:	f15c 0c00 	adcs.w	ip, ip, #0
 800e31a:	da00      	bge.n	800e31e <VL53L1_f_040+0x164>
			xtalk_avg = 0;
 800e31c:	2300      	movs	r3, #0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 800e31e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e320:	6013      	str	r3, [r2, #0]
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
}
 800e322:	2000      	movs	r0, #0
 800e324:	b003      	add	sp, #12
 800e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bound_l_x = (int16_t) col -
 800e32a:	f89d c006 	ldrb.w	ip, [sp, #6]
 800e32e:	ebac 1c54 	sub.w	ip, ip, r4, lsr #5
 800e332:	e762      	b.n	800e1fa <VL53L1_f_040+0x40>
			(((int16_t)roi_xy_size & 0x0f) / 2);
 800e334:	f3c4 0242 	ubfx	r2, r4, #1, #3
			bound_d_y = (int16_t) row -
 800e338:	f89d 8007 	ldrb.w	r8, [sp, #7]
 800e33c:	eba8 0802 	sub.w	r8, r8, r2
 800e340:	e76b      	b.n	800e21a <VL53L1_f_040+0x60>

0800e342 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 800e342:	b570      	push	{r4, r5, r6, lr}
 800e344:	4606      	mov	r6, r0
 800e346:	460c      	mov	r4, r1
 800e348:	461d      	mov	r5, r3
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 800e34a:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800e34e:	fba2 2101 	umull	r2, r1, r2, r1
 800e352:	f512 70fa 	adds.w	r0, r2, #500	@ 0x1f4
 800e356:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e35a:	f04f 0300 	mov.w	r3, #0
 800e35e:	f141 0100 	adc.w	r1, r1, #0
 800e362:	f7f1 ff69 	bl	8000238 <__aeabi_uldivmod>
 800e366:	4603      	mov	r3, r0




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 800e368:	f8b6 007c 	ldrh.w	r0, [r6, #124]	@ 0x7c
	xtalk_total_events = xtalk_events_per_spad *
 800e36c:	fba0 3203 	umull	r3, r2, r0, r3
 800e370:	fb00 2201 	mla	r2, r0, r1, r2

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 800e374:	0a1b      	lsrs	r3, r3, #8
 800e376:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e37a:	0a12      	lsrs	r2, r2, #8

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 800e37c:	f513 6380 	adds.w	r3, r3, #1024	@ 0x400
 800e380:	f142 0200 	adc.w	r2, r2, #0
 800e384:	0ad9      	lsrs	r1, r3, #11
 800e386:	ea41 5142 	orr.w	r1, r1, r2, lsl #21
 800e38a:	ea4f 2ed2 	mov.w	lr, r2, lsr #11

	if (xtalk_total_events > 0xFFFFFFFF)
 800e38e:	f04f 30ff 	mov.w	r0, #4294967295
 800e392:	4298      	cmp	r0, r3
 800e394:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800e398:	4193      	sbcs	r3, r2
 800e39a:	d202      	bcs.n	800e3a2 <VL53L1_f_041+0x60>
		xtalk_total_events = 0xFFFFFFFF;
 800e39c:	4601      	mov	r1, r0
 800e39e:	f04f 0e00 	mov.w	lr, #0





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e013      	b.n	800e3ce <VL53L1_f_041+0x8c>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 800e3a6:	1c83      	adds	r3, r0, #2
 800e3a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	fba3 2c01 	umull	r2, ip, r3, r1
 800e3b2:	fb03 cc0e 	mla	ip, r3, lr, ip
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 800e3b6:	f512 7200 	adds.w	r2, r2, #512	@ 0x200
 800e3ba:	f14c 0c00 	adc.w	ip, ip, #0
 800e3be:	0a92      	lsrs	r2, r2, #10
 800e3c0:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 800e3c4:	1d83      	adds	r3, r0, #6
 800e3c6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	b2c0      	uxtb	r0, r0
 800e3ce:	7aa3      	ldrb	r3, [r4, #10]
 800e3d0:	4283      	cmp	r3, r0
 800e3d2:	d8e8      	bhi.n	800e3a6 <VL53L1_f_041+0x64>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}

0800e3d8 <VL53L1_init_zone_config_histogram_bins>:

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 800e3d8:	2300      	movs	r3, #0
 800e3da:	e005      	b.n	800e3e8 <VL53L1_init_zone_config_histogram_bins+0x10>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 800e3dc:	18c2      	adds	r2, r0, r3
 800e3de:	2101      	movs	r1, #1
 800e3e0:	f882 105c 	strb.w	r1, [r2, #92]	@ 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 800e3e4:	440b      	add	r3, r1
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	7802      	ldrb	r2, [r0, #0]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d8f6      	bhi.n	800e3dc <VL53L1_init_zone_config_histogram_bins+0x4>

	LOG_FUNCTION_END(status);

	return status;
}
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	4770      	bx	lr

0800e3f2 <VL53L1_init_zone_config_structure>:
{
 800e3f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	4690      	mov	r8, r2
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800e402:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 800e406:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 800e40a:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 800e40e:	980e      	ldr	r0, [sp, #56]	@ 0x38
	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 800e410:	2310      	movs	r3, #16
 800e412:	7003      	strb	r3, [r0, #0]
	i = 0;
 800e414:	f04f 0c00 	mov.w	ip, #0
	for (x = 0 ; x < x_zones ; x++) {
 800e418:	4663      	mov	r3, ip
 800e41a:	e025      	b.n	800e468 <VL53L1_init_zone_config_structure+0x76>
			i++;
 800e41c:	f10c 0c01 	add.w	ip, ip, #1
 800e420:	fa1f fc8c 	uxth.w	ip, ip
		for (y = 0 ; y <  y_zones ; y++) {
 800e424:	f10a 0e01 	add.w	lr, sl, #1
 800e428:	fa5f fa8e 	uxtb.w	sl, lr
 800e42c:	4592      	cmp	sl, r2
 800e42e:	d219      	bcs.n	800e464 <VL53L1_init_zone_config_structure+0x72>
			if (i < VL53L1_MAX_USER_ZONES) {
 800e430:	f1bc 0f0f 	cmp.w	ip, #15
 800e434:	d8f2      	bhi.n	800e41c <VL53L1_init_zone_config_structure+0x2a>
				pdata->active_zones = (uint8_t)i;
 800e436:	f880 c001 	strb.w	ip, [r0, #1]
				pdata->user_zones[i].height   = height;
 800e43a:	f10c 0e06 	add.w	lr, ip, #6
 800e43e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800e442:	f88e 6007 	strb.w	r6, [lr, #7]
				pdata->user_zones[i].width    = width;
 800e446:	f88e 7006 	strb.w	r7, [lr, #6]
						x_off + (x * x_inc);
 800e44a:	fb13 fb04 	smulbb	fp, r3, r4
 800e44e:	fa55 fb8b 	uxtab	fp, r5, fp
				pdata->user_zones[i].x_centre =
 800e452:	f88e b004 	strb.w	fp, [lr, #4]
						y_off + (y * y_inc);
 800e456:	fb1a fb09 	smulbb	fp, sl, r9
 800e45a:	fa51 fb8b 	uxtab	fp, r1, fp
				pdata->user_zones[i].y_centre =
 800e45e:	f88e b005 	strb.w	fp, [lr, #5]
 800e462:	e7db      	b.n	800e41c <VL53L1_init_zone_config_structure+0x2a>
	for (x = 0 ; x < x_zones ; x++) {
 800e464:	3301      	adds	r3, #1
 800e466:	b2db      	uxtb	r3, r3
 800e468:	4543      	cmp	r3, r8
 800e46a:	d202      	bcs.n	800e472 <VL53L1_init_zone_config_structure+0x80>
		for (y = 0 ; y <  y_zones ; y++) {
 800e46c:	f04f 0a00 	mov.w	sl, #0
 800e470:	e7dc      	b.n	800e42c <VL53L1_init_zone_config_structure+0x3a>
	status = VL53L1_init_zone_config_histogram_bins(pdata);
 800e472:	f7ff ffb1 	bl	800e3d8 <VL53L1_init_zone_config_histogram_bins>
}
 800e476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e47a <VL53L1_zone_preset_xtalk_planar>:
{
 800e47a:	b508      	push	{r3, lr}
	pgeneral->global_config__stream_divider = 0x05;
 800e47c:	2305      	movs	r3, #5
 800e47e:	7043      	strb	r3, [r0, #1]
	pzone_cfg->active_zones                 = 0x04;
 800e480:	f04f 0c04 	mov.w	ip, #4
 800e484:	f881 c001 	strb.w	ip, [r1, #1]
	pzone_cfg->user_zones[0].height         = 15;
 800e488:	220f      	movs	r2, #15
 800e48a:	77ca      	strb	r2, [r1, #31]
	pzone_cfg->user_zones[0].width          = 7;
 800e48c:	2007      	movs	r0, #7
 800e48e:	7788      	strb	r0, [r1, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 800e490:	f881 c01c 	strb.w	ip, [r1, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 800e494:	2308      	movs	r3, #8
 800e496:	774b      	strb	r3, [r1, #29]
	pzone_cfg->user_zones[1].height         = 15;
 800e498:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
	pzone_cfg->user_zones[1].width          = 7;
 800e49c:	f881 0022 	strb.w	r0, [r1, #34]	@ 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 800e4a0:	f04f 0e0c 	mov.w	lr, #12
 800e4a4:	f881 e020 	strb.w	lr, [r1, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 800e4a8:	f881 3021 	strb.w	r3, [r1, #33]	@ 0x21
	pzone_cfg->user_zones[2].height         = 7;
 800e4ac:	f881 0027 	strb.w	r0, [r1, #39]	@ 0x27
	pzone_cfg->user_zones[2].width          = 15;
 800e4b0:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 800e4b4:	f881 3024 	strb.w	r3, [r1, #36]	@ 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 800e4b8:	f881 c025 	strb.w	ip, [r1, #37]	@ 0x25
	pzone_cfg->user_zones[3].height         = 7;
 800e4bc:	f881 002b 	strb.w	r0, [r1, #43]	@ 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 800e4c0:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 800e4c4:	f881 3028 	strb.w	r3, [r1, #40]	@ 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 800e4c8:	f881 e029 	strb.w	lr, [r1, #41]	@ 0x29
	pzone_cfg->user_zones[4].height         = 15;
 800e4cc:	f881 202f 	strb.w	r2, [r1, #47]	@ 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 800e4d0:	f881 202e 	strb.w	r2, [r1, #46]	@ 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 800e4d4:	f881 302c 	strb.w	r3, [r1, #44]	@ 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 800e4d8:	f881 302d 	strb.w	r3, [r1, #45]	@ 0x2d
	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 800e4dc:	4608      	mov	r0, r1
 800e4de:	f7ff ff7b 	bl	800e3d8 <VL53L1_init_zone_config_histogram_bins>
}
 800e4e2:	bd08      	pop	{r3, pc}

0800e4e4 <VL53L1CB_DeInit>:
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
  int32_t ret = VL53L1CB_ERROR;

  if (pObj->IsInitialized == 1U)
 800e4e4:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800e4e8:	f893 3f70 	ldrb.w	r3, [r3, #3952]	@ 0xf70
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d109      	bne.n	800e504 <VL53L1CB_DeInit+0x20>
{
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	4604      	mov	r4, r0
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 800e4f4:	6843      	ldr	r3, [r0, #4]
 800e4f6:	4798      	blx	r3
 800e4f8:	b938      	cbnz	r0, 800e50a <VL53L1CB_DeInit+0x26>
      ret = VL53L1CB_ERROR;
    }
    else
    {
      ret = VL53L1CB_OK;
      pObj->IsInitialized = 0;
 800e4fa:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e4fe:	f884 0f70 	strb.w	r0, [r4, #3952]	@ 0xf70
    }
  }

  return ret;
}
 800e502:	bd10      	pop	{r4, pc}
  int32_t ret = VL53L1CB_ERROR;
 800e504:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e508:	4770      	bx	lr
      ret = VL53L1CB_ERROR;
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e50e:	e7f8      	b.n	800e502 <VL53L1CB_DeInit+0x1e>

0800e510 <VL53L1CB_GetCapabilities>:
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 800e510:	b140      	cbz	r0, 800e524 <VL53L1CB_GetCapabilities+0x14>
 800e512:	b151      	cbz	r1, 800e52a <VL53L1CB_GetCapabilities+0x1a>
  {
    ret = VL53L1CB_INVALID_PARAM;
  }
  else
  {
    pCap->NumberOfZones = 1;
 800e514:	2301      	movs	r3, #1
 800e516:	600b      	str	r3, [r1, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 800e518:	2204      	movs	r2, #4
 800e51a:	604a      	str	r2, [r1, #4]
    pCap->CustomROI = 1;
 800e51c:	608b      	str	r3, [r1, #8]
    pCap->ThresholdDetection = 0;
 800e51e:	2000      	movs	r0, #0
 800e520:	60c8      	str	r0, [r1, #12]

    ret = VL53L1CB_OK;
 800e522:	4770      	bx	lr
    ret = VL53L1CB_INVALID_PARAM;
 800e524:	f06f 0001 	mvn.w	r0, #1
 800e528:	4770      	bx	lr
 800e52a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800e52e:	4770      	bx	lr

0800e530 <VL53L1CB_ConfigIT>:
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
}
 800e530:	f06f 0003 	mvn.w	r0, #3
 800e534:	4770      	bx	lr

0800e536 <VL53L1CB_GetAddress>:
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 800e536:	b120      	cbz	r0, 800e542 <VL53L1CB_GetAddress+0xc>
 800e538:	b131      	cbz	r1, 800e548 <VL53L1CB_GetAddress+0x12>
  {
    ret = VL53L1CB_INVALID_PARAM;
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800e53a:	8903      	ldrh	r3, [r0, #8]
 800e53c:	600b      	str	r3, [r1, #0]
    ret = VL53L1CB_OK;
 800e53e:	2000      	movs	r0, #0
 800e540:	4770      	bx	lr
    ret = VL53L1CB_INVALID_PARAM;
 800e542:	f06f 0001 	mvn.w	r0, #1
 800e546:	4770      	bx	lr
 800e548:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800e54c:	4770      	bx	lr

0800e54e <VL53L1CB_SetPowerMode>:
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
}
 800e54e:	f06f 0003 	mvn.w	r0, #3
 800e552:	4770      	bx	lr

0800e554 <VL53L1CB_GetPowerMode>:
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
}
 800e554:	f06f 0003 	mvn.w	r0, #3
 800e558:	4770      	bx	lr

0800e55a <VL53L1CB_Init>:
  if (pObj->IsInitialized != 0U)
 800e55a:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800e55e:	f893 3f70 	ldrb.w	r3, [r3, #3952]	@ 0xf70
 800e562:	bb03      	cbnz	r3, 800e5a6 <VL53L1CB_Init+0x4c>
{
 800e564:	b510      	push	{r4, lr}
 800e566:	4604      	mov	r4, r0
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 800e568:	f7f5 fdaa 	bl	80040c0 <VL53L1_WaitDeviceBooted>
 800e56c:	b9f0      	cbnz	r0, 800e5ac <VL53L1CB_Init+0x52>
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 800e56e:	4620      	mov	r0, r4
 800e570:	f7f5 fe31 	bl	80041d6 <VL53L1_DataInit>
 800e574:	b9e8      	cbnz	r0, 800e5b2 <VL53L1CB_Init+0x58>
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 800e576:	4620      	mov	r0, r4
 800e578:	f7f6 fdb6 	bl	80050e8 <VL53L1_StaticInit>
 800e57c:	b9e0      	cbnz	r0, 800e5b8 <VL53L1CB_Init+0x5e>
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 800e57e:	4620      	mov	r0, r4
 800e580:	f7f6 fd10 	bl	8004fa4 <VL53L1_PerformRefSpadManagement>
 800e584:	b9d8      	cbnz	r0, 800e5be <VL53L1CB_Init+0x64>
    pObj->IsRanging = 0;
 800e586:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e58a:	f884 0f71 	strb.w	r0, [r4, #3953]	@ 0xf71
    pObj->IsBlocking = 0;
 800e58e:	f884 0f72 	strb.w	r0, [r4, #3954]	@ 0xf72
    pObj->IsContinuous = 0;
 800e592:	f884 0f73 	strb.w	r0, [r4, #3955]	@ 0xf73
    pObj->IsAmbientEnabled = 0;
 800e596:	f884 0f74 	strb.w	r0, [r4, #3956]	@ 0xf74
    pObj->IsSignalEnabled = 0;
 800e59a:	f884 0f75 	strb.w	r0, [r4, #3957]	@ 0xf75
    pObj->IsInitialized = 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	f884 3f70 	strb.w	r3, [r4, #3952]	@ 0xf70
}
 800e5a4:	bd10      	pop	{r4, pc}
    ret =  VL53L1CB_ERROR;
 800e5a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e5aa:	4770      	bx	lr
    ret =  VL53L1CB_ERROR;
 800e5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b0:	e7f8      	b.n	800e5a4 <VL53L1CB_Init+0x4a>
    ret = VL53L1CB_ERROR;
 800e5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b6:	e7f5      	b.n	800e5a4 <VL53L1CB_Init+0x4a>
    ret = VL53L1CB_ERROR;
 800e5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5bc:	e7f2      	b.n	800e5a4 <VL53L1CB_Init+0x4a>
    ret = VL53L1CB_ERROR;
 800e5be:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e5c2:	e7ef      	b.n	800e5a4 <VL53L1CB_Init+0x4a>

0800e5c4 <VL53L1CB_ReadID>:
  if ((pObj == NULL) || (pId == NULL))
 800e5c4:	b148      	cbz	r0, 800e5da <VL53L1CB_ReadID+0x16>
{
 800e5c6:	b508      	push	{r3, lr}
 800e5c8:	460a      	mov	r2, r1
  if ((pObj == NULL) || (pId == NULL))
 800e5ca:	b149      	cbz	r1, 800e5e0 <VL53L1CB_ReadID+0x1c>
    *pId = 0;
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	6011      	str	r1, [r2, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 800e5d0:	f240 110f 	movw	r1, #271	@ 0x10f
 800e5d4:	f7fe feea 	bl	800d3ac <VL53L1_RdWord>
}
 800e5d8:	bd08      	pop	{r3, pc}
    ret = VL53L1CB_INVALID_PARAM;
 800e5da:	f06f 0001 	mvn.w	r0, #1
}
 800e5de:	4770      	bx	lr
    ret = VL53L1CB_INVALID_PARAM;
 800e5e0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800e5e4:	e7f8      	b.n	800e5d8 <VL53L1CB_ReadID+0x14>

0800e5e6 <VL53L1CB_ConfigProfile>:
  if ((pObj != NULL) && (pConfig != NULL))
 800e5e6:	b318      	cbz	r0, 800e630 <VL53L1CB_ConfigProfile+0x4a>
{
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	4605      	mov	r5, r0
  if ((pObj != NULL) && (pConfig != NULL))
 800e5ee:	b311      	cbz	r1, 800e636 <VL53L1CB_ConfigProfile+0x50>
    ranging_profile = pConfig->RangingProfile;
 800e5f0:	7809      	ldrb	r1, [r1, #0]
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 800e5f2:	1e4b      	subs	r3, r1, #1
 800e5f4:	b2db      	uxtb	r3, r3
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d820      	bhi.n	800e63c <VL53L1CB_ConfigProfile+0x56>
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 800e5fa:	f7f5 fd67 	bl	80040cc <VL53L1_SetDistanceMode>
 800e5fe:	bb00      	cbnz	r0, 800e642 <VL53L1CB_ConfigProfile+0x5c>
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 800e600:	6863      	ldr	r3, [r4, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800e602:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e606:	fb03 f101 	mul.w	r1, r3, r1
 800e60a:	4628      	mov	r0, r5
 800e60c:	f7f6 fa94 	bl	8004b38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800e610:	b9d0      	cbnz	r0, 800e648 <VL53L1CB_ConfigProfile+0x62>
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800e612:	68e3      	ldr	r3, [r4, #12]
 800e614:	3b00      	subs	r3, #0
 800e616:	bf18      	it	ne
 800e618:	2301      	movne	r3, #1
 800e61a:	f505 45c0 	add.w	r5, r5, #24576	@ 0x6000
 800e61e:	f885 3f74 	strb.w	r3, [r5, #3956]	@ 0xf74
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800e622:	6923      	ldr	r3, [r4, #16]
 800e624:	3b00      	subs	r3, #0
 800e626:	bf18      	it	ne
 800e628:	2301      	movne	r3, #1
 800e62a:	f885 3f75 	strb.w	r3, [r5, #3957]	@ 0xf75
}
 800e62e:	bd38      	pop	{r3, r4, r5, pc}
    return VL53L1CB_INVALID_PARAM;
 800e630:	f06f 0001 	mvn.w	r0, #1
}
 800e634:	4770      	bx	lr
    return VL53L1CB_INVALID_PARAM;
 800e636:	f06f 0001 	mvn.w	r0, #1
 800e63a:	e7f8      	b.n	800e62e <VL53L1CB_ConfigProfile+0x48>
    ret = VL53L1CB_INVALID_PARAM;
 800e63c:	f06f 0001 	mvn.w	r0, #1
 800e640:	e7f5      	b.n	800e62e <VL53L1CB_ConfigProfile+0x48>
    ret = VL53L1CB_ERROR;
 800e642:	f04f 30ff 	mov.w	r0, #4294967295
 800e646:	e7f2      	b.n	800e62e <VL53L1CB_ConfigProfile+0x48>
    ret = VL53L1CB_ERROR;
 800e648:	f04f 30ff 	mov.w	r0, #4294967295
 800e64c:	e7ef      	b.n	800e62e <VL53L1CB_ConfigProfile+0x48>

0800e64e <VL53L1CB_ConfigROI>:
  if ((pObj == NULL) || (pROIConfig == NULL))
 800e64e:	b1e0      	cbz	r0, 800e68a <VL53L1CB_ConfigROI+0x3c>
 800e650:	b1f1      	cbz	r1, 800e690 <VL53L1CB_ConfigROI+0x42>
{
 800e652:	b500      	push	{lr}
 800e654:	b093      	sub	sp, #76	@ 0x4c
    roi_settings.NumberOfRoi = 1;
 800e656:	2201      	movs	r2, #1
 800e658:	f88d 2004 	strb.w	r2, [sp, #4]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 800e65c:	788a      	ldrb	r2, [r1, #2]
 800e65e:	f88d 2007 	strb.w	r2, [sp, #7]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 800e662:	78ca      	ldrb	r2, [r1, #3]
 800e664:	f88d 2008 	strb.w	r2, [sp, #8]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 800e668:	780a      	ldrb	r2, [r1, #0]
 800e66a:	f88d 2005 	strb.w	r2, [sp, #5]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 800e66e:	784a      	ldrb	r2, [r1, #1]
 800e670:	f88d 2006 	strb.w	r2, [sp, #6]
    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 800e674:	a901      	add	r1, sp, #4
 800e676:	f7f6 f9f1 	bl	8004a5c <VL53L1_SetROI>
 800e67a:	b918      	cbnz	r0, 800e684 <VL53L1CB_ConfigROI+0x36>
      ret = VL53L1CB_OK;
 800e67c:	2000      	movs	r0, #0
}
 800e67e:	b013      	add	sp, #76	@ 0x4c
 800e680:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = VL53L1CB_ERROR;
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	e7f9      	b.n	800e67e <VL53L1CB_ConfigROI+0x30>
    ret = VL53L1CB_INVALID_PARAM;
 800e68a:	f06f 0001 	mvn.w	r0, #1
 800e68e:	4770      	bx	lr
 800e690:	f06f 0001 	mvn.w	r0, #1
}
 800e694:	4770      	bx	lr

0800e696 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 800e696:	b570      	push	{r4, r5, r6, lr}
 800e698:	b082      	sub	sp, #8
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	f88d 3007 	strb.w	r3, [sp, #7]

  if (pObj == NULL)
 800e6a0:	b1a8      	cbz	r0, 800e6ce <vl53l1cb_poll_for_measurement+0x38>
 800e6a2:	460e      	mov	r6, r1
 800e6a4:	4604      	mov	r4, r0
  {
    return VL53L1CB_INVALID_PARAM;
  }

  TickStart = pObj->IO.GetTick();
 800e6a6:	6943      	ldr	r3, [r0, #20]
 800e6a8:	4798      	blx	r3
 800e6aa:	4605      	mov	r5, r0

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 800e6ac:	f10d 0107 	add.w	r1, sp, #7
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7f6 fc4c 	bl	8004f4e <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 800e6b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d00a      	beq.n	800e6d4 <vl53l1cb_poll_for_measurement+0x3e>
    {
      return VL53L1CB_OK;
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 800e6be:	6963      	ldr	r3, [r4, #20]
 800e6c0:	4798      	blx	r3
 800e6c2:	1b40      	subs	r0, r0, r5
 800e6c4:	42b0      	cmp	r0, r6
 800e6c6:	d3f1      	bcc.n	800e6ac <vl53l1cb_poll_for_measurement+0x16>

  return VL53L1CB_TIMEOUT;
 800e6c8:	f06f 0002 	mvn.w	r0, #2
 800e6cc:	e003      	b.n	800e6d6 <vl53l1cb_poll_for_measurement+0x40>
    return VL53L1CB_INVALID_PARAM;
 800e6ce:	f06f 0001 	mvn.w	r0, #1
 800e6d2:	e000      	b.n	800e6d6 <vl53l1cb_poll_for_measurement+0x40>
      return VL53L1CB_OK;
 800e6d4:	2000      	movs	r0, #0
}
 800e6d6:	b002      	add	sp, #8
 800e6d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6dc <vl53l1cb_get_result>:
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	f000 80ac 	beq.w	800e83a <vl53l1cb_get_result+0x15e>
{
 800e6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	4605      	mov	r5, r0
  if ((pObj == NULL) || (pResult == NULL))
 800e6e8:	2900      	cmp	r1, #0
 800e6ea:	f000 80a9 	beq.w	800e840 <vl53l1cb_get_result+0x164>
  {
    ret = VL53L1CB_INVALID_PARAM;
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 800e6ee:	4957      	ldr	r1, [pc, #348]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e6f0:	f7f6 fc31 	bl	8004f56 <VL53L1_GetMultiRangingData>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	f040 80a6 	bne.w	800e846 <vl53l1cb_get_result+0x16a>
  {
    ret = VL53L1CB_ERROR;
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 800e6fa:	2600      	movs	r6, #0
 800e6fc:	e098      	b.n	800e830 <vl53l1cb_get_result+0x154>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 800e6fe:	4632      	mov	r2, r6
 800e700:	4b52      	ldr	r3, [pc, #328]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e702:	7999      	ldrb	r1, [r3, #6]
 800e704:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 800e708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e70c:	6059      	str	r1, [r3, #4]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 800e70e:	4633      	mov	r3, r6
 800e710:	e031      	b.n	800e776 <vl53l1cb_get_result+0x9a>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 800e712:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e716:	4418      	add	r0, r3
 800e718:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e71c:	2700      	movs	r7, #0
 800e71e:	6087      	str	r7, [r0, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 800e720:	f505 40c0 	add.w	r0, r5, #24576	@ 0x6000
 800e724:	f890 0f74 	ldrb.w	r0, [r0, #3956]	@ 0xf74
 800e728:	2801      	cmp	r0, #1
 800e72a:	d039      	beq.n	800e7a0 <vl53l1cb_get_result+0xc4>
          spad_count = data.EffectiveSpadRtnCount >> 8;
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800e72c:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e730:	4408      	add	r0, r1
 800e732:	3008      	adds	r0, #8
 800e734:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e738:	2700      	movs	r7, #0
 800e73a:	6087      	str	r7, [r0, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 800e73c:	f505 40c0 	add.w	r0, r5, #24576	@ 0x6000
 800e740:	f890 0f75 	ldrb.w	r0, [r0, #3957]	@ 0xf75
 800e744:	2801      	cmp	r0, #1
 800e746:	d04e      	beq.n	800e7e6 <vl53l1cb_get_result+0x10a>
          spad_count = data.EffectiveSpadRtnCount >> 8;
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 800e748:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e74c:	4408      	add	r0, r1
 800e74e:	300c      	adds	r0, #12
 800e750:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e754:	2700      	movs	r7, #0
 800e756:	6087      	str	r7, [r0, #8]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 800e758:	ebc1 07c1 	rsb	r7, r1, r1, lsl #3
 800e75c:	483b      	ldr	r0, [pc, #236]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e75e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800e762:	7fc7      	ldrb	r7, [r0, #31]
 800e764:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e768:	4408      	add	r0, r1
 800e76a:	3004      	adds	r0, #4
 800e76c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e770:	6087      	str	r7, [r0, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 800e772:	3301      	adds	r3, #1
 800e774:	b2db      	uxtb	r3, r3
 800e776:	4935      	ldr	r1, [pc, #212]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e778:	7989      	ldrb	r1, [r1, #6]
 800e77a:	4299      	cmp	r1, r3
 800e77c:	d956      	bls.n	800e82c <vl53l1cb_get_result+0x150>
        if (data.RangeData[j].RangeMilliMeter < 0)
 800e77e:	4619      	mov	r1, r3
 800e780:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
 800e784:	4831      	ldr	r0, [pc, #196]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e786:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800e78a:	f9b0 701c 	ldrsh.w	r7, [r0, #28]
 800e78e:	2f00      	cmp	r7, #0
 800e790:	dbbf      	blt.n	800e712 <vl53l1cb_get_result+0x36>
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 800e792:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e796:	4418      	add	r0, r3
 800e798:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e79c:	6087      	str	r7, [r0, #8]
 800e79e:	e7bf      	b.n	800e720 <vl53l1cb_get_result+0x44>
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 800e7a0:	4f2a      	ldr	r7, [pc, #168]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e7a2:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 800e7a6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800e7aa:	edd0 7a05 	vldr	s15, [r0, #20]
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800e850 <vl53l1cb_get_result+0x174>
 800e7b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e854 <vl53l1cb_get_result+0x178>
 800e7be:	ee67 7a87 	vmul.f32	s15, s15, s14
          spad_count = data.EffectiveSpadRtnCount >> 8;
 800e7c2:	f8b7 007a 	ldrh.w	r0, [r7, #122]	@ 0x7a
 800e7c6:	0a00      	lsrs	r0, r0, #8
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 800e7c8:	ee07 0a10 	vmov	s14, r0
 800e7cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e7d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e7d4:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e7d8:	4408      	add	r0, r1
 800e7da:	3008      	adds	r0, #8
 800e7dc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e7e0:	edc0 6a02 	vstr	s13, [r0, #8]
 800e7e4:	e7aa      	b.n	800e73c <vl53l1cb_get_result+0x60>
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 800e7e6:	4f19      	ldr	r7, [pc, #100]	@ (800e84c <vl53l1cb_get_result+0x170>)
 800e7e8:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 800e7ec:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800e7f0:	edd0 7a04 	vldr	s15, [r0, #16]
 800e7f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7f8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800e850 <vl53l1cb_get_result+0x174>
 800e7fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e800:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800e854 <vl53l1cb_get_result+0x178>
 800e804:	ee67 7a87 	vmul.f32	s15, s15, s14
          spad_count = data.EffectiveSpadRtnCount >> 8;
 800e808:	f8b7 007a 	ldrh.w	r0, [r7, #122]	@ 0x7a
 800e80c:	0a00      	lsrs	r0, r0, #8
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 800e80e:	ee07 0a10 	vmov	s14, r0
 800e812:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e816:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e81a:	eb02 1002 	add.w	r0, r2, r2, lsl #4
 800e81e:	4408      	add	r0, r1
 800e820:	300c      	adds	r0, #12
 800e822:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e826:	edc0 6a02 	vstr	s13, [r0, #8]
 800e82a:	e795      	b.n	800e758 <vl53l1cb_get_result+0x7c>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 800e82c:	3601      	adds	r6, #1
 800e82e:	b2f6      	uxtb	r6, r6
 800e830:	2e00      	cmp	r6, #0
 800e832:	f43f af64 	beq.w	800e6fe <vl53l1cb_get_result+0x22>
      }
    }

    ret = VL53L1CB_OK;
 800e836:	2000      	movs	r0, #0
  }

  return ret;
}
 800e838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = VL53L1CB_INVALID_PARAM;
 800e83a:	f06f 0001 	mvn.w	r0, #1
}
 800e83e:	4770      	bx	lr
    ret = VL53L1CB_INVALID_PARAM;
 800e840:	f06f 0001 	mvn.w	r0, #1
 800e844:	e7f8      	b.n	800e838 <vl53l1cb_get_result+0x15c>
    ret = VL53L1CB_ERROR;
 800e846:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e84a:	e7f5      	b.n	800e838 <vl53l1cb_get_result+0x15c>
 800e84c:	200153f8 	.word	0x200153f8
 800e850:	37800000 	.word	0x37800000
 800e854:	447a0000 	.word	0x447a0000

0800e858 <VL53L1CB_GetDistance>:
  if ((pObj == NULL) || (pResult == NULL))
 800e858:	b338      	cbz	r0, 800e8aa <VL53L1CB_GetDistance+0x52>
{
 800e85a:	b538      	push	{r3, r4, r5, lr}
 800e85c:	460d      	mov	r5, r1
 800e85e:	4604      	mov	r4, r0
  if ((pObj == NULL) || (pResult == NULL))
 800e860:	b331      	cbz	r1, 800e8b0 <VL53L1CB_GetDistance+0x58>
  else if (pObj->IsRanging == 0U)
 800e862:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800e866:	f893 3f71 	ldrb.w	r3, [r3, #3953]	@ 0xf71
 800e86a:	b323      	cbz	r3, 800e8b6 <VL53L1CB_GetDistance+0x5e>
    if (pObj->IsBlocking == 1U)
 800e86c:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800e870:	f893 3f72 	ldrb.w	r3, [r3, #3954]	@ 0xf72
 800e874:	2b01      	cmp	r3, #1
 800e876:	d004      	beq.n	800e882 <VL53L1CB_GetDistance+0x2a>
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 800e878:	2100      	movs	r1, #0
 800e87a:	f7ff ff0c 	bl	800e696 <vl53l1cb_poll_for_measurement>
    if (ret == VL53L1CB_OK)
 800e87e:	b128      	cbz	r0, 800e88c <VL53L1CB_GetDistance+0x34>
}
 800e880:	bd38      	pop	{r3, r4, r5, pc}
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 800e882:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e886:	f7ff ff06 	bl	800e696 <vl53l1cb_poll_for_measurement>
 800e88a:	e7f8      	b.n	800e87e <VL53L1CB_GetDistance+0x26>
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 800e88c:	4629      	mov	r1, r5
 800e88e:	4620      	mov	r0, r4
 800e890:	f7ff ff24 	bl	800e6dc <vl53l1cb_get_result>
 800e894:	b990      	cbnz	r0, 800e8bc <VL53L1CB_GetDistance+0x64>
      else if (pObj->IsContinuous == 1U)
 800e896:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800e89a:	f893 3f73 	ldrb.w	r3, [r3, #3955]	@ 0xf73
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d1ee      	bne.n	800e880 <VL53L1CB_GetDistance+0x28>
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f7f6 fb4e 	bl	8004f44 <VL53L1_ClearInterruptAndStartMeasurement>
 800e8a8:	e7ea      	b.n	800e880 <VL53L1CB_GetDistance+0x28>
    ret = VL53L1CB_INVALID_PARAM;
 800e8aa:	f06f 0001 	mvn.w	r0, #1
}
 800e8ae:	4770      	bx	lr
    ret = VL53L1CB_INVALID_PARAM;
 800e8b0:	f06f 0001 	mvn.w	r0, #1
 800e8b4:	e7e4      	b.n	800e880 <VL53L1CB_GetDistance+0x28>
    ret = VL53L1CB_ERROR;
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ba:	e7e1      	b.n	800e880 <VL53L1CB_GetDistance+0x28>
        ret = VL53L1CB_ERROR;
 800e8bc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e8c0:	e7de      	b.n	800e880 <VL53L1CB_GetDistance+0x28>

0800e8c2 <VL53L1CB_Start>:
  if (pObj == NULL)
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d045      	beq.n	800e952 <VL53L1CB_Start+0x90>
{
 800e8c6:	b538      	push	{r3, r4, r5, lr}
 800e8c8:	460d      	mov	r5, r1
 800e8ca:	4604      	mov	r4, r0
  else if (pObj->IsRanging == 1U)
 800e8cc:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800e8d0:	f893 3f71 	ldrb.w	r3, [r3, #3953]	@ 0xf71
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d03f      	beq.n	800e958 <VL53L1CB_Start+0x96>
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 800e8d8:	f7f6 fa92 	bl	8004e00 <VL53L1_StartMeasurement>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d13e      	bne.n	800e95e <VL53L1CB_Start+0x9c>
    pObj->IsRanging = 1;
 800e8e0:	f504 43c0 	add.w	r3, r4, #24576	@ 0x6000
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 2f71 	strb.w	r2, [r3, #3953]	@ 0xf71
    ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7f6 fb2a 	bl	8004f44 <VL53L1_ClearInterruptAndStartMeasurement>
    switch (Mode)
 800e8f0:	1e69      	subs	r1, r5, #1
 800e8f2:	2903      	cmp	r1, #3
 800e8f4:	d825      	bhi.n	800e942 <VL53L1CB_Start+0x80>
 800e8f6:	e8df f001 	tbb	[pc, r1]
 800e8fa:	0a02      	.short	0x0a02
 800e8fc:	1c13      	.short	0x1c13
      pObj->IsContinuous = 1U;
 800e8fe:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e902:	2301      	movs	r3, #1
 800e904:	f884 3f73 	strb.w	r3, [r4, #3955]	@ 0xf73
      pObj->IsBlocking = 1U;
 800e908:	f884 3f72 	strb.w	r3, [r4, #3954]	@ 0xf72
}
 800e90c:	bd38      	pop	{r3, r4, r5, pc}
      pObj->IsContinuous = 0U;
 800e90e:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e912:	2300      	movs	r3, #0
 800e914:	f884 3f73 	strb.w	r3, [r4, #3955]	@ 0xf73
      pObj->IsBlocking = 1U;
 800e918:	2301      	movs	r3, #1
 800e91a:	f884 3f72 	strb.w	r3, [r4, #3954]	@ 0xf72
      break;
 800e91e:	e7f5      	b.n	800e90c <VL53L1CB_Start+0x4a>
      pObj->IsContinuous = 1U;
 800e920:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e924:	2301      	movs	r3, #1
 800e926:	f884 3f73 	strb.w	r3, [r4, #3955]	@ 0xf73
      pObj->IsBlocking = 0U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	f884 3f72 	strb.w	r3, [r4, #3954]	@ 0xf72
      break;
 800e930:	e7ec      	b.n	800e90c <VL53L1CB_Start+0x4a>
      pObj->IsContinuous = 0U;
 800e932:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e936:	2300      	movs	r3, #0
 800e938:	f884 3f73 	strb.w	r3, [r4, #3955]	@ 0xf73
      pObj->IsBlocking = 0U;
 800e93c:	f884 3f72 	strb.w	r3, [r4, #3954]	@ 0xf72
      break;
 800e940:	e7e4      	b.n	800e90c <VL53L1CB_Start+0x4a>
      pObj->IsRanging = 0U;
 800e942:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e946:	2300      	movs	r3, #0
 800e948:	f884 3f71 	strb.w	r3, [r4, #3953]	@ 0xf71
      ret = VL53L1CB_INVALID_PARAM;
 800e94c:	f06f 0001 	mvn.w	r0, #1
      break;
 800e950:	e7dc      	b.n	800e90c <VL53L1CB_Start+0x4a>
    ret = VL53L1CB_INVALID_PARAM;
 800e952:	f06f 0001 	mvn.w	r0, #1
}
 800e956:	4770      	bx	lr
    ret = VL53L1CB_ERROR;
 800e958:	f04f 30ff 	mov.w	r0, #4294967295
 800e95c:	e7d6      	b.n	800e90c <VL53L1CB_Start+0x4a>
    ret = VL53L1CB_ERROR;
 800e95e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e962:	e7d3      	b.n	800e90c <VL53L1CB_Start+0x4a>

0800e964 <VL53L1CB_Stop>:
  if (pObj == NULL)
 800e964:	b170      	cbz	r0, 800e984 <VL53L1CB_Stop+0x20>
{
 800e966:	b510      	push	{r4, lr}
 800e968:	4604      	mov	r4, r0
  else if (pObj->IsRanging == 0U)
 800e96a:	f500 43c0 	add.w	r3, r0, #24576	@ 0x6000
 800e96e:	f893 3f71 	ldrb.w	r3, [r3, #3953]	@ 0xf71
 800e972:	b153      	cbz	r3, 800e98a <VL53L1CB_Stop+0x26>
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 800e974:	f7f6 fad2 	bl	8004f1c <VL53L1_StopMeasurement>
 800e978:	b950      	cbnz	r0, 800e990 <VL53L1CB_Stop+0x2c>
    pObj->IsRanging = 0U;
 800e97a:	f504 44c0 	add.w	r4, r4, #24576	@ 0x6000
 800e97e:	f884 0f71 	strb.w	r0, [r4, #3953]	@ 0xf71
}
 800e982:	bd10      	pop	{r4, pc}
    ret = VL53L1CB_INVALID_PARAM;
 800e984:	f06f 0001 	mvn.w	r0, #1
}
 800e988:	4770      	bx	lr
	  ret = VL53L1CB_ERROR;
 800e98a:	f04f 30ff 	mov.w	r0, #4294967295
 800e98e:	e7f8      	b.n	800e982 <VL53L1CB_Stop+0x1e>
    ret = VL53L1CB_ERROR;
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e994:	e7f5      	b.n	800e982 <VL53L1CB_Stop+0x1e>

0800e996 <VL53L1CB_SetAddress>:
  if (pObj == NULL)
 800e996:	b140      	cbz	r0, 800e9aa <VL53L1CB_SetAddress+0x14>
{
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	460c      	mov	r4, r1
 800e99c:	4605      	mov	r5, r0
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 800e99e:	b2c9      	uxtb	r1, r1
 800e9a0:	f7f5 fb84 	bl	80040ac <VL53L1_SetDeviceAddress>
 800e9a4:	b920      	cbnz	r0, 800e9b0 <VL53L1CB_SetAddress+0x1a>
    pObj->IO.Address = (uint16_t) Address;
 800e9a6:	812c      	strh	r4, [r5, #8]
}
 800e9a8:	bd38      	pop	{r3, r4, r5, pc}
    ret = VL53L1CB_INVALID_PARAM;
 800e9aa:	f06f 0001 	mvn.w	r0, #1
}
 800e9ae:	4770      	bx	lr
    ret = VL53L1CB_ERROR;
 800e9b0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e9b4:	e7f8      	b.n	800e9a8 <VL53L1CB_SetAddress+0x12>

0800e9b6 <VL53L1CB_RegisterBusIO>:
  if (pObj == NULL)
 800e9b6:	b180      	cbz	r0, 800e9da <VL53L1CB_RegisterBusIO+0x24>
{
 800e9b8:	b508      	push	{r3, lr}
 800e9ba:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 800e9bc:	680a      	ldr	r2, [r1, #0]
 800e9be:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e9c0:	6848      	ldr	r0, [r1, #4]
 800e9c2:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e9c4:	8908      	ldrh	r0, [r1, #8]
 800e9c6:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e9c8:	68c8      	ldr	r0, [r1, #12]
 800e9ca:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e9cc:	6908      	ldr	r0, [r1, #16]
 800e9ce:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e9d0:	6949      	ldr	r1, [r1, #20]
 800e9d2:	6159      	str	r1, [r3, #20]
    if (pObj->IO.Init != NULL)
 800e9d4:	b122      	cbz	r2, 800e9e0 <VL53L1CB_RegisterBusIO+0x2a>
      ret = pObj->IO.Init();
 800e9d6:	4790      	blx	r2
}
 800e9d8:	bd08      	pop	{r3, pc}
    ret = VL53L1CB_INVALID_PARAM;
 800e9da:	f06f 0001 	mvn.w	r0, #1
}
 800e9de:	4770      	bx	lr
      ret = VL53L1CB_ERROR;
 800e9e0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800e9e4:	e7f8      	b.n	800e9d8 <VL53L1CB_RegisterBusIO+0x22>
	...

0800e9e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e9e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ea20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e9ec:	f7f5 f980 	bl	8003cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e9f0:	480c      	ldr	r0, [pc, #48]	@ (800ea24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e9f2:	490d      	ldr	r1, [pc, #52]	@ (800ea28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800ea2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e9f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e9f8:	e002      	b.n	800ea00 <LoopCopyDataInit>

0800e9fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e9fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e9fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e9fe:	3304      	adds	r3, #4

0800ea00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ea00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ea02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ea04:	d3f9      	bcc.n	800e9fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ea06:	4a0a      	ldr	r2, [pc, #40]	@ (800ea30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ea08:	4c0a      	ldr	r4, [pc, #40]	@ (800ea34 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ea0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ea0c:	e001      	b.n	800ea12 <LoopFillZerobss>

0800ea0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ea0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ea10:	3204      	adds	r2, #4

0800ea12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ea12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ea14:	d3fb      	bcc.n	800ea0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ea16:	f000 f82b 	bl	800ea70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ea1a:	f7f2 fdbd 	bl	8001598 <main>
  bx  lr    
 800ea1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ea20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ea24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ea28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800ea2c:	0800ee30 	.word	0x0800ee30
  ldr r2, =_sbss
 800ea30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800ea34:	20015478 	.word	0x20015478

0800ea38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ea38:	e7fe      	b.n	800ea38 <ADC_IRQHandler>

0800ea3a <memset>:
 800ea3a:	4402      	add	r2, r0
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d100      	bne.n	800ea44 <memset+0xa>
 800ea42:	4770      	bx	lr
 800ea44:	f803 1b01 	strb.w	r1, [r3], #1
 800ea48:	e7f9      	b.n	800ea3e <memset+0x4>

0800ea4a <strncpy>:
 800ea4a:	b510      	push	{r4, lr}
 800ea4c:	3901      	subs	r1, #1
 800ea4e:	4603      	mov	r3, r0
 800ea50:	b132      	cbz	r2, 800ea60 <strncpy+0x16>
 800ea52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea56:	f803 4b01 	strb.w	r4, [r3], #1
 800ea5a:	3a01      	subs	r2, #1
 800ea5c:	2c00      	cmp	r4, #0
 800ea5e:	d1f7      	bne.n	800ea50 <strncpy+0x6>
 800ea60:	441a      	add	r2, r3
 800ea62:	2100      	movs	r1, #0
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d100      	bne.n	800ea6a <strncpy+0x20>
 800ea68:	bd10      	pop	{r4, pc}
 800ea6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea6e:	e7f9      	b.n	800ea64 <strncpy+0x1a>

0800ea70 <__libc_init_array>:
 800ea70:	b570      	push	{r4, r5, r6, lr}
 800ea72:	4d0d      	ldr	r5, [pc, #52]	@ (800eaa8 <__libc_init_array+0x38>)
 800ea74:	4c0d      	ldr	r4, [pc, #52]	@ (800eaac <__libc_init_array+0x3c>)
 800ea76:	1b64      	subs	r4, r4, r5
 800ea78:	10a4      	asrs	r4, r4, #2
 800ea7a:	2600      	movs	r6, #0
 800ea7c:	42a6      	cmp	r6, r4
 800ea7e:	d109      	bne.n	800ea94 <__libc_init_array+0x24>
 800ea80:	4d0b      	ldr	r5, [pc, #44]	@ (800eab0 <__libc_init_array+0x40>)
 800ea82:	4c0c      	ldr	r4, [pc, #48]	@ (800eab4 <__libc_init_array+0x44>)
 800ea84:	f000 f9a4 	bl	800edd0 <_init>
 800ea88:	1b64      	subs	r4, r4, r5
 800ea8a:	10a4      	asrs	r4, r4, #2
 800ea8c:	2600      	movs	r6, #0
 800ea8e:	42a6      	cmp	r6, r4
 800ea90:	d105      	bne.n	800ea9e <__libc_init_array+0x2e>
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
 800ea94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea98:	4798      	blx	r3
 800ea9a:	3601      	adds	r6, #1
 800ea9c:	e7ee      	b.n	800ea7c <__libc_init_array+0xc>
 800ea9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaa2:	4798      	blx	r3
 800eaa4:	3601      	adds	r6, #1
 800eaa6:	e7f2      	b.n	800ea8e <__libc_init_array+0x1e>
 800eaa8:	0800ee28 	.word	0x0800ee28
 800eaac:	0800ee28 	.word	0x0800ee28
 800eab0:	0800ee28 	.word	0x0800ee28
 800eab4:	0800ee2c 	.word	0x0800ee2c

0800eab8 <memcpy>:
 800eab8:	440a      	add	r2, r1
 800eaba:	4291      	cmp	r1, r2
 800eabc:	f100 33ff 	add.w	r3, r0, #4294967295
 800eac0:	d100      	bne.n	800eac4 <memcpy+0xc>
 800eac2:	4770      	bx	lr
 800eac4:	b510      	push	{r4, lr}
 800eac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eace:	4291      	cmp	r1, r2
 800ead0:	d1f9      	bne.n	800eac6 <memcpy+0xe>
 800ead2:	bd10      	pop	{r4, pc}

0800ead4 <__aeabi_f2ulz>:
 800ead4:	b5d0      	push	{r4, r6, r7, lr}
 800ead6:	f7f1 fe57 	bl	8000788 <__aeabi_f2d>
 800eada:	4b0c      	ldr	r3, [pc, #48]	@ (800eb0c <__aeabi_f2ulz+0x38>)
 800eadc:	2200      	movs	r2, #0
 800eade:	4606      	mov	r6, r0
 800eae0:	460f      	mov	r7, r1
 800eae2:	f7f1 fbc1 	bl	8000268 <__aeabi_dmul>
 800eae6:	f7f1 fea7 	bl	8000838 <__aeabi_d2uiz>
 800eaea:	4604      	mov	r4, r0
 800eaec:	f7f1 fe2a 	bl	8000744 <__aeabi_ui2d>
 800eaf0:	4b07      	ldr	r3, [pc, #28]	@ (800eb10 <__aeabi_f2ulz+0x3c>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f7f1 fbb8 	bl	8000268 <__aeabi_dmul>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4630      	mov	r0, r6
 800eafe:	4639      	mov	r1, r7
 800eb00:	f7f1 fce2 	bl	80004c8 <__aeabi_dsub>
 800eb04:	f7f1 fe98 	bl	8000838 <__aeabi_d2uiz>
 800eb08:	4621      	mov	r1, r4
 800eb0a:	bdd0      	pop	{r4, r6, r7, pc}
 800eb0c:	3df00000 	.word	0x3df00000
 800eb10:	41f00000 	.word	0x41f00000

0800eb14 <__udivmoddi4>:
 800eb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb18:	9d08      	ldr	r5, [sp, #32]
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d14e      	bne.n	800ebbe <__udivmoddi4+0xaa>
 800eb20:	4694      	mov	ip, r2
 800eb22:	458c      	cmp	ip, r1
 800eb24:	4686      	mov	lr, r0
 800eb26:	fab2 f282 	clz	r2, r2
 800eb2a:	d962      	bls.n	800ebf2 <__udivmoddi4+0xde>
 800eb2c:	b14a      	cbz	r2, 800eb42 <__udivmoddi4+0x2e>
 800eb2e:	f1c2 0320 	rsb	r3, r2, #32
 800eb32:	4091      	lsls	r1, r2
 800eb34:	fa20 f303 	lsr.w	r3, r0, r3
 800eb38:	fa0c fc02 	lsl.w	ip, ip, r2
 800eb3c:	4319      	orrs	r1, r3
 800eb3e:	fa00 fe02 	lsl.w	lr, r0, r2
 800eb42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800eb46:	fa1f f68c 	uxth.w	r6, ip
 800eb4a:	fbb1 f4f7 	udiv	r4, r1, r7
 800eb4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800eb52:	fb07 1114 	mls	r1, r7, r4, r1
 800eb56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eb5a:	fb04 f106 	mul.w	r1, r4, r6
 800eb5e:	4299      	cmp	r1, r3
 800eb60:	d90a      	bls.n	800eb78 <__udivmoddi4+0x64>
 800eb62:	eb1c 0303 	adds.w	r3, ip, r3
 800eb66:	f104 30ff 	add.w	r0, r4, #4294967295
 800eb6a:	f080 8112 	bcs.w	800ed92 <__udivmoddi4+0x27e>
 800eb6e:	4299      	cmp	r1, r3
 800eb70:	f240 810f 	bls.w	800ed92 <__udivmoddi4+0x27e>
 800eb74:	3c02      	subs	r4, #2
 800eb76:	4463      	add	r3, ip
 800eb78:	1a59      	subs	r1, r3, r1
 800eb7a:	fa1f f38e 	uxth.w	r3, lr
 800eb7e:	fbb1 f0f7 	udiv	r0, r1, r7
 800eb82:	fb07 1110 	mls	r1, r7, r0, r1
 800eb86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eb8a:	fb00 f606 	mul.w	r6, r0, r6
 800eb8e:	429e      	cmp	r6, r3
 800eb90:	d90a      	bls.n	800eba8 <__udivmoddi4+0x94>
 800eb92:	eb1c 0303 	adds.w	r3, ip, r3
 800eb96:	f100 31ff 	add.w	r1, r0, #4294967295
 800eb9a:	f080 80fc 	bcs.w	800ed96 <__udivmoddi4+0x282>
 800eb9e:	429e      	cmp	r6, r3
 800eba0:	f240 80f9 	bls.w	800ed96 <__udivmoddi4+0x282>
 800eba4:	4463      	add	r3, ip
 800eba6:	3802      	subs	r0, #2
 800eba8:	1b9b      	subs	r3, r3, r6
 800ebaa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800ebae:	2100      	movs	r1, #0
 800ebb0:	b11d      	cbz	r5, 800ebba <__udivmoddi4+0xa6>
 800ebb2:	40d3      	lsrs	r3, r2
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	e9c5 3200 	strd	r3, r2, [r5]
 800ebba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebbe:	428b      	cmp	r3, r1
 800ebc0:	d905      	bls.n	800ebce <__udivmoddi4+0xba>
 800ebc2:	b10d      	cbz	r5, 800ebc8 <__udivmoddi4+0xb4>
 800ebc4:	e9c5 0100 	strd	r0, r1, [r5]
 800ebc8:	2100      	movs	r1, #0
 800ebca:	4608      	mov	r0, r1
 800ebcc:	e7f5      	b.n	800ebba <__udivmoddi4+0xa6>
 800ebce:	fab3 f183 	clz	r1, r3
 800ebd2:	2900      	cmp	r1, #0
 800ebd4:	d146      	bne.n	800ec64 <__udivmoddi4+0x150>
 800ebd6:	42a3      	cmp	r3, r4
 800ebd8:	d302      	bcc.n	800ebe0 <__udivmoddi4+0xcc>
 800ebda:	4290      	cmp	r0, r2
 800ebdc:	f0c0 80f0 	bcc.w	800edc0 <__udivmoddi4+0x2ac>
 800ebe0:	1a86      	subs	r6, r0, r2
 800ebe2:	eb64 0303 	sbc.w	r3, r4, r3
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	2d00      	cmp	r5, #0
 800ebea:	d0e6      	beq.n	800ebba <__udivmoddi4+0xa6>
 800ebec:	e9c5 6300 	strd	r6, r3, [r5]
 800ebf0:	e7e3      	b.n	800ebba <__udivmoddi4+0xa6>
 800ebf2:	2a00      	cmp	r2, #0
 800ebf4:	f040 8090 	bne.w	800ed18 <__udivmoddi4+0x204>
 800ebf8:	eba1 040c 	sub.w	r4, r1, ip
 800ebfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800ec00:	fa1f f78c 	uxth.w	r7, ip
 800ec04:	2101      	movs	r1, #1
 800ec06:	fbb4 f6f8 	udiv	r6, r4, r8
 800ec0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800ec0e:	fb08 4416 	mls	r4, r8, r6, r4
 800ec12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ec16:	fb07 f006 	mul.w	r0, r7, r6
 800ec1a:	4298      	cmp	r0, r3
 800ec1c:	d908      	bls.n	800ec30 <__udivmoddi4+0x11c>
 800ec1e:	eb1c 0303 	adds.w	r3, ip, r3
 800ec22:	f106 34ff 	add.w	r4, r6, #4294967295
 800ec26:	d202      	bcs.n	800ec2e <__udivmoddi4+0x11a>
 800ec28:	4298      	cmp	r0, r3
 800ec2a:	f200 80cd 	bhi.w	800edc8 <__udivmoddi4+0x2b4>
 800ec2e:	4626      	mov	r6, r4
 800ec30:	1a1c      	subs	r4, r3, r0
 800ec32:	fa1f f38e 	uxth.w	r3, lr
 800ec36:	fbb4 f0f8 	udiv	r0, r4, r8
 800ec3a:	fb08 4410 	mls	r4, r8, r0, r4
 800ec3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ec42:	fb00 f707 	mul.w	r7, r0, r7
 800ec46:	429f      	cmp	r7, r3
 800ec48:	d908      	bls.n	800ec5c <__udivmoddi4+0x148>
 800ec4a:	eb1c 0303 	adds.w	r3, ip, r3
 800ec4e:	f100 34ff 	add.w	r4, r0, #4294967295
 800ec52:	d202      	bcs.n	800ec5a <__udivmoddi4+0x146>
 800ec54:	429f      	cmp	r7, r3
 800ec56:	f200 80b0 	bhi.w	800edba <__udivmoddi4+0x2a6>
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	1bdb      	subs	r3, r3, r7
 800ec5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800ec62:	e7a5      	b.n	800ebb0 <__udivmoddi4+0x9c>
 800ec64:	f1c1 0620 	rsb	r6, r1, #32
 800ec68:	408b      	lsls	r3, r1
 800ec6a:	fa22 f706 	lsr.w	r7, r2, r6
 800ec6e:	431f      	orrs	r7, r3
 800ec70:	fa20 fc06 	lsr.w	ip, r0, r6
 800ec74:	fa04 f301 	lsl.w	r3, r4, r1
 800ec78:	ea43 030c 	orr.w	r3, r3, ip
 800ec7c:	40f4      	lsrs	r4, r6
 800ec7e:	fa00 f801 	lsl.w	r8, r0, r1
 800ec82:	0c38      	lsrs	r0, r7, #16
 800ec84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800ec88:	fbb4 fef0 	udiv	lr, r4, r0
 800ec8c:	fa1f fc87 	uxth.w	ip, r7
 800ec90:	fb00 441e 	mls	r4, r0, lr, r4
 800ec94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800ec98:	fb0e f90c 	mul.w	r9, lr, ip
 800ec9c:	45a1      	cmp	r9, r4
 800ec9e:	fa02 f201 	lsl.w	r2, r2, r1
 800eca2:	d90a      	bls.n	800ecba <__udivmoddi4+0x1a6>
 800eca4:	193c      	adds	r4, r7, r4
 800eca6:	f10e 3aff 	add.w	sl, lr, #4294967295
 800ecaa:	f080 8084 	bcs.w	800edb6 <__udivmoddi4+0x2a2>
 800ecae:	45a1      	cmp	r9, r4
 800ecb0:	f240 8081 	bls.w	800edb6 <__udivmoddi4+0x2a2>
 800ecb4:	f1ae 0e02 	sub.w	lr, lr, #2
 800ecb8:	443c      	add	r4, r7
 800ecba:	eba4 0409 	sub.w	r4, r4, r9
 800ecbe:	fa1f f983 	uxth.w	r9, r3
 800ecc2:	fbb4 f3f0 	udiv	r3, r4, r0
 800ecc6:	fb00 4413 	mls	r4, r0, r3, r4
 800ecca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800ecce:	fb03 fc0c 	mul.w	ip, r3, ip
 800ecd2:	45a4      	cmp	ip, r4
 800ecd4:	d907      	bls.n	800ece6 <__udivmoddi4+0x1d2>
 800ecd6:	193c      	adds	r4, r7, r4
 800ecd8:	f103 30ff 	add.w	r0, r3, #4294967295
 800ecdc:	d267      	bcs.n	800edae <__udivmoddi4+0x29a>
 800ecde:	45a4      	cmp	ip, r4
 800ece0:	d965      	bls.n	800edae <__udivmoddi4+0x29a>
 800ece2:	3b02      	subs	r3, #2
 800ece4:	443c      	add	r4, r7
 800ece6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800ecea:	fba0 9302 	umull	r9, r3, r0, r2
 800ecee:	eba4 040c 	sub.w	r4, r4, ip
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	46ce      	mov	lr, r9
 800ecf6:	469c      	mov	ip, r3
 800ecf8:	d351      	bcc.n	800ed9e <__udivmoddi4+0x28a>
 800ecfa:	d04e      	beq.n	800ed9a <__udivmoddi4+0x286>
 800ecfc:	b155      	cbz	r5, 800ed14 <__udivmoddi4+0x200>
 800ecfe:	ebb8 030e 	subs.w	r3, r8, lr
 800ed02:	eb64 040c 	sbc.w	r4, r4, ip
 800ed06:	fa04 f606 	lsl.w	r6, r4, r6
 800ed0a:	40cb      	lsrs	r3, r1
 800ed0c:	431e      	orrs	r6, r3
 800ed0e:	40cc      	lsrs	r4, r1
 800ed10:	e9c5 6400 	strd	r6, r4, [r5]
 800ed14:	2100      	movs	r1, #0
 800ed16:	e750      	b.n	800ebba <__udivmoddi4+0xa6>
 800ed18:	f1c2 0320 	rsb	r3, r2, #32
 800ed1c:	fa20 f103 	lsr.w	r1, r0, r3
 800ed20:	fa0c fc02 	lsl.w	ip, ip, r2
 800ed24:	fa24 f303 	lsr.w	r3, r4, r3
 800ed28:	4094      	lsls	r4, r2
 800ed2a:	430c      	orrs	r4, r1
 800ed2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800ed30:	fa00 fe02 	lsl.w	lr, r0, r2
 800ed34:	fa1f f78c 	uxth.w	r7, ip
 800ed38:	fbb3 f0f8 	udiv	r0, r3, r8
 800ed3c:	fb08 3110 	mls	r1, r8, r0, r3
 800ed40:	0c23      	lsrs	r3, r4, #16
 800ed42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ed46:	fb00 f107 	mul.w	r1, r0, r7
 800ed4a:	4299      	cmp	r1, r3
 800ed4c:	d908      	bls.n	800ed60 <__udivmoddi4+0x24c>
 800ed4e:	eb1c 0303 	adds.w	r3, ip, r3
 800ed52:	f100 36ff 	add.w	r6, r0, #4294967295
 800ed56:	d22c      	bcs.n	800edb2 <__udivmoddi4+0x29e>
 800ed58:	4299      	cmp	r1, r3
 800ed5a:	d92a      	bls.n	800edb2 <__udivmoddi4+0x29e>
 800ed5c:	3802      	subs	r0, #2
 800ed5e:	4463      	add	r3, ip
 800ed60:	1a5b      	subs	r3, r3, r1
 800ed62:	b2a4      	uxth	r4, r4
 800ed64:	fbb3 f1f8 	udiv	r1, r3, r8
 800ed68:	fb08 3311 	mls	r3, r8, r1, r3
 800ed6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ed70:	fb01 f307 	mul.w	r3, r1, r7
 800ed74:	42a3      	cmp	r3, r4
 800ed76:	d908      	bls.n	800ed8a <__udivmoddi4+0x276>
 800ed78:	eb1c 0404 	adds.w	r4, ip, r4
 800ed7c:	f101 36ff 	add.w	r6, r1, #4294967295
 800ed80:	d213      	bcs.n	800edaa <__udivmoddi4+0x296>
 800ed82:	42a3      	cmp	r3, r4
 800ed84:	d911      	bls.n	800edaa <__udivmoddi4+0x296>
 800ed86:	3902      	subs	r1, #2
 800ed88:	4464      	add	r4, ip
 800ed8a:	1ae4      	subs	r4, r4, r3
 800ed8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed90:	e739      	b.n	800ec06 <__udivmoddi4+0xf2>
 800ed92:	4604      	mov	r4, r0
 800ed94:	e6f0      	b.n	800eb78 <__udivmoddi4+0x64>
 800ed96:	4608      	mov	r0, r1
 800ed98:	e706      	b.n	800eba8 <__udivmoddi4+0x94>
 800ed9a:	45c8      	cmp	r8, r9
 800ed9c:	d2ae      	bcs.n	800ecfc <__udivmoddi4+0x1e8>
 800ed9e:	ebb9 0e02 	subs.w	lr, r9, r2
 800eda2:	eb63 0c07 	sbc.w	ip, r3, r7
 800eda6:	3801      	subs	r0, #1
 800eda8:	e7a8      	b.n	800ecfc <__udivmoddi4+0x1e8>
 800edaa:	4631      	mov	r1, r6
 800edac:	e7ed      	b.n	800ed8a <__udivmoddi4+0x276>
 800edae:	4603      	mov	r3, r0
 800edb0:	e799      	b.n	800ece6 <__udivmoddi4+0x1d2>
 800edb2:	4630      	mov	r0, r6
 800edb4:	e7d4      	b.n	800ed60 <__udivmoddi4+0x24c>
 800edb6:	46d6      	mov	lr, sl
 800edb8:	e77f      	b.n	800ecba <__udivmoddi4+0x1a6>
 800edba:	4463      	add	r3, ip
 800edbc:	3802      	subs	r0, #2
 800edbe:	e74d      	b.n	800ec5c <__udivmoddi4+0x148>
 800edc0:	4606      	mov	r6, r0
 800edc2:	4623      	mov	r3, r4
 800edc4:	4608      	mov	r0, r1
 800edc6:	e70f      	b.n	800ebe8 <__udivmoddi4+0xd4>
 800edc8:	3e02      	subs	r6, #2
 800edca:	4463      	add	r3, ip
 800edcc:	e730      	b.n	800ec30 <__udivmoddi4+0x11c>
 800edce:	bf00      	nop

0800edd0 <_init>:
 800edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd2:	bf00      	nop
 800edd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd6:	bc08      	pop	{r3}
 800edd8:	469e      	mov	lr, r3
 800edda:	4770      	bx	lr

0800eddc <_fini>:
 800eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edde:	bf00      	nop
 800ede0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede2:	bc08      	pop	{r3}
 800ede4:	469e      	mov	lr, r3
 800ede6:	4770      	bx	lr
