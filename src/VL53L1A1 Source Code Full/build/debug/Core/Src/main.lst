ARM GAS  C:\Temp\ccqcK2oM.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.configureTimer,"ax",%progbits
  21              		.align	1
  22              		.global	configureTimer
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	configureTimer:
  28              	.LVL0:
  29              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "VL53L1A1_Simulink.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccqcK2oM.s 			page 2


  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  44:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart2;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_left;
  51:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_centre;
  52:Core/Src/main.c **** RANGING_SENSOR_Result_t TOF_right;
  53:Core/Src/main.c **** RANGING_SENSOR_ProfileConfig_t Profile;
  54:Core/Src/main.c **** extern float tof_odr;
  55:Core/Src/main.c **** extern uint8_t L1_BUFFER_SIZE;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** const uint8_t expectedHeader[3] = {'J', '_', 'A'};
  58:Core/Src/main.c **** const uint8_t expectedTerminator[3] = {'A', '_', 'J'};
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** const int numberOfSimulinkBytes = 4*(2);
  61:Core/Src/main.c **** uint8_t bigBuffer[8+3+3] = {0};
  62:Core/Src/main.c **** uint8_t clearToSend = 0;
  63:Core/Src/main.c **** uint8_t calibrated = 0;
  64:Core/Src/main.c **** int32_t counter = 0;
  65:Core/Src/main.c **** uint8_t clearToGetL1 = 0;
  66:Core/Src/main.c **** /* USER CODE END PV */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  69:Core/Src/main.c **** void SystemClock_Config(void);
  70:Core/Src/main.c **** static void MX_TIM2_Init(void);
  71:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  72:Core/Src/main.c **** static void MX_TIM3_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** void configureTimer(float desired_frequency) {
  30              		.loc 1 81 46 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
ARM GAS  C:\Temp\ccqcK2oM.s 			page 3


  82:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
  83:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
  35              		.loc 1 83 5 view .LVU1
  36              		.loc 1 83 11 is_stmt 0 view .LVU2
  37 0000 154B     		ldr	r3, .L6
  38 0002 D3ED007A 		vldr.32	s15, [r3]	@ int
  39 0006 F8EE677A 		vcvt.f32.u32	s15, s15
  40              	.LVL1:
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
  86:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
  41              		.loc 1 86 5 is_stmt 1 view .LVU3
  42              		.loc 1 86 11 is_stmt 0 view .LVU4
  43 000a C7EE806A 		vdiv.f32	s13, s15, s0
  44              	.LVL2:
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
  89:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
  45              		.loc 1 89 5 is_stmt 1 view .LVU5
  46              		.loc 1 89 50 is_stmt 0 view .LVU6
  47 000e DFED137A 		vldr.32	s15, .L6+4
  48              	.LVL3:
  49              		.loc 1 89 50 view .LVU7
  50 0012 66EEA77A 		vmul.f32	s15, s13, s15
  51              		.loc 1 89 14 view .LVU8
  52 0016 FCEEE77A 		vcvt.u32.f32	s15, s15
  53 001a 17EE903A 		vmov	r3, s15	@ int
  54              	.LVL4:
  90:Core/Src/main.c ****     if (prescaler > 65535) {
  55              		.loc 1 90 5 is_stmt 1 view .LVU9
  56              		.loc 1 90 8 is_stmt 0 view .LVU10
  57 001e B3F5803F 		cmp	r3, #65536
  58 0022 01D3     		bcc	.L2
  91:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
  59              		.loc 1 91 19 view .LVU11
  60 0024 4FF6FF73 		movw	r3, #65535
  61              	.LVL5:
  62              	.L2:
  92:Core/Src/main.c ****     }
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
  95:Core/Src/main.c ****     uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
  63              		.loc 1 95 5 is_stmt 1 view .LVU12
  64              		.loc 1 95 57 is_stmt 0 view .LVU13
  65 0028 5A1C     		adds	r2, r3, #1
  66 002a 07EE102A 		vmov	s14, r2	@ int
  67              		.loc 1 95 44 view .LVU14
  68 002e B8EE477A 		vcvt.f32.u32	s14, s14
  69 0032 C6EE877A 		vdiv.f32	s15, s13, s14
  70              		.loc 1 95 14 view .LVU15
  71 0036 FCEEE77A 		vcvt.u32.f32	s15, s15
  72 003a 17EE902A 		vmov	r2, s15	@ int
  73              	.LVL6:
  96:Core/Src/main.c ****     if (arr > 65535) {
  74              		.loc 1 96 5 is_stmt 1 view .LVU16
  75              		.loc 1 96 8 is_stmt 0 view .LVU17
  76 003e B2F5803F 		cmp	r2, #65536
ARM GAS  C:\Temp\ccqcK2oM.s 			page 4


  77 0042 01D3     		bcc	.L3
  97:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
  78              		.loc 1 97 13 view .LVU18
  79 0044 4FF6FF72 		movw	r2, #65535
  80              	.LVL7:
  81              	.L3:
  98:Core/Src/main.c ****     }
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****     // Update the timer registers
 101:Core/Src/main.c ****     TIM2->PSC = prescaler;   // Set the prescaler
  82              		.loc 1 101 5 is_stmt 1 view .LVU19
  83              		.loc 1 101 15 is_stmt 0 view .LVU20
  84 0048 4FF08041 		mov	r1, #1073741824
  85 004c 8B62     		str	r3, [r1, #40]
  86              	.LVL8:
 102:Core/Src/main.c ****     TIM2->ARR = arr;         // Set the auto-reload register
  87              		.loc 1 102 5 is_stmt 1 view .LVU21
  88              		.loc 1 102 15 is_stmt 0 view .LVU22
  89 004e CA62     		str	r2, [r1, #44]
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 105:Core/Src/main.c ****     TIM2->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
  90              		.loc 1 105 5 is_stmt 1 view .LVU23
  91              		.loc 1 105 15 is_stmt 0 view .LVU24
  92 0050 0123     		movs	r3, #1
  93              	.LVL9:
  94              		.loc 1 105 15 view .LVU25
  95 0052 4B61     		str	r3, [r1, #20]
 106:Core/Src/main.c **** }
  96              		.loc 1 106 1 view .LVU26
  97 0054 7047     		bx	lr
  98              	.L7:
  99 0056 00BF     		.align	2
 100              	.L6:
 101 0058 00000000 		.word	SystemCoreClock
 102 005c 00008037 		.word	931135488
 103              		.cfi_endproc
 104              	.LFE137:
 106              		.section	.text.configureOtherTimer,"ax",%progbits
 107              		.align	1
 108              		.global	configureOtherTimer
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 113              	configureOtherTimer:
 114              	.LVL10:
 115              	.LFB138:
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** void configureOtherTimer(float desired_frequency) {
 116              		.loc 1 108 51 is_stmt 1 view -0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 109:Core/Src/main.c ****     // Assuming the clock frequency driving the timer is 100 MHz
 110:Core/Src/main.c ****     float clock_frequency = SystemCoreClock; // 100 MHz
 121              		.loc 1 110 5 view .LVU28
ARM GAS  C:\Temp\ccqcK2oM.s 			page 5


 122              		.loc 1 110 11 is_stmt 0 view .LVU29
 123 0000 144B     		ldr	r3, .L13
 124 0002 D3ED007A 		vldr.32	s15, [r3]	@ int
 125 0006 F8EE677A 		vcvt.f32.u32	s15, s15
 126              	.LVL11:
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****     // Calculate the required total timer period in timer clock cycles
 113:Core/Src/main.c ****     float timer_period = clock_frequency / desired_frequency;
 127              		.loc 1 113 5 is_stmt 1 view .LVU30
 128              		.loc 1 113 11 is_stmt 0 view .LVU31
 129 000a C7EE806A 		vdiv.f32	s13, s15, s0
 130              	.LVL12:
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****     // Choose a suitable prescaler (PSC) to fit the period within ARR's range
 116:Core/Src/main.c ****     uint32_t prescaler = (uint32_t)(timer_period / 65536.0f); // PSC ensures ARR <= 65535
 131              		.loc 1 116 5 is_stmt 1 view .LVU32
 132              		.loc 1 116 50 is_stmt 0 view .LVU33
 133 000e DFED127A 		vldr.32	s15, .L13+4
 134              	.LVL13:
 135              		.loc 1 116 50 view .LVU34
 136 0012 66EEA77A 		vmul.f32	s15, s13, s15
 137              		.loc 1 116 14 view .LVU35
 138 0016 FCEEE77A 		vcvt.u32.f32	s15, s15
 139 001a 17EE903A 		vmov	r3, s15	@ int
 140              	.LVL14:
 117:Core/Src/main.c ****     if (prescaler > 65535) {
 141              		.loc 1 117 5 is_stmt 1 view .LVU36
 142              		.loc 1 117 8 is_stmt 0 view .LVU37
 143 001e B3F5803F 		cmp	r3, #65536
 144 0022 01D3     		bcc	.L9
 118:Core/Src/main.c ****         prescaler = 65535; // Cap PSC if it exceeds 16-bit value
 145              		.loc 1 118 19 view .LVU38
 146 0024 4FF6FF73 		movw	r3, #65535
 147              	.LVL15:
 148              	.L9:
 119:Core/Src/main.c ****     }
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****     // Calculate the ARR based on the chosen PSC
 122:Core/Src/main.c ****     uint32_t arr = (uint32_t)(timer_period / (prescaler + 1));
 149              		.loc 1 122 5 is_stmt 1 view .LVU39
 150              		.loc 1 122 57 is_stmt 0 view .LVU40
 151 0028 5A1C     		adds	r2, r3, #1
 152 002a 07EE102A 		vmov	s14, r2	@ int
 153              		.loc 1 122 44 view .LVU41
 154 002e B8EE477A 		vcvt.f32.u32	s14, s14
 155 0032 C6EE877A 		vdiv.f32	s15, s13, s14
 156              		.loc 1 122 14 view .LVU42
 157 0036 FCEEE77A 		vcvt.u32.f32	s15, s15
 158 003a 17EE902A 		vmov	r2, s15	@ int
 159              	.LVL16:
 123:Core/Src/main.c ****     if (arr > 65535) {
 160              		.loc 1 123 5 is_stmt 1 view .LVU43
 161              		.loc 1 123 8 is_stmt 0 view .LVU44
 162 003e B2F5803F 		cmp	r2, #65536
 163 0042 01D3     		bcc	.L10
 124:Core/Src/main.c ****         arr = 65535; // Cap ARR if it exceeds 16-bit value
 164              		.loc 1 124 13 view .LVU45
ARM GAS  C:\Temp\ccqcK2oM.s 			page 6


 165 0044 4FF6FF72 		movw	r2, #65535
 166              	.LVL17:
 167              	.L10:
 125:Core/Src/main.c ****     }
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     // Update the timer registers
 128:Core/Src/main.c ****     TIM3->PSC = prescaler;   // Set the prescaler
 168              		.loc 1 128 5 is_stmt 1 view .LVU46
 169              		.loc 1 128 15 is_stmt 0 view .LVU47
 170 0048 0449     		ldr	r1, .L13+8
 171 004a 8B62     		str	r3, [r1, #40]
 172              	.LVL18:
 129:Core/Src/main.c ****     TIM3->ARR = arr;         // Set the auto-reload register
 173              		.loc 1 129 5 is_stmt 1 view .LVU48
 174              		.loc 1 129 15 is_stmt 0 view .LVU49
 175 004c CA62     		str	r2, [r1, #44]
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     // Reload the timer settings to apply the changes immediately
 132:Core/Src/main.c ****     TIM3->EGR = TIM_EGR_UG;  // Generate an update event to reload PSC and ARR
 176              		.loc 1 132 5 is_stmt 1 view .LVU50
 177              		.loc 1 132 15 is_stmt 0 view .LVU51
 178 004e 0123     		movs	r3, #1
 179              	.LVL19:
 180              		.loc 1 132 15 view .LVU52
 181 0050 4B61     		str	r3, [r1, #20]
 133:Core/Src/main.c **** }
 182              		.loc 1 133 1 view .LVU53
 183 0052 7047     		bx	lr
 184              	.L14:
 185              		.align	2
 186              	.L13:
 187 0054 00000000 		.word	SystemCoreClock
 188 0058 00008037 		.word	931135488
 189 005c 00040040 		.word	1073742848
 190              		.cfi_endproc
 191              	.LFE138:
 193              		.section	.text.initialCalibration,"ax",%progbits
 194              		.align	1
 195              		.global	initialCalibration
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	initialCalibration:
 201              	.LFB139:
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** void initialCalibration(){
 202              		.loc 1 135 26 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206 0000 10B5     		push	{r4, lr}
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 4, -8
 209              		.cfi_offset 14, -4
 136:Core/Src/main.c ****   HAL_UART_Receive(&huart2,(uint8_t *) &bigBuffer, (size_t) (numberOfSimulinkBytes+3+3),1);
 210              		.loc 1 136 3 view .LVU55
 211 0002 1A4C     		ldr	r4, .L19
ARM GAS  C:\Temp\ccqcK2oM.s 			page 7


 212 0004 0123     		movs	r3, #1
 213 0006 0E22     		movs	r2, #14
 214 0008 2146     		mov	r1, r4
 215 000a 1948     		ldr	r0, .L19+4
 216 000c FFF7FEFF 		bl	HAL_UART_Receive
 217              	.LVL20:
 137:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 218              		.loc 1 137 3 view .LVU56
 219              		.loc 1 137 16 is_stmt 0 view .LVU57
 220 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 221              		.loc 1 137 6 view .LVU58
 222 0012 4A2B     		cmp	r3, #74
 223 0014 00D0     		beq	.L18
 224              	.L15:
 138:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 139:Core/Src/main.c ****       bigBuffer[2] == expectedHeader[2] &&
 140:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 141:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 142:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 143:Core/Src/main.c ****         calibrated = 1;
 144:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 145:Core/Src/main.c ****         configureOtherTimer(L1_BUFFER_SIZE);
 146:Core/Src/main.c ****         configureTimer(tof_odr);
 147:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 148:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim3);
 149:Core/Src/main.c ****   }
 150:Core/Src/main.c **** }
 225              		.loc 1 150 1 view .LVU59
 226 0016 10BD     		pop	{r4, pc}
 227              	.L18:
 138:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 228              		.loc 1 138 16 discriminator 1 view .LVU60
 229 0018 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 137:Core/Src/main.c ****   if (bigBuffer[0] == expectedHeader[0] &&
 230              		.loc 1 137 41 discriminator 1 view .LVU61
 231 001a 5F2B     		cmp	r3, #95
 232 001c FBD1     		bne	.L15
 139:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 233              		.loc 1 139 16 view .LVU62
 234 001e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 138:Core/Src/main.c ****       bigBuffer[1] == expectedHeader[1] &&
 235              		.loc 1 138 41 view .LVU63
 236 0020 412B     		cmp	r3, #65
 237 0022 F8D1     		bne	.L15
 140:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 238              		.loc 1 140 16 view .LVU64
 239 0024 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 139:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+0] == expectedTerminator[0] &&
 240              		.loc 1 139 41 view .LVU65
 241 0026 412B     		cmp	r3, #65
 242 0028 F5D1     		bne	.L15
 141:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 243              		.loc 1 141 16 view .LVU66
 244 002a 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 140:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+1] == expectedTerminator[1] &&
 245              		.loc 1 140 69 view .LVU67
 246 002c 5F2B     		cmp	r3, #95
ARM GAS  C:\Temp\ccqcK2oM.s 			page 8


 247 002e F2D1     		bne	.L15
 142:Core/Src/main.c ****         calibrated = 1;
 248              		.loc 1 142 16 view .LVU68
 249 0030 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 141:Core/Src/main.c ****       bigBuffer[numberOfSimulinkBytes+3+2] == expectedTerminator[2]){
 250              		.loc 1 141 69 view .LVU69
 251 0032 4A2B     		cmp	r3, #74
 252 0034 EFD1     		bne	.L15
 143:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 253              		.loc 1 143 9 is_stmt 1 view .LVU70
 143:Core/Src/main.c ****         receivedFromSimulink(&bigBuffer);
 254              		.loc 1 143 20 is_stmt 0 view .LVU71
 255 0036 0F4B     		ldr	r3, .L19+8
 256 0038 0122     		movs	r2, #1
 257 003a 1A70     		strb	r2, [r3]
 144:Core/Src/main.c ****         configureOtherTimer(L1_BUFFER_SIZE);
 258              		.loc 1 144 9 is_stmt 1 view .LVU72
 259 003c 2046     		mov	r0, r4
 260 003e FFF7FEFF 		bl	receivedFromSimulink
 261              	.LVL21:
 145:Core/Src/main.c ****         configureTimer(tof_odr);
 262              		.loc 1 145 9 view .LVU73
 263 0042 0D4B     		ldr	r3, .L19+12
 264 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 265 0046 00EE103A 		vmov	s0, r3	@ int
 266 004a B8EE400A 		vcvt.f32.u32	s0, s0
 267 004e FFF7FEFF 		bl	configureOtherTimer
 268              	.LVL22:
 146:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim2);
 269              		.loc 1 146 9 view .LVU74
 270 0052 0A4B     		ldr	r3, .L19+16
 271 0054 93ED000A 		vldr.32	s0, [r3]
 272 0058 FFF7FEFF 		bl	configureTimer
 273              	.LVL23:
 147:Core/Src/main.c ****         HAL_TIM_Base_Start_IT(&htim3);
 274              		.loc 1 147 9 view .LVU75
 275 005c 0848     		ldr	r0, .L19+20
 276 005e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 277              	.LVL24:
 148:Core/Src/main.c ****   }
 278              		.loc 1 148 9 view .LVU76
 279 0062 0848     		ldr	r0, .L19+24
 280 0064 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 281              	.LVL25:
 282              		.loc 1 150 1 is_stmt 0 view .LVU77
 283 0068 D5E7     		b	.L15
 284              	.L20:
 285 006a 00BF     		.align	2
 286              	.L19:
 287 006c 00000000 		.word	bigBuffer
 288 0070 00000000 		.word	huart2
 289 0074 00000000 		.word	calibrated
 290 0078 00000000 		.word	L1_BUFFER_SIZE
 291 007c 00000000 		.word	tof_odr
 292 0080 00000000 		.word	htim2
 293 0084 00000000 		.word	htim3
 294              		.cfi_endproc
ARM GAS  C:\Temp\ccqcK2oM.s 			page 9


 295              	.LFE139:
 297              		.section	.text.MX_DMA_Init,"ax",%progbits
 298              		.align	1
 299              		.global	MX_DMA_Init
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 304              	MX_DMA_Init:
 305              	.LFB145:
 151:Core/Src/main.c **** 
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /* USER CODE END 0 */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** /**
 157:Core/Src/main.c ****   * @brief  The application entry point.
 158:Core/Src/main.c ****   * @retval int
 159:Core/Src/main.c ****   */
 160:Core/Src/main.c **** int main(void)
 161:Core/Src/main.c **** {
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* USER CODE END 1 */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 170:Core/Src/main.c ****   HAL_Init();
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* USER CODE END Init */
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /* Configure the system clock */
 177:Core/Src/main.c ****   SystemClock_Config();
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE END SysInit */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* Initialize all configured peripherals */
 184:Core/Src/main.c ****   MX_GPIO_Init();
 185:Core/Src/main.c ****   MX_DMA_Init();
 186:Core/Src/main.c ****   MX_TIM2_Init();
 187:Core/Src/main.c ****   MX_USART2_UART_Init();
 188:Core/Src/main.c ****   MX_TIM3_Init();
 189:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 190:Core/Src/main.c ****   while (calibrated != 1){
 191:Core/Src/main.c ****     initialCalibration();
 192:Core/Src/main.c ****   }
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   initVL53L1A1();
 195:Core/Src/main.c ****   /* USER CODE END 2 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* Infinite loop */
 198:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
ARM GAS  C:\Temp\ccqcK2oM.s 			page 10


 199:Core/Src/main.c ****   
 200:Core/Src/main.c ****   while (1)
 201:Core/Src/main.c ****   {
 202:Core/Src/main.c ****     if (clearToGetL1 == 1){
 203:Core/Src/main.c ****       getVL53L1A1();
 204:Core/Src/main.c ****       clearToGetL1 = 0;
 205:Core/Src/main.c ****     }
 206:Core/Src/main.c ****     
 207:Core/Src/main.c ****     /* USER CODE END WHILE */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 210:Core/Src/main.c ****   }
 211:Core/Src/main.c ****   /* USER CODE END 3 */
 212:Core/Src/main.c **** }
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** /**
 215:Core/Src/main.c ****   * @brief System Clock Configuration
 216:Core/Src/main.c ****   * @retval None
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c **** void SystemClock_Config(void)
 219:Core/Src/main.c **** {
 220:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 221:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 226:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 229:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 230:Core/Src/main.c ****   */
 231:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 232:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 233:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 240:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 241:Core/Src/main.c ****   {
 242:Core/Src/main.c ****     Error_Handler();
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 248:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 249:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 250:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 252:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 255:Core/Src/main.c ****   {
ARM GAS  C:\Temp\ccqcK2oM.s 			page 11


 256:Core/Src/main.c ****     Error_Handler();
 257:Core/Src/main.c ****   }
 258:Core/Src/main.c **** }
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /**
 261:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 262:Core/Src/main.c ****   * @param None
 263:Core/Src/main.c ****   * @retval None
 264:Core/Src/main.c ****   */
 265:Core/Src/main.c **** static void MX_TIM2_Init(void)
 266:Core/Src/main.c **** {
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 273:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 278:Core/Src/main.c ****   htim2.Instance = TIM2;
 279:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 280:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 281:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 282:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 283:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 284:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 289:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 290:Core/Src/main.c ****   {
 291:Core/Src/main.c ****     Error_Handler();
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 294:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 295:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 296:Core/Src/main.c ****   {
 297:Core/Src/main.c ****     Error_Handler();
 298:Core/Src/main.c ****   }
 299:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** }
 304:Core/Src/main.c **** 
 305:Core/Src/main.c **** /**
 306:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 307:Core/Src/main.c ****   * @param None
 308:Core/Src/main.c ****   * @retval None
 309:Core/Src/main.c ****   */
 310:Core/Src/main.c **** static void MX_TIM3_Init(void)
 311:Core/Src/main.c **** {
 312:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccqcK2oM.s 			page 12


 313:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 318:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 323:Core/Src/main.c ****   htim3.Instance = TIM3;
 324:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 325:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 326:Core/Src/main.c ****   htim3.Init.Period = 65535;
 327:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 328:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 329:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 330:Core/Src/main.c ****   {
 331:Core/Src/main.c ****     Error_Handler();
 332:Core/Src/main.c ****   }
 333:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 334:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 339:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 340:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 341:Core/Src/main.c ****   {
 342:Core/Src/main.c ****     Error_Handler();
 343:Core/Src/main.c ****   }
 344:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c **** }
 349:Core/Src/main.c **** 
 350:Core/Src/main.c **** /**
 351:Core/Src/main.c ****   * @brief USART2 Initialization Function
 352:Core/Src/main.c ****   * @param None
 353:Core/Src/main.c ****   * @retval None
 354:Core/Src/main.c ****   */
 355:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 356:Core/Src/main.c **** {
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 365:Core/Src/main.c ****   huart2.Instance = USART2;
 366:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 367:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 368:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 369:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
ARM GAS  C:\Temp\ccqcK2oM.s 			page 13


 370:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 371:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 372:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 373:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 374:Core/Src/main.c ****   {
 375:Core/Src/main.c ****     Error_Handler();
 376:Core/Src/main.c ****   }
 377:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c **** }
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** /**
 384:Core/Src/main.c ****   * Enable DMA controller clock
 385:Core/Src/main.c ****   */
 386:Core/Src/main.c **** void MX_DMA_Init(void)
 387:Core/Src/main.c **** {
 306              		.loc 1 387 1 is_stmt 1 view -0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 8
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310 0000 00B5     		push	{lr}
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 14, -4
 313 0002 83B0     		sub	sp, sp, #12
 314              		.cfi_def_cfa_offset 16
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* DMA controller clock enable */
 390:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 315              		.loc 1 390 3 view .LVU79
 316              	.LBB4:
 317              		.loc 1 390 3 view .LVU80
 318 0004 0021     		movs	r1, #0
 319 0006 0191     		str	r1, [sp, #4]
 320              		.loc 1 390 3 view .LVU81
 321 0008 094B     		ldr	r3, .L23
 322 000a 1A6B     		ldr	r2, [r3, #48]
 323 000c 42F40012 		orr	r2, r2, #2097152
 324 0010 1A63     		str	r2, [r3, #48]
 325              		.loc 1 390 3 view .LVU82
 326 0012 1B6B     		ldr	r3, [r3, #48]
 327 0014 03F40013 		and	r3, r3, #2097152
 328 0018 0193     		str	r3, [sp, #4]
 329              		.loc 1 390 3 view .LVU83
 330 001a 019B     		ldr	r3, [sp, #4]
 331              	.LBE4:
 332              		.loc 1 390 3 view .LVU84
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* DMA interrupt init */
 393:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 394:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 333              		.loc 1 394 3 view .LVU85
 334 001c 0A46     		mov	r2, r1
 335 001e 1020     		movs	r0, #16
 336 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 337              	.LVL26:
ARM GAS  C:\Temp\ccqcK2oM.s 			page 14


 395:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 338              		.loc 1 395 3 view .LVU86
 339 0024 1020     		movs	r0, #16
 340 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 341              	.LVL27:
 396:Core/Src/main.c **** 
 397:Core/Src/main.c **** }
 342              		.loc 1 397 1 is_stmt 0 view .LVU87
 343 002a 03B0     		add	sp, sp, #12
 344              		.cfi_def_cfa_offset 4
 345              		@ sp needed
 346 002c 5DF804FB 		ldr	pc, [sp], #4
 347              	.L24:
 348              		.align	2
 349              	.L23:
 350 0030 00380240 		.word	1073887232
 351              		.cfi_endproc
 352              	.LFE145:
 354              		.section	.text.MX_GPIO_Init,"ax",%progbits
 355              		.align	1
 356              		.global	MX_GPIO_Init
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	MX_GPIO_Init:
 362              	.LFB146:
 398:Core/Src/main.c **** 
 399:Core/Src/main.c **** /**
 400:Core/Src/main.c ****   * @brief GPIO Initialization Function
 401:Core/Src/main.c ****   * @param None
 402:Core/Src/main.c ****   * @retval None
 403:Core/Src/main.c ****   */
 404:Core/Src/main.c **** void MX_GPIO_Init(void)
 405:Core/Src/main.c **** {
 363              		.loc 1 405 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 40
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 368              		.cfi_def_cfa_offset 20
 369              		.cfi_offset 4, -20
 370              		.cfi_offset 5, -16
 371              		.cfi_offset 6, -12
 372              		.cfi_offset 7, -8
 373              		.cfi_offset 14, -4
 374 0002 8BB0     		sub	sp, sp, #44
 375              		.cfi_def_cfa_offset 64
 406:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 376              		.loc 1 406 3 view .LVU89
 377              		.loc 1 406 20 is_stmt 0 view .LVU90
 378 0004 0024     		movs	r4, #0
 379 0006 0594     		str	r4, [sp, #20]
 380 0008 0694     		str	r4, [sp, #24]
 381 000a 0794     		str	r4, [sp, #28]
 382 000c 0894     		str	r4, [sp, #32]
 383 000e 0994     		str	r4, [sp, #36]
 407:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
ARM GAS  C:\Temp\ccqcK2oM.s 			page 15


 408:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 411:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 384              		.loc 1 411 3 is_stmt 1 view .LVU91
 385              	.LBB5:
 386              		.loc 1 411 3 view .LVU92
 387 0010 0094     		str	r4, [sp]
 388              		.loc 1 411 3 view .LVU93
 389 0012 474B     		ldr	r3, .L27
 390 0014 1A6B     		ldr	r2, [r3, #48]
 391 0016 42F00402 		orr	r2, r2, #4
 392 001a 1A63     		str	r2, [r3, #48]
 393              		.loc 1 411 3 view .LVU94
 394 001c 1A6B     		ldr	r2, [r3, #48]
 395 001e 02F00402 		and	r2, r2, #4
 396 0022 0092     		str	r2, [sp]
 397              		.loc 1 411 3 view .LVU95
 398 0024 009A     		ldr	r2, [sp]
 399              	.LBE5:
 400              		.loc 1 411 3 view .LVU96
 412:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 401              		.loc 1 412 3 view .LVU97
 402              	.LBB6:
 403              		.loc 1 412 3 view .LVU98
 404 0026 0194     		str	r4, [sp, #4]
 405              		.loc 1 412 3 view .LVU99
 406 0028 1A6B     		ldr	r2, [r3, #48]
 407 002a 42F08002 		orr	r2, r2, #128
 408 002e 1A63     		str	r2, [r3, #48]
 409              		.loc 1 412 3 view .LVU100
 410 0030 1A6B     		ldr	r2, [r3, #48]
 411 0032 02F08002 		and	r2, r2, #128
 412 0036 0192     		str	r2, [sp, #4]
 413              		.loc 1 412 3 view .LVU101
 414 0038 019A     		ldr	r2, [sp, #4]
 415              	.LBE6:
 416              		.loc 1 412 3 view .LVU102
 413:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 417              		.loc 1 413 3 view .LVU103
 418              	.LBB7:
 419              		.loc 1 413 3 view .LVU104
 420 003a 0294     		str	r4, [sp, #8]
 421              		.loc 1 413 3 view .LVU105
 422 003c 1A6B     		ldr	r2, [r3, #48]
 423 003e 42F00102 		orr	r2, r2, #1
 424 0042 1A63     		str	r2, [r3, #48]
 425              		.loc 1 413 3 view .LVU106
 426 0044 1A6B     		ldr	r2, [r3, #48]
 427 0046 02F00102 		and	r2, r2, #1
 428 004a 0292     		str	r2, [sp, #8]
 429              		.loc 1 413 3 view .LVU107
 430 004c 029A     		ldr	r2, [sp, #8]
 431              	.LBE7:
 432              		.loc 1 413 3 view .LVU108
 414:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 433              		.loc 1 414 3 view .LVU109
ARM GAS  C:\Temp\ccqcK2oM.s 			page 16


 434              	.LBB8:
 435              		.loc 1 414 3 view .LVU110
 436 004e 0394     		str	r4, [sp, #12]
 437              		.loc 1 414 3 view .LVU111
 438 0050 1A6B     		ldr	r2, [r3, #48]
 439 0052 42F00202 		orr	r2, r2, #2
 440 0056 1A63     		str	r2, [r3, #48]
 441              		.loc 1 414 3 view .LVU112
 442 0058 1A6B     		ldr	r2, [r3, #48]
 443 005a 02F00202 		and	r2, r2, #2
 444 005e 0392     		str	r2, [sp, #12]
 445              		.loc 1 414 3 view .LVU113
 446 0060 039A     		ldr	r2, [sp, #12]
 447              	.LBE8:
 448              		.loc 1 414 3 view .LVU114
 415:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 449              		.loc 1 415 3 view .LVU115
 450              	.LBB9:
 451              		.loc 1 415 3 view .LVU116
 452 0062 0494     		str	r4, [sp, #16]
 453              		.loc 1 415 3 view .LVU117
 454 0064 1A6B     		ldr	r2, [r3, #48]
 455 0066 42F00802 		orr	r2, r2, #8
 456 006a 1A63     		str	r2, [r3, #48]
 457              		.loc 1 415 3 view .LVU118
 458 006c 1B6B     		ldr	r3, [r3, #48]
 459 006e 03F00803 		and	r3, r3, #8
 460 0072 0493     		str	r3, [sp, #16]
 461              		.loc 1 415 3 view .LVU119
 462 0074 049B     		ldr	r3, [sp, #16]
 463              	.LBE9:
 464              		.loc 1 415 3 view .LVU120
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 418:Core/Src/main.c ****   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 465              		.loc 1 418 3 view .LVU121
 466 0076 2F4E     		ldr	r6, .L27+4
 467 0078 2246     		mov	r2, r4
 468 007a 2021     		movs	r1, #32
 469 007c 3046     		mov	r0, r6
 470 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 471              	.LVL28:
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /*Configure GPIO pin : BLUE_BUTTON_Pin */
 421:Core/Src/main.c ****   GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 472              		.loc 1 421 3 view .LVU122
 473              		.loc 1 421 23 is_stmt 0 view .LVU123
 474 0082 4FF40053 		mov	r3, #8192
 475 0086 0593     		str	r3, [sp, #20]
 422:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 476              		.loc 1 422 3 is_stmt 1 view .LVU124
 477              		.loc 1 422 24 is_stmt 0 view .LVU125
 478 0088 4FF48813 		mov	r3, #1114112
 479 008c 0693     		str	r3, [sp, #24]
 423:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 480              		.loc 1 423 3 is_stmt 1 view .LVU126
 481              		.loc 1 423 24 is_stmt 0 view .LVU127
ARM GAS  C:\Temp\ccqcK2oM.s 			page 17


 482 008e 0794     		str	r4, [sp, #28]
 424:Core/Src/main.c ****   HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 483              		.loc 1 424 3 is_stmt 1 view .LVU128
 484 0090 294F     		ldr	r7, .L27+8
 485 0092 05A9     		add	r1, sp, #20
 486 0094 3846     		mov	r0, r7
 487 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 488              	.LVL29:
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
 427:Core/Src/main.c ****                            PC4 PC5 PC6 PC7
 428:Core/Src/main.c ****                            PC8 PC9 PC10 PC11
 429:Core/Src/main.c ****                            PC12 */
 430:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 489              		.loc 1 430 3 view .LVU129
 490              		.loc 1 430 23 is_stmt 0 view .LVU130
 491 009a 41F6FF73 		movw	r3, #8191
 492 009e 0593     		str	r3, [sp, #20]
 431:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 432:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 433:Core/Src/main.c ****                           |GPIO_PIN_12;
 434:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 493              		.loc 1 434 3 is_stmt 1 view .LVU131
 494              		.loc 1 434 24 is_stmt 0 view .LVU132
 495 00a0 0325     		movs	r5, #3
 496 00a2 0695     		str	r5, [sp, #24]
 435:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 497              		.loc 1 435 3 is_stmt 1 view .LVU133
 498              		.loc 1 435 24 is_stmt 0 view .LVU134
 499 00a4 0794     		str	r4, [sp, #28]
 436:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 500              		.loc 1 436 3 is_stmt 1 view .LVU135
 501 00a6 05A9     		add	r1, sp, #20
 502 00a8 3846     		mov	r0, r7
 503 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 504              	.LVL30:
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA6 PA7
 439:Core/Src/main.c ****                            PA8 PA9 PA10 PA11
 440:Core/Src/main.c ****                            PA12 PA15 */
 441:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 505              		.loc 1 441 3 view .LVU136
 506              		.loc 1 441 23 is_stmt 0 view .LVU137
 507 00ae 49F6C373 		movw	r3, #40899
 508 00b2 0593     		str	r3, [sp, #20]
 442:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 443:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_15;
 444:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 509              		.loc 1 444 3 is_stmt 1 view .LVU138
 510              		.loc 1 444 24 is_stmt 0 view .LVU139
 511 00b4 0695     		str	r5, [sp, #24]
 445:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 512              		.loc 1 445 3 is_stmt 1 view .LVU140
 513              		.loc 1 445 24 is_stmt 0 view .LVU141
 514 00b6 0794     		str	r4, [sp, #28]
 446:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 515              		.loc 1 446 3 is_stmt 1 view .LVU142
ARM GAS  C:\Temp\ccqcK2oM.s 			page 18


 516 00b8 05A9     		add	r1, sp, #20
 517 00ba 3046     		mov	r0, r6
 518 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 519              	.LVL31:
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /*Configure GPIO pin : VL53L1X_INT_Pin */
 449:Core/Src/main.c ****   GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 520              		.loc 1 449 3 view .LVU143
 521              		.loc 1 449 23 is_stmt 0 view .LVU144
 522 00c0 1023     		movs	r3, #16
 523 00c2 0593     		str	r3, [sp, #20]
 450:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 524              		.loc 1 450 3 is_stmt 1 view .LVU145
 525              		.loc 1 450 24 is_stmt 0 view .LVU146
 526 00c4 4FF40413 		mov	r3, #2162688
 527 00c8 0693     		str	r3, [sp, #24]
 451:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 528              		.loc 1 451 3 is_stmt 1 view .LVU147
 529              		.loc 1 451 24 is_stmt 0 view .LVU148
 530 00ca 0127     		movs	r7, #1
 531 00cc 0797     		str	r7, [sp, #28]
 452:Core/Src/main.c ****   HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 532              		.loc 1 452 3 is_stmt 1 view .LVU149
 533 00ce 05A9     		add	r1, sp, #20
 534 00d0 3046     		mov	r0, r6
 535 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 536              	.LVL32:
 453:Core/Src/main.c **** 
 454:Core/Src/main.c ****   /*Configure GPIO pin : GREEN_LED_Pin */
 455:Core/Src/main.c ****   GPIO_InitStruct.Pin = GREEN_LED_Pin;
 537              		.loc 1 455 3 view .LVU150
 538              		.loc 1 455 23 is_stmt 0 view .LVU151
 539 00d6 2023     		movs	r3, #32
 540 00d8 0593     		str	r3, [sp, #20]
 456:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 541              		.loc 1 456 3 is_stmt 1 view .LVU152
 542              		.loc 1 456 24 is_stmt 0 view .LVU153
 543 00da 0697     		str	r7, [sp, #24]
 457:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 544              		.loc 1 457 3 is_stmt 1 view .LVU154
 545              		.loc 1 457 24 is_stmt 0 view .LVU155
 546 00dc 0794     		str	r4, [sp, #28]
 458:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 547              		.loc 1 458 3 is_stmt 1 view .LVU156
 548              		.loc 1 458 25 is_stmt 0 view .LVU157
 549 00de 0894     		str	r4, [sp, #32]
 459:Core/Src/main.c ****   HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 550              		.loc 1 459 3 is_stmt 1 view .LVU158
 551 00e0 05A9     		add	r1, sp, #20
 552 00e2 3046     		mov	r0, r6
 553 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 554              	.LVL33:
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 462:Core/Src/main.c ****                            PB12 PB13 PB14 PB15
 463:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 464:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
ARM GAS  C:\Temp\ccqcK2oM.s 			page 19


 555              		.loc 1 464 3 view .LVU159
 556              		.loc 1 464 23 is_stmt 0 view .LVU160
 557 00e8 4FF2F743 		movw	r3, #62711
 558 00ec 0593     		str	r3, [sp, #20]
 465:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 466:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 467:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 559              		.loc 1 467 3 is_stmt 1 view .LVU161
 560              		.loc 1 467 24 is_stmt 0 view .LVU162
 561 00ee 0695     		str	r5, [sp, #24]
 468:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 562              		.loc 1 468 3 is_stmt 1 view .LVU163
 563              		.loc 1 468 24 is_stmt 0 view .LVU164
 564 00f0 0794     		str	r4, [sp, #28]
 469:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 565              		.loc 1 469 3 is_stmt 1 view .LVU165
 566 00f2 05A9     		add	r1, sp, #20
 567 00f4 1148     		ldr	r0, .L27+12
 568 00f6 FFF7FEFF 		bl	HAL_GPIO_Init
 569              	.LVL34:
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 472:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 570              		.loc 1 472 3 view .LVU166
 571              		.loc 1 472 23 is_stmt 0 view .LVU167
 572 00fa 0423     		movs	r3, #4
 573 00fc 0593     		str	r3, [sp, #20]
 473:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 574              		.loc 1 473 3 is_stmt 1 view .LVU168
 575              		.loc 1 473 24 is_stmt 0 view .LVU169
 576 00fe 0695     		str	r5, [sp, #24]
 474:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 577              		.loc 1 474 3 is_stmt 1 view .LVU170
 578              		.loc 1 474 24 is_stmt 0 view .LVU171
 579 0100 0794     		str	r4, [sp, #28]
 475:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 580              		.loc 1 475 3 is_stmt 1 view .LVU172
 581 0102 05A9     		add	r1, sp, #20
 582 0104 0E48     		ldr	r0, .L27+16
 583 0106 FFF7FEFF 		bl	HAL_GPIO_Init
 584              	.LVL35:
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* EXTI interrupt init*/
 478:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 585              		.loc 1 478 3 view .LVU173
 586 010a 2246     		mov	r2, r4
 587 010c 2146     		mov	r1, r4
 588 010e 0A20     		movs	r0, #10
 589 0110 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 590              	.LVL36:
 479:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 591              		.loc 1 479 3 view .LVU174
 592 0114 0A20     		movs	r0, #10
 593 0116 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 594              	.LVL37:
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
ARM GAS  C:\Temp\ccqcK2oM.s 			page 20


 595              		.loc 1 481 3 view .LVU175
 596 011a 2246     		mov	r2, r4
 597 011c 2146     		mov	r1, r4
 598 011e 2820     		movs	r0, #40
 599 0120 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 600              	.LVL38:
 482:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 601              		.loc 1 482 3 view .LVU176
 602 0124 2820     		movs	r0, #40
 603 0126 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 604              	.LVL39:
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 485:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 486:Core/Src/main.c **** }
 605              		.loc 1 486 1 is_stmt 0 view .LVU177
 606 012a 0BB0     		add	sp, sp, #44
 607              		.cfi_def_cfa_offset 20
 608              		@ sp needed
 609 012c F0BD     		pop	{r4, r5, r6, r7, pc}
 610              	.L28:
 611 012e 00BF     		.align	2
 612              	.L27:
 613 0130 00380240 		.word	1073887232
 614 0134 00000240 		.word	1073872896
 615 0138 00080240 		.word	1073874944
 616 013c 00040240 		.word	1073873920
 617 0140 000C0240 		.word	1073875968
 618              		.cfi_endproc
 619              	.LFE146:
 621              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 622              		.align	1
 623              		.global	HAL_TIM_PeriodElapsedCallback
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 628              	HAL_TIM_PeriodElapsedCallback:
 629              	.LVL40:
 630              	.LFB147:
 487:Core/Src/main.c **** 
 488:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 489:Core/Src/main.c **** 
 490:Core/Src/main.c **** /* USER CODE END 4 */
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** /**
 493:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 494:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 495:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 496:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 497:Core/Src/main.c ****   * @param  htim : TIM handle
 498:Core/Src/main.c ****   * @retval None
 499:Core/Src/main.c ****   */
 500:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 501:Core/Src/main.c **** {
 631              		.loc 1 501 1 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Temp\ccqcK2oM.s 			page 21


 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		.loc 1 501 1 is_stmt 0 view .LVU179
 636 0000 08B5     		push	{r3, lr}
 637              		.cfi_def_cfa_offset 8
 638              		.cfi_offset 3, -8
 639              		.cfi_offset 14, -4
 502:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 503:Core/Src/main.c **** 
 504:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 505:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 640              		.loc 1 505 3 is_stmt 1 view .LVU180
 641              		.loc 1 505 11 is_stmt 0 view .LVU181
 642 0002 0268     		ldr	r2, [r0]
 643              		.loc 1 505 6 view .LVU182
 644 0004 034B     		ldr	r3, .L33
 645 0006 9A42     		cmp	r2, r3
 646 0008 00D0     		beq	.L32
 647              	.LVL41:
 648              	.L29:
 506:Core/Src/main.c ****     HAL_IncTick();
 507:Core/Src/main.c ****   }
 508:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 511:Core/Src/main.c **** }
 649              		.loc 1 511 1 view .LVU183
 650 000a 08BD     		pop	{r3, pc}
 651              	.LVL42:
 652              	.L32:
 506:Core/Src/main.c ****     HAL_IncTick();
 653              		.loc 1 506 5 is_stmt 1 view .LVU184
 654 000c FFF7FEFF 		bl	HAL_IncTick
 655              	.LVL43:
 656              		.loc 1 511 1 is_stmt 0 view .LVU185
 657 0010 FBE7     		b	.L29
 658              	.L34:
 659 0012 00BF     		.align	2
 660              	.L33:
 661 0014 00000140 		.word	1073807360
 662              		.cfi_endproc
 663              	.LFE147:
 665              		.section	.text.Error_Handler,"ax",%progbits
 666              		.align	1
 667              		.global	Error_Handler
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 672              	Error_Handler:
 673              	.LFB148:
 512:Core/Src/main.c **** 
 513:Core/Src/main.c **** /**
 514:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 515:Core/Src/main.c ****   * @retval None
 516:Core/Src/main.c ****   */
 517:Core/Src/main.c **** void Error_Handler(void)
 518:Core/Src/main.c **** {
 674              		.loc 1 518 1 is_stmt 1 view -0
ARM GAS  C:\Temp\ccqcK2oM.s 			page 22


 675              		.cfi_startproc
 676              		@ Volatile: function does not return.
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 519:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 520:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 521:Core/Src/main.c ****   __disable_irq();
 680              		.loc 1 521 3 view .LVU187
 681              	.LBB10:
 682              	.LBI10:
 683              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\ccqcK2oM.s 			page 23


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  C:\Temp\ccqcK2oM.s 			page 24


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
ARM GAS  C:\Temp\ccqcK2oM.s 			page 25


 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  C:\Temp\ccqcK2oM.s 			page 26


 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccqcK2oM.s 			page 27


 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Temp\ccqcK2oM.s 			page 28


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
ARM GAS  C:\Temp\ccqcK2oM.s 			page 29


 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  C:\Temp\ccqcK2oM.s 			page 30


 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccqcK2oM.s 			page 31


 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
ARM GAS  C:\Temp\ccqcK2oM.s 			page 32


 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  C:\Temp\ccqcK2oM.s 			page 33


 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Temp\ccqcK2oM.s 			page 34


 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  C:\Temp\ccqcK2oM.s 			page 35


 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Temp\ccqcK2oM.s 			page 36


 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
ARM GAS  C:\Temp\ccqcK2oM.s 			page 37


 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
ARM GAS  C:\Temp\ccqcK2oM.s 			page 38


 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
ARM GAS  C:\Temp\ccqcK2oM.s 			page 39


 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 684              		.loc 2 960 27 view .LVU188
 685              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 686              		.loc 2 962 3 view .LVU189
 687              		.syntax unified
 688              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 689 0000 72B6     		cpsid i
 690              	@ 0 "" 2
 691              		.thumb
 692              		.syntax unified
 693              	.L36:
 694              	.LBE11:
 695              	.LBE10:
 522:Core/Src/main.c ****   while (1)
 696              		.loc 1 522 3 discriminator 1 view .LVU190
 523:Core/Src/main.c ****   {
 524:Core/Src/main.c ****   }
 697              		.loc 1 524 3 discriminator 1 view .LVU191
 522:Core/Src/main.c ****   while (1)
 698              		.loc 1 522 9 discriminator 1 view .LVU192
 699 0002 FEE7     		b	.L36
 700              		.cfi_endproc
 701              	.LFE148:
 703              		.section	.text.MX_TIM2_Init,"ax",%progbits
 704              		.align	1
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 709              	MX_TIM2_Init:
 710              	.LFB142:
 266:Core/Src/main.c **** 
 711              		.loc 1 266 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 24
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715 0000 00B5     		push	{lr}
 716              		.cfi_def_cfa_offset 4
 717              		.cfi_offset 14, -4
 718 0002 87B0     		sub	sp, sp, #28
 719              		.cfi_def_cfa_offset 32
 272:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 720              		.loc 1 272 3 view .LVU194
 272:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 721              		.loc 1 272 26 is_stmt 0 view .LVU195
 722 0004 0023     		movs	r3, #0
 723 0006 0293     		str	r3, [sp, #8]
 724 0008 0393     		str	r3, [sp, #12]
 725 000a 0493     		str	r3, [sp, #16]
 726 000c 0593     		str	r3, [sp, #20]
 273:Core/Src/main.c **** 
 727              		.loc 1 273 3 is_stmt 1 view .LVU196
 273:Core/Src/main.c **** 
 728              		.loc 1 273 27 is_stmt 0 view .LVU197
ARM GAS  C:\Temp\ccqcK2oM.s 			page 40


 729 000e 0093     		str	r3, [sp]
 730 0010 0193     		str	r3, [sp, #4]
 278:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 731              		.loc 1 278 3 is_stmt 1 view .LVU198
 278:Core/Src/main.c ****   htim2.Init.Prescaler = 1000-1;
 732              		.loc 1 278 18 is_stmt 0 view .LVU199
 733 0012 1448     		ldr	r0, .L45
 734 0014 4FF08042 		mov	r2, #1073741824
 735 0018 0260     		str	r2, [r0]
 279:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 736              		.loc 1 279 3 is_stmt 1 view .LVU200
 279:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 737              		.loc 1 279 24 is_stmt 0 view .LVU201
 738 001a 40F2E732 		movw	r2, #999
 739 001e 4260     		str	r2, [r0, #4]
 280:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 740              		.loc 1 280 3 is_stmt 1 view .LVU202
 280:Core/Src/main.c ****   htim2.Init.Period = 1000-1;
 741              		.loc 1 280 26 is_stmt 0 view .LVU203
 742 0020 8360     		str	r3, [r0, #8]
 281:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 743              		.loc 1 281 3 is_stmt 1 view .LVU204
 281:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 744              		.loc 1 281 21 is_stmt 0 view .LVU205
 745 0022 C260     		str	r2, [r0, #12]
 282:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 746              		.loc 1 282 3 is_stmt 1 view .LVU206
 282:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 747              		.loc 1 282 28 is_stmt 0 view .LVU207
 748 0024 0361     		str	r3, [r0, #16]
 283:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 749              		.loc 1 283 3 is_stmt 1 view .LVU208
 283:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 750              		.loc 1 283 32 is_stmt 0 view .LVU209
 751 0026 8023     		movs	r3, #128
 752 0028 8361     		str	r3, [r0, #24]
 284:Core/Src/main.c ****   {
 753              		.loc 1 284 3 is_stmt 1 view .LVU210
 284:Core/Src/main.c ****   {
 754              		.loc 1 284 7 is_stmt 0 view .LVU211
 755 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 756              	.LVL44:
 284:Core/Src/main.c ****   {
 757              		.loc 1 284 6 view .LVU212
 758 002e 90B9     		cbnz	r0, .L42
 288:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 759              		.loc 1 288 3 is_stmt 1 view .LVU213
 288:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 760              		.loc 1 288 34 is_stmt 0 view .LVU214
 761 0030 4FF48053 		mov	r3, #4096
 762 0034 0293     		str	r3, [sp, #8]
 289:Core/Src/main.c ****   {
 763              		.loc 1 289 3 is_stmt 1 view .LVU215
 289:Core/Src/main.c ****   {
 764              		.loc 1 289 7 is_stmt 0 view .LVU216
 765 0036 02A9     		add	r1, sp, #8
 766 0038 0A48     		ldr	r0, .L45
ARM GAS  C:\Temp\ccqcK2oM.s 			page 41


 767 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 768              	.LVL45:
 289:Core/Src/main.c ****   {
 769              		.loc 1 289 6 view .LVU217
 770 003e 60B9     		cbnz	r0, .L43
 293:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 771              		.loc 1 293 3 is_stmt 1 view .LVU218
 293:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 772              		.loc 1 293 37 is_stmt 0 view .LVU219
 773 0040 0023     		movs	r3, #0
 774 0042 0093     		str	r3, [sp]
 294:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 775              		.loc 1 294 3 is_stmt 1 view .LVU220
 294:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 776              		.loc 1 294 33 is_stmt 0 view .LVU221
 777 0044 0193     		str	r3, [sp, #4]
 295:Core/Src/main.c ****   {
 778              		.loc 1 295 3 is_stmt 1 view .LVU222
 295:Core/Src/main.c ****   {
 779              		.loc 1 295 7 is_stmt 0 view .LVU223
 780 0046 6946     		mov	r1, sp
 781 0048 0648     		ldr	r0, .L45
 782 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 783              	.LVL46:
 295:Core/Src/main.c ****   {
 784              		.loc 1 295 6 view .LVU224
 785 004e 30B9     		cbnz	r0, .L44
 303:Core/Src/main.c **** 
 786              		.loc 1 303 1 view .LVU225
 787 0050 07B0     		add	sp, sp, #28
 788              		.cfi_remember_state
 789              		.cfi_def_cfa_offset 4
 790              		@ sp needed
 791 0052 5DF804FB 		ldr	pc, [sp], #4
 792              	.L42:
 793              		.cfi_restore_state
 286:Core/Src/main.c ****   }
 794              		.loc 1 286 5 is_stmt 1 view .LVU226
 795 0056 FFF7FEFF 		bl	Error_Handler
 796              	.LVL47:
 797              	.L43:
 291:Core/Src/main.c ****   }
 798              		.loc 1 291 5 view .LVU227
 799 005a FFF7FEFF 		bl	Error_Handler
 800              	.LVL48:
 801              	.L44:
 297:Core/Src/main.c ****   }
 802              		.loc 1 297 5 view .LVU228
 803 005e FFF7FEFF 		bl	Error_Handler
 804              	.LVL49:
 805              	.L46:
 806 0062 00BF     		.align	2
 807              	.L45:
 808 0064 00000000 		.word	htim2
 809              		.cfi_endproc
 810              	.LFE142:
 812              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
ARM GAS  C:\Temp\ccqcK2oM.s 			page 42


 813              		.align	1
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 818              	MX_USART2_UART_Init:
 819              	.LFB144:
 356:Core/Src/main.c **** 
 820              		.loc 1 356 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824 0000 08B5     		push	{r3, lr}
 825              		.cfi_def_cfa_offset 8
 826              		.cfi_offset 3, -8
 827              		.cfi_offset 14, -4
 365:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 828              		.loc 1 365 3 view .LVU230
 365:Core/Src/main.c ****   huart2.Init.BaudRate = 1843200;
 829              		.loc 1 365 19 is_stmt 0 view .LVU231
 830 0002 0D48     		ldr	r0, .L51
 831 0004 0D4B     		ldr	r3, .L51+4
 832 0006 0360     		str	r3, [r0]
 366:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 833              		.loc 1 366 3 is_stmt 1 view .LVU232
 366:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_9B;
 834              		.loc 1 366 24 is_stmt 0 view .LVU233
 835 0008 4FF4E113 		mov	r3, #1843200
 836 000c 4360     		str	r3, [r0, #4]
 367:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 837              		.loc 1 367 3 is_stmt 1 view .LVU234
 367:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_2;
 838              		.loc 1 367 26 is_stmt 0 view .LVU235
 839 000e 4FF48053 		mov	r3, #4096
 840 0012 8360     		str	r3, [r0, #8]
 368:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 841              		.loc 1 368 3 is_stmt 1 view .LVU236
 368:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_EVEN;
 842              		.loc 1 368 24 is_stmt 0 view .LVU237
 843 0014 4FF40053 		mov	r3, #8192
 844 0018 C360     		str	r3, [r0, #12]
 369:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 845              		.loc 1 369 3 is_stmt 1 view .LVU238
 369:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 846              		.loc 1 369 22 is_stmt 0 view .LVU239
 847 001a 4FF48063 		mov	r3, #1024
 848 001e 0361     		str	r3, [r0, #16]
 370:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 849              		.loc 1 370 3 is_stmt 1 view .LVU240
 370:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 850              		.loc 1 370 20 is_stmt 0 view .LVU241
 851 0020 0C23     		movs	r3, #12
 852 0022 4361     		str	r3, [r0, #20]
 371:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 853              		.loc 1 371 3 is_stmt 1 view .LVU242
 371:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 854              		.loc 1 371 25 is_stmt 0 view .LVU243
 855 0024 0023     		movs	r3, #0
ARM GAS  C:\Temp\ccqcK2oM.s 			page 43


 856 0026 8361     		str	r3, [r0, #24]
 372:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 857              		.loc 1 372 3 is_stmt 1 view .LVU244
 372:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 858              		.loc 1 372 28 is_stmt 0 view .LVU245
 859 0028 C361     		str	r3, [r0, #28]
 373:Core/Src/main.c ****   {
 860              		.loc 1 373 3 is_stmt 1 view .LVU246
 373:Core/Src/main.c ****   {
 861              		.loc 1 373 7 is_stmt 0 view .LVU247
 862 002a FFF7FEFF 		bl	HAL_UART_Init
 863              	.LVL50:
 373:Core/Src/main.c ****   {
 864              		.loc 1 373 6 view .LVU248
 865 002e 00B9     		cbnz	r0, .L50
 381:Core/Src/main.c **** 
 866              		.loc 1 381 1 view .LVU249
 867 0030 08BD     		pop	{r3, pc}
 868              	.L50:
 375:Core/Src/main.c ****   }
 869              		.loc 1 375 5 is_stmt 1 view .LVU250
 870 0032 FFF7FEFF 		bl	Error_Handler
 871              	.LVL51:
 872              	.L52:
 873 0036 00BF     		.align	2
 874              	.L51:
 875 0038 00000000 		.word	huart2
 876 003c 00440040 		.word	1073759232
 877              		.cfi_endproc
 878              	.LFE144:
 880              		.section	.text.MX_TIM3_Init,"ax",%progbits
 881              		.align	1
 882              		.syntax unified
 883              		.thumb
 884              		.thumb_func
 886              	MX_TIM3_Init:
 887              	.LFB143:
 311:Core/Src/main.c **** 
 888              		.loc 1 311 1 view -0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 24
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892 0000 00B5     		push	{lr}
 893              		.cfi_def_cfa_offset 4
 894              		.cfi_offset 14, -4
 895 0002 87B0     		sub	sp, sp, #28
 896              		.cfi_def_cfa_offset 32
 317:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 897              		.loc 1 317 3 view .LVU252
 317:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 898              		.loc 1 317 26 is_stmt 0 view .LVU253
 899 0004 0023     		movs	r3, #0
 900 0006 0293     		str	r3, [sp, #8]
 901 0008 0393     		str	r3, [sp, #12]
 902 000a 0493     		str	r3, [sp, #16]
 903 000c 0593     		str	r3, [sp, #20]
 318:Core/Src/main.c **** 
ARM GAS  C:\Temp\ccqcK2oM.s 			page 44


 904              		.loc 1 318 3 is_stmt 1 view .LVU254
 318:Core/Src/main.c **** 
 905              		.loc 1 318 27 is_stmt 0 view .LVU255
 906 000e 0093     		str	r3, [sp]
 907 0010 0193     		str	r3, [sp, #4]
 323:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 908              		.loc 1 323 3 is_stmt 1 view .LVU256
 323:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 909              		.loc 1 323 18 is_stmt 0 view .LVU257
 910 0012 1348     		ldr	r0, .L61
 911 0014 134A     		ldr	r2, .L61+4
 912 0016 0260     		str	r2, [r0]
 324:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 913              		.loc 1 324 3 is_stmt 1 view .LVU258
 324:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 914              		.loc 1 324 24 is_stmt 0 view .LVU259
 915 0018 4360     		str	r3, [r0, #4]
 325:Core/Src/main.c ****   htim3.Init.Period = 65535;
 916              		.loc 1 325 3 is_stmt 1 view .LVU260
 325:Core/Src/main.c ****   htim3.Init.Period = 65535;
 917              		.loc 1 325 26 is_stmt 0 view .LVU261
 918 001a 8360     		str	r3, [r0, #8]
 326:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 919              		.loc 1 326 3 is_stmt 1 view .LVU262
 326:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 920              		.loc 1 326 21 is_stmt 0 view .LVU263
 921 001c 4FF6FF72 		movw	r2, #65535
 922 0020 C260     		str	r2, [r0, #12]
 327:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 923              		.loc 1 327 3 is_stmt 1 view .LVU264
 327:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 924              		.loc 1 327 28 is_stmt 0 view .LVU265
 925 0022 0361     		str	r3, [r0, #16]
 328:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 926              		.loc 1 328 3 is_stmt 1 view .LVU266
 328:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 927              		.loc 1 328 32 is_stmt 0 view .LVU267
 928 0024 8023     		movs	r3, #128
 929 0026 8361     		str	r3, [r0, #24]
 329:Core/Src/main.c ****   {
 930              		.loc 1 329 3 is_stmt 1 view .LVU268
 329:Core/Src/main.c ****   {
 931              		.loc 1 329 7 is_stmt 0 view .LVU269
 932 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 933              	.LVL52:
 329:Core/Src/main.c ****   {
 934              		.loc 1 329 6 view .LVU270
 935 002c 90B9     		cbnz	r0, .L58
 333:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 936              		.loc 1 333 3 is_stmt 1 view .LVU271
 333:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 937              		.loc 1 333 34 is_stmt 0 view .LVU272
 938 002e 4FF48053 		mov	r3, #4096
 939 0032 0293     		str	r3, [sp, #8]
 334:Core/Src/main.c ****   {
 940              		.loc 1 334 3 is_stmt 1 view .LVU273
 334:Core/Src/main.c ****   {
ARM GAS  C:\Temp\ccqcK2oM.s 			page 45


 941              		.loc 1 334 7 is_stmt 0 view .LVU274
 942 0034 02A9     		add	r1, sp, #8
 943 0036 0A48     		ldr	r0, .L61
 944 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 945              	.LVL53:
 334:Core/Src/main.c ****   {
 946              		.loc 1 334 6 view .LVU275
 947 003c 60B9     		cbnz	r0, .L59
 338:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 948              		.loc 1 338 3 is_stmt 1 view .LVU276
 338:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 949              		.loc 1 338 37 is_stmt 0 view .LVU277
 950 003e 0023     		movs	r3, #0
 951 0040 0093     		str	r3, [sp]
 339:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 952              		.loc 1 339 3 is_stmt 1 view .LVU278
 339:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 953              		.loc 1 339 33 is_stmt 0 view .LVU279
 954 0042 0193     		str	r3, [sp, #4]
 340:Core/Src/main.c ****   {
 955              		.loc 1 340 3 is_stmt 1 view .LVU280
 340:Core/Src/main.c ****   {
 956              		.loc 1 340 7 is_stmt 0 view .LVU281
 957 0044 6946     		mov	r1, sp
 958 0046 0648     		ldr	r0, .L61
 959 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 960              	.LVL54:
 340:Core/Src/main.c ****   {
 961              		.loc 1 340 6 view .LVU282
 962 004c 30B9     		cbnz	r0, .L60
 348:Core/Src/main.c **** 
 963              		.loc 1 348 1 view .LVU283
 964 004e 07B0     		add	sp, sp, #28
 965              		.cfi_remember_state
 966              		.cfi_def_cfa_offset 4
 967              		@ sp needed
 968 0050 5DF804FB 		ldr	pc, [sp], #4
 969              	.L58:
 970              		.cfi_restore_state
 331:Core/Src/main.c ****   }
 971              		.loc 1 331 5 is_stmt 1 view .LVU284
 972 0054 FFF7FEFF 		bl	Error_Handler
 973              	.LVL55:
 974              	.L59:
 336:Core/Src/main.c ****   }
 975              		.loc 1 336 5 view .LVU285
 976 0058 FFF7FEFF 		bl	Error_Handler
 977              	.LVL56:
 978              	.L60:
 342:Core/Src/main.c ****   }
 979              		.loc 1 342 5 view .LVU286
 980 005c FFF7FEFF 		bl	Error_Handler
 981              	.LVL57:
 982              	.L62:
 983              		.align	2
 984              	.L61:
 985 0060 00000000 		.word	htim3
ARM GAS  C:\Temp\ccqcK2oM.s 			page 46


 986 0064 00040040 		.word	1073742848
 987              		.cfi_endproc
 988              	.LFE143:
 990              		.section	.text.SystemClock_Config,"ax",%progbits
 991              		.align	1
 992              		.global	SystemClock_Config
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 997              	SystemClock_Config:
 998              	.LFB141:
 219:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 999              		.loc 1 219 1 view -0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 80
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003 0000 00B5     		push	{lr}
 1004              		.cfi_def_cfa_offset 4
 1005              		.cfi_offset 14, -4
 1006 0002 95B0     		sub	sp, sp, #84
 1007              		.cfi_def_cfa_offset 88
 220:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1008              		.loc 1 220 3 view .LVU288
 220:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1009              		.loc 1 220 22 is_stmt 0 view .LVU289
 1010 0004 3022     		movs	r2, #48
 1011 0006 0021     		movs	r1, #0
 1012 0008 08A8     		add	r0, sp, #32
 1013 000a FFF7FEFF 		bl	memset
 1014              	.LVL58:
 221:Core/Src/main.c **** 
 1015              		.loc 1 221 3 is_stmt 1 view .LVU290
 221:Core/Src/main.c **** 
 1016              		.loc 1 221 22 is_stmt 0 view .LVU291
 1017 000e 0023     		movs	r3, #0
 1018 0010 0393     		str	r3, [sp, #12]
 1019 0012 0493     		str	r3, [sp, #16]
 1020 0014 0593     		str	r3, [sp, #20]
 1021 0016 0693     		str	r3, [sp, #24]
 1022 0018 0793     		str	r3, [sp, #28]
 225:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1023              		.loc 1 225 3 is_stmt 1 view .LVU292
 1024              	.LBB12:
 225:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1025              		.loc 1 225 3 view .LVU293
 1026 001a 0193     		str	r3, [sp, #4]
 225:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1027              		.loc 1 225 3 view .LVU294
 1028 001c 1E4A     		ldr	r2, .L69
 1029 001e 116C     		ldr	r1, [r2, #64]
 1030 0020 41F08051 		orr	r1, r1, #268435456
 1031 0024 1164     		str	r1, [r2, #64]
 225:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1032              		.loc 1 225 3 view .LVU295
 1033 0026 126C     		ldr	r2, [r2, #64]
 1034 0028 02F08052 		and	r2, r2, #268435456
 1035 002c 0192     		str	r2, [sp, #4]
ARM GAS  C:\Temp\ccqcK2oM.s 			page 47


 225:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1036              		.loc 1 225 3 view .LVU296
 1037 002e 019A     		ldr	r2, [sp, #4]
 1038              	.LBE12:
 225:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1039              		.loc 1 225 3 view .LVU297
 226:Core/Src/main.c **** 
 1040              		.loc 1 226 3 view .LVU298
 1041              	.LBB13:
 226:Core/Src/main.c **** 
 1042              		.loc 1 226 3 view .LVU299
 1043 0030 0293     		str	r3, [sp, #8]
 226:Core/Src/main.c **** 
 1044              		.loc 1 226 3 view .LVU300
 1045 0032 1A4A     		ldr	r2, .L69+4
 1046 0034 1168     		ldr	r1, [r2]
 1047 0036 41F44041 		orr	r1, r1, #49152
 1048 003a 1160     		str	r1, [r2]
 226:Core/Src/main.c **** 
 1049              		.loc 1 226 3 view .LVU301
 1050 003c 1268     		ldr	r2, [r2]
 1051 003e 02F44042 		and	r2, r2, #49152
 1052 0042 0292     		str	r2, [sp, #8]
 226:Core/Src/main.c **** 
 1053              		.loc 1 226 3 view .LVU302
 1054 0044 029A     		ldr	r2, [sp, #8]
 1055              	.LBE13:
 226:Core/Src/main.c **** 
 1056              		.loc 1 226 3 view .LVU303
 231:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1057              		.loc 1 231 3 view .LVU304
 231:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1058              		.loc 1 231 36 is_stmt 0 view .LVU305
 1059 0046 0222     		movs	r2, #2
 1060 0048 0892     		str	r2, [sp, #32]
 232:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1061              		.loc 1 232 3 is_stmt 1 view .LVU306
 232:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1062              		.loc 1 232 30 is_stmt 0 view .LVU307
 1063 004a 0121     		movs	r1, #1
 1064 004c 0B91     		str	r1, [sp, #44]
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1065              		.loc 1 233 3 is_stmt 1 view .LVU308
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1066              		.loc 1 233 41 is_stmt 0 view .LVU309
 1067 004e 1021     		movs	r1, #16
 1068 0050 0C91     		str	r1, [sp, #48]
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1069              		.loc 1 234 3 is_stmt 1 view .LVU310
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1070              		.loc 1 234 34 is_stmt 0 view .LVU311
 1071 0052 0E92     		str	r2, [sp, #56]
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1072              		.loc 1 235 3 is_stmt 1 view .LVU312
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1073              		.loc 1 235 35 is_stmt 0 view .LVU313
 1074 0054 0F93     		str	r3, [sp, #60]
ARM GAS  C:\Temp\ccqcK2oM.s 			page 48


 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1075              		.loc 1 236 3 is_stmt 1 view .LVU314
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1076              		.loc 1 236 30 is_stmt 0 view .LVU315
 1077 0056 0823     		movs	r3, #8
 1078 0058 1093     		str	r3, [sp, #64]
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1079              		.loc 1 237 3 is_stmt 1 view .LVU316
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1080              		.loc 1 237 30 is_stmt 0 view .LVU317
 1081 005a 6423     		movs	r3, #100
 1082 005c 1193     		str	r3, [sp, #68]
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1083              		.loc 1 238 3 is_stmt 1 view .LVU318
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1084              		.loc 1 238 30 is_stmt 0 view .LVU319
 1085 005e 1292     		str	r2, [sp, #72]
 239:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1086              		.loc 1 239 3 is_stmt 1 view .LVU320
 239:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1087              		.loc 1 239 30 is_stmt 0 view .LVU321
 1088 0060 0423     		movs	r3, #4
 1089 0062 1393     		str	r3, [sp, #76]
 240:Core/Src/main.c ****   {
 1090              		.loc 1 240 3 is_stmt 1 view .LVU322
 240:Core/Src/main.c ****   {
 1091              		.loc 1 240 7 is_stmt 0 view .LVU323
 1092 0064 08A8     		add	r0, sp, #32
 1093 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1094              	.LVL59:
 240:Core/Src/main.c ****   {
 1095              		.loc 1 240 6 view .LVU324
 1096 006a 88B9     		cbnz	r0, .L67
 247:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1097              		.loc 1 247 3 is_stmt 1 view .LVU325
 247:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1098              		.loc 1 247 31 is_stmt 0 view .LVU326
 1099 006c 0F23     		movs	r3, #15
 1100 006e 0393     		str	r3, [sp, #12]
 249:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1101              		.loc 1 249 3 is_stmt 1 view .LVU327
 249:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1102              		.loc 1 249 34 is_stmt 0 view .LVU328
 1103 0070 0223     		movs	r3, #2
 1104 0072 0493     		str	r3, [sp, #16]
 250:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1105              		.loc 1 250 3 is_stmt 1 view .LVU329
 250:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1106              		.loc 1 250 35 is_stmt 0 view .LVU330
 1107 0074 0023     		movs	r3, #0
 1108 0076 0593     		str	r3, [sp, #20]
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1109              		.loc 1 251 3 is_stmt 1 view .LVU331
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1110              		.loc 1 251 36 is_stmt 0 view .LVU332
 1111 0078 4FF48052 		mov	r2, #4096
 1112 007c 0692     		str	r2, [sp, #24]
ARM GAS  C:\Temp\ccqcK2oM.s 			page 49


 252:Core/Src/main.c **** 
 1113              		.loc 1 252 3 is_stmt 1 view .LVU333
 252:Core/Src/main.c **** 
 1114              		.loc 1 252 36 is_stmt 0 view .LVU334
 1115 007e 0793     		str	r3, [sp, #28]
 254:Core/Src/main.c ****   {
 1116              		.loc 1 254 3 is_stmt 1 view .LVU335
 254:Core/Src/main.c ****   {
 1117              		.loc 1 254 7 is_stmt 0 view .LVU336
 1118 0080 0321     		movs	r1, #3
 1119 0082 03A8     		add	r0, sp, #12
 1120 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1121              	.LVL60:
 254:Core/Src/main.c ****   {
 1122              		.loc 1 254 6 view .LVU337
 1123 0088 20B9     		cbnz	r0, .L68
 258:Core/Src/main.c **** 
 1124              		.loc 1 258 1 view .LVU338
 1125 008a 15B0     		add	sp, sp, #84
 1126              		.cfi_remember_state
 1127              		.cfi_def_cfa_offset 4
 1128              		@ sp needed
 1129 008c 5DF804FB 		ldr	pc, [sp], #4
 1130              	.L67:
 1131              		.cfi_restore_state
 242:Core/Src/main.c ****   }
 1132              		.loc 1 242 5 is_stmt 1 view .LVU339
 1133 0090 FFF7FEFF 		bl	Error_Handler
 1134              	.LVL61:
 1135              	.L68:
 256:Core/Src/main.c ****   }
 1136              		.loc 1 256 5 view .LVU340
 1137 0094 FFF7FEFF 		bl	Error_Handler
 1138              	.LVL62:
 1139              	.L70:
 1140              		.align	2
 1141              	.L69:
 1142 0098 00380240 		.word	1073887232
 1143 009c 00700040 		.word	1073770496
 1144              		.cfi_endproc
 1145              	.LFE141:
 1147              		.section	.text.main,"ax",%progbits
 1148              		.align	1
 1149              		.global	main
 1150              		.syntax unified
 1151              		.thumb
 1152              		.thumb_func
 1154              	main:
 1155              	.LFB140:
 161:Core/Src/main.c **** 
 1156              		.loc 1 161 1 view -0
 1157              		.cfi_startproc
 1158              		@ Volatile: function does not return.
 1159              		@ args = 0, pretend = 0, frame = 0
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 1161 0000 08B5     		push	{r3, lr}
 1162              		.cfi_def_cfa_offset 8
ARM GAS  C:\Temp\ccqcK2oM.s 			page 50


 1163              		.cfi_offset 3, -8
 1164              		.cfi_offset 14, -4
 170:Core/Src/main.c **** 
 1165              		.loc 1 170 3 view .LVU342
 1166 0002 FFF7FEFF 		bl	HAL_Init
 1167              	.LVL63:
 177:Core/Src/main.c **** 
 1168              		.loc 1 177 3 view .LVU343
 1169 0006 FFF7FEFF 		bl	SystemClock_Config
 1170              	.LVL64:
 184:Core/Src/main.c ****   MX_DMA_Init();
 1171              		.loc 1 184 3 view .LVU344
 1172 000a FFF7FEFF 		bl	MX_GPIO_Init
 1173              	.LVL65:
 185:Core/Src/main.c ****   MX_TIM2_Init();
 1174              		.loc 1 185 3 view .LVU345
 1175 000e FFF7FEFF 		bl	MX_DMA_Init
 1176              	.LVL66:
 186:Core/Src/main.c ****   MX_USART2_UART_Init();
 1177              		.loc 1 186 3 view .LVU346
 1178 0012 FFF7FEFF 		bl	MX_TIM2_Init
 1179              	.LVL67:
 187:Core/Src/main.c ****   MX_TIM3_Init();
 1180              		.loc 1 187 3 view .LVU347
 1181 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 1182              	.LVL68:
 188:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1183              		.loc 1 188 3 view .LVU348
 1184 001a FFF7FEFF 		bl	MX_TIM3_Init
 1185              	.LVL69:
 190:Core/Src/main.c ****     initialCalibration();
 1186              		.loc 1 190 3 view .LVU349
 1187              	.L72:
 190:Core/Src/main.c ****     initialCalibration();
 1188              		.loc 1 190 21 view .LVU350
 1189 001e 094B     		ldr	r3, .L78
 1190 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1191 0022 012B     		cmp	r3, #1
 1192 0024 02D0     		beq	.L77
 191:Core/Src/main.c ****   }
 1193              		.loc 1 191 5 view .LVU351
 1194 0026 FFF7FEFF 		bl	initialCalibration
 1195              	.LVL70:
 1196 002a F8E7     		b	.L72
 1197              	.L77:
 194:Core/Src/main.c ****   /* USER CODE END 2 */
 1198              		.loc 1 194 3 view .LVU352
 1199 002c FFF7FEFF 		bl	initVL53L1A1
 1200              	.LVL71:
 1201              	.L74:
 200:Core/Src/main.c ****   {
 1202              		.loc 1 200 3 view .LVU353
 202:Core/Src/main.c ****       getVL53L1A1();
 1203              		.loc 1 202 5 view .LVU354
 202:Core/Src/main.c ****       getVL53L1A1();
 1204              		.loc 1 202 22 is_stmt 0 view .LVU355
 1205 0030 054B     		ldr	r3, .L78+4
ARM GAS  C:\Temp\ccqcK2oM.s 			page 51


 1206 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 202:Core/Src/main.c ****       getVL53L1A1();
 1207              		.loc 1 202 8 view .LVU356
 1208 0034 012B     		cmp	r3, #1
 1209 0036 FBD1     		bne	.L74
 203:Core/Src/main.c ****       clearToGetL1 = 0;
 1210              		.loc 1 203 7 is_stmt 1 view .LVU357
 1211 0038 FFF7FEFF 		bl	getVL53L1A1
 1212              	.LVL72:
 204:Core/Src/main.c ****     }
 1213              		.loc 1 204 7 view .LVU358
 204:Core/Src/main.c ****     }
 1214              		.loc 1 204 20 is_stmt 0 view .LVU359
 1215 003c 024B     		ldr	r3, .L78+4
 1216 003e 0022     		movs	r2, #0
 1217 0040 1A70     		strb	r2, [r3]
 1218 0042 F5E7     		b	.L74
 1219              	.L79:
 1220              		.align	2
 1221              	.L78:
 1222 0044 00000000 		.word	calibrated
 1223 0048 00000000 		.word	clearToGetL1
 1224              		.cfi_endproc
 1225              	.LFE140:
 1227              		.global	clearToGetL1
 1228              		.section	.bss.clearToGetL1,"aw",%nobits
 1231              	clearToGetL1:
 1232 0000 00       		.space	1
 1233              		.global	counter
 1234              		.section	.bss.counter,"aw",%nobits
 1235              		.align	2
 1238              	counter:
 1239 0000 00000000 		.space	4
 1240              		.global	calibrated
 1241              		.section	.bss.calibrated,"aw",%nobits
 1244              	calibrated:
 1245 0000 00       		.space	1
 1246              		.global	clearToSend
 1247              		.section	.bss.clearToSend,"aw",%nobits
 1250              	clearToSend:
 1251 0000 00       		.space	1
 1252              		.global	bigBuffer
 1253              		.section	.bss.bigBuffer,"aw",%nobits
 1254              		.align	2
 1257              	bigBuffer:
 1258 0000 00000000 		.space	14
 1258      00000000 
 1258      00000000 
 1258      0000
 1259              		.global	numberOfSimulinkBytes
 1260              		.section	.rodata.numberOfSimulinkBytes,"a"
 1261              		.align	2
 1264              	numberOfSimulinkBytes:
 1265 0000 08000000 		.word	8
 1266              		.global	expectedTerminator
 1267              		.section	.rodata.expectedTerminator,"a"
 1268              		.align	2
ARM GAS  C:\Temp\ccqcK2oM.s 			page 52


 1271              	expectedTerminator:
 1272 0000 415F4A   		.ascii	"A_J"
 1273              		.global	expectedHeader
 1274              		.section	.rodata.expectedHeader,"a"
 1275              		.align	2
 1278              	expectedHeader:
 1279 0000 4A5F41   		.ascii	"J_A"
 1280              		.global	Profile
 1281              		.section	.bss.Profile,"aw",%nobits
 1282              		.align	2
 1285              	Profile:
 1286 0000 00000000 		.space	20
 1286      00000000 
 1286      00000000 
 1286      00000000 
 1286      00000000 
 1287              		.global	TOF_right
 1288              		.section	.bss.TOF_right,"aw",%nobits
 1289              		.align	2
 1292              	TOF_right:
 1293 0000 00000000 		.space	72
 1293      00000000 
 1293      00000000 
 1293      00000000 
 1293      00000000 
 1294              		.global	TOF_centre
 1295              		.section	.bss.TOF_centre,"aw",%nobits
 1296              		.align	2
 1299              	TOF_centre:
 1300 0000 00000000 		.space	72
 1300      00000000 
 1300      00000000 
 1300      00000000 
 1300      00000000 
 1301              		.global	TOF_left
 1302              		.section	.bss.TOF_left,"aw",%nobits
 1303              		.align	2
 1306              	TOF_left:
 1307 0000 00000000 		.space	72
 1307      00000000 
 1307      00000000 
 1307      00000000 
 1307      00000000 
 1308              		.global	hdma_usart2_rx
 1309              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 1310              		.align	2
 1313              	hdma_usart2_rx:
 1314 0000 00000000 		.space	96
 1314      00000000 
 1314      00000000 
 1314      00000000 
 1314      00000000 
 1315              		.global	huart2
 1316              		.section	.bss.huart2,"aw",%nobits
 1317              		.align	2
 1320              	huart2:
 1321 0000 00000000 		.space	72
ARM GAS  C:\Temp\ccqcK2oM.s 			page 53


 1321      00000000 
 1321      00000000 
 1321      00000000 
 1321      00000000 
 1322              		.global	htim3
 1323              		.section	.bss.htim3,"aw",%nobits
 1324              		.align	2
 1327              	htim3:
 1328 0000 00000000 		.space	72
 1328      00000000 
 1328      00000000 
 1328      00000000 
 1328      00000000 
 1329              		.global	htim2
 1330              		.section	.bss.htim2,"aw",%nobits
 1331              		.align	2
 1334              	htim2:
 1335 0000 00000000 		.space	72
 1335      00000000 
 1335      00000000 
 1335      00000000 
 1335      00000000 
 1336              		.text
 1337              	.Letext0:
 1338              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1339              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1340              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1341              		.file 6 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 1342              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1343              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1344              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1345              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1346              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1347              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1348              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1349              		.file 14 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 1350              		.file 15 "Drivers/BSP/53L1A2/53l1a2_ranging_sensor.h"
 1351              		.file 16 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1352              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1353              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1354              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1355              		.file 20 "Core/Inc/VL53L1A1_Simulink.h"
 1356              		.file 21 "<built-in>"
ARM GAS  C:\Temp\ccqcK2oM.s 			page 54


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\ccqcK2oM.s:21     .text.configureTimer:00000000 $t
  C:\Temp\ccqcK2oM.s:27     .text.configureTimer:00000000 configureTimer
  C:\Temp\ccqcK2oM.s:101    .text.configureTimer:00000058 $d
  C:\Temp\ccqcK2oM.s:107    .text.configureOtherTimer:00000000 $t
  C:\Temp\ccqcK2oM.s:113    .text.configureOtherTimer:00000000 configureOtherTimer
  C:\Temp\ccqcK2oM.s:187    .text.configureOtherTimer:00000054 $d
  C:\Temp\ccqcK2oM.s:194    .text.initialCalibration:00000000 $t
  C:\Temp\ccqcK2oM.s:200    .text.initialCalibration:00000000 initialCalibration
  C:\Temp\ccqcK2oM.s:287    .text.initialCalibration:0000006c $d
  C:\Temp\ccqcK2oM.s:1257   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\ccqcK2oM.s:1320   .bss.huart2:00000000 huart2
  C:\Temp\ccqcK2oM.s:1244   .bss.calibrated:00000000 calibrated
  C:\Temp\ccqcK2oM.s:1334   .bss.htim2:00000000 htim2
  C:\Temp\ccqcK2oM.s:1327   .bss.htim3:00000000 htim3
  C:\Temp\ccqcK2oM.s:298    .text.MX_DMA_Init:00000000 $t
  C:\Temp\ccqcK2oM.s:304    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\ccqcK2oM.s:350    .text.MX_DMA_Init:00000030 $d
  C:\Temp\ccqcK2oM.s:355    .text.MX_GPIO_Init:00000000 $t
  C:\Temp\ccqcK2oM.s:361    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\ccqcK2oM.s:613    .text.MX_GPIO_Init:00000130 $d
  C:\Temp\ccqcK2oM.s:622    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
  C:\Temp\ccqcK2oM.s:628    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
  C:\Temp\ccqcK2oM.s:661    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
  C:\Temp\ccqcK2oM.s:666    .text.Error_Handler:00000000 $t
  C:\Temp\ccqcK2oM.s:672    .text.Error_Handler:00000000 Error_Handler
  C:\Temp\ccqcK2oM.s:704    .text.MX_TIM2_Init:00000000 $t
  C:\Temp\ccqcK2oM.s:709    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\ccqcK2oM.s:808    .text.MX_TIM2_Init:00000064 $d
  C:\Temp\ccqcK2oM.s:813    .text.MX_USART2_UART_Init:00000000 $t
  C:\Temp\ccqcK2oM.s:818    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
  C:\Temp\ccqcK2oM.s:875    .text.MX_USART2_UART_Init:00000038 $d
  C:\Temp\ccqcK2oM.s:881    .text.MX_TIM3_Init:00000000 $t
  C:\Temp\ccqcK2oM.s:886    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
  C:\Temp\ccqcK2oM.s:985    .text.MX_TIM3_Init:00000060 $d
  C:\Temp\ccqcK2oM.s:991    .text.SystemClock_Config:00000000 $t
  C:\Temp\ccqcK2oM.s:997    .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\ccqcK2oM.s:1142   .text.SystemClock_Config:00000098 $d
  C:\Temp\ccqcK2oM.s:1148   .text.main:00000000 $t
  C:\Temp\ccqcK2oM.s:1154   .text.main:00000000 main
  C:\Temp\ccqcK2oM.s:1222   .text.main:00000044 $d
  C:\Temp\ccqcK2oM.s:1231   .bss.clearToGetL1:00000000 clearToGetL1
  C:\Temp\ccqcK2oM.s:1232   .bss.clearToGetL1:00000000 $d
  C:\Temp\ccqcK2oM.s:1238   .bss.counter:00000000 counter
  C:\Temp\ccqcK2oM.s:1235   .bss.counter:00000000 $d
  C:\Temp\ccqcK2oM.s:1245   .bss.calibrated:00000000 $d
  C:\Temp\ccqcK2oM.s:1250   .bss.clearToSend:00000000 clearToSend
  C:\Temp\ccqcK2oM.s:1251   .bss.clearToSend:00000000 $d
  C:\Temp\ccqcK2oM.s:1254   .bss.bigBuffer:00000000 $d
  C:\Temp\ccqcK2oM.s:1264   .rodata.numberOfSimulinkBytes:00000000 numberOfSimulinkBytes
  C:\Temp\ccqcK2oM.s:1261   .rodata.numberOfSimulinkBytes:00000000 $d
  C:\Temp\ccqcK2oM.s:1271   .rodata.expectedTerminator:00000000 expectedTerminator
  C:\Temp\ccqcK2oM.s:1268   .rodata.expectedTerminator:00000000 $d
  C:\Temp\ccqcK2oM.s:1278   .rodata.expectedHeader:00000000 expectedHeader
  C:\Temp\ccqcK2oM.s:1275   .rodata.expectedHeader:00000000 $d
  C:\Temp\ccqcK2oM.s:1285   .bss.Profile:00000000 Profile
ARM GAS  C:\Temp\ccqcK2oM.s 			page 55


  C:\Temp\ccqcK2oM.s:1282   .bss.Profile:00000000 $d
  C:\Temp\ccqcK2oM.s:1292   .bss.TOF_right:00000000 TOF_right
  C:\Temp\ccqcK2oM.s:1289   .bss.TOF_right:00000000 $d
  C:\Temp\ccqcK2oM.s:1299   .bss.TOF_centre:00000000 TOF_centre
  C:\Temp\ccqcK2oM.s:1296   .bss.TOF_centre:00000000 $d
  C:\Temp\ccqcK2oM.s:1306   .bss.TOF_left:00000000 TOF_left
  C:\Temp\ccqcK2oM.s:1303   .bss.TOF_left:00000000 $d
  C:\Temp\ccqcK2oM.s:1313   .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
  C:\Temp\ccqcK2oM.s:1310   .bss.hdma_usart2_rx:00000000 $d
  C:\Temp\ccqcK2oM.s:1317   .bss.huart2:00000000 $d
  C:\Temp\ccqcK2oM.s:1324   .bss.htim3:00000000 $d
  C:\Temp\ccqcK2oM.s:1331   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_UART_Receive
receivedFromSimulink
HAL_TIM_Base_Start_IT
L1_BUFFER_SIZE
tof_odr
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
initVL53L1A1
getVL53L1A1
